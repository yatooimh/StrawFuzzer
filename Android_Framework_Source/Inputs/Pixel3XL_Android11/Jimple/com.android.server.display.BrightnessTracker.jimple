public class com.android.server.display.BrightnessTracker extends java.lang.Object
{
    private static final java.lang.String AMBIENT_BRIGHTNESS_STATS_FILE;
    private static final java.lang.String ATTR_BATTERY_LEVEL;
    private static final java.lang.String ATTR_COLOR_SAMPLE_DURATION;
    private static final java.lang.String ATTR_COLOR_TEMPERATURE;
    private static final java.lang.String ATTR_COLOR_VALUE_BUCKETS;
    private static final java.lang.String ATTR_DEFAULT_CONFIG;
    private static final java.lang.String ATTR_LAST_NITS;
    private static final java.lang.String ATTR_LUX;
    private static final java.lang.String ATTR_LUX_TIMESTAMPS;
    private static final java.lang.String ATTR_NIGHT_MODE;
    private static final java.lang.String ATTR_NITS;
    private static final java.lang.String ATTR_PACKAGE_NAME;
    private static final java.lang.String ATTR_POWER_SAVE;
    private static final java.lang.String ATTR_TIMESTAMP;
    private static final java.lang.String ATTR_USER;
    private static final java.lang.String ATTR_USER_POINT;
    private static final int COLOR_SAMPLE_COMPONENT_MASK;
    private static final long COLOR_SAMPLE_DURATION;
    static final boolean DEBUG;
    private static final java.lang.String EVENTS_FILE;
    private static final java.text.SimpleDateFormat FORMAT;
    private static final long LUX_EVENT_HORIZON;
    private static final int MAX_EVENTS;
    private static final long MAX_EVENT_AGE;
    private static final int MSG_BACKGROUND_START;
    private static final int MSG_BRIGHTNESS_CHANGED;
    private static final int MSG_BRIGHTNESS_CONFIG_CHANGED;
    private static final int MSG_START_SENSOR_LISTENER;
    private static final int MSG_STOP_SENSOR_LISTENER;
    static final java.lang.String TAG;
    private static final java.lang.String TAG_EVENT;
    private static final java.lang.String TAG_EVENTS;
    private com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker;
    private final android.os.Handler mBgHandler;
    private android.hardware.display.BrightnessConfiguration mBrightnessConfiguration;
    private android.content.BroadcastReceiver mBroadcastReceiver;
    private boolean mColorSamplingEnabled;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private int mCurrentUserId;
    private final java.lang.Object mDataCollectionLock;
    private com.android.server.display.BrightnessTracker$DisplayListener mDisplayListener;
    private com.android.internal.util.RingBuffer mEvents;
    private boolean mEventsDirty;
    private final java.lang.Object mEventsLock;
    private float mFrameRate;
    private final com.android.server.display.BrightnessTracker$Injector mInjector;
    private float mLastBatteryLevel;
    private float mLastBrightness;
    private java.util.Deque mLastSensorReadings;
    private int mNoFramesToSample;
    private com.android.server.display.BrightnessTracker$SensorListener mSensorListener;
    private boolean mSensorRegistered;
    private com.android.server.display.BrightnessTracker$SettingsObserver mSettingsObserver;
    private boolean mStarted;
    private final android.os.UserManager mUserManager;
    private volatile boolean mWriteBrightnessTrackerStateScheduled;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0, $r1, $r3;
        long $l0, $l1, $l2;
        java.text.SimpleDateFormat $r2;

        <com.android.server.display.BrightnessTracker: java.lang.String TAG_EVENTS> = "events";

        <com.android.server.display.BrightnessTracker: java.lang.String TAG_EVENT> = "event";

        <com.android.server.display.BrightnessTracker: java.lang.String TAG> = "BrightnessTracker";

        <com.android.server.display.BrightnessTracker: int MSG_STOP_SENSOR_LISTENER> = 2;

        <com.android.server.display.BrightnessTracker: int MSG_START_SENSOR_LISTENER> = 3;

        <com.android.server.display.BrightnessTracker: int MSG_BRIGHTNESS_CONFIG_CHANGED> = 4;

        <com.android.server.display.BrightnessTracker: int MSG_BRIGHTNESS_CHANGED> = 1;

        <com.android.server.display.BrightnessTracker: int MSG_BACKGROUND_START> = 0;

        <com.android.server.display.BrightnessTracker: int MAX_EVENTS> = 100;

        <com.android.server.display.BrightnessTracker: java.lang.String EVENTS_FILE> = "brightness_events.xml";

        <com.android.server.display.BrightnessTracker: boolean DEBUG> = 0;

        <com.android.server.display.BrightnessTracker: int COLOR_SAMPLE_COMPONENT_MASK> = 4;

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_USER_POINT> = "userPoint";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_USER> = "user";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_TIMESTAMP> = "timestamp";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_POWER_SAVE> = "powerSaveFactor";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_PACKAGE_NAME> = "packageName";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_NITS> = "nits";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_NIGHT_MODE> = "nightMode";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_LUX_TIMESTAMPS> = "luxTimestamps";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_LUX> = "lux";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_LAST_NITS> = "lastNits";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_DEFAULT_CONFIG> = "defaultConfig";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_COLOR_VALUE_BUCKETS> = "colorValueBuckets";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_COLOR_TEMPERATURE> = "colorTemperature";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_COLOR_SAMPLE_DURATION> = "colorSampleDuration";

        <com.android.server.display.BrightnessTracker: java.lang.String ATTR_BATTERY_LEVEL> = "batteryLevel";

        <com.android.server.display.BrightnessTracker: java.lang.String AMBIENT_BRIGHTNESS_STATS_FILE> = "ambient_brightness_stats.xml";

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(30L);

        <com.android.server.display.BrightnessTracker: long MAX_EVENT_AGE> = $l0;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(10L);

        <com.android.server.display.BrightnessTracker: long LUX_EVENT_HORIZON> = $l1;

        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("MM-dd HH:mm:ss.SSS");

        <com.android.server.display.BrightnessTracker: java.text.SimpleDateFormat FORMAT> = $r2;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $l2 = virtualinvoke $r3.<java.util.concurrent.TimeUnit: long toSeconds(long)>(10L);

        <com.android.server.display.BrightnessTracker: long COLOR_SAMPLE_DURATION> = $l2;

        return;
    }

    public void <init>(android.content.Context, com.android.server.display.BrightnessTracker$Injector)
    {
        com.android.server.display.BrightnessTracker r0;
        android.content.Context r1, $r13;
        com.android.server.display.BrightnessTracker$Injector r2, $r8, $r10;
        java.lang.Object $r3, $r5, $r14;
        com.android.internal.util.RingBuffer $r4;
        java.util.ArrayDeque $r6;
        android.content.ContentResolver $r7;
        com.android.server.display.BrightnessTracker$TrackerHandler $r9;
        android.os.Handler $r11;
        android.os.Looper $r12;
        android.os.UserManager $r15;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.display.BrightnessTracker$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.display.BrightnessTracker: java.lang.Object mEventsLock> = $r3;

        $r4 = new com.android.internal.util.RingBuffer;

        specialinvoke $r4.<com.android.internal.util.RingBuffer: void <init>(java.lang.Class,int)>(class "Landroid/hardware/display/BrightnessChangeEvent;", 100);

        r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents> = $r4;

        r0.<com.android.server.display.BrightnessTracker: int mCurrentUserId> = -10000;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock> = $r5;

        $r6 = new java.util.ArrayDeque;

        specialinvoke $r6.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings> = $r6;

        r0.<com.android.server.display.BrightnessTracker: float mLastBatteryLevel> = #NaNF;

        r0.<com.android.server.display.BrightnessTracker: float mLastBrightness> = -1.0F;

        r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext> = r1;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.server.display.BrightnessTracker: android.content.ContentResolver mContentResolver> = $r7;

        if r2 == null goto label1;

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector> = r2;

        goto label2;

     label1:
        $r8 = new com.android.server.display.BrightnessTracker$Injector;

        specialinvoke $r8.<com.android.server.display.BrightnessTracker$Injector: void <init>()>();

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector> = $r8;

     label2:
        $r9 = new com.android.server.display.BrightnessTracker$TrackerHandler;

        $r10 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r11 = virtualinvoke $r10.<com.android.server.display.BrightnessTracker$Injector: android.os.Handler getBackgroundHandler()>();

        $r12 = virtualinvoke $r11.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r9.<com.android.server.display.BrightnessTracker$TrackerHandler: void <init>(com.android.server.display.BrightnessTracker,android.os.Looper)>(r0, $r12);

        r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler> = $r9;

        $r13 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r15 = (android.os.UserManager) $r14;

        r0.<com.android.server.display.BrightnessTracker: android.os.UserManager mUserManager> = $r15;

        return;
    }

    static void access$1000(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void scheduleWriteBrightnessTrackerState()>();

        return;
    }

    static void access$1100(com.android.server.display.BrightnessTracker, int, int)
    {
        com.android.server.display.BrightnessTracker r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void batteryLevelChanged(int,int)>(i0, i1);

        return;
    }

    static void access$1200(com.android.server.display.BrightnessTracker, float)
    {
        com.android.server.display.BrightnessTracker r0;
        float f0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        f0 := @parameter1: float;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void backgroundStart(float)>(f0);

        return;
    }

    static void access$1300(com.android.server.display.BrightnessTracker, float, boolean, float, boolean, boolean, long)
    {
        com.android.server.display.BrightnessTracker r0;
        float f0, f1;
        boolean z0, z1, z2;
        long l0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        f1 := @parameter3: float;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        l0 := @parameter6: long;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void handleBrightnessChanged(float,boolean,float,boolean,boolean,long)>(f0, z0, f1, z1, z2, l0);

        return;
    }

    static void access$1400(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void startSensorListener()>();

        return;
    }

    static void access$1500(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void enableColorSampling()>();

        return;
    }

    static void access$1600(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void stopSensorListener()>();

        return;
    }

    static void access$1700(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void disableColorSampling()>();

        return;
    }

    static android.hardware.display.BrightnessConfiguration access$1800(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;
        android.hardware.display.BrightnessConfiguration $r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        $r1 = r0.<com.android.server.display.BrightnessTracker: android.hardware.display.BrightnessConfiguration mBrightnessConfiguration>;

        return $r1;
    }

    static android.hardware.display.BrightnessConfiguration access$1802(com.android.server.display.BrightnessTracker, android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.BrightnessTracker r0;
        android.hardware.display.BrightnessConfiguration r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        r1 := @parameter1: android.hardware.display.BrightnessConfiguration;

        r0.<com.android.server.display.BrightnessTracker: android.hardware.display.BrightnessConfiguration mBrightnessConfiguration> = r1;

        return r1;
    }

    static boolean access$1900(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        return $z0;
    }

    static void access$400(com.android.server.display.BrightnessTracker, android.hardware.SensorEvent)
    {
        com.android.server.display.BrightnessTracker r0;
        android.hardware.SensorEvent r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        r1 := @parameter1: android.hardware.SensorEvent;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void recordSensorEvent(android.hardware.SensorEvent)>(r1);

        return;
    }

    static void access$500(com.android.server.display.BrightnessTracker, android.hardware.SensorEvent)
    {
        com.android.server.display.BrightnessTracker r0;
        android.hardware.SensorEvent r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        r1 := @parameter1: android.hardware.SensorEvent;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void recordAmbientBrightnessStats(android.hardware.SensorEvent)>(r1);

        return;
    }

    static void access$600(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void updateColorSampling()>();

        return;
    }

    static android.content.ContentResolver access$700(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;
        android.content.ContentResolver $r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        $r1 = r0.<com.android.server.display.BrightnessTracker: android.content.ContentResolver mContentResolver>;

        return $r1;
    }

    static com.android.server.display.BrightnessTracker$Injector access$800(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;
        com.android.server.display.BrightnessTracker$Injector $r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        $r1 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        return $r1;
    }

    static android.os.Handler access$900(com.android.server.display.BrightnessTracker)
    {
        com.android.server.display.BrightnessTracker r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.display.BrightnessTracker;

        $r1 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        return $r1;
    }

    private void backgroundStart(float)
    {
        com.android.server.display.BrightnessTracker r0;
        float f0;
        com.android.server.display.BrightnessTracker$SensorListener $r1;
        com.android.server.display.BrightnessTracker$SettingsObserver $r2;
        android.os.Handler $r3;
        android.content.ContentResolver $r4;
        com.android.server.display.BrightnessTracker$Injector $r5, $r9, $r11;
        android.content.IntentFilter $r6;
        com.android.server.display.BrightnessTracker$Receiver $r7;
        android.content.Context $r8, $r10;
        java.lang.Throwable $r12;
        java.lang.Object r16;

        r0 := @this: com.android.server.display.BrightnessTracker;

        f0 := @parameter0: float;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void readEvents()>();

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void readAmbientBrightnessStats()>();

        $r1 = new com.android.server.display.BrightnessTracker$SensorListener;

        specialinvoke $r1.<com.android.server.display.BrightnessTracker$SensorListener: void <init>(com.android.server.display.BrightnessTracker,com.android.server.display.BrightnessTracker$1)>(r0, null);

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$SensorListener mSensorListener> = $r1;

        $r2 = new com.android.server.display.BrightnessTracker$SettingsObserver;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        specialinvoke $r2.<com.android.server.display.BrightnessTracker$SettingsObserver: void <init>(com.android.server.display.BrightnessTracker,android.os.Handler)>(r0, $r3);

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$SettingsObserver mSettingsObserver> = $r2;

        $r5 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r4 = r0.<com.android.server.display.BrightnessTracker: android.content.ContentResolver mContentResolver>;

        virtualinvoke $r5.<com.android.server.display.BrightnessTracker$Injector: void registerBrightnessModeObserver(android.content.ContentResolver,android.database.ContentObserver)>($r4, $r2);

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void startSensorListener()>();

        $r6 = new android.content.IntentFilter;

        specialinvoke $r6.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.ACTION_SHUTDOWN");

        virtualinvoke $r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        virtualinvoke $r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke $r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r7 = new com.android.server.display.BrightnessTracker$Receiver;

        specialinvoke $r7.<com.android.server.display.BrightnessTracker$Receiver: void <init>(com.android.server.display.BrightnessTracker,com.android.server.display.BrightnessTracker$1)>(r0, null);

        r0.<com.android.server.display.BrightnessTracker: android.content.BroadcastReceiver mBroadcastReceiver> = $r7;

        $r9 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r8 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        virtualinvoke $r9.<com.android.server.display.BrightnessTracker$Injector: void registerReceiver(android.content.Context,android.content.BroadcastReceiver,android.content.IntentFilter)>($r8, $r7, $r6);

        $r11 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r10 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        virtualinvoke $r11.<com.android.server.display.BrightnessTracker$Injector: void scheduleIdleJob(android.content.Context)>($r10);

        r16 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock>;

        entermonitor r16;

     label1:
        r0.<com.android.server.display.BrightnessTracker: float mLastBrightness> = f0;

        r0.<com.android.server.display.BrightnessTracker: boolean mStarted> = 1;

        exitmonitor r16;

     label2:
        specialinvoke r0.<com.android.server.display.BrightnessTracker: void enableColorSampling()>();

        return;

     label3:
        $r12 := @caughtexception;

     label4:
        exitmonitor r16;

     label5:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void batteryLevelChanged(int, int)
    {
        com.android.server.display.BrightnessTracker r0;
        int i0, i1;
        java.lang.Object r1;
        float f0, $f1, $f2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.BrightnessTracker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock>;

        entermonitor r1;

        $f2 = (float) i0;

        $f1 = (float) i1;

        f0 = $f2 / $f1;

     label1:
        r0.<com.android.server.display.BrightnessTracker: float mLastBatteryLevel> = f0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void disableColorSampling()
    {
        com.android.server.display.BrightnessTracker r0;
        com.android.server.display.BrightnessTracker$DisplayListener r1;
        boolean $z0;
        com.android.server.display.BrightnessTracker$Injector $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        virtualinvoke $r2.<com.android.server.display.BrightnessTracker$Injector: boolean enableColorSampling(boolean,int)>(0, 0);

        r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled> = 0;

        r1 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$DisplayListener mDisplayListener>;

        if r1 == null goto label2;

        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        virtualinvoke $r4.<com.android.server.display.BrightnessTracker$Injector: void unRegisterDisplayListener(android.content.Context,android.hardware.display.DisplayManager$DisplayListener)>($r3, r1);

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$DisplayListener mDisplayListener> = null;

     label2:
        return;
    }

    private void dumpLocal(java.io.PrintWriter)
    {
        com.android.server.display.BrightnessTracker r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r6, $r10, $r14;
        boolean $z0, $z1;
        java.lang.String $r5, $r9, $r13, $r17;
        int $i0;
        float $f0;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSensorRegistered=");

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mSensorRegistered>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorSamplingEnabled=");

        $z1 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNoFramesToSample=");

        $i0 = r0.<com.android.server.display.BrightnessTracker: int mNoFramesToSample>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mFrameRate=");

        $f0 = r0.<com.android.server.display.BrightnessTracker: float mFrameRate>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        return;
    }

    private void enableColorSampling()
    {
        com.android.server.display.BrightnessTracker r0;
        float f0, $f1, $f2;
        android.content.ContentResolver $r1;
        com.android.server.display.BrightnessTracker$Injector $r2, $r4, $r6, $r7, $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.Context $r3, $r5, $r11;
        byte $b0;
        long $l1;
        int $i2, $i3, $i4, $i5, $i6;
        com.android.server.display.BrightnessTracker$DisplayListener $r8, $r9;
        android.os.Handler $r10;
        android.hardware.display.BrightnessConfiguration r14;
        android.hardware.display.DisplayedContentSamplingAttributes r15;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r1 = r0.<com.android.server.display.BrightnessTracker: android.content.ContentResolver mContentResolver>;

        $z0 = virtualinvoke $r2.<com.android.server.display.BrightnessTracker$Injector: boolean isBrightnessModeAutomatic(android.content.ContentResolver)>($r1);

        if $z0 == 0 goto label5;

        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $z1 = virtualinvoke $r4.<com.android.server.display.BrightnessTracker$Injector: boolean isInteractive(android.content.Context)>($r3);

        if $z1 == 0 goto label5;

        $z2 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        if $z2 != 0 goto label5;

        r14 = r0.<com.android.server.display.BrightnessTracker: android.hardware.display.BrightnessConfiguration mBrightnessConfiguration>;

        if r14 == null goto label5;

        $z3 = virtualinvoke r14.<android.hardware.display.BrightnessConfiguration: boolean shouldCollectColorSamples()>();

        if $z3 != 0 goto label1;

        goto label5;

     label1:
        $r6 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r5 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        f0 = virtualinvoke $r6.<com.android.server.display.BrightnessTracker$Injector: float getFrameRate(android.content.Context)>($r5);

        r0.<com.android.server.display.BrightnessTracker: float mFrameRate> = f0;

        $b0 = f0 cmpg 0.0F;

        if $b0 > 0 goto label2;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("BrightnessTracker", "Default display has a zero or negative framerate.");

        return;

     label2:
        $l1 = <com.android.server.display.BrightnessTracker: long COLOR_SAMPLE_DURATION>;

        $f1 = (float) $l1;

        $f2 = f0 * $f1;

        $i2 = (int) $f2;

        r0.<com.android.server.display.BrightnessTracker: int mNoFramesToSample> = $i2;

        $r7 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        r15 = virtualinvoke $r7.<com.android.server.display.BrightnessTracker$Injector: android.hardware.display.DisplayedContentSamplingAttributes getSamplingAttributes()>();

        if r15 == null goto label3;

        $i3 = virtualinvoke r15.<android.hardware.display.DisplayedContentSamplingAttributes: int getPixelFormat()>();

        if $i3 != 55 goto label3;

        $i4 = virtualinvoke r15.<android.hardware.display.DisplayedContentSamplingAttributes: int getComponentMask()>();

        $i5 = $i4 & 4;

        if $i5 == 0 goto label3;

        $r13 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $i6 = r0.<com.android.server.display.BrightnessTracker: int mNoFramesToSample>;

        $z4 = virtualinvoke $r13.<com.android.server.display.BrightnessTracker$Injector: boolean enableColorSampling(boolean,int)>(1, $i6);

        r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled> = $z4;

     label3:
        $z5 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        if $z5 == 0 goto label4;

        $r8 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$DisplayListener mDisplayListener>;

        if $r8 != null goto label4;

        $r9 = new com.android.server.display.BrightnessTracker$DisplayListener;

        specialinvoke $r9.<com.android.server.display.BrightnessTracker$DisplayListener: void <init>(com.android.server.display.BrightnessTracker,com.android.server.display.BrightnessTracker$1)>(r0, null);

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$DisplayListener mDisplayListener> = $r9;

        $r12 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r11 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r10 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        virtualinvoke $r12.<com.android.server.display.BrightnessTracker$Injector: void registerDisplayListener(android.content.Context,android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r11, $r9, $r10);

     label4:
        return;

     label5:
        return;
    }

    private void handleBrightnessChanged(float, boolean, float, boolean, boolean, long)
    {
        com.android.server.display.BrightnessTracker r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, f7, f8;
        android.hardware.display.BrightnessChangeEvent$Builder r1;
        float[] r2;
        long[] r3, $r32, $r34;
        long l0, $l4, $l6, $l7, $l8, $l9, $l10, l11, l14;
        com.android.server.display.BrightnessTracker$LightData r4;
        java.util.Deque $r10, $r13;
        com.android.server.display.BrightnessTracker$Injector $r11, $r12, $r18, $r25, $r28, $r30;
        android.content.ComponentName $r19, $r21;
        int $i1, $i2, $i3, $i5, i12, i13;
        java.lang.String $r22;
        android.content.Context $r24, $r27;
        android.hardware.display.DisplayedContentSample$ColorComponent $r31, $r33;
        java.lang.Object $r36, r43, r48;
        java.util.concurrent.TimeUnit $r37;
        java.lang.Throwable $r38, $r39, $r40, $r41, r52;
        android.os.RemoteException $r42;
        java.util.Iterator r44;
        android.app.ActivityManager$StackInfo r45;
        android.hardware.display.DisplayedContentSample r46;
        android.hardware.display.BrightnessChangeEvent r47;
        com.android.internal.util.RingBuffer $r49;

        r0 := @this: com.android.server.display.BrightnessTracker;

        f7 := @parameter0: float;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        l11 := @parameter5: long;

        r43 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock>;

        entermonitor r43;

     label01:
        $z3 = r0.<com.android.server.display.BrightnessTracker: boolean mStarted>;

        if $z3 != 0 goto label03;

        exitmonitor r43;

     label02:
        return;

     label03:
        f1 = r0.<com.android.server.display.BrightnessTracker: float mLastBrightness>;

        r0.<com.android.server.display.BrightnessTracker: float mLastBrightness> = f7;

     label04:
        if z0 != 0 goto label07;

     label05:
        exitmonitor r43;

     label06:
        return;

     label07:
        r1 = new android.hardware.display.BrightnessChangeEvent$Builder;

        specialinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: void <init>()>();

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setBrightness(float)>(f7);

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setTimeStamp(long)>(l11);

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setPowerBrightnessFactor(float)>(f0);

     label08:
        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setUserBrightnessPoint(boolean)>(z1);

     label09:
        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setIsDefaultBrightnessConfig(boolean)>(z2);

        $r10 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        i12 = interfaceinvoke $r10.<java.util.Deque: int size()>();

     label10:
        if i12 != 0 goto label13;

     label11:
        exitmonitor r43;

     label12:
        return;

     label13:
        r2 = newarray (float)[i12];

        r3 = newarray (long)[i12];

     label14:
        i13 = 0;

     label15:
        $r11 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        l14 = virtualinvoke $r11.<com.android.server.display.BrightnessTracker$Injector: long currentTimeMillis()>();

        $r12 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        l0 = virtualinvoke $r12.<com.android.server.display.BrightnessTracker$Injector: long elapsedRealtimeNanos()>();

        $r13 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        r44 = interfaceinvoke $r13.<java.util.Deque: java.util.Iterator iterator()>();

     label16:
        $z4 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label18;

        $r36 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.display.BrightnessTracker$LightData) $r36;

        $f6 = r4.<com.android.server.display.BrightnessTracker$LightData: float lux>;

        r2[i13] = $f6;

        $r37 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l7 = r4.<com.android.server.display.BrightnessTracker$LightData: long timestamp>;

        $l8 = l0 - $l7;

        $l9 = virtualinvoke $r37.<java.util.concurrent.TimeUnit: long toMillis(long)>($l8);

        $l10 = l14 - $l9;

        r3[i13] = $l10;

     label17:
        i13 = i13 + 1;

        goto label16;

     label18:
        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setLuxValues(float[])>(r2);

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setLuxTimestamps(long[])>(r3);

        $f2 = r0.<com.android.server.display.BrightnessTracker: float mLastBatteryLevel>;

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setBatteryLevel(float)>($f2);

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setLastBrightness(float)>(f1);

     label19:
        exitmonitor r43;

     label20:
        $r18 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        r45 = virtualinvoke $r18.<com.android.server.display.BrightnessTracker$Injector: android.app.ActivityManager$StackInfo getFocusedStack()>();

     label21:
        if r45 == null goto label30;

     label22:
        $r19 = r45.<android.app.ActivityManager$StackInfo: android.content.ComponentName topActivity>;

        if $r19 == null goto label30;

        $i1 = r45.<android.app.ActivityManager$StackInfo: int userId>;

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setUserId(int)>($i1);

        $r21 = r45.<android.app.ActivityManager$StackInfo: android.content.ComponentName topActivity>;

        $r22 = virtualinvoke $r21.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setPackageName(java.lang.String)>($r22);

     label23:
        $r25 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r24 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $z5 = virtualinvoke $r25.<com.android.server.display.BrightnessTracker$Injector: boolean isNightDisplayActivated(android.content.Context)>($r24);

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setNightMode(boolean)>($z5);

        $r28 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r27 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $i2 = virtualinvoke $r28.<com.android.server.display.BrightnessTracker$Injector: int getNightDisplayColorTemperature(android.content.Context)>($r27);

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setColorTemperature(int)>($i2);

        $z6 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        if $z6 == 0 goto label24;

        $r30 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $i3 = r0.<com.android.server.display.BrightnessTracker: int mNoFramesToSample>;

        r46 = virtualinvoke $r30.<com.android.server.display.BrightnessTracker$Injector: android.hardware.display.DisplayedContentSample sampleColor(int)>($i3);

        if r46 == null goto label24;

        $r31 = <android.hardware.display.DisplayedContentSample$ColorComponent: android.hardware.display.DisplayedContentSample$ColorComponent CHANNEL2>;

        $r32 = virtualinvoke r46.<android.hardware.display.DisplayedContentSample: long[] getSampleComponent(android.hardware.display.DisplayedContentSample$ColorComponent)>($r31);

        if $r32 == null goto label24;

        $l4 = virtualinvoke r46.<android.hardware.display.DisplayedContentSample: long getNumFrames()>();

        $f4 = (float) $l4;

        $f3 = r0.<com.android.server.display.BrightnessTracker: float mFrameRate>;

        f8 = $f4 / $f3;

        $r33 = <android.hardware.display.DisplayedContentSample$ColorComponent: android.hardware.display.DisplayedContentSample$ColorComponent CHANNEL2>;

        $r34 = virtualinvoke r46.<android.hardware.display.DisplayedContentSample: long[] getSampleComponent(android.hardware.display.DisplayedContentSample$ColorComponent)>($r33);

        $f5 = f8 * 1000.0F;

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f5);

        $l6 = (long) $i5;

        virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setColorValues(long[],long)>($r34, $l6);

     label24:
        r47 = virtualinvoke r1.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent build()>();

        r48 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mEventsLock>;

        entermonitor r48;

     label25:
        r0.<com.android.server.display.BrightnessTracker: boolean mEventsDirty> = 1;

        $r49 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        virtualinvoke $r49.<com.android.internal.util.RingBuffer: void append(java.lang.Object)>(r47);

        exitmonitor r48;

     label26:
        return;

     label27:
        $r38 := @caughtexception;

     label28:
        exitmonitor r48;

     label29:
        throw $r38;

     label30:
        return;

     label31:
        $r42 := @caughtexception;

        return;

     label32:
        $r41 := @caughtexception;

        r52 = $r41;

        goto label34;

     label33:
        $r39 := @caughtexception;

        r52 = $r39;

     label34:
        exitmonitor r43;

     label35:
        throw r52;

     label36:
        $r40 := @caughtexception;

        r52 = $r40;

        goto label34;

        catch java.lang.Throwable from label01 to label02 with label33;
        catch java.lang.Throwable from label03 to label04 with label33;
        catch java.lang.Throwable from label05 to label06 with label33;
        catch java.lang.Throwable from label07 to label08 with label33;
        catch java.lang.Throwable from label08 to label09 with label32;
        catch java.lang.Throwable from label09 to label10 with label36;
        catch java.lang.Throwable from label11 to label12 with label36;
        catch java.lang.Throwable from label13 to label14 with label36;
        catch java.lang.Throwable from label15 to label16 with label36;
        catch java.lang.Throwable from label16 to label17 with label36;
        catch java.lang.Throwable from label18 to label19 with label36;
        catch java.lang.Throwable from label19 to label20 with label36;
        catch android.os.RemoteException from label20 to label21 with label31;
        catch android.os.RemoteException from label22 to label23 with label31;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label34 to label35 with label36;
    }

    private void readAmbientBrightnessStats()
    {
        com.android.server.display.BrightnessTracker r0;
        android.util.AtomicFile r1;
        com.android.server.display.AmbientBrightnessStatsTracker $r2, $r5;
        android.os.UserManager $r3;
        com.android.server.display.BrightnessTracker$Injector $r4;
        boolean $z0;
        java.lang.Throwable $r6, $r7;
        java.io.FileInputStream r8, r9, r10;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $r2 = new com.android.server.display.AmbientBrightnessStatsTracker;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.os.UserManager mUserManager>;

        specialinvoke $r2.<com.android.server.display.AmbientBrightnessStatsTracker: void <init>(android.os.UserManager,com.android.server.display.AmbientBrightnessStatsTracker$Injector)>($r3, null);

        r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker> = $r2;

        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        r1 = virtualinvoke $r4.<com.android.server.display.BrightnessTracker$Injector: android.util.AtomicFile getFile(java.lang.String)>("ambient_brightness_stats.xml");

        if r1 == null goto label13;

        $z0 = virtualinvoke r1.<android.util.AtomicFile: boolean exists()>();

        if $z0 == 0 goto label13;

        r8 = null;

        r9 = null;

     label01:
        r10 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r9 = r10;

        r8 = r10;

     label03:
        $r5 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        virtualinvoke $r5.<com.android.server.display.AmbientBrightnessStatsTracker: void readStats(java.io.InputStream)>(r10);

     label04:
        r8 = r10;

     label05:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r8);

        goto label13;

     label06:
        $r6 := @caughtexception;

        goto label12;

     label07:
        $r7 := @caughtexception;

        r9 = r8;

     label08:
        virtualinvoke r1.<android.util.AtomicFile: void delete()>();

     label09:
        r9 = r8;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BrightnessTracker", "Failed to read ambient brightness stats.", $r7);

     label11:
        goto label05;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        throw $r6;

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.io.IOException from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
    }

    private void readEvents()
    {
        com.android.server.display.BrightnessTracker r0;
        java.lang.Object r1;
        android.util.AtomicFile r2;
        boolean z0;
        com.android.internal.util.RingBuffer $r3;
        com.android.server.display.BrightnessTracker$Injector $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.io.FileInputStream r8, r9, r10;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mEventsLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.display.BrightnessTracker: boolean mEventsDirty> = 1;

        $r3 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        virtualinvoke $r3.<com.android.internal.util.RingBuffer: void clear()>();

        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        r2 = virtualinvoke $r4.<com.android.server.display.BrightnessTracker$Injector: android.util.AtomicFile getFile(java.lang.String)>("brightness_events.xml");

     label02:
        if r2 == null goto label19;

     label03:
        z0 = virtualinvoke r2.<android.util.AtomicFile: boolean exists()>();

     label04:
        if z0 == 0 goto label19;

        r8 = null;

        r9 = null;

     label05:
        r10 = virtualinvoke r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label06:
        r9 = r10;

        r8 = r10;

     label07:
        virtualinvoke r0.<com.android.server.display.BrightnessTracker: void readEventsLocked(java.io.InputStream)>(r10);

     label08:
        r8 = r10;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r8);

     label10:
        goto label19;

     label11:
        $r5 := @caughtexception;

        goto label17;

     label12:
        $r7 := @caughtexception;

        r9 = r8;

     label13:
        virtualinvoke r2.<android.util.AtomicFile: void delete()>();

     label14:
        r9 = r8;

     label15:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BrightnessTracker", "Failed to read change mEvents.", $r7);

     label16:
        goto label09;

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

     label18:
        throw $r5;

     label19:
        exitmonitor r1;

     label20:
        return;

     label21:
        $r6 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label13 to label14 with label11;
        catch java.lang.Throwable from label15 to label16 with label11;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private void recordAmbientBrightnessStats(android.hardware.SensorEvent)
    {
        com.android.server.display.BrightnessTracker r0;
        android.hardware.SensorEvent r1;
        float[] $r2;
        float $f0;
        int $i0;
        com.android.server.display.AmbientBrightnessStatsTracker $r3;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 := @parameter0: android.hardware.SensorEvent;

        $r3 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        $i0 = r0.<com.android.server.display.BrightnessTracker: int mCurrentUserId>;

        $r2 = r1.<android.hardware.SensorEvent: float[] values>;

        $f0 = $r2[0];

        virtualinvoke $r3.<com.android.server.display.AmbientBrightnessStatsTracker: void add(int,float)>($i0, $f0);

        return;
    }

    private void recordSensorEvent(android.hardware.SensorEvent)
    {
        com.android.server.display.BrightnessTracker r0;
        long l0, l1, $l2, $l3, $l4, $l6, $l7;
        java.lang.Object r1, $r8, $r11, $r13;
        com.android.server.display.BrightnessTracker$Injector $r2;
        java.util.Deque $r3, $r5, $r6, $r7, $r10, $r12, $r18;
        boolean $z0, $z1;
        float[] $r4;
        float $f0;
        com.android.server.display.BrightnessTracker$LightData $r9, $r14, r17, r19;
        byte $b5, $b8;
        java.lang.Throwable $r15;
        android.hardware.SensorEvent r16;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r16 := @parameter0: android.hardware.SensorEvent;

        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        l0 = virtualinvoke $r2.<com.android.server.display.BrightnessTracker$Injector: long elapsedRealtimeNanos()>();

        l1 = <com.android.server.display.BrightnessTracker: long LUX_EVENT_HORIZON>;

        r1 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $z0 = interfaceinvoke $r3.<java.util.Deque: boolean isEmpty()>();

        if $z0 != 0 goto label03;

        $l6 = r16.<android.hardware.SensorEvent: long timestamp>;

        $r12 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $r13 = interfaceinvoke $r12.<java.util.Deque: java.lang.Object getLast()>();

        $r14 = (com.android.server.display.BrightnessTracker$LightData) $r13;

        $l7 = $r14.<com.android.server.display.BrightnessTracker$LightData: long timestamp>;

        $b8 = $l6 cmp $l7;

        if $b8 >= 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r17 = null;

     label04:
        $r18 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $z1 = interfaceinvoke $r18.<java.util.Deque: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        $r7 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $r8 = interfaceinvoke $r7.<java.util.Deque: java.lang.Object getFirst()>();

        $r9 = (com.android.server.display.BrightnessTracker$LightData) $r8;

        $l4 = $r9.<com.android.server.display.BrightnessTracker$LightData: long timestamp>;

        $l3 = l0 - l1;

        $b5 = $l4 cmp $l3;

        if $b5 >= 0 goto label06;

        $r10 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $r11 = interfaceinvoke $r10.<java.util.Deque: java.lang.Object removeFirst()>();

        r17 = (com.android.server.display.BrightnessTracker$LightData) $r11;

     label05:
        goto label04;

     label06:
        if r17 == null goto label08;

     label07:
        $r6 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        interfaceinvoke $r6.<java.util.Deque: void addFirst(java.lang.Object)>(r17);

     label08:
        r19 = new com.android.server.display.BrightnessTracker$LightData;

        specialinvoke r19.<com.android.server.display.BrightnessTracker$LightData: void <init>(com.android.server.display.BrightnessTracker$1)>(null);

        $l2 = r16.<android.hardware.SensorEvent: long timestamp>;

        r19.<com.android.server.display.BrightnessTracker$LightData: long timestamp> = $l2;

        $r4 = r16.<android.hardware.SensorEvent: float[] values>;

        $f0 = $r4[0];

        r19.<com.android.server.display.BrightnessTracker$LightData: float lux> = $f0;

        $r5 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        interfaceinvoke $r5.<java.util.Deque: void addLast(java.lang.Object)>(r19);

        exitmonitor r1;

     label09:
        return;

     label10:
        $r15 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void scheduleWriteBrightnessTrackerState()
    {
        com.android.server.display.BrightnessTracker r0;
        boolean $z0;
        com.android.server.display._$$Lambda$BrightnessTracker$fmx2Mcw7OCEtRi9DwxxGQgA74fg $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mWriteBrightnessTrackerStateScheduled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        $r1 = new com.android.server.display._$$Lambda$BrightnessTracker$fmx2Mcw7OCEtRi9DwxxGQgA74fg;

        specialinvoke $r1.<com.android.server.display._$$Lambda$BrightnessTracker$fmx2Mcw7OCEtRi9DwxxGQgA74fg: void <init>(com.android.server.display.BrightnessTracker)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        r0.<com.android.server.display.BrightnessTracker: boolean mWriteBrightnessTrackerStateScheduled> = 1;

     label1:
        return;
    }

    private void startSensorListener()
    {
        com.android.server.display.BrightnessTracker r0;
        com.android.server.display.BrightnessTracker$Injector r1, $r3, $r5;
        boolean $z0, $z1, $z2;
        android.content.Context $r2, $r7;
        android.content.ContentResolver $r4;
        com.android.server.display.AmbientBrightnessStatsTracker $r6;
        com.android.server.display.BrightnessTracker$SensorListener $r8;
        android.os.Handler $r9;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mSensorRegistered>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r2 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $z1 = virtualinvoke $r3.<com.android.server.display.BrightnessTracker$Injector: boolean isInteractive(android.content.Context)>($r2);

        if $z1 == 0 goto label1;

        $r5 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r4 = r0.<com.android.server.display.BrightnessTracker: android.content.ContentResolver mContentResolver>;

        $z2 = virtualinvoke $r5.<com.android.server.display.BrightnessTracker$Injector: boolean isBrightnessModeAutomatic(android.content.ContentResolver)>($r4);

        if $z2 == 0 goto label1;

        $r6 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        virtualinvoke $r6.<com.android.server.display.AmbientBrightnessStatsTracker: void start()>();

        r0.<com.android.server.display.BrightnessTracker: boolean mSensorRegistered> = 1;

        r1 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r7 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r8 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$SensorListener mSensorListener>;

        $r9 = virtualinvoke r1.<com.android.server.display.BrightnessTracker$Injector: android.os.Handler getBackgroundHandler()>();

        virtualinvoke r1.<com.android.server.display.BrightnessTracker$Injector: void registerSensorListener(android.content.Context,android.hardware.SensorEventListener,android.os.Handler)>($r7, $r8, $r9);

     label1:
        return;
    }

    private void stopSensorListener()
    {
        com.android.server.display.BrightnessTracker r0;
        boolean $z0;
        com.android.server.display.AmbientBrightnessStatsTracker $r1;
        com.android.server.display.BrightnessTracker$SensorListener $r2;
        android.content.Context $r3;
        com.android.server.display.BrightnessTracker$Injector $r4;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mSensorRegistered>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        virtualinvoke $r1.<com.android.server.display.AmbientBrightnessStatsTracker: void stop()>();

        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$SensorListener mSensorListener>;

        virtualinvoke $r4.<com.android.server.display.BrightnessTracker$Injector: void unregisterSensorListener(android.content.Context,android.hardware.SensorEventListener)>($r3, $r2);

        r0.<com.android.server.display.BrightnessTracker: boolean mSensorRegistered> = 0;

     label1:
        return;
    }

    private void updateColorSampling()
    {
        com.android.server.display.BrightnessTracker r0;
        boolean $z0;
        android.content.Context $r1;
        com.android.server.display.BrightnessTracker$Injector $r2;
        float $f0, $f1;
        byte $b0;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mColorSamplingEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r1 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $f0 = virtualinvoke $r2.<com.android.server.display.BrightnessTracker$Injector: float getFrameRate(android.content.Context)>($r1);

        $f1 = r0.<com.android.server.display.BrightnessTracker: float mFrameRate>;

        $b0 = $f0 cmpl $f1;

        if $b0 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void disableColorSampling()>();

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void enableColorSampling()>();

     label2:
        return;
    }

    private void writeAmbientBrightnessStats()
    {
        com.android.server.display.BrightnessTracker r0;
        android.util.AtomicFile r1;
        com.android.server.display.BrightnessTracker$Injector $r2;
        com.android.server.display.AmbientBrightnessStatsTracker $r3;
        java.lang.Throwable $r4;
        java.io.FileOutputStream r5, r6;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.display.BrightnessTracker$Injector: android.util.AtomicFile getFile(java.lang.String)>("ambient_brightness_stats.xml");

        if r1 != null goto label1;

        return;

     label1:
        r5 = null;

     label2:
        r6 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label3:
        r5 = r6;

     label4:
        $r3 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        virtualinvoke $r3.<com.android.server.display.AmbientBrightnessStatsTracker: void writeStats(java.io.OutputStream)>(r6);

     label5:
        r5 = r6;

     label6:
        virtualinvoke r1.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r6);

     label7:
        goto label9;

     label8:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r5);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BrightnessTracker", "Failed to write ambient brightness stats.", $r4);

     label9:
        return;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
    }

    private void writeEvents()
    {
        com.android.server.display.BrightnessTracker r0;
        java.lang.Object r1;
        android.util.AtomicFile r2;
        boolean $z0, $z1, $z2;
        com.android.server.display.BrightnessTracker$Injector $r3;
        com.android.internal.util.RingBuffer $r4;
        java.lang.Throwable $r5, $r6;
        java.io.FileOutputStream r7, r8;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mEventsLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mEventsDirty>;

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        r2 = virtualinvoke $r3.<com.android.server.display.BrightnessTracker$Injector: android.util.AtomicFile getFile(java.lang.String)>("brightness_events.xml");

     label04:
        if r2 != null goto label07;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        $z1 = virtualinvoke $r4.<com.android.internal.util.RingBuffer: boolean isEmpty()>();

        if $z1 == 0 goto label10;

        $z2 = virtualinvoke r2.<android.util.AtomicFile: boolean exists()>();

        if $z2 == 0 goto label08;

        virtualinvoke r2.<android.util.AtomicFile: void delete()>();

     label08:
        r0.<com.android.server.display.BrightnessTracker: boolean mEventsDirty> = 0;

     label09:
        goto label21;

     label10:
        r7 = null;

     label11:
        r8 = virtualinvoke r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label12:
        r7 = r8;

     label13:
        virtualinvoke r0.<com.android.server.display.BrightnessTracker: void writeEventsLocked(java.io.OutputStream)>(r8);

     label14:
        r7 = r8;

     label15:
        virtualinvoke r2.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r8);

     label16:
        r7 = r8;

     label17:
        r0.<com.android.server.display.BrightnessTracker: boolean mEventsDirty> = 0;

     label18:
        goto label21;

     label19:
        $r5 := @caughtexception;

     label20:
        virtualinvoke r2.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r7);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BrightnessTracker", "Failed to write change mEvents.", $r5);

     label21:
        exitmonitor r1;

     label22:
        return;

     label23:
        $r6 := @caughtexception;

     label24:
        exitmonitor r1;

     label25:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.io.IOException from label11 to label12 with label19;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.io.IOException from label13 to label14 with label19;
        catch java.lang.Throwable from label13 to label14 with label23;
        catch java.io.IOException from label15 to label16 with label19;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.BrightnessTracker r0;
        java.lang.StringBuilder r1, $r26, r89, r90, r91, r92, r93, r95, r96, r99, r100, r101, r102, r103, r104;
        java.util.Date r2;
        boolean $z0, $z1, $z2, $z3, $z5, $z6;
        java.lang.String $r5, $r8, $r11, $r15, $r19, $r23, $r29, $r36, $r38, $r42, $r49, $r53, $r57, $r61, $r73, $r84;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        java.util.Deque $r13, $r16, $r75, $r80;
        int $i0, $i1, $i3, $i4, i8, $i9, i10;
        com.android.internal.util.RingBuffer $r21, $r24;
        java.lang.Object[] $r25;
        com.android.server.display._$$Lambda$BrightnessTracker$_S_g5htVKYYPRPZzYSZzGdy7hM0 $r30;
        android.os.Handler $r31;
        com.android.server.display.AmbientBrightnessStatsTracker $r32, $r33;
        android.hardware.display.BrightnessChangeEvent $r35, $r40, $r44, $r47, $r51, $r55, $r59, $r62, $r65, $r69;
        long $l2, $l5, $l6, $l7;
        float[] $r63, $r66;
        long[] $r70;
        java.lang.Object $r76, $r81, r88, r94;
        com.android.server.display.BrightnessTracker$LightData $r77, $r82;
        java.lang.Throwable $r85, $r86;
        java.io.PrintWriter r87;
        android.hardware.display.BrightnessChangeEvent[] r97;
        java.text.SimpleDateFormat r98;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r87 := @parameter0: java.io.PrintWriter;

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>("BrightnessTracker state:");

        r88 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock>;

        entermonitor r88;

     label01:
        r89 = new java.lang.StringBuilder;

        specialinvoke r89.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStarted=");

        $z0 = r0.<com.android.server.display.BrightnessTracker: boolean mStarted>;

        virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastBatteryLevel=");

        $f0 = r0.<com.android.server.display.BrightnessTracker: float mLastBatteryLevel>;

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r8 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastBrightness=");

        $f1 = r0.<com.android.server.display.BrightnessTracker: float mLastBrightness>;

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r11 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSensorReadings.size=");

        $r13 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $i0 = interfaceinvoke $r13.<java.util.Deque: int size()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r15 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r16 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $z1 = interfaceinvoke $r16.<java.util.Deque: boolean isEmpty()>();

        if $z1 != 0 goto label02;

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSensorReadings time span ");

        $r75 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $r76 = interfaceinvoke $r75.<java.util.Deque: java.lang.Object peekFirst()>();

        $r77 = (com.android.server.display.BrightnessTracker$LightData) $r76;

        $l6 = $r77.<com.android.server.display.BrightnessTracker$LightData: long timestamp>;

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r80 = r0.<com.android.server.display.BrightnessTracker: java.util.Deque mLastSensorReadings>;

        $r81 = interfaceinvoke $r80.<java.util.Deque: java.lang.Object peekLast()>();

        $r82 = (com.android.server.display.BrightnessTracker$LightData) $r81;

        $l7 = $r82.<com.android.server.display.BrightnessTracker$LightData: long timestamp>;

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r84 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r84);

     label02:
        exitmonitor r88;

     label03:
        r94 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mEventsLock>;

        entermonitor r94;

     label04:
        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mEventsDirty=");

        $z2 = r0.<com.android.server.display.BrightnessTracker: boolean mEventsDirty>;

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r19 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mEvents.size=");

        $r21 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        $i1 = virtualinvoke $r21.<com.android.internal.util.RingBuffer: int size()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r23 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        $r25 = virtualinvoke $r24.<com.android.internal.util.RingBuffer: java.lang.Object[] toArray()>();

        r97 = (android.hardware.display.BrightnessChangeEvent[]) $r25;

     label05:
        i8 = 0;

     label06:
        $i9 = lengthof r97;

        if i8 >= $i9 goto label15;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        r98 = <com.android.server.display.BrightnessTracker: java.text.SimpleDateFormat FORMAT>;

        r2 = new java.util.Date;

        $r35 = r97[i8];

        $l2 = $r35.<android.hardware.display.BrightnessChangeEvent: long timeStamp>;

        specialinvoke r2.<java.util.Date: void <init>(long)>($l2);

        $r36 = virtualinvoke r98.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r38);

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", userId=");

        $r40 = r97[i8];

        $i3 = $r40.<android.hardware.display.BrightnessChangeEvent: int userId>;

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r42 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r42);

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r44 = r97[i8];

        $f2 = $r44.<android.hardware.display.BrightnessChangeEvent: float lastBrightness>;

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r47 = r97[i8];

        $f3 = $r47.<android.hardware.display.BrightnessChangeEvent: float brightness>;

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r49 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r49);

        r101 = new java.lang.StringBuilder;

        specialinvoke r101.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isUserSetBrightness=");

        $r51 = r97[i8];

        $z5 = $r51.<android.hardware.display.BrightnessChangeEvent: boolean isUserSetBrightness>;

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r53 = virtualinvoke r101.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r53);

        r102 = new java.lang.StringBuilder;

        specialinvoke r102.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", powerBrightnessFactor=");

        $r55 = r97[i8];

        $f4 = $r55.<android.hardware.display.BrightnessChangeEvent: float powerBrightnessFactor>;

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r57 = virtualinvoke r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r57);

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isDefaultBrightnessConfig=");

        $r59 = r97[i8];

        $z6 = $r59.<android.hardware.display.BrightnessChangeEvent: boolean isDefaultBrightnessConfig>;

        virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r61 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r61);

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>(" {");

     label07:
        i10 = 0;

     label08:
        $r62 = r97[i8];

        $r63 = $r62.<android.hardware.display.BrightnessChangeEvent: float[] luxValues>;

        $i4 = lengthof $r63;

        if i10 >= $i4 goto label13;

     label09:
        if i10 == 0 goto label11;

     label10:
        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>(", ");

     label11:
        r104 = new java.lang.StringBuilder;

        specialinvoke r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r65 = r97[i8];

        $r66 = $r65.<android.hardware.display.BrightnessChangeEvent: float[] luxValues>;

        $f5 = $r66[i10];

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r69 = r97[i8];

        $r70 = $r69.<android.hardware.display.BrightnessChangeEvent: long[] luxTimestamps>;

        $l5 = $r70[i10];

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r73 = virtualinvoke r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void print(java.lang.String)>($r73);

     label12:
        i10 = i10 + 1;

        goto label08;

     label13:
        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>("}");

     label14:
        i8 = i8 + 1;

        goto label06;

     label15:
        exitmonitor r94;

     label16:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWriteBrightnessTrackerStateScheduled=");

        $z3 = r0.<com.android.server.display.BrightnessTracker: boolean mWriteBrightnessTrackerStateScheduled>;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r87.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        $r31 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        $r30 = new com.android.server.display._$$Lambda$BrightnessTracker$_S_g5htVKYYPRPZzYSZzGdy7hM0;

        specialinvoke $r30.<com.android.server.display._$$Lambda$BrightnessTracker$_S_g5htVKYYPRPZzYSZzGdy7hM0: void <init>(com.android.server.display.BrightnessTracker,java.io.PrintWriter)>(r0, r87);

        virtualinvoke $r31.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>($r30, 1000L);

        $r32 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        if $r32 == null goto label17;

        virtualinvoke r87.<java.io.PrintWriter: void println()>();

        $r33 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        virtualinvoke $r33.<com.android.server.display.AmbientBrightnessStatsTracker: void dump(java.io.PrintWriter)>(r87);

     label17:
        return;

     label18:
        $r85 := @caughtexception;

     label19:
        exitmonitor r94;

     label20:
        throw $r85;

     label21:
        $r86 := @caughtexception;

     label22:
        exitmonitor r88;

     label23:
        throw $r86;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public android.content.pm.ParceledListSlice getAmbientBrightnessStats(int)
    {
        com.android.server.display.BrightnessTracker r0;
        int i0;
        android.content.pm.ParceledListSlice $r1, $r2;
        com.android.server.display.AmbientBrightnessStatsTracker r3;
        java.util.ArrayList r4;

        r0 := @this: com.android.server.display.BrightnessTracker;

        i0 := @parameter0: int;

        r3 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.AmbientBrightnessStatsTracker mAmbientBrightnessStatsTracker>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.server.display.AmbientBrightnessStatsTracker: java.util.ArrayList getUserStats(int)>(i0);

        if r4 == null goto label1;

        $r2 = new android.content.pm.ParceledListSlice;

        specialinvoke $r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r4);

        return $r2;

     label1:
        $r1 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r1;
    }

    public android.content.pm.ParceledListSlice getEvents(int, boolean)
    {
        com.android.server.display.BrightnessTracker r0;
        boolean z0, $z2, z5;
        com.android.internal.util.RingBuffer $r2;
        java.lang.Object[] $r3;
        android.os.UserManager $r4;
        com.android.server.display.BrightnessTracker$Injector $r5;
        java.util.HashMap $r6;
        java.util.ArrayList $r7;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i7, i8;
        android.content.pm.ParceledListSlice $r8;
        android.hardware.display.BrightnessChangeEvent $r9, $r12, $r13, $r14;
        java.lang.Integer $r10, $r21;
        java.lang.Object $r11, r17;
        java.lang.Throwable $r16;
        android.hardware.display.BrightnessChangeEvent[] r18;
        int[] r19;
        java.lang.Boolean $r22, r23;

        r0 := @this: com.android.server.display.BrightnessTracker;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        r17 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mEventsLock>;

        entermonitor r17;

     label01:
        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        $r3 = virtualinvoke $r2.<com.android.internal.util.RingBuffer: java.lang.Object[] toArray()>();

        r18 = (android.hardware.display.BrightnessChangeEvent[]) $r3;

        exitmonitor r17;

     label02:
        $r5 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r4 = r0.<com.android.server.display.BrightnessTracker: android.os.UserManager mUserManager>;

        r19 = virtualinvoke $r5.<com.android.server.display.BrightnessTracker$Injector: int[] getProfileIds(android.os.UserManager,int)>($r4, i3);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        i4 = 0;

     label03:
        i5 = lengthof r19;

        if i4 >= i5 goto label06;

        i6 = r19[i4];

        z5 = 1;

        if z0 == 0 goto label05;

        if i6 == i3 goto label04;

        z5 = 1;

        goto label05;

     label04:
        z5 = 0;

     label05:
        $i7 = r19[i4];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z5);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        i4 = i4 + 1;

        goto label03;

     label06:
        $r7 = new java.util.ArrayList;

        $i0 = lengthof r18;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i0);

        i8 = 0;

     label07:
        $i1 = lengthof r18;

        if i8 >= $i1 goto label10;

        $r9 = r18[i8];

        $i2 = $r9.<android.hardware.display.BrightnessChangeEvent: int userId>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r23 = (java.lang.Boolean) $r11;

        if r23 == null goto label09;

        $z2 = virtualinvoke r23.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label08;

        $r14 = r18[i8];

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        goto label09;

     label08:
        $r12 = new android.hardware.display.BrightnessChangeEvent;

        $r13 = r18[i8];

        specialinvoke $r12.<android.hardware.display.BrightnessChangeEvent: void <init>(android.hardware.display.BrightnessChangeEvent,boolean)>($r13, 1);

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label09:
        i8 = i8 + 1;

        goto label07;

     label10:
        $r8 = new android.content.pm.ParceledListSlice;

        specialinvoke $r8.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r7);

        return $r8;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r17;

     label13:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void lambda$dump$1$BrightnessTracker(java.io.PrintWriter)
    {
        com.android.server.display.BrightnessTracker r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void dumpLocal(java.io.PrintWriter)>(r1);

        return;
    }

    public void lambda$scheduleWriteBrightnessTrackerState$0$BrightnessTracker()
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r0.<com.android.server.display.BrightnessTracker: boolean mWriteBrightnessTrackerStateScheduled> = 0;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void writeEvents()>();

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void writeAmbientBrightnessStats()>();

        return;
    }

    public void notifyBrightnessChanged(float, boolean, float, boolean, boolean)
    {
        com.android.server.display.BrightnessTracker r0;
        float f0, f1;
        boolean z0, z1, z2;
        com.android.server.display.BrightnessTracker$BrightnessChangeValues $r1;
        com.android.server.display.BrightnessTracker$Injector $r2;
        android.os.Handler $r3;
        long $l0;
        android.os.Message $r4;
        int i1;

        r0 := @this: com.android.server.display.BrightnessTracker;

        f0 := @parameter0: float;

        z0 := @parameter1: boolean;

        f1 := @parameter2: float;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        $r1 = new com.android.server.display.BrightnessTracker$BrightnessChangeValues;

        $r2 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $l0 = virtualinvoke $r2.<com.android.server.display.BrightnessTracker$Injector: long currentTimeMillis()>();

        specialinvoke $r1.<com.android.server.display.BrightnessTracker$BrightnessChangeValues: void <init>(float,float,boolean,boolean,long)>(f0, f1, z1, z2, $l0);

        i1 = (int) z0;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(1, i1, 0, $r1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onSwitchUser(int)
    {
        com.android.server.display.BrightnessTracker r0;
        int i0;

        r0 := @this: com.android.server.display.BrightnessTracker;

        i0 := @parameter0: int;

        r0.<com.android.server.display.BrightnessTracker: int mCurrentUserId> = i0;

        return;
    }

    public void persistBrightnessTrackerState()
    {
        com.android.server.display.BrightnessTracker r0;

        r0 := @this: com.android.server.display.BrightnessTracker;

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void scheduleWriteBrightnessTrackerState()>();

        return;
    }

    void readEventsLocked(java.io.InputStream) throws java.io.IOException
    {
        com.android.server.display.BrightnessTracker r0;
        long l0, l1, l2, $l4, $l13, $l14, $l19, $l20;
        java.lang.String[] r2, r53, r60;
        long[] r3, r61;
        java.nio.charset.Charset $r4;
        java.lang.String $r5, $r6, $r9, $r11, $r13, $r15, $r20, $r22, $r24, $r26, $r34, $r38, $r39, r46, r48, r49, r50, r51, r52, r55, r56, r57, r58, r59;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.display.BrightnessTracker$Injector $r10, $r17;
        float $f0, $f1, $f2, $f3, $f4;
        android.os.UserManager $r18;
        int $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i16, $i17, $i18, $i21, i23, i24, i25, i26, i27, $i28;
        byte $b15;
        float[] $r31, r54;
        com.android.internal.util.RingBuffer $r32, r69;
        java.lang.Throwable $r40, r71;
        java.io.InputStream r43;
        org.xmlpull.v1.XmlPullParser r45;
        android.hardware.display.BrightnessChangeEvent r62;
        android.hardware.display.BrightnessChangeEvent$Builder r66;
        java.lang.StringBuilder r67;
        org.xmlpull.v1.XmlPullParserException r68;
        java.io.IOException r70;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r43 := @parameter0: java.io.InputStream;

     label01:
        r45 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r43, $r5);

     label02:
        i23 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int next()>();

     label03:
        if i23 == 1 goto label04;

        if i23 == 2 goto label04;

        goto label02;

     label04:
        r46 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = "events";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r46);

        if $z0 == 0 goto label39;

        $r10 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        l0 = virtualinvoke $r10.<com.android.server.display.BrightnessTracker$Injector: long currentTimeMillis()>();

        l1 = <com.android.server.display.BrightnessTracker: long MAX_EVENT_AGE>;

        interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int next()>();

        i24 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label05:
        i25 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int next()>();

     label06:
        if i25 == 1 goto label38;

        if i25 != 3 goto label08;

     label07:
        $i21 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i21 <= i24 goto label38;

     label08:
        if i25 == 3 goto label37;

        if i25 != 4 goto label09;

        goto label37;

     label09:
        r48 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r11 = "event";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r48);

        if $z1 == 0 goto label36;

        r66 = new android.hardware.display.BrightnessChangeEvent$Builder;

        specialinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: void <init>()>();

        r49 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "nits");

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r49);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setBrightness(float)>($f0);

        $r13 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "timestamp");

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r13);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setTimeStamp(long)>($l4);

        $r15 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "packageName");

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setPackageName(java.lang.String)>($r15);

        r50 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "user");

        $r17 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r18 = r0.<com.android.server.display.BrightnessTracker: android.os.UserManager mUserManager>;

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r50);

        $i6 = virtualinvoke $r17.<com.android.server.display.BrightnessTracker$Injector: int getUserId(android.os.UserManager,int)>($r18, $i5);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setUserId(int)>($i6);

        $r20 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "batteryLevel");

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r20);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setBatteryLevel(float)>($f1);

        $r22 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "nightMode");

        $z2 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r22);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setNightMode(boolean)>($z2);

        $r24 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "colorTemperature");

        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setColorTemperature(int)>($i7);

        $r26 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lastNits");

        $f2 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r26);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setLastBrightness(float)>($f2);

        r51 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lux");

        r52 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "luxTimestamps");

        r53 = virtualinvoke r51.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        r2 = virtualinvoke r52.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i9 = lengthof r53;

        $i8 = lengthof r2;

        if $i9 == $i8 goto label11;

     label10:
        goto label36;

     label11:
        $i10 = lengthof r53;

        r54 = newarray (float)[$i10];

        $i11 = lengthof r53;

        r3 = newarray (long)[$i11];

     label12:
        i26 = 0;

     label13:
        $i12 = lengthof r54;

        if i26 >= $i12 goto label15;

        $r38 = r53[i26];

        $f4 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r38);

        r54[i26] = $f4;

        $r39 = r2[i26];

        $l20 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r39);

        r3[i26] = $l20;

     label14:
        i26 = i26 + 1;

        goto label13;

     label15:
        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setLuxValues(float[])>(r54);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setLuxTimestamps(long[])>(r3);

        r55 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "defaultConfig");

     label16:
        if r55 == null goto label18;

     label17:
        $z4 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r55);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setIsDefaultBrightnessConfig(boolean)>($z4);

     label18:
        r56 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "powerSaveFactor");

     label19:
        if r56 == null goto label22;

     label20:
        $f3 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r56);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setPowerBrightnessFactor(float)>($f3);

     label21:
        goto label23;

     label22:
        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setPowerBrightnessFactor(float)>(1.0F);

     label23:
        r57 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "userPoint");

     label24:
        if r57 == null goto label26;

     label25:
        $z3 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r57);

        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setUserBrightnessPoint(boolean)>($z3);

     label26:
        r58 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "colorSampleDuration");

        r59 = interfaceinvoke r45.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "colorValueBuckets");

     label27:
        if r58 == null goto label34;

        if r59 == null goto label34;

     label28:
        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r58);

        r60 = virtualinvoke r59.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i17 = lengthof r60;

        r61 = newarray (long)[$i17];

     label29:
        i27 = 0;

     label30:
        $i18 = lengthof r61;

        if i27 >= $i18 goto label32;

        $r34 = r60[i27];

        $l19 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r34);

        r61[i27] = $l19;

     label31:
        i27 = i27 + 1;

        goto label30;

     label32:
        virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent$Builder setColorValues(long[],long)>(r61, l2);

     label33:
        goto label34;

     label34:
        r62 = virtualinvoke r66.<android.hardware.display.BrightnessChangeEvent$Builder: android.hardware.display.BrightnessChangeEvent build()>();

        $i28 = r62.<android.hardware.display.BrightnessChangeEvent: int userId>;

        if $i28 == -1 goto label35;

        $l14 = r62.<android.hardware.display.BrightnessChangeEvent: long timeStamp>;

        $l13 = l0 - l1;

        $b15 = $l14 cmp $l13;

        if $b15 <= 0 goto label35;

        $r31 = r62.<android.hardware.display.BrightnessChangeEvent: float[] luxValues>;

        $i16 = lengthof $r31;

        if $i16 <= 0 goto label35;

        $r32 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        virtualinvoke $r32.<com.android.internal.util.RingBuffer: void append(java.lang.Object)>(r62);

     label35:
        goto label36;

     label36:
        goto label05;

     label37:
        goto label05;

     label38:
        return;

     label39:
        r68 = new org.xmlpull.v1.XmlPullParserException;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Events not found in brightness tracker file ");

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        $r9 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r68.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r9);

        r71 = (java.lang.Throwable) r68;

        throw r71;

     label40:
        $r40 := @caughtexception;

        r69 = new com.android.internal.util.RingBuffer;

        specialinvoke r69.<com.android.internal.util.RingBuffer: void <init>(java.lang.Class,int)>(class "Landroid/hardware/display/BrightnessChangeEvent;", 100);

        r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents> = r69;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BrightnessTracker", "Failed to parse brightness event", $r40);

        r70 = new java.io.IOException;

        specialinvoke r70.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("failed to parse file", $r40);

        throw r70;

        catch java.lang.NullPointerException from label01 to label02 with label40;
        catch java.lang.NumberFormatException from label01 to label02 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label40;
        catch java.io.IOException from label01 to label02 with label40;
        catch java.lang.NullPointerException from label02 to label03 with label40;
        catch java.lang.NumberFormatException from label02 to label03 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label40;
        catch java.io.IOException from label02 to label03 with label40;
        catch java.lang.NullPointerException from label04 to label05 with label40;
        catch java.lang.NumberFormatException from label04 to label05 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label40;
        catch java.io.IOException from label04 to label05 with label40;
        catch java.lang.NullPointerException from label05 to label06 with label40;
        catch java.lang.NumberFormatException from label05 to label06 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label40;
        catch java.io.IOException from label05 to label06 with label40;
        catch java.lang.NullPointerException from label07 to label08 with label40;
        catch java.lang.NumberFormatException from label07 to label08 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label40;
        catch java.io.IOException from label07 to label08 with label40;
        catch java.lang.NullPointerException from label09 to label10 with label40;
        catch java.lang.NumberFormatException from label09 to label10 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label40;
        catch java.io.IOException from label09 to label10 with label40;
        catch java.lang.NullPointerException from label11 to label12 with label40;
        catch java.lang.NumberFormatException from label11 to label12 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label40;
        catch java.io.IOException from label11 to label12 with label40;
        catch java.lang.NullPointerException from label13 to label14 with label40;
        catch java.lang.NumberFormatException from label13 to label14 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label40;
        catch java.io.IOException from label13 to label14 with label40;
        catch java.lang.NullPointerException from label15 to label16 with label40;
        catch java.lang.NumberFormatException from label15 to label16 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label40;
        catch java.io.IOException from label15 to label16 with label40;
        catch java.lang.NullPointerException from label17 to label18 with label40;
        catch java.lang.NumberFormatException from label17 to label18 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label40;
        catch java.io.IOException from label17 to label18 with label40;
        catch java.lang.NullPointerException from label18 to label19 with label40;
        catch java.lang.NumberFormatException from label18 to label19 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label40;
        catch java.io.IOException from label18 to label19 with label40;
        catch java.lang.NullPointerException from label20 to label21 with label40;
        catch java.lang.NumberFormatException from label20 to label21 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label40;
        catch java.io.IOException from label20 to label21 with label40;
        catch java.lang.NullPointerException from label22 to label23 with label40;
        catch java.lang.NumberFormatException from label22 to label23 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label40;
        catch java.io.IOException from label22 to label23 with label40;
        catch java.lang.NullPointerException from label23 to label24 with label40;
        catch java.lang.NumberFormatException from label23 to label24 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label40;
        catch java.io.IOException from label23 to label24 with label40;
        catch java.lang.NullPointerException from label25 to label26 with label40;
        catch java.lang.NumberFormatException from label25 to label26 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label40;
        catch java.io.IOException from label25 to label26 with label40;
        catch java.lang.NullPointerException from label26 to label27 with label40;
        catch java.lang.NumberFormatException from label26 to label27 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label40;
        catch java.io.IOException from label26 to label27 with label40;
        catch java.lang.NullPointerException from label28 to label29 with label40;
        catch java.lang.NumberFormatException from label28 to label29 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label40;
        catch java.io.IOException from label28 to label29 with label40;
        catch java.lang.NullPointerException from label30 to label31 with label40;
        catch java.lang.NumberFormatException from label30 to label31 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label30 to label31 with label40;
        catch java.io.IOException from label30 to label31 with label40;
        catch java.lang.NullPointerException from label32 to label33 with label40;
        catch java.lang.NumberFormatException from label32 to label33 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label32 to label33 with label40;
        catch java.io.IOException from label32 to label33 with label40;
        catch java.lang.NullPointerException from label34 to label35 with label40;
        catch java.lang.NumberFormatException from label34 to label35 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label34 to label35 with label40;
        catch java.io.IOException from label34 to label35 with label40;
        catch java.lang.NullPointerException from label39 to label40 with label40;
        catch java.lang.NumberFormatException from label39 to label40 with label40;
        catch org.xmlpull.v1.XmlPullParserException from label39 to label40 with label40;
        catch java.io.IOException from label39 to label40 with label40;
    }

    public void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.BrightnessTracker r0;
        android.hardware.display.BrightnessConfiguration r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 := @parameter0: android.hardware.display.BrightnessConfiguration;

        $r2 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(4, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void start(float)
    {
        com.android.server.display.BrightnessTracker r0;
        float f0;
        int $i0;
        android.os.Handler $r1;
        java.lang.Float $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.display.BrightnessTracker;

        f0 := @parameter0: float;

        $i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r0.<com.android.server.display.BrightnessTracker: int mCurrentUserId> = $i0;

        $r1 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r3 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(0, $r2);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void stop()
    {
        com.android.server.display.BrightnessTracker r0;
        java.lang.Object r1;
        android.os.Handler $r3;
        com.android.server.display.BrightnessTracker$SensorListener $r4;
        android.content.Context $r5, $r8, $r11, $r13;
        com.android.server.display.BrightnessTracker$Injector $r6, $r9, $r12, $r14;
        com.android.server.display.BrightnessTracker$SettingsObserver $r7;
        android.content.BroadcastReceiver $r10;
        java.lang.Throwable $r15;

        r0 := @this: com.android.server.display.BrightnessTracker;

        $r3 = r0.<com.android.server.display.BrightnessTracker: android.os.Handler mBgHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(0);

        specialinvoke r0.<com.android.server.display.BrightnessTracker: void stopSensorListener()>();

        $r6 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r5 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r4 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$SensorListener mSensorListener>;

        virtualinvoke $r6.<com.android.server.display.BrightnessTracker$Injector: void unregisterSensorListener(android.content.Context,android.hardware.SensorEventListener)>($r5, $r4);

        $r9 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r8 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r7 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$SettingsObserver mSettingsObserver>;

        virtualinvoke $r9.<com.android.server.display.BrightnessTracker$Injector: void unregisterBrightnessModeObserver(android.content.Context,android.database.ContentObserver)>($r8, $r7);

        $r12 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r11 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        $r10 = r0.<com.android.server.display.BrightnessTracker: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r12.<com.android.server.display.BrightnessTracker$Injector: void unregisterReceiver(android.content.Context,android.content.BroadcastReceiver)>($r11, $r10);

        $r14 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r13 = r0.<com.android.server.display.BrightnessTracker: android.content.Context mContext>;

        virtualinvoke $r14.<com.android.server.display.BrightnessTracker$Injector: void cancelIdleJob(android.content.Context)>($r13);

        r1 = r0.<com.android.server.display.BrightnessTracker: java.lang.Object mDataCollectionLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.display.BrightnessTracker: boolean mStarted> = 0;

        exitmonitor r1;

     label2:
        specialinvoke r0.<com.android.server.display.BrightnessTracker: void disableColorSampling()>();

        return;

     label3:
        $r15 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void writeEventsLocked(java.io.OutputStream) throws java.io.IOException
    {
        com.android.server.display.BrightnessTracker r0;
        java.io.OutputStream r1;
        android.hardware.display.BrightnessChangeEvent[] r3;
        long l0, l1, $l4, $l5, $l7, $l11, $l13, $l14;
        com.android.internal.util.FastXmlSerializer $r4;
        java.nio.charset.Charset $r5;
        java.lang.String $r6, $r19, $r21, $r23, $r24, $r26, $r28, $r30, $r32, $r34, $r36, $r38, $r43, $r44, $r50, $r56, $r59, $r62, r66;
        java.lang.Boolean $r7;
        com.android.internal.util.RingBuffer $r8, $r10, $r17;
        java.lang.Object[] $r9;
        com.android.server.display.BrightnessTracker$Injector $r11, $r14;
        int $i2, $i3, $i8, $i9, $i10, $i12, i15, i16, i17, i18;
        android.hardware.display.BrightnessChangeEvent $r12, $r15, $r16, $r18, $r20, $r22, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r41, $r45, $r47, $r49, $r52, $r54, $r57, $r60;
        android.os.UserManager $r13;
        byte $b6;
        float $f0, $f1, $f2, $f3, $f4;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r39, $r40, $r51;
        float[] $r42, $r58;
        long[] $r46, $r48, $r53, $r55, $r61;

        r0 := @this: com.android.server.display.BrightnessTracker;

        r1 := @parameter0: java.io.OutputStream;

        $r4 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r4.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, $r6);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r7);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "events");

        $r8 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        $r9 = virtualinvoke $r8.<com.android.internal.util.RingBuffer: java.lang.Object[] toArray()>();

        r3 = (android.hardware.display.BrightnessChangeEvent[]) $r9;

        $r10 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        virtualinvoke $r10.<com.android.internal.util.RingBuffer: void clear()>();

        $r11 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        l0 = virtualinvoke $r11.<com.android.server.display.BrightnessTracker$Injector: long currentTimeMillis()>();

        l1 = <com.android.server.display.BrightnessTracker: long MAX_EVENT_AGE>;

        i15 = 0;

     label01:
        $i2 = lengthof r3;

        if i15 >= $i2 goto label10;

        $r14 = r0.<com.android.server.display.BrightnessTracker: com.android.server.display.BrightnessTracker$Injector mInjector>;

        $r13 = r0.<com.android.server.display.BrightnessTracker: android.os.UserManager mUserManager>;

        $r12 = r3[i15];

        $i3 = $r12.<android.hardware.display.BrightnessChangeEvent: int userId>;

        i16 = virtualinvoke $r14.<com.android.server.display.BrightnessTracker$Injector: int getUserSerialNumber(android.os.UserManager,int)>($r13, $i3);

        if i16 == -1 goto label09;

        $r15 = r3[i15];

        $l5 = $r15.<android.hardware.display.BrightnessChangeEvent: long timeStamp>;

        $l4 = l0 - l1;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label09;

        $r17 = r0.<com.android.server.display.BrightnessTracker: com.android.internal.util.RingBuffer mEvents>;

        $r16 = r3[i15];

        virtualinvoke $r17.<com.android.internal.util.RingBuffer: void append(java.lang.Object)>($r16);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "event");

        $r18 = r3[i15];

        $f0 = $r18.<android.hardware.display.BrightnessChangeEvent: float brightness>;

        $r19 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "nits", $r19);

        $r20 = r3[i15];

        $l7 = $r20.<android.hardware.display.BrightnessChangeEvent: long timeStamp>;

        $r21 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l7);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "timestamp", $r21);

        $r22 = r3[i15];

        $r23 = $r22.<android.hardware.display.BrightnessChangeEvent: java.lang.String packageName>;

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "packageName", $r23);

        $r24 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i16);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "user", $r24);

        $r25 = r3[i15];

        $f1 = $r25.<android.hardware.display.BrightnessChangeEvent: float batteryLevel>;

        $r26 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f1);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "batteryLevel", $r26);

        $r27 = r3[i15];

        $z0 = $r27.<android.hardware.display.BrightnessChangeEvent: boolean nightMode>;

        $r28 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z0);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "nightMode", $r28);

        $r29 = r3[i15];

        $i8 = $r29.<android.hardware.display.BrightnessChangeEvent: int colorTemperature>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "colorTemperature", $r30);

        $r31 = r3[i15];

        $f2 = $r31.<android.hardware.display.BrightnessChangeEvent: float lastBrightness>;

        $r32 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f2);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lastNits", $r32);

        $r33 = r3[i15];

        $z1 = $r33.<android.hardware.display.BrightnessChangeEvent: boolean isDefaultBrightnessConfig>;

        $r34 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z1);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "defaultConfig", $r34);

        $r35 = r3[i15];

        $f3 = $r35.<android.hardware.display.BrightnessChangeEvent: float powerBrightnessFactor>;

        $r36 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f3);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "powerSaveFactor", $r36);

        $r37 = r3[i15];

        $z2 = $r37.<android.hardware.display.BrightnessChangeEvent: boolean isUserSetBrightness>;

        $r38 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z2);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "userPoint", $r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        i17 = 0;

     label02:
        $r41 = r3[i15];

        $r42 = $r41.<android.hardware.display.BrightnessChangeEvent: float[] luxValues>;

        $i9 = lengthof $r42;

        if i17 >= $i9 goto label04;

        if i17 <= 0 goto label03;

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label03:
        $r57 = r3[i15];

        $r58 = $r57.<android.hardware.display.BrightnessChangeEvent: float[] luxValues>;

        $f4 = $r58[i17];

        $r59 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f4);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r60 = r3[i15];

        $r61 = $r60.<android.hardware.display.BrightnessChangeEvent: long[] luxTimestamps>;

        $l14 = $r61[i17];

        $r62 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l14);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r62);

        i17 = i17 + 1;

        goto label02;

     label04:
        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lux", $r43);

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "luxTimestamps", $r44);

        $r45 = r3[i15];

        $r46 = $r45.<android.hardware.display.BrightnessChangeEvent: long[] colorValueBuckets>;

        if $r46 == null goto label08;

        $r47 = r3[i15];

        $r48 = $r47.<android.hardware.display.BrightnessChangeEvent: long[] colorValueBuckets>;

        $i10 = lengthof $r48;

        if $i10 <= 0 goto label08;

        $r49 = r3[i15];

        $l11 = $r49.<android.hardware.display.BrightnessChangeEvent: long colorSampleDuration>;

        $r50 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l11);

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "colorSampleDuration", $r50);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        i18 = 0;

     label05:
        $r52 = r3[i15];

        $r53 = $r52.<android.hardware.display.BrightnessChangeEvent: long[] colorValueBuckets>;

        $i12 = lengthof $r53;

        if i18 >= $i12 goto label07;

        if i18 <= 0 goto label06;

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label06:
        $r54 = r3[i15];

        $r55 = $r54.<android.hardware.display.BrightnessChangeEvent: long[] colorValueBuckets>;

        $l13 = $r55[i18];

        $r56 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l13);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        i18 = i18 + 1;

        goto label05;

     label07:
        r66 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "colorValueBuckets", r66);

        goto label08;

     label08:
        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "event");

     label09:
        i15 = i15 + 1;

        goto label01;

     label10:
        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "events");

        interfaceinvoke $r4.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;
    }
}
