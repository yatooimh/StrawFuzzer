final class com.android.server.display.ColorFade extends java.lang.Object
{
    private static final int COLOR_FADE_LAYER;
    private static final boolean DEBUG;
    private static final int DEJANK_FRAMES;
    private static final int EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT;
    private static final int EGL_GL_COLORSPACE_KHR;
    public static final int MODE_COOL_DOWN;
    public static final int MODE_FADE;
    public static final int MODE_WARM_UP;
    private static final java.lang.String TAG;
    private boolean mCreatedResources;
    private int mDisplayHeight;
    private final int mDisplayId;
    private int mDisplayLayerStack;
    private final android.hardware.display.DisplayManagerInternal mDisplayManagerInternal;
    private int mDisplayWidth;
    private android.opengl.EGLConfig mEglConfig;
    private android.opengl.EGLContext mEglContext;
    private android.opengl.EGLDisplay mEglDisplay;
    private android.opengl.EGLSurface mEglSurface;
    private final int[] mGLBuffers;
    private int mGammaLoc;
    private boolean mIsWideColor;
    private int mMode;
    private int mOpacityLoc;
    private boolean mPrepared;
    private int mProgram;
    private final float[] mProjMatrix;
    private int mProjMatrixLoc;
    private android.view.Surface mSurface;
    private float mSurfaceAlpha;
    private android.view.SurfaceControl mSurfaceControl;
    private com.android.server.display.ColorFade$NaturalSurfaceLayout mSurfaceLayout;
    private android.view.SurfaceSession mSurfaceSession;
    private boolean mSurfaceVisible;
    private final java.nio.FloatBuffer mTexCoordBuffer;
    private int mTexCoordLoc;
    private final float[] mTexMatrix;
    private int mTexMatrixLoc;
    private final int[] mTexNames;
    private boolean mTexNamesGenerated;
    private int mTexUnitLoc;
    private final android.view.SurfaceControl$Transaction mTransaction;
    private final java.nio.FloatBuffer mVertexBuffer;
    private int mVertexLoc;

    public void <init>(int)
    {
        com.android.server.display.ColorFade r0;
        int i0;
        int[] $r1, $r4;
        float[] $r2, $r3;
        java.nio.FloatBuffer $r5, $r6;
        android.view.SurfaceControl$Transaction $r7;
        java.lang.Object $r8;
        android.hardware.display.DisplayManagerInternal $r9;

        r0 := @this: com.android.server.display.ColorFade;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[1];

        r0.<com.android.server.display.ColorFade: int[] mTexNames> = $r1;

        $r2 = newarray (float)[16];

        r0.<com.android.server.display.ColorFade: float[] mTexMatrix> = $r2;

        $r3 = newarray (float)[16];

        r0.<com.android.server.display.ColorFade: float[] mProjMatrix> = $r3;

        $r4 = newarray (int)[2];

        r0.<com.android.server.display.ColorFade: int[] mGLBuffers> = $r4;

        $r5 = staticinvoke <com.android.server.display.ColorFade: java.nio.FloatBuffer createNativeFloatBuffer(int)>(8);

        r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mVertexBuffer> = $r5;

        $r6 = staticinvoke <com.android.server.display.ColorFade: java.nio.FloatBuffer createNativeFloatBuffer(int)>(8);

        r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer> = $r6;

        $r7 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r7.<android.view.SurfaceControl$Transaction: void <init>()>();

        r0.<com.android.server.display.ColorFade: android.view.SurfaceControl$Transaction mTransaction> = $r7;

        r0.<com.android.server.display.ColorFade: int mDisplayId> = i0;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManagerInternal;");

        $r9 = (android.hardware.display.DisplayManagerInternal) $r8;

        r0.<com.android.server.display.ColorFade: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal> = $r9;

        return;
    }

    private boolean attachEglContext()
    {
        com.android.server.display.ColorFade r0;
        android.opengl.EGLSurface r1;
        android.opengl.EGLContext $r2;
        android.opengl.EGLDisplay $r3;
        boolean $z0;

        r0 := @this: com.android.server.display.ColorFade;

        r1 = r0.<com.android.server.display.ColorFade: android.opengl.EGLSurface mEglSurface>;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        $r2 = r0.<com.android.server.display.ColorFade: android.opengl.EGLContext mEglContext>;

        $z0 = staticinvoke <android.opengl.EGL14: boolean eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)>($r3, r1, r1, $r2);

        if $z0 != 0 goto label2;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglMakeCurrent");

        return 0;

     label2:
        return 1;
    }

    private boolean captureScreenshotTextureAndSetViewport()
    {
        com.android.server.display.ColorFade r0;
        android.graphics.SurfaceTexture r1;
        boolean $z0, $z1, z2, z3;
        int[] $r2, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float[] $r3;
        java.nio.FloatBuffer $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18;
        float $f0, $f1;
        java.lang.Throwable $r21, $r22;
        android.view.Surface r23;
        android.os.IBinder r24;

        r0 := @this: com.android.server.display.ColorFade;

        $z0 = specialinvoke r0.<com.android.server.display.ColorFade: boolean attachEglContext()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z1 = r0.<com.android.server.display.ColorFade: boolean mTexNamesGenerated>;

        if $z1 != 0 goto label04;

        $r20 = r0.<com.android.server.display.ColorFade: int[] mTexNames>;

        staticinvoke <android.opengl.GLES20: void glGenTextures(int,int[],int)>(1, $r20, 0);

        z2 = staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String)>("glGenTextures");

     label02:
        if z2 == 0 goto label03;

        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        return 0;

     label03:
        r0.<com.android.server.display.ColorFade: boolean mTexNamesGenerated> = 1;

     label04:
        r1 = new android.graphics.SurfaceTexture;

        $r2 = r0.<com.android.server.display.ColorFade: int[] mTexNames>;

        $i0 = $r2[0];

        specialinvoke r1.<android.graphics.SurfaceTexture: void <init>(int)>($i0);

        r23 = new android.view.Surface;

        specialinvoke r23.<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>(r1);

     label05:
        r24 = staticinvoke <android.view.SurfaceControl: android.os.IBinder getInternalDisplayToken()>();

     label06:
        if r24 != null goto label10;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ColorFade", "Failed to take screenshot because internal display is disconnected");

     label08:
        virtualinvoke r23.<android.view.Surface: void release()>();

        virtualinvoke r1.<android.graphics.SurfaceTexture: void release()>();

     label09:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        return 0;

     label10:
        $i1 = staticinvoke <android.view.SurfaceControl: int getActiveColorMode(android.os.IBinder)>(r24);

        if $i1 != 9 goto label12;

     label11:
        z3 = 1;

        goto label13;

     label12:
        z3 = 0;

     label13:
        r0.<com.android.server.display.ColorFade: boolean mIsWideColor> = z3;

        staticinvoke <android.view.SurfaceControl: void screenshot(android.os.IBinder,android.view.Surface)>(r24, r23);

        virtualinvoke r1.<android.graphics.SurfaceTexture: void updateTexImage()>();

        $r3 = r0.<com.android.server.display.ColorFade: float[] mTexMatrix>;

        virtualinvoke r1.<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>($r3);

     label14:
        virtualinvoke r23.<android.view.Surface: void release()>();

        virtualinvoke r1.<android.graphics.SurfaceTexture: void release()>();

     label15:
        $r4 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r4.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(0, 0.0F);

        $r6 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r6.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(1, 0.0F);

        $r8 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r8.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(2, 0.0F);

        $r10 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r10.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(3, 1.0F);

        $r12 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r12.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(4, 1.0F);

        $r14 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r14.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(5, 1.0F);

        $r16 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r16.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(6, 1.0F);

        $r18 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        virtualinvoke $r18.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(7, 0.0F);

        $i3 = r0.<com.android.server.display.ColorFade: int mDisplayWidth>;

        $i2 = r0.<com.android.server.display.ColorFade: int mDisplayHeight>;

        staticinvoke <android.opengl.GLES20: void glViewport(int,int,int,int)>(0, 0, $i3, $i2);

        $i4 = r0.<com.android.server.display.ColorFade: int mDisplayWidth>;

        $f1 = (float) $i4;

        $i5 = r0.<com.android.server.display.ColorFade: int mDisplayHeight>;

        $f0 = (float) $i5;

        specialinvoke r0.<com.android.server.display.ColorFade: void ortho(float,float,float,float,float,float)>(0.0F, $f1, 0.0F, $f0, -1.0F, 1.0F);

     label16:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        return 1;

     label17:
        $r22 := @caughtexception;

     label18:
        virtualinvoke r23.<android.view.Surface: void release()>();

        virtualinvoke r1.<android.graphics.SurfaceTexture: void release()>();

     label19:
        throw $r22;

     label20:
        $r21 := @caughtexception;

        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    private static boolean checkGlErrors(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String,boolean)>(r0, 1);

        return $z0;
    }

    private static boolean checkGlErrors(java.lang.String, boolean)
    {
        java.lang.String r0, $r6;
        boolean z0, z1;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 = 0;

     label1:
        i0 = staticinvoke <android.opengl.GLES20: int glGetError()>();

        if i0 == 0 goto label3;

        if z0 == 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed: error ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.Throwable;

        specialinvoke $r7.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ColorFade", $r6, $r7);

     label2:
        z1 = 1;

        goto label1;

     label3:
        return z1;
    }

    private boolean createEglContext()
    {
        com.android.server.display.ColorFade r0;
        int[] r1, $r6, $r10, r15;
        android.opengl.EGLConfig[] r2;
        int i0, $i1;
        android.opengl.EGLDisplay $r3, $r9, $r12, $r13, r14, r16;
        android.opengl.EGLConfig $r4, $r8, $r11;
        android.opengl.EGLContext $r5, $r7, r17;
        boolean $z0, $z1;

        r0 := @this: com.android.server.display.ColorFade;

        $r3 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        if $r3 != null goto label2;

        r14 = staticinvoke <android.opengl.EGL14: android.opengl.EGLDisplay eglGetDisplay(int)>(0);

        r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay> = r14;

        $r12 = <android.opengl.EGL14: android.opengl.EGLDisplay EGL_NO_DISPLAY>;

        if r14 != $r12 goto label1;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglGetDisplay");

        return 0;

     label1:
        r15 = newarray (int)[2];

        $r13 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        $z1 = staticinvoke <android.opengl.EGL14: boolean eglInitialize(android.opengl.EGLDisplay,int[],int,int[],int)>($r13, r15, 0, r15, 1);

        if $z1 != 0 goto label2;

        r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay> = null;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglInitialize");

        return 0;

     label2:
        $r4 = r0.<com.android.server.display.ColorFade: android.opengl.EGLConfig mEglConfig>;

        if $r4 != null goto label5;

        r1 = newarray (int)[1];

        r2 = newarray (android.opengl.EGLConfig)[1];

        r16 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        i0 = lengthof r2;

        $r10 = newarray (int)[11];

        $r10[0] = 12352;

        $r10[1] = 4;

        $r10[2] = 12324;

        $r10[3] = 8;

        $r10[4] = 12323;

        $r10[5] = 8;

        $r10[6] = 12322;

        $r10[7] = 8;

        $r10[8] = 12321;

        $r10[9] = 8;

        $r10[10] = 12344;

        $z0 = staticinvoke <android.opengl.EGL14: boolean eglChooseConfig(android.opengl.EGLDisplay,int[],int,android.opengl.EGLConfig[],int,int,int[],int)>(r16, $r10, 0, r2, 0, i0, r1, 0);

        if $z0 != 0 goto label3;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglChooseConfig");

        return 0;

     label3:
        $i1 = r1[0];

        if $i1 > 0 goto label4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ColorFade", "no valid config found");

        return 0;

     label4:
        $r11 = r2[0];

        r0.<com.android.server.display.ColorFade: android.opengl.EGLConfig mEglConfig> = $r11;

     label5:
        $r5 = r0.<com.android.server.display.ColorFade: android.opengl.EGLContext mEglContext>;

        if $r5 != null goto label6;

        $r9 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        $r8 = r0.<com.android.server.display.ColorFade: android.opengl.EGLConfig mEglConfig>;

        $r7 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        $r6 = newarray (int)[3];

        $r6[0] = 12440;

        $r6[1] = 2;

        $r6[2] = 12344;

        r17 = staticinvoke <android.opengl.EGL14: android.opengl.EGLContext eglCreateContext(android.opengl.EGLDisplay,android.opengl.EGLConfig,android.opengl.EGLContext,int[],int)>($r9, $r8, $r7, $r6, 0);

        r0.<com.android.server.display.ColorFade: android.opengl.EGLContext mEglContext> = r17;

        if r17 != null goto label6;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglCreateContext");

        return 0;

     label6:
        return 1;
    }

    private boolean createEglSurface()
    {
        com.android.server.display.ColorFade r0;
        android.opengl.EGLSurface $r1, r6;
        boolean $z0;
        android.view.Surface $r2;
        android.opengl.EGLConfig $r3;
        android.opengl.EGLDisplay $r4;
        int[] r5;

        r0 := @this: com.android.server.display.ColorFade;

        $r1 = r0.<com.android.server.display.ColorFade: android.opengl.EGLSurface mEglSurface>;

        if $r1 != null goto label2;

        r5 = newarray (int)[3];

        r5[0] = 12344;

        r5[1] = 12344;

        r5[2] = 12344;

        $z0 = r0.<com.android.server.display.ColorFade: boolean mIsWideColor>;

        if $z0 == 0 goto label1;

        r5[0] = 12445;

        r5[1] = 13456;

     label1:
        $r4 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        $r3 = r0.<com.android.server.display.ColorFade: android.opengl.EGLConfig mEglConfig>;

        $r2 = r0.<com.android.server.display.ColorFade: android.view.Surface mSurface>;

        r6 = staticinvoke <android.opengl.EGL14: android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLDisplay,android.opengl.EGLConfig,java.lang.Object,int[],int)>($r4, $r3, $r2, r5, 0);

        r0.<com.android.server.display.ColorFade: android.opengl.EGLSurface mEglSurface> = r6;

        if r6 != null goto label2;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglCreateWindowSurface");

        return 0;

     label2:
        return 1;
    }

    private static java.nio.FloatBuffer createNativeFloatBuffer(int)
    {
        int i0, $i1;
        java.nio.ByteBuffer r0;
        java.nio.ByteOrder $r1;
        java.nio.FloatBuffer $r3;

        i0 := @parameter0: int;

        $i1 = i0 * 4;

        r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        $r3 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.FloatBuffer asFloatBuffer()>();

        return $r3;
    }

    private boolean createSurface()
    {
        com.android.server.display.ColorFade r0;
        android.view.SurfaceSession $r1, $r4, $r16;
        android.view.SurfaceControl $r2, $r8, $r11, $r13, r21;
        android.view.SurfaceControl$Transaction $r3;
        android.view.SurfaceControl$Builder $r5, r19, r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.Surface $r10;
        com.android.server.display.ColorFade$NaturalSurfaceLayout $r12;
        android.hardware.display.DisplayManagerInternal $r14;
        android.view.Surface$OutOfResourcesException $r17;

        r0 := @this: com.android.server.display.ColorFade;

        $r1 = r0.<com.android.server.display.ColorFade: android.view.SurfaceSession mSurfaceSession>;

        if $r1 != null goto label1;

        $r16 = new android.view.SurfaceSession;

        specialinvoke $r16.<android.view.SurfaceSession: void <init>()>();

        r0.<com.android.server.display.ColorFade: android.view.SurfaceSession mSurfaceSession> = $r16;

     label1:
        $r2 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        if $r2 != null goto label8;

        $r3 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r3.<android.view.SurfaceControl$Transaction: void <init>()>();

     label2:
        r19 = new android.view.SurfaceControl$Builder;

        $r4 = r0.<com.android.server.display.ColorFade: android.view.SurfaceSession mSurfaceSession>;

        specialinvoke r19.<android.view.SurfaceControl$Builder: void <init>(android.view.SurfaceSession)>($r4);

        $r5 = virtualinvoke r19.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>("ColorFade");

        r20 = virtualinvoke $r5.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("ColorFade.createSurface");

        $i0 = r0.<com.android.server.display.ColorFade: int mMode>;

        if $i0 != 2 goto label4;

        virtualinvoke r20.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setColorLayer()>();

     label3:
        goto label5;

     label4:
        $i2 = r0.<com.android.server.display.ColorFade: int mDisplayWidth>;

        $i1 = r0.<com.android.server.display.ColorFade: int mDisplayHeight>;

        virtualinvoke r20.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>($i2, $i1);

     label5:
        r21 = virtualinvoke r20.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl> = r21;

     label6:
        $i3 = r0.<com.android.server.display.ColorFade: int mDisplayLayerStack>;

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayerStack(android.view.SurfaceControl,int)>(r21, $i3);

        $r8 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        $i5 = r0.<com.android.server.display.ColorFade: int mDisplayWidth>;

        $i4 = r0.<com.android.server.display.ColorFade: int mDisplayHeight>;

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,int,int)>($r8, $i5, $i4);

        $r10 = new android.view.Surface;

        specialinvoke $r10.<android.view.Surface: void <init>()>();

        r0.<com.android.server.display.ColorFade: android.view.Surface mSurface> = $r10;

        $r11 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r10.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>($r11);

        $r12 = new com.android.server.display.ColorFade$NaturalSurfaceLayout;

        $r14 = r0.<com.android.server.display.ColorFade: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i6 = r0.<com.android.server.display.ColorFade: int mDisplayId>;

        $r13 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        specialinvoke $r12.<com.android.server.display.ColorFade$NaturalSurfaceLayout: void <init>(android.hardware.display.DisplayManagerInternal,int,android.view.SurfaceControl)>($r14, $i6, $r13);

        r0.<com.android.server.display.ColorFade: com.android.server.display.ColorFade$NaturalSurfaceLayout mSurfaceLayout> = $r12;

        virtualinvoke $r12.<com.android.server.display.ColorFade$NaturalSurfaceLayout: void onDisplayTransaction(android.view.SurfaceControl$Transaction)>($r3);

        virtualinvoke $r3.<android.view.SurfaceControl$Transaction: void apply()>();

        goto label8;

     label7:
        $r17 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ColorFade", "Unable to create surface.", $r17);

        return 0;

     label8:
        return 1;

        catch android.view.Surface$OutOfResourcesException from label2 to label3 with label7;
        catch android.view.Surface$OutOfResourcesException from label4 to label5 with label7;
        catch android.view.Surface$OutOfResourcesException from label5 to label6 with label7;
    }

    private void destroyEglSurface()
    {
        com.android.server.display.ColorFade r0;
        android.opengl.EGLSurface r1;
        android.opengl.EGLDisplay $r2;
        boolean $z0;

        r0 := @this: com.android.server.display.ColorFade;

        r1 = r0.<com.android.server.display.ColorFade: android.opengl.EGLSurface mEglSurface>;

        if r1 == null goto label2;

        $r2 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        $z0 = staticinvoke <android.opengl.EGL14: boolean eglDestroySurface(android.opengl.EGLDisplay,android.opengl.EGLSurface)>($r2, r1);

        if $z0 != 0 goto label1;

        staticinvoke <com.android.server.display.ColorFade: void logEglError(java.lang.String)>("eglDestroySurface");

     label1:
        r0.<com.android.server.display.ColorFade: android.opengl.EGLSurface mEglSurface> = null;

     label2:
        return;
    }

    private void destroyGLBuffers()
    {
        com.android.server.display.ColorFade r0;
        int[] $r1;

        r0 := @this: com.android.server.display.ColorFade;

        $r1 = r0.<com.android.server.display.ColorFade: int[] mGLBuffers>;

        staticinvoke <android.opengl.GLES20: void glDeleteBuffers(int,int[],int)>(2, $r1, 0);

        staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String)>("glDeleteBuffers");

        return;
    }

    private void destroyGLShaders()
    {
        com.android.server.display.ColorFade r0;
        int $i0;

        r0 := @this: com.android.server.display.ColorFade;

        $i0 = r0.<com.android.server.display.ColorFade: int mProgram>;

        staticinvoke <android.opengl.GLES20: void glDeleteProgram(int)>($i0);

        staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String)>("glDeleteProgram");

        return;
    }

    private void destroyScreenshotTexture()
    {
        com.android.server.display.ColorFade r0;
        boolean $z0;
        int[] $r1;

        r0 := @this: com.android.server.display.ColorFade;

        $z0 = r0.<com.android.server.display.ColorFade: boolean mTexNamesGenerated>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.display.ColorFade: boolean mTexNamesGenerated> = 0;

        $r1 = r0.<com.android.server.display.ColorFade: int[] mTexNames>;

        staticinvoke <android.opengl.GLES20: void glDeleteTextures(int,int[],int)>(1, $r1, 0);

        staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String)>("glDeleteTextures");

     label1:
        return;
    }

    private void destroySurface()
    {
        com.android.server.display.ColorFade r0;
        android.view.SurfaceControl $r1, $r4;
        com.android.server.display.ColorFade$NaturalSurfaceLayout $r2;
        android.view.SurfaceControl$Transaction $r3, $r5;
        android.view.Surface $r6;

        r0 := @this: com.android.server.display.ColorFade;

        $r1 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.display.ColorFade: com.android.server.display.ColorFade$NaturalSurfaceLayout mSurfaceLayout>;

        virtualinvoke $r2.<com.android.server.display.ColorFade$NaturalSurfaceLayout: void dispose()>();

        r0.<com.android.server.display.ColorFade: com.android.server.display.ColorFade$NaturalSurfaceLayout mSurfaceLayout> = null;

        $r3 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r3.<android.view.SurfaceControl$Transaction: void <init>()>();

        $r4 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        $r5 = virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction remove(android.view.SurfaceControl)>($r4);

        virtualinvoke $r5.<android.view.SurfaceControl$Transaction: void apply()>();

        $r6 = r0.<com.android.server.display.ColorFade: android.view.Surface mSurface>;

        virtualinvoke $r6.<android.view.Surface: void release()>();

        r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl> = null;

        r0.<com.android.server.display.ColorFade: boolean mSurfaceVisible> = 0;

        r0.<com.android.server.display.ColorFade: float mSurfaceAlpha> = 0.0F;

     label1:
        return;
    }

    private void detachEglContext()
    {
        com.android.server.display.ColorFade r0;
        android.opengl.EGLDisplay r1;
        android.opengl.EGLContext $r2;
        android.opengl.EGLSurface $r3, $r4;

        r0 := @this: com.android.server.display.ColorFade;

        r1 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        if r1 == null goto label1;

        $r4 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $r3 = <android.opengl.EGL14: android.opengl.EGLSurface EGL_NO_SURFACE>;

        $r2 = <android.opengl.EGL14: android.opengl.EGLContext EGL_NO_CONTEXT>;

        staticinvoke <android.opengl.EGL14: boolean eglMakeCurrent(android.opengl.EGLDisplay,android.opengl.EGLSurface,android.opengl.EGLSurface,android.opengl.EGLContext)>(r1, $r4, $r3, $r2);

     label1:
        return;
    }

    private void drawFaded(float, float)
    {
        com.android.server.display.ColorFade r0;
        float f0, f1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float[] $r1, $r2;
        int[] $r3, $r4, $r5;

        r0 := @this: com.android.server.display.ColorFade;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $i0 = r0.<com.android.server.display.ColorFade: int mProgram>;

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>($i0);

        $i1 = r0.<com.android.server.display.ColorFade: int mProjMatrixLoc>;

        $r1 = r0.<com.android.server.display.ColorFade: float[] mProjMatrix>;

        staticinvoke <android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>($i1, 1, 0, $r1, 0);

        $i2 = r0.<com.android.server.display.ColorFade: int mTexMatrixLoc>;

        $r2 = r0.<com.android.server.display.ColorFade: float[] mTexMatrix>;

        staticinvoke <android.opengl.GLES20: void glUniformMatrix4fv(int,int,boolean,float[],int)>($i2, 1, 0, $r2, 0);

        $i3 = r0.<com.android.server.display.ColorFade: int mOpacityLoc>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i3, f0);

        $i4 = r0.<com.android.server.display.ColorFade: int mGammaLoc>;

        staticinvoke <android.opengl.GLES20: void glUniform1f(int,float)>($i4, f1);

        staticinvoke <android.opengl.GLES20: void glActiveTexture(int)>(33984);

        $r3 = r0.<com.android.server.display.ColorFade: int[] mTexNames>;

        $i5 = $r3[0];

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(36197, $i5);

        $r4 = r0.<com.android.server.display.ColorFade: int[] mGLBuffers>;

        $i6 = $r4[0];

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, $i6);

        $i7 = r0.<com.android.server.display.ColorFade: int mVertexLoc>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>($i7);

        $i8 = r0.<com.android.server.display.ColorFade: int mVertexLoc>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>($i8, 2, 5126, 0, 0, 0);

        $r5 = r0.<com.android.server.display.ColorFade: int[] mGLBuffers>;

        $i9 = $r5[1];

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, $i9);

        $i10 = r0.<com.android.server.display.ColorFade: int mTexCoordLoc>;

        staticinvoke <android.opengl.GLES20: void glEnableVertexAttribArray(int)>($i10);

        $i11 = r0.<com.android.server.display.ColorFade: int mTexCoordLoc>;

        staticinvoke <android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,int)>($i11, 2, 5126, 0, 0, 0);

        staticinvoke <android.opengl.GLES20: void glDrawArrays(int,int,int)>(6, 0, 4);

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(36197, 0);

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, 0);

        return;
    }

    private boolean initGLBuffers()
    {
        com.android.server.display.ColorFade r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        float $f0, $f1;
        java.nio.FloatBuffer $r1, $r5, $r6, $r8, $r9;
        int[] $r2, $r3, $r4, $r7;

        r0 := @this: com.android.server.display.ColorFade;

        $r1 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mVertexBuffer>;

        $i0 = r0.<com.android.server.display.ColorFade: int mDisplayWidth>;

        $f1 = (float) $i0;

        $i1 = r0.<com.android.server.display.ColorFade: int mDisplayHeight>;

        $f0 = (float) $i1;

        staticinvoke <com.android.server.display.ColorFade: void setQuad(java.nio.FloatBuffer,float,float,float,float)>($r1, 0.0F, 0.0F, $f1, $f0);

        $r2 = r0.<com.android.server.display.ColorFade: int[] mTexNames>;

        $i2 = $r2[0];

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(36197, $i2);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(36197, 10240, 9728);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(36197, 10241, 9728);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(36197, 10242, 33071);

        staticinvoke <android.opengl.GLES20: void glTexParameteri(int,int,int)>(36197, 10243, 33071);

        staticinvoke <android.opengl.GLES20: void glBindTexture(int,int)>(36197, 0);

        $r3 = r0.<com.android.server.display.ColorFade: int[] mGLBuffers>;

        staticinvoke <android.opengl.GLES20: void glGenBuffers(int,int[],int)>(2, $r3, 0);

        $r4 = r0.<com.android.server.display.ColorFade: int[] mGLBuffers>;

        $i3 = $r4[0];

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, $i3);

        $r5 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mVertexBuffer>;

        $i4 = virtualinvoke $r5.<java.nio.FloatBuffer: int capacity()>();

        $i5 = $i4 * 4;

        $r6 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mVertexBuffer>;

        staticinvoke <android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)>(34962, $i5, $r6, 35044);

        $r7 = r0.<com.android.server.display.ColorFade: int[] mGLBuffers>;

        $i6 = $r7[1];

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, $i6);

        $r8 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        $i7 = virtualinvoke $r8.<java.nio.FloatBuffer: int capacity()>();

        $i8 = $i7 * 4;

        $r9 = r0.<com.android.server.display.ColorFade: java.nio.FloatBuffer mTexCoordBuffer>;

        staticinvoke <android.opengl.GLES20: void glBufferData(int,int,java.nio.Buffer,int)>(34962, $i8, $r9, 35044);

        staticinvoke <android.opengl.GLES20: void glBindBuffer(int,int)>(34962, 0);

        return 1;
    }

    private boolean initGLShaders(android.content.Context)
    {
        com.android.server.display.ColorFade r0;
        android.content.Context r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;

        r0 := @this: com.android.server.display.ColorFade;

        r1 := @parameter0: android.content.Context;

        i0 = specialinvoke r0.<com.android.server.display.ColorFade: int loadShader(android.content.Context,int,int)>(r1, 17825795, 35633);

        i1 = specialinvoke r0.<com.android.server.display.ColorFade: int loadShader(android.content.Context,int,int)>(r1, 17825794, 35632);

        staticinvoke <android.opengl.GLES20: void glReleaseShaderCompiler()>();

        if i0 == 0 goto label2;

        if i1 != 0 goto label1;

        goto label2;

     label1:
        i2 = staticinvoke <android.opengl.GLES20: int glCreateProgram()>();

        r0.<com.android.server.display.ColorFade: int mProgram> = i2;

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>(i2, i0);

        $i3 = r0.<com.android.server.display.ColorFade: int mProgram>;

        staticinvoke <android.opengl.GLES20: void glAttachShader(int,int)>($i3, i1);

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>(i0);

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>(i1);

        $i4 = r0.<com.android.server.display.ColorFade: int mProgram>;

        staticinvoke <android.opengl.GLES20: void glLinkProgram(int)>($i4);

        $i5 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i6 = staticinvoke <android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>($i5, "position");

        r0.<com.android.server.display.ColorFade: int mVertexLoc> = $i6;

        $i7 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i8 = staticinvoke <android.opengl.GLES20: int glGetAttribLocation(int,java.lang.String)>($i7, "uv");

        r0.<com.android.server.display.ColorFade: int mTexCoordLoc> = $i8;

        $i9 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i10 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i9, "proj_matrix");

        r0.<com.android.server.display.ColorFade: int mProjMatrixLoc> = $i10;

        $i11 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i12 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i11, "tex_matrix");

        r0.<com.android.server.display.ColorFade: int mTexMatrixLoc> = $i12;

        $i13 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i14 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i13, "opacity");

        r0.<com.android.server.display.ColorFade: int mOpacityLoc> = $i14;

        $i15 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i16 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i15, "gamma");

        r0.<com.android.server.display.ColorFade: int mGammaLoc> = $i16;

        $i17 = r0.<com.android.server.display.ColorFade: int mProgram>;

        $i18 = staticinvoke <android.opengl.GLES20: int glGetUniformLocation(int,java.lang.String)>($i17, "texUnit");

        r0.<com.android.server.display.ColorFade: int mTexUnitLoc> = $i18;

        $i19 = r0.<com.android.server.display.ColorFade: int mProgram>;

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>($i19);

        $i20 = r0.<com.android.server.display.ColorFade: int mTexUnitLoc>;

        staticinvoke <android.opengl.GLES20: void glUniform1i(int,int)>($i20, 0);

        staticinvoke <android.opengl.GLES20: void glUseProgram(int)>(0);

        return 1;

     label2:
        return 0;
    }

    private int loadShader(android.content.Context, int, int)
    {
        com.android.server.display.ColorFade r0;
        int i0, i1, $i2, i6, i7;
        java.lang.StringBuilder $r1;
        java.lang.String $r7, $r8, $r9, r11;
        android.content.Context r10;
        int[] r12;

        r0 := @this: com.android.server.display.ColorFade;

        r10 := @parameter0: android.content.Context;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        r11 = specialinvoke r0.<com.android.server.display.ColorFade: java.lang.String readFile(android.content.Context,int)>(r10, i6);

        i1 = staticinvoke <android.opengl.GLES20: int glCreateShader(int)>(i0);

        staticinvoke <android.opengl.GLES20: void glShaderSource(int,java.lang.String)>(i1, r11);

        staticinvoke <android.opengl.GLES20: void glCompileShader(int)>(i1);

        r12 = newarray (int)[1];

        staticinvoke <android.opengl.GLES20: void glGetShaderiv(int,int,int[],int)>(i1, 35713, r12, 0);

        i7 = i1;

        $i2 = r12[0];

        if $i2 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not compile shader ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ColorFade", $r7);

        $r8 = staticinvoke <android.opengl.GLES20: java.lang.String glGetShaderSource(int)>(i1);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ColorFade", $r8);

        $r9 = staticinvoke <android.opengl.GLES20: java.lang.String glGetShaderInfoLog(int)>(i1);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ColorFade", $r9);

        staticinvoke <android.opengl.GLES20: void glDeleteShader(int)>(i1);

        i7 = 0;

     label1:
        return i7;
    }

    private static void logEglError(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.Throwable $r7;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed: error ");

        $i0 = staticinvoke <android.opengl.EGL14: int eglGetError()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.Throwable;

        specialinvoke $r7.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ColorFade", $r6, $r7);

        return;
    }

    private void ortho(float, float, float, float, float, float)
    {
        com.android.server.display.ColorFade r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;
        float[] r1;

        r0 := @this: com.android.server.display.ColorFade;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        r1 = r0.<com.android.server.display.ColorFade: float[] mProjMatrix>;

        $f6 = f1 - f0;

        $f7 = 2.0F / $f6;

        r1[0] = $f7;

        r1[1] = 0.0F;

        r1[2] = 0.0F;

        r1[3] = 0.0F;

        r1[4] = 0.0F;

        $f8 = f3 - f2;

        $f9 = 2.0F / $f8;

        r1[5] = $f9;

        r1[6] = 0.0F;

        r1[7] = 0.0F;

        r1[8] = 0.0F;

        r1[9] = 0.0F;

        $f10 = f5 - f4;

        $f11 = -2.0F / $f10;

        r1[10] = $f11;

        r1[11] = 0.0F;

        $f12 = f1 + f0;

        $f14 = neg $f12;

        $f13 = f1 - f0;

        $f15 = $f14 / $f13;

        r1[12] = $f15;

        $f16 = f3 + f2;

        $f18 = neg $f16;

        $f17 = f3 - f2;

        $f19 = $f18 / $f17;

        r1[13] = $f19;

        $f20 = f5 + f4;

        $f22 = neg $f20;

        $f21 = f5 - f4;

        $f23 = $f22 / $f21;

        r1[14] = $f23;

        r1[15] = 1.0F;

        return;
    }

    private java.lang.String readFile(android.content.Context, int)
    {
        com.android.server.display.ColorFade r0;
        int i0;
        android.content.res.Resources $r1;
        java.lang.String $r2, $r3, $r7, $r9;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.RuntimeException $r10;
        android.content.Context r11;
        java.io.InputStream r12;
        java.io.InputStreamReader r13;

        r0 := @this: com.android.server.display.ColorFade;

        r11 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

     label1:
        $r1 = virtualinvoke r11.<android.content.Context: android.content.res.Resources getResources()>();

        r12 = virtualinvoke $r1.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i0);

        r13 = new java.io.InputStreamReader;

        specialinvoke r13.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r12);

        $r2 = new java.lang.String;

        $r3 = staticinvoke <libcore.io.Streams: java.lang.String readFully(java.io.Reader)>(r13);

        specialinvoke $r2.<java.lang.String: void <init>(java.lang.String)>($r3);

     label2:
        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized shader ");

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ColorFade", $r9);

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r10;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void setQuad(java.nio.FloatBuffer, float, float, float, float)
    {
        java.nio.FloatBuffer r0;
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7;

        r0 := @parameter0: java.nio.FloatBuffer;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(0, f0);

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(1, f1);

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(2, f0);

        $f4 = f1 + f3;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(3, $f4);

        $f5 = f0 + f2;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(4, $f5);

        $f6 = f1 + f3;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(5, $f6);

        $f7 = f0 + f2;

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(6, $f7);

        virtualinvoke r0.<java.nio.FloatBuffer: java.nio.FloatBuffer put(int,float)>(7, f1);

        return;
    }

    private boolean showSurface(float)
    {
        com.android.server.display.ColorFade r0;
        float f0, $f1;
        boolean $z0;
        android.view.SurfaceControl $r1, $r4, $r6;
        android.view.SurfaceControl$Transaction $r2, $r3, $r5, $r7;
        byte $b0;

        r0 := @this: com.android.server.display.ColorFade;

        f0 := @parameter0: float;

        $z0 = r0.<com.android.server.display.ColorFade: boolean mSurfaceVisible>;

        if $z0 == 0 goto label1;

        $f1 = r0.<com.android.server.display.ColorFade: float mSurfaceAlpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

     label1:
        $r2 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl$Transaction mTransaction>;

        $r1 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        $r3 = virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setLayer(android.view.SurfaceControl,int)>($r1, 1073741825);

        $r4 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        $r5 = virtualinvoke $r3.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setAlpha(android.view.SurfaceControl,float)>($r4, f0);

        $r6 = r0.<com.android.server.display.ColorFade: android.view.SurfaceControl mSurfaceControl>;

        $r7 = virtualinvoke $r5.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>($r6);

        virtualinvoke $r7.<android.view.SurfaceControl$Transaction: void apply()>();

        r0.<com.android.server.display.ColorFade: boolean mSurfaceVisible> = 1;

        r0.<com.android.server.display.ColorFade: float mSurfaceAlpha> = f0;

     label2:
        return 1;
    }

    public void dismiss()
    {
        com.android.server.display.ColorFade r0;
        boolean $z0;

        r0 := @this: com.android.server.display.ColorFade;

        $z0 = r0.<com.android.server.display.ColorFade: boolean mPrepared>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.display.ColorFade: void dismissResources()>();

        specialinvoke r0.<com.android.server.display.ColorFade: void destroySurface()>();

        r0.<com.android.server.display.ColorFade: boolean mPrepared> = 0;

     label1:
        return;
    }

    public void dismissResources()
    {
        com.android.server.display.ColorFade r0;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.display.ColorFade;

        $z0 = r0.<com.android.server.display.ColorFade: boolean mCreatedResources>;

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.display.ColorFade: boolean attachEglContext()>();

     label1:
        specialinvoke r0.<com.android.server.display.ColorFade: void destroyScreenshotTexture()>();

        specialinvoke r0.<com.android.server.display.ColorFade: void destroyGLShaders()>();

        specialinvoke r0.<com.android.server.display.ColorFade: void destroyGLBuffers()>();

        specialinvoke r0.<com.android.server.display.ColorFade: void destroyEglSurface()>();

     label2:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        staticinvoke <android.opengl.GLES20: void glFlush()>();

        r0.<com.android.server.display.ColorFade: boolean mCreatedResources> = 0;

        goto label4;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        throw $r2;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean draw(float)
    {
        com.android.server.display.ColorFade r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, d11;
        boolean z0, $z1, $z2, $z4, $z5;
        int $i0;
        byte $b1;
        android.opengl.EGLSurface $r2;
        android.opengl.EGLDisplay $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.display.ColorFade;

        f0 := @parameter0: float;

        $z1 = r0.<com.android.server.display.ColorFade: boolean mPrepared>;

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $i0 = r0.<com.android.server.display.ColorFade: int mMode>;

        if $i0 != 2 goto label02;

        $f6 = 1.0F - f0;

        $z5 = specialinvoke r0.<com.android.server.display.ColorFade: boolean showSurface(float)>($f6);

        return $z5;

     label02:
        $z2 = specialinvoke r0.<com.android.server.display.ColorFade: boolean attachEglContext()>();

        if $z2 != 0 goto label03;

        return 0;

     label03:
        staticinvoke <android.opengl.GLES20: void glClearColor(float,float,float,float)>(0.0F, 0.0F, 0.0F, 1.0F);

        staticinvoke <android.opengl.GLES20: void glClear(int)>(16384);

     label04:
        $f1 = 1.0F - f0;

        d0 = (double) $f1;

     label05:
        $d2 = 3.141592653589793 * d0;

        d1 = staticinvoke <java.lang.Math: double cos(double)>($d2);

     label06:
        $b1 = d1 cmpg 0.0;

        if $b1 >= 0 goto label07;

        d11 = -1.0;

        goto label08;

     label07:
        d11 = 1.0;

     label08:
        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, 2.0);

        $d4 = neg $d3;

        $f2 = (float) $d4;

        $f3 = $f2 + 1.0F;

        $d5 = d11 * 0.5;

        $d6 = staticinvoke <java.lang.Math: double pow(double,double)>(d1, 2.0);

        $d7 = $d5 * $d6;

        $d8 = $d7 + 0.5;

        $d9 = $d8 * 0.9;

        $d10 = 0.1 + $d9;

        $f4 = (float) $d10;

        $f5 = 1.0F / $f4;

        specialinvoke r0.<com.android.server.display.ColorFade: void drawFaded(float,float)>($f3, $f5);

        z0 = staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String)>("drawFrame");

     label09:
        if z0 == 0 goto label10;

        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        return 0;

     label10:
        $r3 = r0.<com.android.server.display.ColorFade: android.opengl.EGLDisplay mEglDisplay>;

        $r2 = r0.<com.android.server.display.ColorFade: android.opengl.EGLSurface mEglSurface>;

        staticinvoke <android.opengl.EGL14: boolean eglSwapBuffers(android.opengl.EGLDisplay,android.opengl.EGLSurface)>($r3, $r2);

     label11:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        $z4 = specialinvoke r0.<com.android.server.display.ColorFade: boolean showSurface(float)>(1.0F);

        return $z4;

     label12:
        $r4 := @caughtexception;

        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        throw $r4;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.ColorFade r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r6, $r10, $r14, $r18, $r22, $r26;
        boolean $z0, $z1;
        java.lang.String $r5, $r9, $r13, $r17, $r21, $r25, $r29;
        int $i0, $i1, $i2, $i3;
        float $f0;

        r0 := @this: com.android.server.display.ColorFade;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Color Fade State:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPrepared=");

        $z0 = r0.<com.android.server.display.ColorFade: boolean mPrepared>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMode=");

        $i0 = r0.<com.android.server.display.ColorFade: int mMode>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayLayerStack=");

        $i1 = r0.<com.android.server.display.ColorFade: int mDisplayLayerStack>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayWidth=");

        $i2 = r0.<com.android.server.display.ColorFade: int mDisplayWidth>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayHeight=");

        $i3 = r0.<com.android.server.display.ColorFade: int mDisplayHeight>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSurfaceVisible=");

        $z1 = r0.<com.android.server.display.ColorFade: boolean mSurfaceVisible>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSurfaceAlpha=");

        $f0 = r0.<com.android.server.display.ColorFade: float mSurfaceAlpha>;

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        return;
    }

    public boolean prepare(android.content.Context, int)
    {
        com.android.server.display.ColorFade r0;
        android.view.DisplayInfo r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3, i4, i5;
        android.hardware.display.DisplayManagerInternal $r2;
        java.lang.Throwable $r3;
        android.content.Context r4;

        r0 := @this: com.android.server.display.ColorFade;

        r4 := @parameter0: android.content.Context;

        i4 := @parameter1: int;

        r0.<com.android.server.display.ColorFade: int mMode> = i4;

        $r2 = r0.<com.android.server.display.ColorFade: android.hardware.display.DisplayManagerInternal mDisplayManagerInternal>;

        $i0 = r0.<com.android.server.display.ColorFade: int mDisplayId>;

        r1 = virtualinvoke $r2.<android.hardware.display.DisplayManagerInternal: android.view.DisplayInfo getDisplayInfo(int)>($i0);

        $i1 = r1.<android.view.DisplayInfo: int layerStack>;

        r0.<com.android.server.display.ColorFade: int mDisplayLayerStack> = $i1;

        $i2 = virtualinvoke r1.<android.view.DisplayInfo: int getNaturalWidth()>();

        r0.<com.android.server.display.ColorFade: int mDisplayWidth> = $i2;

        $i3 = virtualinvoke r1.<android.view.DisplayInfo: int getNaturalHeight()>();

        r0.<com.android.server.display.ColorFade: int mDisplayHeight> = $i3;

        $z1 = specialinvoke r0.<com.android.server.display.ColorFade: boolean createSurface()>();

        if $z1 == 0 goto label10;

        $z2 = specialinvoke r0.<com.android.server.display.ColorFade: boolean createEglContext()>();

        if $z2 == 0 goto label10;

        $z3 = specialinvoke r0.<com.android.server.display.ColorFade: boolean createEglSurface()>();

        if $z3 == 0 goto label10;

        $z4 = specialinvoke r0.<com.android.server.display.ColorFade: boolean captureScreenshotTextureAndSetViewport()>();

        if $z4 != 0 goto label01;

        goto label10;

     label01:
        $z5 = specialinvoke r0.<com.android.server.display.ColorFade: boolean attachEglContext()>();

        if $z5 != 0 goto label02;

        return 0;

     label02:
        $z6 = specialinvoke r0.<com.android.server.display.ColorFade: boolean initGLShaders(android.content.Context)>(r4);

        if $z6 == 0 goto label07;

        $z7 = specialinvoke r0.<com.android.server.display.ColorFade: boolean initGLBuffers()>();

        if $z7 == 0 goto label07;

        z0 = staticinvoke <com.android.server.display.ColorFade: boolean checkGlErrors(java.lang.String)>("prepare");

     label03:
        if z0 == 0 goto label04;

        goto label07;

     label04:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        r0.<com.android.server.display.ColorFade: boolean mCreatedResources> = 1;

        r0.<com.android.server.display.ColorFade: boolean mPrepared> = 1;

        if i4 != 1 goto label06;

        i5 = 0;

     label05:
        if i5 >= 3 goto label06;

        virtualinvoke r0.<com.android.server.display.ColorFade: boolean draw(float)>(1.0F);

        i5 = i5 + 1;

        goto label05;

     label06:
        return 1;

     label07:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        virtualinvoke r0.<com.android.server.display.ColorFade: void dismiss()>();

     label08:
        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        return 0;

     label09:
        $r3 := @caughtexception;

        specialinvoke r0.<com.android.server.display.ColorFade: void detachEglContext()>();

        throw $r3;

     label10:
        virtualinvoke r0.<com.android.server.display.ColorFade: void dismiss()>();

        return 0;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public static void <clinit>()
    {
        <com.android.server.display.ColorFade: java.lang.String TAG> = "ColorFade";

        <com.android.server.display.ColorFade: int MODE_WARM_UP> = 0;

        <com.android.server.display.ColorFade: int MODE_FADE> = 2;

        <com.android.server.display.ColorFade: int MODE_COOL_DOWN> = 1;

        <com.android.server.display.ColorFade: int EGL_GL_COLORSPACE_KHR> = 12445;

        <com.android.server.display.ColorFade: int EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT> = 13456;

        <com.android.server.display.ColorFade: int DEJANK_FRAMES> = 3;

        <com.android.server.display.ColorFade: boolean DEBUG> = 0;

        <com.android.server.display.ColorFade: int COLOR_FADE_LAYER> = 1073741825;

        return;
    }
}
