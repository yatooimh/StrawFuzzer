final class com.android.server.display.DisplayManagerService$BinderService extends android.hardware.display.IDisplayManager$Stub
{
    final com.android.server.display.DisplayManagerService this$0;

    void <init>(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        com.android.server.display.DisplayManagerService r1;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService;

        r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0> = r1;

        specialinvoke r0.<android.hardware.display.IDisplayManager$Stub: void <init>()>();

        return;
    }

    private boolean canProjectSecureVideo(android.media.projection.IMediaProjection)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        boolean z0, $z1;
        android.os.RemoteException $r1;
        android.media.projection.IMediaProjection r2;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r2 := @parameter0: android.media.projection.IMediaProjection;

        if r2 == null goto label5;

     label1:
        z0 = interfaceinvoke r2.<android.media.projection.IMediaProjection: boolean canProjectSecureVideo()>();

     label2:
        if z0 == 0 goto label3;

        return 1;

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManagerService", "Unable to query projection service for permissions", $r1);

     label5:
        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.CAPTURE_SECURE_VIDEO_OUTPUT", "canProjectSecureVideo()");

        return $z1;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private boolean canProjectVideo(android.media.projection.IMediaProjection)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.media.projection.IMediaProjection r1;
        boolean z0, $z1, $z2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjection;

        if r1 == null goto label5;

     label1:
        z0 = interfaceinvoke r1.<android.media.projection.IMediaProjection: boolean canProjectVideo()>();

     label2:
        if z0 == 0 goto label3;

        return 1;

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManagerService", "Unable to query projection service for permissions", $r3);

     label5:
        $z2 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.CAPTURE_VIDEO_OUTPUT", "canProjectVideo()");

        if $z2 == 0 goto label6;

        return 1;

     label6:
        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean canProjectSecureVideo(android.media.projection.IMediaProjection)>(r1);

        return $z1;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    private boolean checkCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.lang.String r1, r2, $r15;
        com.android.server.display.DisplayManagerService $r4;
        android.content.Context $r5;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r4);

        $i0 = virtualinvoke $r5.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r15);

        return 0;
    }

    private boolean validatePackageName(int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.lang.String r1, $r6;
        java.lang.String[] r2;
        int i0, i1, i2;
        com.android.server.display.DisplayManagerService $r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label3;

        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r3);

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke $r5.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i1);

        if r2 == null goto label3;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r6 = r2[i2];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    public void connectWifiDisplay(java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        java.lang.IllegalArgumentException $r1;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r6 := @parameter0: java.lang.String;

        if r6 == null goto label4;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to connect to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2600(com.android.server.display.DisplayManagerService,java.lang.String)>($r4, r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig, android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.media.projection.IMediaProjection r2;
        java.lang.String r3;
        int i0, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, $i11, i12;
        android.view.Surface r4;
        long l1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.SecurityException $r5, $r9, $r10, $r11, $r18, r20;
        java.lang.IllegalArgumentException $r6, $r7, $r14, $r15;
        com.android.server.display.DisplayManagerService $r8, $r12;
        android.media.projection.IMediaProjectionManager $r13;
        java.lang.Throwable $r16;
        android.os.RemoteException $r17;
        android.hardware.display.VirtualDisplayConfig r19;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r19 := @parameter0: android.hardware.display.VirtualDisplayConfig;

        r1 := @parameter1: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter2: android.media.projection.IMediaProjection;

        r3 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean validatePackageName(int,java.lang.String)>(i0, r3);

        if $z0 == 0 goto label25;

        if r1 == null goto label24;

        if r19 == null goto label23;

        r4 = virtualinvoke r19.<android.hardware.display.VirtualDisplayConfig: android.view.Surface getSurface()>();

        i7 = virtualinvoke r19.<android.hardware.display.VirtualDisplayConfig: int getFlags()>();

        if r4 == null goto label02;

        $z6 = virtualinvoke r4.<android.view.Surface: boolean isSingleBuffered()>();

        if $z6 != 0 goto label01;

        goto label02;

     label01:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface can\'t be single-buffered");

        throw $r15;

     label02:
        i8 = i7;

        $i2 = i7 & 1;

        if $i2 == 0 goto label04;

        i8 = i7 | 16;

        $i6 = i8 & 32;

        if $i6 != 0 goto label03;

        goto label04;

     label03:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Public display must not be marked as SHOW_WHEN_LOCKED_INSECURE");

        throw $r14;

     label04:
        $i3 = i8 & 8;

        if $i3 == 0 goto label05;

        i8 = i8 & -17;

        goto label05;

     label05:
        i9 = i8;

        if r2 == null goto label10;

     label06:
        $r12 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r13 = staticinvoke <com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager access$3400(com.android.server.display.DisplayManagerService)>($r12);

        $z5 = interfaceinvoke $r13.<android.media.projection.IMediaProjectionManager: boolean isValidMediaProjection(android.media.projection.IMediaProjection)>(r2);

        if $z5 == 0 goto label08;

        i9 = interfaceinvoke r2.<android.media.projection.IMediaProjection: int applyVirtualDisplayFlags(int)>(i8);

     label07:
        goto label10;

     label08:
        r20 = new java.lang.SecurityException;

        specialinvoke r20.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid media projection");

        throw r20;

     label09:
        $r17 := @caughtexception;

        $r18 = new java.lang.SecurityException;

        specialinvoke $r18.<java.lang.SecurityException: void <init>(java.lang.String)>("unable to validate media projection or flags");

        throw $r18;

     label10:
        if i0 == 1000 goto label12;

        $i5 = i9 & 16;

        if $i5 == 0 goto label12;

        $z4 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean canProjectVideo(android.media.projection.IMediaProjection)>(r2);

        if $z4 == 0 goto label11;

        goto label12;

     label11:
        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CAPTURE_VIDEO_OUTPUT or CAPTURE_SECURE_VIDEO_OUTPUT permission, or an appropriate MediaProjection token in order to create a screen sharing virtual display.");

        throw $r11;

     label12:
        if i0 == 1000 goto label14;

        $i4 = i9 & 4;

        if $i4 == 0 goto label14;

        $z3 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean canProjectSecureVideo(android.media.projection.IMediaProjection)>(r2);

        if $z3 == 0 goto label13;

        goto label14;

     label13:
        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires CAPTURE_SECURE_VIDEO_OUTPUT or an appropriate MediaProjection token to create a secure virtual display.");

        throw $r10;

     label14:
        if i0 == 1000 goto label16;

        $z2 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.ADD_TRUSTED_DISPLAY", "createVirtualDisplay()");

        if $z2 == 0 goto label15;

        goto label16;

     label15:
        i10 = i9 & -513;

        goto label17;

     label16:
        i10 = i9 | 1024;

     label17:
        $i11 = i10 & 1536;

        if $i11 != 512 goto label19;

        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_SYSTEM_WINDOW", "createVirtualDisplay()");

        if $z1 == 0 goto label18;

        goto label19;

     label18:
        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires INTERNAL_SYSTEM_WINDOW permission");

        throw $r9;

     label19:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label20:
        $r8 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        i12 = staticinvoke <com.android.server.display.DisplayManagerService: int access$3500(com.android.server.display.DisplayManagerService,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>($r8, r1, r2, i0, r3, r4, i10, r19);

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i12;

     label22:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r16;

     label23:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("virtualDisplayConfig must not be null");

        throw $r7;

     label24:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("appToken must not be null");

        throw $r6;

     label25:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("packageName must match the calling uid");

        throw $r5;

        catch android.os.RemoteException from label06 to label07 with label09;
        catch android.os.RemoteException from label08 to label09 with label09;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    public void disconnectWifiDisplay()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2700(com.android.server.display.DisplayManagerService)>($r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        long l0;
        com.android.server.display.DisplayManagerService $r3, $r5;
        android.content.Context $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.io.FileDescriptor r7;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r7 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r3);

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "DisplayManagerService", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$4000(com.android.server.display.DisplayManagerService,java.io.PrintWriter)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void forgetWifiDisplay(java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        java.lang.IllegalArgumentException $r1;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r6 := @parameter0: java.lang.String;

        if r6 == null goto label4;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to forget to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2900(com.android.server.display.DisplayManagerService,java.lang.String)>($r4, r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.content.pm.ParceledListSlice getAmbientBrightnessStats()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, $i2;
        long l1;
        com.android.server.display.DisplayManagerService $r1, $r3, $r4;
        android.content.Context $r2;
        com.android.server.display.DisplayPowerController $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.display.DisplayManagerService$SyncRoot r8;
        android.content.pm.ParceledListSlice r9;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r2 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r1);

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_AMBIENT_LIGHT_STATS", "Permission required to to access ambient light stats.");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r8 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r3);

        entermonitor r8;

     label2:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)>($r4);

        r9 = virtualinvoke $r5.<com.android.server.display.DisplayPowerController: android.content.pm.ParceledListSlice getAmbientBrightnessStats(int)>(i0);

        exitmonitor r8;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r9;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r8;

     label6:
        throw $r7;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.hardware.display.BrightnessConfiguration r2, r16;
        com.android.server.display.DisplayManagerService $r3, $r5, $r7, $r8, $r10, $r12;
        android.content.Context $r4, $r13;
        int $i1, i2, i3;
        android.os.UserManager $r6;
        com.android.server.display.PersistentDataStore $r9;
        com.android.server.display.DisplayPowerController $r11;
        java.lang.Throwable $r14, $r15;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i2 := @parameter0: int;

        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r3);

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_DISPLAY_BRIGHTNESS", "Permission required to read the display\'s brightness configuration");

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i2 == $i1 goto label01;

        $r12 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r13 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r12);

        virtualinvoke $r13.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", "Permission required to read the display brightness configuration of another user");

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r6 = staticinvoke <com.android.server.display.DisplayManagerService: android.os.UserManager access$4300(com.android.server.display.DisplayManagerService)>($r5);

        i3 = virtualinvoke $r6.<android.os.UserManager: int getUserSerialNumber(int)>(i2);

        $r7 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r1 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r7);

        entermonitor r1;

     label03:
        $r8 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r9 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore access$4400(com.android.server.display.DisplayManagerService)>($r8);

        r2 = virtualinvoke $r9.<com.android.server.display.PersistentDataStore: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration(int)>(i3);

     label04:
        r16 = r2;

        if r2 != null goto label06;

     label05:
        $r10 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r11 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)>($r10);

        r16 = virtualinvoke $r11.<com.android.server.display.DisplayPowerController: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>();

     label06:
        exitmonitor r1;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r16;

     label08:
        $r15 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r15;

     label11:
        $r14 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, $i2, i3, i4;
        long l1;
        com.android.server.display.DisplayManagerService $r1, $r3, $r7, $r12, $r14;
        android.content.Context $r2, $r4, $r8;
        java.lang.Object $r5;
        android.app.AppOpsManager $r6;
        java.lang.Throwable $r9, $r10;
        java.lang.String r11;
        boolean z1;
        com.android.server.display.DisplayManagerService$SyncRoot r13;
        com.android.server.display.DisplayPowerController $r15;
        android.content.pm.ParceledListSlice r16;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r11 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r2 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r1);

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BRIGHTNESS_SLIDER_USAGE", "Permission to read brightness events.");

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r3);

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r6 = (android.app.AppOpsManager) $r5;

        i0 = virtualinvoke $r6.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(43, i3, r11);

        z1 = 1;

        if i0 != 3 goto label03;

        $r7 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r8 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r7);

        $i2 = virtualinvoke $r8.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.PACKAGE_USAGE_STATS");

        if $i2 != 0 goto label01;

        goto label02;

     label01:
        z1 = 0;

     label02:
        goto label05;

     label03:
        if i0 != 0 goto label04;

        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i3);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r12 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r13 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r12);

        entermonitor r13;

     label07:
        $r14 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r15 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)>($r14);

        r16 = virtualinvoke $r15.<com.android.server.display.DisplayPowerController: android.content.pm.ParceledListSlice getBrightnessEvents(int,boolean)>(i4, z1);

        exitmonitor r13;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r16;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r13;

     label11:
        throw $r10;

     label12:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r9;

        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r1, $r3, $r4;
        android.content.Context $r2;
        com.android.server.display.DisplayPowerController $r5;
        java.lang.Throwable $r6, $r7;
        com.android.server.display.DisplayManagerService$SyncRoot r8;
        android.hardware.display.BrightnessConfiguration r9;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r2 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r1);

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_DISPLAY_BRIGHTNESS", "Permission required to read the display\'s default brightness configuration");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r8 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r3);

        entermonitor r8;

     label2:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)>($r4);

        r9 = virtualinvoke $r5.<com.android.server.display.DisplayPowerController: android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()>();

        exitmonitor r8;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r9;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r8;

     label6:
        throw $r6;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public int[] getDisplayIds()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        com.android.server.display.DisplayManagerService $r1;
        java.lang.Throwable $r2;
        int[] r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r3 = staticinvoke <com.android.server.display.DisplayManagerService: int[] access$2000(com.android.server.display.DisplayManagerService,int)>($r1, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.view.DisplayInfo getDisplayInfo(int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, i1;
        long l2;
        com.android.server.display.DisplayManagerService $r1;
        java.lang.Throwable $r2;
        android.view.DisplayInfo r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.view.DisplayInfo access$1900(com.android.server.display.DisplayManagerService,int,int)>($r1, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.display.Curve getMinimumBrightnessCurve()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r1;
        java.lang.Throwable $r2;
        android.hardware.display.Curve r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r3 = virtualinvoke $r1.<com.android.server.display.DisplayManagerService: android.hardware.display.Curve getMinimumBrightnessCurveInternal()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getPreferredWideGamutColorSpaceId()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        int i1;
        com.android.server.display.DisplayManagerService $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        i1 = virtualinvoke $r2.<com.android.server.display.DisplayManagerService: int getPreferredWideGamutColorSpaceIdInternal()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i1;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.graphics.Point getStableDisplaySize()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r1;
        java.lang.Throwable $r2;
        android.graphics.Point r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.graphics.Point access$2200(com.android.server.display.DisplayManagerService)>($r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r1;
        java.lang.Throwable $r2;
        android.hardware.display.WifiDisplayStatus r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus access$3200(com.android.server.display.DisplayManagerService)>($r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isMinimalPostProcessingRequested(int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        boolean z0;
        com.android.server.display.DisplayManagerService $r3, $r4;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        com.android.server.display.LogicalDisplay $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r1 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = staticinvoke <com.android.server.display.DisplayManagerService: android.util.SparseArray access$4500(com.android.server.display.DisplayManagerService)>($r4);

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.display.LogicalDisplay) $r6;

        z0 = virtualinvoke $r7.<com.android.server.display.LogicalDisplay: boolean getRequestedMinimalPostProcessingLocked()>();

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isUidPresentOnDisplay(int, int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, i1;
        long l2;
        boolean z0;
        com.android.server.display.DisplayManagerService $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        z0 = staticinvoke <com.android.server.display.DisplayManagerService: boolean access$2100(com.android.server.display.DisplayManagerService,int,int)>($r2, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.display.DisplayManagerShellCommand $r7;
        com.android.server.display.DisplayManagerService $r8;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.display.DisplayManagerShellCommand;

        $r8 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        specialinvoke $r7.<com.android.server.display.DisplayManagerShellCommand: void <init>(com.android.server.display.DisplayManagerService)>($r8);

        virtualinvoke $r7.<com.android.server.display.DisplayManagerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void pauseWifiDisplay()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to pause a wifi display session");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3000(com.android.server.display.DisplayManagerService)>($r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void registerCallback(android.hardware.display.IDisplayManagerCallback)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        java.lang.IllegalArgumentException $r1;
        com.android.server.display.DisplayManagerService $r2;
        java.lang.Throwable $r3;
        android.hardware.display.IDisplayManagerCallback r4;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r4 := @parameter0: android.hardware.display.IDisplayManagerCallback;

        if r4 == null goto label4;

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2300(com.android.server.display.DisplayManagerService,android.hardware.display.IDisplayManagerCallback,int)>($r2, r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r1;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;
        android.hardware.display.IVirtualDisplayCallback r4;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r4 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r2 = interfaceinvoke r4.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3800(com.android.server.display.DisplayManagerService,android.os.IBinder)>($r1, $r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void renameWifiDisplay(java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        java.lang.String r1, r7;
        long l0;
        java.lang.IllegalArgumentException $r2;
        com.android.server.display.DisplayManagerService $r3, $r5;
        android.content.Context $r4;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r7 == null goto label4;

        $r3 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r4 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r3);

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to rename to a wifi display");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2800(com.android.server.display.DisplayManagerService,java.lang.String,java.lang.String)>($r5, r7, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void requestColorMode(int, int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, i1;
        long l2;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_DISPLAY_COLOR_MODE", "Permission required to change the display color mode");

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3300(com.android.server.display.DisplayManagerService,int,int)>($r4, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, i1, i2;
        long l3;
        com.android.server.display.DisplayManagerService $r1;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;
        android.hardware.display.IVirtualDisplayCallback r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r4 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 <= 0 goto label4;

        if i1 <= 0 goto label4;

        if i2 <= 0 goto label4;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r2 = interfaceinvoke r4.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3600(com.android.server.display.DisplayManagerService,android.os.IBinder,int,int,int)>($r1, $r2, i0, i1, i2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r3;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width, height, and densityDpi must be greater than 0");

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void resumeWifiDisplay()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        long l0;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to resume a wifi display session");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3100(com.android.server.display.DisplayManagerService)>($r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration, int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0, $i2, $i3;
        java.lang.String r1, r8;
        long l1;
        com.android.server.display.DisplayManagerService $r2, $r4, $r9;
        android.content.Context $r3, $r5;
        boolean $z0;
        java.lang.Throwable $r6;
        android.hardware.display.BrightnessConfiguration r7;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r7 := @parameter0: android.hardware.display.BrightnessConfiguration;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_DISPLAY_BRIGHTNESS", "Permission required to change the display\'s brightness configuration");

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 == $i2 goto label1;

        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r5 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r4);

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS", "Permission required to change the display brightness configuration of another user");

     label1:
        r8 = r1;

        if r1 == null goto label2;

        r8 = r1;

        $i3 = staticinvoke <com.android.server.display.DisplayManagerService$BinderService: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService$BinderService: boolean validatePackageName(int,java.lang.String)>($i3, r1);

        if $z0 != 0 goto label2;

        r8 = null;

     label2:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r9 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$4200(com.android.server.display.DisplayManagerService,android.hardware.display.BrightnessConfiguration,int,java.lang.String)>($r9, r7, i0, r8);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setTemporaryAutoBrightnessAdjustment(float)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        float f0;
        long l0;
        com.android.server.display.DisplayManagerService $r2, $r4, $r5;
        android.content.Context $r3;
        com.android.server.display.DisplayPowerController $r6;
        java.lang.Throwable $r7, $r8;
        com.android.server.display.DisplayManagerService$SyncRoot r9;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        f0 := @parameter0: float;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_DISPLAY_BRIGHTNESS", "Permission required to set the display\'s auto brightness adjustment");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r9 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r4);

        entermonitor r9;

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r6 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)>($r5);

        virtualinvoke $r6.<com.android.server.display.DisplayPowerController: void setTemporaryAutoBrightnessAdjustment(float)>(f0);

        exitmonitor r9;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r9;

     label6:
        throw $r7;

     label7:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void setTemporaryBrightness(float)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        float f0;
        long l0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.DisplayManagerService $r2, $r4, $r5;
        android.content.Context $r3;
        com.android.server.display.DisplayPowerController $r6;
        java.lang.Throwable $r7, $r8;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        f0 := @parameter0: float;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_DISPLAY_BRIGHTNESS", "Permission required to set the display\'s brightness");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        r1 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)>($r4);

        entermonitor r1;

     label2:
        $r5 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r6 = staticinvoke <com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)>($r5);

        virtualinvoke $r6.<com.android.server.display.DisplayPowerController: void setTemporaryBrightness(float)>(f0);

        exitmonitor r1;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback, boolean)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        boolean z0;
        long l0;
        com.android.server.display.DisplayManagerService $r1;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;
        android.hardware.display.IVirtualDisplayCallback r4;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r4 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        z0 := @parameter1: boolean;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r2 = interfaceinvoke r4.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3900(com.android.server.display.DisplayManagerService,android.os.IBinder,boolean)>($r1, $r2, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        android.view.Surface r1;
        long l0;
        com.android.server.display.DisplayManagerService $r2;
        android.os.IBinder $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Throwable $r5;
        android.hardware.display.IVirtualDisplayCallback r6;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        r6 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r1 := @parameter1: android.view.Surface;

        if r1 == null goto label2;

        $z0 = virtualinvoke r1.<android.view.Surface: boolean isSingleBuffered()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Surface can\'t be single-buffered");

        throw $r4;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = interfaceinvoke r6.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        staticinvoke <com.android.server.display.DisplayManagerService: void access$3700(com.android.server.display.DisplayManagerService,android.os.IBinder,android.view.Surface)>($r2, $r3, r1);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startWifiDisplayScan()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to start wifi display scans");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2400(com.android.server.display.DisplayManagerService,int)>($r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopWifiDisplayScan()
    {
        com.android.server.display.DisplayManagerService$BinderService r0;
        int i0;
        long l1;
        com.android.server.display.DisplayManagerService $r2, $r4;
        android.content.Context $r3;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService$BinderService;

        $r2 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        $r3 = staticinvoke <com.android.server.display.DisplayManagerService: android.content.Context access$300(com.android.server.display.DisplayManagerService)>($r2);

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONFIGURE_WIFI_DISPLAY", "Permission required to stop wifi display scans");

        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService$BinderService: com.android.server.display.DisplayManagerService this$0>;

        staticinvoke <com.android.server.display.DisplayManagerService: void access$2500(com.android.server.display.DisplayManagerService,int)>($r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
