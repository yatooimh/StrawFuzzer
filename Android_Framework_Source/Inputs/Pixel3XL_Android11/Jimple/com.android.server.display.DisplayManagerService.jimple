public final class com.android.server.display.DisplayManagerService extends com.android.server.SystemService
{
    private static final boolean DEBUG;
    private static final java.lang.String FORCE_WIFI_DISPLAY_ENABLE;
    private static final int MSG_DELIVER_DISPLAY_EVENT;
    private static final int MSG_LOAD_BRIGHTNESS_CONFIGURATION;
    private static final int MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS;
    private static final int MSG_REGISTER_DEFAULT_DISPLAY_ADAPTERS;
    private static final int MSG_REQUEST_TRAVERSAL;
    private static final int MSG_UPDATE_VIEWPORT;
    private static final java.lang.String PROP_DEFAULT_DISPLAY_TOP_INSET;
    private static final java.lang.String TAG;
    private static final long WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT;
    public final android.util.SparseArray mCallbacks;
    private final android.content.Context mContext;
    private int mCurrentUserId;
    private final int mDefaultDisplayDefaultColorMode;
    private int mDefaultDisplayTopInset;
    private final android.util.SparseArray mDisplayAccessUIDs;
    private final com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener;
    private final java.util.ArrayList mDisplayAdapters;
    private final java.util.ArrayList mDisplayDevices;
    private final com.android.server.display.DisplayModeDirector mDisplayModeDirector;
    private com.android.server.display.DisplayPowerController mDisplayPowerController;
    private final java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners;
    private float mGlobalDisplayBrightness;
    private int mGlobalDisplayState;
    private final com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler;
    private final com.android.server.display.DisplayManagerService$Injector mInjector;
    private android.hardware.input.InputManagerInternal mInputManagerInternal;
    private final android.util.SparseArray mLogicalDisplays;
    private boolean mMinimalPostProcessingAllowed;
    private final android.hardware.display.Curve mMinimumBrightnessCurve;
    private final android.util.Spline mMinimumBrightnessSpline;
    private int mNextNonDefaultDisplayId;
    public boolean mOnlyCore;
    private boolean mPendingTraversal;
    private final com.android.server.display.PersistentDataStore mPersistentDataStore;
    private android.media.projection.IMediaProjectionManager mProjectionService;
    public boolean mSafeMode;
    private android.hardware.SensorManager mSensorManager;
    private com.android.server.display.DisplayManagerService$SettingsObserver mSettingsObserver;
    private final boolean mSingleDisplayDemoMode;
    private android.graphics.Point mStableDisplaySize;
    private final com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot;
    private boolean mSystemReady;
    private final java.util.ArrayList mTempCallbacks;
    private final android.view.DisplayInfo mTempDisplayInfo;
    private final java.util.ArrayList mTempDisplayStateWorkQueue;
    private final java.util.ArrayList mTempViewports;
    private final android.os.Handler mUiHandler;
    private final java.util.ArrayList mViewports;
    private com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter;
    private final android.graphics.ColorSpace mWideColorSpace;
    private com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter;
    private int mWifiDisplayScanRequestCount;
    private com.android.server.wm.WindowManagerInternal mWindowManagerInternal;

    public void <init>(android.content.Context)
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context r1;
        com.android.server.display.DisplayManagerService$Injector $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.display.DisplayManagerService$Injector;

        specialinvoke $r2.<com.android.server.display.DisplayManagerService$Injector: void <init>()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void <init>(android.content.Context,com.android.server.display.DisplayManagerService$Injector)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, com.android.server.display.DisplayManagerService$Injector)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot $r1;
        android.util.SparseArray $r2, $r5, $r14;
        java.util.ArrayList $r3, $r4, $r8, $r10, $r12, $r13;
        java.util.concurrent.CopyOnWriteArrayList $r6;
        android.graphics.Point $r7;
        com.android.server.display.PersistentDataStore $r9;
        android.view.DisplayInfo $r11;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r15, $r21;
        com.android.server.DisplayThread $r16;
        android.os.Looper $r17;
        android.os.Handler $r18;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r19;
        com.android.server.display.DisplayModeDirector $r20;
        boolean $z0;
        android.content.Context $r22, $r23, $r29, r34;
        android.content.res.Resources $r24, r36;
        int $i0, $i1;
        android.content.res.TypedArray $r25, $r26;
        android.hardware.display.Curve $r27;
        android.util.Spline $r28;
        java.lang.Object $r30;
        android.os.PowerManager $r31;
        float $f0;
        android.graphics.ColorSpace[] $r32;
        android.graphics.ColorSpace $r33;
        com.android.server.display.DisplayManagerService$Injector r35;
        float[] r37, r38;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r34 := @parameter0: android.content.Context;

        r35 := @parameter1: com.android.server.display.DisplayManagerService$Injector;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r34);

        $r1 = new com.android.server.display.DisplayManagerService$SyncRoot;

        specialinvoke $r1.<com.android.server.display.DisplayManagerService$SyncRoot: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays> = $r5;

        r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId> = 1;

        $r6 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners> = $r6;

        r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState> = 2;

        $r7 = new android.graphics.Point;

        specialinvoke $r7.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports> = $r8;

        $r9 = new com.android.server.display.PersistentDataStore;

        specialinvoke $r9.<com.android.server.display.PersistentDataStore: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks> = $r10;

        $r11 = new android.view.DisplayInfo;

        specialinvoke $r11.<android.view.DisplayInfo: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempViewports> = $r12;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue> = $r13;

        $r14 = new android.util.SparseArray;

        specialinvoke $r14.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mDisplayAccessUIDs> = $r14;

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$Injector mInjector> = r35;

        r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext> = r34;

        $r15 = new com.android.server.display.DisplayManagerService$DisplayManagerHandler;

        $r16 = staticinvoke <com.android.server.DisplayThread: com.android.server.DisplayThread get()>();

        $r17 = virtualinvoke $r16.<com.android.server.DisplayThread: android.os.Looper getLooper()>();

        specialinvoke $r15.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: void <init>(com.android.server.display.DisplayManagerService,android.os.Looper)>(r0, $r17);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler> = $r15;

        $r18 = staticinvoke <com.android.server.UiThread: android.os.Handler getHandler()>();

        r0.<com.android.server.display.DisplayManagerService: android.os.Handler mUiHandler> = $r18;

        $r19 = new com.android.server.display.DisplayManagerService$DisplayAdapterListener;

        specialinvoke $r19.<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void <init>(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayManagerService$1)>(r0, null);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener> = $r19;

        $r20 = new com.android.server.display.DisplayModeDirector;

        $r21 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        specialinvoke $r20.<com.android.server.display.DisplayModeDirector: void <init>(android.content.Context,android.os.Handler)>(r34, $r21);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayModeDirector mDisplayModeDirector> = $r20;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.demo.singledisplay", 0);

        r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode> = $z0;

        $r22 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        r36 = virtualinvoke $r22.<android.content.Context: android.content.res.Resources getResources()>();

        $r23 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r24 = virtualinvoke $r23.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r24.<android.content.res.Resources: int getInteger(int)>(17694772);

        r0.<com.android.server.display.DisplayManagerService: int mDefaultDisplayDefaultColorMode> = $i0;

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.displayinset.top", -1);

        r0.<com.android.server.display.DisplayManagerService: int mDefaultDisplayTopInset> = $i1;

        $r25 = virtualinvoke r36.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236051);

        r37 = staticinvoke <com.android.server.display.DisplayManagerService: float[] getFloatArray(android.content.res.TypedArray)>($r25);

        $r26 = virtualinvoke r36.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236052);

        r38 = staticinvoke <com.android.server.display.DisplayManagerService: float[] getFloatArray(android.content.res.TypedArray)>($r26);

        $r27 = new android.hardware.display.Curve;

        specialinvoke $r27.<android.hardware.display.Curve: void <init>(float[],float[])>(r37, r38);

        r0.<com.android.server.display.DisplayManagerService: android.hardware.display.Curve mMinimumBrightnessCurve> = $r27;

        $r28 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r37, r38);

        r0.<com.android.server.display.DisplayManagerService: android.util.Spline mMinimumBrightnessSpline> = $r28;

        $r29 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r30 = virtualinvoke $r29.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r31 = (android.os.PowerManager) $r30;

        $f0 = virtualinvoke $r31.<android.os.PowerManager: float getBrightnessConstraint(int)>(2);

        r0.<com.android.server.display.DisplayManagerService: float mGlobalDisplayBrightness> = $f0;

        r0.<com.android.server.display.DisplayManagerService: int mCurrentUserId> = 0;

        $r32 = staticinvoke <android.view.SurfaceControl: android.graphics.ColorSpace[] getCompositionColorSpaces()>();

        $r33 = $r32[1];

        r0.<com.android.server.display.DisplayManagerService: android.graphics.ColorSpace mWideColorSpace> = $r33;

        r0.<com.android.server.display.DisplayManagerService: boolean mSystemReady> = 0;

        return;
    }

    static java.util.ArrayList access$1000(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        return $r1;
    }

    static java.util.ArrayList access$1100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempViewports>;

        return $r1;
    }

    static android.hardware.input.InputManagerInternal access$1200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.input.InputManagerInternal $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal>;

        return $r1;
    }

    static void access$1300(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void loadBrightnessConfiguration()>();

        return;
    }

    static void access$1400(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1500(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1600(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)>(r1);

        return;
    }

    static void access$1700(com.android.server.display.DisplayManagerService, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z0);

        return;
    }

    static void access$1800(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayManagerService$CallbackRecord;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)>(r1);

        return;
    }

    static android.view.DisplayInfo access$1900(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        android.view.DisplayInfo $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo getDisplayInfoInternal(int,int)>(i0, i1);

        return $r1;
    }

    static com.android.server.display.DisplayManagerService$DisplayManagerHandler access$200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        return $r1;
    }

    static int[] access$2000(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        int[] $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int[] getDisplayIdsInternal(int)>(i0);

        return $r1;
    }

    static boolean access$2100(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean isUidPresentOnDisplayInternal(int,int)>(i0, i1);

        return $z0;
    }

    static android.graphics.Point access$2200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.graphics.Point $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.graphics.Point getStableDisplaySizeInternal()>();

        return $r1;
    }

    static void access$2300(com.android.server.display.DisplayManagerService, android.hardware.display.IDisplayManagerCallback, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IDisplayManagerCallback r1;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.IDisplayManagerCallback;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback,int)>(r1, i0);

        return;
    }

    static void access$2400(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void startWifiDisplayScanInternal(int)>(i0);

        return;
    }

    static void access$2500(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanInternal(int)>(i0);

        return;
    }

    static void access$2600(com.android.server.display.DisplayManagerService, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void connectWifiDisplayInternal(java.lang.String)>(r1);

        return;
    }

    static void access$2700(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void disconnectWifiDisplayInternal()>();

        return;
    }

    static void access$2800(com.android.server.display.DisplayManagerService, java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void renameWifiDisplayInternal(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$2900(com.android.server.display.DisplayManagerService, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void forgetWifiDisplayInternal(java.lang.String)>(r1);

        return;
    }

    static android.content.Context access$300(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        return $r1;
    }

    static void access$3000(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void pauseWifiDisplayInternal()>();

        return;
    }

    static void access$3100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void resumeWifiDisplayInternal()>();

        return;
    }

    static android.hardware.display.WifiDisplayStatus access$3200(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.WifiDisplayStatus $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusInternal()>();

        return $r1;
    }

    static void access$3300(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void requestColorModeInternal(int,int)>(i0, i1);

        return;
    }

    static android.media.projection.IMediaProjectionManager access$3400(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.media.projection.IMediaProjectionManager $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager getProjectionService()>();

        return $r1;
    }

    static int access$3500(com.android.server.display.DisplayManagerService, android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, android.view.Surface, int, android.hardware.display.VirtualDisplayConfig)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.IVirtualDisplayCallback r1;
        android.media.projection.IMediaProjection r2;
        int i0, i1, $i2;
        java.lang.String r3;
        android.view.Surface r4;
        android.hardware.display.VirtualDisplayConfig r5;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.IVirtualDisplayCallback;

        r2 := @parameter2: android.media.projection.IMediaProjection;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: android.view.Surface;

        i1 := @parameter6: int;

        r5 := @parameter7: android.hardware.display.VirtualDisplayConfig;

        $i2 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>(r1, r2, i0, r3, r4, i1, r5);

        return $i2;
    }

    static void access$3600(com.android.server.display.DisplayManagerService, android.os.IBinder, int, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void resizeVirtualDisplayInternal(android.os.IBinder,int,int,int)>(r1, i0, i1, i2);

        return;
    }

    static void access$3700(com.android.server.display.DisplayManagerService, android.os.IBinder, android.view.Surface)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        android.view.Surface r2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.view.Surface;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setVirtualDisplaySurfaceInternal(android.os.IBinder,android.view.Surface)>(r1, r2);

        return;
    }

    static void access$3800(com.android.server.display.DisplayManagerService, android.os.IBinder)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void releaseVirtualDisplayInternal(android.os.IBinder)>(r1);

        return;
    }

    static void access$3900(com.android.server.display.DisplayManagerService, android.os.IBinder, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.IBinder r1;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.os.IBinder;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setVirtualDisplayStateInternal(android.os.IBinder,boolean)>(r1, z0);

        return;
    }

    static void access$400(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleSettingsChange()>();

        return;
    }

    static void access$4000(com.android.server.display.DisplayManagerService, java.io.PrintWriter)
    {
        com.android.server.display.DisplayManagerService r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void dumpInternal(java.io.PrintWriter)>(r1);

        return;
    }

    static com.android.server.display.DisplayPowerController access$4100(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayPowerController $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        return $r1;
    }

    static com.android.server.display.DisplayPowerController access$4102(com.android.server.display.DisplayManagerService, com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayPowerController r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: com.android.server.display.DisplayPowerController;

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController> = r1;

        return r1;
    }

    static void access$4200(com.android.server.display.DisplayManagerService, android.hardware.display.BrightnessConfiguration, int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.BrightnessConfiguration r1;
        int i0;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.BrightnessConfiguration;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setBrightnessConfigurationForUserInternal(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>(r1, i0, r2);

        return;
    }

    static android.os.UserManager access$4300(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.os.UserManager $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.UserManager getUserManager()>();

        return $r1;
    }

    static com.android.server.display.PersistentDataStore access$4400(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.PersistentDataStore $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        return $r1;
    }

    static android.util.SparseArray access$4500(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        return $r1;
    }

    static void access$4600(com.android.server.display.DisplayManagerService, int, float)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        float f0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void requestGlobalDisplayStateInternal(int,float)>(i0, f0);

        return;
    }

    static java.util.ArrayList access$4700(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        return $r1;
    }

    static android.hardware.SensorManager access$4802(com.android.server.display.DisplayManagerService, android.hardware.SensorManager)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.SensorManager r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.SensorManager;

        r0.<com.android.server.display.DisplayManagerService: android.hardware.SensorManager mSensorManager> = r1;

        return r1;
    }

    static android.view.SurfaceControl$ScreenshotGraphicBuffer access$4900(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.view.SurfaceControl$ScreenshotGraphicBuffer systemScreenshotInternal(int)>(i0);

        return $r1;
    }

    static void access$500(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDefaultDisplayAdapters()>();

        return;
    }

    static android.view.SurfaceControl$ScreenshotGraphicBuffer access$5000(com.android.server.display.DisplayManagerService, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.SurfaceControl$ScreenshotGraphicBuffer $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.view.SurfaceControl$ScreenshotGraphicBuffer userScreenshotInternal(int)>(i0);

        return $r1;
    }

    static void access$5100(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)>(r1);

        return;
    }

    static void access$5200(com.android.server.display.DisplayManagerService, android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void unregisterDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)>(r1);

        return;
    }

    static void access$5300(com.android.server.display.DisplayManagerService, int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.DisplayInfo r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.DisplayInfo;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayInfoOverrideFromWindowManagerInternal(int,android.view.DisplayInfo)>(i0, r1);

        return;
    }

    static void access$5400(com.android.server.display.DisplayManagerService, int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.view.DisplayInfo r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.DisplayInfo;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void getNonOverrideDisplayInfoInternal(int,android.view.DisplayInfo)>(i0, r1);

        return;
    }

    static void access$5500(com.android.server.display.DisplayManagerService, int, boolean, float, int, boolean, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        boolean z0, z1, z2;
        float f0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        f0 := @parameter3: float;

        i1 := @parameter4: int;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayPropertiesInternal(int,boolean,float,int,boolean,boolean)>(i0, z0, f0, i1, z1, z2);

        return;
    }

    static void access$5600(com.android.server.display.DisplayManagerService, int, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayOffsetsInternal(int,int,int)>(i0, i1, i2);

        return;
    }

    static void access$5700(com.android.server.display.DisplayManagerService, int, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayScalingDisabledInternal(int,boolean)>(i0, z0);

        return;
    }

    static void access$5800(com.android.server.display.DisplayManagerService, android.util.SparseArray)
    {
        com.android.server.display.DisplayManagerService r0;
        android.util.SparseArray r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        r1 := @parameter1: android.util.SparseArray;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setDisplayAccessUIDsInternal(android.util.SparseArray)>(r1);

        return;
    }

    static void access$5900(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void onDesiredDisplayModeSpecsChangedInternal()>();

        return;
    }

    static void access$600(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerAdditionalDisplayAdapters()>();

        return;
    }

    static void access$700(com.android.server.display.DisplayManagerService, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void deliverDisplayEvent(int,int)>(i0, i1);

        return;
    }

    static com.android.server.wm.WindowManagerInternal access$800(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.wm.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        return $r1;
    }

    static com.android.server.display.DisplayManagerService$SyncRoot access$900(com.android.server.display.DisplayManagerService)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot $r1;

        r0 := @parameter0: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        return $r1;
    }

    private com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDeviceInfo r1;
        int i0, $i1, $i2, $i3;
        com.android.server.display.LogicalDisplay $r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1, z2, z3;
        android.util.SparseArray $r4, $r14;
        com.android.server.display.DisplayManagerService$SyncRoot $r5;
        java.lang.StringBuilder $r6, $r10, $r16;
        java.lang.String $r9, $r13, $r19;
        java.lang.Object $r15;
        com.android.server.display.DisplayDevice r20;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r20 := @parameter0: com.android.server.display.DisplayDevice;

        r1 = virtualinvoke r20.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i1 = r1.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        z3 = z2;

        if z2 == 0 goto label3;

        z3 = z2;

        $r14 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r15 = virtualinvoke $r14.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r15 == null goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring attempt to add a second default display: ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r19);

        z3 = 0;

     label3:
        if z3 != 0 goto label4;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode>;

        if $z1 == 0 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not creating a logical display for a secondary display  because single display demo mode is enabled: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r13);

        return null;

     label4:
        i0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int assignDisplayIdLocked(boolean)>(z3);

        $r2 = new com.android.server.display.LogicalDisplay;

        $i3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: int assignLayerStackLocked(int)>(i0);

        specialinvoke $r2.<com.android.server.display.LogicalDisplay: void <init>(int,int,com.android.server.display.DisplayDevice)>(i0, $i3, r20);

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke $r2.<com.android.server.display.LogicalDisplay: void updateLocked(java.util.List)>($r3);

        $z0 = virtualinvoke $r2.<com.android.server.display.LogicalDisplay: boolean isValidLocked()>();

        if $z0 != 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring display device because the logical display created from it was not considered valid: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r9);

        return null;

     label5:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void configureColorModeLocked(com.android.server.display.LogicalDisplay,com.android.server.display.DisplayDevice)>($r2, r20);

        if z3 == 0 goto label6;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void recordStableDisplayStatsIfNeededLocked(com.android.server.display.LogicalDisplay)>($r2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void recordTopInsetLocked(com.android.server.display.LogicalDisplay)>($r2);

     label6:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r2);

        staticinvoke <android.hardware.display.DisplayManagerGlobal: void invalidateLocalDisplayInfoCaches()>();

        if z3 == 0 goto label7;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

     label7:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 1);

        return $r2;
    }

    private void applyGlobalDisplayStateLocked(java.util.List)
    {
        com.android.server.display.DisplayManagerService r0;
        java.util.List r1;
        int i0, i1;
        java.lang.Runnable r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        com.android.server.display.DisplayDevice $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: java.util.List;

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r6 = (com.android.server.display.DisplayDevice) $r5;

        r2 = specialinvoke r0.<com.android.server.display.DisplayManagerService: java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)>($r6);

        if r2 == null goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private int assignDisplayIdLocked(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;
        int $i0, i1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i1 = 0;

        goto label2;

     label1:
        i1 = r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId>;

        $i0 = i1 + 1;

        r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId> = $i0;

     label2:
        return i1;
    }

    private int assignLayerStackLocked(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        return i0;
    }

    private void clearViewportsLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    private void configureColorModeLocked(com.android.server.display.LogicalDisplay, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.LogicalDisplay r1;
        com.android.server.display.DisplayDevice r2, $r3;
        int i0, $i1, $i2, i3;
        com.android.server.display.PersistentDataStore $r4;
        com.android.server.display.DisplayDeviceInfo $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.LogicalDisplay;

        r2 := @parameter1: com.android.server.display.DisplayDevice;

        $r3 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

        if $r3 != r2 goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        i0 = virtualinvoke $r4.<com.android.server.display.PersistentDataStore: int getColorMode(com.android.server.display.DisplayDevice)>(r2);

        i3 = i0;

        if i0 != -1 goto label2;

        $r5 = virtualinvoke r2.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i1 = $r5.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        i3 = r0.<com.android.server.display.DisplayManagerService: int mDefaultDisplayDefaultColorMode>;

        goto label2;

     label1:
        i3 = 0;

     label2:
        virtualinvoke r1.<com.android.server.display.LogicalDisplay: void setRequestedColorModeLocked(int)>(i3);

     label3:
        return;
    }

    private void configureDisplayLocked(android.view.SurfaceControl$Transaction, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2, $r8;
        com.android.server.display.LogicalDisplay r3, r16, r17;
        int $i0, $i1, $i2, $i3, $i5, i6;
        boolean $z0, $z1, z2, z3;
        java.lang.Object $r4, $r12, $r14;
        java.lang.Integer $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;
        android.util.SparseArray $r11, $r13;
        android.view.SurfaceControl$Transaction r15;
        java.util.Optional r19;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r15 := @parameter0: android.view.SurfaceControl$Transaction;

        r1 := @parameter1: com.android.server.display.DisplayDevice;

        r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        i6 = r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        z2 = 1;

        $i0 = i6 & 128;

        if $i0 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)>(r1);

        r16 = r3;

        if z3 != 0 goto label4;

        r17 = r3;

        if r3 == null goto label3;

        r17 = r3;

        $z1 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: boolean hasContentLocked()>();

        if $z1 != 0 goto label3;

        $r13 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $i5 = virtualinvoke r1.<com.android.server.display.DisplayDevice: int getDisplayIdToMirrorLocked()>();

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>($i5);

        r17 = (com.android.server.display.LogicalDisplay) $r14;

     label3:
        r16 = r17;

        if r17 != null goto label4;

        $r11 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r16 = (com.android.server.display.LogicalDisplay) $r12;

     label4:
        if r16 != null goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing logical display to use for physical display device: ");

        $r8 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r10);

        return;

     label5:
        $i1 = r2.<com.android.server.display.DisplayDeviceInfo: int state>;

        if $i1 != 1 goto label6;

        goto label7;

     label6:
        z2 = 0;

     label7:
        virtualinvoke r16.<com.android.server.display.LogicalDisplay: void configureDisplayLocked(android.view.SurfaceControl$Transaction,com.android.server.display.DisplayDevice,boolean)>(r15, r1, z2);

        r19 = specialinvoke r0.<com.android.server.display.DisplayManagerService: java.util.Optional getViewportType(com.android.server.display.DisplayDeviceInfo)>(r2);

        $z0 = virtualinvoke r19.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label8;

        $r4 = virtualinvoke r19.<java.util.Optional: java.lang.Object get()>();

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i3 = virtualinvoke r16.<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void populateViewportLocked(int,int,com.android.server.display.DisplayDevice,com.android.server.display.DisplayDeviceInfo)>($i2, $i3, r1, r2);

     label8:
        return;
    }

    private void connectWifiDisplayInternal(java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.WifiDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r3.<com.android.server.display.WifiDisplayAdapter: void requestConnectLocked(java.lang.String)>(r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, int, java.lang.String, android.view.Surface, int, android.hardware.display.VirtualDisplayConfig)
    {
        com.android.server.display.DisplayManagerService r0;
        android.view.Surface r1;
        int i0, i3, i4;
        android.hardware.display.VirtualDisplayConfig r2;
        com.android.server.display.DisplayManagerService$SyncRoot r3;
        com.android.server.display.VirtualDisplayAdapter $r4, $r5, $r6;
        android.os.IBinder $r7;
        java.lang.Throwable $r9;
        android.hardware.display.IVirtualDisplayCallback r10;
        android.media.projection.IMediaProjection r11;
        java.lang.String r12;
        com.android.server.display.DisplayDevice r13;
        com.android.server.display.LogicalDisplay r14;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r10 := @parameter0: android.hardware.display.IVirtualDisplayCallback;

        r11 := @parameter1: android.media.projection.IMediaProjection;

        i3 := @parameter2: int;

        r12 := @parameter3: java.lang.String;

        r1 := @parameter4: android.view.Surface;

        i0 := @parameter5: int;

        r2 := @parameter6: android.hardware.display.VirtualDisplayConfig;

        r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r3;

     label01:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r4 != null goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", "Rejecting request to create private virtual display because the virtual display adapter is not available.");

        exitmonitor r3;

     label02:
        return -1;

     label03:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r13 = virtualinvoke $r5.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice createVirtualDisplayLocked(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,android.view.Surface,int,android.hardware.display.VirtualDisplayConfig)>(r10, r11, i3, r12, r1, i0, r2);

     label04:
        if r13 != null goto label07;

     label05:
        exitmonitor r3;

     label06:
        return -1;

     label07:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>(r13);

        r14 = specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)>(r13);

     label08:
        if r14 == null goto label11;

     label09:
        i4 = virtualinvoke r14.<com.android.server.display.LogicalDisplay: int getDisplayIdLocked()>();

        exitmonitor r3;

     label10:
        return i4;

     label11:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", "Rejecting request to create virtual display because the logical display was not created.");

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        $r7 = interfaceinvoke r10.<android.hardware.display.IVirtualDisplayCallback: android.os.IBinder asBinder()>();

        virtualinvoke $r6.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>($r7);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r13);

        exitmonitor r3;

     label12:
        return -1;

     label13:
        $r9 := @caughtexception;

     label14:
        exitmonitor r3;

     label15:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void deliverDisplayEvent(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2, i3, i4;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r3, $r9;
        java.util.ArrayList $r4, $r5, $r6, $r10;
        java.lang.Object $r7, $r11;
        com.android.server.display.DisplayManagerService$CallbackRecord $r8, $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        i2 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        virtualinvoke $r4.<java.util.ArrayList: void clear()>();

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label06;

     label04:
        $r10 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        $r9 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r11 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r12 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r11;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        i4 = 0;

     label08:
        if i4 >= i2 goto label09;

        $r6 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r8 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r7;

        virtualinvoke $r8.<com.android.server.display.DisplayManagerService$CallbackRecord: void notifyDisplayEventAsync(int,int)>(i0, i1);

        i4 = i4 + 1;

        goto label08;

     label09:
        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempCallbacks>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        return;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void disconnectWifiDisplayInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.WifiDisplayAdapter $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r4.<com.android.server.display.WifiDisplayAdapter: void requestDisconnectLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r4, $r7, $r10, $r12, $r14, $r17, $r21, $r24, $r27, $r30, $r34, $r38, $r43, $r48, $r53, $r58, $r70, $r77, $r82, $r85, $r87;
        java.util.ArrayList $r19, $r41, $r44, $r46, $r49;
        android.graphics.Point $r32;
        android.hardware.display.Curve $r36;
        android.util.SparseArray $r50, $r55, $r62, $r71, $r72;
        com.android.server.display.DisplayModeDirector $r54;
        com.android.server.display.DisplayPowerController $r59, $r61;
        com.android.server.display.PersistentDataStore $r60;
        java.lang.Object $r63, $r73, $r78, $r83;
        com.android.server.display.DisplayDeviceInfo $r80;
        java.lang.Throwable $r88;
        java.io.PrintWriter r89;
        java.lang.StringBuilder r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r102, r105, r106, r109, r110, r112, r113, r115;
        com.android.internal.util.IndentingPrintWriter r101;
        java.util.Iterator r103, r107;
        com.android.server.display.DisplayAdapter r104;
        com.android.server.display.DisplayDevice r108;
        com.android.server.display.LogicalDisplay r111;
        com.android.server.display.DisplayManagerService$CallbackRecord r114;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r89 := @parameter0: java.io.PrintWriter;

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>("DISPLAY MANAGER (dumpsys display)");

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mOnlyCode=");

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore>;

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r4);

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSafeMode=");

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode>;

        virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r7 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingTraversal=");

        $z2 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r10 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mGlobalDisplayState=");

        $i1 = r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState>;

        $r12 = staticinvoke <android.view.Display: java.lang.String stateToString(int)>($i1);

        virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNextNonDefaultDisplayId=");

        $i2 = r0.<com.android.server.display.DisplayManagerService: int mNextNonDefaultDisplayId>;

        virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mViewports=");

        $r19 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDefaultDisplayDefaultColorMode=");

        $i3 = r0.<com.android.server.display.DisplayManagerService: int mDefaultDisplayDefaultColorMode>;

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r24 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSingleDisplayDemoMode=");

        $z3 = r0.<com.android.server.display.DisplayManagerService: boolean mSingleDisplayDemoMode>;

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r27 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWifiDisplayScanRequestCount=");

        $i4 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r30 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStableDisplaySize=");

        $r32 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r34);

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMinimumBrightnessCurve=");

        $r36 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.Curve mMinimumBrightnessCurve>;

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r38);

        r101 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r101.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r89, "    ");

        virtualinvoke r101.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r89.<java.io.PrintWriter: void println()>();

        r102 = new java.lang.StringBuilder;

        specialinvoke r102.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Adapters: size=");

        $r41 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        $i5 = virtualinvoke $r41.<java.util.ArrayList: int size()>();

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r43 = virtualinvoke r102.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r43);

        $r44 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        r103 = virtualinvoke $r44.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r103.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label04;

        $r83 = interfaceinvoke r103.<java.util.Iterator: java.lang.Object next()>();

        r104 = (com.android.server.display.DisplayAdapter) $r83;

        r105 = new java.lang.StringBuilder;

        specialinvoke r105.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r85 = virtualinvoke r104.<com.android.server.display.DisplayAdapter: java.lang.String getName()>();

        virtualinvoke r105.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r87 = virtualinvoke r105.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r87);

        virtualinvoke r104.<com.android.server.display.DisplayAdapter: void dumpLocked(java.io.PrintWriter)>(r101);

     label03:
        goto label02;

     label04:
        virtualinvoke r89.<java.io.PrintWriter: void println()>();

        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display Devices: size=");

        $r46 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $i6 = virtualinvoke $r46.<java.util.ArrayList: int size()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r48 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        $r49 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        r107 = virtualinvoke $r49.<java.util.ArrayList: java.util.Iterator iterator()>();

     label05:
        $z5 = interfaceinvoke r107.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r78 = interfaceinvoke r107.<java.util.Iterator: java.lang.Object next()>();

        r108 = (com.android.server.display.DisplayDevice) $r78;

        r109 = new java.lang.StringBuilder;

        specialinvoke r109.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r80 = virtualinvoke r108.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r80);

        $r82 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r82);

        virtualinvoke r108.<com.android.server.display.DisplayDevice: void dumpLocked(java.io.PrintWriter)>(r101);

     label06:
        goto label05;

     label07:
        $r50 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i8 = virtualinvoke $r50.<android.util.SparseArray: int size()>();

        virtualinvoke r89.<java.io.PrintWriter: void println()>();

        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logical Displays: size=");

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r53 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r53);

     label08:
        i9 = 0;

     label09:
        if i9 >= i8 goto label12;

     label10:
        $r71 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r71.<android.util.SparseArray: int keyAt(int)>(i9);

        $r72 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r73 = virtualinvoke $r72.<android.util.SparseArray: java.lang.Object valueAt(int)>(i9);

        r111 = (com.android.server.display.LogicalDisplay) $r73;

        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Display ");

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r77 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r77);

        virtualinvoke r111.<com.android.server.display.LogicalDisplay: void dumpLocked(java.io.PrintWriter)>(r101);

     label11:
        i9 = i9 + 1;

        goto label09;

     label12:
        virtualinvoke r89.<java.io.PrintWriter: void println()>();

        $r54 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayModeDirector mDisplayModeDirector>;

        virtualinvoke $r54.<com.android.server.display.DisplayModeDirector: void dump(java.io.PrintWriter)>(r89);

        $r55 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        i10 = virtualinvoke $r55.<android.util.SparseArray: int size()>();

        virtualinvoke r89.<java.io.PrintWriter: void println()>();

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Callbacks: size=");

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r58 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r58);

     label13:
        i11 = 0;

     label14:
        if i11 >= i10 goto label17;

     label15:
        $r62 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r63 = virtualinvoke $r62.<android.util.SparseArray: java.lang.Object valueAt(int)>(i11);

        r114 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r63;

        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": mPid=");

        $i7 = r114.<com.android.server.display.DisplayManagerService$CallbackRecord: int mPid>;

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mWifiDisplayScanRequested=");

        $z6 = r114.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r70 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r89.<java.io.PrintWriter: void println(java.lang.String)>($r70);

     label16:
        i11 = i11 + 1;

        goto label14;

     label17:
        $r59 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        if $r59 == null goto label18;

        $r61 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r61.<com.android.server.display.DisplayPowerController: void dump(java.io.PrintWriter)>(r89);

     label18:
        virtualinvoke r89.<java.io.PrintWriter: void println()>();

        $r60 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r60.<com.android.server.display.PersistentDataStore: void dump(java.io.PrintWriter)>(r89);

        exitmonitor r1;

     label19:
        return;

     label20:
        $r88 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r88;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private com.android.server.display.LogicalDisplay findLogicalDisplayForDeviceLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1, $r6;
        int i0, i1;
        com.android.server.display.LogicalDisplay r2;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

        if $r6 != r1 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private void forgetWifiDisplayInternal(java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.WifiDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r3.<com.android.server.display.WifiDisplayAdapter: void requestForgetLocked(java.lang.String)>(r5);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private int[] getDisplayIdsInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2, i3, i4, i5;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        int[] r2, r10;
        android.util.SparseArray $r3, $r4, $r8;
        java.lang.Object $r5;
        com.android.server.display.LogicalDisplay $r6;
        android.view.DisplayInfo $r7;
        boolean $z0;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        r2 = newarray (int)[i1];

     label02:
        i3 = 0;

        i4 = 0;

     label03:
        if i4 >= i1 goto label07;

        i5 = i3;

     label04:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        $r6 = (com.android.server.display.LogicalDisplay) $r5;

        $r7 = virtualinvoke $r6.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z0 = virtualinvoke $r7.<android.view.DisplayInfo: boolean hasAccess(int)>(i0);

        if $z0 == 0 goto label06;

        $r8 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $i2 = virtualinvoke $r8.<android.util.SparseArray: int keyAt(int)>(i4);

        r2[i3] = $i2;

     label05:
        i5 = i3 + 1;

     label06:
        i4 = i4 + 1;

        i3 = i5;

        goto label03;

     label07:
        r10 = r2;

        if i3 == i1 goto label09;

     label08:
        r10 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r2, 0, i3);

     label09:
        exitmonitor r1;

     label10:
        return r10;

     label11:
        $r9 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private android.view.DisplayInfo getDisplayInfoInternal(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.lang.Throwable $r4;
        com.android.server.display.LogicalDisplay r5;
        android.view.DisplayInfo r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.LogicalDisplay) $r3;

     label02:
        if r5 == null goto label06;

     label03:
        r6 = virtualinvoke r5.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z0 = virtualinvoke r6.<android.view.DisplayInfo: boolean hasAccess(int)>(i1);

        if $z0 != 0 goto label04;

        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean isUidPresentOnDisplayInternal(int,int)>(i1, i0);

        if $z1 == 0 goto label06;

     label04:
        exitmonitor r1;

     label05:
        return r6;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private android.os.IBinder getDisplayToken(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.display.LogicalDisplay r5;
        com.android.server.display.DisplayDevice r6;
        android.os.IBinder r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.LogicalDisplay) $r3;

     label02:
        if r5 == null goto label07;

     label03:
        r6 = virtualinvoke r5.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

     label04:
        if r6 == null goto label07;

     label05:
        r7 = virtualinvoke r6.<com.android.server.display.DisplayDevice: android.os.IBinder getDisplayTokenLocked()>();

        exitmonitor r1;

     label06:
        return r7;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private static float[] getFloatArray(android.content.res.TypedArray)
    {
        android.content.res.TypedArray r0;
        int i0, i1;
        float[] r1;
        float $f0;

        r0 := @parameter0: android.content.res.TypedArray;

        i0 = virtualinvoke r0.<android.content.res.TypedArray: int length()>();

        r1 = newarray (float)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $f0 = virtualinvoke r0.<android.content.res.TypedArray: float getFloat(int,float)>(i1, #NaNF);

        r1[i1] = $f0;

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<android.content.res.TypedArray: void recycle()>();

        return r1;
    }

    private void getNonOverrideDisplayInfoInternal(int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.LogicalDisplay r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        android.view.DisplayInfo r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.view.DisplayInfo;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.display.LogicalDisplay) $r4;

     label2:
        if r2 == null goto label4;

     label3:
        virtualinvoke r2.<com.android.server.display.LogicalDisplay: void getNonOverrideDisplayInfoLocked(android.view.DisplayInfo)>(r6);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.media.projection.IMediaProjectionManager getProjectionService()
    {
        com.android.server.display.DisplayManagerService r0;
        android.media.projection.IMediaProjectionManager $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager mProjectionService>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("media_projection");

        $r4 = staticinvoke <android.media.projection.IMediaProjectionManager$Stub: android.media.projection.IMediaProjectionManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager mProjectionService> = $r4;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.media.projection.IMediaProjectionManager mProjectionService>;

        return $r2;
    }

    private android.graphics.Point getStableDisplaySizeInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.graphics.Point $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i0 = $r3.<android.graphics.Point: int x>;

        if $i0 <= 0 goto label2;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i1 = $r4.<android.graphics.Point: int y>;

        if $i1 <= 0 goto label2;

        $r5 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i3 = $r5.<android.graphics.Point: int x>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i2 = $r6.<android.graphics.Point: int y>;

        virtualinvoke $r2.<android.graphics.Point: void set(int,int)>($i3, $i2);

     label2:
        exitmonitor r1;

     label3:
        return $r2;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.os.UserManager getUserManager()
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.UserManager $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r3 = (android.os.UserManager) $r2;

        return $r3;
    }

    private android.hardware.display.DisplayViewport getViewportLocked(int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2, i4;
        java.util.ArrayList $r1, $r3, $r4;
        android.hardware.display.DisplayViewport $r2, r14;
        java.lang.Object $r5;
        java.lang.String $r6, $r9, $r11, r12;
        boolean $z1;
        java.lang.StringBuilder $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call getViewportByTypeLocked for type ");

        $r9 = staticinvoke <android.hardware.display.DisplayViewport: java.lang.String typeToString(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

        return null;

     label1:
        if i0 == 3 goto label2;

        r12 = "";

     label2:
        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i4 = 0;

     label3:
        if i4 >= i1 goto label5;

        $r4 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r14 = (android.hardware.display.DisplayViewport) $r5;

        $i2 = r14.<android.hardware.display.DisplayViewport: int type>;

        if $i2 != i0 goto label4;

        $r6 = r14.<android.hardware.display.DisplayViewport: java.lang.String uniqueId>;

        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label4;

        return r14;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $r2 = new android.hardware.display.DisplayViewport;

        specialinvoke $r2.<android.hardware.display.DisplayViewport: void <init>()>();

        $r2.<android.hardware.display.DisplayViewport: int type> = i0;

        $r2.<android.hardware.display.DisplayViewport: java.lang.String uniqueId> = r12;

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    private java.util.Optional getViewportType(com.android.server.display.DisplayDeviceInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDeviceInfo r1;
        int $i0, $i1, $i2, $i3;
        java.util.Optional $r2, $r5, $r7, $r9;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Integer $r4, $r6, $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDeviceInfo;

        $i0 = r1.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r9 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r8);

        return $r9;

     label1:
        $i2 = r1.<com.android.server.display.DisplayDeviceInfo: int touch>;

        if $i2 != 2 goto label2;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r6);

        return $r7;

     label2:
        $i3 = r1.<com.android.server.display.DisplayDeviceInfo: int touch>;

        if $i3 != 3 goto label3;

        $r3 = r1.<com.android.server.display.DisplayDeviceInfo: java.lang.String uniqueId>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r5 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r4);

        return $r5;

     label3:
        $r2 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r2;
    }

    private android.hardware.display.WifiDisplayStatus getWifiDisplayStatusInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.WifiDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        android.hardware.display.WifiDisplayStatus r5, r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        r5 = virtualinvoke $r3.<com.android.server.display.WifiDisplayAdapter: android.hardware.display.WifiDisplayStatus getWifiDisplayStatusLocked()>();

        exitmonitor r1;

     label2:
        return r5;

     label3:
        r6 = new android.hardware.display.WifiDisplayStatus;

        specialinvoke r6.<android.hardware.display.WifiDisplayStatus: void <init>()>();

        exitmonitor r1;

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable $r2;
        com.android.server.display.DisplayDevice r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r3 := @parameter0: com.android.server.display.DisplayDevice;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)>(r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDeviceInfo r1;
        java.util.ArrayList $r3, $r8;
        boolean $z0;
        java.lang.StringBuilder $r4, $r10;
        java.lang.String $r7, $r13;
        com.android.server.display.DisplayDevice r14;
        java.lang.Runnable r16;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r14 := @parameter0: com.android.server.display.DisplayDevice;

        r1 = virtualinvoke r14.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r14);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add already added display device: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r13);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device added: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r7);

        r14.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo mDebugLastLoggedDeviceInfo> = r1;

        $r8 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: com.android.server.display.LogicalDisplay addLogicalDisplayLocked(com.android.server.display.DisplayDevice)>(r14);

        r16 = specialinvoke r0.<com.android.server.display.DisplayManagerService: java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)>(r14);

        if r16 == null goto label2;

        interfaceinvoke r16.<java.lang.Runnable: void run()>();

     label2:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        return;
    }

    private void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.DisplayDeviceInfo r2, $r6;
        int i0, $i1, $i3, $i5, $i6, $i7, $i9;
        java.util.Optional r3;
        java.util.Iterator r4;
        java.util.ArrayList $r5, $r19;
        boolean $z0, $z1, $z3, $z4, $z6, $z7;
        com.android.server.display.PersistentDataStore $r7, $r8, $r32;
        java.lang.String $r11, $r13, $r16, $r18, $r25, $r26, $r29;
        android.hardware.input.InputManagerInternal $r20;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r21;
        java.lang.Object $r22, $r23;
        java.lang.Integer $r24;
        java.lang.Throwable $r30, $r31;
        com.android.server.display.DisplayDevice r33;
        java.lang.StringBuilder r34, r35, r37;
        android.hardware.display.DisplayViewport r36;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r33 := @parameter0: com.android.server.display.DisplayDevice;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        r2 = virtualinvoke r33.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r5 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean contains(java.lang.Object)>(r33);

        if $z0 != 0 goto label03;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to change non-existent display device: ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r29);

        exitmonitor r1;

     label02:
        return;

     label03:
        $r6 = r33.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo mDebugLastLoggedDeviceInfo>;

        i0 = virtualinvoke $r6.<com.android.server.display.DisplayDeviceInfo: int diff(com.android.server.display.DisplayDeviceInfo)>(r2);

     label04:
        if i0 != 1 goto label10;

     label05:
        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device changed state: \"");

        $r13 = r2.<com.android.server.display.DisplayDeviceInfo: java.lang.String name>;

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", ");

        $i3 = r2.<com.android.server.display.DisplayDeviceInfo: int state>;

        $r16 = staticinvoke <android.view.Display: java.lang.String stateToString(int)>($i3);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r18);

        r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: java.util.Optional getViewportType(com.android.server.display.DisplayDeviceInfo)>(r2);

        $z3 = virtualinvoke r3.<java.util.Optional: boolean isPresent()>();

        if $z3 == 0 goto label13;

        $r19 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mViewports>;

        r4 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label08;

        $r22 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r36 = (android.hardware.display.DisplayViewport) $r22;

        $i5 = r36.<android.hardware.display.DisplayViewport: int type>;

        $r23 = virtualinvoke r3.<java.util.Optional: java.lang.Object get()>();

        $r24 = (java.lang.Integer) $r23;

        $i6 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        if $i5 != $i6 goto label07;

        $r26 = r2.<com.android.server.display.DisplayDeviceInfo: java.lang.String uniqueId>;

        $r25 = r36.<android.hardware.display.DisplayViewport: java.lang.String uniqueId>;

        $z6 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z6 == 0 goto label07;

        $i7 = r2.<com.android.server.display.DisplayDeviceInfo: int state>;

        $z7 = staticinvoke <android.view.Display: boolean isActiveState(int)>($i7);

        r36.<android.hardware.display.DisplayViewport: boolean isActive> = $z7;

     label07:
        goto label06;

     label08:
        $r20 = r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal>;

        if $r20 == null goto label13;

        $r21 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r21.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(5);

     label09:
        goto label13;

     label10:
        if i0 == 0 goto label13;

     label11:
        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device changed: ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

     label12:
        goto label13;

     label13:
        $i9 = i0 & 4;

        if $i9 == 0 goto label20;

     label14:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        $i1 = r2.<com.android.server.display.DisplayDeviceInfo: int colorMode>;

        virtualinvoke $r7.<com.android.server.display.PersistentDataStore: boolean setColorMode(com.android.server.display.DisplayDevice,int)>(r33, $i1);

     label15:
        $r8 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r8.<com.android.server.display.PersistentDataStore: void saveIfNeeded()>();

     label16:
        goto label20;

     label17:
        $r31 := @caughtexception;

     label18:
        $r32 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r32.<com.android.server.display.PersistentDataStore: void saveIfNeeded()>();

     label19:
        throw $r31;

     label20:
        r33.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo mDebugLastLoggedDeviceInfo> = r2;

        virtualinvoke r33.<com.android.server.display.DisplayDevice: void applyPendingDisplayDeviceInfoChangesLocked()>();

        $z1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean updateLogicalDisplaysLocked()>();

        if $z1 == 0 goto label21;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label21:
        exitmonitor r1;

     label22:
        return;

     label23:
        $r30 := @caughtexception;

     label24:
        exitmonitor r1;

     label25:
        throw $r30;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch java.lang.Throwable from label03 to label04 with label23;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.Throwable from label06 to label07 with label23;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable $r2;
        com.android.server.display.DisplayDevice r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r3 := @parameter0: com.android.server.display.DisplayDevice;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDeviceInfo r1;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r8;
        java.lang.String $r7, $r11;
        com.android.server.display.DisplayDevice r12;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r12 := @parameter0: com.android.server.display.DisplayDevice;

        r1 = virtualinvoke r12.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r12);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existent display device: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayManagerService", $r11);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Display device removed: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayManagerService", $r7);

        r12.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo mDebugLastLoggedDeviceInfo> = r1;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean updateLogicalDisplaysLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        return;
    }

    private void handleLogicalDisplayChanged(int, com.android.server.display.LogicalDisplay)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.LogicalDisplay r1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.display.LogicalDisplay;

        if i0 != 0 goto label1;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void recordTopInsetLocked(com.android.server.display.LogicalDisplay)>(r1);

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 2);

        return;
    }

    private void handleLogicalDisplayRemoved(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        staticinvoke <android.hardware.display.DisplayManagerGlobal: void invalidateLocalDisplayInfoCaches()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void sendDisplayEventLocked(int,int)>(i0, 3);

        return;
    }

    private void handleSettingsChange()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateSettingsLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isBrightnessConfigurationTooDark(android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.Object $r1, $r2;
        int $i0, i2;
        float $f0, $f1, $f2;
        android.util.Spline $r3;
        byte $b1;
        android.hardware.display.BrightnessConfiguration r4;
        android.util.Pair r5;
        float[] r6, r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r4 := @parameter0: android.hardware.display.BrightnessConfiguration;

        r5 = virtualinvoke r4.<android.hardware.display.BrightnessConfiguration: android.util.Pair getCurve()>();

        $r1 = r5.<android.util.Pair: java.lang.Object first>;

        r6 = (float[]) $r1;

        $r2 = r5.<android.util.Pair: java.lang.Object second>;

        r7 = (float[]) $r2;

        i2 = 0;

     label1:
        $i0 = lengthof r6;

        if i2 >= $i0 goto label3;

        $f1 = r7[i2];

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.Spline mMinimumBrightnessSpline>;

        $f0 = r6[i2];

        $f2 = virtualinvoke $r3.<android.util.Spline: float interpolate(float)>($f0);

        $b1 = $f1 cmpg $f2;

        if $b1 >= 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isUidPresentOnDisplayInternal(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.util.IntArray r5;
        boolean z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mDisplayAccessUIDs>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (android.util.IntArray) $r3;

     label02:
        if r5 == null goto label05;

     label03:
        $i2 = virtualinvoke r5.<android.util.IntArray: int indexOf(int)>(i0);

        if $i2 == -1 goto label05;

     label04:
        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void loadBrightnessConfiguration()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        int i0, $i1;
        android.os.UserManager $r2;
        com.android.server.display.PersistentDataStore $r3;
        com.android.server.display.DisplayPowerController $r4;
        java.lang.Throwable $r5;
        android.hardware.display.BrightnessConfiguration r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.UserManager getUserManager()>();

        $i1 = r0.<com.android.server.display.DisplayManagerService: int mCurrentUserId>;

        i0 = virtualinvoke $r2.<android.os.UserManager: int getUserSerialNumber(int)>($i1);

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        r6 = virtualinvoke $r3.<com.android.server.display.PersistentDataStore: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration(int)>(i0);

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r4.<com.android.server.display.DisplayPowerController: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>(r6);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void loadStableDisplayValuesLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.display.PersistentDataStore $r1;
        android.content.Context $r2;
        android.graphics.Point $r3, r4;
        android.content.res.Resources r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        r4 = virtualinvoke $r1.<com.android.server.display.PersistentDataStore: android.graphics.Point getStableDisplaySize()>();

        $i2 = r4.<android.graphics.Point: int x>;

        if $i2 <= 0 goto label1;

        $i3 = r4.<android.graphics.Point: int y>;

        if $i3 <= 0 goto label1;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i5 = r4.<android.graphics.Point: int x>;

        $i4 = r4.<android.graphics.Point: int y>;

        virtualinvoke $r3.<android.graphics.Point: void set(int,int)>($i5, $i4);

        goto label2;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        r5 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke r5.<android.content.res.Resources: int getInteger(int)>(17694906);

        i1 = virtualinvoke r5.<android.content.res.Resources: int getInteger(int)>(17694905);

        if i0 <= 0 goto label2;

        if i1 <= 0 goto label2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setStableDisplaySizeLocked(int,int)>(i0, i1);

     label2:
        return;
    }

    private void onCallbackDied(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        int $i0;
        android.util.SparseArray $r2;
        java.lang.Throwable $r3;
        com.android.server.display.DisplayManagerService$CallbackRecord r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r4 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $i0 = r4.<com.android.server.display.DisplayManagerService$CallbackRecord: int mPid>;

        virtualinvoke $r2.<android.util.SparseArray: void remove(int)>($i0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void onDesiredDisplayModeSpecsChangedInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        int i0, i1, i2;
        com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs r2, $r8;
        android.util.SparseArray $r3, $r4, $r6;
        java.lang.Object $r5;
        com.android.server.display.DisplayModeDirector $r7;
        boolean $z0, z1;
        java.lang.Throwable $r9;
        com.android.server.display.LogicalDisplay r10;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z1 = 0;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label08;

     label04:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r10 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i1 = virtualinvoke $r6.<android.util.SparseArray: int keyAt(int)>(i2);

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayModeDirector mDisplayModeDirector>;

        r2 = virtualinvoke $r7.<com.android.server.display.DisplayModeDirector: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs getDesiredDisplayModeSpecs(int)>(i1);

     label05:
        $r8 = virtualinvoke r10.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs getDesiredDisplayModeSpecsLocked()>();

        $z0 = virtualinvoke r2.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label07;

        virtualinvoke r10.<com.android.server.display.LogicalDisplay: void setDesiredDisplayModeSpecsLocked(com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs)>(r2);

     label06:
        z1 = 1;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        if z1 == 0 goto label10;

     label09:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r9 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void pauseWifiDisplayInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.WifiDisplayAdapter $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r4.<com.android.server.display.WifiDisplayAdapter: void requestPauseLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void performTraversalLocked(android.view.SurfaceControl$Transaction)
    {
        com.android.server.display.DisplayManagerService r0;
        android.view.SurfaceControl$Transaction r1;
        int i0, i1;
        com.android.server.display.DisplayDevice r2;
        java.util.ArrayList $r3, $r6;
        android.hardware.input.InputManagerInternal $r4;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r5;
        java.lang.Object $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.view.SurfaceControl$Transaction;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void clearViewportsLocked()>();

        $r3 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r6 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.display.DisplayDevice) $r7;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void configureDisplayLocked(android.view.SurfaceControl$Transaction,com.android.server.display.DisplayDevice)>(r1, r2);

        virtualinvoke r2.<com.android.server.display.DisplayDevice: void performTraversalLocked(android.view.SurfaceControl$Transaction)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal>;

        if $r4 == null goto label3;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r5.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(5);

     label3:
        return;
    }

    private void populateViewportLocked(int, int, com.android.server.display.DisplayDevice, com.android.server.display.DisplayDeviceInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo r2;
        android.hardware.display.DisplayViewport r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.android.server.display.DisplayDevice;

        r2 := @parameter3: com.android.server.display.DisplayDeviceInfo;

        $r4 = r2.<com.android.server.display.DisplayDeviceInfo: java.lang.String uniqueId>;

        r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.hardware.display.DisplayViewport getViewportLocked(int,java.lang.String)>(i0, $r4);

        virtualinvoke r1.<com.android.server.display.DisplayDevice: void populateViewportLocked(android.hardware.display.DisplayViewport)>(r3);

        r3.<android.hardware.display.DisplayViewport: boolean valid> = 1;

        r3.<android.hardware.display.DisplayViewport: int displayId> = i1;

        $i2 = r2.<com.android.server.display.DisplayDeviceInfo: int state>;

        $z0 = staticinvoke <android.view.Display: boolean isActiveState(int)>($i2);

        r3.<android.hardware.display.DisplayViewport: boolean isActive> = $z0;

        return;
    }

    private void recordStableDisplayStatsIfNeededLocked(com.android.server.display.LogicalDisplay)
    {
        com.android.server.display.DisplayManagerService r0;
        android.graphics.Point $r1, $r2;
        int $i0, $i1, $i2, $i3;
        com.android.server.display.LogicalDisplay r3;
        android.view.DisplayInfo r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r3 := @parameter0: com.android.server.display.LogicalDisplay;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i0 = $r1.<android.graphics.Point: int x>;

        if $i0 > 0 goto label1;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize>;

        $i1 = $r2.<android.graphics.Point: int y>;

        if $i1 > 0 goto label1;

        r4 = virtualinvoke r3.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $i2 = virtualinvoke r4.<android.view.DisplayInfo: int getNaturalWidth()>();

        $i3 = virtualinvoke r4.<android.view.DisplayInfo: int getNaturalHeight()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setStableDisplaySizeLocked(int,int)>($i2, $i3);

     label1:
        return;
    }

    private void recordTopInsetLocked(com.android.server.display.LogicalDisplay)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.LogicalDisplay r1;
        int i0, $i1;
        boolean $z0;
        android.graphics.Rect $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.LogicalDisplay;

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mSystemReady>;

        if $z0 == 0 goto label3;

        if r1 != null goto label1;

        goto label3;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.graphics.Rect getInsets()>();

        i0 = $r2.<android.graphics.Rect: int top>;

        $i1 = r0.<com.android.server.display.DisplayManagerService: int mDefaultDisplayTopInset>;

        if i0 != $i1 goto label2;

        return;

     label2:
        r0.<com.android.server.display.DisplayManagerService: int mDefaultDisplayTopInset> = i0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.displayinset.top", $r3);

        return;

     label3:
        return;
    }

    private void registerAdditionalDisplayAdapters()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean shouldRegisterNonEssentialDisplayAdaptersLocked()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerOverlayDisplayAdapterLocked()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerWifiDisplayAdapterLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void registerCallbackInternal(android.hardware.display.IDisplayManagerCallback, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3;
        android.os.IBinder $r4;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        android.hardware.display.IDisplayManagerCallback r8;
        com.android.server.display.DisplayManagerService$CallbackRecord r9;
        java.lang.RuntimeException r11;
        java.lang.SecurityException r12;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r8 := @parameter0: android.hardware.display.IDisplayManagerCallback;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r3 != null goto label07;

        r9 = new com.android.server.display.DisplayManagerService$CallbackRecord;

        specialinvoke r9.<com.android.server.display.DisplayManagerService$CallbackRecord: void <init>(com.android.server.display.DisplayManagerService,int,android.hardware.display.IDisplayManagerCallback)>(r0, i0, r8);

     label02:
        $r4 = interfaceinvoke r8.<android.hardware.display.IDisplayManagerCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r9, 0);

     label03:
        $r5 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r9);

        exitmonitor r1;

     label04:
        return;

     label05:
        $r7 := @caughtexception;

     label06:
        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw r11;

     label07:
        r12 = new java.lang.SecurityException;

        specialinvoke r12.<java.lang.SecurityException: void <init>(java.lang.String)>("The calling process has already registered an IDisplayManagerCallback.");

        throw r12;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void registerDefaultDisplayAdapters()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r5, $r9;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r2, $r6;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r3, $r7;
        android.content.Context $r4, $r8;
        com.android.server.display.DisplayManagerService$Injector $r10;
        java.lang.Throwable $r11;
        com.android.server.display.LocalDisplayAdapter r12;
        com.android.server.display.VirtualDisplayAdapter r13;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        r12 = new com.android.server.display.LocalDisplayAdapter;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        specialinvoke r12.<com.android.server.display.LocalDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r5, $r4, $r3, $r2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>(r12);

        $r10 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$Injector mInjector>;

        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r8 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        r13 = virtualinvoke $r10.<com.android.server.display.DisplayManagerService$Injector: com.android.server.display.VirtualDisplayAdapter getVirtualDisplayAdapter(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener)>($r9, $r8, $r7, $r6);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter> = r13;

     label2:
        if r13 == null goto label4;

     label3:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>(r13);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayAdapter r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayAdapter;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayAdapters>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.server.display.DisplayAdapter: void registerLocked()>();

        return;
    }

    private void registerDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void registerOverlayDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.OverlayDisplayAdapter $r1;
        android.os.Handler $r2;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r3;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;
        android.content.Context $r5;
        com.android.server.display.DisplayManagerService$SyncRoot $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = new com.android.server.display.OverlayDisplayAdapter;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.os.Handler mUiHandler>;

        specialinvoke $r1.<com.android.server.display.OverlayDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener,android.os.Handler)>($r6, $r5, $r4, $r3, $r2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r1);

        return;
    }

    private void registerWifiDisplayAdapterLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r2, $r8;
        android.content.res.Resources $r3;
        boolean $z0;
        com.android.server.display.WifiDisplayAdapter $r4;
        com.android.server.display.PersistentDataStore $r5;
        com.android.server.display.DisplayManagerService$DisplayAdapterListener $r6;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r7;
        com.android.server.display.DisplayManagerService$SyncRoot $r9;
        int $i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891455);

        if $z0 != 0 goto label1;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.debug.wfd.enable", -1);

        if $i0 != 1 goto label2;

     label1:
        $r4 = new com.android.server.display.WifiDisplayAdapter;

        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        $r8 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayAdapterListener mDisplayAdapterListener>;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        specialinvoke $r4.<com.android.server.display.WifiDisplayAdapter: void <init>(com.android.server.display.DisplayManagerService$SyncRoot,android.content.Context,android.os.Handler,com.android.server.display.DisplayAdapter$Listener,com.android.server.display.PersistentDataStore)>($r9, $r8, $r7, $r6, $r5);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter> = $r4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void registerDisplayAdapterLocked(com.android.server.display.DisplayAdapter)>($r4);

     label2:
        return;
    }

    private void releaseVirtualDisplayInternal(android.os.IBinder)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.VirtualDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.display.DisplayDevice r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r2 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r6 = virtualinvoke $r3.<com.android.server.display.VirtualDisplayAdapter: com.android.server.display.DisplayDevice releaseVirtualDisplayLocked(android.os.IBinder)>(r5);

     label04:
        if r6 == null goto label06;

     label05:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)>(r6);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void renameWifiDisplayInternal(java.lang.String, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        java.lang.String r1, r6;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        com.android.server.display.WifiDisplayAdapter $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r4.<com.android.server.display.WifiDisplayAdapter: void requestRenameLocked(java.lang.String,java.lang.String)>(r6, r1);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void requestColorModeInternal(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.display.LogicalDisplay r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.LogicalDisplay) $r3;

     label2:
        if r5 == null goto label4;

     label3:
        $i2 = virtualinvoke r5.<com.android.server.display.LogicalDisplay: int getRequestedColorModeLocked()>();

        if $i2 == i1 goto label4;

        virtualinvoke r5.<com.android.server.display.LogicalDisplay: void setRequestedColorModeLocked(int)>(i1);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void requestGlobalDisplayStateInternal(int, float)
    {
        com.android.server.display.DisplayManagerService r0;
        float f0, $f1, f2;
        java.util.ArrayList r1, $r9, $r10, $r11, $r14, $r18, $r21;
        byte $b0, $b1, $b2, $b3;
        java.lang.String $r3, $r8;
        java.lang.Object $r12;
        java.lang.Runnable $r13;
        java.lang.Throwable $r15, $r16, $r17;
        int i4, i5, $i6, i7, $i8;
        com.android.server.display.DisplayManagerService$SyncRoot r19;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i4 := @parameter0: int;

        f0 := @parameter1: float;

        i5 = i4;

        if i4 != 0 goto label01;

        i5 = 2;

     label01:
        if i5 != 1 goto label02;

        f2 = -1.0F;

        goto label04;

     label02:
        $b0 = f0 cmpl -1.0F;

        if $b0 == 0 goto label03;

        $b3 = f0 cmpg 0.0F;

        if $b3 >= 0 goto label03;

        f2 = #NaNF;

        goto label04;

     label03:
        f2 = f0;

        $b1 = f0 cmpl 1.0F;

        if $b1 <= 0 goto label04;

        f2 = 1.0F;

     label04:
        r1 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        entermonitor r1;

     label05:
        r19 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r19;

     label06:
        $i6 = r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState>;

        if $i6 != i5 goto label09;

        $f1 = r0.<com.android.server.display.DisplayManagerService: float mGlobalDisplayBrightness>;

        $b2 = $f1 cmpl f2;

        if $b2 != 0 goto label09;

        exitmonitor r19;

     label07:
        $r14 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        virtualinvoke $r14.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label08:
        return;

     label09:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestGlobalDisplayState(");

        $r3 = staticinvoke <android.view.Display: java.lang.String stateToString(int)>(i5);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", brightness=");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(131072L, $r8);

        r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState> = i5;

        r0.<com.android.server.display.DisplayManagerService: float mGlobalDisplayBrightness> = f2;

        $r9 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void applyGlobalDisplayStateLocked(java.util.List)>($r9);

        exitmonitor r19;

     label10:
        i7 = 0;

     label11:
        $r21 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        $i8 = virtualinvoke $r21.<java.util.ArrayList: int size()>();

        if i7 >= $i8 goto label13;

        $r11 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r13 = (java.lang.Runnable) $r12;

        interfaceinvoke $r13.<java.lang.Runnable: void run()>();

     label12:
        i7 = i7 + 1;

        goto label11;

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(131072L);

     label14:
        $r10 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        virtualinvoke $r10.<java.util.ArrayList: void clear()>();

     label15:
        exitmonitor r1;

     label16:
        return;

     label17:
        $r15 := @caughtexception;

     label18:
        exitmonitor r19;

     label19:
        throw $r15;

     label20:
        $r17 := @caughtexception;

     label21:
        $r18 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mTempDisplayStateWorkQueue>;

        virtualinvoke $r18.<java.util.ArrayList: void clear()>();

     label22:
        throw $r17;

     label23:
        $r16 := @caughtexception;

     label24:
        exitmonitor r1;

     label25:
        throw $r16;

        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    private void resizeVirtualDisplayInternal(android.os.IBinder, int, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.VirtualDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke $r3.<com.android.server.display.VirtualDisplayAdapter: void resizeVirtualDisplayLocked(android.os.IBinder,int,int,int)>(r5, i0, i1, i2);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void resumeWifiDisplayInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.WifiDisplayAdapter $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        virtualinvoke $r4.<com.android.server.display.WifiDisplayAdapter: void requestResumeLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void scheduleTraversalLocked(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, $z1;
        com.android.server.wm.WindowManagerInternal $r1;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        if $z1 != 0 goto label1;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        if $r1 == null goto label1;

        r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal> = 1;

        if z0 != 0 goto label1;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r2.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(4);

     label1:
        return;
    }

    private void sendDisplayEventLocked(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        android.os.Message r1;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: android.os.Message obtainMessage(int,int,int)>(3, i0, i1);

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private void setBrightnessConfigurationForUserInternal(android.hardware.display.BrightnessConfiguration, int, java.lang.String)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        android.os.UserManager $r3;
        com.android.server.display.PersistentDataStore $r4, $r5, $r9;
        com.android.server.display.DisplayPowerController $r6;
        java.lang.Throwable $r7, $r8;
        android.hardware.display.BrightnessConfiguration r10;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r10 := @parameter0: android.hardware.display.BrightnessConfiguration;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.android.server.display.DisplayManagerService: void validateBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>(r10);

        $r3 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.UserManager getUserManager()>();

        i1 = virtualinvoke $r3.<android.os.UserManager: int getUserSerialNumber(int)>(i0);

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r4.<com.android.server.display.PersistentDataStore: void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>(r10, i1, r1);

     label02:
        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r5.<com.android.server.display.PersistentDataStore: void saveIfNeeded()>();

     label03:
        $i2 = r0.<com.android.server.display.DisplayManagerService: int mCurrentUserId>;

        if i0 != $i2 goto label04;

        $r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r6.<com.android.server.display.DisplayPowerController: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>(r10);

     label04:
        exitmonitor r2;

     label05:
        return;

     label06:
        $r7 := @caughtexception;

        goto label10;

     label07:
        $r8 := @caughtexception;

     label08:
        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r9.<com.android.server.display.PersistentDataStore: void saveIfNeeded()>();

     label09:
        throw $r8;

     label10:
        exitmonitor r2;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label10 to label11 with label06;
    }

    private void setDisplayAccessUIDsInternal(android.util.SparseArray)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2, $r3, r7;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        android.util.IntArray $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r7 := @parameter0: android.util.SparseArray;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mDisplayAccessUIDs>;

        virtualinvoke $r2.<android.util.SparseArray: void clear()>();

        $i0 = virtualinvoke r7.<android.util.SparseArray: int size()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label5;

     label3:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mDisplayAccessUIDs>;

        $i1 = virtualinvoke r7.<android.util.SparseArray: int keyAt(int)>(i2);

        $r4 = virtualinvoke r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r5 = (android.util.IntArray) $r4;

        virtualinvoke $r3.<android.util.SparseArray: void append(int,java.lang.Object)>($i1, $r5);

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void setDisplayInfoOverrideFromWindowManagerInternal(int, android.view.DisplayInfo)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.LogicalDisplay r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        android.view.DisplayInfo r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r6 := @parameter1: android.view.DisplayInfo;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.display.LogicalDisplay) $r4;

     label2:
        if r2 == null goto label4;

     label3:
        $z0 = virtualinvoke r2.<com.android.server.display.LogicalDisplay: boolean setDisplayInfoOverrideFromWindowManagerLocked(android.view.DisplayInfo)>(r6);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleLogicalDisplayChanged(int,com.android.server.display.LogicalDisplay)>(i0, r2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setDisplayOffsetsInternal(int, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2, $i3, $i4;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.display.LogicalDisplay r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.LogicalDisplay) $r3;

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $i3 = virtualinvoke r5.<com.android.server.display.LogicalDisplay: int getDisplayOffsetXLocked()>();

        if $i3 != i1 goto label06;

        $i4 = virtualinvoke r5.<com.android.server.display.LogicalDisplay: int getDisplayOffsetYLocked()>();

        if $i4 == i2 goto label07;

     label06:
        virtualinvoke r5.<com.android.server.display.LogicalDisplay: void setDisplayOffsetsLocked(int,int)>(i1, i2);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void setDisplayPropertiesInternal(int, boolean, float, int, boolean, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        float f0;
        int i0, i2, i3;
        boolean z0, z1, $z2, $z3, z4, z5, z6, $z7, z8, $z9;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        byte $b1;
        android.view.DisplayInfo $r4, $r9;
        java.lang.Throwable $r5;
        com.android.server.display.LogicalDisplay r6;
        com.android.server.display.DisplayModeDirector $r7;
        com.android.server.display.DisplayModeDirector$AppRequestObserver $r8;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i2 := @parameter0: int;

        z4 := @parameter1: boolean;

        f0 := @parameter2: float;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r6 = (com.android.server.display.LogicalDisplay) $r3;

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        z5 = 0;

     label06:
        $z2 = virtualinvoke r6.<com.android.server.display.LogicalDisplay: boolean hasContentLocked()>();

        if $z2 == z4 goto label08;

        virtualinvoke r6.<com.android.server.display.LogicalDisplay: void setHasContentLocked(boolean)>(z4);

     label07:
        z5 = 1;

     label08:
        i3 = i0;

        if i0 != 0 goto label10;

        i3 = i0;

        $b1 = f0 cmpl 0.0F;

        if $b1 == 0 goto label10;

     label09:
        $r4 = virtualinvoke r6.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        i3 = virtualinvoke $r4.<android.view.DisplayInfo: int findDefaultModeByRefreshRate(float)>(f0);

     label10:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayModeDirector mDisplayModeDirector>;

        $r8 = virtualinvoke $r7.<com.android.server.display.DisplayModeDirector: com.android.server.display.DisplayModeDirector$AppRequestObserver getAppRequestObserver()>();

        virtualinvoke $r8.<com.android.server.display.DisplayModeDirector$AppRequestObserver: void setAppRequestedMode(int,int)>(i2, i3);

     label11:
        z6 = z5;

     label12:
        $r9 = virtualinvoke r6.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z7 = $r9.<android.view.DisplayInfo: boolean minimalPostProcessingSupported>;

        if $z7 == 0 goto label18;

        $z3 = r0.<com.android.server.display.DisplayManagerService: boolean mMinimalPostProcessingAllowed>;

        if $z3 == 0 goto label14;

     label13:
        if z0 == 0 goto label14;

        z8 = 1;

        goto label15;

     label14:
        z8 = 0;

     label15:
        z6 = z5;

     label16:
        $z9 = virtualinvoke r6.<com.android.server.display.LogicalDisplay: boolean getRequestedMinimalPostProcessingLocked()>();

        if $z9 == z8 goto label18;

        virtualinvoke r6.<com.android.server.display.LogicalDisplay: void setRequestedMinimalPostProcessingLocked(boolean)>(z8);

     label17:
        z6 = 1;

     label18:
        if z6 == 0 goto label20;

     label19:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(z1);

     label20:
        exitmonitor r1;

     label21:
        return;

     label22:
        $r5 := @caughtexception;

     label23:
        exitmonitor r1;

     label24:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void setDisplayScalingDisabledInternal(int, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        boolean z0, $z1;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.display.LogicalDisplay r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.LogicalDisplay) $r3;

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $z1 = virtualinvoke r5.<com.android.server.display.LogicalDisplay: boolean isDisplayScalingDisabled()>();

        if $z1 == z0 goto label06;

        virtualinvoke r5.<com.android.server.display.LogicalDisplay: void setDisplayScalingDisabledLocked(boolean)>(z0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void setStableDisplaySizeLocked(int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1;
        android.graphics.Point $r1;
        com.android.server.display.PersistentDataStore $r2, $r3, $r5;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new android.graphics.Point;

        specialinvoke $r1.<android.graphics.Point: void <init>(int,int)>(i0, i1);

        r0.<com.android.server.display.DisplayManagerService: android.graphics.Point mStableDisplaySize> = $r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r2.<com.android.server.display.PersistentDataStore: void setStableDisplaySize(android.graphics.Point)>($r1);

     label2:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r3.<com.android.server.display.PersistentDataStore: void saveIfNeeded()>();

        return;

     label3:
        $r4 := @caughtexception;

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r5.<com.android.server.display.PersistentDataStore: void saveIfNeeded()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setVirtualDisplayStateInternal(android.os.IBinder, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.VirtualDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke $r3.<com.android.server.display.VirtualDisplayAdapter: void setVirtualDisplayStateLocked(android.os.IBinder,boolean)>(r5, z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setVirtualDisplaySurfaceInternal(android.os.IBinder, android.view.Surface)
    {
        com.android.server.display.DisplayManagerService r0;
        android.view.Surface r1;
        com.android.server.display.DisplayManagerService$SyncRoot r2;
        com.android.server.display.VirtualDisplayAdapter $r3, $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r6 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.view.Surface;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r3 != null goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke $r4.<com.android.server.display.VirtualDisplayAdapter: void setVirtualDisplaySurfaceLocked(android.os.IBinder,android.view.Surface)>(r6, r1);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private boolean shouldRegisterNonEssentialDisplayAdaptersLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void startWifiDisplayScanInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.display.DisplayManagerService$CallbackRecord r5;
        java.lang.IllegalStateException r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r3;

     label2:
        if r5 == null goto label5;

     label3:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r5);

        exitmonitor r1;

     label4:
        return;

     label5:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has not registered an IDisplayManagerCallback.");

        throw r6;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void startWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, $i1;
        boolean $z0;
        com.android.server.display.DisplayManagerService$CallbackRecord r1;
        com.android.server.display.WifiDisplayAdapter r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $z0 = r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        if $z0 != 0 goto label1;

        r1.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested> = 1;

        i0 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        $i1 = i0 + 1;

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = $i1;

        if i0 != 0 goto label1;

        r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.display.WifiDisplayAdapter: void requestStartScanLocked()>();

     label1:
        return;
    }

    private void stopWifiDisplayScanInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.display.DisplayManagerService$CallbackRecord r5;
        java.lang.IllegalStateException r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mCallbacks>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.display.DisplayManagerService$CallbackRecord) $r3;

     label2:
        if r5 == null goto label5;

     label3:
        specialinvoke r0.<com.android.server.display.DisplayManagerService: void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)>(r5);

        exitmonitor r1;

     label4:
        return;

     label5:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has not registered an IDisplayManagerCallback.");

        throw r6;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void stopWifiDisplayScanLocked(com.android.server.display.DisplayManagerService$CallbackRecord)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, $i1, $i2;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        com.android.server.display.DisplayManagerService$CallbackRecord r5;
        com.android.server.display.WifiDisplayAdapter r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: com.android.server.display.DisplayManagerService$CallbackRecord;

        $z0 = r5.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested>;

        if $z0 == 0 goto label2;

        r5.<com.android.server.display.DisplayManagerService$CallbackRecord: boolean mWifiDisplayScanRequested> = 0;

        $i1 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        i0 = $i1 - 1;

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = i0;

        if i0 != 0 goto label1;

        r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.WifiDisplayAdapter mWifiDisplayAdapter>;

        if r6 == null goto label2;

        virtualinvoke r6.<com.android.server.display.WifiDisplayAdapter: void requestStopScanLocked()>();

        goto label2;

     label1:
        if i0 >= 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mWifiDisplayScanRequestCount became negative: ");

        $i2 = r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DisplayManagerService", $r4);

        r0.<com.android.server.display.DisplayManagerService: int mWifiDisplayScanRequestCount> = 0;

     label2:
        return;
    }

    private android.view.SurfaceControl$ScreenshotGraphicBuffer systemScreenshotInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, $i1, $i2;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.graphics.Rect r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        android.os.IBinder r6;
        com.android.server.display.LogicalDisplay r7;
        android.view.DisplayInfo r8;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r9;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        r6 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.IBinder getDisplayToken(int)>(i0);

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return null;

     label05:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r7 = (com.android.server.display.LogicalDisplay) $r4;

     label06:
        if r7 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        r8 = virtualinvoke r7.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        r2 = new android.graphics.Rect;

        specialinvoke r2.<android.graphics.Rect: void <init>()>();

        $i1 = virtualinvoke r8.<android.view.DisplayInfo: int getNaturalWidth()>();

        $i2 = virtualinvoke r8.<android.view.DisplayInfo: int getNaturalHeight()>();

        r9 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBufferWithSecureLayersUnsafe(android.os.IBinder,android.graphics.Rect,int,int,boolean,int)>(r6, r2, $i1, $i2, 0, 0);

        exitmonitor r1;

     label10:
        return r9;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void unregisterDisplayTransactionListenerInternal(android.hardware.display.DisplayManagerInternal$DisplayTransactionListener)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayTransactionListener;

        $r2 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private java.lang.Runnable updateDisplayStateLocked(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayDevice r1;
        com.android.server.display.DisplayDeviceInfo $r2;
        int $i0, $i1, $i2;
        float $f0;
        java.lang.Runnable $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        $r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        $i0 = $r2.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $i2 = r0.<com.android.server.display.DisplayManagerService: int mGlobalDisplayState>;

        $f0 = r0.<com.android.server.display.DisplayManagerService: float mGlobalDisplayBrightness>;

        $r3 = virtualinvoke r1.<com.android.server.display.DisplayDevice: java.lang.Runnable requestDisplayStateLocked(int,float)>($i2, $f0);

        return $r3;

     label1:
        return null;
    }

    private boolean updateLogicalDisplaysLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2;
        com.android.server.display.LogicalDisplay r1;
        android.util.SparseArray $r2, $r3, $r4, $r11;
        java.lang.Object $r5;
        android.view.DisplayInfo $r6, $r7, $r9, $r10;
        java.util.ArrayList $r8;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z2 = 0;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

     label1:
        i0 = i1 - 1;

        if i1 <= 0 goto label4;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        i2 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i0);

        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r1 = (com.android.server.display.LogicalDisplay) $r5;

        $r6 = r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo>;

        $r7 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        virtualinvoke $r6.<android.view.DisplayInfo: void copyFrom(android.view.DisplayInfo)>($r7);

        $r8 = r0.<com.android.server.display.DisplayManagerService: java.util.ArrayList mDisplayDevices>;

        virtualinvoke r1.<com.android.server.display.LogicalDisplay: void updateLocked(java.util.List)>($r8);

        $z0 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: boolean isValidLocked()>();

        if $z0 != 0 goto label2;

        $r11 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        virtualinvoke $r11.<android.util.SparseArray: void removeAt(int)>(i0);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleLogicalDisplayRemoved(int)>(i2);

        z2 = 1;

        goto label3;

     label2:
        $r9 = r0.<com.android.server.display.DisplayManagerService: android.view.DisplayInfo mTempDisplayInfo>;

        $r10 = virtualinvoke r1.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $z1 = virtualinvoke $r9.<android.view.DisplayInfo: boolean equals(android.view.DisplayInfo)>($r10);

        if $z1 != 0 goto label3;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleLogicalDisplayChanged(int,com.android.server.display.LogicalDisplay)>(i2, r1);

        z2 = 1;

     label3:
        i1 = i0;

        goto label1;

     label4:
        return z2;
    }

    private void updateSettingsLocked()
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "minimal_post_processing_allowed", 1, -2);

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.display.DisplayManagerService: boolean mMinimalPostProcessingAllowed> = z0;

        return;
    }

    private android.view.SurfaceControl$ScreenshotGraphicBuffer userScreenshotInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.view.Display r2;
        int i0, i1, i2, $i3, $i4;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        android.hardware.display.DisplayManagerGlobal $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;
        com.android.server.display.LogicalDisplay r8;
        android.view.DisplayInfo r9;
        android.graphics.Point r10;
        android.graphics.Rect r11;
        android.view.SurfaceControl$ScreenshotGraphicBuffer r12;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        r7 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.IBinder getDisplayToken(int)>(i1);

     label02:
        if r7 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return null;

     label05:
        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r8 = (com.android.server.display.LogicalDisplay) $r4;

     label06:
        if r8 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        r9 = virtualinvoke r8.<com.android.server.display.LogicalDisplay: android.view.DisplayInfo getDisplayInfoLocked()>();

        $r5 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r2 = virtualinvoke $r5.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(i1);

     label10:
        if r2 != null goto label13;

     label11:
        exitmonitor r1;

     label12:
        return null;

     label13:
        r10 = new android.graphics.Point;

        specialinvoke r10.<android.graphics.Point: void <init>()>();

        virtualinvoke r2.<android.view.Display: void getRealSize(android.graphics.Point)>(r10);

        i0 = r9.<android.view.DisplayInfo: int rotation>;

     label14:
        i2 = 3;

        if i0 == 1 goto label16;

        if i0 != 3 goto label15;

        goto label16;

     label15:
        i2 = i0;

        goto label18;

     label16:
        if i0 != 1 goto label17;

        goto label18;

     label17:
        i2 = 1;

     label18:
        r11 = new android.graphics.Rect;

        specialinvoke r11.<android.graphics.Rect: void <init>()>();

        $i3 = r10.<android.graphics.Point: int x>;

        $i4 = r10.<android.graphics.Point: int y>;

        r12 = staticinvoke <android.view.SurfaceControl: android.view.SurfaceControl$ScreenshotGraphicBuffer screenshotToBuffer(android.os.IBinder,android.graphics.Rect,int,int,boolean,int)>(r7, r11, $i3, $i4, 0, i2);

        exitmonitor r1;

     label19:
        return r12;

     label20:
        $r6 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        com.android.server.display.DisplayDevice $r4;
        java.lang.Throwable $r5;
        com.android.server.display.LogicalDisplay r6;
        com.android.server.display.DisplayDeviceInfo r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.display.LogicalDisplay) $r3;

     label2:
        if r6 == null goto label5;

     label3:
        $r4 = virtualinvoke r6.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

        r7 = virtualinvoke $r4.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()>();

        exitmonitor r1;

     label4:
        return r7;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    android.os.Handler getDisplayHandler()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        return $r1;
    }

    int getDisplayIdToMirrorInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        com.android.server.display.DisplayDevice $r4;
        java.lang.Throwable $r5;
        int i0, i1;
        com.android.server.display.LogicalDisplay r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.display.LogicalDisplay) $r3;

     label2:
        if r6 == null goto label5;

     label3:
        $r4 = virtualinvoke r6.<com.android.server.display.LogicalDisplay: com.android.server.display.DisplayDevice getPrimaryDisplayDeviceLocked()>();

        i1 = virtualinvoke $r4.<com.android.server.display.DisplayDevice: int getDisplayIdToMirrorLocked()>();

        exitmonitor r1;

     label4:
        return i1;

     label5:
        exitmonitor r1;

     label6:
        return -1;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    android.hardware.display.DisplayedContentSample getDisplayedContentSampleInternal(int, long, long)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        long l1, l2;
        android.os.IBinder r1;
        android.hardware.display.DisplayedContentSample $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.IBinder getDisplayToken(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <android.view.SurfaceControl: android.hardware.display.DisplayedContentSample getDisplayedContentSample(android.os.IBinder,long,long)>(r1, l1, l2);

        return $r2;
    }

    android.hardware.display.DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributesInternal(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        android.os.IBinder r1;
        android.hardware.display.DisplayedContentSamplingAttributes $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.IBinder getDisplayToken(int)>(i0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <android.view.SurfaceControl: android.hardware.display.DisplayedContentSamplingAttributes getDisplayedContentSamplingAttributes(android.os.IBinder)>(r1);

        return $r2;
    }

    android.hardware.display.Curve getMinimumBrightnessCurveInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.Curve $r1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.hardware.display.Curve mMinimumBrightnessCurve>;

        return $r1;
    }

    int getPreferredWideGamutColorSpaceIdInternal()
    {
        com.android.server.display.DisplayManagerService r0;
        android.graphics.ColorSpace $r1;
        int $i0;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.graphics.ColorSpace mWideColorSpace>;

        $i0 = virtualinvoke $r1.<android.graphics.ColorSpace: int getId()>();

        return $i0;
    }

    android.view.Surface getVirtualDisplaySurfaceInternal(android.os.IBinder)
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.VirtualDisplayAdapter $r2, $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        android.view.Surface r6;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        r6 = virtualinvoke $r3.<com.android.server.display.VirtualDisplayAdapter: android.view.Surface getVirtualDisplaySurfaceLocked(android.os.IBinder)>(r5);

        exitmonitor r1;

     label4:
        return r6;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onBootPhase(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1, $r14;
        long l1, l2, $l3, l5, l6;
        java.lang.RuntimeException r2;
        com.android.server.display.DisplayManagerService$Injector $r3;
        android.util.SparseArray $r4, $r7;
        java.lang.Object $r5, $r8;
        byte $b4;
        com.android.server.display.VirtualDisplayAdapter $r11, $r15;
        java.lang.String $r13;
        java.lang.Throwable $r16, $r17;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        if i0 != 100 goto label16;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label01:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$Injector mInjector>;

        l2 = virtualinvoke $r3.<com.android.server.display.DisplayManagerService$Injector: long getDefaultDisplayDelayTimeout()>();

     label02:
        $r4 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(0);

        if $r5 == null goto label06;

        $r15 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        if $r15 != null goto label04;

     label03:
        goto label06;

     label04:
        exitmonitor r1;

     label05:
        goto label16;

     label06:
        l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label07:
        $l3 = l1 + l2;

        l6 = $l3 - l5;

        $b4 = l6 cmp 0L;

        if $b4 <= 0 goto label12;

     label08:
        $r14 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        virtualinvoke $r14.<java.lang.Object: void wait(long)>(l6);

     label09:
        goto label11;

     label10:
        $r16 := @caughtexception;

     label11:
        goto label02;

     label12:
        r2 = new java.lang.RuntimeException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for default display to be initialized. DefaultDisplay=");

        $r7 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mVirtualDisplayAdapter=");

        $r11 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.VirtualDisplayAdapter mVirtualDisplayAdapter>;

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw r2;

     label13:
        $r17 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r17;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void onStart()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.PersistentDataStore $r3;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r4;
        com.android.server.display.DisplayManagerService$BinderService $r5;
        com.android.server.display.DisplayManagerService$LocalService $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        virtualinvoke $r3.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void loadStableDisplayValuesLocked()>();

        exitmonitor r1;

     label2:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r4.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(1);

        staticinvoke <android.hardware.display.DisplayManagerGlobal: void invalidateLocalDisplayInfoCaches()>();

        $r5 = new com.android.server.display.DisplayManagerService$BinderService;

        specialinvoke $r5.<com.android.server.display.DisplayManagerService$BinderService: void <init>(com.android.server.display.DisplayManagerService)>(r0);

        virtualinvoke r0.<com.android.server.display.DisplayManagerService: void publishBinderService(java.lang.String,android.os.IBinder,boolean)>("display", $r5, 1);

        $r6 = new com.android.server.display.DisplayManagerService$LocalService;

        specialinvoke $r6.<com.android.server.display.DisplayManagerService$LocalService: void <init>(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayManagerService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.display.DisplayManagerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Landroid/hardware/display/DisplayManagerInternal;", $r6);

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onSwitchUser(int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, $i2;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.os.UserManager $r2;
        com.android.server.display.DisplayPowerController $r3, $r5;
        com.android.server.display.PersistentDataStore $r4;
        java.lang.Throwable $r6;
        android.hardware.display.BrightnessConfiguration r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        $r2 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.UserManager getUserManager()>();

        i1 = virtualinvoke $r2.<android.os.UserManager: int getUserSerialNumber(int)>(i0);

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $i2 = r0.<com.android.server.display.DisplayManagerService: int mCurrentUserId>;

        if $i2 == i0 goto label2;

        r0.<com.android.server.display.DisplayManagerService: int mCurrentUserId> = i0;

        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.PersistentDataStore mPersistentDataStore>;

        r7 = virtualinvoke $r4.<com.android.server.display.PersistentDataStore: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration(int)>(i1);

        $r5 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r5.<com.android.server.display.DisplayPowerController: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>(r7);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void handleSettingsChange()>();

     label2:
        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController: void onSwitchUser(int)>(i0);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void performTraversalInternal(android.view.SurfaceControl$Transaction)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean $z0, $z1;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        java.lang.Object $r2;
        android.hardware.display.DisplayManagerInternal$DisplayTransactionListener $r3;
        java.lang.Throwable $r4;
        android.view.SurfaceControl$Transaction r5;
        com.android.server.display.DisplayManagerService$SyncRoot r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r5 := @parameter0: android.view.SurfaceControl$Transaction;

        r6 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r6;

     label1:
        $z0 = r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal>;

        if $z0 != 0 goto label3;

        exitmonitor r6;

     label2:
        return;

     label3:
        r0.<com.android.server.display.DisplayManagerService: boolean mPendingTraversal> = 0;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void performTraversalLocked(android.view.SurfaceControl$Transaction)>(r5);

        exitmonitor r6;

     label4:
        $r1 = r0.<com.android.server.display.DisplayManagerService: java.util.concurrent.CopyOnWriteArrayList mDisplayTransactionListeners>;

        r7 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r2 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (android.hardware.display.DisplayManagerInternal$DisplayTransactionListener) $r2;

        interfaceinvoke $r3.<android.hardware.display.DisplayManagerInternal$DisplayTransactionListener: void onDisplayTransaction(android.view.SurfaceControl$Transaction)>(r5);

        goto label5;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r6;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void resetBrightnessConfiguration()
    {
        com.android.server.display.DisplayManagerService r0;
        android.content.Context $r1, $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int getUserId()>();

        $r2 = r0.<com.android.server.display.DisplayManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void setBrightnessConfigurationForUserInternal(android.hardware.display.BrightnessConfiguration,int,java.lang.String)>(null, $i0, $r3);

        return;
    }

    void setAmbientColorTemperatureOverride(float)
    {
        com.android.server.display.DisplayManagerService r0;
        float f0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.DisplayPowerController $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        f0 := @parameter0: float;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        if $r3 == null goto label6;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r4.<com.android.server.display.DisplayPowerController: void setAmbientColorTemperatureOverride(float)>(f0);

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setAutoBrightnessLoggingEnabled(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.DisplayPowerController $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        if $r3 == null goto label6;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r4.<com.android.server.display.DisplayPowerController: void setAutoBrightnessLoggingEnabled(boolean)>(z0);

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setDisplayWhiteBalanceLoggingEnabled(boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.DisplayPowerController $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        if $r3 == null goto label6;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayPowerController mDisplayPowerController>;

        virtualinvoke $r4.<com.android.server.display.DisplayPowerController: void setDisplayWhiteBalanceLoggingEnabled(boolean)>(z0);

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean setDisplayedContentSamplingEnabledInternal(int, boolean, int, int)
    {
        com.android.server.display.DisplayManagerService r0;
        int i0, i1, i2;
        boolean z0, $z1;
        android.os.IBinder r1;

        r0 := @this: com.android.server.display.DisplayManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 = specialinvoke r0.<com.android.server.display.DisplayManagerService: android.os.IBinder getDisplayToken(int)>(i0);

        if r1 != null goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <android.view.SurfaceControl: boolean setDisplayedContentSamplingEnabled(android.os.IBinder,boolean,int,int)>(r1, z0, i1, i2);

        return $z1;
    }

    public void setupSchedulerPolicies()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.DisplayThread $r1;
        int $i0, $i1, $i2;
        com.android.server.AnimationThread $r2;
        com.android.server.wm.SurfaceAnimationThread $r3;

        r0 := @this: com.android.server.display.DisplayManagerService;

        $r1 = staticinvoke <com.android.server.DisplayThread: com.android.server.DisplayThread get()>();

        $i0 = virtualinvoke $r1.<com.android.server.DisplayThread: int getThreadId()>();

        staticinvoke <android.os.Process: void setThreadGroupAndCpuset(int,int)>($i0, 5);

        $r2 = staticinvoke <com.android.server.AnimationThread: com.android.server.AnimationThread get()>();

        $i1 = virtualinvoke $r2.<com.android.server.AnimationThread: int getThreadId()>();

        staticinvoke <android.os.Process: void setThreadGroupAndCpuset(int,int)>($i1, 5);

        $r3 = staticinvoke <com.android.server.wm.SurfaceAnimationThread: com.android.server.wm.SurfaceAnimationThread get()>();

        $i2 = virtualinvoke $r3.<com.android.server.wm.SurfaceAnimationThread: int getThreadId()>();

        staticinvoke <android.os.Process: void setThreadGroupAndCpuset(int,int)>($i2, 5);

        return;
    }

    public void systemReady(boolean, boolean)
    {
        com.android.server.display.DisplayManagerService r0;
        boolean z0, z1;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        com.android.server.display.LogicalDisplay $r5;
        com.android.server.display.DisplayManagerService$DesiredDisplayModeSpecsObserver $r6;
        com.android.server.display.DisplayModeDirector $r7, $r9;
        android.hardware.SensorManager $r8;
        com.android.server.display.DisplayManagerService$DisplayManagerHandler $r10;
        com.android.server.display.DisplayManagerService$SettingsObserver $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.display.DisplayManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        r0.<com.android.server.display.DisplayManagerService: boolean mSafeMode> = z0;

        r0.<com.android.server.display.DisplayManagerService: boolean mOnlyCore> = z1;

        r0.<com.android.server.display.DisplayManagerService: boolean mSystemReady> = 1;

        $r3 = r0.<com.android.server.display.DisplayManagerService: android.util.SparseArray mLogicalDisplays>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(0);

        $r5 = (com.android.server.display.LogicalDisplay) $r4;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void recordTopInsetLocked(com.android.server.display.LogicalDisplay)>($r5);

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void updateSettingsLocked()>();

        exitmonitor r1;

     label2:
        $r7 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayModeDirector mDisplayModeDirector>;

        $r6 = new com.android.server.display.DisplayManagerService$DesiredDisplayModeSpecsObserver;

        specialinvoke $r6.<com.android.server.display.DisplayManagerService$DesiredDisplayModeSpecsObserver: void <init>(com.android.server.display.DisplayManagerService)>(r0);

        virtualinvoke $r7.<com.android.server.display.DisplayModeDirector: void setDesiredDisplayModeSpecsListener(com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecsListener)>($r6);

        $r9 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayModeDirector mDisplayModeDirector>;

        $r8 = r0.<com.android.server.display.DisplayManagerService: android.hardware.SensorManager mSensorManager>;

        virtualinvoke $r9.<com.android.server.display.DisplayModeDirector: void start(android.hardware.SensorManager)>($r8);

        $r10 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$DisplayManagerHandler mHandler>;

        virtualinvoke $r10.<com.android.server.display.DisplayManagerService$DisplayManagerHandler: boolean sendEmptyMessage(int)>(2);

        $r11 = new com.android.server.display.DisplayManagerService$SettingsObserver;

        specialinvoke $r11.<com.android.server.display.DisplayManagerService$SettingsObserver: void <init>(com.android.server.display.DisplayManagerService)>(r0);

        r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SettingsObserver mSettingsObserver> = $r11;

        return;

     label3:
        $r12 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void validateBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.DisplayManagerService r0;
        android.hardware.display.BrightnessConfiguration r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 := @parameter0: android.hardware.display.BrightnessConfiguration;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.server.display.DisplayManagerService: boolean isBrightnessConfigurationTooDark(android.hardware.display.BrightnessConfiguration)>(r1);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("brightness curve is too dark");

        throw $r2;
    }

    public void windowManagerAndInputReady()
    {
        com.android.server.display.DisplayManagerService r0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        java.lang.Object $r3, $r5;
        com.android.server.wm.WindowManagerInternal $r4;
        android.hardware.input.InputManagerInternal $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.display.DisplayManagerService;

        r1 = r0.<com.android.server.display.DisplayManagerService: com.android.server.display.DisplayManagerService$SyncRoot mSyncRoot>;

        entermonitor r1;

     label1:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r4 = (com.android.server.wm.WindowManagerInternal) $r3;

        r0.<com.android.server.display.DisplayManagerService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal> = $r4;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/input/InputManagerInternal;");

        $r6 = (android.hardware.input.InputManagerInternal) $r5;

        r0.<com.android.server.display.DisplayManagerService: android.hardware.input.InputManagerInternal mInputManagerInternal> = $r6;

        specialinvoke r0.<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)>(0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.display.DisplayManagerService: long WAIT_FOR_DEFAULT_DISPLAY_TIMEOUT> = 10000L;

        <com.android.server.display.DisplayManagerService: java.lang.String TAG> = "DisplayManagerService";

        <com.android.server.display.DisplayManagerService: java.lang.String PROP_DEFAULT_DISPLAY_TOP_INSET> = "persist.sys.displayinset.top";

        <com.android.server.display.DisplayManagerService: int MSG_UPDATE_VIEWPORT> = 5;

        <com.android.server.display.DisplayManagerService: int MSG_REQUEST_TRAVERSAL> = 4;

        <com.android.server.display.DisplayManagerService: int MSG_REGISTER_DEFAULT_DISPLAY_ADAPTERS> = 1;

        <com.android.server.display.DisplayManagerService: int MSG_REGISTER_ADDITIONAL_DISPLAY_ADAPTERS> = 2;

        <com.android.server.display.DisplayManagerService: int MSG_LOAD_BRIGHTNESS_CONFIGURATION> = 6;

        <com.android.server.display.DisplayManagerService: int MSG_DELIVER_DISPLAY_EVENT> = 3;

        <com.android.server.display.DisplayManagerService: java.lang.String FORCE_WIFI_DISPLAY_ENABLE> = "persist.debug.wfd.enable";

        <com.android.server.display.DisplayManagerService: boolean DEBUG> = 0;

        return;
    }
}
