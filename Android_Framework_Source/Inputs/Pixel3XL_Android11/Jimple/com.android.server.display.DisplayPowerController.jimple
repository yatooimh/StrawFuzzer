final class com.android.server.display.DisplayPowerController extends java.lang.Object implements com.android.server.display.AutomaticBrightnessController$Callbacks, com.android.server.display.whitebalance.DisplayWhiteBalanceController$Callbacks
{
    static final boolean $assertionsDisabled;
    private static final int COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS;
    private static final int COLOR_FADE_ON_ANIMATION_DURATION_MILLIS;
    private static final boolean DEBUG;
    private static final boolean DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT;
    private static final int MSG_CONFIGURE_BRIGHTNESS;
    private static final int MSG_PROXIMITY_SENSOR_DEBOUNCED;
    private static final int MSG_SCREEN_OFF_UNBLOCKED;
    private static final int MSG_SCREEN_ON_UNBLOCKED;
    private static final int MSG_SET_TEMPORARY_AUTO_BRIGHTNESS_ADJUSTMENT;
    private static final int MSG_SET_TEMPORARY_BRIGHTNESS;
    private static final int MSG_UPDATE_POWER_STATE;
    private static final int PROXIMITY_NEGATIVE;
    private static final int PROXIMITY_POSITIVE;
    private static final int PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY;
    private static final int PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY;
    private static final int PROXIMITY_UNKNOWN;
    private static final int RAMP_STATE_SKIP_AUTOBRIGHT;
    private static final int RAMP_STATE_SKIP_INITIAL;
    private static final int RAMP_STATE_SKIP_NONE;
    private static final int REPORTED_TO_POLICY_SCREEN_OFF;
    private static final int REPORTED_TO_POLICY_SCREEN_ON;
    private static final int REPORTED_TO_POLICY_SCREEN_TURNING_OFF;
    private static final int REPORTED_TO_POLICY_SCREEN_TURNING_ON;
    private static final float SCREEN_ANIMATION_RATE_MINIMUM;
    private static final float SCREEN_DIM_MINIMUM_REDUCTION_FLOAT;
    private static final java.lang.String SCREEN_OFF_BLOCKED_TRACE_NAME;
    private static final java.lang.String SCREEN_ON_BLOCKED_TRACE_NAME;
    private static final java.lang.String TAG;
    private static final float TYPICAL_PROXIMITY_THRESHOLD;
    private static final boolean USE_COLOR_FADE_ON_ANIMATION;
    private final boolean mAllowAutoBrightnessWhileDozingConfig;
    private final android.animation.Animator$AnimatorListener mAnimatorListener;
    private boolean mAppliedAutoBrightness;
    private boolean mAppliedBrightnessBoost;
    private boolean mAppliedDimming;
    private boolean mAppliedLowPower;
    private boolean mAppliedScreenBrightnessOverride;
    private boolean mAppliedTemporaryAutoBrightnessAdjustment;
    private boolean mAppliedTemporaryBrightness;
    private float mAutoBrightnessAdjustment;
    private com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private final com.android.server.display.DisplayBlanker mBlanker;
    private boolean mBrightnessBucketsInDozeConfig;
    private android.hardware.display.BrightnessConfiguration mBrightnessConfiguration;
    private com.android.server.display.BrightnessMappingStrategy mBrightnessMapper;
    private final float mBrightnessRampRateFast;
    private final float mBrightnessRampRateSlow;
    private com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReason;
    private com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp;
    private final com.android.internal.BrightnessSynchronizer mBrightnessSynchronizer;
    private final com.android.server.display.BrightnessTracker mBrightnessTracker;
    private final android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks;
    private final java.lang.Runnable mCleanListener;
    private final boolean mColorFadeEnabled;
    private boolean mColorFadeFadesConfig;
    private android.animation.ObjectAnimator mColorFadeOffAnimator;
    private android.animation.ObjectAnimator mColorFadeOnAnimator;
    private final android.content.Context mContext;
    private float mCurrentScreenBrightnessSetting;
    private boolean mDisplayBlanksAfterDozeConfig;
    private final com.android.server.display.DisplayDevice mDisplayDevice;
    private boolean mDisplayReadyLocked;
    private final com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController;
    private final com.android.server.display.whitebalance.DisplayWhiteBalanceSettings mDisplayWhiteBalanceSettings;
    private boolean mDozing;
    private final com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler;
    private float mInitialAutoBrightness;
    private float mLastUserSetScreenBrightness;
    private final java.lang.Object mLock;
    private final java.lang.Runnable mOnProximityNegativeRunnable;
    private final java.lang.Runnable mOnProximityPositiveRunnable;
    private final java.lang.Runnable mOnStateChangedRunnable;
    private float mPendingAutoBrightnessAdjustment;
    private int mPendingProximity;
    private long mPendingProximityDebounceTime;
    private boolean mPendingRequestChangedLocked;
    private android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked;
    private float mPendingScreenBrightnessSetting;
    private boolean mPendingScreenOff;
    private com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker;
    private com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker;
    private boolean mPendingUpdatePowerStateLocked;
    private boolean mPendingWaitForNegativeProximityLocked;
    private android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest;
    private com.android.server.display.DisplayPowerState mPowerState;
    private int mProximity;
    private android.hardware.Sensor mProximitySensor;
    private boolean mProximitySensorEnabled;
    private final android.hardware.SensorEventListener mProximitySensorListener;
    private float mProximityThreshold;
    private final com.android.server.display.RampAnimator$Listener mRampAnimatorListener;
    private int mReportedScreenStateToPolicy;
    private final float mScreenBrightnessDefault;
    private final float mScreenBrightnessDimConfig;
    private final float mScreenBrightnessDozeConfig;
    private float mScreenBrightnessForVr;
    private final float mScreenBrightnessForVrDefault;
    private final float mScreenBrightnessForVrRangeMaximum;
    private final float mScreenBrightnessForVrRangeMinimum;
    private com.android.server.display.RampAnimator mScreenBrightnessRampAnimator;
    private final float mScreenBrightnessRangeMaximum;
    private final float mScreenBrightnessRangeMinimum;
    private boolean mScreenOffBecauseOfProximity;
    private long mScreenOffBlockStartRealTime;
    private long mScreenOnBlockStartRealTime;
    private final android.hardware.SensorManager mSensorManager;
    private final com.android.server.display.DisplayPowerController$SettingsObserver mSettingsObserver;
    private int mSkipRampState;
    private final boolean mSkipScreenOnBrightnessRamp;
    private float mTemporaryAutoBrightnessAdjustment;
    private float mTemporaryScreenBrightness;
    private boolean mUnfinishedBusiness;
    private boolean mUseSoftwareAutoBrightnessConfig;
    private boolean mWaitingForNegativeProximity;
    private final com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy;

    static void <clinit>()
    {
        <com.android.server.display.DisplayPowerController: boolean USE_COLOR_FADE_ON_ANIMATION> = 0;

        <com.android.server.display.DisplayPowerController: float TYPICAL_PROXIMITY_THRESHOLD> = 5.0F;

        <com.android.server.display.DisplayPowerController: java.lang.String TAG> = "DisplayPowerController";

        <com.android.server.display.DisplayPowerController: java.lang.String SCREEN_ON_BLOCKED_TRACE_NAME> = "Screen on blocked";

        <com.android.server.display.DisplayPowerController: java.lang.String SCREEN_OFF_BLOCKED_TRACE_NAME> = "Screen off blocked";

        <com.android.server.display.DisplayPowerController: float SCREEN_DIM_MINIMUM_REDUCTION_FLOAT> = 0.04F;

        <com.android.server.display.DisplayPowerController: float SCREEN_ANIMATION_RATE_MINIMUM> = 0.0F;

        <com.android.server.display.DisplayPowerController: int REPORTED_TO_POLICY_SCREEN_TURNING_ON> = 1;

        <com.android.server.display.DisplayPowerController: int REPORTED_TO_POLICY_SCREEN_TURNING_OFF> = 3;

        <com.android.server.display.DisplayPowerController: int REPORTED_TO_POLICY_SCREEN_ON> = 2;

        <com.android.server.display.DisplayPowerController: int REPORTED_TO_POLICY_SCREEN_OFF> = 0;

        <com.android.server.display.DisplayPowerController: int RAMP_STATE_SKIP_NONE> = 0;

        <com.android.server.display.DisplayPowerController: int RAMP_STATE_SKIP_INITIAL> = 1;

        <com.android.server.display.DisplayPowerController: int RAMP_STATE_SKIP_AUTOBRIGHT> = 2;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_UNKNOWN> = -1;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_SENSOR_POSITIVE_DEBOUNCE_DELAY> = 0;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_SENSOR_NEGATIVE_DEBOUNCE_DELAY> = 250;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_POSITIVE> = 1;

        <com.android.server.display.DisplayPowerController: int PROXIMITY_NEGATIVE> = 0;

        <com.android.server.display.DisplayPowerController: int MSG_UPDATE_POWER_STATE> = 1;

        <com.android.server.display.DisplayPowerController: int MSG_SET_TEMPORARY_BRIGHTNESS> = 6;

        <com.android.server.display.DisplayPowerController: int MSG_SET_TEMPORARY_AUTO_BRIGHTNESS_ADJUSTMENT> = 7;

        <com.android.server.display.DisplayPowerController: int MSG_SCREEN_ON_UNBLOCKED> = 3;

        <com.android.server.display.DisplayPowerController: int MSG_SCREEN_OFF_UNBLOCKED> = 4;

        <com.android.server.display.DisplayPowerController: int MSG_PROXIMITY_SENSOR_DEBOUNCED> = 2;

        <com.android.server.display.DisplayPowerController: int MSG_CONFIGURE_BRIGHTNESS> = 5;

        <com.android.server.display.DisplayPowerController: boolean DEBUG_PRETEND_PROXIMITY_SENSOR_ABSENT> = 0;

        <com.android.server.display.DisplayPowerController: boolean DEBUG> = 0;

        <com.android.server.display.DisplayPowerController: int COLOR_FADE_ON_ANIMATION_DURATION_MILLIS> = 250;

        <com.android.server.display.DisplayPowerController: int COLOR_FADE_OFF_ANIMATION_DURATION_MILLIS> = 400;

        <com.android.server.display.DisplayPowerController: boolean $assertionsDisabled> = 0;

        return;
    }

    public void <init>(android.content.Context, android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks, android.os.Handler, android.hardware.SensorManager, com.android.server.display.DisplayBlanker, com.android.server.display.DisplayDevice)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, f23, f24;
        long l0, l1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int i2, i3, $i4, $i5, i6;
        com.android.server.display.BrightnessMappingStrategy r1, $r36;
        java.lang.Object $r2, $r18, $r21;
        com.android.server.display.DisplayPowerController$BrightnessReason $r3, $r4;
        com.android.server.display.DisplayPowerController$1 $r5;
        com.android.server.display.DisplayPowerController$2 $r6;
        com.android.server.display.DisplayPowerController$3 $r7;
        com.android.server.display.DisplayPowerController$4 $r8;
        com.android.server.display.DisplayPowerController$5 $r9;
        com.android.server.display.DisplayPowerController$6 $r10;
        com.android.server.display.DisplayPowerController$8 $r11;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r12, $r16, $r23, $r26;
        android.os.Looper $r13, $r35;
        com.android.server.display.BrightnessTracker $r14;
        com.android.server.display.DisplayPowerController$SettingsObserver $r15;
        com.android.internal.app.IBatteryStats $r17;
        com.android.server.policy.WindowManagerPolicy $r19;
        com.android.internal.BrightnessSynchronizer $r20;
        com.android.server.display.DisplayDevice $r22, r47;
        android.content.Context $r24, r42;
        android.hardware.SensorManager $r25, r45, $r59;
        com.android.server.display.HysteresisLevels $r27, $r31;
        int[] $r28, $r29, $r30, $r32, $r33, r52;
        com.android.server.display.AutomaticBrightnessController $r34;
        java.lang.StringBuilder $r37, $r40;
        java.lang.String $r38, $r41, $r55;
        java.lang.Exception $r39;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks r43;
        android.os.Handler r44;
        com.android.server.display.DisplayBlanker r46;
        android.os.PowerManager r48;
        com.android.server.display.DisplayDeviceConfig r49;
        android.content.res.Resources r50;
        android.hardware.Sensor r56, r60;
        com.android.server.display.whitebalance.DisplayWhiteBalanceSettings r61, r63;
        com.android.server.display.whitebalance.DisplayWhiteBalanceController r62, r64;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r42 := @parameter0: android.content.Context;

        r43 := @parameter1: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks;

        r44 := @parameter2: android.os.Handler;

        r45 := @parameter3: android.hardware.SensorManager;

        r46 := @parameter4: com.android.server.display.DisplayBlanker;

        r47 := @parameter5: com.android.server.display.DisplayDevice;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock> = $r2;

        r0.<com.android.server.display.DisplayPowerController: int mProximity> = -1;

        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = -1;

        r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime> = -1L;

        $r3 = new com.android.server.display.DisplayPowerController$BrightnessReason;

        specialinvoke $r3.<com.android.server.display.DisplayPowerController$BrightnessReason: void <init>(com.android.server.display.DisplayPowerController,com.android.server.display.DisplayPowerController$1)>(r0, null);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReason> = $r3;

        $r4 = new com.android.server.display.DisplayPowerController$BrightnessReason;

        specialinvoke $r4.<com.android.server.display.DisplayPowerController$BrightnessReason: void <init>(com.android.server.display.DisplayPowerController,com.android.server.display.DisplayPowerController$1)>(r0, null);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp> = $r4;

        r0.<com.android.server.display.DisplayPowerController: float mBrightnessRampRateSlow> = 0.2352941F;

        r0.<com.android.server.display.DisplayPowerController: float mBrightnessRampRateFast> = 0.7058823F;

        r0.<com.android.server.display.DisplayPowerController: int mSkipRampState> = 0;

        $r5 = new com.android.server.display.DisplayPowerController$1;

        specialinvoke $r5.<com.android.server.display.DisplayPowerController$1: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener> = $r5;

        $r6 = new com.android.server.display.DisplayPowerController$2;

        specialinvoke $r6.<com.android.server.display.DisplayPowerController$2: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator$Listener mRampAnimatorListener> = $r6;

        $r7 = new com.android.server.display.DisplayPowerController$3;

        specialinvoke $r7.<com.android.server.display.DisplayPowerController$3: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mCleanListener> = $r7;

        $r8 = new com.android.server.display.DisplayPowerController$4;

        specialinvoke $r8.<com.android.server.display.DisplayPowerController$4: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnStateChangedRunnable> = $r8;

        $r9 = new com.android.server.display.DisplayPowerController$5;

        specialinvoke $r9.<com.android.server.display.DisplayPowerController$5: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityPositiveRunnable> = $r9;

        $r10 = new com.android.server.display.DisplayPowerController$6;

        specialinvoke $r10.<com.android.server.display.DisplayPowerController$6: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityNegativeRunnable> = $r10;

        $r11 = new com.android.server.display.DisplayPowerController$8;

        specialinvoke $r11.<com.android.server.display.DisplayPowerController$8: void <init>(com.android.server.display.DisplayPowerController)>(r0);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener> = $r11;

        $r12 = new com.android.server.display.DisplayPowerController$DisplayControllerHandler;

        $r13 = virtualinvoke r44.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r12.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: void <init>(com.android.server.display.DisplayPowerController,android.os.Looper)>(r0, $r13);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler> = $r12;

        $r14 = new com.android.server.display.BrightnessTracker;

        specialinvoke $r14.<com.android.server.display.BrightnessTracker: void <init>(android.content.Context,com.android.server.display.BrightnessTracker$Injector)>(r42, null);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker> = $r14;

        $r15 = new com.android.server.display.DisplayPowerController$SettingsObserver;

        $r16 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        specialinvoke $r15.<com.android.server.display.DisplayPowerController$SettingsObserver: void <init>(com.android.server.display.DisplayPowerController,android.os.Handler)>(r0, $r16);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$SettingsObserver mSettingsObserver> = $r15;

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks> = r43;

        $r17 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats> = $r17;

        r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager> = r45;

        $r18 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/policy/WindowManagerPolicy;");

        $r19 = (com.android.server.policy.WindowManagerPolicy) $r18;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy> = $r19;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayBlanker mBlanker> = r46;

        r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext> = r42;

        $r20 = new com.android.internal.BrightnessSynchronizer;

        specialinvoke $r20.<com.android.internal.BrightnessSynchronizer: void <init>(android.content.Context)>(r42);

        r0.<com.android.server.display.DisplayPowerController: com.android.internal.BrightnessSynchronizer mBrightnessSynchronizer> = $r20;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayDevice mDisplayDevice> = r47;

        $r21 = virtualinvoke r42.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        r48 = (android.os.PowerManager) $r21;

        $r22 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayDevice mDisplayDevice>;

        r49 = virtualinvoke $r22.<com.android.server.display.DisplayDevice: com.android.server.display.DisplayDeviceConfig getDisplayDeviceConfig()>();

        r50 = virtualinvoke r42.<android.content.Context: android.content.res.Resources getResources()>();

        $f1 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(0);

        f0 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f1);

        $f2 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(4);

        $f3 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f2);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDozeConfig> = $f3;

        $f4 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(3);

        f23 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f4);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDimConfig> = f23;

        $f5 = staticinvoke <java.lang.Math: float min(float,float)>(f0, f23);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum> = $f5;

        $f6 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(1);

        $f7 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f6);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMaximum> = $f7;

        $f8 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(2);

        $f9 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f8);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDefault> = $f9;

        $f10 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(7);

        $f11 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f10);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrDefault> = $f11;

        $f12 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(6);

        $f13 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f12);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrRangeMaximum> = $f13;

        $f14 = virtualinvoke r48.<android.os.PowerManager: float getBrightnessConstraint(int)>(5);

        $f15 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f14);

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrRangeMinimum> = $f15;

        $z1 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891369);

        r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig> = $z1;

        $z2 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891343);

        r0.<com.android.server.display.DisplayPowerController: boolean mAllowAutoBrightnessWhileDozingConfig> = $z2;

        $z3 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891530);

        r0.<com.android.server.display.DisplayPowerController: boolean mSkipScreenOnBrightnessRamp> = $z3;

        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        if $z4 == 0 goto label04;

        f24 = virtualinvoke r50.<android.content.res.Resources: float getFraction(int,int,int)>(18022406, 1, 1);

        $r27 = new com.android.server.display.HysteresisLevels;

        $r28 = virtualinvoke r50.<android.content.res.Resources: int[] getIntArray(int)>(17235979);

        $r29 = virtualinvoke r50.<android.content.res.Resources: int[] getIntArray(int)>(17235980);

        $r30 = virtualinvoke r50.<android.content.res.Resources: int[] getIntArray(int)>(17235981);

        specialinvoke $r27.<com.android.server.display.HysteresisLevels: void <init>(int[],int[],int[])>($r28, $r29, $r30);

        r52 = virtualinvoke r50.<android.content.res.Resources: int[] getIntArray(int)>(17236070);

        $r31 = new com.android.server.display.HysteresisLevels;

        $r32 = virtualinvoke r50.<android.content.res.Resources: int[] getIntArray(int)>(17236073);

        $r33 = virtualinvoke r50.<android.content.res.Resources: int[] getIntArray(int)>(17236074);

        specialinvoke $r31.<com.android.server.display.HysteresisLevels: void <init>(int[],int[],int[])>(r52, $r32, $r33);

        $i4 = virtualinvoke r50.<android.content.res.Resources: int getInteger(int)>(17694738);

        l0 = (long) $i4;

        $i5 = virtualinvoke r50.<android.content.res.Resources: int getInteger(int)>(17694739);

        l1 = (long) $i5;

        z0 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891364);

        i2 = virtualinvoke r50.<android.content.res.Resources: int getInteger(int)>(17694823);

        i3 = virtualinvoke r50.<android.content.res.Resources: int getInteger(int)>(17694741);

        i6 = virtualinvoke r50.<android.content.res.Resources: int getInteger(int)>(17694740);

        if i6 != -1 goto label01;

        i6 = i3;

        goto label02;

     label01:
        if i6 <= i3 goto label02;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected config_autoBrightnessInitialLightSensorRate (");

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to be less than or equal to config_autoBrightnessLightSensorRate (");

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DisplayPowerController", $r38);

        goto label02;

     label02:
        $r55 = virtualinvoke r50.<android.content.res.Resources: java.lang.String getString(int)>(17039882);

        r56 = specialinvoke r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor findDisplayLightSensor(java.lang.String)>($r55);

        r1 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: com.android.server.display.BrightnessMappingStrategy create(android.content.res.Resources)>(r50);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessMappingStrategy mBrightnessMapper> = r1;

        if r1 == null goto label03;

        $r34 = new com.android.server.display.AutomaticBrightnessController;

        $r35 = virtualinvoke r44.<android.os.Handler: android.os.Looper getLooper()>();

        $r36 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessMappingStrategy mBrightnessMapper>;

        $f22 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        $f21 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMaximum>;

        specialinvoke $r34.<com.android.server.display.AutomaticBrightnessController: void <init>(com.android.server.display.AutomaticBrightnessController$Callbacks,android.os.Looper,android.hardware.SensorManager,android.hardware.Sensor,com.android.server.display.BrightnessMappingStrategy,int,float,float,float,int,int,long,long,boolean,com.android.server.display.HysteresisLevels,com.android.server.display.HysteresisLevels,android.content.Context,com.android.server.display.DisplayDeviceConfig)>(r0, $r35, r45, r56, $r36, i2, $f22, $f21, f24, i3, i6, l0, l1, z0, $r27, $r31, r42, r49);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController> = $r34;

        goto label04;

     label03:
        r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig> = 0;

        goto label04;

     label04:
        $z5 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        $z6 = $z5 ^ 1;

        r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled> = $z6;

        $z7 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891361);

        r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig> = $z7;

        $z8 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891415);

        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayBlanksAfterDozeConfig> = $z8;

        $z9 = virtualinvoke r50.<android.content.res.Resources: boolean getBoolean(int)>(17891416);

        r0.<com.android.server.display.DisplayPowerController: boolean mBrightnessBucketsInDozeConfig> = $z9;

        $r59 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        r60 = virtualinvoke $r59.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(8);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor> = r60;

        if r60 == null goto label05;

        $f19 = virtualinvoke r60.<android.hardware.Sensor: float getMaximumRange()>();

        $f20 = staticinvoke <java.lang.Math: float min(float,float)>($f19, 5.0F);

        r0.<com.android.server.display.DisplayPowerController: float mProximityThreshold> = $f20;

     label05:
        $f16 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float getScreenBrightnessSetting()>();

        r0.<com.android.server.display.DisplayPowerController: float mCurrentScreenBrightnessSetting> = $f16;

        $f17 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float getScreenBrightnessForVrSetting()>();

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVr> = $f17;

        $f18 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float getAutoBrightnessAdjustmentSetting()>();

        r0.<com.android.server.display.DisplayPowerController: float mAutoBrightnessAdjustment> = $f18;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness> = #NaNF;

        r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting> = #NaNF;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryAutoBrightnessAdjustment> = #NaNF;

        r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment> = #NaNF;

        r61 = null;

        r62 = null;

     label06:
        r63 = new com.android.server.display.whitebalance.DisplayWhiteBalanceSettings;

     label07:
        r61 = null;

        r62 = null;

     label08:
        $r24 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r23 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        specialinvoke r63.<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: void <init>(android.content.Context,android.os.Handler)>($r24, $r23);

     label09:
        r61 = r63;

        r62 = null;

     label10:
        $r26 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r25 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        r64 = staticinvoke <com.android.server.display.whitebalance.DisplayWhiteBalanceFactory: com.android.server.display.whitebalance.DisplayWhiteBalanceController create(android.os.Handler,android.hardware.SensorManager,android.content.res.Resources)>($r26, $r25, r50);

     label11:
        r61 = r63;

        r62 = r64;

     label12:
        virtualinvoke r63.<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: boolean setCallbacks(com.android.server.display.whitebalance.DisplayWhiteBalanceController$Callbacks)>(r0);

     label13:
        r61 = r63;

        r62 = r64;

     label14:
        virtualinvoke r64.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setCallbacks(com.android.server.display.whitebalance.DisplayWhiteBalanceController$Callbacks)>(r0);

     label15:
        r61 = r63;

        r62 = r64;

        goto label17;

     label16:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to set up display white-balance: ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DisplayPowerController", $r41);

     label17:
        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceSettings mDisplayWhiteBalanceSettings> = r61;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController> = r62;

        return;

        catch java.lang.Exception from label06 to label07 with label16;
        catch java.lang.Exception from label08 to label09 with label16;
        catch java.lang.Exception from label10 to label11 with label16;
        catch java.lang.Exception from label12 to label13 with label16;
        catch java.lang.Exception from label14 to label15 with label16;
    }

    static void access$100(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    static com.android.server.display.DisplayPowerController$ScreenOffUnblocker access$1000(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$ScreenOffUnblocker $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker>;

        return $r1;
    }

    static void access$1100(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOff()>();

        return;
    }

    static android.hardware.display.BrightnessConfiguration access$1202(com.android.server.display.DisplayPowerController, android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.BrightnessConfiguration r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        r1 := @parameter1: android.hardware.display.BrightnessConfiguration;

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.BrightnessConfiguration mBrightnessConfiguration> = r1;

        return r1;
    }

    static float access$1302(com.android.server.display.DisplayPowerController, float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        f0 := @parameter1: float;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness> = f0;

        return f0;
    }

    static float access$1402(com.android.server.display.DisplayPowerController, float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        f0 := @parameter1: float;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryAutoBrightnessAdjustment> = f0;

        return f0;
    }

    static boolean access$1500(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        return $z0;
    }

    static float access$1600(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        float $f0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mProximityThreshold>;

        return $f0;
    }

    static void access$1700(com.android.server.display.DisplayPowerController, long, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        long l0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void handleProximitySensorEvent(long,boolean)>(l0, z0);

        return;
    }

    static void access$1800(com.android.server.display.DisplayPowerController, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void handleSettingsChange(boolean)>(z0);

        return;
    }

    static com.android.server.display.DisplayPowerController$DisplayControllerHandler access$1900(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        return $r1;
    }

    static android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks access$400(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        return $r1;
    }

    static void access$500(com.android.server.display.DisplayPowerController, java.io.PrintWriter)
    {
        com.android.server.display.DisplayPowerController r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void dumpLocal(java.io.PrintWriter)>(r1);

        return;
    }

    static void access$600(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void updatePowerState()>();

        return;
    }

    static void access$700(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void debounceProximitySensor()>();

        return;
    }

    static com.android.server.display.DisplayPowerController$ScreenOnUnblocker access$800(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r1;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        return $r1;
    }

    static void access$900(com.android.server.display.DisplayPowerController)
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @parameter0: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOn()>();

        return;
    }

    private void animateScreenBrightness(float, float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, f1;
        com.android.server.display.RampAnimator $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r3;
        android.content.Context $r4;
        com.android.internal.app.IBatteryStats $r5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z0 = virtualinvoke $r2.<com.android.server.display.RampAnimator: boolean animateTo(float,float)>(f0, f1);

        if $z0 == 0 goto label4;

        $i0 = (int) f0;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(131072L, "TargetScreenBrightness", $i0);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(f0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("debug.tracing.screen_brightness", $r3);

     label1:
        $r5 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r4 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $i1 = staticinvoke <com.android.internal.BrightnessSynchronizer: int brightnessFloatToInt(android.content.Context,float)>($r4, f0);

        interfaceinvoke $r5.<com.android.internal.app.IBatteryStats: void noteScreenBrightness(int)>($i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void animateScreenStateChange(int, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z8, $z9, $z11, $z12, $z13, $z14, $z15, $z17, $z18, $z19, $z22, $z23, z24, $z25, z26, $z27;
        com.android.server.display.DisplayPowerState $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r24, $r25, $r26, $r27, r30, r33;
        float $f0;
        byte $b1, b11, b12;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.animation.ObjectAnimator $r3, $r28, $r29, r32, $r35;
        com.android.server.display.RampAnimator $r6, $r11, $r16, $r20;
        android.content.Context r31, r34;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i10 := @parameter0: int;

        z0 := @parameter1: boolean;

        z24 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        if z24 == 0 goto label03;

        $r28 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $z22 = virtualinvoke $r28.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z22 != 0 goto label01;

        $r29 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $z23 = virtualinvoke $r29.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z23 == 0 goto label03;

     label01:
        if i10 == 2 goto label02;

        return;

     label02:
        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 0;

     label03:
        $z25 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayBlanksAfterDozeConfig>;

        if $z25 == 0 goto label09;

        $r27 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i9 = virtualinvoke $r27.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        $z17 = staticinvoke <android.view.Display: boolean isDozeState(int)>($i9);

        if $z17 == 0 goto label09;

        $z18 = staticinvoke <android.view.Display: boolean isDozeState(int)>(i10);

        if $z18 != 0 goto label09;

        r30 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        r31 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $z19 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig>;

        if $z19 == 0 goto label04;

        b11 = 2;

        goto label05;

     label04:
        b11 = 0;

     label05:
        virtualinvoke r30.<com.android.server.display.DisplayPowerState: boolean prepareColorFade(android.content.Context,int)>(r31, b11);

        r32 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        if r32 == null goto label06;

        virtualinvoke r32.<android.animation.ObjectAnimator: void end()>();

     label06:
        if i10 == 1 goto label07;

        z26 = 1;

        goto label08;

     label07:
        z26 = 0;

     label08:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int,boolean)>(1, z26);

     label09:
        $z27 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff>;

        if $z27 == 0 goto label10;

        if i10 == 1 goto label10;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(1);

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 0;

        $r26 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r26.<com.android.server.display.DisplayPowerState: void dismissColorFadeResources()>();

     label10:
        if i10 != 2 goto label12;

        $z15 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(2);

        if $z15 != 0 goto label11;

        return;

     label11:
        $r24 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r24.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r25 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r25.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label32;

     label12:
        if i10 != 5 goto label15;

        $r20 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z13 = virtualinvoke $r20.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z13 == 0 goto label13;

        $r23 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i8 = virtualinvoke $r23.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i8 != 2 goto label13;

        return;

     label13:
        $z14 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(5);

        if $z14 != 0 goto label14;

        return;

     label14:
        $r21 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r21.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r22 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r22.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label32;

     label15:
        if i10 != 3 goto label18;

        $r16 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z11 = virtualinvoke $r16.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z11 == 0 goto label16;

        $r19 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i7 = virtualinvoke $r19.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i7 != 2 goto label16;

        return;

     label16:
        $z12 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(3);

        if $z12 != 0 goto label17;

        return;

     label17:
        $r17 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r17.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r18 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r18.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label32;

     label18:
        if i10 != 4 goto label22;

        $r11 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z8 = virtualinvoke $r11.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z8 == 0 goto label19;

        $r15 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i6 = virtualinvoke $r15.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i6 == 4 goto label19;

        return;

     label19:
        $r12 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i5 = virtualinvoke $r12.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i5 == 4 goto label21;

        $z9 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(3);

        if $z9 != 0 goto label20;

        return;

     label20:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(4);

     label21:
        $r13 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r13.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r14 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r14.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label32;

     label22:
        if i10 != 6 goto label26;

        $r6 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z5 = virtualinvoke $r6.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z5 == 0 goto label23;

        $r10 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i4 = virtualinvoke $r10.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i4 == 6 goto label23;

        return;

     label23:
        $r7 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i3 = virtualinvoke $r7.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i3 == 6 goto label25;

        $z6 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(2);

        if $z6 != 0 goto label24;

        return;

     label24:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(6);

     label25:
        $r8 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r8.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(1.0F);

        $r9 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r9.<com.android.server.display.DisplayPowerState: void dismissColorFade()>();

        goto label32;

     label26:
        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 1;

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        if $z1 != 0 goto label27;

        $r5 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r5.<com.android.server.display.DisplayPowerState: void setColorFadeLevel(float)>(0.0F);

     label27:
        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f0 = virtualinvoke $r1.<com.android.server.display.DisplayPowerState: float getColorFadeLevel()>();

        $b1 = $f0 cmpl 0.0F;

        if $b1 != 0 goto label28;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int)>(1);

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff> = 0;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r4.<com.android.server.display.DisplayPowerState: void dismissColorFadeResources()>();

        goto label32;

     label28:
        if z0 == 0 goto label31;

        r33 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        r34 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig>;

        if $z2 == 0 goto label29;

        b12 = 2;

        goto label30;

     label29:
        b12 = 1;

     label30:
        $z3 = virtualinvoke r33.<com.android.server.display.DisplayPowerState: boolean prepareColorFade(android.content.Context,int)>(r34, b12);

        if $z3 == 0 goto label31;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i2 = virtualinvoke $r2.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i2 == 1 goto label31;

        $r3 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        virtualinvoke $r3.<android.animation.ObjectAnimator: void start()>();

        goto label32;

     label31:
        $r35 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        virtualinvoke $r35.<android.animation.ObjectAnimator: void end()>();

     label32:
        return;
    }

    private void blockScreenOff()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$ScreenOffUnblocker $r1, $r2;
        long $l0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker>;

        if $r1 != null goto label1;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(131072L, "Screen off blocked", 0);

        $r2 = new com.android.server.display.DisplayPowerController$ScreenOffUnblocker;

        specialinvoke $r2.<com.android.server.display.DisplayPowerController$ScreenOffUnblocker: void <init>(com.android.server.display.DisplayPowerController,com.android.server.display.DisplayPowerController$1)>(r0, null);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker> = $r2;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.display.DisplayPowerController: long mScreenOffBlockStartRealTime> = $l0;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayPowerController", "Blocking screen off");

     label1:
        return;
    }

    private void blockScreenOn()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r1, $r2;
        long $l0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r1 != null goto label1;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(131072L, "Screen on blocked", 0);

        $r2 = new com.android.server.display.DisplayPowerController$ScreenOnUnblocker;

        specialinvoke $r2.<com.android.server.display.DisplayPowerController$ScreenOnUnblocker: void <init>(com.android.server.display.DisplayPowerController,com.android.server.display.DisplayPowerController$1)>(r0, null);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker> = $r2;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.display.DisplayPowerController: long mScreenOnBlockStartRealTime> = $l0;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayPowerController", "Blocking screen on until initial contents have been drawn.");

     label1:
        return;
    }

    private static float clampAbsoluteBrightness(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f0, 0.0F, 1.0F);

        return $f1;
    }

    private static int clampAbsoluteBrightness(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.util.MathUtils: int constrain(int,int,int)>(i0, 0, 255);

        return $i1;
    }

    private static float clampAutoBrightnessAdjustment(float)
    {
        float f0, $f1;

        f0 := @parameter0: float;

        $f1 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f0, -1.0F, 1.0F);

        return $f1;
    }

    private float clampScreenBrightness(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, $f1, $f2, $f3, $f4;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        $f4 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        return $f4;

     label1:
        $f2 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        $f1 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMaximum>;

        $f3 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f0, $f2, $f1);

        return $f3;
    }

    private float clampScreenBrightnessForVr(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, $f1, $f2, $f3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        $f2 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrRangeMinimum>;

        $f1 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrRangeMaximum>;

        $f3 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>(f0, $f2, $f1);

        return $f3;
    }

    private void clearPendingProximityDebounceTime()
    {
        com.android.server.display.DisplayPowerController r0;
        long $l0;
        byte $b1;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $l0 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime> = -1L;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void releaseSuspendBlocker()>();

     label1:
        return;
    }

    private float convertToNits(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        com.android.server.display.BrightnessMappingStrategy r1;
        float $f0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessMappingStrategy mBrightnessMapper>;

        if r1 == null goto label1;

        $f0 = virtualinvoke r1.<com.android.server.display.BrightnessMappingStrategy: float convertToNits(int)>(i0);

        return $f0;

     label1:
        return -1.0F;
    }

    private void debounceProximitySensor()
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l2, $l4, $l6;
        android.os.Message r1;
        boolean $z0;
        int $i1, $i7;
        byte $b3, $b5;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z0 == 0 goto label2;

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        if $i1 == -1 goto label2;

        $l2 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label2;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b5 = $l4 cmp l0;

        if $b5 > 0 goto label1;

        $i7 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        r0.<com.android.server.display.DisplayPowerController: int mProximity> = $i7;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void updatePowerState()>();

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void clearPendingProximityDebounceTime()>();

        goto label2;

     label1:
        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int)>(2);

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $l6 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean sendMessageAtTime(android.os.Message,long)>(r1, $l6);

     label2:
        return;
    }

    private void dumpLocal(java.io.PrintWriter)
    {
        com.android.server.display.DisplayPowerController r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r7, $r11, $r15, $r20, $r24, $r28, $r33, $r38, $r43, $r47, $r51, $r55, $r59, $r63, $r68, $r72, $r76, $r80, $r84, $r88, $r92, $r96, $r100, $r104, $r109, $r113, $r117, $r122, $r127, $r131, $r142, $r147, $r152;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r4;
        java.lang.String $r6, $r10, $r14, $r19, $r23, $r27, $r30, $r32, $r35, $r37, $r40, $r42, $r46, $r50, $r54, $r58, $r62, $r67, $r71, $r75, $r79, $r83, $r87, $r91, $r95, $r99, $r103, $r106, $r108, $r112, $r116, $r121, $r126, $r130, $r133, $r135, $r146, $r151, $r156;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        android.hardware.Sensor $r17;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int $i0, $i1, $i3, $i6;
        long $l2, $l4, $l5;
        com.android.server.display.DisplayPowerController$BrightnessReason $r65;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r119;
        com.android.server.display.DisplayPowerController$ScreenOffUnblocker $r124;
        com.android.server.display.RampAnimator $r136, $r154;
        android.animation.ObjectAnimator $r137, $r138, $r144, $r149;
        com.android.server.display.BrightnessTracker $r139, $r141;
        com.android.server.display.whitebalance.DisplayWhiteBalanceSettings $r140;
        com.android.server.display.DisplayPowerState r191;
        com.android.server.display.AutomaticBrightnessController r192;
        com.android.server.display.whitebalance.DisplayWhiteBalanceController r193;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Display Power Controller Thread State:");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPowerRequest=");

        $r4 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUnfinishedBusiness=");

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWaitingForNegativeProximity=");

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximitySensor=");

        $r17 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximitySensorEnabled=");

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityThreshold=");

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mProximityThreshold>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximity=");

        $i0 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        $r30 = staticinvoke <com.android.server.display.DisplayPowerController: java.lang.String proximityToString(int)>($i0);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingProximity=");

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        $r35 = staticinvoke <com.android.server.display.DisplayPowerController: java.lang.String proximityToString(int)>($i1);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r37);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingProximityDebounceTime=");

        $l2 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $r40 = staticinvoke <android.util.TimeUtils: java.lang.String formatUptime(long)>($l2);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r42);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffBecauseOfProximity=");

        $z3 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r46);

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastUserSetScreenBrightnessFloat=");

        $f1 = r0.<com.android.server.display.DisplayPowerController: float mLastUserSetScreenBrightness>;

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r50);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingScreenBrightnessSettingFloat=");

        $f2 = r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting>;

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r54);

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTemporaryScreenBrightnessFloat=");

        $f3 = r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness>;

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r58);

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAutoBrightnessAdjustment=");

        $f4 = r0.<com.android.server.display.DisplayPowerController: float mAutoBrightnessAdjustment>;

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r62);

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBrightnessReason=");

        $r65 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReason>;

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mTemporaryAutoBrightnessAdjustment=");

        $f5 = r0.<com.android.server.display.DisplayPowerController: float mTemporaryAutoBrightnessAdjustment>;

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        $r71 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingAutoBrightnessAdjustment=");

        $f6 = r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment>;

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f6);

        $r75 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r75);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessForVrFloat=");

        $f7 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVr>;

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f7);

        $r79 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r79);

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedAutoBrightness=");

        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness>;

        virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r83 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r83);

        $r84 = new java.lang.StringBuilder;

        specialinvoke $r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedDimming=");

        $z5 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming>;

        virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r87 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r87);

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedLowPower=");

        $z6 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r91 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r91);

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedScreenBrightnessOverride=");

        $z7 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedScreenBrightnessOverride>;

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r95 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r95);

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAppliedTemporaryBrightness=");

        $z8 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryBrightness>;

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r99 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r99);

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDozing=");

        $z9 = r0.<com.android.server.display.DisplayPowerController: boolean mDozing>;

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r103 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r103);

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSkipRampState=");

        $i3 = r0.<com.android.server.display.DisplayPowerController: int mSkipRampState>;

        $r106 = staticinvoke <com.android.server.display.DisplayPowerController: java.lang.String skipRampStateToString(int)>($i3);

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r106);

        $r108 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r108);

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOnBlockStartRealTime=");

        $l4 = r0.<com.android.server.display.DisplayPowerController: long mScreenOnBlockStartRealTime>;

        virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r112 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r112);

        $r113 = new java.lang.StringBuilder;

        specialinvoke $r113.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenOffBlockStartRealTime=");

        $l5 = r0.<com.android.server.display.DisplayPowerController: long mScreenOffBlockStartRealTime>;

        virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r116 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r116);

        $r117 = new java.lang.StringBuilder;

        specialinvoke $r117.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingScreenOnUnblocker=");

        $r119 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r119);

        $r121 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r121);

        $r122 = new java.lang.StringBuilder;

        specialinvoke $r122.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingScreenOffUnblocker=");

        $r124 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker>;

        virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r124);

        $r126 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r126);

        $r127 = new java.lang.StringBuilder;

        specialinvoke $r127.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingScreenOff=");

        $z10 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff>;

        virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r130 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r130);

        $r131 = new java.lang.StringBuilder;

        specialinvoke $r131.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mReportedToPolicy=");

        $i6 = r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy>;

        $r133 = staticinvoke <com.android.server.display.DisplayPowerController: java.lang.String reportedToPolicyToString(int)>($i6);

        virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r133);

        $r135 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r135);

        $r136 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        if $r136 == null goto label1;

        $r152 = new java.lang.StringBuilder;

        specialinvoke $r152.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessRampAnimator.isAnimating()=");

        $r154 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z13 = virtualinvoke $r154.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r156 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r156);

     label1:
        $r137 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        if $r137 == null goto label2;

        $r147 = new java.lang.StringBuilder;

        specialinvoke $r147.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeOnAnimator.isStarted()=");

        $r149 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $z12 = virtualinvoke $r149.<android.animation.ObjectAnimator: boolean isStarted()>();

        virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r151 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r151);

     label2:
        $r138 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        if $r138 == null goto label3;

        $r142 = new java.lang.StringBuilder;

        specialinvoke $r142.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeOffAnimator.isStarted()=");

        $r144 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $z11 = virtualinvoke $r144.<android.animation.ObjectAnimator: boolean isStarted()>();

        virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r146 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r146);

     label3:
        r191 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        if r191 == null goto label4;

        virtualinvoke r191.<com.android.server.display.DisplayPowerState: void dump(java.io.PrintWriter)>(r1);

     label4:
        r192 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if r192 == null goto label5;

        virtualinvoke r192.<com.android.server.display.AutomaticBrightnessController: void dump(java.io.PrintWriter)>(r1);

     label5:
        $r139 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        if $r139 == null goto label6;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r141 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        virtualinvoke $r141.<com.android.server.display.BrightnessTracker: void dump(java.io.PrintWriter)>(r1);

     label6:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        r193 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        if r193 == null goto label7;

        virtualinvoke r193.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void dump(java.io.PrintWriter)>(r1);

        $r140 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceSettings mDisplayWhiteBalanceSettings>;

        virtualinvoke $r140.<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: void dump(java.io.PrintWriter)>(r1);

     label7:
        return;
    }

    private android.hardware.Sensor findDisplayLightSensor(java.lang.String)
    {
        com.android.server.display.DisplayPowerController r0;
        java.lang.String r1, $r8;
        java.util.List r2;
        android.hardware.Sensor r3, $r5;
        boolean $z0, $z1;
        android.hardware.SensorManager $r4, $r6;
        int $i0, i1;
        java.lang.Object $r7;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label3;

        $r6 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        r2 = virtualinvoke $r6.<android.hardware.SensorManager: java.util.List getSensorList(int)>(-1);

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (android.hardware.Sensor) $r7;

        $r8 = virtualinvoke r3.<android.hardware.Sensor: java.lang.String getStringType()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r5 = virtualinvoke $r4.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(5);

        return $r5;
    }

    private float getAutoBrightnessAdjustmentSetting()
    {
        com.android.server.display.DisplayPowerController r0;
        android.content.ContentResolver r1;
        float f0, f1;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r2 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        f1 = 0.0F;

        f0 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>(r1, "screen_auto_brightness_adj", 0.0F, -2);

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        f1 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAutoBrightnessAdjustment(float)>(f0);

     label2:
        return f1;
    }

    private float getScreenBrightnessForVrSetting()
    {
        com.android.server.display.DisplayPowerController r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrDefault>;

        $f1 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r2, "screen_brightness_for_vr_float", $f0, -2);

        $f2 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float clampScreenBrightnessForVr(float)>($f1);

        return $f2;
    }

    private float getScreenBrightnessSetting()
    {
        com.android.server.display.DisplayPowerController r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDefault>;

        $f1 = staticinvoke <android.provider.Settings$System: float getFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r2, "screen_brightness_float", $f0, -2);

        $f2 = staticinvoke <com.android.server.display.DisplayPowerController: float clampAbsoluteBrightness(float)>($f1);

        return $f2;
    }

    private void handleProximitySensorEvent(long, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l3, $l4;
        boolean z0, $z1;
        int $i1, $i2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z1 == 0 goto label5;

        $i1 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        if $i1 != 0 goto label1;

        if z0 != 0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.display.DisplayPowerController: int mPendingProximity>;

        if $i2 != 1 goto label2;

        if z0 == 0 goto label2;

        return;

     label2:
        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(2);

        if z0 == 0 goto label3;

        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = 1;

        $l4 = 0L + l0;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setPendingProximityDebounceTime(long)>($l4);

        goto label4;

     label3:
        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = 0;

        $l3 = 250L + l0;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setPendingProximityDebounceTime(long)>($l3);

     label4:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void debounceProximitySensor()>();

     label5:
        return;
    }

    private void handleSettingsChange(boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0;
        float f0, $f1, $f2;
        com.android.server.display.AutomaticBrightnessController r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z0 := @parameter0: boolean;

        f0 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float getScreenBrightnessSetting()>();

        r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting> = f0;

        if z0 == 0 goto label1;

        r0.<com.android.server.display.DisplayPowerController: float mCurrentScreenBrightnessSetting> = f0;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.display.AutomaticBrightnessController: void resetShortTermModel()>();

     label1:
        $f1 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float getAutoBrightnessAdjustmentSetting()>();

        r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment> = $f1;

        $f2 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float getScreenBrightnessForVrSetting()>();

        r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVr> = $f2;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    private void initialize()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.DisplayBlanker r1;
        float f0, $f1, $f2;
        boolean $z0, $z1;
        com.android.server.display.DisplayPowerState $r2, $r5, $r7, $r9, $r12, $r34;
        com.android.server.display.RampAnimator $r3;
        android.util.FloatProperty $r4, $r28, $r33;
        com.android.server.display.RampAnimator$Listener $r6;
        com.android.internal.app.IBatteryStats $r8, $r10;
        int $i0, $i1, $i2;
        android.content.Context $r11, $r13, $r14, $r18, $r22;
        byte $b3;
        android.content.ContentResolver $r15, $r19, $r23;
        android.net.Uri $r16, $r20, $r24;
        com.android.server.display.DisplayPowerController$SettingsObserver $r17, $r21, $r25;
        com.android.server.display.BrightnessTracker $r26;
        float[] $r27, $r32;
        android.animation.Animator$AnimatorListener $r30, $r36;
        android.animation.ObjectAnimator $r31, $r37, r42, r43;
        com.android.server.display.ColorFade $r38, r40;
        android.os.RemoteException $r39;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayBlanker mBlanker>;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        if $z0 == 0 goto label1;

        $r38 = new com.android.server.display.ColorFade;

        specialinvoke $r38.<com.android.server.display.ColorFade: void <init>(int)>(0);

        r40 = $r38;

        goto label2;

     label1:
        r40 = null;

     label2:
        $r2 = new com.android.server.display.DisplayPowerState;

        specialinvoke $r2.<com.android.server.display.DisplayPowerState: void <init>(com.android.server.display.DisplayBlanker,com.android.server.display.ColorFade)>(r1, r40);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState> = $r2;

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        if $z1 == 0 goto label3;

        $r28 = <com.android.server.display.DisplayPowerState: android.util.FloatProperty COLOR_FADE_LEVEL>;

        $r27 = newarray (float)[2];

        $r27[0] = 0.0F;

        $r27[1] = 1.0F;

        r42 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r2, $r28, $r27);

        r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator> = r42;

        virtualinvoke r42.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(250L);

        $r31 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $r30 = r0.<com.android.server.display.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener>;

        virtualinvoke $r31.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r30);

        $r34 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r33 = <com.android.server.display.DisplayPowerState: android.util.FloatProperty COLOR_FADE_LEVEL>;

        $r32 = newarray (float)[2];

        $r32[0] = 1.0F;

        $r32[1] = 0.0F;

        r43 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r34, $r33, $r32);

        r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator> = r43;

        virtualinvoke r43.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(400L);

        $r37 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $r36 = r0.<com.android.server.display.DisplayPowerController: android.animation.Animator$AnimatorListener mAnimatorListener>;

        virtualinvoke $r37.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r36);

     label3:
        $r3 = new com.android.server.display.RampAnimator;

        $r5 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r4 = <com.android.server.display.DisplayPowerState: android.util.FloatProperty SCREEN_BRIGHTNESS_FLOAT>;

        specialinvoke $r3.<com.android.server.display.RampAnimator: void <init>(java.lang.Object,android.util.FloatProperty)>($r5, $r4);

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator> = $r3;

        $r6 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator$Listener mRampAnimatorListener>;

        virtualinvoke $r3.<com.android.server.display.RampAnimator: void setListener(com.android.server.display.RampAnimator$Listener)>($r6);

     label4:
        $r8 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r7 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i0 = virtualinvoke $r7.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        interfaceinvoke $r8.<com.android.internal.app.IBatteryStats: void noteScreenState(int)>($i0);

        $r10 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r11 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r9 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f1 = virtualinvoke $r9.<com.android.server.display.DisplayPowerState: float getScreenBrightness()>();

        $i1 = staticinvoke <com.android.internal.BrightnessSynchronizer: int brightnessFloatToInt(android.content.Context,float)>($r11, $f1);

        interfaceinvoke $r10.<com.android.internal.app.IBatteryStats: void noteScreenBrightness(int)>($i1);

     label5:
        goto label7;

     label6:
        $r39 := @caughtexception;

     label7:
        $r13 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r12 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f2 = virtualinvoke $r12.<com.android.server.display.DisplayPowerState: float getScreenBrightness()>();

        $i2 = staticinvoke <com.android.internal.BrightnessSynchronizer: int brightnessFloatToInt(android.content.Context,float)>($r13, $f2);

        f0 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float convertToNits(int)>($i2);

        $b3 = f0 cmpl 0.0F;

        if $b3 < 0 goto label8;

        $r26 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        virtualinvoke $r26.<com.android.server.display.BrightnessTracker: void start(float)>(f0);

     label8:
        $r14 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness_float");

        $r17 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$SettingsObserver mSettingsObserver>;

        virtualinvoke $r15.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r16, 0, $r17, -1);

        $r18 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r20 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_brightness_for_vr_float");

        $r21 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$SettingsObserver mSettingsObserver>;

        virtualinvoke $r19.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r20, 0, $r21, -1);

        $r22 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r24 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("screen_auto_brightness_adj");

        $r25 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$SettingsObserver mSettingsObserver>;

        virtualinvoke $r23.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r24, 0, $r25, -1);

        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private boolean isValidBrightnessValue(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, $f1, $f2;
        byte $b0, $b1;
        boolean z0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        $f1 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        $b0 = f0 cmpl $f1;

        if $b0 < 0 goto label1;

        $f2 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMaximum>;

        $b1 = f0 cmpg $f2;

        if $b1 > 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void logDisplayPolicyChanged(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        android.metrics.LogMaker $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        $r2 = new android.metrics.LogMaker;

        specialinvoke $r2.<android.metrics.LogMaker: void <init>(int)>(1696);

        virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setType(int)>(6);

        virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>(i0);

        staticinvoke <com.android.internal.logging.MetricsLogger: void action(android.metrics.LogMaker)>($r2);

        return;
    }

    private void notifyBrightnessChanged(int, boolean, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        boolean z0, z1, $z2, $z3, $z4;
        float f0, f1;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r1, $r3, $r6;
        byte $b1;
        com.android.server.display.AutomaticBrightnessController $r2, $r4;
        com.android.server.display.BrightnessTracker $r5;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        f0 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float convertToNits(int)>(i0);

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z2 = $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        if $z2 == 0 goto label3;

        $b1 = f0 cmpl 0.0F;

        if $b1 < 0 goto label3;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z3 = $r3.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        if $z3 == 0 goto label1;

        $r6 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        f1 = $r6.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor>;

        goto label2;

     label1:
        f1 = 1.0F;

     label2:
        $r5 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        $z4 = virtualinvoke $r4.<com.android.server.display.AutomaticBrightnessController: boolean isDefaultConfig()>();

        virtualinvoke $r5.<com.android.server.display.BrightnessTracker: void notifyBrightnessChanged(float,boolean,float,boolean,boolean)>(f0, z0, f1, z1, $z4);

     label3:
        return;
    }

    private static java.lang.String proximityToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == -1 goto label3;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "Positive";

     label2:
        return "Negative";

     label3:
        return "Unknown";
    }

    private void putAutoBrightnessAdjustmentSetting(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        r0.<com.android.server.display.DisplayPowerController: float mAutoBrightnessAdjustment> = f0;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r2, "screen_auto_brightness_adj", f0, -2);

        return;
    }

    private void putScreenBrightnessSetting(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        r0.<com.android.server.display.DisplayPowerController: float mCurrentScreenBrightnessSetting> = f0;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$System: boolean putFloatForUser(android.content.ContentResolver,java.lang.String,float,int)>($r2, "screen_brightness_float", f0, -2);

        return;
    }

    private static java.lang.String reportedToPolicyToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "REPORTED_TO_POLICY_SCREEN_ON";

     label2:
        return "REPORTED_TO_POLICY_SCREEN_TURNING_ON";

     label3:
        return "REPORTED_TO_POLICY_SCREEN_OFF";
    }

    private void sendOnProximityNegativeWithWakelock()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;
        java.lang.Runnable $r2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityNegativeRunnable>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendOnProximityPositiveWithWakelock()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;
        java.lang.Runnable $r2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnProximityPositiveRunnable>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendOnStateChangedWithWakelock()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;
        java.lang.Runnable $r2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mOnStateChangedRunnable>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendUpdatePowerState()
    {
        com.android.server.display.DisplayPowerController r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerStateLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void sendUpdatePowerStateLocked()
    {
        com.android.server.display.DisplayPowerController r0;
        android.os.Message r1;
        boolean $z0;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r2, $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked> = 1;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        r1 = virtualinvoke $r2.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int)>(1);

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r3.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void setPendingProximityDebounceTime(long)
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, $l1;
        byte $b2;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        l0 := @parameter0: long;

        $l1 = r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime>;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label1;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r1.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

     label1:
        r0.<com.android.server.display.DisplayPowerController: long mPendingProximityDebounceTime> = l0;

        return;
    }

    private void setProximitySensorEnabled(boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0, $z1, $z2;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1, $r4;
        android.hardware.SensorEventListener $r2, $r6;
        android.hardware.SensorManager $r3, $r7;
        android.hardware.Sensor $r5;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z2 != 0 goto label2;

        r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled> = 1;

        $r7 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r6 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener>;

        $r5 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r7.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r6, $r5, 3, $r4);

        goto label2;

     label1:
        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled>;

        if $z1 == 0 goto label2;

        r0.<com.android.server.display.DisplayPowerController: boolean mProximitySensorEnabled> = 0;

        r0.<com.android.server.display.DisplayPowerController: int mProximity> = -1;

        r0.<com.android.server.display.DisplayPowerController: int mPendingProximity> = -1;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        virtualinvoke $r1.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: void removeMessages(int)>(2);

        $r3 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorManager mSensorManager>;

        $r2 = r0.<com.android.server.display.DisplayPowerController: android.hardware.SensorEventListener mProximitySensorListener>;

        virtualinvoke $r3.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r2);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void clearPendingProximityDebounceTime()>();

     label2:
        return;
    }

    private void setReportedScreenState(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(131072L, "ReportedScreenStateToPolicy", i0);

        r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy> = i0;

        return;
    }

    private boolean setScreenState(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean setScreenState(int,boolean)>(i0, 0);

        return $z0;
    }

    private boolean setScreenState(int, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0, $i1, $i2, $i4, $i5, $i6;
        com.android.server.display.DisplayPowerState $r2, $r3, $r9;
        float $f0;
        byte $b3;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r4, $r15;
        com.android.server.policy.WindowManagerPolicy $r5, $r6, $r7, $r13;
        boolean $z1, $z2, z3, z4, z5;
        java.lang.String $r8;
        com.android.internal.app.IBatteryStats $r10;
        com.android.server.display.DisplayPowerController$ScreenOffUnblocker $r11, $r12;
        android.os.RemoteException $r14;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        z3 := @parameter1: boolean;

        if i0 != 1 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $i1 = virtualinvoke $r2.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if $i1 == i0 goto label08;

        if z4 == 0 goto label04;

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z2 != 0 goto label04;

        $i6 = r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy>;

        if $i6 != 2 goto label03;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setReportedScreenState(int)>(3);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void blockScreenOff()>();

        $r13 = r0.<com.android.server.display.DisplayPowerController: com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy>;

        $r12 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker>;

        interfaceinvoke $r13.<com.android.server.policy.WindowManagerPolicy: void screenTurningOff(com.android.server.policy.WindowManagerPolicy$ScreenOffListener)>($r12);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOff()>();

        goto label04;

     label03:
        $r11 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker>;

        if $r11 == null goto label04;

        return 0;

     label04:
        if z3 != 0 goto label08;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(131072L, "ScreenState", i0);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("debug.tracing.screen_state", $r8);

        $r9 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        virtualinvoke $r9.<com.android.server.display.DisplayPowerState: void setScreenState(int)>(i0);

     label05:
        $r10 = r0.<com.android.server.display.DisplayPowerController: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r10.<com.android.internal.app.IBatteryStats: void noteScreenState(int)>(i0);

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

     label08:
        if z4 == 0 goto label09;

        $i5 = r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy>;

        if $i5 == 0 goto label09;

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z1 != 0 goto label09;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setReportedScreenState(int)>(0);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOn()>();

        $r7 = r0.<com.android.server.display.DisplayPowerController: com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy>;

        interfaceinvoke $r7.<com.android.server.policy.WindowManagerPolicy: void screenTurnedOff()>();

        goto label10;

     label09:
        if z4 != 0 goto label10;

        $i4 = r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy>;

        if $i4 != 3 goto label10;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOff()>();

        $r6 = r0.<com.android.server.display.DisplayPowerController: com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy>;

        interfaceinvoke $r6.<com.android.server.policy.WindowManagerPolicy: void screenTurnedOff()>();

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setReportedScreenState(int)>(0);

     label10:
        if z4 != 0 goto label13;

        $i2 = r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy>;

        if $i2 != 0 goto label13;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setReportedScreenState(int)>(1);

        $r3 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f0 = virtualinvoke $r3.<com.android.server.display.DisplayPowerState: float getColorFadeLevel()>();

        $b3 = $f0 cmpl 0.0F;

        if $b3 != 0 goto label11;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void blockScreenOn()>();

        goto label12;

     label11:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void unblockScreenOn()>();

     label12:
        $r5 = r0.<com.android.server.display.DisplayPowerController: com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy>;

        $r4 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        interfaceinvoke $r5.<com.android.server.policy.WindowManagerPolicy: void screenTurningOn(com.android.server.policy.WindowManagerPolicy$ScreenOnListener)>($r4);

     label13:
        $r15 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r15 != null goto label14;

        z5 = 1;

        goto label15;

     label14:
        z5 = 0;

     label15:
        return z5;

        catch android.os.RemoteException from label05 to label06 with label07;
    }

    private static java.lang.String skipRampStateToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "RAMP_STATE_SKIP_AUTOBRIGHT";

     label2:
        return "RAMP_STATE_SKIP_INITIAL";

     label3:
        return "RAMP_STATE_SKIP_NONE";
    }

    private void unblockScreenOff()
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, l1, $l2;
        com.android.server.display.DisplayPowerController$ScreenOffUnblocker $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker>;

        if $r2 == null goto label1;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOffUnblocker mPendingScreenOffUnblocker> = null;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l1 = r0.<com.android.server.display.DisplayPowerController: long mScreenOffBlockStartRealTime>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unblocked screen off after ");

        $l2 = l0 - l1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayPowerController", $r7);

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(131072L, "Screen off blocked", 0);

     label1:
        return;
    }

    private void unblockScreenOn()
    {
        com.android.server.display.DisplayPowerController r0;
        long l0, l1, $l2;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r2 == null goto label1;

        r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker> = null;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l1 = r0.<com.android.server.display.DisplayPowerController: long mScreenOnBlockStartRealTime>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unblocked screen on after ");

        $l2 = l0 - l1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DisplayPowerController", $r7);

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(131072L, "Screen on blocked", 0);

     label1:
        return;
    }

    private boolean updateAutoBrightnessAdjustment()
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, f1, $f2;
        boolean $z0;
        byte $b0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $f2 = r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment>;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        f0 = r0.<com.android.server.display.DisplayPowerController: float mAutoBrightnessAdjustment>;

        f1 = r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment>;

        $b0 = f0 cmpl f1;

        if $b0 != 0 goto label2;

        r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment> = #NaNF;

        return 0;

     label2:
        r0.<com.android.server.display.DisplayPowerController: float mAutoBrightnessAdjustment> = f1;

        r0.<com.android.server.display.DisplayPowerController: float mPendingAutoBrightnessAdjustment> = #NaNF;

        return 1;
    }

    private void updatePowerState()
    {
        com.android.server.display.DisplayPowerController r0;
        int i0, $i1, $i3, $i4, $i5, $i7, $i8, $i9, $i13, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, $i27, $i29;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z19, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, z46, $z47, z48, z50, $z51, $z52, $z53, z54, $z55, z56, $z57, $z58, z59, z60, z64, z65, $z66, $z67, $z68, z69, z70, $z71, z72, $z73, z74, $z75, z76, z77, $z78, z79, z80, z81;
        com.android.server.display.DisplayPowerController$BrightnessReason $r1, $r14, $r18, $r22, $r23, $r40, $r41, $r42, $r43, $r50, $r51, $r55, $r56, $r57, $r61, $r76, $r80, $r81;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r2, $r3, $r4, $r5, $r8, $r9, $r24, $r25, $r39, $r47, $r53, $r54, $r58, $r59, $r60, $r62, $r63, $r64, $r65, $r66, r71, $r73, $r77;
        com.android.server.display.DisplayPowerState $r6, $r7, $r31, $r38;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, f16, $f17, f18, f19, f20, f21, f22, f23, f24;
        java.lang.StringBuilder $r10;
        java.lang.String $r15, $r21;
        android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks $r26, $r27;
        com.android.server.policy.WindowManagerPolicy $r28;
        com.android.server.display.RampAnimator $r29;
        java.lang.Runnable $r30;
        android.animation.ObjectAnimator $r32, $r33;
        com.android.server.display.whitebalance.DisplayWhiteBalanceController $r34, $r36, $r37, $r83;
        com.android.server.display.whitebalance.DisplayWhiteBalanceSettings $r35;
        byte $b6, $b10, $b11, $b12, $b14, b24, $b25, b26, $b28;
        com.android.server.display.AutomaticBrightnessController $r44, $r45, $r49, $r52, r74, r78;
        android.hardware.display.BrightnessConfiguration $r46, $r48;
        java.lang.Throwable $r67, $r68, $r69, r87;
        java.lang.Object r70, r85;
        android.hardware.Sensor $r72;
        com.android.server.display.BrightnessTracker r75;
        android.content.Context $r79;
        com.android.server.display.DisplayPowerController$ScreenOnUnblocker $r84;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z46 = 0;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r1.<com.android.server.display.DisplayPowerController$BrightnessReason: void set(com.android.server.display.DisplayPowerController$BrightnessReason)>(null);

        r70 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r70;

     label001:
        r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked> = 0;

        $r2 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        if $r2 != null goto label003;

        exitmonitor r70;

     label002:
        return;

     label003:
        $r3 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        if $r3 != null goto label005;

        r71 = new android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        $r66 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        specialinvoke r71.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void <init>(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>($r66);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest> = r71;

        $z45 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = $z45;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked> = 0;

     label004:
        z46 = 1;

        i19 = 3;

        goto label008;

     label005:
        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z2 == 0 goto label007;

        $r63 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        i19 = $r63.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        $r65 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $r64 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke $r65.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void copyFrom(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>($r64);

        $z43 = r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        $z42 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        $z44 = $z43 | $z42;

        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = $z44;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked> = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked> = 0;

     label006:
        goto label008;

     label007:
        $r4 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        i19 = $r4.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

     label008:
        $z47 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked>;

        if $z47 != 0 goto label010;

     label009:
        z48 = 1;

        goto label011;

     label010:
        z48 = 0;

     label011:
        exitmonitor r70;

     label012:
        if z46 == 0 goto label013;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void initialize()>();

     label013:
        f16 = #NaNF;

        $r5 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        i20 = $r5.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if i20 == 0 goto label018;

        if i20 == 1 goto label015;

        if i20 == 4 goto label014;

        i21 = 2;

        z50 = 0;

        goto label019;

     label014:
        i21 = 5;

        z50 = 0;

        goto label019;

     label015:
        $r59 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i18 = $r59.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        if $i18 == 0 goto label016;

        $r62 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        i22 = $r62.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int dozeScreenState>;

        goto label017;

     label016:
        i22 = 3;

     label017:
        z50 = 0;

        i21 = i22;

        $z41 = r0.<com.android.server.display.DisplayPowerController: boolean mAllowAutoBrightnessWhileDozingConfig>;

        if $z41 != 0 goto label019;

        $r60 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        f16 = $r60.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float dozeScreenBrightness>;

        $r61 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r61.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(2);

        z50 = 0;

        i21 = i22;

        goto label019;

     label018:
        i21 = 1;

        z50 = 1;

     label019:
        $r72 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r72 == null goto label023;

        $r58 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z37 = $r58.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useProximitySensor>;

        if $z37 == 0 goto label020;

        if i21 == 1 goto label020;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setProximitySensorEnabled(boolean)>(1);

        $z40 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z40 != 0 goto label022;

        $i17 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        if $i17 != 1 goto label022;

        r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity> = 1;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendOnProximityPositiveWithWakelock()>();

        goto label022;

     label020:
        $z38 = r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity>;

        if $z38 == 0 goto label021;

        $z39 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z39 == 0 goto label021;

        $i16 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        if $i16 != 1 goto label021;

        if i21 == 1 goto label021;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setProximitySensorEnabled(boolean)>(1);

        goto label022;

     label021:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setProximitySensorEnabled(boolean)>(0);

        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = 0;

     label022:
        $z51 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z51 == 0 goto label024;

        $i15 = r0.<com.android.server.display.DisplayPowerController: int mProximity>;

        if $i15 == 1 goto label024;

        r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity> = 0;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendOnProximityNegativeWithWakelock()>();

        goto label024;

     label023:
        r0.<com.android.server.display.DisplayPowerController: boolean mWaitingForNegativeProximity> = 0;

     label024:
        $z52 = r0.<com.android.server.display.DisplayPowerController: boolean mScreenOffBecauseOfProximity>;

        if $z52 == 0 goto label025;

        i21 = 1;

     label025:
        $r6 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        i23 = virtualinvoke $r6.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void animateScreenStateChange(int,boolean)>(i21, z50);

        $r7 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        i0 = virtualinvoke $r7.<com.android.server.display.DisplayPowerState: int getScreenState()>();

        if i0 != 1 goto label026;

        f16 = -1.0F;

        $r57 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r57.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(5);

     label026:
        if i0 != 5 goto label027;

        f16 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVr>;

        $r56 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r56.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(6);

     label027:
        $z3 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f16);

        if $z3 == 0 goto label028;

        $r53 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $f15 = $r53.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride>;

        $z36 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean isValidBrightnessValue(float)>($f15);

        if $z36 == 0 goto label028;

        $r54 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        f16 = $r54.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenBrightnessOverride>;

        $r55 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r55.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(7);

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedScreenBrightnessOverride> = 1;

        goto label029;

     label028:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedScreenBrightnessOverride> = 0;

     label029:
        $z53 = r0.<com.android.server.display.DisplayPowerController: boolean mAllowAutoBrightnessWhileDozingConfig>;

        if $z53 == 0 goto label030;

        $z35 = staticinvoke <android.view.Display: boolean isDozeState(int)>(i0);

        if $z35 == 0 goto label030;

        z54 = 1;

        goto label031;

     label030:
        z54 = 0;

     label031:
        $r73 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z55 = $r73.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean useAutoBrightness>;

        if $z55 == 0 goto label033;

        if i0 == 2 goto label032;

        if z54 == 0 goto label033;

     label032:
        $z34 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f16);

        if $z34 == 0 goto label033;

        $r52 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if $r52 == null goto label033;

        z56 = 1;

        goto label034;

     label033:
        z56 = 0;

     label034:
        z0 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean updateUserSetScreenBrightness()>();

        $f17 = r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness>;

        $z57 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean isValidBrightnessValue(float)>($f17);

        if $z57 == 0 goto label035;

        f16 = r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness>;

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryBrightness> = 1;

        $r51 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r51.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(8);

        goto label036;

     label035:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryBrightness> = 0;

     label036:
        z1 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean updateAutoBrightnessAdjustment()>();

        if z1 == 0 goto label037;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryAutoBrightnessAdjustment> = #NaNF;

     label037:
        $f0 = r0.<com.android.server.display.DisplayPowerController: float mTemporaryAutoBrightnessAdjustment>;

        $z4 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        if $z4 != 0 goto label038;

        f18 = r0.<com.android.server.display.DisplayPowerController: float mTemporaryAutoBrightnessAdjustment>;

        b24 = 1;

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryAutoBrightnessAdjustment> = 1;

        goto label039;

     label038:
        f18 = r0.<com.android.server.display.DisplayPowerController: float mAutoBrightnessAdjustment>;

        b24 = 2;

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryAutoBrightnessAdjustment> = 0;

     label039:
        $r8 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z5 = $r8.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean boostScreenBrightness>;

        if $z5 == 0 goto label040;

        $b14 = f16 cmpl -1.0F;

        if $b14 == 0 goto label040;

        f16 = 1.0F;

        $r50 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r50.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(9);

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedBrightnessBoost> = 1;

        goto label041;

     label040:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedBrightnessBoost> = 0;

     label041:
        $z58 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f16);

        if $z58 == 0 goto label043;

        if z1 != 0 goto label042;

        if z0 == 0 goto label043;

     label042:
        z59 = 1;

        goto label044;

     label043:
        z59 = 0;

     label044:
        z60 = 0;

        r74 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if r74 == null goto label045;

        z60 = virtualinvoke r74.<com.android.server.display.AutomaticBrightnessController: boolean hasUserDataPoints()>();

        $r49 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        $r48 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.BrightnessConfiguration mBrightnessConfiguration>;

        $f14 = r0.<com.android.server.display.DisplayPowerController: float mLastUserSetScreenBrightness>;

        $r47 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i13 = $r47.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        virtualinvoke $r49.<com.android.server.display.AutomaticBrightnessController: void configure(boolean,android.hardware.display.BrightnessConfiguration,float,boolean,float,boolean,int)>(z56, $r48, $f14, z0, f18, z1, $i13);

        goto label045;

     label045:
        r75 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        if r75 == null goto label046;

        $r46 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.BrightnessConfiguration mBrightnessConfiguration>;

        virtualinvoke r75.<com.android.server.display.BrightnessTracker: void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)>($r46);

     label046:
        $z6 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f16);

        if $z6 == 0 goto label054;

        f19 = f18;

        if z56 == 0 goto label047;

        $r44 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        f16 = virtualinvoke $r44.<com.android.server.display.AutomaticBrightnessController: float getAutomaticScreenBrightness()>();

        $r45 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        f19 = virtualinvoke $r45.<com.android.server.display.AutomaticBrightnessController: float getAutomaticScreenBrightnessAdjustment()>();

     label047:
        $z32 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean isValidBrightnessValue(float)>(f16);

        if $z32 != 0 goto label049;

        $b12 = f16 cmpl -1.0F;

        if $b12 != 0 goto label048;

        goto label049;

     label048:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness> = 0;

        z64 = 0;

        goto label051;

     label049:
        f16 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float clampScreenBrightness(float)>(f16);

        z64 = 0;

        $z33 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness>;

        if $z33 == 0 goto label050;

        z64 = 0;

        if z1 != 0 goto label050;

        z64 = 1;

     label050:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void putScreenBrightnessSetting(float)>(f16);

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness> = 1;

        $r76 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r76.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(4);

     label051:
        $b25 = f18 cmpl f19;

        if $b25 == 0 goto label052;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void putAutoBrightnessAdjustmentSetting(float)>(f19);

        b26 = b24;

        goto label053;

     label052:
        b26 = 0;

     label053:
        z65 = z64;

        goto label055;

     label054:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedAutoBrightness> = 0;

        b26 = 0;

        z65 = 0;

     label055:
        f20 = f16;

        $z7 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f16);

        if $z7 == 0 goto label056;

        f20 = f16;

        $z31 = staticinvoke <android.view.Display: boolean isDozeState(int)>(i0);

        if $z31 == 0 goto label056;

        f20 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDozeConfig>;

        $r43 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r43.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(3);

     label056:
        f21 = f20;

        $z66 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f20);

        if $z66 == 0 goto label057;

        $f13 = r0.<com.android.server.display.DisplayPowerController: float mCurrentScreenBrightnessSetting>;

        f21 = specialinvoke r0.<com.android.server.display.DisplayPowerController: float clampScreenBrightness(float)>($f13);

        $r42 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r42.<com.android.server.display.DisplayPowerController$BrightnessReason: void setReason(int)>(1);

     label057:
        $r9 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i1 = $r9.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if $i1 != 2 goto label060;

        f22 = f21;

        $f8 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        $b11 = f21 cmpl $f8;

        if $b11 <= 0 goto label058;

        $f10 = f21 - 0.04F;

        $f9 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDimConfig>;

        $f11 = staticinvoke <java.lang.Math: float min(float,float)>($f10, $f9);

        $f12 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        f22 = staticinvoke <java.lang.Math: float max(float,float)>($f11, $f12);

        $r41 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r41.<com.android.server.display.DisplayPowerController$BrightnessReason: void addModifier(int)>(1);

     label058:
        $z30 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming>;

        if $z30 != 0 goto label059;

        z65 = 0;

     label059:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming> = 1;

        goto label061;

     label060:
        f22 = f21;

        $z8 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming>;

        if $z8 == 0 goto label061;

        z65 = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedDimming> = 0;

        f22 = f21;

     label061:
        $r77 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $z67 = $r77.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean lowPowerMode>;

        if $z67 == 0 goto label064;

        $f3 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        $b10 = f22 cmpl $f3;

        if $b10 <= 0 goto label062;

        $r39 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $f4 = $r39.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: float screenLowPowerBrightnessFactor>;

        $f5 = staticinvoke <java.lang.Math: float min(float,float)>($f4, 1.0F);

        $f7 = f22 * $f5;

        $f6 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessRangeMinimum>;

        f22 = staticinvoke <java.lang.Math: float max(float,float)>($f7, $f6);

        $r40 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r40.<com.android.server.display.DisplayPowerController$BrightnessReason: void addModifier(int)>(2);

        goto label062;

     label062:
        $z29 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower>;

        if $z29 != 0 goto label063;

        z65 = 0;

        goto label063;

     label063:
        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower> = 1;

        goto label065;

     label064:
        $z9 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower>;

        if $z9 == 0 goto label065;

        z65 = 0;

        r0.<com.android.server.display.DisplayPowerController: boolean mAppliedLowPower> = 0;

        goto label065;

     label065:
        $z68 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingScreenOff>;

        if $z68 != 0 goto label093;

        $z21 = r0.<com.android.server.display.DisplayPowerController: boolean mSkipScreenOnBrightnessRamp>;

        if $z21 == 0 goto label071;

        if i0 != 2 goto label070;

        $i8 = r0.<com.android.server.display.DisplayPowerController: int mSkipRampState>;

        if $i8 != 0 goto label066;

        $z28 = r0.<com.android.server.display.DisplayPowerController: boolean mDozing>;

        if $z28 == 0 goto label066;

        r0.<com.android.server.display.DisplayPowerController: float mInitialAutoBrightness> = f22;

        r0.<com.android.server.display.DisplayPowerController: int mSkipRampState> = 1;

        goto label071;

     label066:
        $i9 = r0.<com.android.server.display.DisplayPowerController: int mSkipRampState>;

        if $i9 != 1 goto label068;

        $z26 = r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        if $z26 == 0 goto label068;

        $f2 = r0.<com.android.server.display.DisplayPowerController: float mInitialAutoBrightness>;

        $z27 = staticinvoke <com.android.internal.BrightnessSynchronizer: boolean floatEquals(float,float)>(f22, $f2);

        if $z27 != 0 goto label067;

        r0.<com.android.server.display.DisplayPowerController: int mSkipRampState> = 2;

        goto label071;

     label067:
        goto label068;

     label068:
        $i27 = r0.<com.android.server.display.DisplayPowerController: int mSkipRampState>;

        if $i27 != 2 goto label069;

        r0.<com.android.server.display.DisplayPowerController: int mSkipRampState> = 0;

        goto label071;

     label069:
        goto label071;

     label070:
        r0.<com.android.server.display.DisplayPowerController: int mSkipRampState> = 0;

     label071:
        if i0 == 5 goto label073;

        if i23 != 5 goto label072;

        goto label073;

     label072:
        z69 = 0;

        goto label074;

     label073:
        z69 = 1;

     label074:
        if i0 != 2 goto label075;

        $i7 = r0.<com.android.server.display.DisplayPowerController: int mSkipRampState>;

        if $i7 == 0 goto label075;

        z70 = 1;

        goto label076;

     label075:
        z70 = 0;

     label076:
        $z71 = staticinvoke <android.view.Display: boolean isDozeState(int)>(i0);

        if $z71 == 0 goto label077;

        $z25 = r0.<com.android.server.display.DisplayPowerController: boolean mBrightnessBucketsInDozeConfig>;

        if $z25 == 0 goto label077;

        z72 = 1;

        goto label078;

     label077:
        z72 = 0;

     label078:
        $z73 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        if $z73 == 0 goto label079;

        $r38 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $f1 = virtualinvoke $r38.<com.android.server.display.DisplayPowerState: float getColorFadeLevel()>();

        $b6 = $f1 cmpl 1.0F;

        if $b6 != 0 goto label079;

        z74 = 1;

        goto label080;

     label079:
        z74 = 0;

     label080:
        $z75 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryBrightness>;

        if $z75 != 0 goto label082;

        $z24 = r0.<com.android.server.display.DisplayPowerController: boolean mAppliedTemporaryAutoBrightnessAdjustment>;

        if $z24 == 0 goto label081;

        goto label082;

     label081:
        z76 = 0;

        goto label083;

     label082:
        z76 = 1;

     label083:
        $b28 = f22 cmpl -1.0F;

        if $b28 != 0 goto label084;

        f23 = 0.0F;

        goto label085;

     label084:
        f23 = f22;

     label085:
        $z22 = specialinvoke r0.<com.android.server.display.DisplayPowerController: boolean isValidBrightnessValue(float)>(f23);

        if $z22 == 0 goto label090;

        if z70 != 0 goto label089;

        if z72 != 0 goto label089;

        if z69 != 0 goto label089;

        if z74 == 0 goto label089;

        if z76 == 0 goto label086;

        goto label089;

     label086:
        if z65 == 0 goto label087;

        f24 = 0.2352941F;

        goto label088;

     label087:
        f24 = 0.7058823F;

     label088:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void animateScreenBrightness(float,float)>(f23, f24);

        goto label090;

     label089:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void animateScreenBrightness(float,float)>(f23, 0.0F);

        goto label090;

     label090:
        if z76 != 0 goto label093;

        z77 = z59;

        if z59 == 0 goto label092;

        r78 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if r78 == null goto label091;

        z77 = z59;

        $z23 = virtualinvoke r78.<com.android.server.display.AutomaticBrightnessController: boolean hasValidAmbientLux()>();

        if $z23 != 0 goto label092;

     label091:
        z77 = 0;

     label092:
        $r79 = r0.<com.android.server.display.DisplayPowerController: android.content.Context mContext>;

        $i29 = staticinvoke <com.android.internal.BrightnessSynchronizer: int brightnessFloatToInt(android.content.Context,float)>($r79, f22);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void notifyBrightnessChanged(int,boolean,boolean)>($i29, z77, z60);

        goto label093;

     label093:
        $r80 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        $r81 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReason>;

        $z78 = virtualinvoke $r80.<com.android.server.display.DisplayPowerController$BrightnessReason: boolean equals(java.lang.Object)>($r81);

        if $z78 == 0 goto label094;

        if b26 == 0 goto label095;

     label094:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Brightness [");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f22);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] reason changing to: \'");

        $r14 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        $r15 = virtualinvoke $r14.<com.android.server.display.DisplayPowerController$BrightnessReason: java.lang.String toString(int)>(b26);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', previous reason: \'");

        $r18 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReason>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r21 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("DisplayPowerController", $r21);

        $r23 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReason>;

        $r22 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$BrightnessReason mBrightnessReasonTemp>;

        virtualinvoke $r23.<com.android.server.display.DisplayPowerController$BrightnessReason: void set(com.android.server.display.DisplayPowerController$BrightnessReason)>($r22);

     label095:
        $r83 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        if $r83 == null goto label097;

        if i0 != 2 goto label096;

        $r35 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceSettings mDisplayWhiteBalanceSettings>;

        $z19 = virtualinvoke $r35.<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: boolean isEnabled()>();

        if $z19 == 0 goto label096;

        $r36 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        virtualinvoke $r36.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setEnabled(boolean)>(1);

        $r37 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        virtualinvoke $r37.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: void updateDisplayColorTemperature()>();

        goto label097;

     label096:
        $r34 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        virtualinvoke $r34.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setEnabled(boolean)>(0);

     label097:
        $r84 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$ScreenOnUnblocker mPendingScreenOnUnblocker>;

        if $r84 != null goto label099;

        $z14 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        if $z14 == 0 goto label098;

        $r32 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOnAnimator>;

        $z16 = virtualinvoke $r32.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z16 != 0 goto label099;

        $r33 = r0.<com.android.server.display.DisplayPowerController: android.animation.ObjectAnimator mColorFadeOffAnimator>;

        $z17 = virtualinvoke $r33.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z17 != 0 goto label099;

     label098:
        $r31 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerState mPowerState>;

        $r30 = r0.<com.android.server.display.DisplayPowerController: java.lang.Runnable mCleanListener>;

        $z15 = virtualinvoke $r31.<com.android.server.display.DisplayPowerState: boolean waitUntilClean(java.lang.Runnable)>($r30);

        if $z15 == 0 goto label099;

        z79 = 1;

        goto label100;

     label099:
        z79 = 0;

     label100:
        if z79 == 0 goto label101;

        $r29 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.RampAnimator mScreenBrightnessRampAnimator>;

        $z13 = virtualinvoke $r29.<com.android.server.display.RampAnimator: boolean isAnimating()>();

        if $z13 != 0 goto label101;

        z80 = 1;

        goto label102;

     label101:
        z80 = 0;

     label102:
        if z79 == 0 goto label103;

        if i0 == 1 goto label103;

        $i5 = r0.<com.android.server.display.DisplayPowerController: int mReportedScreenStateToPolicy>;

        if $i5 != 1 goto label103;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void setReportedScreenState(int)>(2);

        $r28 = r0.<com.android.server.display.DisplayPowerController: com.android.server.policy.WindowManagerPolicy mWindowManagerPolicy>;

        interfaceinvoke $r28.<com.android.server.policy.WindowManagerPolicy: void screenTurnedOn()>();

     label103:
        if z80 != 0 goto label104;

        $z12 = r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness>;

        if $z12 != 0 goto label104;

        $r27 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r27.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void acquireSuspendBlocker()>();

        r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness> = 1;

     label104:
        if z79 == 0 goto label112;

        if z48 == 0 goto label112;

        r85 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r85;

     label105:
        $z11 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z11 != 0 goto label107;

        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked> = 1;

     label106:
        goto label107;

     label107:
        exitmonitor r85;

     label108:
        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendOnStateChangedWithWakelock()>();

        goto label112;

     label109:
        $r69 := @caughtexception;

     label110:
        exitmonitor r85;

     label111:
        throw $r69;

     label112:
        z81 = 1;

        if z80 == 0 goto label113;

        $z10 = r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness>;

        if $z10 == 0 goto label113;

        r0.<com.android.server.display.DisplayPowerController: boolean mUnfinishedBusiness> = 0;

        $r26 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks mCallbacks>;

        interfaceinvoke $r26.<android.hardware.display.DisplayManagerInternal$DisplayPowerCallbacks: void releaseSuspendBlocker()>();

        goto label113;

     label113:
        if i0 == 2 goto label114;

        goto label115;

     label114:
        z81 = 0;

     label115:
        r0.<com.android.server.display.DisplayPowerController: boolean mDozing> = z81;

        $r24 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i3 = $r24.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        if i19 == $i3 goto label116;

        $r25 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPowerRequest>;

        $i4 = $r25.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: int policy>;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void logDisplayPolicyChanged(int)>($i4);

     label116:
        return;

     label117:
        $r68 := @caughtexception;

        r87 = $r68;

        goto label119;

     label118:
        $r67 := @caughtexception;

        r87 = $r67;

     label119:
        exitmonitor r70;

     label120:
        throw r87;

        catch java.lang.Throwable from label001 to label002 with label118;
        catch java.lang.Throwable from label003 to label004 with label118;
        catch java.lang.Throwable from label005 to label006 with label118;
        catch java.lang.Throwable from label007 to label008 with label118;
        catch java.lang.Throwable from label008 to label009 with label117;
        catch java.lang.Throwable from label011 to label012 with label117;
        catch java.lang.Throwable from label105 to label106 with label109;
        catch java.lang.Throwable from label107 to label108 with label109;
        catch java.lang.Throwable from label110 to label111 with label109;
        catch java.lang.Throwable from label119 to label120 with label118;
    }

    private boolean updateUserSetScreenBrightness()
    {
        com.android.server.display.DisplayPowerController r0;
        float f0, $f1, $f2;
        boolean $z0;
        byte $b0, $b1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $f1 = r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting>;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z0 != 0 goto label3;

        f0 = r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting>;

        $b0 = f0 cmpg 0.0F;

        if $b0 >= 0 goto label1;

        goto label3;

     label1:
        $f2 = r0.<com.android.server.display.DisplayPowerController: float mCurrentScreenBrightnessSetting>;

        $b1 = $f2 cmpl f0;

        if $b1 != 0 goto label2;

        r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting> = #NaNF;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness> = #NaNF;

        return 0;

     label2:
        r0.<com.android.server.display.DisplayPowerController: float mCurrentScreenBrightnessSetting> = f0;

        r0.<com.android.server.display.DisplayPowerController: float mLastUserSetScreenBrightness> = f0;

        r0.<com.android.server.display.DisplayPowerController: float mPendingScreenBrightnessSetting> = #NaNF;

        r0.<com.android.server.display.DisplayPowerController: float mTemporaryScreenBrightness> = #NaNF;

        return 1;

     label3:
        return 0;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.String $r3, $r7, $r10, $r13, $r16, $r20, $r24, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60, $r64, $r68;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest $r5;
        java.lang.StringBuilder $r17, $r21, $r25, $r29, $r33, $r37, $r41, $r45, $r49, $r53, $r57, $r61, $r65, r74, r75, r76, r77, r78;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        com.android.server.display.DisplayPowerController$7 $r69;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r70;
        java.lang.Throwable $r71;
        java.io.PrintWriter r72;
        java.lang.Object r73;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r72 := @parameter0: java.io.PrintWriter;

        r73 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r73;

     label1:
        virtualinvoke r72.<java.io.PrintWriter: void println()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>("Display Power Controller Locked State:");

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayReadyLocked=");

        $z0 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        r75 = new java.lang.StringBuilder;

        specialinvoke r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingRequestLocked=");

        $r5 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingRequestChangedLocked=");

        $z1 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r10 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingWaitForNegativeProximityLocked=");

        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r13 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        r78 = new java.lang.StringBuilder;

        specialinvoke r78.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingUpdatePowerStateLocked=");

        $z3 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingUpdatePowerStateLocked>;

        virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r16 = virtualinvoke r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r16);

        exitmonitor r73;

     label2:
        virtualinvoke r72.<java.io.PrintWriter: void println()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>("Display Power Controller Configuration:");

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDozeConfig=");

        $f0 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDozeConfig>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDimConfig=");

        $f1 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDimConfig>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessDefault=");

        $f2 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessDefault>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessForVrRangeMinimum=");

        $f3 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrRangeMinimum>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f3);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessForVrRangeMaximum=");

        $f4 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrRangeMaximum>;

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f4);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mScreenBrightnessForVrDefault=");

        $f5 = r0.<com.android.server.display.DisplayPowerController: float mScreenBrightnessForVrDefault>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f5);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mUseSoftwareAutoBrightnessConfig=");

        $z4 = r0.<com.android.server.display.DisplayPowerController: boolean mUseSoftwareAutoBrightnessConfig>;

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAllowAutoBrightnessWhileDozingConfig=");

        $z5 = r0.<com.android.server.display.DisplayPowerController: boolean mAllowAutoBrightnessWhileDozingConfig>;

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSkipScreenOnBrightnessRamp=");

        $z6 = r0.<com.android.server.display.DisplayPowerController: boolean mSkipScreenOnBrightnessRamp>;

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeFadesConfig=");

        $z7 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeFadesConfig>;

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mColorFadeEnabled=");

        $z8 = r0.<com.android.server.display.DisplayPowerController: boolean mColorFadeEnabled>;

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r60);

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayBlanksAfterDozeConfig=");

        $z9 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayBlanksAfterDozeConfig>;

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r64);

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mBrightnessBucketsInDozeConfig=");

        $z10 = r0.<com.android.server.display.DisplayPowerController: boolean mBrightnessBucketsInDozeConfig>;

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r72.<java.io.PrintWriter: void println(java.lang.String)>($r68);

        $r70 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r69 = new com.android.server.display.DisplayPowerController$7;

        specialinvoke $r69.<com.android.server.display.DisplayPowerController$7: void <init>(com.android.server.display.DisplayPowerController,java.io.PrintWriter)>(r0, r72);

        virtualinvoke $r70.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: boolean runWithScissors(java.lang.Runnable,long)>($r69, 1000L);

        return;

     label3:
        $r71 := @caughtexception;

     label4:
        exitmonitor r73;

     label5:
        throw $r71;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.ParceledListSlice getAmbientBrightnessStats(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        com.android.server.display.BrightnessTracker $r1;
        android.content.pm.ParceledListSlice $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        $r2 = virtualinvoke $r1.<com.android.server.display.BrightnessTracker: android.content.pm.ParceledListSlice getAmbientBrightnessStats(int)>(i0);

        return $r2;
    }

    public android.content.pm.ParceledListSlice getBrightnessEvents(int, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        boolean z0;
        com.android.server.display.BrightnessTracker $r1;
        android.content.pm.ParceledListSlice $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        $r2 = virtualinvoke $r1.<com.android.server.display.BrightnessTracker: android.content.pm.ParceledListSlice getEvents(int,boolean)>(i0, z0);

        return $r2;
    }

    public android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.AutomaticBrightnessController r1;
        android.hardware.display.BrightnessConfiguration $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.display.AutomaticBrightnessController: android.hardware.display.BrightnessConfiguration getDefaultConfig()>();

        return $r2;
    }

    public boolean isProximitySensorAvailable()
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.Sensor $r1;
        boolean z0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: android.hardware.Sensor mProximitySensor>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void onSwitchUser(int)
    {
        com.android.server.display.DisplayPowerController r0;
        int i0;
        com.android.server.display.BrightnessTracker $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void handleSettingsChange(boolean)>(1);

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        virtualinvoke $r1.<com.android.server.display.BrightnessTracker: void onSwitchUser(int)>(i0);

        return;
    }

    public void persistBrightnessTrackerState()
    {
        com.android.server.display.DisplayPowerController r0;
        com.android.server.display.BrightnessTracker $r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.BrightnessTracker mBrightnessTracker>;

        virtualinvoke $r1.<com.android.server.display.BrightnessTracker: void persistBrightnessTrackerState()>();

        return;
    }

    public boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest, boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        java.lang.Object r1;
        android.hardware.display.DisplayManagerInternal$DisplayPowerRequest r2, $r3, $r4, r6, $r7;
        boolean $z1, $z2, $z3, z4, z5, z6;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r6 := @parameter0: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        z4 := @parameter1: boolean;

        r1 = r0.<com.android.server.display.DisplayPowerController: java.lang.Object mLock>;

        entermonitor r1;

        z5 = 0;

        if z4 == 0 goto label03;

        z5 = 0;

     label01:
        $z3 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked>;

        if $z3 != 0 goto label03;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingWaitForNegativeProximityLocked> = 1;

     label02:
        z5 = 1;

     label03:
        $r7 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        if $r7 != null goto label05;

        r2 = new android.hardware.display.DisplayManagerInternal$DisplayPowerRequest;

        specialinvoke r2.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void <init>(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r6);

        r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked> = r2;

     label04:
        z5 = 1;

        goto label07;

     label05:
        $r3 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        $z1 = virtualinvoke $r3.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: boolean equals(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r6);

        if $z1 != 0 goto label07;

        $r4 = r0.<com.android.server.display.DisplayPowerController: android.hardware.display.DisplayManagerInternal$DisplayPowerRequest mPendingRequestLocked>;

        virtualinvoke $r4.<android.hardware.display.DisplayManagerInternal$DisplayPowerRequest: void copyFrom(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest)>(r6);

     label06:
        z5 = 1;

     label07:
        if z5 == 0 goto label09;

     label08:
        r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked> = 0;

     label09:
        if z5 == 0 goto label11;

     label10:
        $z2 = r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked>;

        if $z2 != 0 goto label11;

        r0.<com.android.server.display.DisplayPowerController: boolean mPendingRequestChangedLocked> = 1;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerStateLocked()>();

     label11:
        z6 = r0.<com.android.server.display.DisplayPowerController: boolean mDisplayReadyLocked>;

        exitmonitor r1;

     label12:
        return z6;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void setAmbientColorTemperatureOverride(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;
        com.android.server.display.whitebalance.DisplayWhiteBalanceController r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setAmbientColorTemperatureOverride(float)>(f0);

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

     label1:
        return;
    }

    void setAutoBrightnessLoggingEnabled(boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0;
        com.android.server.display.AutomaticBrightnessController r1;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.AutomaticBrightnessController mAutomaticBrightnessController>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.display.AutomaticBrightnessController: boolean setLoggingEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void setBrightnessConfiguration(android.hardware.display.BrightnessConfiguration)
    {
        com.android.server.display.DisplayPowerController r0;
        android.hardware.display.BrightnessConfiguration r1;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.display.DisplayPowerController;

        r1 := @parameter0: android.hardware.display.BrightnessConfiguration;

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int,java.lang.Object)>(5, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void setDisplayWhiteBalanceLoggingEnabled(boolean)
    {
        com.android.server.display.DisplayPowerController r0;
        boolean z0;
        com.android.server.display.whitebalance.DisplayWhiteBalanceController r1;
        com.android.server.display.whitebalance.DisplayWhiteBalanceSettings $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceController mDisplayWhiteBalanceController>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.display.whitebalance.DisplayWhiteBalanceController: boolean setLoggingEnabled(boolean)>(z0);

        $r2 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.whitebalance.DisplayWhiteBalanceSettings mDisplayWhiteBalanceSettings>;

        virtualinvoke $r2.<com.android.server.display.whitebalance.DisplayWhiteBalanceSettings: boolean setLoggingEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void setTemporaryAutoBrightnessAdjustment(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1;
        int $i0;
        android.os.Message $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $r2 = virtualinvoke $r1.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int,int,int)>(7, $i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void setTemporaryBrightness(float)
    {
        com.android.server.display.DisplayPowerController r0;
        float f0;
        com.android.server.display.DisplayPowerController$DisplayControllerHandler $r1;
        int $i0;
        android.os.Message $r2;

        r0 := @this: com.android.server.display.DisplayPowerController;

        f0 := @parameter0: float;

        $r1 = r0.<com.android.server.display.DisplayPowerController: com.android.server.display.DisplayPowerController$DisplayControllerHandler mHandler>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $r2 = virtualinvoke $r1.<com.android.server.display.DisplayPowerController$DisplayControllerHandler: android.os.Message obtainMessage(int,int,int)>(6, $i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void updateBrightness()
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }

    public void updateWhiteBalance()
    {
        com.android.server.display.DisplayPowerController r0;

        r0 := @this: com.android.server.display.DisplayPowerController;

        specialinvoke r0.<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()>();

        return;
    }
}
