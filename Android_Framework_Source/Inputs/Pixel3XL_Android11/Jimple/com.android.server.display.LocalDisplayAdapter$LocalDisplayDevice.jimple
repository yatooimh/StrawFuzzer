final class com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice extends com.android.server.display.DisplayDevice
{
    static final boolean $assertionsDisabled;
    private int mActiveColorMode;
    private boolean mActiveColorModeInvalid;
    private int mActiveConfigId;
    private int mActiveModeId;
    private boolean mActiveModeInvalid;
    private boolean mAllmRequested;
    private boolean mAllmSupported;
    private final com.android.server.lights.LogicalLight mBacklight;
    private float mBrightnessState;
    private int mDefaultConfigGroup;
    private int mDefaultModeId;
    private android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs;
    private com.android.server.display.DisplayDeviceConfig mDisplayDeviceConfig;
    private android.view.SurfaceControl$DisplayInfo mDisplayInfo;
    private com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs;
    private boolean mDisplayModeSpecsInvalid;
    private boolean mGameContentTypeRequested;
    private boolean mGameContentTypeSupported;
    private boolean mHavePendingChanges;
    private android.view.Display$HdrCapabilities mHdrCapabilities;
    private com.android.server.display.DisplayDeviceInfo mInfo;
    private final boolean mIsDefaultDisplay;
    private android.util.Spline mNitsToHalBrightness;
    private final long mPhysicalDisplayId;
    private boolean mSidekickActive;
    private android.hardware.sidekick.SidekickInternal mSidekickInternal;
    private int mState;
    private final java.util.ArrayList mSupportedColorModes;
    private final android.util.SparseArray mSupportedModes;
    private android.util.Spline mSystemBrightnessToNits;
    final com.android.server.display.LocalDisplayAdapter this$0;

    static void <clinit>()
    {
        <com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean $assertionsDisabled> = 0;

        return;
    }

    void <init>(com.android.server.display.LocalDisplayAdapter, android.os.IBinder, long, android.view.SurfaceControl$DisplayInfo, android.view.SurfaceControl$DisplayConfig[], int, android.view.SurfaceControl$DesiredDisplayConfigSpecs, int[], int, android.view.Display$HdrCapabilities, boolean)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        com.android.server.display.LocalDisplayAdapter r1;
        android.os.IBinder r2;
        long l0;
        android.view.SurfaceControl$DisplayInfo r3;
        android.view.SurfaceControl$DisplayConfig[] r4;
        int i1, i2;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r5;
        int[] r6;
        android.view.Display$HdrCapabilities r7;
        boolean z0, $z2, $z3, $z4;
        java.lang.String $r12;
        java.lang.Object $r16, $r21;
        android.hardware.sidekick.SidekickInternal $r17;
        android.os.Handler $r18;
        com.android.server.display.'-$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$S4bSIp6drytTEiae37oiY_7m6ng' $r19;
        android.os.Message $r20;
        com.android.server.lights.LightsManager $r22;
        com.android.server.lights.LogicalLight $r23;
        java.lang.StringBuilder r24;
        android.util.SparseArray r25;
        java.util.ArrayList r26;
        com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs r27;
        java.util.function.Consumer r28;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: com.android.server.display.LocalDisplayAdapter;

        r2 := @parameter1: android.os.IBinder;

        l0 := @parameter2: long;

        r3 := @parameter3: android.view.SurfaceControl$DisplayInfo;

        r4 := @parameter4: android.view.SurfaceControl$DisplayConfig[];

        i1 := @parameter5: int;

        r5 := @parameter6: android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        r6 := @parameter7: int[];

        i2 := @parameter8: int;

        r7 := @parameter9: android.view.Display$HdrCapabilities;

        z0 := @parameter10: boolean;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0> = r1;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("local:");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.display.DisplayDevice: void <init>(com.android.server.display.DisplayAdapter,android.os.IBinder,java.lang.String)>(r1, r2, $r12);

        r25 = new android.util.SparseArray;

        specialinvoke r25.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes> = r25;

        r26 = new java.util.ArrayList;

        specialinvoke r26.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes> = r26;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mState> = 0;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: float mBrightnessState> = #NaNF;

        r27 = new com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs;

        specialinvoke r27.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: void <init>()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs> = r27;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: long mPhysicalDisplayId> = l0;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mIsDefaultDisplay> = z0;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayInfo mDisplayInfo> = r3;

        virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean updateDisplayProperties(android.view.SurfaceControl$DisplayConfig[],int,android.view.SurfaceControl$DesiredDisplayConfigSpecs,int[],int,android.view.Display$HdrCapabilities)>(r4, i1, r5, r6, i2, r7);

        $r16 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/hardware/sidekick/SidekickInternal;");

        $r17 = (android.hardware.sidekick.SidekickInternal) $r16;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.hardware.sidekick.SidekickInternal mSidekickInternal> = $r17;

        $z2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mIsDefaultDisplay>;

        if $z2 == 0 goto label1;

        $r21 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/lights/LightsManager;");

        $r22 = (com.android.server.lights.LightsManager) $r21;

        $r23 = virtualinvoke $r22.<com.android.server.lights.LightsManager: com.android.server.lights.LogicalLight getLight(int)>(0);

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.lights.LogicalLight mBacklight> = $r23;

        goto label2;

     label1:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.lights.LogicalLight mBacklight> = null;

     label2:
        $z3 = staticinvoke <android.view.SurfaceControl: boolean getAutoLowLatencyModeSupport(android.os.IBinder)>(r2);

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmSupported> = $z3;

        $z4 = staticinvoke <android.view.SurfaceControl: boolean getGameContentTypeSupport(android.os.IBinder)>(r2);

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeSupported> = $z4;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceConfig mDisplayDeviceConfig> = null;

        $r18 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r19 = <com.android.server.display._$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$S4bSIp6drytTEiae37oiY_7m6ng: com.android.server.display.'-$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$S4bSIp6drytTEiae37oiY_7m6ng' INSTANCE>;

        r28 = (java.util.function.Consumer) $r19;

        $r20 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(java.util.function.Consumer,java.lang.Object)>(r28, r0);

        virtualinvoke $r18.<android.os.Handler: boolean sendMessage(android.os.Message)>($r20);

        return;
    }

    static com.android.server.lights.LogicalLight access$000(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        com.android.server.lights.LogicalLight $r1;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.lights.LogicalLight mBacklight>;

        return $r1;
    }

    static boolean access$100(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $z0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mSidekickActive>;

        return $z0;
    }

    static boolean access$102(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice, boolean)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        boolean z0;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        z0 := @parameter1: boolean;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mSidekickActive> = z0;

        return z0;
    }

    static android.hardware.sidekick.SidekickInternal access$200(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.hardware.sidekick.SidekickInternal $r1;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.hardware.sidekick.SidekickInternal mSidekickInternal>;

        return $r1;
    }

    static android.util.Spline access$300(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.util.Spline $r1;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.Spline mSystemBrightnessToNits>;

        return $r1;
    }

    static android.util.Spline access$400(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.util.Spline $r1;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.Spline mNitsToHalBrightness>;

        return $r1;
    }

    private int findDisplayConfigIdLocked(int, int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0, $i1, $i2, i3, i5, i6, i7, i8;
        com.android.server.display.LocalDisplayAdapter$DisplayModeRecord r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        boolean $z0;
        android.view.SurfaceControl$DisplayConfig[] r4;
        android.view.SurfaceControl$DisplayConfig r5;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r1 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r3;

        i5 = -1;

        if r1 == null goto label4;

        i6 = 0;

        i7 = -1;

     label1:
        r4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs>;

        i5 = i7;

        $i1 = lengthof r4;

        if i6 >= $i1 goto label4;

        r5 = r4[i6];

        i8 = i7;

        $z0 = virtualinvoke r1.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: boolean hasMatchingMode(android.view.SurfaceControl$DisplayConfig)>(r5);

        if $z0 == 0 goto label3;

        i8 = i7;

        if i7 != -1 goto label2;

        i8 = i6;

     label2:
        $i2 = r5.<android.view.SurfaceControl$DisplayConfig: int configGroup>;

        if $i2 != i0 goto label3;

        return i6;

     label3:
        i6 = i6 + 1;

        i7 = i8;

        goto label1;

     label4:
        return i5;
    }

    private com.android.server.display.LocalDisplayAdapter$DisplayModeRecord findDisplayModeRecord(android.view.SurfaceControl$DisplayConfig)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.view.SurfaceControl$DisplayConfig r1;
        com.android.server.display.LocalDisplayAdapter$DisplayModeRecord r2;
        android.util.SparseArray $r3, $r4;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: android.view.SurfaceControl$DisplayConfig;

        i1 = 0;

     label1:
        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label3;

        $r4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r5;

        $z0 = virtualinvoke r2.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: boolean hasMatchingMode(android.view.SurfaceControl$DisplayConfig)>(r1);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private int findMatchingModeIdLocked(int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.view.SurfaceControl$DisplayConfig r1;
        com.android.server.display.LocalDisplayAdapter$DisplayModeRecord r2;
        android.view.SurfaceControl$DisplayConfig[] $r3;
        android.util.SparseArray $r4, $r5;
        int $i0, $i1, i2, i3;
        java.lang.Object $r6;
        boolean $z0;
        android.view.Display$Mode $r7;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i2 := @parameter0: int;

        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs>;

        r1 = $r3[i2];

        i3 = 0;

     label1:
        $r4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i3 >= $i0 goto label3;

        $r5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r2 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r6;

        $z0 = virtualinvoke r2.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: boolean hasMatchingMode(android.view.SurfaceControl$DisplayConfig)>(r1);

        if $z0 == 0 goto label2;

        $r7 = r2.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i1 = virtualinvoke $r7.<android.view.Display$Mode: int getModeId()>();

        return $i1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private android.view.Display$Mode[] getDisplayModes(android.util.SparseArray)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.util.SparseArray r1;
        int i0, i1;
        android.view.Display$Mode[] r2;
        java.lang.Object $r3;
        com.android.server.display.LocalDisplayAdapter$DisplayModeRecord $r4;
        android.view.Display$Mode $r5;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: android.util.SparseArray;

        i0 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        r2 = newarray (android.view.Display$Mode)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r4 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r3;

        $r5 = $r4.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        r2[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    private boolean isDisplayPrivate(android.view.DisplayAddress$Physical)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.view.DisplayAddress$Physical r1;
        int[] r2;
        int i0, i1, $i3, i4;
        com.android.server.display.LocalDisplayAdapter $r3;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        byte $b2;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: android.view.DisplayAddress$Physical;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.display.LocalDisplayAdapter: android.content.Context getOverlayContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r5.<android.content.res.Resources: int[] getIntArray(int)>(17236046);

        if r2 == null goto label4;

        $b2 = virtualinvoke r1.<android.view.DisplayAddress$Physical: byte getPort()>();

        i0 = staticinvoke <java.lang.Byte: int toUnsignedInt(byte)>($b2);

        i1 = lengthof r2;

        i4 = 0;

     label2:
        if i4 >= i1 goto label4;

        $i3 = r2[i4];

        if $i3 != i0 goto label3;

        return 1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return 0;
    }

    public static void lambda$6tpawjjBXhlj4GSsJjStLZrwDUQ(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice, android.os.IBinder, int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.os.IBinder r1;
        int i0;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter1: android.os.IBinder;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void requestColorModeAsync(android.os.IBinder,int)>(r1, i0);

        return;
    }

    public static void lambda$S4bSIp6drytTEiae37oiY_7m6ng(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void loadDisplayConfigurationBrightnessMapping()>();

        return;
    }

    public static void lambda$iXCIox7NAT3NknToX9AEwGueQjs(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice, android.os.IBinder, android.view.SurfaceControl$DesiredDisplayConfigSpecs)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.os.IBinder r1;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r2;

        r0 := @parameter0: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void setDesiredDisplayModeSpecsAsync(android.os.IBinder,android.view.SurfaceControl$DesiredDisplayConfigSpecs)>(r1, r2);

        return;
    }

    private void loadDisplayConfigurationBrightnessMapping()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        float[] r1, r7, r8, r11;
        long $l0;
        com.android.server.display.DisplayDeviceConfig $r2, r6;
        com.android.server.display.LocalDisplayAdapter $r3;
        android.content.Context $r4;
        android.content.res.TypedArray $r5;
        int $i1, $i2, $i3, $i4, $i5, $i6, i7;
        float $f0;
        android.util.Spline r9, r13;
        android.content.res.Resources r10;
        int[] r12;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $l0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: long mPhysicalDisplayId>;

        r6 = staticinvoke <com.android.server.display.DisplayDeviceConfig: com.android.server.display.DisplayDeviceConfig create(long)>($l0);

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceConfig mDisplayDeviceConfig> = r6;

        if r6 != null goto label1;

        return;

     label1:
        r7 = virtualinvoke r6.<com.android.server.display.DisplayDeviceConfig: float[] getNits()>();

        $r2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceConfig mDisplayDeviceConfig>;

        r8 = virtualinvoke $r2.<com.android.server.display.DisplayDeviceConfig: float[] getBrightness()>();

        if r7 == null goto label7;

        if r8 != null goto label2;

        goto label7;

     label2:
        r9 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r7, r8);

        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.display.LocalDisplayAdapter: android.content.Context getOverlayContext()>();

        r10 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke r10.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236072);

        r11 = staticinvoke <com.android.server.display.BrightnessMappingStrategy: float[] getFloatArray(android.content.res.TypedArray)>($r5);

        r12 = virtualinvoke r10.<android.content.res.Resources: int[] getIntArray(int)>(17236071);

        $i1 = lengthof r11;

        if $i1 == 0 goto label6;

        $i3 = lengthof r12;

        $i2 = lengthof r11;

        if $i3 == $i2 goto label3;

        goto label6;

     label3:
        $i4 = lengthof r12;

        r1 = newarray (float)[$i4];

        i7 = 0;

     label4:
        $i5 = lengthof r12;

        if i7 >= $i5 goto label5;

        $i6 = r12[i7];

        $f0 = (float) $i6;

        r1[i7] = $f0;

        i7 = i7 + 1;

        goto label4;

     label5:
        r13 = staticinvoke <android.util.Spline: android.util.Spline createSpline(float[],float[])>(r1, r11);

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.Spline mNitsToHalBrightness> = r9;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.Spline mSystemBrightnessToNits> = r13;

        return;

     label6:
        return;

     label7:
        return;
    }

    private void requestColorModeAsync(android.os.IBinder, int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0;
        com.android.server.display.DisplayManagerService$SyncRoot r1;
        com.android.server.display.LocalDisplayAdapter $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r4 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        staticinvoke <android.view.SurfaceControl: boolean setActiveColorMode(android.os.IBinder,int)>(r4, i0);

        $r2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        r1 = virtualinvoke $r2.<com.android.server.display.LocalDisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()>();

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void updateDeviceInfoLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void setDesiredDisplayModeSpecsAsync(android.os.IBinder, android.view.SurfaceControl$DesiredDisplayConfigSpecs)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0;
        com.android.server.display.LocalDisplayAdapter $r1;
        boolean $z1;
        java.lang.Throwable $r2;
        android.os.IBinder r3;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r4;
        com.android.server.display.DisplayManagerService$SyncRoot r5;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r3 := @parameter0: android.os.IBinder;

        r4 := @parameter1: android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        staticinvoke <android.view.SurfaceControl: boolean setDesiredDisplayConfigSpecs(android.os.IBinder,android.view.SurfaceControl$DesiredDisplayConfigSpecs)>(r3, r4);

        i0 = staticinvoke <android.view.SurfaceControl: int getActiveConfig(android.os.IBinder)>(r3);

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        r5 = virtualinvoke $r1.<com.android.server.display.LocalDisplayAdapter: com.android.server.display.DisplayManagerService$SyncRoot getSyncRoot()>();

        entermonitor r5;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean updateActiveModeLocked(int)>(i0);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void updateDeviceInfoLocked()>();

     label2:
        exitmonitor r5;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r5;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean updateColorModesLocked(int[], int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i8, i10, i11;
        java.util.ArrayList $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r14;
        java.lang.Integer $r9, $r13, $r15, $r16;
        boolean $z1, $z2, $z3, z5, z6;
        java.lang.Object $r12;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: int[];

        i10 := @parameter1: int;

        if r1 != null goto label01;

        return 0;

     label01:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        z5 = 0;

        i0 = lengthof r1;

        i11 = 0;

     label02:
        if i11 >= i0 goto label04;

        i1 = r1[i11];

        $r14 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z3 = virtualinvoke $r14.<java.util.ArrayList: boolean contains(java.lang.Object)>($r15);

        if $z3 != 0 goto label03;

        z5 = 1;

     label03:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r16);

        i11 = i11 + 1;

        goto label02;

     label04:
        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $i3 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i2 != $i3 goto label06;

        if z5 == 0 goto label05;

        goto label06;

     label05:
        z6 = 0;

        goto label07;

     label06:
        z6 = 1;

     label07:
        if z6 != 0 goto label08;

        return 0;

     label08:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mHavePendingChanges> = 1;

        $r5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        $r6 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        virtualinvoke $r6.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r3);

        $r7 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r7);

        $r8 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $i4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $z1 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>($r9);

        if $z1 != 0 goto label11;

        $i5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode>;

        if $i5 == 0 goto label09;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "Active color mode no longer available, reverting to default mode.");

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode> = 0;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mActiveColorModeInvalid> = 1;

        goto label11;

     label09:
        $r10 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $z2 = virtualinvoke $r10.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label10;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "Default and active color mode is no longer available! Reverting to first available mode.");

        $r11 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r13 = (java.lang.Integer) $r12;

        $i8 = virtualinvoke $r13.<java.lang.Integer: int intValue()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode> = $i8;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mActiveColorModeInvalid> = 1;

        goto label11;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "No color modes available!");

     label11:
        return 1;
    }

    private void updateDeviceInfoLocked()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        com.android.server.display.LocalDisplayAdapter $r1;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo> = null;

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        virtualinvoke $r1.<com.android.server.display.LocalDisplayAdapter: void sendDisplayDeviceEventLocked(com.android.server.display.DisplayDevice,int)>(r0, 2);

        return;
    }

    private boolean updateHdrCapabilitiesLocked(android.view.Display$HdrCapabilities)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.view.Display$HdrCapabilities r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: android.view.Display$HdrCapabilities;

        $r2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.Display$HdrCapabilities mHdrCapabilities>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.Display$HdrCapabilities mHdrCapabilities> = r1;

        return 1;
    }

    public void applyPendingDisplayDeviceInfoChangesLocked()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        boolean $z0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $z0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mHavePendingChanges>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo> = null;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mHavePendingChanges> = 0;

     label1:
        return;
    }

    public void dumpLocked(java.io.PrintWriter)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r6, $r12, $r16, $r20, $r24, $r28, $r32, $r37, $r41, $r46, $r50, $r54, $r58, $r62, $r69, $r75, $r81;
        long $l0;
        java.lang.String $r5, $r11, $r15, $r19, $r23, $r27, $r31, $r34, $r36, $r40, $r45, $r49, $r53, $r57, $r61, $r66, $r72, $r74, $r80, $r86;
        com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        float $f0;
        com.android.server.lights.LogicalLight $r43;
        android.view.SurfaceControl$DisplayInfo $r64;
        android.view.SurfaceControl$DisplayConfig[] $r67, $r83;
        android.util.SparseArray $r68, $r77;
        java.util.ArrayList $r71;
        java.lang.Object $r78;
        android.view.SurfaceControl$DisplayConfig $r84;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.DisplayDevice: void dumpLocked(java.io.PrintWriter)>(r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPhysicalDisplayId=");

        $l0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: long mPhysicalDisplayId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDisplayModeSpecs={");

        $r8 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDisplayModeSpecsInvalid=");

        $z0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mDisplayModeSpecsInvalid>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mActiveConfigId=");

        $i1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveConfigId>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mActiveModeId=");

        $i2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mActiveColorMode=");

        $i3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDefaultModeId=");

        $i4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId>;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mState=");

        $i5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mState>;

        $r34 = staticinvoke <android.view.Display: java.lang.String stateToString(int)>($i5);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mBrightnessState=");

        $f0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: float mBrightnessState>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mBacklight=");

        $r43 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.lights.LogicalLight mBacklight>;

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r43);

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r45);

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAllmSupported=");

        $z1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmSupported>;

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r49);

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAllmRequested=");

        $z2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmRequested>;

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r53);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mGameContentTypeSupported=");

        $z3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeSupported>;

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r57);

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mGameContentTypeRequested=");

        $z4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeRequested>;

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r61);

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDisplayInfo=");

        $r64 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayInfo mDisplayInfo>;

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r64);

        $r66 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r66);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("mDisplayConfigs=");

        i8 = 0;

     label1:
        $r67 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs>;

        $i6 = lengthof $r67;

        if i8 >= $i6 goto label2;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r83 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs>;

        $r84 = $r83[i8];

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r84);

        $r86 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r86);

        i8 = i8 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("mSupportedModes=");

        i9 = 0;

     label3:
        $r68 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $i7 = virtualinvoke $r68.<android.util.SparseArray: int size()>();

        if i9 >= $i7 goto label4;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r77 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r78 = virtualinvoke $r77.<android.util.SparseArray: java.lang.Object valueAt(int)>(i9);

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r78);

        $r80 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r80);

        i9 = i9 + 1;

        goto label3;

     label4:
        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSupportedColorModes=");

        $r71 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $r72 = virtualinvoke $r71.<java.util.ArrayList: java.lang.String toString()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r74);

        return;
    }

    public com.android.server.display.DisplayDeviceConfig getDisplayDeviceConfig()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        com.android.server.display.DisplayDeviceConfig $r1;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceConfig mDisplayDeviceConfig>;

        return $r1;
    }

    public com.android.server.display.DisplayDeviceInfo getDisplayDeviceInfoLocked()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        com.android.server.display.DisplayDeviceInfo r1, $r2, $r4, $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r15, $r19, $r20, $r21, $r22, $r23, $r25, $r27, $r28, $r29, $r32, $r36, $r37, $r39, $r43, $r44, $r45, $r47, $r49, $r50, r59, r60, r61, r62, r63, r65, r66, r67, $r68;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32;
        android.view.SurfaceControl$DisplayConfig[] $r3;
        android.util.SparseArray $r8;
        android.view.Display$Mode[] $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.ArrayList $r14, $r17, $r51;
        int[] $r16, $r52;
        android.view.Display$HdrCapabilities $r18;
        long $l8, $l9, $l11;
        java.lang.String $r24, $r42, $r46;
        android.view.SurfaceControl$DisplayInfo $r26, $r30, $r33, $r64;
        float $f0, $f1, $f2, $f3, $f4;
        android.hardware.display.DeviceProductInfo $r31;
        com.android.server.display.LocalDisplayAdapter $r34, $r38;
        android.content.Context $r35, $r40;
        android.content.res.Resources $r41, r58;
        android.view.DisplayCutout $r48;
        java.lang.Object $r53;
        java.lang.Integer $r54;
        android.view.SurfaceControl$DisplayConfig r55;
        android.view.DisplayAddress$Physical r57;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        $r2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        if $r2 != null goto label12;

        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs>;

        $i0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveConfigId>;

        r55 = $r3[$i0];

        $r4 = new com.android.server.display.DisplayDeviceInfo;

        specialinvoke $r4.<com.android.server.display.DisplayDeviceInfo: void <init>()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo> = $r4;

        $i1 = r55.<android.view.SurfaceControl$DisplayConfig: int width>;

        $r4.<com.android.server.display.DisplayDeviceInfo: int width> = $i1;

        $r5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i2 = r55.<android.view.SurfaceControl$DisplayConfig: int height>;

        $r5.<com.android.server.display.DisplayDeviceInfo: int height> = $i2;

        $r6 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId>;

        $r6.<com.android.server.display.DisplayDeviceInfo: int modeId> = $i3;

        $r7 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId>;

        $r7.<com.android.server.display.DisplayDeviceInfo: int defaultModeId> = $i4;

        $r9 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r8 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r10 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.Display$Mode[] getDisplayModes(android.util.SparseArray)>($r8);

        $r9.<com.android.server.display.DisplayDeviceInfo: android.view.Display$Mode[] supportedModes> = $r10;

        $r11 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode>;

        $r11.<com.android.server.display.DisplayDeviceInfo: int colorMode> = $i5;

        $r12 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $z0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmSupported>;

        $r12.<com.android.server.display.DisplayDeviceInfo: boolean allmSupported> = $z0;

        $r13 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $z1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeSupported>;

        $r13.<com.android.server.display.DisplayDeviceInfo: boolean gameContentTypeSupported> = $z1;

        $r15 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r14 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $i6 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        $r16 = newarray (int)[$i6];

        $r15.<com.android.server.display.DisplayDeviceInfo: int[] supportedColorModes> = $r16;

        i32 = 0;

     label01:
        $r17 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $i7 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if i32 >= $i7 goto label02;

        $r50 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r52 = $r50.<com.android.server.display.DisplayDeviceInfo: int[] supportedColorModes>;

        $r51 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $r53 = virtualinvoke $r51.<java.util.ArrayList: java.lang.Object get(int)>(i32);

        $r54 = (java.lang.Integer) $r53;

        $i31 = virtualinvoke $r54.<java.lang.Integer: int intValue()>();

        $r52[i32] = $i31;

        i32 = i32 + 1;

        goto label01;

     label02:
        $r19 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r18 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.Display$HdrCapabilities mHdrCapabilities>;

        $r19.<com.android.server.display.DisplayDeviceInfo: android.view.Display$HdrCapabilities hdrCapabilities> = $r18;

        $r20 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $l8 = r55.<android.view.SurfaceControl$DisplayConfig: long appVsyncOffsetNanos>;

        $r20.<com.android.server.display.DisplayDeviceInfo: long appVsyncOffsetNanos> = $l8;

        $r21 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $l9 = r55.<android.view.SurfaceControl$DisplayConfig: long presentationDeadlineNanos>;

        $r21.<com.android.server.display.DisplayDeviceInfo: long presentationDeadlineNanos> = $l9;

        $r22 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i10 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mState>;

        $r22.<com.android.server.display.DisplayDeviceInfo: int state> = $i10;

        $r23 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r24 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.lang.String getUniqueId()>();

        $r23.<com.android.server.display.DisplayDeviceInfo: java.lang.String uniqueId> = $r24;

        $l11 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: long mPhysicalDisplayId>;

        r57 = staticinvoke <android.view.DisplayAddress: android.view.DisplayAddress$Physical fromPhysicalDisplayId(long)>($l11);

        $r25 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r25.<com.android.server.display.DisplayDeviceInfo: android.view.DisplayAddress address> = r57;

        $r27 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r26 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayInfo mDisplayInfo>;

        $f0 = $r26.<android.view.SurfaceControl$DisplayInfo: float density>;

        $f1 = $f0 * 160.0F;

        $f2 = $f1 + 0.5F;

        $i12 = (int) $f2;

        $r27.<com.android.server.display.DisplayDeviceInfo: int densityDpi> = $i12;

        $r28 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $f3 = r55.<android.view.SurfaceControl$DisplayConfig: float xDpi>;

        $r28.<com.android.server.display.DisplayDeviceInfo: float xDpi> = $f3;

        $r29 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $f4 = r55.<android.view.SurfaceControl$DisplayConfig: float yDpi>;

        $r29.<com.android.server.display.DisplayDeviceInfo: float yDpi> = $f4;

        $r32 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r30 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayInfo mDisplayInfo>;

        $r31 = $r30.<android.view.SurfaceControl$DisplayInfo: android.hardware.display.DeviceProductInfo deviceProductInfo>;

        $r32.<com.android.server.display.DisplayDeviceInfo: android.hardware.display.DeviceProductInfo deviceProductInfo> = $r31;

        $r33 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayInfo mDisplayInfo>;

        $z2 = $r33.<android.view.SurfaceControl$DisplayInfo: boolean secure>;

        if $z2 == 0 goto label03;

        $r49 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r49.<com.android.server.display.DisplayDeviceInfo: int flags> = 12;

     label03:
        $r34 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        $r35 = virtualinvoke $r34.<com.android.server.display.LocalDisplayAdapter: android.content.Context getOverlayContext()>();

        r58 = virtualinvoke $r35.<android.content.Context: android.content.res.Resources getResources()>();

        $z3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mIsDefaultDisplay>;

        if $z3 == 0 goto label07;

        r59 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i23 = r59.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i24 = $i23 | 1;

        r59.<com.android.server.display.DisplayDeviceInfo: int flags> = $i24;

        $z6 = virtualinvoke r58.<android.content.res.Resources: boolean getBoolean(int)>(17891484);

        if $z6 != 0 goto label04;

        $z7 = <android.os.Build: boolean IS_EMULATOR>;

        if $z7 == 0 goto label05;

        $z8 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.emulator.circular", 0);

        if $z8 == 0 goto label05;

     label04:
        r60 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i25 = r60.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i26 = $i25 | 256;

        r60.<com.android.server.display.DisplayDeviceInfo: int flags> = $i26;

     label05:
        $z9 = virtualinvoke r58.<android.content.res.Resources: boolean getBoolean(int)>(17891485);

        if $z9 == 0 goto label06;

        r61 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i29 = r61.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i30 = $i29 | 2048;

        r61.<com.android.server.display.DisplayDeviceInfo: int flags> = $i30;

     label06:
        r62 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i28 = r62.<com.android.server.display.DisplayDeviceInfo: int width>;

        $r47 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i27 = $r47.<com.android.server.display.DisplayDeviceInfo: int height>;

        $r48 = staticinvoke <android.view.DisplayCutout: android.view.DisplayCutout fromResourcesRectApproximation(android.content.res.Resources,int,int)>(r58, $i28, $i27);

        r62.<com.android.server.display.DisplayDeviceInfo: android.view.DisplayCutout displayCutout> = $r48;

        goto label09;

     label07:
        $z4 = virtualinvoke r58.<android.content.res.Resources: boolean getBoolean(int)>(17891481);

        if $z4 != 0 goto label08;

        r1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i21 = r1.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i22 = $i21 | 128;

        r1.<com.android.server.display.DisplayDeviceInfo: int flags> = $i22;

     label08:
        $z5 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean isDisplayPrivate(android.view.DisplayAddress$Physical)>(r57);

        if $z5 == 0 goto label09;

        r63 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i19 = r63.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i20 = $i19 | 16;

        r63.<com.android.server.display.DisplayDeviceInfo: int flags> = $i20;

     label09:
        $r64 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayInfo mDisplayInfo>;

        $z10 = $r64.<android.view.SurfaceControl$DisplayInfo: boolean isInternal>;

        if $z10 == 0 goto label10;

        $r43 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r43.<com.android.server.display.DisplayDeviceInfo: int type> = 1;

        $r44 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r44.<com.android.server.display.DisplayDeviceInfo: int touch> = 1;

        r65 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i17 = r65.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i18 = $i17 | 2;

        r65.<com.android.server.display.DisplayDeviceInfo: int flags> = $i18;

        $r45 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r46 = virtualinvoke r58.<android.content.res.Resources: java.lang.String getString(int)>(17040054);

        $r45.<com.android.server.display.DisplayDeviceInfo: java.lang.String name> = $r46;

        goto label11;

     label10:
        $r36 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r36.<com.android.server.display.DisplayDeviceInfo: int type> = 2;

        $r37 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r37.<com.android.server.display.DisplayDeviceInfo: int touch> = 2;

        r66 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i13 = r66.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i14 = $i13 | 64;

        r66.<com.android.server.display.DisplayDeviceInfo: int flags> = $i14;

        $r39 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $r38 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        $r40 = virtualinvoke $r38.<com.android.server.display.LocalDisplayAdapter: android.content.Context getContext()>();

        $r41 = virtualinvoke $r40.<android.content.Context: android.content.res.Resources getResources()>();

        $r42 = virtualinvoke $r41.<android.content.res.Resources: java.lang.String getString(int)>(17040055);

        $r39.<com.android.server.display.DisplayDeviceInfo: java.lang.String name> = $r42;

     label11:
        r67 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        $i15 = r67.<com.android.server.display.DisplayDeviceInfo: int flags>;

        $i16 = $i15 | 8192;

        r67.<com.android.server.display.DisplayDeviceInfo: int flags> = $i16;

     label12:
        $r68 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayDeviceInfo mInfo>;

        return $r68;
    }

    public boolean hasStableUniqueId()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        return 1;
    }

    public void onActiveDisplayConfigChangedLocked(int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean updateActiveModeLocked(int)>(i0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void updateDeviceInfoLocked()>();

     label1:
        return;
    }

    public void onOverlayChangedLocked()
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void updateDeviceInfoLocked()>();

        return;
    }

    public void requestColorModeLocked(int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0, $i1;
        java.util.ArrayList $r2;
        java.lang.Integer $r3, $r8;
        boolean $z0;
        com.android.server.display.LocalDisplayAdapter $r4;
        android.os.Handler $r5;
        com.android.server.display.'-$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$6tpawjjBXhlj4GSsJjStLZrwDUQ' $r6;
        android.os.IBinder $r7;
        android.os.Message $r9;
        java.lang.String $r14;
        java.lang.StringBuilder r15;
        com.android.internal.util.function.TriConsumer r16;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode>;

        if $i1 != i0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: java.util.ArrayList mSupportedColorModes>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find color mode ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring request.");

        $r14 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", $r14);

        return;

     label2:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveColorMode> = i0;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mActiveColorModeInvalid> = 0;

        $r4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.display.LocalDisplayAdapter: android.os.Handler getHandler()>();

        $r6 = <com.android.server.display._$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$6tpawjjBXhlj4GSsJjStLZrwDUQ: com.android.server.display.'-$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$6tpawjjBXhlj4GSsJjStLZrwDUQ' INSTANCE>;

        $r7 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.os.IBinder getDisplayTokenLocked()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r16 = (com.android.internal.util.function.TriConsumer) $r6;

        $r9 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r16, r0, $r7, $r8);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r9);

        return;
    }

    public java.lang.Runnable requestDisplayStateLocked(int, float)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0, i2, i3;
        float f0, $f1;
        long l1;
        android.os.IBinder r1;
        boolean $z0, z1, z2;
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1 $r2;
        com.android.server.lights.LogicalLight $r3;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mState>;

        z1 = 1;

        if i3 == i0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $f1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: float mBrightnessState>;

        $z0 = staticinvoke <com.android.internal.BrightnessSynchronizer: boolean floatEquals(float,float)>($f1, f0);

        if $z0 != 0 goto label3;

        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.lights.LogicalLight mBacklight>;

        if $r3 == null goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        if z2 != 0 goto label6;

        if z1 == 0 goto label5;

        goto label6;

     label5:
        return null;

     label6:
        l1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: long mPhysicalDisplayId>;

        r1 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.os.IBinder getDisplayTokenLocked()>();

        i2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mState>;

        if z2 == 0 goto label7;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mState> = i0;

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void updateDeviceInfoLocked()>();

     label7:
        if z1 == 0 goto label8;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: float mBrightnessState> = f0;

     label8:
        $r2 = new com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1;

        specialinvoke $r2.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice$1: void <init>(com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice,int,int,boolean,float,long,android.os.IBinder)>(r0, i2, i0, z1, f0, l1, r1);

        return $r2;
    }

    public void setAutoLowLatencyModeLocked(boolean)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        boolean z0, $z1, $z2;
        android.os.IBinder $r1;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmRequested>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmRequested> = z0;

        $z2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mAllmSupported>;

        if $z2 != 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "Unable to set ALLM because the connected display does not support ALLM.");

        return;

     label2:
        $r1 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.os.IBinder getDisplayTokenLocked()>();

        staticinvoke <android.view.SurfaceControl: void setAutoLowLatencyMode(android.os.IBinder,boolean)>($r1, z0);

        return;
    }

    public void setDesiredDisplayModeSpecsLocked(com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs r1, $r3, $r9, $r11, $r13, $r15, $r18;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z2;
        com.android.server.display.LocalDisplayAdapter $r4;
        android.os.Handler $r5;
        com.android.server.display.'-$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$iXCIox7NAT3NknToX9AEwGueQjs' $r6;
        android.os.IBinder $r7;
        com.android.server.display.DisplayModeDirector$RefreshRateRange $r10, $r12, $r14, $r16;
        float $f0, $f1, $f2, $f3;
        android.os.Message $r17;
        java.lang.String $r22;
        java.lang.StringBuilder r23;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r24;
        com.android.internal.util.function.TriConsumer r25;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs;

        $i1 = r1.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        if $i1 != 0 goto label1;

        return;

     label1:
        $i3 = r1.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        $i2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultConfigGroup>;

        i0 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int findDisplayConfigIdLocked(int,int)>($i3, $i2);

        if i0 >= 0 goto label2;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring request for invalid base mode id ");

        $i4 = r1.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r22 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", $r22);

        specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void updateDeviceInfoLocked()>();

        return;

     label2:
        $z0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mDisplayModeSpecsInvalid>;

        if $z0 != 0 goto label3;

        $r18 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $z2 = virtualinvoke r1.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: boolean equals(java.lang.Object)>($r18);

        if $z2 != 0 goto label4;

     label3:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mDisplayModeSpecsInvalid> = 0;

        $r3 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        virtualinvoke $r3.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: void copyFrom(com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs)>(r1);

        $r4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.display.LocalDisplayAdapter: android.os.Handler getHandler()>();

        $r6 = <com.android.server.display._$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$iXCIox7NAT3NknToX9AEwGueQjs: com.android.server.display.'-$$Lambda$LocalDisplayAdapter$LocalDisplayDevice$iXCIox7NAT3NknToX9AEwGueQjs' INSTANCE>;

        $r7 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.os.IBinder getDisplayTokenLocked()>();

        r24 = new android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        $r9 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r10 = $r9.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange primaryRefreshRateRange>;

        $f3 = $r10.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float min>;

        $r11 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r12 = $r11.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange primaryRefreshRateRange>;

        $f2 = $r12.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float max>;

        $r13 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r14 = $r13.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange appRequestRefreshRateRange>;

        $f1 = $r14.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float min>;

        $r15 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r16 = $r15.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange appRequestRefreshRateRange>;

        $f0 = $r16.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float max>;

        specialinvoke r24.<android.view.SurfaceControl$DesiredDisplayConfigSpecs: void <init>(int,float,float,float,float)>(i0, $f3, $f2, $f1, $f0);

        r25 = (com.android.internal.util.function.TriConsumer) $r6;

        $r17 = staticinvoke <com.android.internal.util.function.pooled.PooledLambda: android.os.Message obtainMessage(com.android.internal.util.function.TriConsumer,java.lang.Object,java.lang.Object,java.lang.Object)>(r25, r0, $r7, r24);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r17);

     label4:
        return;
    }

    public void setGameContentTypeLocked(boolean)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        boolean z0, $z1, $z2;
        android.os.IBinder $r1;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeRequested>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeRequested> = z0;

        $z2 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mGameContentTypeSupported>;

        if $z2 != 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "Unable to set game content type because the connected display does not support game content type.");

        return;

     label2:
        $r1 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.os.IBinder getDisplayTokenLocked()>();

        staticinvoke <android.view.SurfaceControl: void setGameContentType(android.os.IBinder,boolean)>($r1, z0);

        return;
    }

    public void setRequestedColorModeLocked(int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: void requestColorModeLocked(int)>(i0);

        return;
    }

    public boolean updateActiveModeLocked(int)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        int i0, $i1, i3, i4;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        boolean z0;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        i3 := @parameter0: int;

        i0 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveConfigId>;

        z0 = 0;

        if i0 != i3 goto label1;

        return 0;

     label1:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveConfigId> = i3;

        i4 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int findMatchingModeIdLocked(int)>(i3);

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId> = i4;

        if i4 != 0 goto label2;

        z0 = 1;

     label2:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mActiveModeInvalid> = z0;

        if z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In unknown mode after setting allowed configs, activeConfigId=");

        $i1 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveConfigId>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", $r5);

     label3:
        return 1;
    }

    public boolean updateDisplayConfigsLocked(android.view.SurfaceControl$DisplayConfig[], int, android.view.SurfaceControl$DesiredDisplayConfigSpecs)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.view.SurfaceControl$DisplayConfig[] r1, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i28, $i29, i30, i31, i32, i33, $i34, i35, $i36, $i37, $i38, $i39, $i40, $i41;
        android.view.SurfaceControl$DisplayConfig r3, $r12, $r16, $r18, $r34;
        java.lang.Object[] $r4;
        java.util.ArrayList $r6;
        android.util.SparseArray $r7, $r21, $r44, $r47, $r49;
        boolean $z0, $z1, $z2, z3, z4, z5;
        com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs $r8, $r10, $r22, $r23, $r25, $r27, $r29, $r42, $r48;
        android.view.Display$Mode $r9, $r11, $r13, $r14, $r15, $r17, $r20, $r31;
        java.lang.Object $r19, $r33, $r36;
        com.android.server.display.DisplayModeDirector$RefreshRateRange $r24, $r26, $r28, $r30;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b24, $b25, $b26, $b27;
        com.android.server.display.LocalDisplayAdapter $r32, $r43, $r50;
        com.android.server.display.LocalDisplayAdapter$DisplayModeRecord $r35, $r37, r39, r40, r41, r46;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r38;
        java.util.Iterator r45;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: android.view.SurfaceControl$DisplayConfig[];

        i0 := @parameter1: int;

        r38 := @parameter2: android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        $i1 = lengthof r1;

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, $i1);

        $r5 = (android.view.SurfaceControl$DisplayConfig[]) $r4;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.view.SurfaceControl$DisplayConfig[] mDisplayConfigs> = $r5;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveConfigId> = i0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        z3 = 0;

        i30 = 0;

     label01:
        $i2 = lengthof r1;

        if i30 >= $i2 goto label08;

        r3 = r1[i30];

        i31 = 0;

     label02:
        z4 = 0;

        $i29 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i31 >= $i29 goto label04;

        $r36 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i31);

        $r37 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r36;

        $z2 = virtualinvoke $r37.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: boolean hasMatchingMode(android.view.SurfaceControl$DisplayConfig)>(r3);

        if $z2 == 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        i31 = i31 + 1;

        goto label02;

     label04:
        if z4 == 0 goto label05;

        goto label07;

     label05:
        r39 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter$DisplayModeRecord findDisplayModeRecord(android.view.SurfaceControl$DisplayConfig)>(r3);

        r40 = r39;

        if r39 != null goto label06;

        $r35 = new com.android.server.display.LocalDisplayAdapter$DisplayModeRecord;

        specialinvoke $r35.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: void <init>(android.view.SurfaceControl$DisplayConfig)>(r3);

        r40 = $r35;

        z3 = 1;

     label06:
        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r40);

     label07:
        i30 = i30 + 1;

        goto label01;

     label08:
        i32 = 0;

     label09:
        r41 = null;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i32 >= $i3 goto label11;

        $r33 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i32);

        r41 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r33;

        $r34 = r1[i0];

        $z1 = virtualinvoke r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: boolean hasMatchingMode(android.view.SurfaceControl$DisplayConfig)>($r34);

        if $z1 == 0 goto label10;

        goto label11;

     label10:
        i32 = i32 + 1;

        goto label09;

     label11:
        i33 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId>;

        if i33 == 0 goto label12;

        $r31 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i28 = virtualinvoke $r31.<android.view.Display$Mode: int getModeId()>();

        if i33 == $i28 goto label12;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mActiveModeInvalid> = 1;

        $r32 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        virtualinvoke $r32.<com.android.server.display.LocalDisplayAdapter: void sendTraversalRequestLocked()>();

     label12:
        $r42 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $i34 = $r42.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        if $i34 == 0 goto label14;

        $i22 = r38.<android.view.SurfaceControl$DesiredDisplayConfigSpecs: int defaultConfig>;

        i35 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int findMatchingModeIdLocked(int)>($i22);

        if i35 == 0 goto label14;

        $r22 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $i23 = $r22.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        if $i23 != i35 goto label13;

        $r23 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r24 = $r23.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange primaryRefreshRateRange>;

        $f1 = $r24.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float min>;

        $f0 = r38.<android.view.SurfaceControl$DesiredDisplayConfigSpecs: float primaryRefreshRateMin>;

        $b24 = $f1 cmpl $f0;

        if $b24 != 0 goto label13;

        $r25 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r26 = $r25.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange primaryRefreshRateRange>;

        $f3 = $r26.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float max>;

        $f2 = r38.<android.view.SurfaceControl$DesiredDisplayConfigSpecs: float primaryRefreshRateMax>;

        $b25 = $f3 cmpl $f2;

        if $b25 != 0 goto label13;

        $r27 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r28 = $r27.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange appRequestRefreshRateRange>;

        $f5 = $r28.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float min>;

        $f4 = r38.<android.view.SurfaceControl$DesiredDisplayConfigSpecs: float appRequestRefreshRateMin>;

        $b26 = $f5 cmpl $f4;

        if $b26 != 0 goto label13;

        $r29 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r30 = $r29.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: com.android.server.display.DisplayModeDirector$RefreshRateRange appRequestRefreshRateRange>;

        $f7 = $r30.<com.android.server.display.DisplayModeDirector$RefreshRateRange: float max>;

        $f6 = r38.<android.view.SurfaceControl$DesiredDisplayConfigSpecs: float appRequestRefreshRateMax>;

        $b27 = $f7 cmpl $f6;

        if $b27 == 0 goto label14;

     label13:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mDisplayModeSpecsInvalid> = 1;

        $r43 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        virtualinvoke $r43.<com.android.server.display.LocalDisplayAdapter: void sendTraversalRequestLocked()>();

     label14:
        $i36 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r44 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $i37 = virtualinvoke $r44.<android.util.SparseArray: int size()>();

        if $i36 != $i37 goto label16;

        if z3 == 0 goto label15;

        goto label16;

     label15:
        z5 = 0;

        goto label17;

     label16:
        z5 = 1;

     label17:
        if z5 != 0 goto label18;

        return 0;

     label18:
        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mHavePendingChanges> = 1;

        $r7 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        virtualinvoke $r7.<android.util.SparseArray: void clear()>();

        r45 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label19:
        $z0 = interfaceinvoke r45.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r19 = interfaceinvoke r45.<java.util.Iterator: java.lang.Object next()>();

        r46 = (com.android.server.display.LocalDisplayAdapter$DisplayModeRecord) $r19;

        $r21 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r20 = r46.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i21 = virtualinvoke $r20.<android.view.Display$Mode: int getModeId()>();

        virtualinvoke $r21.<android.util.SparseArray: void put(int,java.lang.Object)>($i21, r46);

        goto label19;

     label20:
        $i4 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId>;

        if $i4 != 0 goto label21;

        $r17 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i19 = virtualinvoke $r17.<android.view.Display$Mode: int getModeId()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId> = $i19;

        $r18 = r1[i0];

        $i20 = $r18.<android.view.SurfaceControl$DisplayConfig: int configGroup>;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultConfigGroup> = $i20;

        goto label23;

     label21:
        if z3 == 0 goto label22;

        $i14 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId>;

        $r13 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i15 = virtualinvoke $r13.<android.view.Display$Mode: int getModeId()>();

        if $i14 == $i15 goto label22;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "New display modes are added and the active mode has changed, use active mode as default mode.");

        $r14 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i16 = virtualinvoke $r14.<android.view.Display$Mode: int getModeId()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId> = $i16;

        $r15 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i17 = virtualinvoke $r15.<android.view.Display$Mode: int getModeId()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId> = $i17;

        $r16 = r1[i0];

        $i18 = $r16.<android.view.SurfaceControl$DisplayConfig: int configGroup>;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultConfigGroup> = $i18;

        goto label23;

     label22:
        $i6 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId>;

        $i5 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultConfigGroup>;

        $i7 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int findDisplayConfigIdLocked(int,int)>($i6, $i5);

        if $i7 >= 0 goto label23;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "Default display mode no longer available, using currently active mode as default.");

        $r11 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i12 = virtualinvoke $r11.<android.view.Display$Mode: int getModeId()>();

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId> = $i12;

        $r12 = r1[i0];

        $i13 = $r12.<android.view.SurfaceControl$DisplayConfig: int configGroup>;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultConfigGroup> = $i13;

     label23:
        $r47 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $r48 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $i38 = $r48.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        $i39 = virtualinvoke $r47.<android.util.SparseArray: int indexOfKey(int)>($i38);

        if $i39 >= 0 goto label25;

        $r8 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $i10 = $r8.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId>;

        if $i10 == 0 goto label24;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "DisplayModeSpecs base mode no longer available, using currently active mode.");

     label24:
        $r10 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs mDisplayModeSpecs>;

        $r9 = r41.<com.android.server.display.LocalDisplayAdapter$DisplayModeRecord: android.view.Display$Mode mMode>;

        $i11 = virtualinvoke $r9.<android.view.Display$Mode: int getModeId()>();

        $r10.<com.android.server.display.DisplayModeDirector$DesiredDisplayModeSpecs: int baseModeId> = $i11;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mDisplayModeSpecsInvalid> = 1;

     label25:
        $r49 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: android.util.SparseArray mSupportedModes>;

        $i40 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId>;

        $i41 = virtualinvoke $r49.<android.util.SparseArray: int indexOfKey(int)>($i40);

        if $i41 >= 0 goto label27;

        $i8 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId>;

        if $i8 == 0 goto label26;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocalDisplayAdapter", "Active display mode no longer available, reverting to default mode.");

     label26:
        $i9 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mDefaultModeId>;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: int mActiveModeId> = $i9;

        r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean mActiveModeInvalid> = 1;

     label27:
        $r50 = r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: com.android.server.display.LocalDisplayAdapter this$0>;

        virtualinvoke $r50.<com.android.server.display.LocalDisplayAdapter: void sendTraversalRequestLocked()>();

        return 1;
    }

    public boolean updateDisplayProperties(android.view.SurfaceControl$DisplayConfig[], int, android.view.SurfaceControl$DesiredDisplayConfigSpecs, int[], int, android.view.Display$HdrCapabilities)
    {
        com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice r0;
        android.view.SurfaceControl$DisplayConfig[] r1;
        int i0, i1;
        android.view.SurfaceControl$DesiredDisplayConfigSpecs r2;
        int[] r3;
        android.view.Display$HdrCapabilities r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice;

        r1 := @parameter0: android.view.SurfaceControl$DisplayConfig[];

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.SurfaceControl$DesiredDisplayConfigSpecs;

        r3 := @parameter3: int[];

        i1 := @parameter4: int;

        r4 := @parameter5: android.view.Display$HdrCapabilities;

        $z0 = virtualinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean updateDisplayConfigsLocked(android.view.SurfaceControl$DisplayConfig[],int,android.view.SurfaceControl$DesiredDisplayConfigSpecs)>(r1, i0, r2);

        $z1 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean updateColorModesLocked(int[],int)>(r3, i1);

        $z2 = $z0 | $z1;

        $z3 = specialinvoke r0.<com.android.server.display.LocalDisplayAdapter$LocalDisplayDevice: boolean updateHdrCapabilitiesLocked(android.view.Display$HdrCapabilities)>(r4);

        $z4 = $z2 | $z3;

        return $z4;
    }
}
