final class com.android.server.display.PersistentDataStore extends java.lang.Object
{
    private static final java.lang.String ATTR_DEVICE_ADDRESS;
    private static final java.lang.String ATTR_DEVICE_ALIAS;
    private static final java.lang.String ATTR_DEVICE_NAME;
    private static final java.lang.String ATTR_PACKAGE_NAME;
    private static final java.lang.String ATTR_TIME_STAMP;
    private static final java.lang.String ATTR_UNIQUE_ID;
    private static final java.lang.String ATTR_USER_SERIAL;
    static final java.lang.String TAG;
    private static final java.lang.String TAG_BRIGHTNESS_CONFIGURATION;
    private static final java.lang.String TAG_BRIGHTNESS_CONFIGURATIONS;
    private static final java.lang.String TAG_COLOR_MODE;
    private static final java.lang.String TAG_DISPLAY;
    private static final java.lang.String TAG_DISPLAY_MANAGER_STATE;
    private static final java.lang.String TAG_DISPLAY_STATES;
    private static final java.lang.String TAG_REMEMBERED_WIFI_DISPLAYS;
    private static final java.lang.String TAG_STABLE_DEVICE_VALUES;
    private static final java.lang.String TAG_STABLE_DISPLAY_HEIGHT;
    private static final java.lang.String TAG_STABLE_DISPLAY_WIDTH;
    private static final java.lang.String TAG_WIFI_DISPLAY;
    private com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations;
    private boolean mDirty;
    private final java.util.HashMap mDisplayStates;
    private com.android.server.display.PersistentDataStore$Injector mInjector;
    private boolean mLoaded;
    private java.util.ArrayList mRememberedWifiDisplays;
    private final com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues;

    public void <init>()
    {
        com.android.server.display.PersistentDataStore r0;
        com.android.server.display.PersistentDataStore$Injector $r1;

        r0 := @this: com.android.server.display.PersistentDataStore;

        $r1 = new com.android.server.display.PersistentDataStore$Injector;

        specialinvoke $r1.<com.android.server.display.PersistentDataStore$Injector: void <init>()>();

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void <init>(com.android.server.display.PersistentDataStore$Injector)>($r1);

        return;
    }

    void <init>(com.android.server.display.PersistentDataStore$Injector)
    {
        com.android.server.display.PersistentDataStore r0;
        com.android.server.display.PersistentDataStore$Injector r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;
        com.android.server.display.PersistentDataStore$StableDeviceValues $r4;
        com.android.server.display.PersistentDataStore$BrightnessConfigurations $r5;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: com.android.server.display.PersistentDataStore$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates> = $r3;

        $r4 = new com.android.server.display.PersistentDataStore$StableDeviceValues;

        specialinvoke $r4.<com.android.server.display.PersistentDataStore$StableDeviceValues: void <init>(com.android.server.display.PersistentDataStore$1)>(null);

        r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues> = $r4;

        $r5 = new com.android.server.display.PersistentDataStore$BrightnessConfigurations;

        specialinvoke $r5.<com.android.server.display.PersistentDataStore$BrightnessConfigurations: void <init>()>();

        r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations> = $r5;

        r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$Injector mInjector> = r1;

        return;
    }

    private void clearState()
    {
        com.android.server.display.PersistentDataStore r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.server.display.PersistentDataStore;

        $r1 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    private int findRememberedWifiDisplay(java.lang.String)
    {
        com.android.server.display.PersistentDataStore r0;
        java.lang.String r1, $r6;
        int i0, i1;
        java.util.ArrayList $r2, $r3;
        java.lang.Object $r4;
        android.hardware.display.WifiDisplay $r5;
        boolean $z0;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.hardware.display.WifiDisplay) $r4;

        $r6 = virtualinvoke $r5.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    private com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String, boolean)
    {
        com.android.server.display.PersistentDataStore r0;
        java.lang.String r1;
        boolean z0;
        com.android.server.display.PersistentDataStore$DisplayState r2, $r5, r8;
        java.util.HashMap $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        $r3 = r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.display.PersistentDataStore$DisplayState) $r4;

        r8 = r2;

        if r2 != null goto label1;

        r8 = r2;

        if z0 == 0 goto label1;

        $r5 = new com.android.server.display.PersistentDataStore$DisplayState;

        specialinvoke $r5.<com.android.server.display.PersistentDataStore$DisplayState: void <init>(com.android.server.display.PersistentDataStore$1)>(null);

        r8 = $r5;

        $r6 = r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void setDirty()>();

     label1:
        return r8;
    }

    private void load()
    {
        com.android.server.display.PersistentDataStore r0;
        org.xmlpull.v1.XmlPullParser r1;
        com.android.server.display.PersistentDataStore$Injector $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8;
        java.io.InputStream r9;
        java.io.BufferedInputStream r10;

        r0 := @this: com.android.server.display.PersistentDataStore;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void clearState()>();

     label01:
        $r2 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$Injector mInjector>;

        r9 = virtualinvoke $r2.<com.android.server.display.PersistentDataStore$Injector: java.io.InputStream openRead()>();

     label02:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r10 = new java.io.BufferedInputStream;

        specialinvoke r10.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r9);

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r10, $r4);

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void loadFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

     label03:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        goto label11;

     label04:
        $r6 := @caughtexception;

        goto label12;

     label05:
        $r5 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to load display manager persistent store data.", $r5);

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void clearState()>();

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        goto label11;

     label08:
        $r7 := @caughtexception;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to load display manager persistent store data.", $r7);

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void clearState()>();

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

     label11:
        return;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        throw $r6;

     label13:
        $r8 := @caughtexception;

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label13;
        catch java.io.IOException from label02 to label03 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    private void loadDisplaysFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.display.PersistentDataStore r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        java.lang.String r2, $r4;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r6, $r9;
        com.android.server.display.PersistentDataStore$DisplayState r11;
        org.xmlpull.v1.XmlPullParserException r12, r13;
        java.lang.Throwable r14, r15;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("display");

        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "unique-id");

        if r2 == null goto label3;

        $r6 = r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates>;

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        r11 = new com.android.server.display.PersistentDataStore$DisplayState;

        specialinvoke r11.<com.android.server.display.PersistentDataStore$DisplayState: void <init>(com.android.server.display.PersistentDataStore$1)>(null);

        virtualinvoke r11.<com.android.server.display.PersistentDataStore$DisplayState: void loadFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        $r9 = r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11);

        goto label1;

     label2:
        r12 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Found duplicate display.");

        r14 = (java.lang.Throwable) r12;

        throw r14;

     label3:
        r13 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Missing unique-id attribute on display.");

        r15 = (java.lang.Throwable) r13;

        throw r15;

     label4:
        return;
    }

    private void loadFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.display.PersistentDataStore r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.display.PersistentDataStore$BrightnessConfigurations $r6;
        com.android.server.display.PersistentDataStore$StableDeviceValues $r7;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "display-manager-state");

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z4 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z4 == 0 goto label5;

        $r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("remembered-wifi-displays");

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void loadRememberedWifiDisplaysFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

     label2:
        $r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("display-states");

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void loadDisplaysFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

     label3:
        $r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("stable-device-values");

        if $z2 == 0 goto label4;

        $r7 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues>;

        virtualinvoke $r7.<com.android.server.display.PersistentDataStore$StableDeviceValues: void loadFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

     label4:
        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("brightness-configurations");

        if $z3 == 0 goto label1;

        $r6 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations>;

        virtualinvoke $r6.<com.android.server.display.PersistentDataStore$BrightnessConfigurations: void loadFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label1;

     label5:
        return;
    }

    private void loadRememberedWifiDisplaysFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.display.PersistentDataStore r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, $i1;
        java.lang.String r2, r3, r4, $r5;
        boolean $z0, $z2;
        java.util.ArrayList $r9;
        android.hardware.display.WifiDisplay r10;
        org.xmlpull.v1.XmlPullParserException r11, r12;
        java.lang.Throwable r13, r14;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z2 == 0 goto label4;

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("wifi-display");

        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "deviceAddress");

        r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "deviceName");

        r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "deviceAlias");

        if r2 == null goto label3;

        if r3 == null goto label3;

        $i1 = specialinvoke r0.<com.android.server.display.PersistentDataStore: int findRememberedWifiDisplay(java.lang.String)>(r2);

        if $i1 >= 0 goto label2;

        $r9 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        r10 = new android.hardware.display.WifiDisplay;

        specialinvoke r10.<android.hardware.display.WifiDisplay: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>(r2, r3, r4, 0, 0, 0);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

        goto label1;

     label2:
        r11 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r11.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Found duplicate wifi display device address.");

        r13 = (java.lang.Throwable) r11;

        throw r13;

     label3:
        r12 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Missing deviceAddress or deviceName attribute on wifi-display.");

        r14 = (java.lang.Throwable) r12;

        throw r14;

     label4:
        return;
    }

    private void save()
    {
        com.android.server.display.PersistentDataStore r0;
        com.android.internal.util.FastXmlSerializer r1;
        com.android.server.display.PersistentDataStore$Injector $r2, $r5, $r7;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        java.lang.Throwable $r6, $r8;
        java.io.OutputStream r9;
        java.io.BufferedOutputStream r10;

        r0 := @this: com.android.server.display.PersistentDataStore;

     label1:
        $r2 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$Injector mInjector>;

        r9 = virtualinvoke $r2.<com.android.server.display.PersistentDataStore$Injector: java.io.OutputStream startWrite()>();

     label2:
        r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r10 = new java.io.BufferedOutputStream;

        specialinvoke r10.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r9);

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r10, $r4);

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label3:
        $r5 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$Injector mInjector>;

        virtualinvoke $r5.<com.android.server.display.PersistentDataStore$Injector: void finishWrite(java.io.OutputStream,boolean)>(r9, 1);

     label4:
        goto label9;

     label5:
        $r6 := @caughtexception;

     label6:
        $r7 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$Injector mInjector>;

        virtualinvoke $r7.<com.android.server.display.PersistentDataStore$Injector: void finishWrite(java.io.OutputStream,boolean)>(r9, 0);

     label7:
        throw $r6;

     label8:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayManager", "Failed to save display manager persistent store data.", $r8);

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label6 to label7 with label8;
        catch java.io.IOException from label7 to label8 with label8;
    }

    private void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.display.PersistentDataStore r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.Boolean $r2;
        java.util.ArrayList $r5;
        boolean $z0, $z1;
        java.util.HashMap $r8;
        java.util.Set $r9;
        com.android.server.display.PersistentDataStore$StableDeviceValues $r12;
        com.android.server.display.PersistentDataStore$BrightnessConfigurations $r15;
        java.lang.Object $r18, $r19, $r20, $r24;
        java.lang.String $r26, $r28, $r30, $r32, r38;
        java.util.Iterator r34, r36;
        android.hardware.display.WifiDisplay r35;
        java.util.Map$Entry r37;
        com.android.server.display.PersistentDataStore$DisplayState r39;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display-manager-state");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "remembered-wifi-displays");

        $r5 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        r34 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r24 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (android.hardware.display.WifiDisplay) $r24;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "wifi-display");

        $r26 = virtualinvoke r35.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "deviceAddress", $r26);

        $r28 = virtualinvoke r35.<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "deviceName", $r28);

        $r30 = virtualinvoke r35.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()>();

        if $r30 == null goto label2;

        $r32 = virtualinvoke r35.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "deviceAlias", $r32);

     label2:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "wifi-display");

        goto label1;

     label3:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "remembered-wifi-displays");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display-states");

        $r8 = r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Set entrySet()>();

        r36 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r18 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (java.util.Map$Entry) $r18;

        $r19 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getKey()>();

        r38 = (java.lang.String) $r19;

        $r20 = interfaceinvoke r37.<java.util.Map$Entry: java.lang.Object getValue()>();

        r39 = (com.android.server.display.PersistentDataStore$DisplayState) $r20;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "display");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "unique-id", r38);

        virtualinvoke r39.<com.android.server.display.PersistentDataStore$DisplayState: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display");

        goto label4;

     label5:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display-states");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "stable-device-values");

        $r12 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues>;

        virtualinvoke $r12.<com.android.server.display.PersistentDataStore$StableDeviceValues: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "stable-device-values");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "brightness-configurations");

        $r15 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations>;

        virtualinvoke $r15.<com.android.server.display.PersistentDataStore$BrightnessConfigurations: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "brightness-configurations");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "display-manager-state");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        return;
    }

    private void setDirty()
    {
        com.android.server.display.PersistentDataStore r0;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r0.<com.android.server.display.PersistentDataStore: boolean mDirty> = 1;

        return;
    }

    public android.hardware.display.WifiDisplay applyWifiDisplayAlias(android.hardware.display.WifiDisplay)
    {
        com.android.server.display.PersistentDataStore r0;
        android.hardware.display.WifiDisplay r1, $r4, $r9;
        int i0;
        java.lang.String $r2, $r3, $r5, $r6, r10;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: android.hardware.display.WifiDisplay;

        if r1 == null goto label2;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        r10 = null;

        $r2 = virtualinvoke r1.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()>();

        i0 = specialinvoke r0.<com.android.server.display.PersistentDataStore: int findRememberedWifiDisplay(java.lang.String)>($r2);

        if i0 < 0 goto label1;

        $r7 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r9 = (android.hardware.display.WifiDisplay) $r8;

        r10 = virtualinvoke $r9.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()>();

     label1:
        $r3 = virtualinvoke r1.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAlias()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, r10);

        if $z0 != 0 goto label2;

        $r4 = new android.hardware.display.WifiDisplay;

        $r5 = virtualinvoke r1.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()>();

        $r6 = virtualinvoke r1.<android.hardware.display.WifiDisplay: java.lang.String getDeviceName()>();

        $z1 = virtualinvoke r1.<android.hardware.display.WifiDisplay: boolean isAvailable()>();

        $z2 = virtualinvoke r1.<android.hardware.display.WifiDisplay: boolean canConnect()>();

        $z3 = virtualinvoke r1.<android.hardware.display.WifiDisplay: boolean isRemembered()>();

        specialinvoke $r4.<android.hardware.display.WifiDisplay: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($r5, $r6, r10, $z1, $z2, $z3);

        return $r4;

     label2:
        return r1;
    }

    public android.hardware.display.WifiDisplay[] applyWifiDisplayAliases(android.hardware.display.WifiDisplay[])
    {
        com.android.server.display.PersistentDataStore r0;
        android.hardware.display.WifiDisplay[] r1, r5, r6, r7;
        int i0, i1;
        android.hardware.display.WifiDisplay r2, $r3, $r4;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: android.hardware.display.WifiDisplay[];

        r5 = r1;

        r6 = r1;

        if r1 == null goto label4;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        r6 = r5;

        if i1 >= i0 goto label4;

        $r3 = r1[i1];

        r2 = virtualinvoke r0.<com.android.server.display.PersistentDataStore: android.hardware.display.WifiDisplay applyWifiDisplayAlias(android.hardware.display.WifiDisplay)>($r3);

        r7 = r5;

        $r4 = r1[i1];

        if r2 == $r4 goto label3;

        r7 = r5;

        if r5 != r1 goto label2;

        r7 = newarray (android.hardware.display.WifiDisplay)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r7, 0, i0);

     label2:
        r7[i1] = r2;

     label3:
        i1 = i1 + 1;

        r5 = r7;

        goto label1;

     label4:
        return r6;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.PersistentDataStore r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r2, $r6, $r16, $r27;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r9, $r21, $r23, $r32;
        java.util.ArrayList $r10;
        java.util.HashMap $r11;
        java.util.Set $r12;
        com.android.server.display.PersistentDataStore$StableDeviceValues $r13;
        com.android.server.display.PersistentDataStore$BrightnessConfigurations $r14;
        java.lang.Object $r15, $r20, $r24, $r26;
        com.android.server.display.PersistentDataStore$DisplayState $r25;
        int i0, i1;
        java.util.Iterator r35, r38;
        android.hardware.display.WifiDisplay r36;
        java.util.Map$Entry r39;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: java.io.PrintWriter;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("PersistentDataStore");

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLoaded=");

        $z0 = r0.<com.android.server.display.PersistentDataStore: boolean mLoaded>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDirty=");

        $z1 = r0.<com.android.server.display.PersistentDataStore: boolean mDirty>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  RememberedWifiDisplays:");

        i0 = 0;

        $r10 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        r35 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r26 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (android.hardware.display.WifiDisplay) $r26;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  DisplayStates:");

        i1 = 0;

        $r11 = r0.<com.android.server.display.PersistentDataStore: java.util.HashMap mDisplayStates>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.util.Set entrySet()>();

        r38 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z3 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r15 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r39 = (java.util.Map$Entry) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r20 = interfaceinvoke r39.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (java.lang.String) $r20;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = interfaceinvoke r39.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (com.android.server.display.PersistentDataStore$DisplayState) $r24;

        virtualinvoke $r25.<com.android.server.display.PersistentDataStore$DisplayState: void dump(java.io.PrintWriter,java.lang.String)>(r1, "      ");

        i1 = i1 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  StableDeviceValues:");

        $r13 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues>;

        virtualinvoke $r13.<com.android.server.display.PersistentDataStore$StableDeviceValues: void dump(java.io.PrintWriter,java.lang.String)>(r1, "      ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  BrightnessConfigurations:");

        $r14 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations>;

        virtualinvoke $r14.<com.android.server.display.PersistentDataStore$BrightnessConfigurations: void dump(java.io.PrintWriter,java.lang.String)>(r1, "      ");

        return;
    }

    public boolean forgetWifiDisplay(java.lang.String)
    {
        com.android.server.display.PersistentDataStore r0;
        java.lang.String r1;
        int i0;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        i0 = specialinvoke r0.<com.android.server.display.PersistentDataStore: int findRememberedWifiDisplay(java.lang.String)>(r1);

        if i0 < 0 goto label1;

        $r2 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>(i0);

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void setDirty()>();

        return 1;

     label1:
        return 0;
    }

    public android.hardware.display.BrightnessConfiguration getBrightnessConfiguration(int)
    {
        com.android.server.display.PersistentDataStore r0;
        int i0;
        com.android.server.display.PersistentDataStore$BrightnessConfigurations $r1;
        android.hardware.display.BrightnessConfiguration $r2;

        r0 := @this: com.android.server.display.PersistentDataStore;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        $r1 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations>;

        $r2 = virtualinvoke $r1.<com.android.server.display.PersistentDataStore$BrightnessConfigurations: android.hardware.display.BrightnessConfiguration getBrightnessConfiguration(int)>(i0);

        return $r2;
    }

    public int getColorMode(com.android.server.display.DisplayDevice)
    {
        com.android.server.display.PersistentDataStore r0;
        boolean $z0;
        java.lang.String $r1;
        int $i0;
        com.android.server.display.DisplayDevice r2;
        com.android.server.display.PersistentDataStore$DisplayState r3;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r2 := @parameter0: com.android.server.display.DisplayDevice;

        $z0 = virtualinvoke r2.<com.android.server.display.DisplayDevice: boolean hasStableUniqueId()>();

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r1 = virtualinvoke r2.<com.android.server.display.DisplayDevice: java.lang.String getUniqueId()>();

        r3 = specialinvoke r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>($r1, 0);

        if r3 != null goto label2;

        return -1;

     label2:
        $i0 = virtualinvoke r3.<com.android.server.display.PersistentDataStore$DisplayState: int getColorMode()>();

        return $i0;
    }

    public android.hardware.display.WifiDisplay getRememberedWifiDisplay(java.lang.String)
    {
        com.android.server.display.PersistentDataStore r0;
        java.lang.String r1;
        int i0;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        android.hardware.display.WifiDisplay $r4;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        i0 = specialinvoke r0.<com.android.server.display.PersistentDataStore: int findRememberedWifiDisplay(java.lang.String)>(r1);

        if i0 < 0 goto label1;

        $r2 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r4 = (android.hardware.display.WifiDisplay) $r3;

        return $r4;

     label1:
        return null;
    }

    public android.hardware.display.WifiDisplay[] getRememberedWifiDisplays()
    {
        com.android.server.display.PersistentDataStore r0;
        java.util.ArrayList r1;
        int $i0;
        android.hardware.display.WifiDisplay[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: com.android.server.display.PersistentDataStore;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        r1 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r2 = newarray (android.hardware.display.WifiDisplay)[$i0];

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (android.hardware.display.WifiDisplay[]) $r3;

        return $r4;
    }

    public android.graphics.Point getStableDisplaySize()
    {
        com.android.server.display.PersistentDataStore r0;
        com.android.server.display.PersistentDataStore$StableDeviceValues $r1;
        android.graphics.Point $r2;

        r0 := @this: com.android.server.display.PersistentDataStore;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        $r1 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues>;

        $r2 = staticinvoke <com.android.server.display.PersistentDataStore$StableDeviceValues: android.graphics.Point access$100(com.android.server.display.PersistentDataStore$StableDeviceValues)>($r1);

        return $r2;
    }

    public void loadIfNeeded()
    {
        com.android.server.display.PersistentDataStore r0;
        boolean $z0;

        r0 := @this: com.android.server.display.PersistentDataStore;

        $z0 = r0.<com.android.server.display.PersistentDataStore: boolean mLoaded>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void load()>();

        r0.<com.android.server.display.PersistentDataStore: boolean mLoaded> = 1;

     label1:
        return;
    }

    public boolean rememberWifiDisplay(android.hardware.display.WifiDisplay)
    {
        com.android.server.display.PersistentDataStore r0;
        android.hardware.display.WifiDisplay r1, $r6;
        int i0;
        java.lang.String $r2;
        java.util.ArrayList $r3, $r4, $r7;
        java.lang.Object $r5;
        boolean $z1;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: android.hardware.display.WifiDisplay;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        $r2 = virtualinvoke r1.<android.hardware.display.WifiDisplay: java.lang.String getDeviceAddress()>();

        i0 = specialinvoke r0.<com.android.server.display.PersistentDataStore: int findRememberedWifiDisplay(java.lang.String)>($r2);

        if i0 < 0 goto label2;

        $r4 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r6 = (android.hardware.display.WifiDisplay) $r5;

        $z1 = virtualinvoke $r6.<android.hardware.display.WifiDisplay: boolean equals(android.hardware.display.WifiDisplay)>(r1);

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r7 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        virtualinvoke $r7.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        goto label3;

     label2:
        $r3 = r0.<com.android.server.display.PersistentDataStore: java.util.ArrayList mRememberedWifiDisplays>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        specialinvoke r0.<com.android.server.display.PersistentDataStore: void setDirty()>();

        return 1;
    }

    public void saveIfNeeded()
    {
        com.android.server.display.PersistentDataStore r0;
        boolean $z0;

        r0 := @this: com.android.server.display.PersistentDataStore;

        $z0 = r0.<com.android.server.display.PersistentDataStore: boolean mDirty>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void save()>();

        r0.<com.android.server.display.PersistentDataStore: boolean mDirty> = 0;

     label1:
        return;
    }

    public void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration, int, java.lang.String)
    {
        com.android.server.display.PersistentDataStore r0;
        android.hardware.display.BrightnessConfiguration r1;
        int i0;
        java.lang.String r2;
        com.android.server.display.PersistentDataStore$BrightnessConfigurations $r3;
        boolean $z0;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: android.hardware.display.BrightnessConfiguration;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        $r3 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$BrightnessConfigurations mBrightnessConfigurations>;

        $z0 = staticinvoke <com.android.server.display.PersistentDataStore$BrightnessConfigurations: boolean access$200(com.android.server.display.PersistentDataStore$BrightnessConfigurations,android.hardware.display.BrightnessConfiguration,int,java.lang.String)>($r3, r1, i0, r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void setDirty()>();

     label1:
        return;
    }

    public boolean setColorMode(com.android.server.display.DisplayDevice, int)
    {
        com.android.server.display.PersistentDataStore r0;
        com.android.server.display.DisplayDevice r1;
        int i0;
        boolean $z0, $z1;
        java.lang.String $r2;
        com.android.server.display.PersistentDataStore$DisplayState $r3;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: com.android.server.display.DisplayDevice;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r1.<com.android.server.display.DisplayDevice: boolean hasStableUniqueId()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.display.DisplayDevice: java.lang.String getUniqueId()>();

        $r3 = specialinvoke r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$DisplayState getDisplayState(java.lang.String,boolean)>($r2, 1);

        $z1 = virtualinvoke $r3.<com.android.server.display.PersistentDataStore$DisplayState: boolean setColorMode(int)>(i0);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void setDirty()>();

        return 1;

     label2:
        return 0;
    }

    public void setStableDisplaySize(android.graphics.Point)
    {
        com.android.server.display.PersistentDataStore r0;
        android.graphics.Point r1;
        com.android.server.display.PersistentDataStore$StableDeviceValues $r2;
        boolean $z0;

        r0 := @this: com.android.server.display.PersistentDataStore;

        r1 := @parameter0: android.graphics.Point;

        virtualinvoke r0.<com.android.server.display.PersistentDataStore: void loadIfNeeded()>();

        $r2 = r0.<com.android.server.display.PersistentDataStore: com.android.server.display.PersistentDataStore$StableDeviceValues mStableDeviceValues>;

        $z0 = virtualinvoke $r2.<com.android.server.display.PersistentDataStore$StableDeviceValues: boolean setDisplaySize(android.graphics.Point)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.display.PersistentDataStore: void setDirty()>();

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.display.PersistentDataStore: java.lang.String TAG_WIFI_DISPLAY> = "wifi-display";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_STABLE_DISPLAY_WIDTH> = "stable-display-width";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_STABLE_DISPLAY_HEIGHT> = "stable-display-height";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_STABLE_DEVICE_VALUES> = "stable-device-values";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_REMEMBERED_WIFI_DISPLAYS> = "remembered-wifi-displays";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_DISPLAY_STATES> = "display-states";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_DISPLAY_MANAGER_STATE> = "display-manager-state";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_DISPLAY> = "display";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_COLOR_MODE> = "color-mode";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_BRIGHTNESS_CONFIGURATIONS> = "brightness-configurations";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG_BRIGHTNESS_CONFIGURATION> = "brightness-configuration";

        <com.android.server.display.PersistentDataStore: java.lang.String TAG> = "DisplayManager";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_USER_SERIAL> = "user-serial";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_UNIQUE_ID> = "unique-id";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_TIME_STAMP> = "timestamp";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_PACKAGE_NAME> = "package-name";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_DEVICE_NAME> = "deviceName";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_DEVICE_ALIAS> = "deviceAlias";

        <com.android.server.display.PersistentDataStore: java.lang.String ATTR_DEVICE_ADDRESS> = "deviceAddress";

        return;
    }
}
