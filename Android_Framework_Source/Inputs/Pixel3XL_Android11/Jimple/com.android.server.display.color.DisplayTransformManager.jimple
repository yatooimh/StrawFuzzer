public class com.android.server.display.color.DisplayTransformManager extends java.lang.Object
{
    private static final float COLOR_SATURATION_BOOSTED;
    private static final float COLOR_SATURATION_NATURAL;
    private static final int DISPLAY_COLOR_ENHANCED;
    private static final int DISPLAY_COLOR_MANAGED;
    private static final int DISPLAY_COLOR_UNMANAGED;
    public static final int LEVEL_COLOR_MATRIX_DISPLAY_WHITE_BALANCE;
    public static final int LEVEL_COLOR_MATRIX_GRAYSCALE;
    public static final int LEVEL_COLOR_MATRIX_INVERT_COLOR;
    public static final int LEVEL_COLOR_MATRIX_NIGHT_DISPLAY;
    public static final int LEVEL_COLOR_MATRIX_SATURATION;
    static final java.lang.String PERSISTENT_PROPERTY_COMPOSITION_COLOR_MODE;
    static final java.lang.String PERSISTENT_PROPERTY_DISPLAY_COLOR;
    static final java.lang.String PERSISTENT_PROPERTY_SATURATION;
    private static final java.lang.String SURFACE_FLINGER;
    private static final int SURFACE_FLINGER_TRANSACTION_COLOR_MATRIX;
    private static final int SURFACE_FLINGER_TRANSACTION_DALTONIZER;
    private static final int SURFACE_FLINGER_TRANSACTION_DISPLAY_COLOR;
    private static final int SURFACE_FLINGER_TRANSACTION_QUERY_COLOR_MANAGED;
    private static final int SURFACE_FLINGER_TRANSACTION_SATURATION;
    private static final java.lang.String TAG;
    private static final android.os.IBinder sFlinger;
    private final android.util.SparseArray mColorMatrix;
    private int mDaltonizerMode;
    private final java.lang.Object mDaltonizerModeLock;
    private final float[][] mTempColorMatrix;

    static void <clinit>()
    {
        android.os.IBinder $r0;

        <com.android.server.display.color.DisplayTransformManager: java.lang.String TAG> = "DisplayTransformManager";

        <com.android.server.display.color.DisplayTransformManager: int SURFACE_FLINGER_TRANSACTION_SATURATION> = 1022;

        <com.android.server.display.color.DisplayTransformManager: int SURFACE_FLINGER_TRANSACTION_QUERY_COLOR_MANAGED> = 1030;

        <com.android.server.display.color.DisplayTransformManager: int SURFACE_FLINGER_TRANSACTION_DISPLAY_COLOR> = 1023;

        <com.android.server.display.color.DisplayTransformManager: int SURFACE_FLINGER_TRANSACTION_DALTONIZER> = 1014;

        <com.android.server.display.color.DisplayTransformManager: int SURFACE_FLINGER_TRANSACTION_COLOR_MATRIX> = 1015;

        <com.android.server.display.color.DisplayTransformManager: java.lang.String SURFACE_FLINGER> = "SurfaceFlinger";

        <com.android.server.display.color.DisplayTransformManager: java.lang.String PERSISTENT_PROPERTY_SATURATION> = "persist.sys.sf.color_saturation";

        <com.android.server.display.color.DisplayTransformManager: java.lang.String PERSISTENT_PROPERTY_DISPLAY_COLOR> = "persist.sys.sf.native_mode";

        <com.android.server.display.color.DisplayTransformManager: java.lang.String PERSISTENT_PROPERTY_COMPOSITION_COLOR_MODE> = "persist.sys.sf.color_mode";

        <com.android.server.display.color.DisplayTransformManager: int LEVEL_COLOR_MATRIX_SATURATION> = 150;

        <com.android.server.display.color.DisplayTransformManager: int LEVEL_COLOR_MATRIX_NIGHT_DISPLAY> = 100;

        <com.android.server.display.color.DisplayTransformManager: int LEVEL_COLOR_MATRIX_INVERT_COLOR> = 300;

        <com.android.server.display.color.DisplayTransformManager: int LEVEL_COLOR_MATRIX_GRAYSCALE> = 200;

        <com.android.server.display.color.DisplayTransformManager: int LEVEL_COLOR_MATRIX_DISPLAY_WHITE_BALANCE> = 125;

        <com.android.server.display.color.DisplayTransformManager: int DISPLAY_COLOR_UNMANAGED> = 1;

        <com.android.server.display.color.DisplayTransformManager: int DISPLAY_COLOR_MANAGED> = 0;

        <com.android.server.display.color.DisplayTransformManager: int DISPLAY_COLOR_ENHANCED> = 2;

        <com.android.server.display.color.DisplayTransformManager: float COLOR_SATURATION_NATURAL> = 1.0F;

        <com.android.server.display.color.DisplayTransformManager: float COLOR_SATURATION_BOOSTED> = 1.1F;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

        <com.android.server.display.color.DisplayTransformManager: android.os.IBinder sFlinger> = $r0;

        return;
    }

    void <init>()
    {
        com.android.server.display.color.DisplayTransformManager r0;
        android.util.SparseArray $r1;
        float[][] $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>(int)>(5);

        r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix> = $r1;

        $r2 = newmultiarray (float)[2][16];

        r0.<com.android.server.display.color.DisplayTransformManager: float[][] mTempColorMatrix> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.display.color.DisplayTransformManager: java.lang.Object mDaltonizerModeLock> = $r3;

        r0.<com.android.server.display.color.DisplayTransformManager: int mDaltonizerMode> = -1;

        return;
    }

    private static void applyColorMatrix(float[])
    {
        android.os.Parcel r0;
        android.os.IBinder $r1;
        float $f0;
        android.os.RemoteException $r2;
        java.lang.Throwable $r3;
        float[] r4;
        int i1;

        r4 := @parameter0: float[];

        r0 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r0.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        if r4 == null goto label03;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(1);

        i1 = 0;

     label01:
        if i1 >= 16 goto label02;

        $f0 = r4[i1];

        virtualinvoke r0.<android.os.Parcel: void writeFloat(float)>($f0);

        i1 = i1 + 1;

        goto label01;

     label02:
        goto label04;

     label03:
        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(0);

     label04:
        $r1 = <com.android.server.display.color.DisplayTransformManager: android.os.IBinder sFlinger>;

        interfaceinvoke $r1.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1015, r0, null, 0);

     label05:
        virtualinvoke r0.<android.os.Parcel: void recycle()>();

        goto label10;

     label06:
        $r3 := @caughtexception;

        goto label11;

     label07:
        $r2 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayTransformManager", "Failed to set color transform", $r2);

     label09:
        goto label05;

     label10:
        return;

     label11:
        virtualinvoke r0.<android.os.Parcel: void recycle()>();

        throw $r3;

        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }

    private static void applyDaltonizerMode(int)
    {
        int i0;
        android.os.Parcel r0;
        android.os.IBinder $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r0.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(i0);

     label1:
        $r1 = <com.android.server.display.color.DisplayTransformManager: android.os.IBinder sFlinger>;

        interfaceinvoke $r1.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1014, r0, null, 0);

     label2:
        virtualinvoke r0.<android.os.Parcel: void recycle()>();

        goto label7;

     label3:
        $r2 := @caughtexception;

        goto label8;

     label4:
        $r3 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayTransformManager", "Failed to set Daltonizer mode", $r3);

     label6:
        goto label2;

     label7:
        return;

     label8:
        virtualinvoke r0.<android.os.Parcel: void recycle()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private void applySaturation(float)
    {
        com.android.server.display.color.DisplayTransformManager r0;
        float f0;
        android.os.Parcel r1;
        java.lang.String $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        f0 := @parameter0: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.sf.color_saturation", $r2);

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>(f0);

     label1:
        $r3 = <com.android.server.display.color.DisplayTransformManager: android.os.IBinder sFlinger>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1022, r1, null, 0);

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        goto label7;

     label3:
        $r4 := @caughtexception;

        goto label8;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayTransformManager", "Failed to set saturation", $r5);

     label6:
        goto label2;

     label7:
        return;

     label8:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private float[] computeColorMatrixLocked()
    {
        com.android.server.display.color.DisplayTransformManager r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        float[][] r1;
        float[] r2, $r4, $r5, $r8, $r9;
        android.util.SparseArray $r3, $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        $r3 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<com.android.server.display.color.DisplayTransformManager: float[][] mTempColorMatrix>;

        $r4 = r1[0];

        staticinvoke <android.opengl.Matrix: void setIdentityM(float[],int)>($r4, 0);

        i5 = 0;

     label2:
        if i5 >= i0 goto label3;

        $r6 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r2 = (float[]) $r7;

        $i2 = i5 + 1;

        $i3 = $i2 % 2;

        $r9 = r1[$i3];

        $i4 = i5 % 2;

        $r8 = r1[$i4];

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r9, 0, $r8, 0, r2, 0);

        i5 = i5 + 1;

        goto label2;

     label3:
        $i1 = i0 % 2;

        $r5 = r1[$i1];

        return $r5;
    }

    public static boolean needsLinearColorMatrix()
    {
        int $i0;
        boolean z0;

        z0 = 1;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.sf.native_mode", 1);

        if $i0 == 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean needsLinearColorMatrix(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void setDisplayColor(int, int)
    {
        com.android.server.display.color.DisplayTransformManager r0;
        int i0, i1;
        android.os.Parcel r1;
        java.lang.String $r2, $r4;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.sf.native_mode", $r2);

        if i1 == -1 goto label1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.sf.color_mode", $r4);

     label1:
        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        if i1 == -1 goto label2;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i1);

     label2:
        $r3 = <com.android.server.display.color.DisplayTransformManager: android.os.IBinder sFlinger>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1023, r1, null, 0);

     label3:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        goto label8;

     label4:
        $r5 := @caughtexception;

        goto label9;

     label5:
        $r6 := @caughtexception;

     label6:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayTransformManager", "Failed to set display color", $r6);

     label7:
        goto label3;

     label8:
        return;

     label9:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    private void updateConfiguration()
    {
        com.android.server.display.color.DisplayTransformManager r0;
        android.app.IActivityTaskManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityTaskManager: android.app.IActivityTaskManager getService()>();

        interfaceinvoke $r2.<android.app.IActivityTaskManager: boolean updateConfiguration(android.content.res.Configuration)>(null);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayTransformManager", "Could not update configuration", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public float[] getColorMatrix(int)
    {
        com.android.server.display.color.DisplayTransformManager r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        float[] r5, r6;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (float[]) $r3;

     label2:
        if r5 != null goto label3;

        r6 = null;

        goto label4;

     label3:
        $i1 = lengthof r5;

        r6 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r5, $i1);

     label4:
        exitmonitor r1;

     label5:
        return r6;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isDeviceColorManaged()
    {
        com.android.server.display.color.DisplayTransformManager r0;
        android.os.Parcel r1, r2;
        boolean z0;
        android.os.IBinder $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r1.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

     label1:
        $r3 = <com.android.server.display.color.DisplayTransformManager: android.os.IBinder sFlinger>;

        interfaceinvoke $r3.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1030, r1, r2, 0);

        z0 = virtualinvoke r2.<android.os.Parcel: boolean readBoolean()>();

     label2:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return z0;

     label3:
        $r5 := @caughtexception;

        goto label7;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DisplayTransformManager", "Failed to query wide color support", $r4);

     label6:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        return 0;

     label7:
        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        virtualinvoke r2.<android.os.Parcel: void recycle()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void setColorMatrix(int, float[])
    {
        com.android.server.display.color.DisplayTransformManager r0;
        int i0, $i1, $i2, $i3, $i4;
        float[] r1, $r5, r13, $r16;
        android.util.SparseArray $r2, $r4, $r6, r15;
        java.lang.Object $r3;
        boolean $z0;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r10;
        java.lang.String $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        i0 := @parameter0: int;

        r13 := @parameter1: float[];

        if r13 == null goto label02;

        $i3 = lengthof r13;

        if $i3 != 16 goto label01;

        goto label02;

     label01:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected length: 16 (4x4 matrix), actual length: ");

        $i4 = lengthof r13;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label02:
        r15 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        entermonitor r15;

     label03:
        $r2 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (float[]) $r3;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>(r1, r13);

        if $z0 != 0 goto label12;

     label04:
        if r13 != null goto label07;

     label05:
        $r6 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

     label06:
        goto label11;

     label07:
        if r1 != null goto label10;

     label08:
        $r4 = r0.<com.android.server.display.color.DisplayTransformManager: android.util.SparseArray mColorMatrix>;

        $i2 = lengthof r13;

        $r5 = staticinvoke <java.util.Arrays: float[] copyOf(float[],int)>(r13, $i2);

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r5);

     label09:
        goto label11;

     label10:
        $i1 = lengthof r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r13, 0, r1, 0, $i1);

     label11:
        $r16 = specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: float[] computeColorMatrixLocked()>();

        staticinvoke <com.android.server.display.color.DisplayTransformManager: void applyColorMatrix(float[])>($r16);

     label12:
        exitmonitor r15;

     label13:
        return;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r15;

     label16:
        throw $r12;

        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean setColorMode(int, float[], int)
    {
        com.android.server.display.color.DisplayTransformManager r0;
        int i0, i1;
        float[] r1;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        if i0 != 0 goto label1;

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void applySaturation(float)>(1.0F);

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void setDisplayColor(int,int)>(0, i1);

        goto label5;

     label1:
        if i0 != 1 goto label2;

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void applySaturation(float)>(1.1F);

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void setDisplayColor(int,int)>(0, i1);

        goto label5;

     label2:
        if i0 != 2 goto label3;

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void applySaturation(float)>(1.0F);

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void setDisplayColor(int,int)>(1, i1);

        goto label5;

     label3:
        if i0 != 3 goto label4;

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void applySaturation(float)>(1.0F);

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void setDisplayColor(int,int)>(2, i1);

        goto label5;

     label4:
        if i0 < 256 goto label5;

        if i0 > 511 goto label5;

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void applySaturation(float)>(1.0F);

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void setDisplayColor(int,int)>(i0, i1);

     label5:
        virtualinvoke r0.<com.android.server.display.color.DisplayTransformManager: void setColorMatrix(int,float[])>(100, r1);

        specialinvoke r0.<com.android.server.display.color.DisplayTransformManager: void updateConfiguration()>();

        return 1;
    }

    public void setDaltonizerMode(int)
    {
        com.android.server.display.color.DisplayTransformManager r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.display.color.DisplayTransformManager;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.display.color.DisplayTransformManager: java.lang.Object mDaltonizerModeLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<com.android.server.display.color.DisplayTransformManager: int mDaltonizerMode>;

        if $i1 == i0 goto label2;

        r0.<com.android.server.display.color.DisplayTransformManager: int mDaltonizerMode> = i0;

        staticinvoke <com.android.server.display.color.DisplayTransformManager: void applyDaltonizerMode(int)>(i0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
