class com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter extends com.android.server.display.utils.AmbientFilter
{
    private static final int PREDICTION_TIME;
    private final float mIntercept;

    void <init>(java.lang.String, int, float)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        java.lang.String r1;
        int i0;
        float f0;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<com.android.server.display.utils.AmbientFilter: void <init>(java.lang.String,int)>(r1, i0);

        specialinvoke r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: void validateArguments(float)>(f0);

        r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float mIntercept> = f0;

        return;
    }

    private float antiderivative(float)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        float f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        f0 := @parameter0: float;

        $f1 = 0.5F * f0;

        $f4 = $f1 * f0;

        $f2 = r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float mIntercept>;

        $f3 = $f2 * f0;

        $f5 = $f4 + $f3;

        return $f5;
    }

    private float calculateIntegral(float, float)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        float f0, f1, $f2, $f3, $f4;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = specialinvoke r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float antiderivative(float)>(f1);

        $f3 = specialinvoke r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float antiderivative(float)>(f0);

        $f4 = $f2 - $f3;

        return $f4;
    }

    private float[] getWeights(long, com.android.server.display.utils.RollingBuffer)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        long l0, l1, $l4, $l5, $l8, $l9;
        com.android.server.display.utils.RollingBuffer r1;
        float[] r2;
        float f0, $f1, $f2, $f3, $f4, f5, f6;
        int $i2, $i3, $i6, $i7, $i10, i11;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.server.display.utils.RollingBuffer;

        $i2 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: int size()>();

        r2 = newarray (float)[$i2];

        l1 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: long getTime(int)>(0);

        f5 = 0.0F;

        i11 = 1;

     label1:
        $i3 = lengthof r2;

        if i11 >= $i3 goto label2;

        $l8 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: long getTime(int)>(i11);

        $l9 = $l8 - l1;

        $f3 = (float) $l9;

        f0 = $f3 / 1000.0F;

        $i10 = i11 - 1;

        $f4 = specialinvoke r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float calculateIntegral(float,float)>(f5, f0);

        r2[$i10] = $f4;

        f5 = f0;

        i11 = i11 + 1;

        goto label1;

     label2:
        $l4 = 100L + l0;

        $l5 = $l4 - l1;

        $f1 = (float) $l5;

        $f2 = $f1 / 1000.0F;

        f6 = specialinvoke r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float calculateIntegral(float,float)>(f5, $f2);

        $i6 = lengthof r2;

        $i7 = $i6 - 1;

        r2[$i7] = f6;

        return r2;
    }

    private void validateArguments(float)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        float f0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        byte $b0;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        f0 := @parameter0: float;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label1;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("intercept must be a non-negative number");

        throw $r1;
    }

    public void dump(java.io.PrintWriter)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        java.io.PrintWriter r1;
        java.lang.StringBuilder $r3;
        float $f0;
        java.lang.String $r6;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.display.utils.AmbientFilter: void dump(java.io.PrintWriter)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    mIntercept=");

        $f0 = r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float mIntercept>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return;
    }

    protected float filter(long, com.android.server.display.utils.RollingBuffer)
    {
        com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter r0;
        long l0;
        com.android.server.display.utils.RollingBuffer r1;
        float[] r2;
        float f0, f1, $f2, $f3, $f4, f5, f6;
        boolean $z0;
        int $i1, $i3, $i4, i5;
        byte $b2;

        r0 := @this: com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.server.display.utils.RollingBuffer;

        $z0 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return -1.0F;

     label1:
        f5 = 0.0F;

        f6 = 0.0F;

        r2 = specialinvoke r0.<com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: float[] getWeights(long,com.android.server.display.utils.RollingBuffer)>(l0, r1);

        i5 = 0;

     label2:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label3;

        f0 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: float getValue(int)>(i5);

        f1 = r2[i5];

        $f4 = f1 * f0;

        f5 = f5 + $f4;

        f6 = f6 + f1;

        i5 = i5 + 1;

        goto label2;

     label3:
        $b2 = f6 cmpl 0.0F;

        if $b2 != 0 goto label4;

        $i3 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: int size()>();

        $i4 = $i3 - 1;

        $f3 = virtualinvoke r1.<com.android.server.display.utils.RollingBuffer: float getValue(int)>($i4);

        return $f3;

     label4:
        $f2 = f5 / f6;

        return $f2;
    }

    public static void <clinit>()
    {
        <com.android.server.display.utils.AmbientFilter$WeightedMovingAverageAmbientFilter: int PREDICTION_TIME> = 100;

        return;
    }
}
