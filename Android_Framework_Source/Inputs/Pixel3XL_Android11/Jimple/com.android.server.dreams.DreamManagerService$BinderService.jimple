final class com.android.server.dreams.DreamManagerService$BinderService extends android.service.dreams.IDreamManager$Stub
{
    final com.android.server.dreams.DreamManagerService this$0;

    private void <init>(com.android.server.dreams.DreamManagerService)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        com.android.server.dreams.DreamManagerService r1;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r1 := @parameter0: com.android.server.dreams.DreamManagerService;

        r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0> = r1;

        specialinvoke r0.<android.service.dreams.IDreamManager$Stub: void <init>()>();

        return;
    }

    void <init>(com.android.server.dreams.DreamManagerService, com.android.server.dreams.DreamManagerService$1)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        com.android.server.dreams.DreamManagerService r1;
        com.android.server.dreams.DreamManagerService$1 r2;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r1 := @parameter0: com.android.server.dreams.DreamManagerService;

        r2 := @parameter1: com.android.server.dreams.DreamManagerService$1;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService$BinderService: void <init>(com.android.server.dreams.DreamManagerService)>(r1);

        return;
    }

    public void awaken()
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        com.android.server.dreams.DreamManagerService $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r2, "android.permission.WRITE_DREAM_STATE");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1700(com.android.server.dreams.DreamManagerService)>($r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dream()
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        com.android.server.dreams.DreamManagerService $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r2, "android.permission.WRITE_DREAM_STATE");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1500(com.android.server.dreams.DreamManagerService)>($r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        long l0;
        com.android.server.dreams.DreamManagerService $r3, $r5;
        android.content.Context $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.io.FileDescriptor r7;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r7 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        $r4 = staticinvoke <com.android.server.dreams.DreamManagerService: android.content.Context access$800(com.android.server.dreams.DreamManagerService)>($r3);

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "DreamManagerService", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$900(com.android.server.dreams.DreamManagerService,java.io.PrintWriter)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void finishSelf(android.os.IBinder, boolean)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        boolean z0;
        long l0;
        java.lang.IllegalArgumentException $r1;
        com.android.server.dreams.DreamManagerService $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r4 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        if r4 == null goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1800(com.android.server.dreams.DreamManagerService,android.os.IBinder,boolean)>($r2, r4, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token must not be null");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void forceAmbientDisplayEnabled(boolean)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        boolean z0;
        long l0;
        com.android.server.dreams.DreamManagerService $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r2, "android.permission.DEVICE_POWER");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$2100(com.android.server.dreams.DreamManagerService,boolean)>($r3, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.content.ComponentName getDefaultDreamComponentForUser(int)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        com.android.server.dreams.DreamManagerService $r1, $r2;
        int $i1, $i2, i3, i4;
        java.lang.Throwable $r3;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        i3 := @parameter0: int;

        $r1 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r1, "android.permission.READ_DREAM_STATE");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i3, 0, 1, "getDefaultDreamComponent", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        r4 = staticinvoke <com.android.server.dreams.DreamManagerService: android.content.ComponentName access$1300(com.android.server.dreams.DreamManagerService,int)>($r2, i4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.content.ComponentName[] getDreamComponents()
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        int $i0;
        android.content.ComponentName[] $r1;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName[] getDreamComponentsForUser(int)>($i0);

        return $r1;
    }

    public android.content.ComponentName[] getDreamComponentsForUser(int)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        com.android.server.dreams.DreamManagerService $r1, $r2;
        int $i1, $i2, i3, i4;
        java.lang.Throwable $r3;
        android.content.ComponentName[] r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        i3 := @parameter0: int;

        $r1 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r1, "android.permission.READ_DREAM_STATE");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i3, 0, 1, "getDreamComponents", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        r4 = staticinvoke <com.android.server.dreams.DreamManagerService: android.content.ComponentName[] access$1100(com.android.server.dreams.DreamManagerService,int)>($r2, i4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDreaming()
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        boolean z0;
        com.android.server.dreams.DreamManagerService $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r2, "android.permission.READ_DREAM_STATE");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        z0 = staticinvoke <com.android.server.dreams.DreamManagerService: boolean access$1400(com.android.server.dreams.DreamManagerService)>($r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDreamComponents(android.content.ComponentName[])
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        int i0;
        long l1;
        com.android.server.dreams.DreamManagerService $r1;
        java.lang.Throwable $r2;
        android.content.ComponentName[] r3;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r3 := @parameter0: android.content.ComponentName[];

        $r1 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r1, "android.permission.WRITE_DREAM_STATE");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        virtualinvoke r0.<com.android.server.dreams.DreamManagerService$BinderService: void setDreamComponentsForUser(int,android.content.ComponentName[])>(i0, r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDreamComponentsForUser(int, android.content.ComponentName[])
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        com.android.server.dreams.DreamManagerService $r1, $r2;
        int $i1, $i2, i3, i4;
        java.lang.Throwable $r3;
        android.content.ComponentName[] r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        i3 := @parameter0: int;

        r4 := @parameter1: android.content.ComponentName[];

        $r1 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r1, "android.permission.WRITE_DREAM_STATE");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i1, $i2, i3, 0, 1, "setDreamComponents", null);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1200(com.android.server.dreams.DreamManagerService,int,android.content.ComponentName[])>($r2, i4, r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void startDozing(android.os.IBinder, int, int)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        int i0, i1;
        long l2;
        java.lang.IllegalArgumentException $r1;
        com.android.server.dreams.DreamManagerService $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r4 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r4 == null goto label4;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1900(com.android.server.dreams.DreamManagerService,android.os.IBinder,int,int)>($r2, r4, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token must not be null");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopDozing(android.os.IBinder)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        long l0;
        java.lang.IllegalArgumentException $r1;
        com.android.server.dreams.DreamManagerService $r2;
        java.lang.Throwable $r3;
        android.os.IBinder r4;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        r4 := @parameter0: android.os.IBinder;

        if r4 == null goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$2000(com.android.server.dreams.DreamManagerService,android.os.IBinder)>($r2, r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token must not be null");

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void testDream(int, android.content.ComponentName)
    {
        com.android.server.dreams.DreamManagerService$BinderService r0;
        int i0, $i2, $i3, i5, i6;
        long l1;
        java.lang.IllegalArgumentException $r1;
        com.android.server.dreams.DreamManagerService $r2, $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.content.ComponentName r11;

        r0 := @this: com.android.server.dreams.DreamManagerService$BinderService;

        i5 := @parameter0: int;

        r11 := @parameter1: android.content.ComponentName;

        if r11 == null goto label5;

        $r2 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1000(com.android.server.dreams.DreamManagerService,java.lang.String)>($r2, "android.permission.WRITE_DREAM_STATE");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i2, $i3, i5, 0, 1, "testDream", null);

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        if i6 == i0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Aborted attempt to start a test dream while a different  user is active: userId=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentUserId=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DreamManagerService", $r9);

        return;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = r0.<com.android.server.dreams.DreamManagerService$BinderService: com.android.server.dreams.DreamManagerService this$0>;

        staticinvoke <com.android.server.dreams.DreamManagerService: void access$1600(com.android.server.dreams.DreamManagerService,android.content.ComponentName,int)>($r3, r11, i6);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r10;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dream must not be null");

        throw $r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
