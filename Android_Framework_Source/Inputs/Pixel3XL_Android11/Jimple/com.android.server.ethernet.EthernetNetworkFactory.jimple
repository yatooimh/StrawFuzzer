public class com.android.server.ethernet.EthernetNetworkFactory extends android.net.NetworkFactory
{
    static final boolean DBG;
    private static final int NETWORK_SCORE;
    private static final java.lang.String NETWORK_TYPE;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private final java.util.concurrent.ConcurrentHashMap mTrackingInterfaces;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String NETWORK_TYPE> = "Ethernet";

        <com.android.server.ethernet.EthernetNetworkFactory: int NETWORK_SCORE> = 70;

        <com.android.server.ethernet.EthernetNetworkFactory: boolean DBG> = 1;

        $r0 = class "Lcom/android/server/ethernet/EthernetNetworkFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.os.Handler, android.content.Context, android.net.NetworkCapabilities)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.os.Handler r1;
        android.content.Context r2;
        android.net.NetworkCapabilities r3;
        android.os.Looper $r4;
        java.util.concurrent.ConcurrentHashMap $r5;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.net.NetworkCapabilities;

        $r4 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke r0.<android.net.NetworkFactory: void <init>(android.os.Looper,android.content.Context,java.lang.String,android.net.NetworkCapabilities)>($r4, r2, "Ethernet", r3);

        $r5 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces> = $r5;

        r0.<com.android.server.ethernet.EthernetNetworkFactory: android.os.Handler mHandler> = r1;

        r0.<com.android.server.ethernet.EthernetNetworkFactory: android.content.Context mContext> = r2;

        virtualinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: void setScoreFilter(int)>(70);

        return;
    }

    static java.lang.String access$600()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        return $r0;
    }

    static boolean lambda$getAvailableInterfaces$0(boolean, com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)
    {
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r0;
        boolean $z0, z1, z2;

        z1 := @parameter0: boolean;

        r0 := @parameter1: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState;

        $z0 = virtualinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean isRestricted()>();

        if $z0 == 0 goto label2;

        if z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    static int lambda$getAvailableInterfaces$1(com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState, com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)
    {
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r0, r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;
        int i0;

        r0 := @parameter0: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState;

        r1 := @parameter1: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState;

        $z0 = virtualinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean isRestricted()>();

        $z1 = virtualinvoke r1.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean isRestricted()>();

        i0 = staticinvoke <java.lang.Boolean: int compare(boolean,boolean)>($z0, $z1);

        if i0 != 0 goto label1;

        $r3 = r0.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: java.lang.String name>;

        $r2 = r1.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: java.lang.String name>;

        i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r2);

        goto label1;

     label1:
        return i0;
    }

    static java.lang.String lambda$getAvailableInterfaces$2(com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)
    {
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState;

        $r1 = r0.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: java.lang.String name>;

        return $r1;
    }

    static java.lang.String[] lambda$getAvailableInterfaces$3(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    private com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState networkForRequest(android.net.NetworkRequest)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.net.NetworkRequest r1;
        android.net.NetworkCapabilities $r2, $r6, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.concurrent.ConcurrentHashMap $r3, $r7;
        java.util.Collection $r4;
        java.lang.Object $r5, $r8;
        android.net.StringNetworkSpecifier $r10;
        java.lang.String r11, r16, $r19;
        android.net.NetworkSpecifier r12;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r13, r14;
        java.util.Iterator r15;
        java.lang.StringBuilder $r17;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        r11 = null;

        $r2 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        r12 = virtualinvoke $r2.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        $z0 = r12 instanceof android.net.StringNetworkSpecifier;

        if $z0 == 0 goto label1;

        $r10 = (android.net.StringNetworkSpecifier) r12;

        r11 = $r10.<android.net.StringNetworkSpecifier: java.lang.String specifier>;

     label1:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r11);

        if $z1 != 0 goto label3;

        $r7 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r11);

        r13 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r8;

        r14 = null;

        if r13 == null goto label2;

        r14 = null;

        $r9 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $z5 = virtualinvoke r13.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean satisfied(android.net.NetworkCapabilities)>($r9);

        if $z5 == 0 goto label2;

        r14 = r13;

     label2:
        goto label6;

     label3:
        $r3 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r15 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        r14 = null;

        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r5;

        $r6 = r1.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $z3 = virtualinvoke r14.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean satisfied(android.net.NetworkCapabilities)>($r6);

        if $z3 == 0 goto label5;

        $z4 = staticinvoke <com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean access$200(com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)>(r14);

        if $z4 == 0 goto label5;

        goto label6;

     label5:
        goto label4;

     label6:
        r16 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("networkForRequest, request: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", network: ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r16, $r19);

        return r14;
    }

    private void updateCapabilityFilter()
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.net.NetworkCapabilities $r3, $r12;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.util.Collection $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.lang.String $r9, r14;
        java.lang.Object $r10;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState $r11;
        java.util.Iterator r13;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        $r3 = new android.net.NetworkCapabilities;

        specialinvoke $r3.<android.net.NetworkCapabilities: void <init>()>();

        virtualinvoke $r3.<android.net.NetworkCapabilities: void clearAll()>();

        $r4 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        r13 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r10 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r10;

        $r12 = staticinvoke <com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: android.net.NetworkCapabilities access$100(com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)>($r11);

        virtualinvoke $r3.<android.net.NetworkCapabilities: void combineCapabilities(android.net.NetworkCapabilities)>($r12);

        goto label1;

     label2:
        r14 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateCapabilityFilter: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r14, $r9);

        virtualinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: void setCapabilityFilter(android.net.NetworkCapabilities)>($r3);

        return;
    }

    public boolean acceptRequest(android.net.NetworkRequest, int)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.net.NetworkRequest r1;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r7, r11;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState $r8;
        android.net.NetworkRequest$Type r9, r10;
        boolean z0;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        r9 = r1.<android.net.NetworkRequest: android.net.NetworkRequest$Type type>;

        r10 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type TRACK_DEFAULT>;

        z0 = 0;

        if r9 != r10 goto label1;

        return 0;

     label1:
        r11 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acceptRequest, request: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", score: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r11, $r7);

        $r8 = specialinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState networkForRequest(android.net.NetworkRequest)>(r1);

        if $r8 == null goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    void addInterface(java.lang.String, java.lang.String, android.net.NetworkCapabilities, android.net.IpConfiguration)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        java.lang.String r1, r3, $r11, $r21, r22, r24;
        android.net.IpConfiguration r2;
        java.util.concurrent.ConcurrentHashMap $r5, $r15;
        boolean $z0;
        java.lang.StringBuilder $r6, $r17;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState $r12;
        android.content.Context $r13;
        android.os.Handler $r14;
        android.net.NetworkCapabilities r23;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        r23 := @parameter2: android.net.NetworkCapabilities;

        r2 := @parameter3: android.net.IpConfiguration;

        $r5 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $z0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r24 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interface with name ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists.");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r24, $r21);

        return;

     label1:
        r3 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addInterface, iface: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", capabilities: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r3, $r11);

        $r12 = new com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState;

        $r14 = r0.<com.android.server.ethernet.EthernetNetworkFactory: android.os.Handler mHandler>;

        $r13 = r0.<com.android.server.ethernet.EthernetNetworkFactory: android.content.Context mContext>;

        specialinvoke $r12.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: void <init>(java.lang.String,java.lang.String,android.os.Handler,android.content.Context,android.net.NetworkCapabilities,android.net.NetworkFactory)>(r1, r22, $r14, $r13, r23, r0);

        virtualinvoke $r12.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: void setIpConfig(android.net.IpConfiguration)>(r2);

        $r15 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r12);

        specialinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: void updateCapabilityFilter()>();

        return;
    }

    void dump(java.io.FileDescriptor, com.android.internal.util.IndentingPrintWriter, java.lang.String[])
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        java.io.FileDescriptor r1;
        com.android.internal.util.IndentingPrintWriter r2;
        java.lang.String[] r3;
        java.util.Iterator r4;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r5;
        java.lang.Class $r7;
        java.lang.String $r8, $r20, r23;
        java.util.concurrent.ConcurrentHashMap $r10, $r14;
        java.util.Set $r11;
        boolean $z0;
        java.lang.Object $r13, $r15;
        java.lang.StringBuilder $r16;
        android.net.ip.IIpClient r24;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: com.android.internal.util.IndentingPrintWriter;

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<android.net.NetworkFactory: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Tracking interfaces:");

        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r10 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r11 = virtualinvoke $r10.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r13;

        $r14 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r15 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r23);

        r5 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r15;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r20);

        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r24 = staticinvoke <com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: android.net.ip.IIpClient access$400(com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)>(r5);

        if r24 == null goto label2;

        staticinvoke <android.net.ip.IpClientUtil: void dumpIpClient(android.net.ip.IIpClient,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r24, r1, r2, r3);

        goto label3;

     label2:
        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("IpClient is null");

     label3:
        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label1;

     label4:
        virtualinvoke r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    java.lang.String[] getAvailableInterfaces(boolean)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        boolean z0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.Collection $r2;
        java.util.stream.Stream $r3, $r5, $r7, $r9;
        com.android.server.ethernet.'-$$Lambda$EthernetNetworkFactory$EmftAjIay22czoGb8k_mrRGmnzg' $r6;
        com.android.server.ethernet.'-$$Lambda$EthernetNetworkFactory$KXwxO15KBNVyyYS-UjD-Flm1vQ0' $r8;
        com.android.server.ethernet.'-$$Lambda$EthernetNetworkFactory$TVQUJVMLGgbguTOK63vgn0fV1JA' $r10;
        java.lang.Object[] $r11;
        java.lang.String[] $r12;
        com.android.server.ethernet._$$Lambda$EthernetNetworkFactory$b1ndnzBiSX1ihvZw7GtATwTUsto r13;
        java.util.Comparator r14;
        java.util.function.Function r15;
        java.util.function.IntFunction r16;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.stream.Stream stream()>();

        r13 = new com.android.server.ethernet._$$Lambda$EthernetNetworkFactory$b1ndnzBiSX1ihvZw7GtATwTUsto;

        specialinvoke r13.<com.android.server.ethernet._$$Lambda$EthernetNetworkFactory$b1ndnzBiSX1ihvZw7GtATwTUsto: void <init>(boolean)>(z0);

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r13);

        $r6 = <com.android.server.ethernet._$$Lambda$EthernetNetworkFactory$EmftAjIay22czoGb8k_mrRGmnzg: com.android.server.ethernet.'-$$Lambda$EthernetNetworkFactory$EmftAjIay22czoGb8k_mrRGmnzg' INSTANCE>;

        r14 = (java.util.Comparator) $r6;

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream sorted(java.util.Comparator)>(r14);

        $r8 = <com.android.server.ethernet._$$Lambda$EthernetNetworkFactory$KXwxO15KBNVyyYS_UjD_Flm1vQ0: com.android.server.ethernet.'-$$Lambda$EthernetNetworkFactory$KXwxO15KBNVyyYS-UjD-Flm1vQ0' INSTANCE>;

        r15 = (java.util.function.Function) $r8;

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r15);

        $r10 = <com.android.server.ethernet._$$Lambda$EthernetNetworkFactory$TVQUJVMLGgbguTOK63vgn0fV1JA: com.android.server.ethernet.'-$$Lambda$EthernetNetworkFactory$TVQUJVMLGgbguTOK63vgn0fV1JA' INSTANCE>;

        r16 = (java.util.function.IntFunction) $r10;

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>(r16);

        $r12 = (java.lang.String[]) $r11;

        return $r12;
    }

    boolean hasInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        boolean $z0;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    protected void needNetworkFor(android.net.NetworkRequest, int)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.net.NetworkRequest r1;
        int i0;
        long l1, $l2;
        byte $b3;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r8;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r7;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        r7 = specialinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState networkForRequest(android.net.NetworkRequest)>(r1);

        if r7 != null goto label1;

        r8 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("needNetworkFor, failed to get a network for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r8, $r6);

        return;

     label1:
        $l2 = r7.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: long refCount>;

        l1 = $l2 + 1L;

        r7.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: long refCount> = l1;

        $b3 = l1 cmp 1L;

        if $b3 != 0 goto label2;

        staticinvoke <com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: void access$000(com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState)>(r7);

     label2:
        return;
    }

    protected void releaseNetworkFor(android.net.NetworkRequest)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.net.NetworkRequest r1;
        long l0, $l1;
        byte $b2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r8;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r7;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: android.net.NetworkRequest;

        r7 = specialinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState networkForRequest(android.net.NetworkRequest)>(r1);

        if r7 != null goto label1;

        r8 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("releaseNetworkFor, failed to get a network for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r8, $r6);

        return;

     label1:
        $l1 = r7.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: long refCount>;

        l0 = $l1 - 1L;

        r7.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: long refCount> = l0;

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label2;

        virtualinvoke r7.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: void stop()>();

     label2:
        return;
    }

    void removeInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Object $r2;
        java.lang.String r3;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r4;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r3);

        r4 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r2;

        if r4 == null goto label1;

        virtualinvoke r4.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: void stop()>();

     label1:
        specialinvoke r0.<com.android.server.ethernet.EthernetNetworkFactory: void updateCapabilityFilter()>();

        return;
    }

    boolean updateInterfaceLinkState(java.lang.String, boolean)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        java.lang.String r1, r2, $r10;
        boolean z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r4, $r11;
        java.lang.StringBuilder $r5;
        java.lang.Object $r12;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState $r13;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $z1 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r2 = <com.android.server.ethernet.EthernetNetworkFactory: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateInterfaceLinkState, iface: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", up: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r2, $r10);

        $r11 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r12 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r13 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r12;

        $z2 = virtualinvoke $r13.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: boolean updateLinkState(boolean)>(z0);

        return $z2;
    }

    void updateIpConfiguration(java.lang.String, android.net.IpConfiguration)
    {
        com.android.server.ethernet.EthernetNetworkFactory r0;
        android.net.IpConfiguration r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        java.lang.String r4;
        com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState r5;

        r0 := @this: com.android.server.ethernet.EthernetNetworkFactory;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.IpConfiguration;

        $r2 = r0.<com.android.server.ethernet.EthernetNetworkFactory: java.util.concurrent.ConcurrentHashMap mTrackingInterfaces>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState) $r3;

        if r5 == null goto label1;

        virtualinvoke r5.<com.android.server.ethernet.EthernetNetworkFactory$NetworkInterfaceState: void setIpConfig(android.net.IpConfiguration)>(r1);

     label1:
        return;
    }
}
