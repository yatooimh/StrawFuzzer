public class com.android.server.ethernet.EthernetServiceImpl extends android.net.IEthernetManager$Stub
{
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private android.os.Handler mHandler;
    private final java.util.concurrent.atomic.AtomicBoolean mStarted;
    private com.android.server.ethernet.EthernetTracker mTracker;

    public void <init>(android.content.Context)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.net.IEthernetManager$Stub: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.ethernet.EthernetServiceImpl: java.util.concurrent.atomic.AtomicBoolean mStarted> = $r2;

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext> = r1;

        return;
    }

    private boolean checkUseRestrictedNetworksPermission()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS");

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void enforceAccessPermission()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "EthernetService");

        return;
    }

    private void enforceUseRestrictedNetworksPermission()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS", "ConnectivityService");

        return;
    }

    public void addListener(android.net.IEthernetServiceListener)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.net.IEthernetServiceListener r1;
        java.lang.IllegalArgumentException $r2;
        com.android.server.ethernet.EthernetTracker $r3;
        boolean $z0;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.net.IEthernetServiceListener;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceAccessPermission()>();

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $z0 = specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: boolean checkUseRestrictedNetworksPermission()>();

        virtualinvoke $r3.<com.android.server.ethernet.EthernetTracker: void addListener(android.net.IEthernetServiceListener,boolean)>(r1, $z0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r2;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        java.lang.String[] r1;
        com.android.internal.util.IndentingPrintWriter $r2;
        android.content.Context $r3;
        int $i0, $i1, $i2;
        com.android.server.ethernet.EthernetTracker $r5;
        android.util.PrintWriterPrinter $r8;
        android.os.Handler $r9;
        java.lang.StringBuilder $r11;
        java.lang.String $r16;
        java.io.FileDescriptor r17;
        java.io.PrintWriter r18;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r17 := @parameter0: java.io.FileDescriptor;

        r18 := @parameter1: java.io.PrintWriter;

        r1 := @parameter2: java.lang.String[];

        $r2 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r18, "  ");

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump EthernetService from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r16);

        return;

     label1:
        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current Ethernet state: ");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r5 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        virtualinvoke $r5.<com.android.server.ethernet.EthernetTracker: void dump(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])>(r17, $r2, r1);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Handler:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r9 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler>;

        $r8 = new android.util.PrintWriterPrinter;

        specialinvoke $r8.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>($r2);

        virtualinvoke $r9.<android.os.Handler: void dump(android.util.Printer,java.lang.String)>($r8, "EthernetServiceImpl");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public java.lang.String[] getAvailableInterfaces() throws android.os.RemoteException
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        com.android.server.ethernet.EthernetTracker $r1;
        boolean $z0;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        $r1 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $z0 = specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: boolean checkUseRestrictedNetworksPermission()>();

        $r2 = virtualinvoke $r1.<com.android.server.ethernet.EthernetTracker: java.lang.String[] getInterfaces(boolean)>($z0);

        return $r2;
    }

    public android.net.IpConfiguration getConfiguration(java.lang.String)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        java.lang.String r1;
        com.android.server.ethernet.EthernetTracker $r2, $r4;
        boolean $z0;
        android.net.IpConfiguration $r3, $r5;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceAccessPermission()>();

        $r2 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $z0 = virtualinvoke $r2.<com.android.server.ethernet.EthernetTracker: boolean isRestrictedInterface(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceUseRestrictedNetworksPermission()>();

     label1:
        $r3 = new android.net.IpConfiguration;

        $r4 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $r5 = virtualinvoke $r4.<com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration getIpConfiguration(java.lang.String)>(r1);

        specialinvoke $r3.<android.net.IpConfiguration: void <init>(android.net.IpConfiguration)>($r5);

        return $r3;
    }

    public boolean isAvailable(java.lang.String)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        java.lang.String r1;
        com.android.server.ethernet.EthernetTracker $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceAccessPermission()>();

        $r2 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $z0 = virtualinvoke $r2.<com.android.server.ethernet.EthernetTracker: boolean isRestrictedInterface(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceUseRestrictedNetworksPermission()>();

     label1:
        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $z1 = virtualinvoke $r3.<com.android.server.ethernet.EthernetTracker: boolean isTrackingInterface(java.lang.String)>(r1);

        return $z1;
    }

    public void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.net.ITetheredInterfaceCallback r1;
        java.lang.String[] $r2;
        android.content.Context $r3;
        com.android.server.ethernet.EthernetTracker $r4;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "android.permission.NETWORK_SETTINGS";

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermissionOr(android.content.Context,java.lang.String[])>($r3, $r2);

        $r4 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        virtualinvoke $r4.<com.android.server.ethernet.EthernetTracker: void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)>(r1);

        return;
    }

    public void removeListener(android.net.IEthernetServiceListener)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.net.IEthernetServiceListener r1;
        java.lang.IllegalArgumentException $r2;
        com.android.server.ethernet.EthernetTracker $r3;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.net.IEthernetServiceListener;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceAccessPermission()>();

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        virtualinvoke $r3.<com.android.server.ethernet.EthernetTracker: void removeListener(android.net.IEthernetServiceListener)>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r2;
    }

    public void requestTetheredInterface(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.net.ITetheredInterfaceCallback r1;
        java.lang.String[] $r2;
        android.content.Context $r3;
        com.android.server.ethernet.EthernetTracker $r4;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "android.permission.NETWORK_SETTINGS";

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermissionOr(android.content.Context,java.lang.String[])>($r3, $r2);

        $r4 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        virtualinvoke $r4.<com.android.server.ethernet.EthernetTracker: void requestTetheredInterface(android.net.ITetheredInterfaceCallback)>(r1);

        return;
    }

    public void setConfiguration(java.lang.String, android.net.IpConfiguration)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        java.lang.String r1;
        android.net.IpConfiguration r2, $r6;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0, $z1;
        android.content.Context $r4;
        com.android.server.ethernet.EthernetTracker $r5, $r7;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.IpConfiguration;

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: java.util.concurrent.atomic.AtomicBoolean mStarted>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("EthernetServiceImpl", "System isn\'t ready enough to change ethernet configuration");

     label1:
        $r4 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r4);

        $r5 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $z1 = virtualinvoke $r5.<com.android.server.ethernet.EthernetTracker: boolean isRestrictedInterface(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.ethernet.EthernetServiceImpl: void enforceUseRestrictedNetworksPermission()>();

     label2:
        $r7 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        $r6 = new android.net.IpConfiguration;

        specialinvoke $r6.<android.net.IpConfiguration: void <init>(android.net.IpConfiguration)>(r2);

        virtualinvoke $r7.<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>(r1, $r6);

        return;
    }

    public void setIncludeTestInterfaces(boolean)
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        boolean z0;
        java.lang.String[] $r1;
        android.content.Context $r2;
        com.android.server.ethernet.EthernetTracker $r3;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "android.permission.NETWORK_SETTINGS";

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermissionOr(android.content.Context,java.lang.String[])>($r2, $r1);

        $r3 = r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker>;

        virtualinvoke $r3.<com.android.server.ethernet.EthernetTracker: void setIncludeTestInterfaces(boolean)>(z0);

        return;
    }

    public void start()
    {
        com.android.server.ethernet.EthernetServiceImpl r0;
        android.os.HandlerThread $r1;
        android.os.Handler $r2, $r5;
        android.os.Looper $r3;
        com.android.server.ethernet.EthernetTracker $r4;
        android.content.Context $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;

        r0 := @this: com.android.server.ethernet.EthernetServiceImpl;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EthernetServiceImpl", "Starting Ethernet service");

        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String)>("EthernetServiceThread");

        virtualinvoke $r1.<android.os.HandlerThread: void start()>();

        $r2 = new android.os.Handler;

        $r3 = virtualinvoke $r1.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler> = $r2;

        $r4 = new com.android.server.ethernet.EthernetTracker;

        $r6 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.content.Context mContext>;

        $r5 = r0.<com.android.server.ethernet.EthernetServiceImpl: android.os.Handler mHandler>;

        specialinvoke $r4.<com.android.server.ethernet.EthernetTracker: void <init>(android.content.Context,android.os.Handler)>($r6, $r5);

        r0.<com.android.server.ethernet.EthernetServiceImpl: com.android.server.ethernet.EthernetTracker mTracker> = $r4;

        virtualinvoke $r4.<com.android.server.ethernet.EthernetTracker: void start()>();

        $r7 = r0.<com.android.server.ethernet.EthernetServiceImpl: java.util.concurrent.atomic.AtomicBoolean mStarted>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.ethernet.EthernetServiceImpl: java.lang.String TAG> = "EthernetServiceImpl";

        return;
    }
}
