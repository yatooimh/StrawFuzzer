final class com.android.server.ethernet.EthernetTracker extends java.lang.Object
{
    private static final boolean DBG;
    private static final int INTERFACE_MODE_CLIENT;
    private static final int INTERFACE_MODE_SERVER;
    private static final java.lang.String TAG;
    private static final java.lang.String TEST_IFACE_REGEXP;
    private final com.android.server.ethernet.EthernetConfigStore mConfigStore;
    private final android.content.Context mContext;
    private java.lang.String mDefaultInterface;
    private int mDefaultInterfaceMode;
    private final com.android.server.ethernet.EthernetNetworkFactory mFactory;
    private final android.os.Handler mHandler;
    private java.lang.String mIfaceMatch;
    private boolean mIncludeTestInterfaces;
    private volatile android.net.IpConfiguration mIpConfigForDefaultInterface;
    private final java.util.concurrent.ConcurrentHashMap mIpConfigurations;
    private final android.os.RemoteCallbackList mListeners;
    private final android.os.INetworkManagementService mNMService;
    private final java.util.concurrent.ConcurrentHashMap mNetworkCapabilities;
    private final com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests;
    private boolean mTetheredInterfaceWasAvailable;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.ethernet.EthernetTracker: java.lang.String TEST_IFACE_REGEXP> = "testtap\\d+";

        <com.android.server.ethernet.EthernetTracker: int INTERFACE_MODE_SERVER> = 2;

        <com.android.server.ethernet.EthernetTracker: int INTERFACE_MODE_CLIENT> = 1;

        <com.android.server.ethernet.EthernetTracker: boolean DBG> = 1;

        $r0 = class "Lcom/android/server/ethernet/EthernetTracker;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.ethernet.EthernetTracker: java.lang.String TAG> = $r1;

        return;
    }

    void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.os.Handler r1;
        java.lang.String[] r2;
        int i0, i1;
        java.util.concurrent.ConcurrentHashMap $r3, $r4;
        android.os.RemoteCallbackList $r5;
        com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList $r6;
        android.os.IBinder $r7;
        android.os.INetworkManagementService $r8;
        android.content.res.Resources $r9;
        com.android.server.ethernet.EthernetConfigStore $r10;
        com.android.server.ethernet.EthernetNetworkFactory $r11;
        android.net.NetworkCapabilities $r12;
        java.lang.String $r13;
        android.content.Context r14;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r14 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i1 = 0;

        r0.<com.android.server.ethernet.EthernetTracker: boolean mIncludeTestInterfaces> = 0;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities> = $r3;

        $r4 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations> = $r4;

        $r5 = new android.os.RemoteCallbackList;

        specialinvoke $r5.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners> = $r5;

        $r6 = new com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList;

        specialinvoke $r6.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: void <init>(com.android.server.ethernet.EthernetTracker,com.android.server.ethernet.EthernetTracker$1)>(r0, null);

        r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests> = $r6;

        r0.<com.android.server.ethernet.EthernetTracker: int mDefaultInterfaceMode> = 1;

        r0.<com.android.server.ethernet.EthernetTracker: boolean mTetheredInterfaceWasAvailable> = 0;

        r0.<com.android.server.ethernet.EthernetTracker: android.content.Context mContext> = r14;

        r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler> = r1;

        $r7 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("network_management");

        $r8 = staticinvoke <android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>($r7);

        r0.<com.android.server.ethernet.EthernetTracker: android.os.INetworkManagementService mNMService> = $r8;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void updateIfaceMatchRegexp()>();

        $r9 = virtualinvoke r14.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236032);

        i0 = lengthof r2;

     label1:
        if i1 >= i0 goto label2;

        $r13 = r2[i1];

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void parseEthernetConfig(java.lang.String)>($r13);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r10 = new com.android.server.ethernet.EthernetConfigStore;

        specialinvoke $r10.<com.android.server.ethernet.EthernetConfigStore: void <init>()>();

        r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetConfigStore mConfigStore> = $r10;

        $r11 = new com.android.server.ethernet.EthernetNetworkFactory;

        $r12 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.NetworkCapabilities createNetworkCapabilities(boolean)>(1);

        specialinvoke $r11.<com.android.server.ethernet.EthernetNetworkFactory: void <init>(android.os.Handler,android.content.Context,android.net.NetworkCapabilities)>(r1, r14, $r12);

        r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory> = $r11;

        virtualinvoke $r11.<com.android.server.ethernet.EthernetNetworkFactory: void register()>();

        return;
    }

    static android.os.Handler access$100(com.android.server.ethernet.EthernetTracker)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.ethernet.EthernetTracker;

        $r1 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$200(com.android.server.ethernet.EthernetTracker)
    {
        com.android.server.ethernet.EthernetTracker r0;

        r0 := @parameter0: com.android.server.ethernet.EthernetTracker;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void maybeUntetherDefaultInterface()>();

        return;
    }

    static java.lang.String access$400()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        return $r0;
    }

    static void access$500(com.android.server.ethernet.EthernetTracker, java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void stopTrackingInterface(java.lang.String)>(r1);

        return;
    }

    static void access$600(com.android.server.ethernet.EthernetTracker, java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void maybeTrackInterface(java.lang.String)>(r1);

        return;
    }

    static void access$700(com.android.server.ethernet.EthernetTracker, java.lang.String, boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void updateInterfaceState(java.lang.String,boolean)>(r1, z0);

        return;
    }

    private void addInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, r2, r3, $r13, $r21, $r26, r30, r32;
        android.os.INetworkManagementService $r4, $r5;
        java.util.concurrent.ConcurrentHashMap $r6, $r8, $r15;
        java.lang.Object $r7, $r9, $r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r17, $r23;
        com.android.server.ethernet.EthernetNetworkFactory $r14;
        java.lang.Throwable $r22;
        android.net.InterfaceConfiguration r27, r28;
        android.net.NetworkCapabilities r34, r35, r36;
        int $i3;
        android.net.IpConfiguration r37, r38;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        r27 = null;

     label01:
        $r4 = r0.<com.android.server.ethernet.EthernetTracker: android.os.INetworkManagementService mNMService>;

        interfaceinvoke $r4.<android.os.INetworkManagementService: void setInterfaceUp(java.lang.String)>(r1);

        $r5 = r0.<com.android.server.ethernet.EthernetTracker: android.os.INetworkManagementService mNMService>;

        r28 = interfaceinvoke $r5.<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r1);

     label02:
        r27 = r28;

        goto label04;

     label03:
        $r22 := @caughtexception;

        r30 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error upping interface ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r30, $r26, $r22);

     label04:
        if r27 != null goto label05;

        r32 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null interface config for ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Bailing out.");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r32, $r21);

        return;

     label05:
        r2 = virtualinvoke r27.<android.net.InterfaceConfiguration: java.lang.String getHardwareAddress()>();

        $r6 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r34 = (android.net.NetworkCapabilities) $r7;

        r35 = r34;

        if r34 != null goto label06;

        $r15 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities>;

        $r16 = virtualinvoke $r15.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r36 = (android.net.NetworkCapabilities) $r16;

        r35 = r36;

        if r36 != null goto label06;

        $z1 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>("testtap\\d+");

        r35 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.NetworkCapabilities createDefaultNetworkCapabilities(boolean)>($z1);

     label06:
        $i3 = specialinvoke r0.<com.android.server.ethernet.EthernetTracker: int getInterfaceMode(java.lang.String)>(r1);

        if $i3 != 1 goto label08;

        $r8 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r37 = (android.net.IpConfiguration) $r9;

        r38 = r37;

        if r37 != null goto label07;

        r38 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration createDefaultIpConfiguration()>();

     label07:
        r3 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tracking interface in client mode: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r3, $r13);

        $r14 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        virtualinvoke $r14.<com.android.server.ethernet.EthernetNetworkFactory: void addInterface(java.lang.String,java.lang.String,android.net.NetworkCapabilities,android.net.IpConfiguration)>(r1, r2, r35, r38);

        goto label09;

     label08:
        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void maybeUpdateServerModeInterfaceState(java.lang.String,boolean)>(r1, 1);

     label09:
        $z0 = virtualinvoke r27.<android.net.InterfaceConfiguration: boolean hasFlag(java.lang.String)>("running");

        if $z0 == 0 goto label10;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void updateInterfaceState(java.lang.String,boolean)>(r1, 1);

     label10:
        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch java.lang.IllegalStateException from label01 to label02 with label03;
    }

    private static android.net.IpConfiguration createDefaultIpConfiguration()
    {
        android.net.IpConfiguration $r0;
        android.net.IpConfiguration$ProxySettings $r1;
        android.net.IpConfiguration$IpAssignment $r2;

        $r0 = new android.net.IpConfiguration;

        $r2 = <android.net.IpConfiguration$IpAssignment: android.net.IpConfiguration$IpAssignment DHCP>;

        $r1 = <android.net.IpConfiguration$ProxySettings: android.net.IpConfiguration$ProxySettings NONE>;

        specialinvoke $r0.<android.net.IpConfiguration: void <init>(android.net.IpConfiguration$IpAssignment,android.net.IpConfiguration$ProxySettings,android.net.StaticIpConfiguration,android.net.ProxyInfo)>($r2, $r1, null, null);

        return $r0;
    }

    private static android.net.NetworkCapabilities createDefaultNetworkCapabilities(boolean)
    {
        boolean z0;
        android.net.NetworkCapabilities r0;

        z0 := @parameter0: boolean;

        r0 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.NetworkCapabilities createNetworkCapabilities(boolean)>(0);

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(13);

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(11);

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(18);

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(20);

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(21);

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(7);

        goto label2;

     label1:
        virtualinvoke r0.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(12);

     label2:
        return r0;
    }

    private static android.net.NetworkCapabilities createNetworkCapabilities(boolean)
    {
        boolean z0;
        android.net.NetworkCapabilities $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.NetworkCapabilities createNetworkCapabilities(boolean,java.lang.String,java.lang.String)>(z0, null, null);

        return $r0;
    }

    static android.net.NetworkCapabilities createNetworkCapabilities(boolean, java.lang.String, java.lang.String)
    {
        boolean z0, $z1, $z2, $z3;
        android.net.NetworkCapabilities $r1;
        java.lang.Integer $r8, $r10;
        int $i0, i6, i7, i8, i9, i10;
        java.lang.Throwable $r14, $r20, $r25, $r31;
        java.lang.StringBuilder $r15, $r21, $r26, $r32, r40;
        java.lang.String $r18, $r24, $r30, $r36, r37, r38, r39, $r41, r43, r46, r49, r51, r54;
        java.lang.String[] r48;

        z0 := @parameter0: boolean;

        r37 := @parameter1: java.lang.String;

        r38 := @parameter2: java.lang.String;

        $r1 = new android.net.NetworkCapabilities;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>()>();

        if z0 == 0 goto label01;

        virtualinvoke $r1.<android.net.NetworkCapabilities: void clearAll()>();

     label01:
        i6 = 3;

        i7 = 3;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r38);

        if $z1 != 0 goto label08;

     label02:
        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r38);

        i8 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label03:
        if i8 == 4 goto label05;

        if i8 == 5 goto label05;

        if i8 != 6 goto label04;

        goto label05;

     label04:
        i6 = i8;

        goto label06;

     label05:
        r39 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override transport \'");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not supported. Defaulting to TRANSPORT_ETHERNET");

        $r41 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r39, $r41);

     label06:
        i7 = i6;

        goto label08;

     label07:
        $r31 := @caughtexception;

        r43 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override transport type \'");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be parsed. Defaulting to TRANSPORT_ETHERNET");

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r43, $r36);

        i7 = 3;

     label08:
        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(i7);

     label09:
        goto label11;

     label10:
        $r14 := @caughtexception;

        r46 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid NetworkCapability.TRANSPORT_* value. Defaulting to TRANSPORT_ETHERNET");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r46, $r18);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(3);

     label11:
        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setLinkUpstreamBandwidthKbps(int)>(100000);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setLinkDownstreamBandwidthKbps(int)>(100000);

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r37);

        if $z2 != 0 goto label18;

        r48 = virtualinvoke r37.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i9 = lengthof r48;

        i10 = 0;

     label12:
        if i10 >= i9 goto label18;

        r49 = r48[i10];

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r49);

        if $z3 != 0 goto label17;

     label13:
        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r49);

        $i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>($i0);

     label14:
        goto label17;

     label15:
        $r20 := @caughtexception;

        r51 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid NetworkCapability.NET_CAPABILITY_* value");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r51, $r24);

        goto label17;

     label16:
        $r25 := @caughtexception;

        r54 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capability \'");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' could not be parsed");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r54, $r30);

     label17:
        i10 = i10 + 1;

        goto label12;

     label18:
        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(18);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(20);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(21);

        return $r1;

        catch java.lang.NumberFormatException from label02 to label03 with label07;
        catch java.lang.NumberFormatException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label08 to label09 with label10;
        catch java.lang.NumberFormatException from label13 to label14 with label16;
        catch java.lang.IllegalArgumentException from label13 to label14 with label15;
    }

    private int getInterfaceMode(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, $r2;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $i0 = r0.<com.android.server.ethernet.EthernetTracker: int mDefaultInterfaceMode>;

        return $i0;

     label1:
        return 1;
    }

    public static void lambda$7ZSuSvoSqcExye5DLwv_gyq6gyM(com.android.server.ethernet.EthernetTracker)
    {
        com.android.server.ethernet.EthernetTracker r0;

        r0 := @parameter0: com.android.server.ethernet.EthernetTracker;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void trackAvailableInterfaces()>();

        return;
    }

    private void maybeTrackInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, $r2, $r7, $r8, $r12, $r13, r16, r18;
        boolean $z0, $z1, $z2;
        com.android.server.ethernet.EthernetNetworkFactory $r3;
        java.lang.StringBuilder $r4, $r9;
        android.net.IpConfiguration $r14, $r15;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mIfaceMatch>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>($r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        $z1 = virtualinvoke $r3.<com.android.server.ethernet.EthernetNetworkFactory: boolean hasInterface(java.lang.String)>(r1);

        if $z1 != 0 goto label5;

        $r8 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label2;

        goto label5;

     label2:
        r16 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maybeTrackInterface: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r16, $r12);

        $r13 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        if $r13 != null goto label3;

        r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface> = r1;

     label3:
        $r14 = r0.<com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration mIpConfigForDefaultInterface>;

        if $r14 == null goto label4;

        $r15 = r0.<com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration mIpConfigForDefaultInterface>;

        virtualinvoke r0.<com.android.server.ethernet.EthernetTracker: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>(r1, $r15);

        r0.<com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration mIpConfigForDefaultInterface> = null;

     label4:
        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void addInterface(java.lang.String)>(r1);

        return;

     label5:
        r18 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring already-tracked interface ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r18, $r7);

        return;
    }

    private void maybeUntetherDefaultInterface()
    {
        com.android.server.ethernet.EthernetTracker r0;
        com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList $r1;
        int $i0, $i1;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        $r1 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        $i0 = virtualinvoke $r1.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: int getRegisteredCallbackCount()>();

        if $i0 <= 0 goto label1;

        return;

     label1:
        $i1 = r0.<com.android.server.ethernet.EthernetTracker: int mDefaultInterfaceMode>;

        if $i1 != 1 goto label2;

        return;

     label2:
        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void setDefaultInterfaceMode(int)>(1);

        return;
    }

    private void maybeUpdateServerModeInterfaceState(java.lang.String, boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, r2, $r4, $r9, r14;
        boolean z0, $z1, $z2;
        int i0, i2;
        java.lang.StringBuilder $r5;
        com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList $r10, $r11, $r12;
        android.os.IInterface $r13;
        android.net.ITetheredInterfaceCallback r15;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.ethernet.EthernetTracker: boolean mTetheredInterfaceWasAvailable>;

        if z0 == $z1 goto label8;

        $r4 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label1;

        goto label8;

     label1:
        r2 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label2;

        r14 = "Tracking";

        goto label3;

     label2:
        r14 = "No longer tracking";

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" interface in server mode: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r2, $r9);

        $r10 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        i0 = virtualinvoke $r10.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: int beginBroadcast()>();

        i2 = 0;

     label4:
        if i2 >= i0 goto label7;

        $r12 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        $r13 = virtualinvoke $r12.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: android.os.IInterface getBroadcastItem(int)>(i2);

        r15 = (android.net.ITetheredInterfaceCallback) $r13;

        if z0 == 0 goto label5;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void notifyTetheredInterfaceAvailable(android.net.ITetheredInterfaceCallback,java.lang.String)>(r15, r1);

        goto label6;

     label5:
        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void notifyTetheredInterfaceUnavailable(android.net.ITetheredInterfaceCallback)>(r15);

     label6:
        i2 = i2 + 1;

        goto label4;

     label7:
        $r11 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        virtualinvoke $r11.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: void finishBroadcast()>();

        r0.<com.android.server.ethernet.EthernetTracker: boolean mTetheredInterfaceWasAvailable> = z0;

        return;

     label8:
        return;
    }

    private void notifyTetheredInterfaceAvailable(android.net.ITetheredInterfaceCallback, java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, $r3;
        android.os.RemoteException $r2;
        android.net.ITetheredInterfaceCallback r4;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r4 := @parameter0: android.net.ITetheredInterfaceCallback;

        r1 := @parameter1: java.lang.String;

     label1:
        interfaceinvoke r4.<android.net.ITetheredInterfaceCallback: void onAvailable(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Error sending tethered interface available callback", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyTetheredInterfaceUnavailable(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.os.RemoteException $r1;
        java.lang.String $r2;
        android.net.ITetheredInterfaceCallback r3;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r3 := @parameter0: android.net.ITetheredInterfaceCallback;

     label1:
        interfaceinvoke r3.<android.net.ITetheredInterfaceCallback: void onUnavailable()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, "Error sending tethered interface available callback", $r1);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void parseEthernetConfig(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String[] r1;
        java.lang.String r2, $r5, $r6, r9, r10, r11;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r3, $r7;
        android.net.NetworkCapabilities r12;
        android.net.IpConfiguration r13;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r9 := @parameter0: java.lang.String;

        r1 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(";", 4);

        r2 = r1[0];

        i0 = lengthof r1;

        r10 = null;

        if i0 <= 1 goto label1;

        r11 = r1[1];

        goto label2;

     label1:
        r11 = null;

     label2:
        $i1 = lengthof r1;

        if $i1 <= 3 goto label3;

        r10 = r1[3];

     label3:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r11);

        $z1 = 1 ^ $z0;

        r12 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.NetworkCapabilities createNetworkCapabilities(boolean,java.lang.String,java.lang.String)>($z1, r11, r10);

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r12);

        $i2 = lengthof r1;

        if $i2 <= 2 goto label4;

        $r5 = r1[2];

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z2 != 0 goto label4;

        $r6 = r1[2];

        r13 = staticinvoke <com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration parseStaticIpConfiguration(java.lang.String)>($r6);

        $r7 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        virtualinvoke $r7.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r13);

     label4:
        return;
    }

    static android.net.IpConfiguration parseStaticIpConfiguration(java.lang.String)
    {
        java.lang.String r0, $r3, $r13, $r22, $r25, r28, r30, r31;
        java.lang.String[] r1, r29, r33;
        int i0, $i1, i2, i4, i5, i6;
        android.net.StaticIpConfiguration $r2;
        android.net.IpConfiguration $r4;
        android.net.IpConfiguration$ProxySettings $r5;
        android.net.IpConfiguration$IpAssignment $r6;
        boolean $z0, $z1, $z4, $z5, $z6;
        java.lang.StringBuilder $r7, $r16;
        java.lang.IllegalArgumentException $r12, $r21;
        android.net.LinkAddress $r14;
        java.net.InetAddress $r15, $r26;
        java.util.ArrayList $r23, $r24;
        byte b3;

        r0 := @parameter0: java.lang.String;

        $r2 = new android.net.StaticIpConfiguration;

        specialinvoke $r2.<android.net.StaticIpConfiguration: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = lengthof r1;

        i2 = 0;

     label01:
        if i2 >= i0 goto label17;

        r28 = r1[i2];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r28);

        if $z0 == 0 goto label02;

        goto label15;

     label02:
        r29 = virtualinvoke r28.<java.lang.String: java.lang.String[] split(java.lang.String)>("=");

        $i1 = lengthof r29;

        if $i1 != 2 goto label16;

        r30 = r29[0];

        r31 = r29[1];

        b3 = -1;

        i4 = virtualinvoke r30.<java.lang.String: int hashCode()>();

        if i4 == -189118908 goto label07;

        if i4 == 3367 goto label06;

        if i4 == 99625 goto label05;

        if i4 == 1837548591 goto label04;

     label03:
        goto label08;

     label04:
        $z6 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("domains");

        if $z6 == 0 goto label03;

        b3 = 1;

        goto label08;

     label05:
        $z5 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("dns");

        if $z5 == 0 goto label03;

        b3 = 3;

        goto label08;

     label06:
        $z4 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("ip");

        if $z4 == 0 goto label03;

        b3 = 0;

        goto label08;

     label07:
        $z1 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("gateway");

        if $z1 == 0 goto label03;

        b3 = 2;

     label08:
        if b3 == 0 goto label14;

        if b3 == 1 goto label13;

        if b3 == 2 goto label12;

        if b3 != 3 goto label11;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        r33 = virtualinvoke r31.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i5 = lengthof r33;

        i6 = 0;

     label09:
        if i6 >= i5 goto label10;

        $r25 = r33[i6];

        $r26 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>($r25);

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

        i6 = i6 + 1;

        goto label09;

     label10:
        $r24 = $r2.<android.net.StaticIpConfiguration: java.util.ArrayList dnsServers>;

        virtualinvoke $r24.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r23);

        goto label15;

     label11:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected key: ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = new java.lang.IllegalArgumentException;

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label12:
        $r15 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r31);

        $r2.<android.net.StaticIpConfiguration: java.net.InetAddress gateway> = $r15;

        goto label15;

     label13:
        $r2.<android.net.StaticIpConfiguration: java.lang.String domains> = r31;

        goto label15;

     label14:
        $r14 = new android.net.LinkAddress;

        specialinvoke $r14.<android.net.LinkAddress: void <init>(java.lang.String)>(r31);

        $r2.<android.net.StaticIpConfiguration: android.net.LinkAddress ipAddress> = $r14;

     label15:
        i2 = i2 + 1;

        goto label01;

     label16:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected token: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label17:
        $r4 = new android.net.IpConfiguration;

        $r6 = <android.net.IpConfiguration$IpAssignment: android.net.IpConfiguration$IpAssignment STATIC>;

        $r5 = <android.net.IpConfiguration$ProxySettings: android.net.IpConfiguration$ProxySettings NONE>;

        specialinvoke $r4.<android.net.IpConfiguration: void <init>(android.net.IpConfiguration$IpAssignment,android.net.IpConfiguration$ProxySettings,android.net.StaticIpConfiguration,android.net.ProxyInfo)>($r6, $r5, $r2, null);

        return $r4;
    }

    private void postAndWaitForRunnable(java.lang.Runnable)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean runWithScissors(java.lang.Runnable,long)>(r1, 2000L);

        return;
    }

    private void removeInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;
        com.android.server.ethernet.EthernetNetworkFactory $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        virtualinvoke $r2.<com.android.server.ethernet.EthernetNetworkFactory: void removeInterface(java.lang.String)>(r1);

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void maybeUpdateServerModeInterfaceState(java.lang.String,boolean)>(r1, 0);

        return;
    }

    private void setDefaultInterfaceMode(int)
    {
        com.android.server.ethernet.EthernetTracker r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r6, r7, r8;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        i0 := @parameter0: int;

        r7 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting default interface mode to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r7, $r5);

        r0.<com.android.server.ethernet.EthernetTracker: int mDefaultInterfaceMode> = i0;

        r8 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        if r8 == null goto label1;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void removeInterface(java.lang.String)>(r8);

        $r6 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void addInterface(java.lang.String)>($r6);

     label1:
        return;
    }

    private void stopTrackingInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void removeInterface(java.lang.String)>(r1);

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface> = null;

     label1:
        return;
    }

    private void trackAvailableInterfaces()
    {
        com.android.server.ethernet.EthernetTracker r0;
        int i0, i2;
        java.lang.String r2, $r4, $r9;
        android.os.INetworkManagementService $r3;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        java.lang.String[] r10;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

     label1:
        $r3 = r0.<com.android.server.ethernet.EthernetTracker: android.os.INetworkManagementService mNMService>;

        r10 = interfaceinvoke $r3.<android.os.INetworkManagementService: java.lang.String[] listInterfaces()>();

        i0 = lengthof r10;

     label2:
        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

     label4:
        $r4 = r10[i2];

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void maybeTrackInterface(java.lang.String)>($r4);

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        r2 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get list of interfaces ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r2, $r9);

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch java.lang.IllegalStateException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch java.lang.IllegalStateException from label4 to label5 with label7;
    }

    private void updateIfaceMatchRegexp()
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r9;
        java.lang.String $r5, $r8, r15, r17;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        $r1 = r0.<com.android.server.ethernet.EthernetTracker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        r15 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(17039892);

        $z0 = r0.<com.android.server.ethernet.EthernetTracker: boolean mIncludeTestInterfaces>;

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("|");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("testtap\\d+");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label1:
        r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mIfaceMatch> = r15;

        r17 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interface match regexp set to \'");

        $r5 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mIfaceMatch>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r17, $r8);

        return;
    }

    private void updateInterfaceState(java.lang.String, boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;
        boolean z0, z1, $z2, $z3, z4;
        android.os.RemoteCallbackList $r3, $r4, $r5, $r8;
        android.os.IInterface $r6;
        android.net.IEthernetServiceListener $r7;
        java.lang.Object $r9;
        com.android.server.ethernet.EthernetTracker$ListenerInfo $r10;
        com.android.server.ethernet.EthernetNetworkFactory $r11;
        android.os.RemoteException $r12;
        int i0, i1, i2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 = specialinvoke r0.<com.android.server.ethernet.EthernetTracker: int getInterfaceMode(java.lang.String)>(r1);

        z4 = 1;

        if i0 != 1 goto label01;

        $r11 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        $z3 = virtualinvoke $r11.<com.android.server.ethernet.EthernetNetworkFactory: boolean updateInterfaceLinkState(java.lang.String,boolean)>(r1, z0);

        if $z3 == 0 goto label01;

        goto label02;

     label01:
        z4 = 0;

     label02:
        if z4 == 0 goto label11;

        z1 = virtualinvoke r0.<com.android.server.ethernet.EthernetTracker: boolean isRestrictedInterface(java.lang.String)>(r1);

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        i1 = virtualinvoke $r3.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i2 = 0;

     label03:
        if i2 >= i1 goto label10;

        if z1 == 0 goto label06;

     label04:
        $r8 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        $r9 = virtualinvoke $r8.<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)>(i2);

        $r10 = (com.android.server.ethernet.EthernetTracker$ListenerInfo) $r9;

        $z2 = $r10.<com.android.server.ethernet.EthernetTracker$ListenerInfo: boolean canUseRestrictedNetworks>;

        if $z2 != 0 goto label06;

     label05:
        goto label09;

     label06:
        $r5 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        $r6 = virtualinvoke $r5.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i2);

        $r7 = (android.net.IEthernetServiceListener) $r6;

        interfaceinvoke $r7.<android.net.IEthernetServiceListener: void onAvailabilityChanged(java.lang.String,boolean)>(r1, z0);

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

     label09:
        i2 = i2 + 1;

        goto label03;

     label10:
        $r4 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r4.<android.os.RemoteCallbackList: void finishBroadcast()>();

     label11:
        return;

        catch android.os.RemoteException from label04 to label05 with label08;
        catch android.os.RemoteException from label06 to label07 with label08;
    }

    void addListener(android.net.IEthernetServiceListener, boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.net.IEthernetServiceListener r1;
        boolean z0;
        com.android.server.ethernet.EthernetTracker$ListenerInfo $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: android.net.IEthernetServiceListener;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        $r2 = new com.android.server.ethernet.EthernetTracker$ListenerInfo;

        specialinvoke $r2.<com.android.server.ethernet.EthernetTracker$ListenerInfo: void <init>(boolean)>(z0);

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>(r1, $r2);

        return;
    }

    void dump(java.io.FileDescriptor, com.android.internal.util.IndentingPrintWriter, java.lang.String[])
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.io.FileDescriptor r1;
        com.android.internal.util.IndentingPrintWriter r2;
        java.lang.String[] r3;
        com.android.server.ethernet._$$Lambda$EthernetTracker$T4D8OHkX4EZuWhbuj_pmEWDlO2A $r4;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: com.android.internal.util.IndentingPrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = new com.android.server.ethernet._$$Lambda$EthernetTracker$T4D8OHkX4EZuWhbuj_pmEWDlO2A;

        specialinvoke $r4.<com.android.server.ethernet._$$Lambda$EthernetTracker$T4D8OHkX4EZuWhbuj_pmEWDlO2A: void <init>(com.android.server.ethernet.EthernetTracker,com.android.internal.util.IndentingPrintWriter,java.io.FileDescriptor,java.lang.String[])>(r0, r2, r1, r3);

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void postAndWaitForRunnable(java.lang.Runnable)>($r4);

        return;
    }

    java.lang.String[] getInterfaces(boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        boolean z0;
        com.android.server.ethernet.EthernetNetworkFactory $r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        $r2 = virtualinvoke $r1.<com.android.server.ethernet.EthernetNetworkFactory: java.lang.String[] getAvailableInterfaces(boolean)>(z0);

        return $r2;
    }

    android.net.IpConfiguration getIpConfiguration(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3;
        android.net.IpConfiguration $r4;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (android.net.IpConfiguration) $r3;

        return $r4;
    }

    boolean isRestrictedInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Object $r2;
        boolean $z0, z1;
        java.lang.String r3;
        android.net.NetworkCapabilities r4;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (android.net.NetworkCapabilities) $r2;

        if r4 == null goto label1;

        $z0 = virtualinvoke r4.<android.net.NetworkCapabilities: boolean hasCapability(int)>(13);

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isTrackingInterface(java.lang.String)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;
        com.android.server.ethernet.EthernetNetworkFactory $r2;
        boolean $z0;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        $z0 = virtualinvoke $r2.<com.android.server.ethernet.EthernetNetworkFactory: boolean hasInterface(java.lang.String)>(r1);

        return $z0;
    }

    public void lambda$dump$5$EthernetTracker(com.android.internal.util.IndentingPrintWriter, java.io.FileDescriptor, java.lang.String[])
    {
        com.android.server.ethernet.EthernetTracker r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.io.FileDescriptor r2;
        java.lang.String[] r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r8, $r10, $r13, $r15, $r19, $r24, $r29, $r46, $r54, r61, r64;
        java.lang.StringBuilder $r6, $r11, $r16, $r20, $r25, $r40, $r48;
        int $i0, $i1, $i2;
        com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList $r22;
        android.os.RemoteCallbackList $r27;
        java.util.concurrent.ConcurrentHashMap $r31, $r35, $r43, $r51;
        java.util.Set $r32, $r36;
        boolean $z0, $z1;
        com.android.server.ethernet.EthernetNetworkFactory $r38;
        java.lang.Object $r39, $r44, $r47, $r52;
        java.util.Iterator r60, r63;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.lang.String[];

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ethernet interface name filter: ");

        $r8 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mIfaceMatch>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default interface: ");

        $r13 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default interface mode: ");

        $i0 = r0.<com.android.server.ethernet.EthernetTracker: int mDefaultInterfaceMode>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tethered interface requests: ");

        $r22 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        $i1 = virtualinvoke $r22.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: int getRegisteredCallbackCount()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Listeners: ");

        $r27 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        $i2 = virtualinvoke $r27.<android.os.RemoteCallbackList: int getRegisteredCallbackCount()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r29);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("IP Configurations:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r31 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        $r32 = virtualinvoke $r31.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        r60 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r47 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (java.lang.String) $r47;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r51 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        $r52 = virtualinvoke $r51.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r61);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r54);

        goto label1;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network Capabilities:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r35 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities>;

        $r36 = virtualinvoke $r35.<java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>();

        r63 = interfaceinvoke $r36.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r63.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r39 = interfaceinvoke r63.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.lang.String) $r39;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r43 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mNetworkCapabilities>;

        $r44 = virtualinvoke $r43.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r64);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r46);

        goto label3;

     label4:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r38 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        virtualinvoke $r38.<com.android.server.ethernet.EthernetNetworkFactory: void dump(java.io.FileDescriptor,com.android.internal.util.IndentingPrintWriter,java.lang.String[])>(r2, r1, r3);

        return;
    }

    public void lambda$releaseTetheredInterface$4$EthernetTracker(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.net.ITetheredInterfaceCallback r1;
        com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        virtualinvoke $r2.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: boolean unregister(android.os.IInterface)>(r1);

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void maybeUntetherDefaultInterface()>();

        return;
    }

    public void lambda$requestTetheredInterface$3$EthernetTracker(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.net.ITetheredInterfaceCallback r1;
        com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList $r2;
        boolean $z0, $z1;
        int $i0;
        java.lang.String $r3;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList mTetheredInterfaceRequests>;

        $z0 = virtualinvoke $r2.<com.android.server.ethernet.EthernetTracker$TetheredInterfaceRequestList: boolean register(android.os.IInterface)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = r0.<com.android.server.ethernet.EthernetTracker: int mDefaultInterfaceMode>;

        if $i0 != 2 goto label3;

        $z1 = r0.<com.android.server.ethernet.EthernetTracker: boolean mTetheredInterfaceWasAvailable>;

        if $z1 == 0 goto label2;

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: java.lang.String mDefaultInterface>;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void notifyTetheredInterfaceAvailable(android.net.ITetheredInterfaceCallback,java.lang.String)>(r1, $r3);

     label2:
        return;

     label3:
        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void setDefaultInterfaceMode(int)>(2);

        return;
    }

    public void lambda$setIncludeTestInterfaces$1$EthernetTracker()
    {
        com.android.server.ethernet.EthernetTracker r0;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void trackAvailableInterfaces()>();

        return;
    }

    public void lambda$setIncludeTestInterfaces$2$EthernetTracker(boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        boolean z0;
        com.android.server.ethernet._$$Lambda$EthernetTracker$JtdvM_P17kghLWCt14AK4hnpqVg $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        z0 := @parameter0: boolean;

        r0.<com.android.server.ethernet.EthernetTracker: boolean mIncludeTestInterfaces> = z0;

        specialinvoke r0.<com.android.server.ethernet.EthernetTracker: void updateIfaceMatchRegexp()>();

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        $r1 = new com.android.server.ethernet._$$Lambda$EthernetTracker$JtdvM_P17kghLWCt14AK4hnpqVg;

        specialinvoke $r1.<com.android.server.ethernet._$$Lambda$EthernetTracker$JtdvM_P17kghLWCt14AK4hnpqVg: void <init>(com.android.server.ethernet.EthernetTracker)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void lambda$updateIpConfiguration$0$EthernetTracker(java.lang.String, android.net.IpConfiguration)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1;
        android.net.IpConfiguration r2;
        com.android.server.ethernet.EthernetNetworkFactory $r3;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.IpConfiguration;

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetNetworkFactory mFactory>;

        virtualinvoke $r3.<com.android.server.ethernet.EthernetNetworkFactory: void updateIpConfiguration(java.lang.String,android.net.IpConfiguration)>(r1, r2);

        return;
    }

    public void releaseTetheredInterface(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.net.ITetheredInterfaceCallback r1;
        com.android.server.ethernet._$$Lambda$EthernetTracker$aoVRgNZI_VIdlkvHAu9tbOiyUwI $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        $r2 = new com.android.server.ethernet._$$Lambda$EthernetTracker$aoVRgNZI_VIdlkvHAu9tbOiyUwI;

        specialinvoke $r2.<com.android.server.ethernet._$$Lambda$EthernetTracker$aoVRgNZI_VIdlkvHAu9tbOiyUwI: void <init>(com.android.server.ethernet.EthernetTracker,android.net.ITetheredInterfaceCallback)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    void removeListener(android.net.IEthernetServiceListener)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.net.IEthernetServiceListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: android.net.IEthernetServiceListener;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    public void requestTetheredInterface(android.net.ITetheredInterfaceCallback)
    {
        com.android.server.ethernet.EthernetTracker r0;
        android.net.ITetheredInterfaceCallback r1;
        com.android.server.ethernet._$$Lambda$EthernetTracker$toDDmaJbeq58I0574ytSBQB5iN4 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: android.net.ITetheredInterfaceCallback;

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        $r2 = new com.android.server.ethernet._$$Lambda$EthernetTracker$toDDmaJbeq58I0574ytSBQB5iN4;

        specialinvoke $r2.<com.android.server.ethernet._$$Lambda$EthernetTracker$toDDmaJbeq58I0574ytSBQB5iN4: void <init>(com.android.server.ethernet.EthernetTracker,android.net.ITetheredInterfaceCallback)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void setIncludeTestInterfaces(boolean)
    {
        com.android.server.ethernet.EthernetTracker r0;
        boolean z0;
        com.android.server.ethernet._$$Lambda$EthernetTracker$W7b4gQajem1KKCmaeF9emrge1f8 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        $r1 = new com.android.server.ethernet._$$Lambda$EthernetTracker$W7b4gQajem1KKCmaeF9emrge1f8;

        specialinvoke $r1.<com.android.server.ethernet._$$Lambda$EthernetTracker$W7b4gQajem1KKCmaeF9emrge1f8: void <init>(com.android.server.ethernet.EthernetTracker,boolean)>(r0, z0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    void start()
    {
        com.android.server.ethernet.EthernetTracker r0;
        com.android.server.ethernet.EthernetConfigStore $r2, $r3, $r5;
        android.net.IpConfiguration $r4, $r12;
        int $i0, i2;
        com.android.server.ethernet._$$Lambda$EthernetTracker$7ZSuSvoSqcExye5DLwv_gyq6gyM $r6;
        android.os.Handler $r7;
        java.util.concurrent.ConcurrentHashMap $r8;
        java.lang.Object $r9, $r11;
        java.lang.String $r10, $r18, r22;
        android.os.RemoteException $r14;
        java.lang.StringBuilder $r15;
        android.util.ArrayMap r19;
        android.os.INetworkManagementService r20;
        com.android.server.ethernet.EthernetTracker$InterfaceObserver r21;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        $r2 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetConfigStore mConfigStore>;

        virtualinvoke $r2.<com.android.server.ethernet.EthernetConfigStore: void read()>();

        $r3 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetConfigStore mConfigStore>;

        $r4 = virtualinvoke $r3.<com.android.server.ethernet.EthernetConfigStore: android.net.IpConfiguration getIpConfigurationForDefaultInterface()>();

        r0.<com.android.server.ethernet.EthernetTracker: android.net.IpConfiguration mIpConfigForDefaultInterface> = $r4;

        $r5 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetConfigStore mConfigStore>;

        r19 = virtualinvoke $r5.<com.android.server.ethernet.EthernetConfigStore: android.util.ArrayMap getIpConfigurations()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r19.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label2;

        $r8 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        $r9 = virtualinvoke r19.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r10 = (java.lang.String) $r9;

        $r11 = virtualinvoke r19.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r12 = (android.net.IpConfiguration) $r11;

        virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r12);

        i2 = i2 + 1;

        goto label1;

     label2:
        r20 = r0.<com.android.server.ethernet.EthernetTracker: android.os.INetworkManagementService mNMService>;

        r21 = new com.android.server.ethernet.EthernetTracker$InterfaceObserver;

        specialinvoke r21.<com.android.server.ethernet.EthernetTracker$InterfaceObserver: void <init>(com.android.server.ethernet.EthernetTracker,com.android.server.ethernet.EthernetTracker$1)>(r0, null);

        interfaceinvoke r20.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>(r21);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        r22 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not register InterfaceObserver ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r22, $r18);

     label5:
        $r7 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        $r6 = new com.android.server.ethernet._$$Lambda$EthernetTracker$7ZSuSvoSqcExye5DLwv_gyq6gyM;

        specialinvoke $r6.<com.android.server.ethernet._$$Lambda$EthernetTracker$7ZSuSvoSqcExye5DLwv_gyq6gyM: void <init>(com.android.server.ethernet.EthernetTracker)>(r0);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    void updateIpConfiguration(java.lang.String, android.net.IpConfiguration)
    {
        com.android.server.ethernet.EthernetTracker r0;
        java.lang.String r1, r3, $r10;
        android.net.IpConfiguration r2;
        java.lang.StringBuilder $r5;
        com.android.server.ethernet.EthernetConfigStore $r11;
        java.util.concurrent.ConcurrentHashMap $r12;
        com.android.server.ethernet._$$Lambda$EthernetTracker$WrfGoZ0jmrS_2ZYW4ZE33ZnJcBI $r14;
        android.os.Handler $r15;

        r0 := @this: com.android.server.ethernet.EthernetTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.IpConfiguration;

        r3 = <com.android.server.ethernet.EthernetTracker: java.lang.String TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateIpConfiguration, iface: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", cfg: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r3, $r10);

        $r11 = r0.<com.android.server.ethernet.EthernetTracker: com.android.server.ethernet.EthernetConfigStore mConfigStore>;

        virtualinvoke $r11.<com.android.server.ethernet.EthernetConfigStore: void write(java.lang.String,android.net.IpConfiguration)>(r1, r2);

        $r12 = r0.<com.android.server.ethernet.EthernetTracker: java.util.concurrent.ConcurrentHashMap mIpConfigurations>;

        virtualinvoke $r12.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $r15 = r0.<com.android.server.ethernet.EthernetTracker: android.os.Handler mHandler>;

        $r14 = new com.android.server.ethernet._$$Lambda$EthernetTracker$WrfGoZ0jmrS_2ZYW4ZE33ZnJcBI;

        specialinvoke $r14.<com.android.server.ethernet._$$Lambda$EthernetTracker$WrfGoZ0jmrS_2ZYW4ZE33ZnJcBI: void <init>(com.android.server.ethernet.EthernetTracker,java.lang.String,android.net.IpConfiguration)>(r0, r1, r2);

        virtualinvoke $r15.<android.os.Handler: boolean post(java.lang.Runnable)>($r14);

        return;
    }
}
