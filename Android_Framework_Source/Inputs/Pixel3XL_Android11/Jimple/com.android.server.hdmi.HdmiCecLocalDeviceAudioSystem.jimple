public class com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem extends com.android.server.hdmi.HdmiCecLocalDeviceSource
{
    private static final java.lang.String SHORT_AUDIO_DESCRIPTOR_CONFIG_PATH;
    private static final java.lang.String TAG;
    private static final boolean WAKE_ON_HOTPLUG;
    private boolean mArcEstablished;
    private boolean mArcIntentUsed;
    private final com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer;
    private final android.util.SparseArray mDeviceInfos;
    private final java.util.HashMap mPortIdToTvInputs;
    private java.util.List mSafeAllDeviceInfos;
    private boolean mSystemAudioControlFeatureEnabled;
    private final android.media.tv.TvInputManager$TvInputCallback mTvInputCallback;
    private final java.util.HashMap mTvInputsToDeviceInfo;
    private java.lang.Boolean mTvSystemAudioModeSupport;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.String TAG> = "HdmiCecLocalDeviceAudioSystem";

        <com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.String SHORT_AUDIO_DESCRIPTOR_CONFIG_PATH> = "/vendor/etc/sadConfig.xml";

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.hdmi.wake_on_hotplug", 0);

        <com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean WAKE_ON_HOTPLUG> = $z0;

        return;
    }

    protected void <init>(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiControlService r1, $r9, $r10;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r3, $r4;
        java.util.List $r5;
        android.util.SparseArray $r6;
        com.android.server.hdmi.DelayedMessageBuffer $r7;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$1 $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r1, 5);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Boolean mTvSystemAudioModeSupport> = null;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcEstablished> = 0;

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.hdmi.property_sytem_audio_device_arc_port", "0");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("tvinput");

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcIntentUsed> = $z0;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo> = $r4;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.List mSafeAllDeviceInfos> = $r5;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos> = $r6;

        $r7 = new com.android.server.hdmi.DelayedMessageBuffer;

        specialinvoke $r7.<com.android.server.hdmi.DelayedMessageBuffer: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer> = $r7;

        $r8 = new com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$1;

        specialinvoke $r8.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$1: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.media.tv.TvInputManager$TvInputCallback mTvInputCallback> = $r8;

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_cec_switch_enabled", 0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mRoutingControlFeatureEnabled> = $z1;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_system_audio_control_enabled", 1);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mSystemAudioControlFeatureEnabled> = $z2;

        return;
    }

    static void access$000(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem, java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addOrUpdateTvInput(java.lang.String)>(r1);

        return;
    }

    static void access$100(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem, java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeTvInput(java.lang.String)>(r1);

        return;
    }

    static void access$200(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setSystemAudioMode(boolean)>(z0);

        return;
    }

    private void addOrUpdateTvInput(java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService $r2;
        android.media.tv.TvInputManager $r3;
        java.util.HashMap $r4, $r7;
        int $i0, $i1;
        java.lang.Integer $r5;
        boolean $z0;
        java.lang.Throwable $r9;
        java.lang.String r10;
        android.media.tv.TvInputInfo r11;
        android.hardware.hdmi.HdmiDeviceInfo r12;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r10 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.media.tv.TvInputManager getTvInputManager()>();

        r11 = virtualinvoke $r3.<android.media.tv.TvInputManager: android.media.tv.TvInputInfo getTvInputInfo(java.lang.String)>(r10);

     label02:
        if r11 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r12 = virtualinvoke r11.<android.media.tv.TvInputInfo: android.hardware.hdmi.HdmiDeviceInfo getHdmiDeviceInfo()>();

     label06:
        if r12 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        $i0 = virtualinvoke r12.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r10);

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r12);

        $z0 = virtualinvoke r12.<android.hardware.hdmi.HdmiDeviceInfo: boolean isCecDevice()>();

        if $z0 == 0 goto label10;

        $i1 = virtualinvoke r12.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void processDelayedActiveSource(int)>($i1);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r9 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void clearDeviceInfoList()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.util.Iterator r1;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        android.util.SparseArray $r3, $r5;
        java.util.List $r4;
        java.lang.Object $r6;
        int $i0, $i1;
        com.android.server.hdmi.HdmiControlService $r7;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.util.List sparseArrayToList(android.util.SparseArray)>($r3);

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.hdmi.HdmiDeviceInfo) $r6;

        $i0 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if $i0 != $i1 goto label2;

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r2, 2);

        goto label1;

     label3:
        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        virtualinvoke $r5.<android.util.SparseArray: void clear()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateSafeDeviceInfoList()>();

        return;
    }

    private void enableAudioReturnChannel(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        com.android.server.hdmi.HdmiControlService $r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.hdmi.property_sytem_audio_device_arc_port", 0);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void enableAudioReturnChannel(int,boolean)>($i0, z0);

        return;
    }

    private byte[] getLpcmShortAudioDescriptor(android.media.AudioDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.media.AudioDeviceInfo r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        return null;
    }

    private byte[] getShortAudioDescriptorBytes(java.util.ArrayList)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        byte[] r1, $r3;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.Object $r2;
        java.util.ArrayList r4;
        java.util.Iterator r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r4 := @parameter0: java.util.ArrayList;

        $i0 = virtualinvoke r4.<java.util.ArrayList: int size()>();

        $i1 = $i0 * 3;

        r1 = newarray (byte)[$i1];

        i2 = 0;

        r5 = virtualinvoke r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (byte[]) $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, i2, 3);

        i2 = i2 + 3;

        goto label1;

     label2:
        return r1;
    }

    private byte[] getSupportedShortAudioDescriptor(android.media.AudioDeviceInfo, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.media.AudioDeviceInfo r1;
        int i0;
        byte[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        i0 := @parameter1: int;

        if i0 == 1 goto label1;

        return null;

     label1:
        $r2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getLpcmShortAudioDescriptor(android.media.AudioDeviceInfo)>(r1);

        return $r2;
    }

    private byte[] getSupportedShortAudioDescriptors(android.media.AudioDeviceInfo, int[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.media.AudioDeviceInfo r1;
        int[] r2;
        int i0, i1, $i2, $i3, $i4, i5;
        byte[] r4, $r6;
        java.util.ArrayList $r5;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.media.AudioDeviceInfo;

        r2 := @parameter1: int[];

        $r5 = new java.util.ArrayList;

        $i2 = lengthof r2;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i2);

        i0 = lengthof r2;

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        i1 = r2[i5];

        r4 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getSupportedShortAudioDescriptor(android.media.AudioDeviceInfo,int)>(r1, i1);

        if r4 == null goto label3;

        $i3 = lengthof r4;

        if $i3 != 3 goto label2;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        goto label3;

     label2:
        $r7 = newarray (java.lang.Object)[2];

        $i4 = lengthof r4;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r9;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void warning(java.lang.String,java.lang.Object[])>("Dropping Short Audio Descriptor with length %d for requested codec %x", $r7);

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        $r6 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getShortAudioDescriptorBytes(java.util.ArrayList)>($r5);

        return $r6;
    }

    private byte[] getSupportedShortAudioDescriptorsFromConfig(java.util.List, int[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int[] r1;
        java.util.Iterator r2, r17;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r3;
        java.util.ArrayList $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.List $r5, r16;
        byte[] $r6, $r12, $r13, r22;
        java.lang.Integer $r7, $r8, $r11;
        java.lang.Object $r9, $r10, $r14;
        java.lang.String $r15;
        com.android.server.hdmi.HdmiUtils$DeviceConfig r18;
        com.android.server.hdmi.HdmiUtils$CodecSad r21;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r16 := @parameter0: java.util.List;

        r1 := @parameter1: int[];

        r17 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label1:
        r18 = null;

        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.android.server.hdmi.HdmiUtils$DeviceConfig) $r14;

        $r15 = r18.<com.android.server.hdmi.HdmiUtils$DeviceConfig: java.lang.String name>;

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("VX_AUDIO_DEVICE_IN_HDMI_ARC");

        if $z3 == 0 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        if r18 != null goto label4;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", "sadConfig.xml does not have required device info for VX_AUDIO_DEVICE_IN_HDMI_ARC");

        $r13 = newarray (byte)[0];

        return $r13;

     label4:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = new java.util.ArrayList;

        $i0 = lengthof r1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        $r5 = r18.<com.android.server.hdmi.HdmiUtils$DeviceConfig: java.util.List supportedCodecs>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.android.server.hdmi.HdmiUtils$CodecSad) $r10;

        $i5 = r21.<com.android.server.hdmi.HdmiUtils$CodecSad: int audioCodec>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r12 = r21.<com.android.server.hdmi.HdmiUtils$CodecSad: byte[] sad>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        goto label5;

     label6:
        i6 = 0;

     label7:
        $i1 = lengthof r1;

        if i6 >= $i1 goto label9;

        $i2 = r1[i6];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z2 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r7);

        if $z2 == 0 goto label8;

        $i3 = r1[i6];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r22 = (byte[]) $r9;

        if r22 == null goto label8;

        $i4 = lengthof r22;

        if $i4 != 3 goto label8;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r22);

     label8:
        i6 = i6 + 1;

        goto label7;

     label9:
        $r6 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getShortAudioDescriptorBytes(java.util.ArrayList)>($r4);

        return $r6;
    }

    private android.media.AudioDeviceInfo getSystemAudioDeviceInfo()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1, $i2, i3;
        android.media.AudioDeviceInfo r1;
        com.android.server.hdmi.HdmiControlService $r2;
        android.content.Context $r3;
        java.lang.Object $r4, $r16;
        java.lang.Object[] $r5, $r7, $r10, $r17;
        java.lang.Integer $r6;
        java.lang.CharSequence $r8;
        android.media.AudioDevicePort $r9;
        int[] $r11;
        java.util.stream.IntStream $r12;
        com.android.server.hdmi.'-$$Lambda$Q3K33XXIADNcvSncyQ2-wHWHi4c' $r13;
        java.util.stream.Stream $r14;
        java.util.stream.Collector $r15;
        android.media.AudioManager r18;
        android.media.AudioDeviceInfo[] r19;
        java.util.function.IntFunction r20;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/media/AudioManager;");

        r18 = (android.media.AudioManager) $r4;

        if r18 != null goto label1;

        $r17 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void error(java.lang.String,java.lang.Object[])>("Error getting system audio device because AudioManager not available.", $r17);

        return null;

     label1:
        r19 = virtualinvoke r18.<android.media.AudioManager: android.media.AudioDeviceInfo[] getDevices(int)>(1);

        $r5 = newarray (java.lang.Object)[1];

        $i1 = lengthof r19;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r5[0] = $r6;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Found %d audio input devices", $r5);

        i0 = lengthof r19;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r1 = r19[i3];

        $r7 = newarray (java.lang.Object)[2];

        $r8 = virtualinvoke r1.<android.media.AudioDeviceInfo: java.lang.CharSequence getProductName()>();

        $r7[0] = $r8;

        $r9 = virtualinvoke r1.<android.media.AudioDeviceInfo: android.media.AudioDevicePort getPort()>();

        $r7[1] = $r9;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("%s at port %s", $r7);

        $r10 = newarray (java.lang.Object)[1];

        $r11 = virtualinvoke r1.<android.media.AudioDeviceInfo: int[] getEncodings()>();

        $r12 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>($r11);

        $r13 = <com.android.server.hdmi._$$Lambda$Q3K33XXIADNcvSncyQ2_wHWHi4c: com.android.server.hdmi.'-$$Lambda$Q3K33XXIADNcvSncyQ2-wHWHi4c' INSTANCE>;

        r20 = (java.util.function.IntFunction) $r13;

        $r14 = interfaceinvoke $r12.<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>(r20);

        $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(", ");

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15);

        $r10[0] = $r16;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Supported encodings are %s", $r10);

        $i2 = virtualinvoke r1.<android.media.AudioDeviceInfo: int getType()>();

        if $i2 != 10 goto label3;

        return r1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    private void handleRoutingChangeAndInformationForSwitch(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.hdmi.HdmiControlService $r1, $r2, $r3, $r10, $r11, $r12;
        com.android.server.hdmi.HdmiCecMessage $r4, r13;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.Object[] $r9;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r13 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        if $i1 != 0 goto label1;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>(0);

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i6 = virtualinvoke r13.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r12 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i7 = virtualinvoke $r12.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSourceFromOneDeviceType(int,int)>($i6, $i7);

        return;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        i0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>($i2);

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 != $i3 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current device can\'t assign valid physical addressto devices under it any more. It\'s physical address is ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>($r8, $r9);

        return;

     label2:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildRoutingInformation(int,int)>($i4, i0);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

        $i5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>($i5);

        return;
    }

    private void handleRoutingChangeAndInformationForSystemAudio()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>(17);

        return;
    }

    private void initArcOnFromAvr()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.ArcInitiationActionFromAvr $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/ArcTerminationActionFromAvr;");

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.hdmi.property_arc_support", 1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isDirectConnectToTv()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isArcEnabled()>();

        if $z2 != 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/ArcInitiationActionFromAvr;");

        $r1 = new com.android.server.hdmi.ArcInitiationActionFromAvr;

        specialinvoke $r1.<com.android.server.hdmi.ArcInitiationActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

     label1:
        return;
    }

    private void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int i0;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void invokeDeviceEventListeners(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, i0);

        return;
    }

    private void launchDeviceDiscovery()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean $z0;
        com.android.server.hdmi.DeviceDiscoveryAction $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$3 $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceDiscoveryAction;");

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", "Device Discovery Action is in progress. Restarting.");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceDiscoveryAction;");

     label1:
        $r1 = new com.android.server.hdmi.DeviceDiscoveryAction;

        $r2 = new com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$3;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$3: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem)>(r0);

        specialinvoke $r1.<com.android.server.hdmi.DeviceDiscoveryAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,com.android.server.hdmi.DeviceDiscoveryAction$DeviceDiscoveryCallback)>(r0, $r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

        return;
    }

    private void notifyArcStatusToAudioService(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        com.android.server.hdmi.HdmiControlService $r1;
        android.media.AudioManager $r2;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        i0 = (int) z0;

        virtualinvoke $r2.<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)>(-2147483616, i0, "", "");

        return;
    }

    private int[] parseAudioFormatCodes(byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        byte[] r1;
        int[] r2;
        int $i0, $i1, i2;
        byte b3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        r2 = newarray (int)[$i0];

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        b3 = r1[i2];

        if b3 < 1 goto label2;

        if b3 > 15 goto label2;

        goto label3;

     label2:
        b3 = 0;

     label3:
        r2[i2] = b3;

        i2 = i2 + 1;

        goto label1;

     label4:
        return r2;
    }

    private android.hardware.hdmi.HdmiDeviceInfo removeDeviceInfo(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.hardware.hdmi.HdmiDeviceInfo) $r3;

        if r1 == null goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

     label1:
        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateSafeDeviceInfoList()>();

        return r1;
    }

    private void removeTvInput(java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.Object r1, $r3, $r5;
        int i0;
        java.util.HashMap $r2, $r4, $r7, $r10;
        android.hardware.hdmi.HdmiDeviceInfo $r6;
        java.lang.Integer $r8;
        java.lang.Throwable $r12;
        java.lang.String r13;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r13 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        if $r3 != null goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        $r6 = (android.hardware.hdmi.HdmiDeviceInfo) $r5;

        i0 = virtualinvoke $r6.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r8);

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r13);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setSystemAudioMode(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r2;
        com.android.server.hdmi.HdmiControlService $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r12;
        com.android.server.hdmi.ArcInitiationActionFromAvr $r5;
        int $i0, $i1, i2, i3;
        java.lang.Throwable $r11;
        android.media.AudioManager $r13, r14;
        byte b4;
        java.lang.Object r15;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        i2 = $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress>;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        i3 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>(i2);

        if z0 == 0 goto label01;

        if i3 < 0 goto label01;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchToAudioInput()>();

     label01:
        $r12 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r13 = virtualinvoke $r12.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        $z7 = virtualinvoke $r13.<android.media.AudioManager: boolean isStreamMute(int)>(3);

        if $z7 != z0 goto label05;

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z6 = virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSystemProperty(java.lang.String,boolean)>("ro.hdmi.property_system_audio_mode_muting_enable", 1);

        if $z6 != 0 goto label02;

        if z0 == 0 goto label05;

     label02:
        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        r14 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        if z0 == 0 goto label03;

        b4 = 100;

        goto label04;

     label03:
        b4 = -100;

     label04:
        virtualinvoke r14.<android.media.AudioManager: void adjustStreamVolume(int,int,int)>(3, b4, 0);

     label05:
        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateAudioManagerForSystemAudio(boolean)>(z0);

        r15 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r15;

     label06:
        $z8 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z8 == z0 goto label07;

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: void setSystemAudioActivated(boolean)>(z0);

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: void announceSystemAudioModeChange(boolean)>(z0);

     label07:
        exitmonitor r15;

     label08:
        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcIntentUsed>;

        if $z1 == 0 goto label09;

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z5 = virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSystemProperty(java.lang.String,boolean)>("ro.hdmi.property_system_audio_mode_muting_enable", 1);

        if $z5 != 0 goto label09;

        if z0 != 0 goto label09;

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getLocalActivePort()>();

        if $i0 != 17 goto label09;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>($i1);

     label09:
        $z9 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.hdmi.property_arc_support", 1);

        if $z9 == 0 goto label10;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isDirectConnectToTv()>();

        if $z2 == 0 goto label10;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z3 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        if $z3 == 0 goto label10;

        $z4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/ArcInitiationActionFromAvr;");

        if $z4 != 0 goto label10;

        $r5 = new com.android.server.hdmi.ArcInitiationActionFromAvr;

        specialinvoke $r5.<com.android.server.hdmi.ArcInitiationActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r5);

     label10:
        return;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r15;

     label13:
        throw $r11;

        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void switchToHomeTvInput()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.content.Intent $r1, r5, r6;
        com.android.server.hdmi.HdmiControlService $r2;
        android.content.Context $r3;
        android.content.ActivityNotFoundException $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

     label1:
        r5 = new android.content.Intent;

        specialinvoke r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        $r1 = virtualinvoke r5.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        r6 = virtualinvoke $r1.<android.content.Intent: android.content.Intent setFlags(int)>(872480768);

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void startActivity(android.content.Intent)>(r6);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDeviceAudioSystem", "Can\'t find activity to switch to HOME", $r4);

     label4:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void switchToTvInput(java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.String r1, $r9;
        com.android.server.hdmi.HdmiControlService $r2;
        android.net.Uri $r3;
        android.content.Intent $r4, r11;
        android.content.ActivityNotFoundException $r5;
        java.lang.StringBuilder $r6;
        android.content.Context r10;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        r10 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        r11 = new android.content.Intent;

        $r3 = staticinvoke <android.media.tv.TvContract: android.net.Uri buildChannelUriForPassthroughInput(java.lang.String)>(r1);

        specialinvoke r11.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.VIEW", $r3);

        $r4 = virtualinvoke r11.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke r10.<android.content.Context: void startActivity(android.content.Intent)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find activity to switch to ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDeviceAudioSystem", $r9, $r5);

     label4:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private void updateAudioManagerForSystemAudio(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        java.lang.Object[] $r1;
        java.lang.Boolean $r2;
        com.android.server.hdmi.HdmiControlService $r3;
        android.media.AudioManager $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[0] = $r2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        $i0 = virtualinvoke $r4.<android.media.AudioManager: int setHdmiSystemAudioSupported(boolean)>(z0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r5;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("[A]UpdateSystemAudio mode[on=%b] output=[%X]", $r1);

        return;
    }

    private void updateSafeDeviceInfoList()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.Object r1;
        android.util.SparseArray $r2;
        java.lang.Throwable $r3;
        java.util.List r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        r4 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.util.List sparseArrayToList(android.util.SparseArray)>($r2);

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.List mSafeAllDeviceInfos> = r4;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void addCecDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.hardware.hdmi.HdmiDeviceInfo r1, r2;
        int $i0, $i1;
        com.android.server.hdmi.HdmiControlService $r3;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>(r1);

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if $i0 != $i1 goto label1;

        return;

     label1:
        if r2 != null goto label2;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 1);

        goto label3;

     label2:
        $z0 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r2, 2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 1);

     label3:
        return;
    }

    protected android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.hardware.hdmi.HdmiDeviceInfo r1, r2;
        com.android.server.hdmi.HdmiControlService $r3;
        int $i0, $i1, $i2, $i3;
        android.util.SparseArray $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void checkLogicalAddressConflictAndReallocate(int)>($i0);

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>($i1);

        if r2 == null goto label1;

        $i3 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo removeDeviceInfo(int)>($i3);

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        virtualinvoke $r4.<android.util.SparseArray: void append(int,java.lang.Object)>($i2, r1);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateSafeDeviceInfoList()>();

        return r2;
    }

    protected boolean checkSupportAndSetSystemAudioMode(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0, $z1, $z2;
        java.lang.Object[] $r2, $r11;
        java.lang.Boolean $r3, $r4;
        com.android.server.hdmi.HdmiControlService $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r10, r12;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioControlFeatureEnabled()>();

        if $z1 != 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot turn ");

        if z0 == 0 goto label1;

        r12 = "on";

        goto label2;

     label1:
        r12 = "off";

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("system audio mode because the System Audio Control feature is disabled.");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>($r10, $r11);

        return 0;

     label3:
        $r2 = newarray (java.lang.Object)[2];

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2[1] = $r4;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("System Audio Mode change[old:%b new:%b]", $r2);

        if z0 == 0 goto label4;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label4:
        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setSystemAudioMode(boolean)>(z0);

        return 1;
    }

    protected void disableDevice(boolean, com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1;
        android.media.tv.TvInputManager$TvInputCallback $r2;
        com.android.server.hdmi.HdmiControlService $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>(z0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.media.tv.TvInputManager$TvInputCallback mTvInputCallback>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void unregisterTvInputCallback(android.media.tv.TvInputManager$TvInputCallback)>($r2);

        return;
    }

    void doManualPortSwitching(int, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        com.android.server.hdmi.HdmiControlService $r1, $r2, $r4, $r5, $r6;
        boolean $z0, $z1;
        android.hardware.hdmi.HdmiDeviceInfo $r3;
        android.hardware.hdmi.IHdmiControlCallback r7;
        com.android.server.hdmi.HdmiCecMessage r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        r7 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isValidPortId(int)>(i0);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r7, 3);

        return;

     label1:
        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getLocalActivePort()>();

        if i0 != $i2 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r7, 0);

        return;

     label2:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z1 != 0 goto label3;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setRoutingPort(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setLocalActivePort(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r7, 6);

        return;

     label3:
        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        if $i3 == 0 goto label4;

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        i6 = virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>($i5);

        goto label5;

     label4:
        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        i6 = virtualinvoke $r3.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

     label5:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        i1 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>(i0);

        if i6 != i1 goto label6;

        return;

     label6:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setRoutingPort(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setLocalActivePort(int)>(i0);

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        r8 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildRoutingChange(int,int,int)>($i4, i6, i1);

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r8);

        return;
    }

    protected void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r3, $r7, $r11, $r16, $r20, $r24, $r28;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r6, $r10, $r15, $r19, $r23, $r27, $r31;
        java.lang.Boolean $r13;
        int $i0, $i1;
        java.util.HashMap $r32, $r33;
        android.util.SparseArray $r34;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("HdmiCecLocalDeviceAudioSystem:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isRoutingFeatureEnabled ");

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isRoutingControlFeatureEnabled()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSystemAudioControlFeatureEnabled: ");

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mSystemAudioControlFeatureEnabled>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mTvSystemAudioModeSupport: ");

        $r13 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Boolean mTvSystemAudioModeSupport>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mArcEstablished: ");

        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcEstablished>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mArcIntentUsed: ");

        $z3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcIntentUsed>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRoutingPort: ");

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getRoutingPort()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLocalActivePort: ");

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getLocalActivePort()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r31);

        $r32 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void dumpMap(com.android.internal.util.IndentingPrintWriter,java.lang.String,java.util.Map)>(r1, "mPortIdToTvInputs:", $r32);

        $r33 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void dumpMap(com.android.internal.util.IndentingPrintWriter,java.lang.String,java.util.Map)>(r1, "mTvInputsToDeviceInfo:", $r33);

        $r34 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void dumpSparseArray(com.android.internal.util.IndentingPrintWriter,java.lang.String,android.util.SparseArray)>(r1, "mDeviceInfos:", $r34);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        return;
    }

    protected int findKeyReceiverAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r1, $r2;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: boolean isValid()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i0 = $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        return $i0;

     label1:
        return -1;
    }

    android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        $i1 = staticinvoke <android.hardware.hdmi.HdmiDeviceInfo: int idForCecDevice(int)>(i0);

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r3 = (android.hardware.hdmi.HdmiDeviceInfo) $r2;

        return $r3;
    }

    protected int getPreferredAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.hdmi.addr.audiosystem", 15);

        return $i0;
    }

    java.util.List getSafeCecDevicesLocked()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.hardware.hdmi.HdmiDeviceInfo $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.List mSafeAllDeviceInfos>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.hardware.hdmi.HdmiDeviceInfo) $r5;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r3;
    }

    protected boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        byte[] $r3;
        com.android.server.hdmi.HdmiControlService $r4;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.DelayedMessageBuffer $r5, $r8, $r11;
        java.lang.Object[] $r6, $r9;
        java.lang.Integer $r7, $r10;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i1 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r3);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i3 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getLocalPortFromPhysicalAddress(int,int)>($i1, $i2);

        if $i3 != -1 goto label1;

        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z2;

     label1:
        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        if r2 != null goto label2;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r10;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Device info %X not found; buffering the command", $r9);

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r11.<com.android.server.hdmi.DelayedMessageBuffer: void add(com.android.server.hdmi.HdmiCecMessage)>(r1);

        goto label3;

     label2:
        $i4 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isInputReady(int)>($i4);

        if $z0 != 0 goto label4;

        $r6 = newarray (java.lang.Object)[1];

        $i5 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r6[0] = $r7;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Input not ready for device: %X; buffering the command", $r6);

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r8.<com.android.server.hdmi.DelayedMessageBuffer: void add(com.android.server.hdmi.HdmiCecMessage)>(r1);

     label3:
        return 1;

     label4:
        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r5.<com.android.server.hdmi.DelayedMessageBuffer: void removeActiveSource()>();

        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z1;
    }

    protected boolean handleGiveAudioStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioControlFeatureEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void reportAudioStatus(int)>($i0);

        goto label2;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

     label2:
        return 1;
    }

    protected boolean handleGiveSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r3;
        boolean z0, $z1, z2;
        int $i0, $i1, $i2;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        z2 = z0;

        if z0 != 0 goto label1;

        z2 = z0;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i0 != 0 goto label1;

        z2 = z0;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioInitiationActionFromAvr;");

        if $z1 == 0 goto label1;

        z2 = 1;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportSystemAudioMode(int,int,boolean)>($i1, $i2, z2);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

        return 1;
    }

    protected boolean handleInitiateArc(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        java.lang.Object[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("HdmiCecLocalDeviceAudioSystemStub handleInitiateArc", $r2);

        return 1;
    }

    protected boolean handleReportArcInitiate(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        java.lang.Object[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("HdmiCecLocalDeviceAudioSystemStub handleReportArcInitiate", $r2);

        return 1;
    }

    protected boolean handleReportArcTermination(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        java.lang.Object[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("HdmiCecLocalDeviceAudioSystemStub handleReportArcTermination", $r2);

        return 1;
    }

    protected boolean handleReportPhysicalAddress(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, i1, $i3, $i4, $i5;
        byte b2;
        byte[] $r2, $r3;
        boolean $z0;
        android.hardware.hdmi.HdmiDeviceInfo $r4, r13;
        com.android.server.hdmi.HdmiControlService $r5, $r6;
        com.android.server.hdmi.HdmiCecMessage $r7, r12;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r12 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r12.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        i1 = virtualinvoke r12.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = virtualinvoke r12.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        b2 = $r3[2];

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceDiscoveryAction;");

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignored while Device Discovery Action is in progress: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", $r11);

        return 1;

     label1:
        r13 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i1);

        if r13 == null goto label3;

        $i5 = virtualinvoke r13.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if $i5 == i0 goto label2;

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", "Device info exists. Not updating on Physical Address.");

        return 1;

     label3:
        $r4 = new android.hardware.hdmi.HdmiDeviceInfo;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>(i0);

        specialinvoke $r4.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String)>(i1, i0, $i3, b2, 16777215, "");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addCecDevice(android.hardware.hdmi.HdmiDeviceInfo)>($r4);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildGiveOsdNameCommand(int,int)>($i4, i1);

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r7);

        return 1;
    }

    protected boolean handleReportPowerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte b0;
        byte[] $r2;
        int $i1;
        short $s2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        b0 = $r2[0];

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $s2 = b0 & 255;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateDevicePowerStatus(int,int)>($i1, $s2);

        return 1;
    }

    protected boolean handleRequestArcInitiate(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r5, $r6;
        boolean $z0, $z1;
        com.android.server.hdmi.ArcInitiationActionFromAvr $r3;
        java.lang.Object[] $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/ArcInitiationActionFromAvr;");

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSystemProperty(java.lang.String,boolean)>("persist.sys.hdmi.property_arc_support", 1);

        if $z0 != 0 goto label1;

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 0);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isDirectConnectToTv()>();

        if $z1 != 0 goto label2;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("AVR device is not directly connected with TV", $r4);

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 1);

        goto label3;

     label2:
        $r3 = new com.android.server.hdmi.ArcInitiationActionFromAvr;

        specialinvoke $r3.<com.android.server.hdmi.ArcInitiationActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

     label3:
        return 1;
    }

    protected boolean handleRequestArcTermination(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0, $z1;
        com.android.server.hdmi.ArcTerminationActionFromAvr $r2;
        java.lang.Object[] $r3;
        com.android.server.hdmi.HdmiControlService $r4, $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.hdmi.property_arc_support", 1);

        if $z0 != 0 goto label1;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 0);

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isArcEnabled()>();

        if $z1 != 0 goto label2;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("ARC is not established between TV and AVR device", $r3);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 1);

        goto label3;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/ArcTerminationActionFromAvr;");

        $r2 = new com.android.server.hdmi.ArcTerminationActionFromAvr;

        specialinvoke $r2.<com.android.server.hdmi.ArcTerminationActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

     label3:
        return 1;
    }

    protected boolean handleRequestShortAudioDescriptor(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r7;
        java.io.FileInputStream r3;
        java.lang.Object[] $r4;
        boolean $z0, $z1, $z2;
        java.io.File $r5;
        int $i0, $i1, $i2, $i3;
        com.android.server.hdmi.HdmiControlService $r6, $r8, $r9, $r10, $r11;
        java.lang.Throwable $r12, $r15;
        java.lang.StringBuilder $r13, $r16;
        java.lang.String $r14, $r17;
        java.util.List r18, r19, r20;
        byte[] $r25, r27;
        int[] r26;
        android.media.AudioDeviceInfo r28;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("HdmiCecLocalDeviceAudioSystemStub handleRequestShortAudioDescriptor", $r4);

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioControlFeatureEnabled()>();

        if $z0 != 0 goto label01;

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

        return 1;

     label01:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z1 != 0 goto label02;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 1);

        return 1;

     label02:
        r18 = null;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("/vendor/etc/sadConfig.xml");

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label13;

        r18 = null;

        r19 = null;

     label03:
        r3 = new java.io.FileInputStream;

     label04:
        r18 = null;

        r19 = null;

     label05:
        specialinvoke r3.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

     label06:
        r18 = null;

        r19 = null;

     label07:
        r20 = staticinvoke <com.android.server.hdmi.HdmiUtils$ShortAudioDescriptorXmlParser: java.util.List parse(java.io.InputStream)>(r3);

     label08:
        r18 = r20;

        r19 = r20;

     label09:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label10:
        r18 = r20;

        goto label13;

     label11:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse file: ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDeviceAudioSystem", $r17, $r15);

        goto label13;

     label12:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading file: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDeviceAudioSystem", $r14, $r12);

        r18 = r19;

     label13:
        $r25 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        r26 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int[] parseAudioFormatCodes(byte[])>($r25);

        if r18 == null goto label14;

        $i3 = interfaceinvoke r18.<java.util.List: int size()>();

        if $i3 <= 0 goto label14;

        r27 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getSupportedShortAudioDescriptorsFromConfig(java.util.List,int[])>(r18, r26);

        goto label16;

     label14:
        r28 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.media.AudioDeviceInfo getSystemAudioDeviceInfo()>();

        if r28 != null goto label15;

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 5);

        return 1;

     label15:
        r27 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: byte[] getSupportedShortAudioDescriptors(android.media.AudioDeviceInfo,int[])>(r28, r26);

     label16:
        $i0 = lengthof r27;

        if $i0 != 0 goto label17;

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 3);

        goto label18;

     label17:
        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportShortAudioDescriptor(int,int,byte[])>($i1, $i2, r27);

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r7);

     label18:
        return 1;

        catch java.io.IOException from label03 to label04 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label11;
    }

    protected void handleRoutingChangeAndInformation(int, com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2;
        boolean $z0;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        i1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>(i0);

        if i1 <= 0 goto label1;

        return;

     label1:
        if i1 >= 0 goto label2;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void handleRoutingChangeAndInformationForSystemAudio()>();

        return;

     label2:
        if i1 != 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void handleRoutingChangeAndInformationForSwitch(com.android.server.hdmi.HdmiCecMessage)>(r1);

     label3:
        return;
    }

    protected boolean handleSetOsdName(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int $i0, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1, $r3, $r6, $r10, $r12, $r16, $r20, $r25;
        byte[] $r2;
        java.lang.StringBuilder $r4, $r13, $r17, $r22;
        android.hardware.hdmi.HdmiDeviceInfo $r11, r27;
        boolean $z0;
        java.lang.Throwable $r21;
        com.android.server.hdmi.HdmiCecMessage r26;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r26 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = virtualinvoke r26.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        r27 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>($i0);

        if r27 != null goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No source device info for <Set Osd Name>.");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", $r20);

        return 1;

     label1:
        $r1 = new java.lang.String;

        $r2 = virtualinvoke r26.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        specialinvoke $r1.<java.lang.String: void <init>(byte[],java.lang.String)>($r2, "US-ASCII");

     label2:
        $r3 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        if $r3 == null goto label3;

        $r12 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignore incoming <Set Osd Name> having same osd name:");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", $r16);

        return 1;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating device OSD name from ");

        $r6 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", $r10);

        $r11 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i2 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i3 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i4 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $i5 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        $i6 = virtualinvoke r27.<android.hardware.hdmi.HdmiDeviceInfo: int getVendorId()>();

        specialinvoke $r11.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String)>($i2, $i3, $i4, $i5, $i6, $r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void updateCecDevice(android.hardware.hdmi.HdmiDeviceInfo)>($r11);

        return 1;

     label4:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid <Set Osd Name> request:");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDeviceAudioSystem", $r25, $r21);

        return 1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    protected boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>($z0);

        if $z1 != 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

     label1:
        return 1;
    }

    void handleSystemAudioModeOnFromNonTvDevice(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r7;
        boolean $z0;
        com.android.server.hdmi.HdmiControlService $r2, $r3, $r6, $r9;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r4;
        int $i0, $i1, $i2;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$2 $r5;
        java.lang.Object[] $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioControlFeatureEnabled()>();

        if $z0 != 0 goto label1;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Cannot turn onsystem audio mode because the System Audio Control feature is disabled.", $r8);

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

        return;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i0 = $r4.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress>;

        $i1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>($i0);

        if $i1 == -1 goto label2;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setSystemAudioMode(boolean)>(1);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetSystemAudioMode(int,int,boolean)>($i2, 15, 1);

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r7);

        return;

     label2:
        $r5 = new com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$2;

        specialinvoke $r5.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$2: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem,com.android.server.hdmi.HdmiCecMessage)>(r0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void queryTvSystemAudioModeSupport(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback)>($r5);

        return;
    }

    protected boolean handleSystemAudioModeRequest(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r1, $r4;
        boolean $z1, $z2, z3, z4;
        com.android.server.hdmi.HdmiControlService $r2, $r10;
        com.android.server.hdmi.HdmiCecMessage $r3, r11;
        android.hardware.hdmi.HdmiDeviceInfo $r5, $r9;
        android.util.SparseArray $r6;
        java.util.List $r7;
        java.lang.Object $r8;
        java.util.Iterator r12;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r11 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = virtualinvoke r11.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i1 = lengthof $r1;

        if $i1 == 0 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        $i2 = virtualinvoke r11.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i2 == 0 goto label03;

        if z3 == 0 goto label04;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void handleSystemAudioModeOnFromNonTvDevice(com.android.server.hdmi.HdmiCecMessage)>(r11);

        return 1;

     label03:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setTvSystemAudioModeSupport(boolean)>(1);

     label04:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(z3);

        if $z1 != 0 goto label05;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r11, 4);

        return 1;

     label05:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetSystemAudioMode(int,int,boolean)>($i3, 15, z3);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

        if z3 == 0 goto label10;

        $r4 = virtualinvoke r11.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r4);

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i4 = virtualinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i5 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getLocalPortFromPhysicalAddress(int,int)>(i0, $i4);

        if $i5 == -1 goto label06;

        return 1;

     label06:
        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.util.SparseArray mDeviceInfos>;

        $r7 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.util.List sparseArrayToList(android.util.SparseArray)>($r6);

        r12 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label07:
        z4 = 0;

        $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r8 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.hardware.hdmi.HdmiDeviceInfo) $r8;

        $i6 = virtualinvoke $r9.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if $i6 != i0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        goto label07;

     label09:
        if z4 != 0 goto label10;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchInputOnReceivingNewActivePath(int)>(i0);

     label10:
        return 1;
    }

    protected boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>($z0);

        if $z1 != 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

     label1:
        return 1;
    }

    protected boolean isArcEnabled()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcEstablished>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected boolean isDirectConnectToTv()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        i0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i1 = 61440 & i0;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isInputReady(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0;
        java.lang.String r1;
        java.util.HashMap $r2, $r5;
        java.lang.Integer $r3;
        java.lang.Object $r4, $r6;
        android.hardware.hdmi.HdmiDeviceInfo $r7;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (java.lang.String) $r4;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (android.hardware.hdmi.HdmiDeviceInfo) $r6;

        if $r7 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isSystemAudioActivated()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        return $z0;
    }

    boolean isSystemAudioControlFeatureEnabled()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mSystemAudioControlFeatureEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void onAddressAllocated(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.hdmi.HdmiControlService $r2, $r3, $r5, $r6, $r9, $r10, $r11;
        com.android.server.hdmi.HdmiCecMessage $r4, $r7;
        android.media.tv.TvInputManager$TvInputCallback $r8;
        boolean $z0;
        android.hardware.hdmi.HdmiDeviceInfo $r12;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        if i1 != 0 goto label1;

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i8 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $r12 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i9 = virtualinvoke $r12.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSource(int,int,int)>($i8, $i9, 15);

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mDeviceType>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportPhysicalAddressCommand(int,int,int)>($i2, $i3, $i4);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i6 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: int getVendorId()>();

        $r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildDeviceVendorIdCommand(int,int)>($i5, $i6);

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r7);

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.media.tv.TvInputManager$TvInputCallback mTvInputCallback>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: void registerTvInputCallback(android.media.tv.TvInputManager$TvInputCallback)>($r8);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void initArcOnFromAvr()>();

        $i7 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.hdmi.system_audio_control_on_power_on", 0);

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.hdmi.last_system_audio_control", 1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void systemAudioControlOnPowerOn(int,boolean)>($i7, $z0);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void clearDeviceInfoList()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void launchDeviceDiscovery()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void startQueuedActions()>();

        return;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1, $i2;
        boolean z0, $z1, $z2, $z3;
        java.util.HashMap $r1, $r4, $r7;
        java.lang.Integer $r2, $r5;
        java.lang.Object $r3, $r6, $r8;
        com.android.server.hdmi.HdmiCecMessageCache $r9;
        com.android.server.hdmi.HdmiControlService $r10, $r11;
        android.hardware.hdmi.HdmiPortInfo $r12;
        java.lang.String r13;
        android.hardware.hdmi.HdmiDeviceInfo r14;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $z1 = <com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean WAKE_ON_HOTPLUG>;

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label1:
        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r12 = virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiPortInfo getPortInfo(int)>(i0);

        $i2 = virtualinvoke $r12.<android.hardware.hdmi.HdmiPortInfo: int getType()>();

        if $i2 != 1 goto label3;

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiCecMessageCache: void flushAll()>();

        if z0 != 0 goto label5;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z2 == 0 goto label2;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Boolean mTvSystemAudioModeSupport> = null;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(0);

     label2:
        $z3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isArcEnabled()>();

        if $z3 == 0 goto label5;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setArcStatus(boolean)>(0);

        goto label5;

     label3:
        if z0 != 0 goto label5;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 == null goto label5;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        r13 = (java.lang.String) $r6;

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mTvInputsToDeviceInfo>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (android.hardware.hdmi.HdmiDeviceInfo) $r8;

        if r14 != null goto label4;

        return;

     label4:
        $i1 = virtualinvoke r14.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeCecDevice(int)>($i1);

     label5:
        return;
    }

    protected void onStandby(boolean, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0, $z1;
        int i0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void setActiveSource(int,int)>(-1, 65535);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Boolean mTvSystemAudioModeSupport> = null;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z1 == 0 goto label3;

     label2:
        r5 = "true";

        goto label4;

     label3:
        r5 = "false";

     label4:
        virtualinvoke r2.<com.android.server.hdmi.HdmiControlService: void writeStringSystemProperty(java.lang.String,java.lang.String)>("persist.sys.hdmi.last_system_audio_control", r5);

        exitmonitor r1;

     label5:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void terminateSystemAudioMode()>();

        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void onSystemAduioControlFeatureSupportChanged(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setSystemAudioControlFeatureEnabled(boolean)>(z0);

        if z0 == 0 goto label1;

        $r1 = new com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        specialinvoke $r1.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

     label1:
        return;
    }

    void processDelayedActiveSource(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0;
        com.android.server.hdmi.DelayedMessageBuffer $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r1.<com.android.server.hdmi.DelayedMessageBuffer: void processActiveSource(int)>(i0);

        return;
    }

    void queryTvSystemAudioModeSupport(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback r1;
        java.lang.Boolean r2;
        boolean $z0;
        com.android.server.hdmi.DetectTvSystemAudioModeSupportAction $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback;

        r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Boolean mTvSystemAudioModeSupport>;

        if r2 != null goto label1;

        $r3 = new com.android.server.hdmi.DetectTvSystemAudioModeSupportAction;

        specialinvoke $r3.<com.android.server.hdmi.DetectTvSystemAudioModeSupportAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback)>(r0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

        goto label2;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        interfaceinvoke r1.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback: void onResult(boolean)>($z0);

     label2:
        return;
    }

    final void removeCecDevice(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        com.android.server.hdmi.HdmiCecMessageCache $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $i1 = staticinvoke <android.hardware.hdmi.HdmiDeviceInfo: int idForCecDevice(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo removeDeviceInfo(int)>($i1);

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecMessageCache: void flushMessagesFrom(int)>(i0);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 2);

        return;
    }

    void reportAudioStatus(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, i1, i2, i3, i4, $i5;
        boolean z0, $z1;
        com.android.server.hdmi.HdmiControlService $r1, $r2, $r4, $r6, $r8, $r15;
        android.media.AudioManager $r3, $r5, $r7, $r9;
        java.lang.Object[] $r10;
        java.lang.Integer $r11, $r12, $r13, $r14;
        com.android.server.hdmi.HdmiCecMessage $r16;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        i1 = virtualinvoke $r3.<android.media.AudioManager: int getStreamVolume(int)>(3);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        z0 = virtualinvoke $r5.<android.media.AudioManager: boolean isStreamMute(int)>(3);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r7 = virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        i2 = virtualinvoke $r7.<android.media.AudioManager: int getStreamMaxVolume(int)>(3);

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r9 = virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        i3 = virtualinvoke $r9.<android.media.AudioManager: int getStreamMinVolume(int)>(3);

        i4 = staticinvoke <com.android.server.hdmi.VolumeControlAction: int scaleToCecVolume(int,int)>(i1, i2);

        $r10 = newarray (java.lang.Object)[4];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r10[1] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10[2] = $r13;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r10[3] = $r14;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Reporting volume %d (%d-%d) as CEC volume %d", $r10);

        $r15 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r16 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportAudioStatus(int,int,int,boolean)>($i5, i0, i4, z0);

        virtualinvoke $r15.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r16);

        return;
    }

    protected void routeToInputFromPortId(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0;
        boolean $z0, $z1;
        java.lang.Object[] $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isRoutingControlFeatureEnabled()>();

        if $z0 != 0 goto label1;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Routing Control Feature is not enabled.", $r1);

        return;

     label1:
        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcIntentUsed>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToTvInputFromPortId(int)>(i0);

     label2:
        return;
    }

    protected void routeToTvInputFromPortId(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, $i1;
        java.lang.Object[] $r1, $r6, $r14;
        com.android.server.hdmi.HdmiControlService $r2, $r8;
        java.util.HashMap $r3;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        java.lang.String $r7, $r13, r16;
        boolean $z0;
        java.lang.StringBuilder $r9;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        if i0 < 0 goto label7;

        if i0 < 21 goto label1;

        goto label7;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int getLocalActivePort()>();

        if $i1 != i0 goto label2;

        if i0 == 17 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not switching to the same port ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" except for arc");

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>($r13, $r14);

        return;

     label2:
        if i0 != 0 goto label3;

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchToHomeTvInput()>();

        goto label5;

     label3:
        if i0 != 17 goto label4;

        $r7 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.hdmi.property_sytem_audio_device_arc_port");

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchToTvInput(java.lang.String)>($r7);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setLocalActivePort(int)>(i0);

        return;

     label4:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.util.HashMap mPortIdToTvInputs>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r16 = (java.lang.String) $r5;

        if r16 == null goto label6;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void switchToTvInput(java.lang.String)>(r16);

     label5:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setLocalActivePort(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setRoutingPort(int)>(i0);

        return;

     label6:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Port number does not match any Tv Input.", $r6);

        return;

     label7:
        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Invalid port number for Tv Input switching.", $r1);

        return;
    }

    void setArcStatus(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0, $z1;
        java.lang.Object[] $r1;
        java.lang.Boolean $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = newarray (java.lang.Object)[2];

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcEstablished>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[1] = $r3;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Set Arc Status[old:%b new:%b]", $r1);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void enableAudioReturnChannel(boolean)>(z0);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void notifyArcStatusToAudioService(boolean)>(z0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mArcEstablished> = z0;

        return;
    }

    protected void setPreferredAddress(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0;
        com.android.server.hdmi.HdmiControlService $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void writeStringSystemProperty(java.lang.String,java.lang.String)>("persist.sys.hdmi.addr.audiosystem", $r2);

        return;
    }

    void setRoutingControlFeatureEnables(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mRoutingControlFeatureEnabled> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setSystemAudioControlFeatureEnabled(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mSystemAudioControlFeatureEnabled> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setTvSystemAudioModeSupport(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: java.lang.Boolean mTvSystemAudioModeSupport> = $r1;

        return;
    }

    protected void switchInputOnReceivingNewActivePath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0, $z1;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        i1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>(i0);

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z0 == 0 goto label1;

        if i1 >= 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>(17);

        goto label2;

     label1:
        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean mIsSwitchDevice>;

        if $z1 == 0 goto label2;

        if i1 < 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void routeToInputFromPortId(int)>(i1);

     label2:
        return;
    }

    protected void switchToAudioInput()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        return;
    }

    protected void systemAudioControlOnPowerOn(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0;
        boolean z0, $z1;
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 == 0 goto label1;

        if i0 != 1 goto label2;

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioControlFeatureEnabled()>();

        if $z1 == 0 goto label2;

     label1:
        $r1 = new com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        specialinvoke $r1.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

     label2:
        return;
    }

    protected void terminateSystemAudioMode()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        boolean $z0, $z1;
        int $i0;
        com.android.server.hdmi.HdmiControlService $r1;
        com.android.server.hdmi.HdmiCecMessage $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioInitiationActionFromAvr;");

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean isSystemAudioActivated()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(0);

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        $r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetSystemAudioMode(int,int,boolean)>($i0, 15, 0);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r2);

     label2:
        return;
    }

    final void updateCecDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        android.hardware.hdmi.HdmiDeviceInfo r1, r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void assertRunOnServiceThread()>();

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>(r1);

        if r2 != null goto label1;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 1);

        goto label2;

     label1:
        $z0 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 3);

     label2:
        return;
    }

    protected void updateDevicePowerStatus(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        android.hardware.hdmi.HdmiDeviceInfo r6, r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        if r6 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not update power status of non-existing device:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceAudioSystem", $r5);

        return;

     label1:
        $i2 = virtualinvoke r6.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        if $i2 != i1 goto label2;

        return;

     label2:
        r8 = staticinvoke <com.android.server.hdmi.HdmiUtils: android.hardware.hdmi.HdmiDeviceInfo cloneHdmiDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo,int)>(r6, i1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>(r8);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r8, 3);

        return;
    }
}
