class com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock extends java.lang.Object implements com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock
{
    private final android.os.PowerManager$WakeLock mWakeLock;
    final com.android.server.hdmi.HdmiCecLocalDevicePlayback this$0;

    public void <init>(com.android.server.hdmi.HdmiCecLocalDevicePlayback)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock r0;
        com.android.server.hdmi.HdmiControlService $r1;
        android.os.PowerManager $r2;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r3;
        android.os.PowerManager$WakeLock r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock;

        r3 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: com.android.server.hdmi.HdmiCecLocalDevicePlayback this$0> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = r3.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager getPowerManager()>();

        r4 = virtualinvoke $r2.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "HdmiCecLocalDevicePlayback");

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: android.os.PowerManager$WakeLock mWakeLock> = r4;

        virtualinvoke r4.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        return;
    }

    public void acquire()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock r0;
        android.os.PowerManager$WakeLock $r1;
        java.lang.Object[] $r2;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r3;
        boolean $z0;
        java.lang.Boolean $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void acquire()>();

        $r2 = newarray (java.lang.Object)[1];

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: com.android.server.hdmi.HdmiCecLocalDevicePlayback this$0>;

        $z0 = $r3.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2[0] = $r4;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("active source: %b. Wake lock acquired", $r2);

        return;
    }

    public boolean isHeld()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock r0;
        android.os.PowerManager$WakeLock $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        return $z0;
    }

    public void release()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock r0;
        android.os.PowerManager$WakeLock $r1;
        java.lang.Object[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Wake lock released", $r2);

        return;
    }
}
