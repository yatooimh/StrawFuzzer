public class com.android.server.hdmi.HdmiCecLocalDevicePlayback extends com.android.server.hdmi.HdmiCecLocalDeviceSource
{
    private static final boolean SET_MENU_LANGUAGE;
    private static final java.lang.String TAG;
    private boolean mAutoTvOff;
    private int mLocalActivePath;
    protected java.lang.String mPlaybackDeviceActionOnRoutingControl;
    protected java.lang.String mPowerStateChangeOnActiveSourceLost;
    private com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock mWakeLock;

    static void <clinit>()
    {
        java.util.Optional $r0;
        java.lang.Boolean $r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        <com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String TAG> = "HdmiCecLocalDevicePlayback";

        $r0 = staticinvoke <android.sysprop.HdmiProperties: java.util.Optional set_menu_language()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r2 = virtualinvoke $r0.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r1);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        <com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean SET_MENU_LANGUAGE> = $z0;

        return;
    }

    void <init>(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiControlService r1, $r2, $r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r1, 4);

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mLocalActivePath> = 0;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_auto_device_off_enabled", 0);

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mAutoTvOff> = $z0;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mAutoTvOff>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void writeBooleanSetting(java.lang.String,boolean)>("hdmi_control_auto_device_off_enabled", $z1);

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.hdmi.cec.source.playback_device_action_on_routing_control", "none");

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String mPlaybackDeviceActionOnRoutingControl> = $r4;

        $r5 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.hdmi.cec.source.power_state_change_on_active_source_lost", "none");

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String mPowerStateChangeOnActiveSourceLost> = $r5;

        return;
    }

    private com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock getWakeLock()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock $r1, $r5;
        boolean $z0;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$2 $r2;
        java.lang.Object[] $r3;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock mWakeLock>;

        if $r1 != null goto label2;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.hdmi.keep_awake", 1);

        if $z0 == 0 goto label1;

        $r4 = new com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock;

        specialinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$SystemWakeLock: void <init>(com.android.server.hdmi.HdmiCecLocalDevicePlayback)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock mWakeLock> = $r4;

        goto label2;

     label1:
        $r2 = new com.android.server.hdmi.HdmiCecLocalDevicePlayback$2;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$2: void <init>(com.android.server.hdmi.HdmiCecLocalDevicePlayback)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock mWakeLock> = $r2;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("No wakelock is used to keep the display on.", $r3);

     label2:
        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock mWakeLock>;

        return $r5;
    }

    private void routeToPort(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mLocalActivePath> = i0;

        return;
    }

    protected boolean canGoToStandby()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        $r1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock getWakeLock()>();

        $z0 = interfaceinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock: boolean isHeld()>();

        $z1 = $z0 ^ 1;

        return $z1;
    }

    protected void disableDevice(boolean, com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>(z0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void checkIfPendingActionsCleared()>();

        return;
    }

    protected void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r2, $r6;
        boolean $z0, $z1;
        java.lang.String $r5, $r9;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIsActiveSource: ");

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAutoTvOff:");

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mAutoTvOff>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r9);

        return;
    }

    protected int findAudioReceiverAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        if $z0 == 0 goto label1;

        return 5;

     label1:
        return 0;
    }

    protected int findKeyReceiverAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        return 0;
    }

    protected int getLocalActivePath()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mLocalActivePath>;

        return $i0;
    }

    protected int getPreferredAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.hdmi.addr.playback", 15);

        return $i0;
    }

    protected boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0;
        boolean $z1, $z2, $z3;
        com.android.server.hdmi.HdmiControlService $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6, r8;
        com.android.server.hdmi.HdmiCecMessage r7;
        byte b2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r7 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>(r7);

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        if $z1 == 0 goto label1;

        return 1;

     label1:
        r8 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String mPowerStateChangeOnActiveSourceLost>;

        b2 = -1;

        i0 = virtualinvoke r8.<java.lang.String: int hashCode()>();

        if i0 == -1129124284 goto label4;

        if i0 == 3387192 goto label3;

     label2:
        goto label5;

     label3:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z3 == 0 goto label2;

        b2 = 1;

        goto label5;

     label4:
        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("standby_now");

        if $z2 == 0 goto label2;

        b2 = 0;

     label5:
        if b2 == 0 goto label7;

        if b2 == 1 goto label6;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid property \'ro.hdmi.cec.source.power_state_change_on_active_source_lost\' value: ");

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String mPowerStateChangeOnActiveSourceLost>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", $r6);

        return 1;

     label6:
        return 1;

     label7:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void standby()>();

        return 1;
    }

    protected boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte[] $r2;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[],int)>($r2, 2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void handleRoutingChangeAndInformation(int,com.android.server.hdmi.HdmiCecMessage)>($i0, r1);

        return 1;
    }

    protected void handleRoutingChangeAndInformation(int, com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0, i1, $i2;
        java.lang.String r1, $r6, $r8;
        com.android.server.hdmi.HdmiControlService $r2, $r3;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4;
        com.android.server.hdmi.HdmiCecMessage r9;
        byte b4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        r9 := @parameter1: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 == $i2 goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String mPlaybackDeviceActionOnRoutingControl>;

        b4 = -1;

        i1 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if i1 == 3387192 goto label05;

        if i1 == 155358638 goto label04;

        if i1 == 373557045 goto label03;

     label02:
        goto label06;

     label03:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("wake_up_only");

        if $z2 == 0 goto label02;

        b4 = 1;

        goto label06;

     label04:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("wake_up_and_send_active_source");

        if $z1 == 0 goto label02;

        b4 = 0;

        goto label06;

     label05:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("none");

        if $z0 == 0 goto label02;

        b4 = 2;

     label06:
        if b4 == 0 goto label09;

        if b4 == 1 goto label08;

        if b4 == 2 goto label07;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid property \'ro.hdmi.cec.source.playback_device_action_on_routing_control\' value: ");

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String mPlaybackDeviceActionOnRoutingControl>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", $r8);

        goto label10;

     label07:
        goto label10;

     label08:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

        goto label10;

     label09:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void setAndBroadcastActiveSource(com.android.server.hdmi.HdmiCecMessage,int)>(r9, i0);

     label10:
        return;
    }

    protected boolean handleRoutingInformation(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte[] $r2;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void handleRoutingChangeAndInformation(int,com.android.server.hdmi.HdmiCecMessage)>($i0, r1);

        return 1;
    }

    protected boolean handleSetMenuLanguage(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        java.lang.String r1, $r9, $r15, $r18;
        com.android.internal.app.LocalePicker$LocaleInfo r2;
        boolean $z0, $z1, $z2, $z3;
        byte[] $r3;
        com.android.server.hdmi.HdmiControlService $r4, $r10;
        android.content.Context $r5, $r11;
        android.content.res.Resources $r6;
        android.content.res.Configuration $r7;
        java.util.Locale $r8, $r17, $r19;
        java.util.List $r12;
        java.lang.Object $r16;
        java.lang.Throwable $r20;
        com.android.server.hdmi.HdmiCecMessage r21;
        java.util.Iterator r22;
        java.lang.StringBuilder r23;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r21 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $z0 = <com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean SET_MENU_LANGUAGE>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = new java.lang.String;

        $r3 = virtualinvoke r21.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        specialinvoke r1.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r3, 0, 3, "US-ASCII");

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r8 = $r7.<android.content.res.Configuration: java.util.Locale locale>;

        $r9 = virtualinvoke $r8.<java.util.Locale: java.lang.String getISO3Language()>();

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

     label2:
        return 1;

     label3:
        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r11 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r12 = staticinvoke <com.android.internal.app.LocalePicker: java.util.List getAllAssetLocales(android.content.Context,boolean)>($r11, 0);

        r22 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r16 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.app.LocalePicker$LocaleInfo) $r16;

        $r17 = virtualinvoke r2.<com.android.internal.app.LocalePicker$LocaleInfo: java.util.Locale getLocale()>();

        $r18 = virtualinvoke $r17.<java.util.Locale: java.lang.String getISO3Language()>();

        $z3 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label6;

        $r19 = virtualinvoke r2.<com.android.internal.app.LocalePicker$LocaleInfo: java.util.Locale getLocale()>();

        staticinvoke <com.android.internal.app.LocalePicker: void updateLocale(java.util.Locale)>($r19);

     label5:
        return 1;

     label6:
        goto label4;

     label7:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t handle <Set Menu Language> of ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", $r15);

     label8:
        return 0;

     label9:
        $r20 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDevicePlayback", "Can\'t handle <Set Menu Language>", $r20);

        return 0;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label9;
        catch java.io.UnsupportedEncodingException from label3 to label4 with label9;
        catch java.io.UnsupportedEncodingException from label4 to label5 with label9;
        catch java.io.UnsupportedEncodingException from label7 to label8 with label9;
    }

    protected boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean z0, $z1;
        int $i0, $i1;
        com.android.server.hdmi.HdmiControlService $r2, $r4, $r5;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        if $i0 != 15 goto label3;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i1 != 5 goto label3;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        if $r3 == null goto label1;

        goto label3;

     label1:
        z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        if $z1 == z0 goto label2;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void setSystemAudioActivated(boolean)>(z0);

     label2:
        return 1;

     label3:
        return 1;
    }

    protected boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean z0, $z1;
        int $i0, $i1, $i2;
        com.android.server.hdmi.HdmiControlService $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i2 != 5 goto label1;

        z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        if $z1 == z0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void setSystemAudioActivated(boolean)>(z0);

     label1:
        return 1;
    }

    protected boolean handleUserControlPressed(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void wakeUpIfActiveSource()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean handleUserControlPressed(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z0;
    }

    protected void onAddressAllocated(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.hdmi.HdmiControlService $r2, $r3, $r5, $r6, $r8, $r10, $r13, $r14;
        com.android.server.hdmi.HdmiCecMessage $r4, $r7, $r11;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r9;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$1 $r12;
        android.hardware.hdmi.HdmiDeviceInfo $r15;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        if i1 != 0 goto label1;

        $r14 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r13 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i8 = virtualinvoke $r13.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $r15 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i9 = virtualinvoke $r15.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        virtualinvoke $r14.<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSource(int,int,int)>($i8, $i9, 15);

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mDeviceType>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportPhysicalAddressCommand(int,int,int)>($i2, $i3, $i4);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i5 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i6 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: int getVendorId()>();

        $r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildDeviceVendorIdCommand(int,int)>($i5, $i6);

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r7);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void buildAndSendSetOsdName(int)>(0);

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r9 = virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        if $r9 != null goto label2;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i7 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r11 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildGiveSystemAudioModeStatus(int,int)>($i7, 5);

        $r12 = new com.android.server.hdmi.HdmiCecLocalDevicePlayback$1;

        specialinvoke $r12.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$1: void <init>(com.android.server.hdmi.HdmiCecLocalDevicePlayback)>(r0);

        virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>($r11, $r12);

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void startQueuedActions()>();

        return;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0;
        boolean z0;
        com.android.server.hdmi.HdmiCecMessageCache $r1;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecMessageCache: void flushAll()>();

        if z0 != 0 goto label1;

        $r2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock getWakeLock()>();

        interfaceinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock: void release()>();

     label1:
        return;
    }

    protected void onStandby(boolean, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean z0, z1, $z2, $z3, $z4;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.hdmi.HdmiControlService $r1, $r2, $r3, $r5, $r7, $r8;
        com.android.server.hdmi.HdmiCecMessage $r4, $r6, $r9;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z2 != 0 goto label1;

        return;

     label1:
        $z3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        if $z3 == 0 goto label2;

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i4 = virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $r9 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildInactiveSource(int,int)>($i3, $i4);

        virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r9);

     label2:
        z1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void setActiveSource(int,int)>(-1, 65535);

        if z0 != 0 goto label7;

        $z4 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mAutoTvOff>;

        if $z4 == 0 goto label7;

        if z1 != 0 goto label3;

        goto label7;

     label3:
        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        goto label6;

     label4:
        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r6 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildStandby(int,int)>($i2, 15);

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r6);

        goto label6;

     label5:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildStandby(int,int)>($i1, 0);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

     label6:
        return;

     label7:
        return;
    }

    void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        boolean $z0;
        java.lang.Object $r2;
        com.android.server.hdmi.DevicePowerStatusAction $r3, r5;
        java.util.List r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.util.List getActions(java.lang.Class)>(class "Lcom/android/server/hdmi/DevicePowerStatusAction;");

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", "queryDisplayStatus already in progress");

        $r2 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.android.server.hdmi.DevicePowerStatusAction) $r2;

        virtualinvoke $r3.<com.android.server.hdmi.DevicePowerStatusAction: void addCallback(android.hardware.hdmi.IHdmiControlCallback)>(r1);

        return;

     label1:
        r5 = staticinvoke <com.android.server.hdmi.DevicePowerStatusAction: com.android.server.hdmi.DevicePowerStatusAction create(com.android.server.hdmi.HdmiCecLocalDevice,int,android.hardware.hdmi.IHdmiControlCallback)>(r0, 0, r1);

        if r5 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", "Cannot initiate queryDisplayStatus");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 5);

        return;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>(r5);

        return;
    }

    void setAutoDeviceOff(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mAutoTvOff> = z0;

        return;
    }

    void setIsActiveSource(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock $r1, $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = z0;

        if z0 == 0 goto label1;

        $r2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock getWakeLock()>();

        interfaceinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock: void acquire()>();

        goto label2;

     label1:
        $r1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock getWakeLock()>();

        interfaceinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback$ActiveWakeLock: void release()>();

     label2:
        return;
    }

    protected void setPreferredAddress(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0;
        com.android.server.hdmi.HdmiControlService $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void writeStringSystemProperty(java.lang.String,java.lang.String)>("persist.sys.hdmi.addr.playback", $r2);

        return;
    }

    protected void wakeUpIfActiveSource()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.HdmiControlService $r1, $r2, $r3;
        android.os.PowerManager $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager getPowerManager()>();

        $z2 = virtualinvoke $r4.<android.os.PowerManager: boolean isScreenOn()>();

        if $z2 != 0 goto label3;

     label2:
        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label3:
        return;
    }
}
