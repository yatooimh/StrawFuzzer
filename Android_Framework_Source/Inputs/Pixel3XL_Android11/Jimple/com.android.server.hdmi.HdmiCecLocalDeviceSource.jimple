abstract class com.android.server.hdmi.HdmiCecLocalDeviceSource extends com.android.server.hdmi.HdmiCecLocalDevice
{
    private static final java.lang.String TAG;
    protected boolean mIsActiveSource;
    protected boolean mIsSwitchDevice;
    protected int mLocalActivePort;
    protected boolean mRoutingControlFeatureEnabled;
    private int mRoutingPort;

    protected void <init>(com.android.server.hdmi.HdmiControlService, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        com.android.server.hdmi.HdmiControlService r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r1, i0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsActiveSource> = 0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.hdmi.property_is_device_hdmi_cec_switch", 0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsSwitchDevice> = $z0;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mRoutingPort> = 0;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mLocalActivePort> = 0;

        return;
    }

    protected int getLocalActivePort()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mLocalActivePort>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected int getRoutingPort()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mRoutingPort>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0, i1, $i2;
        byte[] $r1;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r2, r5;
        boolean $z0, $z1, z2;
        com.android.server.hdmi.HdmiControlService $r3;
        com.android.server.hdmi.HdmiCecMessage r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r4 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        i0 = virtualinvoke r4.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r1 = virtualinvoke r4.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i1 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r1);

        r5 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource of(int,int)>(i0, i1);

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: boolean equals(java.lang.Object)>(r5);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setActiveSource(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource)>(r5);

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i1 != $i2 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setIsActiveSource(boolean)>(z2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void updateDevicePowerStatus(int,int)>(i0, 0);

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean isRoutingControlFeatureEnabled()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void switchInputOnReceivingNewActivePath(int)>(i1);

     label4:
        return 1;
    }

    protected boolean handleRequestActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void maySendActiveSource(int)>($i0);

        return 1;
    }

    protected boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        byte[] $r2;
        com.android.server.hdmi.HdmiControlService $r3, $r4, $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean isRoutingControlFeatureEnabled()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

        return 1;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[],int)>($r2, 2);

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsSwitchDevice>;

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 != $i1 goto label2;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z2 == 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setAndBroadcastActiveSource(com.android.server.hdmi.HdmiCecMessage,int)>(r1, i0);

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void handleRoutingChangeAndInformation(int,com.android.server.hdmi.HdmiCecMessage)>(i0, r1);

        return 1;
    }

    protected void handleRoutingChangeAndInformation(int, com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecMessage;

        return;
    }

    protected boolean handleRoutingInformation(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        byte[] $r2;
        com.android.server.hdmi.HdmiControlService $r3, $r4, $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean isRoutingControlFeatureEnabled()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

        return 1;

     label1:
        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsSwitchDevice>;

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 != $i1 goto label2;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z2 == 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setAndBroadcastActiveSource(com.android.server.hdmi.HdmiCecMessage,int)>(r1, i0);

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void handleRoutingChangeAndInformation(int,com.android.server.hdmi.HdmiCecMessage)>(i0, r1);

        return 1;
    }

    protected boolean handleSetStreamPath(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1;
        byte[] $r2;
        com.android.server.hdmi.HdmiControlService $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 != $i1 goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setAndBroadcastActiveSource(com.android.server.hdmi.HdmiCecMessage,int)>(r1, i0);

     label1:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void switchInputOnReceivingNewActivePath(int)>(i0);

        return 1;
    }

    boolean isRoutingControlFeatureEnabled()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mRoutingControlFeatureEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected boolean isSwitchingToTheSameInput(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int getLocalActivePort()>();

        if i0 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected void maySendActiveSource(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0;
        boolean $z0;
        com.android.server.hdmi.ActiveSourceAction $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsActiveSource>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new com.android.server.hdmi.ActiveSourceAction;

        specialinvoke $r1.<com.android.server.hdmi.ActiveSourceAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int)>(r0, i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

        return;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0, $i1;
        boolean z0;
        com.android.server.hdmi.HdmiControlService $r1, $r3;
        android.hardware.hdmi.HdmiPortInfo $r2;
        com.android.server.hdmi.HdmiCecMessageCache $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiPortInfo getPortInfo(int)>(i0);

        $i1 = virtualinvoke $r2.<android.hardware.hdmi.HdmiPortInfo: int getType()>();

        if $i1 != 1 goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiCecMessageCache: void flushAll()>();

     label1:
        if z0 == 0 goto label2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label2:
        return;
    }

    void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        boolean $z0;
        java.lang.Object $r2;
        com.android.server.hdmi.OneTouchPlayAction $r3, r5;
        java.util.List r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: java.util.List getActions(java.lang.Class)>(class "Lcom/android/server/hdmi/OneTouchPlayAction;");

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceSource", "oneTouchPlay already in progress");

        $r2 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (com.android.server.hdmi.OneTouchPlayAction) $r2;

        virtualinvoke $r3.<com.android.server.hdmi.OneTouchPlayAction: void addCallback(android.hardware.hdmi.IHdmiControlCallback)>(r1);

        return;

     label1:
        r5 = staticinvoke <com.android.server.hdmi.OneTouchPlayAction: com.android.server.hdmi.OneTouchPlayAction create(com.android.server.hdmi.HdmiCecLocalDeviceSource,int,android.hardware.hdmi.IHdmiControlCallback)>(r0, 0, r1);

        if r5 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceSource", "Cannot initiate oneTouchPlay");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 5);

        return;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>(r5);

        return;
    }

    protected void sendStandby(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1;
        com.android.server.hdmi.HdmiCecMessage $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mAddress>;

        $r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildStandby(int,int)>($i1, 0);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r2);

        return;
    }

    protected void setAndBroadcastActiveSource(com.android.server.hdmi.HdmiCecMessage, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1, $i2;
        com.android.server.hdmi.HdmiControlService $r2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i1 = virtualinvoke $r3.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSource(int,int,int)>(i0, $i1, $i2);

        return;
    }

    void setIsActiveSource(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsActiveSource> = z0;

        return;
    }

    protected void setLocalActivePort(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mLocalActivePort> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void setRoutingPort(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: int mRoutingPort> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void switchInputOnReceivingNewActivePath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        return;
    }

    protected void updateDevicePowerStatus(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    protected void wakeUpIfActiveSource()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceSource r0;
        boolean $z0;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceSource;

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: boolean mIsActiveSource>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceSource: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.HdmiCecLocalDeviceSource: java.lang.String TAG> = "HdmiCecLocalDeviceSource";

        return;
    }
}
