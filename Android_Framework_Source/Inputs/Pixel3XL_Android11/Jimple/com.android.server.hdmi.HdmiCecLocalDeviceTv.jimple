final class com.android.server.hdmi.HdmiCecLocalDeviceTv extends com.android.server.hdmi.HdmiCecLocalDevice
{
    private static final java.lang.String TAG;
    private boolean mArcEstablished;
    private final android.util.SparseBooleanArray mArcFeatureEnabled;
    private boolean mAutoDeviceOff;
    private boolean mAutoWakeup;
    private final android.util.ArraySet mCecSwitches;
    private final com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer;
    private final android.util.SparseArray mDeviceInfos;
    private java.util.List mLocalDeviceAddresses;
    private int mPrevPortId;
    private java.util.List mSafeAllDeviceInfos;
    private java.util.List mSafeExternalInputs;
    private com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer;
    private boolean mSkipRoutingControl;
    private final com.android.server.hdmi.HdmiCecStandbyModeHandler mStandbyHandler;
    private boolean mSystemAudioControlFeatureEnabled;
    private boolean mSystemAudioMute;
    private int mSystemAudioVolume;
    private final android.media.tv.TvInputManager$TvInputCallback mTvInputCallback;
    private final java.util.HashMap mTvInputs;

    void <init>(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiControlService r1, $r10, $r11, $r12;
        android.util.SparseBooleanArray $r2;
        java.util.List $r3, $r4;
        android.util.SparseArray $r5;
        android.util.ArraySet $r6;
        com.android.server.hdmi.DelayedMessageBuffer $r7;
        com.android.server.hdmi.HdmiCecLocalDeviceTv$1 $r8;
        java.util.HashMap $r9;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.HdmiCecStandbyModeHandler $r13;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r1, 0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished> = 0;

        $r2 = new android.util.SparseBooleanArray;

        specialinvoke $r2.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled> = $r2;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mSystemAudioVolume> = -1;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioMute> = 0;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeAllDeviceInfos> = $r3;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeExternalInputs> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos> = $r5;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.ArraySet mCecSwitches> = $r6;

        $r7 = new com.android.server.hdmi.DelayedMessageBuffer;

        specialinvoke $r7.<com.android.server.hdmi.DelayedMessageBuffer: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer> = $r7;

        $r8 = new com.android.server.hdmi.HdmiCecLocalDeviceTv$1;

        specialinvoke $r8.<com.android.server.hdmi.HdmiCecLocalDeviceTv$1: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceTv)>(r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.media.tv.TvInputManager$TvInputCallback mTvInputCallback> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.HashMap mTvInputs> = $r9;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mPrevPortId> = -1;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_auto_device_off_enabled", 1);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoDeviceOff> = $z0;

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_auto_wakeup_enabled", 1);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoWakeup> = $z1;

        $r12 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r12.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_system_audio_control_enabled", 1);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioControlFeatureEnabled> = $z2;

        $r13 = new com.android.server.hdmi.HdmiCecStandbyModeHandler;

        specialinvoke $r13.<com.android.server.hdmi.HdmiCecStandbyModeHandler: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiCecLocalDeviceTv)>(r1, r0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecStandbyModeHandler mStandbyHandler> = $r13;

        return;
    }

    static void access$000(com.android.server.hdmi.HdmiCecLocalDeviceTv, java.lang.String, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addTvInput(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$100(com.android.server.hdmi.HdmiCecLocalDeviceTv, java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeTvInput(java.lang.String)>(r1);

        return;
    }

    static com.android.server.hdmi.SelectRequestBuffer access$200(com.android.server.hdmi.HdmiCecLocalDeviceTv)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.SelectRequestBuffer $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer>;

        return $r1;
    }

    static void access$300(com.android.server.hdmi.HdmiCecLocalDeviceTv)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void resetSelectRequestBuffer()>();

        return;
    }

    private android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1, r2;
        int $i0, $i1, $i2;
        android.util.SparseArray $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>($i0);

        if r2 == null goto label1;

        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo removeDeviceInfo(int)>($i2);

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        virtualinvoke $r3.<android.util.SparseArray: void append(int,java.lang.Object)>($i1, r1);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateSafeDeviceInfoList()>();

        return r2;
    }

    private void addTvInput(java.lang.String, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.lang.String r1;
        int i0;
        java.util.HashMap $r2;
        java.lang.Integer $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.HashMap mTvInputs>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3);

        return;
    }

    private boolean canStartArcUpdateAction(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        boolean $z1, $z2, $z3, $z4, z5, z6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        z5 := @parameter1: boolean;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r1 == null goto label3;

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        if i0 != $i1 goto label3;

        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isConnectedToArcPort(int)>($i2);

        if $z1 == 0 goto label3;

        $i3 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isDirectConnectAddress(int)>($i3);

        if $z2 == 0 goto label3;

        if z5 == 0 goto label2;

        z6 = 0;

        $i4 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $z3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isConnected(int)>($i4);

        if $z3 == 0 goto label1;

        z6 = 0;

        $i5 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $z4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isArcFeatureEnabled(int)>($i5);

        if $z4 == 0 goto label1;

        z6 = 1;

     label1:
        return z6;

     label2:
        return 1;

     label3:
        return 0;
    }

    private boolean checkRecordSource(byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        byte[] r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $z0 = staticinvoke <android.hardware.hdmi.HdmiRecordSources: boolean checkRecordSource(byte[])>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean checkRecorder(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        z0 = 1;

        if r1 == null goto label1;

        $i1 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getTypeFromAddress(int)>(i0);

        if $i1 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean checkTimerRecordingSource(int, byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        byte[] r1;
        boolean $z0, z1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        if r1 == null goto label1;

        $z0 = staticinvoke <android.hardware.hdmi.HdmiTimerRecordSources: boolean checkTimerRecordSource(int,byte[])>(i0, r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void clearDeviceInfoList()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.util.Iterator r1;
        java.util.List $r2;
        boolean $z0;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        android.hardware.hdmi.HdmiDeviceInfo $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeExternalInputs>;

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.hardware.hdmi.HdmiDeviceInfo) $r4;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>($r5, 2);

        goto label1;

     label2:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        virtualinvoke $r3.<android.util.SparseArray: void clear()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateSafeDeviceInfoList()>();

        return;
    }

    private void disableArcIfExist()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        boolean $z0, $z1;
        com.android.server.hdmi.RequestArcTerminationAction $r2;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcInitiationAction;");

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcTerminationAction;");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isArcEstablished()>();

        if $z1 == 0 goto label2;

        $r2 = new com.android.server.hdmi.RequestArcTerminationAction;

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        specialinvoke $r2.<com.android.server.hdmi.RequestArcTerminationAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int)>(r0, $i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

     label2:
        return;
    }

    private void disableSystemAudioIfExist()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo $r1;
        com.android.server.hdmi.HdmiControlService $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if $r1 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioActionFromAvr;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioActionFromTv;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioAutoInitiationAction;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioStatusAction;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/VolumeControlAction;");

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean)>(0);

     label2:
        return;
    }

    private java.util.List getInputDevices()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r4, $r5;
        int $i0, $i1, i2;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label4;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r2 = (android.hardware.hdmi.HdmiDeviceInfo) $r6;

        $i1 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isLocalDeviceAddress(int)>($i1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: boolean isSourceType()>();

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hideDevicesBehindLegacySwitch(android.hardware.hdmi.HdmiDeviceInfo)>(r2);

        if $z2 != 0 goto label3;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return $r3;
    }

    private boolean handleNewDeviceAtTheTailOfActivePath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int $i0, $i1, $i2, i3, i4;
        boolean $z0;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i3 := @parameter0: int;

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        $z0 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isTailOfActivePath(int,int)>(i3, $i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        i4 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>($i1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(i4);

        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startRoutingControl(int,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>($i2, i4, 0, null);

        return 1;

     label1:
        return 0;
    }

    private void handleSelectInternalSource()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r4, $r5, $r6;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i1 = $r3.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        if $i1 == $i0 goto label2;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateActiveSource(int,int)>($i2, $i3);

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSkipRoutingControl>;

        if $z1 == 0 goto label1;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSkipRoutingControl> = 0;

        return;

     label1:
        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i5 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildActiveSource(int,int)>($i4, $i5);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

     label2:
        return;
    }

    private boolean hideDevicesBehindLegacySwitch(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int $i0;
        android.util.ArraySet $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.ArraySet mCecSwitches>;

        $z0 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isConnectedToCecSwitch(int,java.util.Collection)>($i0, $r2);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private java.util.List initLocalDeviceAddresses()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        com.android.server.hdmi.HdmiControlService $r4;
        java.util.List $r5, $r6;
        boolean $z0;
        java.lang.Object $r7;
        com.android.server.hdmi.HdmiCecLocalDevice $r8;
        android.hardware.hdmi.HdmiDeviceInfo $r9;
        int $i0;
        java.lang.Integer $r10;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: java.util.List getAllLocalDevices()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.server.hdmi.HdmiCecLocalDevice) $r7;

        $r9 = virtualinvoke $r8.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i0 = virtualinvoke $r9.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label1;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r6;
    }

    private void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int i0;
        boolean $z0;
        com.android.server.hdmi.HdmiControlService $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hideDevicesBehindLegacySwitch(android.hardware.hdmi.HdmiDeviceInfo)>(r1);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void invokeDeviceEventListeners(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, i0);

     label1:
        return;
    }

    private static boolean isConnectedToCecSwitch(int, java.util.Collection)
    {
        int i0, $i1;
        boolean $z0, $z1;
        java.lang.Object $r0;
        java.lang.Integer $r1;
        java.util.Collection r2;
        java.util.Iterator r3;

        i0 := @parameter0: int;

        r2 := @parameter1: java.util.Collection;

        r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.Integer) $r0;

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $z1 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isParentPath(int,int)>($i1, i0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isDirectConnectAddress(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        $i1 = 61440 & i0;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isLocalDeviceAddress(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        java.util.List $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mLocalDeviceAddresses>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isMessageForSystemAudio(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2;
        boolean $z0, z1;
        int $i0, $i1, $i2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i0 != 5 goto label2;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        if $i1 == 0 goto label1;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        if $i2 != 15 goto label2;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if $r3 == null goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    private static boolean isParentPath(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        boolean z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i10 = 0;

     label1:
        if i10 > 12 goto label4;

        $i2 = i1 >> i10;

        $i3 = $i2 & 15;

        if $i3 == 0 goto label3;

        z1 = 0;

        $i4 = i0 >> i10;

        $i5 = $i4 & 15;

        if $i5 != 0 goto label2;

        z1 = 0;

        $i6 = i10 + 4;

        $i9 = i1 >> $i6;

        $i7 = i10 + 4;

        $i8 = i0 >> $i7;

        if $i9 != $i8 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        i10 = i10 + 4;

        goto label1;

     label4:
        return 0;
    }

    static boolean isTailOfActivePath(int, int)
    {
        int i0, i1, i2, $i3, $i4, $i5, i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        return 0;

     label1:
        i6 = 12;

     label2:
        if i6 < 0 goto label5;

        $i3 = i1 >> i6;

        i2 = $i3 & 15;

        if i2 != 0 goto label3;

        return 1;

     label3:
        $i4 = i0 >> i6;

        $i5 = $i4 & 15;

        if $i5 == i2 goto label4;

        return 0;

     label4:
        i6 = i6 + -4;

        goto label2;

     label5:
        return 0;
    }

    private void launchDeviceDiscovery()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.DeviceDiscoveryAction $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv$2 $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void clearDeviceInfoList()>();

        $r1 = new com.android.server.hdmi.DeviceDiscoveryAction;

        $r2 = new com.android.server.hdmi.HdmiCecLocalDeviceTv$2;

        specialinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv$2: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceTv)>(r0);

        specialinvoke $r1.<com.android.server.hdmi.DeviceDiscoveryAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,com.android.server.hdmi.DeviceDiscoveryAction$DeviceDiscoveryCallback)>(r0, $r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r1);

        return;
    }

    private void notifyArcStatusToAudioService(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0;
        android.media.AudioManager r1;
        com.android.server.hdmi.HdmiControlService $r2;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        r1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        i0 = (int) z0;

        virtualinvoke r1.<android.media.AudioManager: void setWiredDeviceConnectionState(int,int,java.lang.String,java.lang.String)>(262144, i0, "", "");

        return;
    }

    private void removeCecSwitches(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        android.util.ArraySet $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.ArraySet mCecSwitches>;

        r1 = virtualinvoke $r2.<android.util.ArraySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.lang.Integer) $r3;

        $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int pathToPortId(int)>($i1);

        if $i2 != i0 goto label2;

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        return;
    }

    private android.hardware.hdmi.HdmiDeviceInfo removeDeviceInfo(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        android.util.SparseArray $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.hardware.hdmi.HdmiDeviceInfo) $r3;

        if r1 == null goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

     label1:
        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateSafeDeviceInfoList()>();

        return r1;
    }

    private void removeTvInput(java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.lang.String r1;
        java.util.HashMap $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.HashMap mTvInputs>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }

    private void resetSelectRequestBuffer()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.SelectRequestBuffer $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = <com.android.server.hdmi.SelectRequestBuffer: com.android.server.hdmi.SelectRequestBuffer EMPTY_BUFFER>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSelectRequestBuffer(com.android.server.hdmi.SelectRequestBuffer)>($r1);

        return;
    }

    private void sendClearTimerMessage(int, int, byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        byte[] r5;
        com.android.server.hdmi.HdmiCecMessage r7;
        com.android.server.hdmi.HdmiControlService $r8;
        com.android.server.hdmi.HdmiCecLocalDeviceTv$3 $r9;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 := @parameter2: byte[];

        if i1 == 1 goto label3;

        if i1 == 2 goto label2;

        if i1 == 3 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid source type:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r4);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceClearTimerRecordingResult(int,int)>(i0, 161);

        return;

     label1:
        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildClearExternalTimer(int,int,byte[])>($i4, i0, r5);

        goto label4;

     label2:
        $i3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildClearAnalogueTimer(int,int,byte[])>($i3, i0, r5);

        goto label4;

     label3:
        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        r7 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildClearDigitalTimer(int,int,byte[])>($i2, i0, r5);

     label4:
        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r9 = new com.android.server.hdmi.HdmiCecLocalDeviceTv$3;

        specialinvoke $r9.<com.android.server.hdmi.HdmiCecLocalDeviceTv$3: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceTv,int)>(r0, i0);

        virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r7, $r9);

        return;
    }

    private void updateAudioManagerForSystemAudio(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0;
        java.lang.Object[] $r1;
        java.lang.Boolean $r2;
        com.android.server.hdmi.HdmiControlService $r3;
        android.media.AudioManager $r4;
        int $i0;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[0] = $r2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        $i0 = virtualinvoke $r4.<android.media.AudioManager: int setHdmiSystemAudioSupported(boolean)>(z0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[1] = $r5;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("[A]UpdateSystemAudio mode[on=%b] output=[%X]", $r1);

        return;
    }

    private void updateSafeDeviceInfoList()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.util.List r1, r5;
        java.lang.Object r2;
        android.util.SparseArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        r1 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.util.List sparseArrayToList(android.util.SparseArray)>($r3);

        r5 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getInputDevices()>();

        r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeAllDeviceInfos> = r1;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeExternalInputs> = r5;

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    final void addCecDevice(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1, r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>(r1);

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        if r2 != null goto label2;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 1);

        goto label3;

     label2:
        $z0 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r2, 2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 1);

     label3:
        return;
    }

    void announceClearTimerRecordingResult(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void invokeClearTimerRecordingResult(int,int)>(i0, i1);

        return;
    }

    void announceOneTouchRecordResult(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void invokeOneTouchRecordResult(int,int)>(i0, i1);

        return;
    }

    void announceTimerRecordingResult(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void invokeTimerRecordingResult(int,int)>(i0, i1);

        return;
    }

    boolean broadcastMenuLanguage(java.lang.String)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int $i0;
        com.android.server.hdmi.HdmiControlService $r1;
        java.lang.String r2;
        com.android.server.hdmi.HdmiCecMessage r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r2 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetMenuLanguageCommand(int,java.lang.String)>($i0, r2);

        if r3 == null goto label1;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r3);

        return 1;

     label1:
        return 0;
    }

    void changeArcFeatureEnabled(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        android.util.SparseBooleanArray $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        $z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 != z0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r1 == null goto label5;

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        if $i1 == i0 goto label2;

        goto label5;

     label2:
        if z0 == 0 goto label3;

        $z3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        if $z3 != 0 goto label3;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startArcAction(boolean)>(1);

        goto label4;

     label3:
        if z0 != 0 goto label4;

        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startArcAction(boolean)>(0);

     label4:
        return;

     label5:
        return;
    }

    void changeMute(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1;
        android.hardware.hdmi.HdmiDeviceInfo $r3, $r7;
        com.android.server.hdmi.HdmiControlService $r4;
        java.lang.Object[] $r5, $r8, $r9;
        java.lang.Boolean $r6;
        int $i0, $i1;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if $r3 == null goto label10;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z1 != 0 goto label01;

        goto label10;

     label01:
        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r5[0] = $r6;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("[A]:Change mute:%b", $r5);

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioMute>;

        if $z2 != z0 goto label04;

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("No need to change mute.", $r9);

        exitmonitor r1;

     label03:
        return;

     label04:
        exitmonitor r1;

     label05:
        $z3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioActivated()>();

        if $z3 != 0 goto label06;

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("[A]:System audio is not activated.", $r8);

        return;

     label06:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/VolumeControlAction;");

        $r7 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        $i0 = virtualinvoke $r7.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = staticinvoke <com.android.server.hdmi.HdmiCecKeycode: int getMuteKey(boolean)>(z0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void sendUserControlPressedAndReleased(int,int)>($i0, $i1);

        return;

     label07:
        $r10 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r10;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    void changeSystemAudioMode(boolean, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2;
        android.hardware.hdmi.IHdmiControlCallback r1;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        com.android.server.hdmi.HdmiControlService $r3;
        com.android.server.hdmi.SystemAudioActionFromTv $r4;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceDiscoveryAction;");

        if $z2 == 0 goto label1;

        goto label3;

     label1:
        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r2 != null goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 3);

        return;

     label2:
        $r4 = new com.android.server.hdmi.SystemAudioActionFromTv;

        $i0 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        specialinvoke $r4.<com.android.server.hdmi.SystemAudioActionFromTv: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>(r0, $i0, z0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r4);

        return;

     label3:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 6);

        return;
    }

    void changeVolume(int, int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.Object r1, $r4;
        android.hardware.hdmi.HdmiDeviceInfo $r2, $r5;
        boolean $z1, $z2, $z3, z4, z5;
        com.android.server.hdmi.HdmiControlService $r3, $r7;
        com.android.server.hdmi.VolumeControlAction $r6, r10;
        java.lang.Throwable $r8;
        java.util.List r9;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if $r2 != null goto label01;

        return;

     label01:
        if i0 == 0 goto label16;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioActivated()>();

        if $z1 == 0 goto label16;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z2 != 0 goto label02;

        goto label16;

     label02:
        $i3 = i6 + i0;

        i7 = staticinvoke <com.android.server.hdmi.VolumeControlAction: int scaleToCecVolume(int,int)>($i3, i1);

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mSystemAudioVolume>;

     label04:
        z4 = 0;

        if i7 != i2 goto label07;

     label05:
        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mSystemAudioVolume>;

        $i5 = staticinvoke <com.android.server.hdmi.VolumeControlAction: int scaleToCustomVolume(int,int)>($i4, i1);

        virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: void setAudioStatus(boolean,int)>(0, $i5);

        exitmonitor r1;

     label06:
        return;

     label07:
        exitmonitor r1;

     label08:
        r9 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getActions(java.lang.Class)>(class "Lcom/android/server/hdmi/VolumeControlAction;");

        $z3 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label10;

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        i8 = virtualinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        if i0 <= 0 goto label09;

        z4 = 1;

     label09:
        $r6 = new com.android.server.hdmi.VolumeControlAction;

        specialinvoke $r6.<com.android.server.hdmi.VolumeControlAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean)>(r0, i8, z4);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r6);

        goto label12;

     label10:
        $r4 = interfaceinvoke r9.<java.util.List: java.lang.Object get(int)>(0);

        r10 = (com.android.server.hdmi.VolumeControlAction) $r4;

        z5 = 0;

        if i0 <= 0 goto label11;

        z5 = 1;

     label11:
        virtualinvoke r10.<com.android.server.hdmi.VolumeControlAction: void handleVolumeChange(boolean)>(z5);

     label12:
        return;

     label13:
        $r8 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r8;

     label16:
        return;

        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void clearTimerRecording(int, int, byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiControlService $r2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r8;
        java.lang.String $r5, $r7, $r11;
        byte[] r12;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r12 := @parameter2: byte[];

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Can not start one touch record. CEC control is disabled.");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceClearTimerRecordingResult(int,int)>(i0, 162);

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkRecorder(int)>(i0);

        if $z1 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid recorder address:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r11);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceClearTimerRecordingResult(int,int)>(i0, 160);

        return;

     label2:
        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkTimerRecordingSource(int,byte[])>(i1, r12);

        if $z2 != 0 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid record source.");

        $r5 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r12);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r7);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceClearTimerRecordingResult(int,int)>(i0, 161);

        return;

     label3:
        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void sendClearTimerMessage(int,int,byte[])>(i0, i1, r12);

        return;
    }

    void deviceSelect(int, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r3;
        android.util.SparseArray $r4;
        java.lang.Object $r5;
        int $i0, $i1, $i2, $i3, i4, i5;
        com.android.server.hdmi.HdmiControlService $r6, $r8, $r9;
        boolean $z0, $z1;
        com.android.server.hdmi.DeviceSelectAction $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i4 := @parameter0: int;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r2 = (android.hardware.hdmi.HdmiDeviceInfo) $r5;

        if r2 != null goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 3);

        return;

     label1:
        i5 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i0 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        if $i0 != 0 goto label2;

        $z1 = virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: boolean isValid()>();

        if $z1 == 0 goto label2;

        $i3 = r3.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        if i5 != $i3 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 0);

        return;

     label2:
        if i5 != 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void handleSelectInternalSource()>();

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActiveSource(int,int)>(i5, $i1);

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>($i2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 0);

        return;

     label3:
        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 != 0 goto label4;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActiveSource(android.hardware.hdmi.HdmiDeviceInfo)>(r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 6);

        return;

     label4:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceSelectAction;");

        $r7 = new com.android.server.hdmi.DeviceSelectAction;

        specialinvoke $r7.<com.android.server.hdmi.DeviceSelectAction: void <init>(com.android.server.hdmi.HdmiCecLocalDeviceTv,android.hardware.hdmi.HdmiDeviceInfo,android.hardware.hdmi.IHdmiControlCallback)>(r0, r2, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r7);

        return;
    }

    protected void disableDevice(boolean, com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1;
        android.media.tv.TvInputManager$TvInputCallback $r2;
        com.android.server.hdmi.HdmiControlService $r3;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.media.tv.TvInputManager$TvInputCallback mTvInputCallback>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void unregisterTvInputCallback(android.media.tv.TvInputManager$TvInputCallback)>($r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceDiscoveryAction;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/HotplugDetectionAction;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/PowerStatusMonitorAction;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/OneTouchRecordAction;");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/TimerRecordingAction;");

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void disableSystemAudioIfExist()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void disableArcIfExist()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>(z0, r1);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void clearDeviceInfoList()>();

        $r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        virtualinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: void invalidate()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(65535);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void checkIfPendingActionsCleared()>();

        return;
    }

    boolean dispatchMessage(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.hdmi.HdmiCecStandbyModeHandler $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandby()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isWakeUpMessageReceived()>();

        if $z1 != 0 goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecStandbyModeHandler mStandbyHandler>;

        $z2 = virtualinvoke $r4.<com.android.server.hdmi.HdmiCecStandbyModeHandler: boolean handleCommand(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        $z3 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean onMessage(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z3;
    }

    void displayOsd(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void displayOsd(int)>(i0);

        return;
    }

    void displayOsd(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: void displayOsd(int,int)>(i0, i1);

        return;
    }

    void doManualPortSwitching(int, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.hardware.hdmi.IHdmiControlCallback r1;
        com.android.server.hdmi.HdmiControlService $r2, $r4, $r6, $r7;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r3;
        android.hardware.hdmi.HdmiDeviceInfo $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isValidPortId(int)>(i0);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 6);

        return;

     label1:
        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        if i0 != $i1 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 0);

        return;

     label2:
        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: void invalidate()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z1 != 0 goto label3;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePortId(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 6);

        return;

     label3:
        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        if $i2 == -1 goto label4;

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        i5 = virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>($i4);

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        i5 = virtualinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

     label5:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(i5);

        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSkipRoutingControl>;

        if $z2 == 0 goto label6;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSkipRoutingControl> = 0;

        return;

     label6:
        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>(i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startRoutingControl(int,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>(i5, $i3, 1, r1);

        return;
    }

    protected void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r2, $r6, $r11, $r15, $r19, $r23, $r27, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r5, $r10, $r14, $r18, $r22, $r26, $r30, $r34;
        android.util.SparseBooleanArray $r8;
        int $i0;
        java.util.List $r36;
        java.lang.Object $r38;
        android.hardware.hdmi.HdmiDeviceInfo $r39;
        java.util.Iterator r48;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mArcEstablished: ");

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mArcFeatureEnabled: ");

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSystemAudioMute: ");

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioMute>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSystemAudioControlFeatureEnabled: ");

        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioControlFeatureEnabled>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r18);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAutoDeviceOff: ");

        $z3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoDeviceOff>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAutoWakeup: ");

        $z4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoWakeup>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSkipRoutingControl: ");

        $z5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSkipRoutingControl>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r30);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPrevPortId: ");

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mPrevPortId>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r34);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("CEC devices:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r36 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeAllDeviceInfos>;

        r48 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r48.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label2;

        $r38 = interfaceinvoke r48.<java.util.Iterator: java.lang.Object next()>();

        $r39 = (android.hardware.hdmi.HdmiDeviceInfo) $r38;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r39);

        goto label1;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    void enableAudioReturnChannel(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        com.android.server.hdmi.HdmiControlService $r2;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r1 == null goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void enableAudioReturnChannel(int,boolean)>($i0, z0);

     label1:
        return;
    }

    protected int findKeyReceiverAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r2, $r3;
        boolean $z0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: boolean isValid()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i2 = $r3.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        return $i2;

     label1:
        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfoByPath(int)>($i0);

        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        return $i1;

     label2:
        return -1;
    }

    boolean getAutoWakeup()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoWakeup>;

        return $z0;
    }

    android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(5);

        return $r1;
    }

    android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $i1 = staticinvoke <android.hardware.hdmi.HdmiDeviceInfo: int idForCecDevice(int)>(i0);

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        $r3 = (android.hardware.hdmi.HdmiDeviceInfo) $r2;

        return $r3;
    }

    final android.hardware.hdmi.HdmiDeviceInfo getDeviceInfoByPath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        java.util.Iterator r1;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getDeviceInfoList(boolean)>(0);

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.hdmi.HdmiDeviceInfo) $r4;

        $i1 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if $i1 != i0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    java.util.List getDeviceInfoList(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r4, $r5, $r7;
        int $i0, $i1, i2;
        java.lang.Object $r6;
        java.util.List $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        if z0 == 0 goto label1;

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $r8 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.util.List sparseArrayToList(android.util.SparseArray)>($r7);

        return $r8;

     label1:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i2 = 0;

     label2:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label4;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r2 = (android.hardware.hdmi.HdmiDeviceInfo) $r6;

        $i1 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isLocalDeviceAddress(int)>($i1);

        if $z1 != 0 goto label3;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return $r3;
    }

    int getPowerStatus()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiControlService $r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPowerStatus()>();

        return $i0;
    }

    protected int getPreferredAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        return 0;
    }

    int getPrevPortId()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mPrevPortId>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    android.hardware.hdmi.HdmiDeviceInfo getSafeAvrDeviceInfo()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getSafeCecDeviceInfo(int)>(5);

        return $r1;
    }

    android.hardware.hdmi.HdmiDeviceInfo getSafeCecDeviceInfo(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Throwable $r5;
        java.util.Iterator r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeAllDeviceInfos>;

        r6 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.hdmi.HdmiDeviceInfo) $r4;

        $z1 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: boolean isCecDevice()>();

        if $z1 == 0 goto label4;

        $i1 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        if $i1 != i0 goto label4;

        exitmonitor r1;

     label3:
        return r2;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    java.util.List getSafeCecDevicesLocked()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.util.Iterator r2;
        android.hardware.hdmi.HdmiDeviceInfo r3;
        java.util.ArrayList $r4;
        java.util.List $r5;
        java.lang.Object $r6;
        int $i0;
        boolean $z0, $z2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeAllDeviceInfos>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.hardware.hdmi.HdmiDeviceInfo) $r6;

        $i0 = virtualinvoke r3.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isLocalDeviceAddress(int)>($i0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label1;

     label3:
        return $r4;
    }

    android.hardware.hdmi.HdmiDeviceInfo getSafeDeviceInfoByPath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        android.hardware.hdmi.HdmiDeviceInfo r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeAllDeviceInfos>;

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.hardware.hdmi.HdmiDeviceInfo) $r4;

        $i1 = virtualinvoke r6.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if $i1 != i0 goto label4;

        exitmonitor r1;

     label3:
        return r6;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    java.util.List getSafeExternalInputsLocked()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.util.List $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mSafeExternalInputs>;

        return $r1;
    }

    protected boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        byte[] $r2;
        boolean $z0, $z1;
        com.android.server.hdmi.ActiveSourceHandler $r3;
        java.lang.Object[] $r4, $r7;
        java.lang.Integer $r5, $r8;
        com.android.server.hdmi.DelayedMessageBuffer $r6, $r9;
        com.android.server.hdmi.HdmiCecMessage r10;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r11;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r10 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        i0 = virtualinvoke r10.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r2 = virtualinvoke r10.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i1 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        if r1 != null goto label1;

        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean handleNewDeviceAtTheTailOfActivePath(int)>(i1);

        if $z1 != 0 goto label4;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Device info %X not found; buffering the command", $r7);

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r9.<com.android.server.hdmi.DelayedMessageBuffer: void add(com.android.server.hdmi.HdmiCecMessage)>(r10);

        goto label4;

     label1:
        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isInputReady(int)>($i2);

        if $z0 != 0 goto label3;

        $i4 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        if $i4 != 5 goto label2;

        goto label3;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $i5 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getId()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r4[0] = $r5;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Input not ready for device: %X; buffering the command", $r4);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r6.<com.android.server.hdmi.DelayedMessageBuffer: void add(com.android.server.hdmi.HdmiCecMessage)>(r10);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateDevicePowerStatus(int,int)>(i0, 0);

        r11 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource of(int,int)>(i0, i1);

        $r3 = staticinvoke <com.android.server.hdmi.ActiveSourceHandler: com.android.server.hdmi.ActiveSourceHandler create(com.android.server.hdmi.HdmiCecLocalDeviceTv,android.hardware.hdmi.IHdmiControlCallback)>(r0, null);

        $i3 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        virtualinvoke $r3.<com.android.server.hdmi.ActiveSourceHandler: void process(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource,int)>(r11, $i3);

     label4:
        return 1;
    }

    protected boolean handleGetMenuLanguage(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r3;
        java.lang.String $r4, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: java.lang.String getLanguage()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean broadcastMenuLanguage(java.lang.String)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to respond to <Get Menu Language>: ");

        $r7 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: java.lang.String toString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r9);

     label1:
        return 1;
    }

    protected boolean handleImageViewOn(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean handleTextViewOn(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z0;
    }

    protected boolean handleInactiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r1, $r2;
        boolean $z0;
        android.hardware.hdmi.HdmiDeviceInfo $r3, r7;
        com.android.server.hdmi.HdmiControlService $r4, $r5;
        com.android.server.hdmi.HdmiCecMessage r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r6 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i1 = $r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        $i2 = virtualinvoke r6.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i1 == $i2 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isProhibitMode()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getPrevPortId()>();

        if i0 == -1 goto label5;

        $i3 = virtualinvoke r6.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        r7 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>($i3);

        if r7 != null goto label3;

        return 1;

     label3:
        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i4 = virtualinvoke r7.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i5 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>($i4);

        if $i5 != i0 goto label4;

        return 1;

     label4:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void doManualPortSwitching(int,android.hardware.hdmi.IHdmiControlCallback)>(i0, null);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setPrevPortId(int)>(-1);

        goto label6;

     label5:
        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: void invalidate()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(65535);

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r3 = <android.hardware.hdmi.HdmiDeviceInfo: android.hardware.hdmi.HdmiDeviceInfo INACTIVE_DEVICE>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void invokeInputChangeListener(android.hardware.hdmi.HdmiDeviceInfo)>($r3);

     label6:
        return 1;
    }

    protected boolean handleInitiateArc(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        android.hardware.hdmi.HdmiDeviceInfo r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        com.android.server.hdmi.SetArcTransmissionStateAction $r3;
        com.android.server.hdmi.HdmiControlService $r4;
        com.android.server.hdmi.DelayedMessageBuffer $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean canStartArcUpdateAction(int,boolean)>($i0, 1);

        if $z0 != 0 goto label3;

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r2 != null goto label1;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r5.<com.android.server.hdmi.DelayedMessageBuffer: void add(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return 1;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

        $i2 = virtualinvoke r2.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isConnectedToArcPort(int)>($i2);

        if $z1 != 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void displayOsd(int)>(1);

     label2:
        return 1;

     label3:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcInitiationAction;");

        $r3 = new com.android.server.hdmi.SetArcTransmissionStateAction;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        specialinvoke $r3.<com.android.server.hdmi.SetArcTransmissionStateAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean)>(r0, $i1, 1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

        return 1;
    }

    protected boolean handleMenuStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 1;
    }

    protected boolean handleRecordStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 1;
    }

    protected boolean handleRecordTvScreen(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        java.util.List r2;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r3, $r5;
        byte[] $r4;
        java.lang.Object $r6;
        com.android.server.hdmi.OneTouchRecordAction $r7;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getActions(java.lang.Class)>(class "Lcom/android/server/hdmi/OneTouchRecordAction;");

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (com.android.server.hdmi.OneTouchRecordAction) $r6;

        $i0 = virtualinvoke $r7.<com.android.server.hdmi.OneTouchRecordAction: int getRecorderAddress()>();

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i0 == $i1 goto label1;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceOneTouchRecordResult(int,int)>($i2, 48);

     label1:
        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: boolean handleRecordTvScreen(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z1;

     label2:
        i3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: byte[] invokeRecordRequestListener(int)>(i3);

        i4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int startOneTouchRecord(int,byte[])>(i3, $r4);

        if i4 == -1 goto label3;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, i4);

     label3:
        return 1;
    }

    void handleRemoveActiveRoutingPath(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int $i0, $i1, $i2, i3, i4;
        boolean $z0;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i3 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        $z0 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isTailOfActivePath(int,int)>(i3, $i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        i4 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>($i1);

        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startRoutingControl(int,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>($i2, i4, 1, null);

     label1:
        return;
    }

    protected boolean handleReportAudioStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isAudioStatusMute(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getAudioStatusVolume(com.android.server.hdmi.HdmiCecMessage)>(r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setAudioStatus(boolean,int)>($z1, $i0);

        return 1;
    }

    protected boolean handleReportPhysicalAddress(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, i1, $i3;
        byte b2;
        byte[] $r3, $r4;
        boolean $z0, $z1, $z2;
        android.hardware.hdmi.HdmiDeviceInfo $r5;
        java.lang.String $r6, $r11;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r3);

        i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $r4 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        b2 = $r4[2];

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean updateCecSwitchInfo(int,int,int)>(i1, b2, i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/DeviceDiscoveryAction;");

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignored while Device Discovery Action is in progress: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r11);

        return 1;

     label2:
        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isInDeviceList(int,int)>(i1, i0);

        if $z2 != 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean handleNewDeviceAtTheTailOfActivePath(int)>(i0);

     label3:
        $r5 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getPortId(int)>(i0);

        $r6 = staticinvoke <com.android.server.hdmi.HdmiUtils: java.lang.String getDefaultDeviceName(int)>(i1);

        specialinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String)>(i1, i0, $i3, b2, 16777215, $r6);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addCecDevice(android.hardware.hdmi.HdmiDeviceInfo)>($r5);

        $r7 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource of(int,int)>(i1, i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startNewDeviceAction(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource,int)>($r7, b2);

        return 1;
    }

    protected boolean handleReportPowerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte b0;
        byte[] $r2;
        int $i1;
        short $s2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        b0 = $r2[0];

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $s2 = b0 & 255;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateDevicePowerStatus(int,int)>($i1, $s2);

        return 1;
    }

    protected boolean handleRequestActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1, $r4;
        int $i0, $i1, $i2, $i3;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r2;
        com.android.server.hdmi.HdmiControlService $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i1 = $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        if $i0 != $i1 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildActiveSource(int,int)>($i2, $i3);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

     label1:
        return 1;
    }

    protected boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1, $i2;
        boolean $z0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r1;
        com.android.server.hdmi.RoutingControlAction $r2;
        com.android.server.hdmi.HdmiCecMessage r3;
        byte[] r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r3 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r4 = virtualinvoke r3.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>(r4);

        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isAffectingActiveRoutingPath(int,int)>($i1, i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: void invalidate()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RoutingControlAction;");

        $r2 = new com.android.server.hdmi.RoutingControlAction;

        $i2 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[],int)>(r4, 2);

        specialinvoke $r2.<com.android.server.hdmi.RoutingControlAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>(r0, $i2, 1, null);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

     label1:
        return 1;
    }

    protected boolean handleSetOsdName(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2, $r4, $r9, $r13, $r18;
        byte[] $r3;
        boolean $z0;
        android.hardware.hdmi.HdmiDeviceInfo $r5, r19;
        java.lang.StringBuilder $r6, $r10, $r15;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        r19 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>($i0);

        if r19 != null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No source device info for <Set Osd Name>.");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r13);

        return 1;

     label1:
        $r2 = new java.lang.String;

        $r3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        specialinvoke $r2.<java.lang.String: void <init>(byte[],java.lang.String)>($r3, "US-ASCII");

     label2:
        $r4 = virtualinvoke r19.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignore incoming <Set Osd Name> having same osd name:");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r9);

        return 1;

     label3:
        $r5 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i1 = virtualinvoke r19.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i2 = virtualinvoke r19.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i3 = virtualinvoke r19.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $i4 = virtualinvoke r19.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        $i5 = virtualinvoke r19.<android.hardware.hdmi.HdmiDeviceInfo: int getVendorId()>();

        specialinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String)>($i1, $i2, $i3, $i4, $i5, $r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addCecDevice(android.hardware.hdmi.HdmiDeviceInfo)>($r5);

        return 1;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid <Set Osd Name> request:");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiCecLocalDeviceTv", $r18, $r14);

        return 1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label4;
    }

    protected boolean handleSetSystemAudioMode(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean z0, $z1, $z2;
        com.android.server.hdmi.SystemAudioActionFromAvr $r3;
        int $i0;
        java.lang.Object[] $r4, $r11;
        com.android.server.hdmi.HdmiControlService $r5, $r12;
        android.hardware.hdmi.HdmiDeviceInfo $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;
        com.android.server.hdmi.DelayedMessageBuffer $r13;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isMessageForSystemAudio(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z1 != 0 goto label3;

        $r6 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if $r6 != null goto label1;

        $r13 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r13.<com.android.server.hdmi.DelayedMessageBuffer: void add(com.android.server.hdmi.HdmiCecMessage)>(r1);

        goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid <Set System Audio Mode> message:");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void warning(java.lang.String,java.lang.Object[])>($r10, $r11);

        $r12 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r12.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

     label2:
        return 1;

     label3:
        if z0 == 0 goto label4;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioControlFeatureEnabled()>();

        if $z2 != 0 goto label4;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Ignoring <Set System Audio Mode> message because the System Audio Control feature is disabled: %s", $r4);

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 4);

        return 1;

     label4:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SystemAudioAutoInitiationAction;");

        $r3 = new com.android.server.hdmi.SystemAudioActionFromAvr;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        specialinvoke $r3.<com.android.server.hdmi.SystemAudioActionFromAvr: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>(r0, $i0, z0, null);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

        return 1;
    }

    protected boolean handleSystemAudioModeStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        java.lang.Object[] $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isMessageForSystemAudio(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z0 != 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid <System Audio Mode Status> message:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void warning(java.lang.String,java.lang.Object[])>($r6, $r7);

        return 1;

     label1:
        $z1 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean)>($z1);

        return 1;
    }

    protected boolean handleTerminateArc(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2;
        boolean $z0;
        com.android.server.hdmi.SetArcTransmissionStateAction $r3;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean setArcStatus(boolean)>(0);

        return 1;

     label1:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcTerminationAction;");

        $r3 = new com.android.server.hdmi.SetArcTransmissionStateAction;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        specialinvoke $r3.<com.android.server.hdmi.SetArcTransmissionStateAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean)>(r0, $i0, 0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

        return 1;
    }

    protected boolean handleTextViewOn(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoWakeup>;

        if $z1 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label1:
        return 1;
    }

    protected boolean handleTimerClearedStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        byte b0;
        byte[] $r2;
        int $i1;
        short $s2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        b0 = $r2[0];

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $s2 = b0 & 255;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>($i1, $s2);

        return 1;
    }

    protected boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 1;
    }

    boolean hasSystemAudioDevice()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo $r1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getSafeAvrDeviceInfo()>();

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isArcEstablished()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean $z0, $z1;
        android.util.SparseBooleanArray $r1, $r2;
        int $i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        if $z0 == 0 goto label3;

        i1 = 0;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        $i0 = virtualinvoke $r1.<android.util.SparseBooleanArray: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        $z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean valueAt(int)>(i1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean isArcFeatureEnabled(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        android.util.SparseBooleanArray $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        return $z0;
    }

    boolean isConnected(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isConnected(int)>(i0);

        return $z0;
    }

    boolean isInDeviceList(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, $i2;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        z0 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        if $i2 != i1 goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    protected boolean isInputReady(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        java.util.HashMap $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.HashMap mTvInputs>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r1.<java.util.HashMap: boolean containsValue(java.lang.Object)>($r2);

        return $z0;
    }

    boolean isPowerStandbyOrTransient()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        return $z0;
    }

    boolean isProhibitMode()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isProhibitMode()>();

        return $z0;
    }

    boolean isSystemAudioActivated()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasSystemAudioDevice()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        return $z1;
    }

    boolean isSystemAudioControlFeatureEnabled()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioControlFeatureEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void launchRoutingControl(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, i4, i5;
        com.android.server.hdmi.HdmiControlService $r1, $r3, $r5;
        com.android.server.hdmi.DelayedMessageBuffer $r2;
        com.android.server.hdmi.HdmiCecMessage $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        if $i0 == -1 goto label1;

        if z0 != 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isProhibitMode()>();

        if $z2 != 0 goto label2;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        i4 = virtualinvoke $r5.<com.android.server.hdmi.HdmiControlService: int portIdToPath(int)>($i2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(i4);

        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePath()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startRoutingControl(int,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>($i3, i4, z0, null);

        goto label2;

     label1:
        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        i5 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(i5);

        if z0 != 0 goto label2;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        $z1 = virtualinvoke $r2.<com.android.server.hdmi.DelayedMessageBuffer: boolean isBuffered(int)>(130);

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildActiveSource(int,int)>($i1, i5);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

     label2:
        return;
    }

    protected void onAddressAllocated(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Iterator r1;
        android.hardware.hdmi.HdmiPortInfo r2;
        com.android.server.hdmi.HdmiControlService $r3, $r6, $r7, $r8, $r10, $r11, $r13;
        java.util.List $r4, $r19;
        boolean $z1, $z3, z4, z5;
        android.media.tv.TvInputManager$TvInputCallback $r5;
        com.android.server.hdmi.HdmiCecMessage $r9, $r12;
        android.util.ArraySet $r14;
        java.lang.Integer $r15;
        java.util.HashMap $r16;
        java.lang.Object $r17;
        android.util.SparseBooleanArray $r18;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: java.util.List getPortInfo()>();

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r17 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.hardware.hdmi.HdmiPortInfo) $r17;

        $r18 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseBooleanArray mArcFeatureEnabled>;

        $i8 = virtualinvoke r2.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        $z3 = virtualinvoke r2.<android.hardware.hdmi.HdmiPortInfo: boolean isArcSupported()>();

        virtualinvoke $r18.<android.util.SparseBooleanArray: void put(int,boolean)>($i8, $z3);

        goto label1;

     label2:
        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.media.tv.TvInputManager$TvInputCallback mTvInputCallback>;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void registerTvInputCallback(android.media.tv.TvInputManager$TvInputCallback)>($r5);

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mDeviceType>;

        $r9 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportPhysicalAddressCommand(int,int,int)>($i2, $i3, $i4);

        virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r9);

        $r11 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i5 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r10 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i6 = virtualinvoke $r10.<com.android.server.hdmi.HdmiControlService: int getVendorId()>();

        $r12 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildDeviceVendorIdCommand(int,int)>($i5, $i6);

        virtualinvoke $r11.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r12);

        $r14 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.ArraySet mCecSwitches>;

        $r13 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i7 = virtualinvoke $r13.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke $r14.<android.util.ArraySet: boolean add(java.lang.Object)>($r15);

        $r16 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.HashMap mTvInputs>;

        virtualinvoke $r16.<java.util.HashMap: void clear()>();

        if i1 != 3 goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSkipRoutingControl> = z4;

        z5 = 0;

        if i1 == 0 goto label5;

        z5 = 0;

        if i1 == 1 goto label5;

        z5 = 1;

     label5:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void launchRoutingControl(boolean)>(z5);

        $r19 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List initLocalDeviceAddresses()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List mLocalDeviceAddresses> = $r19;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void resetSelectRequestBuffer()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void launchDeviceDiscovery()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startQueuedActions()>();

        return;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.List r1;
        android.hardware.hdmi.HdmiDeviceInfo $r2, $r5;
        java.lang.Object $r3;
        com.android.server.hdmi.HotplugDetectionAction $r4;
        com.android.server.hdmi.HdmiControlService $r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        if z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeCecSwitches(int)>(i0);

     label1:
        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if $r2 == null goto label3;

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        $i1 = virtualinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        if i0 != $i1 goto label3;

        if z0 != 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean)>(0);

        goto label3;

     label2:
        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioControlFeatureEnabled>;

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        if $z1 == $z2 goto label3;

        $z3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioControlFeatureEnabled>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSystemAudioMode(boolean)>($z3);

     label3:
        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getActions(java.lang.Class)>(class "Lcom/android/server/hdmi/HotplugDetectionAction;");

        $z4 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label4;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (com.android.server.hdmi.HotplugDetectionAction) $r3;

        virtualinvoke $r4.<com.android.server.hdmi.HotplugDetectionAction: void pollAllDevicesNow()>();

     label4:
        return;
    }

    void onNewAvrAdded(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        com.android.server.hdmi.SystemAudioAutoInitiationAction $r2;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = new com.android.server.hdmi.SystemAudioAutoInitiationAction;

        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        specialinvoke $r2.<com.android.server.hdmi.SystemAudioAutoInitiationAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int)>(r0, $i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isConnected(int)>($i1);

        if $z0 == 0 goto label1;

        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isArcFeatureEnabled(int)>($i2);

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/SetArcTransmissionStateAction;");

        if $z2 != 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startArcAction(boolean)>(1);

     label1:
        return;
    }

    protected void onStandby(boolean, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1, $r2;
        com.android.server.hdmi.HdmiCecMessage $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        if z0 != 0 goto label2;

        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoDeviceOff>;

        if $z2 == 0 goto label2;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildStandby(int,int)>($i1, 15);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

     label2:
        return;
    }

    void processAllDelayedMessages()
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.DelayedMessageBuffer $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r1.<com.android.server.hdmi.DelayedMessageBuffer: void processAllMessages()>();

        return;
    }

    void processDelayedActiveSource(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        com.android.server.hdmi.DelayedMessageBuffer $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r1.<com.android.server.hdmi.DelayedMessageBuffer: void processActiveSource(int)>(i0);

        return;
    }

    void processDelayedMessages(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        com.android.server.hdmi.DelayedMessageBuffer $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.DelayedMessageBuffer mDelayedMessageBuffer>;

        virtualinvoke $r1.<com.android.server.hdmi.DelayedMessageBuffer: void processMessagesForDevice(int)>(i0);

        return;
    }

    final void removeCecDevice(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        com.android.server.hdmi.HdmiCecMessageCache $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $i1 = staticinvoke <android.hardware.hdmi.HdmiDeviceInfo: int idForCecDevice(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo removeDeviceInfo(int)>($i1);

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecMessageCache: void flushMessagesFrom(int)>(i0);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r1, 2);

        return;
    }

    protected void sendStandby(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        int $i0, i1, i2;
        com.android.server.hdmi.HdmiControlService $r4;
        com.android.server.hdmi.HdmiCecMessage $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i1 := @parameter0: int;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.SparseArray mDeviceInfos>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (android.hardware.hdmi.HdmiDeviceInfo) $r3;

        if r1 != null goto label1;

        return;

     label1:
        i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r5 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildStandby(int,int)>($i0, i2);

        virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r5);

        return;
    }

    boolean setArcStatus(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, z1, $z2;
        java.lang.Object[] $r1;
        java.lang.Boolean $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = newarray (java.lang.Object)[2];

        $z2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r1[1] = $r3;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Set Arc Status[old:%b new:%b]", $r1);

        z1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void enableAudioReturnChannel(boolean)>(z0);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void notifyArcStatusToAudioService(boolean)>(z0);

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished> = z0;

        return z1;
    }

    void setAudioStatus(boolean, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        int i0, $i1, i2;
        com.android.server.hdmi.HdmiControlService $r3, $r4, $r6;
        android.media.AudioManager $r5;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        i2 := @parameter1: int;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioActivated()>();

        if $z1 == 0 goto label9;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z2 != 0 goto label1;

        goto label9;

     label1:
        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioMute> = z0;

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mSystemAudioVolume> = i2;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        i0 = virtualinvoke $r5.<android.media.AudioManager: int getStreamMaxVolume(int)>(3);

        $r6 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = staticinvoke <com.android.server.hdmi.VolumeControlAction: int scaleToCustomVolume(int,int)>(i2, i0);

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void setAudioStatus(boolean,int)>(z0, $i1);

     label3:
        if z0 == 0 goto label4;

        i2 = 101;

        goto label4;

     label4:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void displayOsd(int,int)>(2, i2);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void setAutoDeviceOff(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoDeviceOff> = z0;

        return;
    }

    void setAutoWakeup(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mAutoWakeup> = z0;

        return;
    }

    protected void setPreferredAddress(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Preferred addres will not be stored for TV");

        return;
    }

    void setPrevPortId(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mPrevPortId> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setSelectRequestBuffer(com.android.server.hdmi.SelectRequestBuffer)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.SelectRequestBuffer r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.SelectRequestBuffer;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer> = r1;

        return;
    }

    void setSystemAudioControlFeatureEnabled(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mSystemAudioControlFeatureEnabled> = z0;

        exitmonitor r1;

     label2:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasSystemAudioDevice()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void changeSystemAudioMode(boolean,android.hardware.hdmi.IHdmiControlCallback)>(z0, null);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setSystemAudioMode(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object r1;
        java.lang.Object[] $r3, $r10;
        com.android.server.hdmi.HdmiControlService $r4, $r7, $r8, $r9;
        java.lang.Boolean $r5, $r6;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioControlFeatureEnabled()>();

        if $z1 != 0 goto label01;

        if z0 == 0 goto label01;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Cannot turn on system audio mode because the System Audio Control feature is disabled.", $r10);

        return;

     label01:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z2 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[1] = $r6;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("System Audio Mode change[old:%b new:%b]", $r3);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateAudioManagerForSystemAudio(boolean)>(z0);

        r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z3 = virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: boolean isSystemAudioActivated()>();

        if $z3 == z0 goto label03;

        $r8 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r8.<com.android.server.hdmi.HdmiControlService: void setSystemAudioActivated(boolean)>(z0);

        $r9 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiControlService: void announceSystemAudioModeChange(boolean)>(z0);

     label03:
        if z0 == 0 goto label06;

     label04:
        $z4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean mArcEstablished>;

        if $z4 != 0 goto label06;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startArcAction(boolean)>(1);

     label05:
        goto label08;

     label06:
        if z0 != 0 goto label08;

     label07:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void startArcAction(boolean)>(0);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void startArcAction(boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.hardware.hdmi.HdmiDeviceInfo r1;
        int $i0, $i1, $i2, $i4;
        com.android.server.hdmi.RequestArcTerminationAction $r2;
        com.android.server.hdmi.RequestArcInitiationAction $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getAvrDeviceInfo()>();

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Failed to start arc action; No AVR device.");

        return;

     label1:
        $i0 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean canStartArcUpdateAction(int,boolean)>($i0, z0);

        if $z1 != 0 goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Failed to start arc action; ARC configuration check failed.");

        if z0 == 0 goto label2;

        $i4 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $z4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isConnectedToArcPort(int)>($i4);

        if $z4 != 0 goto label2;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void displayOsd(int)>(1);

     label2:
        return;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcTerminationAction;");

        $z3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcInitiationAction;");

        if $z3 != 0 goto label5;

        $r3 = new com.android.server.hdmi.RequestArcInitiationAction;

        $i2 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        specialinvoke $r3.<com.android.server.hdmi.RequestArcInitiationAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int)>(r0, $i2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r3);

        goto label5;

     label4:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcInitiationAction;");

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean hasAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RequestArcTerminationAction;");

        if $z2 != 0 goto label5;

        $r2 = new com.android.server.hdmi.RequestArcTerminationAction;

        $i1 = virtualinvoke r1.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        specialinvoke $r2.<com.android.server.hdmi.RequestArcTerminationAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int)>(r0, $i1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

     label5:
        return;
    }

    void startNewDeviceAction(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r1;
        int i0, $i1, $i2;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0, $z1;
        com.android.server.hdmi.NewDeviceAction $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: java.util.List getActions(java.lang.Class)>(class "Lcom/android/server/hdmi/NewDeviceAction;");

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.hdmi.NewDeviceAction) $r5;

        $z1 = virtualinvoke $r6.<com.android.server.hdmi.NewDeviceAction: boolean isActionOf(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource)>(r1);

        if $z1 == 0 goto label2;

        return;

     label2:
        goto label1;

     label3:
        $r4 = new com.android.server.hdmi.NewDeviceAction;

        $i2 = r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        $i1 = r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress>;

        specialinvoke $r4.<com.android.server.hdmi.NewDeviceAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,int,int)>(r0, $i2, $i1, i0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r4);

        return;
    }

    int startOneTouchRecord(int, byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.OneTouchRecordAction $r2;
        java.lang.StringBuilder $r3, $r10, $r15;
        java.lang.String $r7, $r9, $r12, $r14, $r18;
        byte[] r19;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        r19 := @parameter1: byte[];

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Can not start one touch record. CEC control is disabled.");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceOneTouchRecordResult(int,int)>(i0, 51);

        return 1;

     label1:
        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkRecorder(int)>(i0);

        if $z1 != 0 goto label2;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid recorder address:");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r18);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceOneTouchRecordResult(int,int)>(i0, 49);

        return 1;

     label2:
        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkRecordSource(byte[])>(r19);

        if $z2 != 0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid record source.");

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r19);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r14);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceOneTouchRecordResult(int,int)>(i0, 50);

        return 2;

     label3:
        $r2 = new com.android.server.hdmi.OneTouchRecordAction;

        specialinvoke $r2.<com.android.server.hdmi.OneTouchRecordAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,byte[])>(r0, i0, r19);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start new [One Touch Record]-Target:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", recordSource:");

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r19);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r9);

        return -1;
    }

    void startRoutingControl(int, int, boolean, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, $i2;
        boolean z0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        com.android.server.hdmi.HdmiCecMessage r2;
        com.android.server.hdmi.HdmiControlService $r3;
        com.android.server.hdmi.RoutingControlAction $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        if i0 != i1 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildRoutingChange(int,int,int)>($i2, i0, i1);

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>(r2);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/RoutingControlAction;");

        $r4 = new com.android.server.hdmi.RoutingControlAction;

        specialinvoke $r4.<com.android.server.hdmi.RoutingControlAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,boolean,android.hardware.hdmi.IHdmiControlCallback)>(r0, i1, z0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r4);

        return;
    }

    void startTimerRecording(int, int, byte[])
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiControlService $r1;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.TimerRecordingAction $r2;
        java.lang.StringBuilder $r3, $r12, $r17;
        java.lang.String $r9, $r11, $r14, $r16, $r20;
        byte[] r21;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r21 := @parameter2: byte[];

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Can not start one touch record. CEC control is disabled.");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>(i0, 3);

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkRecorder(int)>(i0);

        if $z1 != 0 goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid recorder address:");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r20);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>(i0, 1);

        return;

     label2:
        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkTimerRecordingSource(int,byte[])>(i1, r21);

        if $z2 != 0 goto label3;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid record source.");

        $r14 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r21);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r16);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>(i0, 2);

        return;

     label3:
        $r2 = new com.android.server.hdmi.TimerRecordingAction;

        specialinvoke $r2.<com.android.server.hdmi.TimerRecordingAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice,int,int,byte[])>(r0, i0, i1, r21);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start [Timer Recording]-Target:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", SourceType:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", RecordSource:");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r21);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r11);

        return;
    }

    void stopOneTouchRecord(int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1, $r2;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiCecMessage $r3;
        java.lang.StringBuilder $r4, $r8;
        java.lang.String $r7, $r11;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isControlEnabled()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", "Can not stop one touch record. CEC control is disabled.");

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceOneTouchRecordResult(int,int)>(i0, 51);

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean checkRecorder(int)>(i0);

        if $z1 != 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid recorder address:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r11);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceOneTouchRecordResult(int,int)>(i0, 49);

        return;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void removeAction(java.lang.Class)>(class "Lcom/android/server/hdmi/OneTouchRecordAction;");

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildRecordOff(int,int)>($i1, i0);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stop [One Touch Record]-Target:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r7);

        return;
    }

    void updateActiveInput(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, $i1, $i2, $i3;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r1;
        com.android.server.hdmi.HdmiControlService $r2, $r7;
        android.hardware.hdmi.HdmiDeviceInfo $r3, r4, r5, r6;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePath(int)>(i0);

        if z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i1 = $r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>($i1);

        r5 = r4;

        if r4 != null goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        r6 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfoByPort(int)>($i2);

        r5 = r6;

        if r6 != null goto label1;

        $r3 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        specialinvoke $r3.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int)>(i0, $i3);

        r5 = $r3;

     label1:
        $r7 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r7.<com.android.server.hdmi.HdmiControlService: void invokeInputChangeListener(android.hardware.hdmi.HdmiDeviceInfo)>(r5);

     label2:
        return;
    }

    void updateActiveSource(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource of(int,int)>(i0, i1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateActiveSource(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource)>($r1);

        return;
    }

    void updateActiveSource(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.hardware.hdmi.HdmiDeviceInfo $r3;
        com.android.server.hdmi.HdmiControlService $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $z0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActiveSource(com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource)>(r1);

        i0 = r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress>;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        if $r3 == null goto label2;

        $i1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int mAddress>;

        if i0 == $i1 goto label2;

        $r4 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress>;

        $i3 = virtualinvoke $r4.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>($i2);

        $i4 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        if $i3 != $i4 goto label2;

        $i5 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setPrevPortId(int)>($i5);

     label2:
        return;
    }

    boolean updateCecSwitchInfo(int, int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, i2;
        android.util.ArraySet $r1, $r3;
        java.lang.Integer $r2, $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 != 15 goto label1;

        if i1 != 6 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.ArraySet mCecSwitches>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void updateSafeDeviceInfoList()>();

        return 1;

     label1:
        if i1 != 5 goto label2;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.util.ArraySet mCecSwitches>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        virtualinvoke $r1.<android.util.ArraySet: boolean add(java.lang.Object)>($r2);

     label2:
        return 0;
    }

    void updateDevicePowerStatus(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDeviceTv r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        android.hardware.hdmi.HdmiDeviceInfo r6, r8;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDeviceTv;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

        if r6 != null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not update power status of non-existing device:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDeviceTv", $r5);

        return;

     label1:
        $i2 = virtualinvoke r6.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        if $i2 != i1 goto label2;

        return;

     label2:
        r8 = staticinvoke <com.android.server.hdmi.HdmiUtils: android.hardware.hdmi.HdmiDeviceInfo cloneHdmiDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo,int)>(r6, i1);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo addDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>(r8);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void invokeDeviceEventListener(android.hardware.hdmi.HdmiDeviceInfo,int)>(r8, 3);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.HdmiCecLocalDeviceTv: java.lang.String TAG> = "HdmiCecLocalDeviceTv";

        return;
    }
}
