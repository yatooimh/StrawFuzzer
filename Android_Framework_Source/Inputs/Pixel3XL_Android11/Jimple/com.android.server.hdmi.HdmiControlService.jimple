public class com.android.server.hdmi.HdmiControlService extends com.android.server.SystemService
{
    private static final java.util.Locale HONG_KONG;
    static final int INITIATED_BY_BOOT_UP;
    static final int INITIATED_BY_ENABLE_CEC;
    static final int INITIATED_BY_HOTPLUG;
    static final int INITIATED_BY_SCREEN_ON;
    static final int INITIATED_BY_WAKE_UP_MESSAGE;
    private static final java.util.Locale MACAU;
    static final java.lang.String PERMISSION;
    static final int STANDBY_SCREEN_OFF;
    static final int STANDBY_SHUTDOWN;
    private static final java.lang.String TAG;
    private static final boolean isHdmiCecNeverClaimPlaybackLogicAddr;
    private static final java.util.Map sTerminologyToBibliographicMap;
    private int mActivePortId;
    protected final com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource;
    private boolean mAddressAllocated;
    private com.android.server.hdmi.HdmiCecController mCecController;
    private final com.android.server.hdmi.HdmiControlService$CecMessageBuffer mCecMessageBuffer;
    private final java.util.ArrayList mDeviceEventListenerRecords;
    private android.hardware.hdmi.IHdmiControlCallback mDisplayStatusCallback;
    private final android.os.Handler mHandler;
    private boolean mHdmiCecVolumeControlEnabled;
    private final android.os.RemoteCallbackList mHdmiCecVolumeControlFeatureListenerRecords;
    private final com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver mHdmiControlBroadcastReceiver;
    private boolean mHdmiControlEnabled;
    private final java.util.ArrayList mHdmiControlStatusChangeListenerRecords;
    private final java.util.ArrayList mHotplugEventListenerRecords;
    private com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord;
    private android.os.Looper mIoLooper;
    private final android.os.HandlerThread mIoThread;
    private int mLastInputMhl;
    private final java.util.List mLocalDevices;
    private final java.lang.Object mLock;
    private java.lang.String mMenuLanguage;
    private com.android.server.hdmi.HdmiCecMessageValidator mMessageValidator;
    private com.android.server.hdmi.HdmiMhlControllerStub mMhlController;
    private java.util.List mMhlDevices;
    private boolean mMhlInputChangeEnabled;
    private final java.util.ArrayList mMhlVendorCommandListenerRecords;
    private android.hardware.hdmi.IHdmiControlCallback mOtpCallbackPendingAddressAllocation;
    private int mPhysicalAddress;
    private com.android.server.hdmi.UnmodifiableSparseArray mPortDeviceMap;
    private com.android.server.hdmi.UnmodifiableSparseIntArray mPortIdMap;
    private java.util.List mPortInfo;
    private com.android.server.hdmi.UnmodifiableSparseArray mPortInfoMap;
    private android.os.PowerManager mPowerManager;
    private int mPowerStatus;
    private boolean mProhibitMode;
    private com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord;
    private final com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer;
    private final com.android.server.hdmi.HdmiControlService$SettingsObserver mSettingsObserver;
    private boolean mStandbyMessageReceived;
    private boolean mSystemAudioActivated;
    private final java.util.ArrayList mSystemAudioModeChangeListenerRecords;
    private android.media.tv.TvInputManager mTvInputManager;
    private final java.util.ArrayList mVendorCommandListenerRecords;
    private boolean mWakeUpMessageReceived;

    static void <clinit>()
    {
        java.util.Locale $r0, $r1;
        java.util.Map $r2;
        boolean $z0;

        <com.android.server.hdmi.HdmiControlService: java.lang.String TAG> = "HdmiControlService";

        <com.android.server.hdmi.HdmiControlService: int STANDBY_SHUTDOWN> = 1;

        <com.android.server.hdmi.HdmiControlService: int STANDBY_SCREEN_OFF> = 0;

        <com.android.server.hdmi.HdmiControlService: java.lang.String PERMISSION> = "android.permission.HDMI_CEC";

        <com.android.server.hdmi.HdmiControlService: int INITIATED_BY_WAKE_UP_MESSAGE> = 3;

        <com.android.server.hdmi.HdmiControlService: int INITIATED_BY_SCREEN_ON> = 2;

        <com.android.server.hdmi.HdmiControlService: int INITIATED_BY_HOTPLUG> = 4;

        <com.android.server.hdmi.HdmiControlService: int INITIATED_BY_ENABLE_CEC> = 0;

        <com.android.server.hdmi.HdmiControlService: int INITIATED_BY_BOOT_UP> = 1;

        $r0 = new java.util.Locale;

        specialinvoke $r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "HK");

        <com.android.server.hdmi.HdmiControlService: java.util.Locale HONG_KONG> = $r0;

        $r1 = new java.util.Locale;

        specialinvoke $r1.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "MO");

        <com.android.server.hdmi.HdmiControlService: java.util.Locale MACAU> = $r1;

        $r2 = staticinvoke <com.android.server.hdmi.HdmiControlService: java.util.Map createsTerminologyToBibliographicMap()>();

        <com.android.server.hdmi.HdmiControlService: java.util.Map sTerminologyToBibliographicMap> = $r2;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.hdmi.property_hdmi_cec_never_claim_playback_logical_address", 0);

        <com.android.server.hdmi.HdmiControlService: boolean isHdmiCecNeverClaimPlaybackLogicAddr> = $z0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List r1, r31;
        java.util.Locale $r13;
        java.lang.String $r14, $r22, $r24;
        boolean $z0;
        android.os.Handler $r19, r42;
        java.util.stream.Stream $r25, $r27;
        com.android.server.hdmi.'-$$Lambda$K4ZzFqYFNam5YM38fkNzD7tIaNU' $r26;
        java.util.stream.Collector $r28;
        java.lang.Object $r29, r35;
        android.content.Context r30;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r33;
        android.os.HandlerThread r34;
        java.util.ArrayList r36, r38, r39, r40, r41, r44;
        android.os.RemoteCallbackList r37;
        com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver r43;
        com.android.server.hdmi.HdmiControlService$CecMessageBuffer r45;
        com.android.server.hdmi.SelectRequestBuffer r46;
        java.lang.StringBuilder r47;
        com.android.server.hdmi.HdmiControlService$SettingsObserver r48;
        java.util.function.Predicate r49;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r30 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r30);

        r33 = new com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource;

        specialinvoke r33.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource> = r33;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mSystemAudioActivated> = 0;

        r34 = new android.os.HandlerThread;

        specialinvoke r34.<android.os.HandlerThread: void <init>(java.lang.String)>("Hdmi Control Io Thread");

        r0.<com.android.server.hdmi.HdmiControlService: android.os.HandlerThread mIoThread> = r34;

        r35 = new java.lang.Object;

        specialinvoke r35.<java.lang.Object: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock> = r35;

        r36 = new java.util.ArrayList;

        specialinvoke r36.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHdmiControlStatusChangeListenerRecords> = r36;

        r37 = new android.os.RemoteCallbackList;

        specialinvoke r37.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: android.os.RemoteCallbackList mHdmiCecVolumeControlFeatureListenerRecords> = r37;

        r38 = new java.util.ArrayList;

        specialinvoke r38.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHotplugEventListenerRecords> = r38;

        r39 = new java.util.ArrayList;

        specialinvoke r39.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mDeviceEventListenerRecords> = r39;

        r40 = new java.util.ArrayList;

        specialinvoke r40.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords> = r40;

        r41 = new java.util.ArrayList;

        specialinvoke r41.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mSystemAudioModeChangeListenerRecords> = r41;

        r42 = new android.os.Handler;

        specialinvoke r42.<android.os.Handler: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler> = r42;

        r43 = new com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver;

        specialinvoke r43.<com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiControlService$1)>(r0, null);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver mHdmiControlBroadcastReceiver> = r43;

        r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mDisplayStatusCallback> = null;

        r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mOtpCallbackPendingAddressAllocation> = null;

        r0.<com.android.server.hdmi.HdmiControlService: java.util.List mPortInfo> = null;

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 1;

        $r13 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r14 = staticinvoke <com.android.server.hdmi.HdmiControlService: java.lang.String localeToMenuLanguage(java.util.Locale)>($r13);

        r0.<com.android.server.hdmi.HdmiControlService: java.lang.String mMenuLanguage> = $r14;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived> = 0;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mWakeUpMessageReceived> = 0;

        r0.<com.android.server.hdmi.HdmiControlService: int mActivePortId> = -1;

        r44 = new java.util.ArrayList;

        specialinvoke r44.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mMhlVendorCommandListenerRecords> = r44;

        r0.<com.android.server.hdmi.HdmiControlService: int mPhysicalAddress> = 65535;

        r0.<com.android.server.hdmi.HdmiControlService: int mLastInputMhl> = -1;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated> = 0;

        r45 = new com.android.server.hdmi.HdmiControlService$CecMessageBuffer;

        specialinvoke r45.<com.android.server.hdmi.HdmiControlService$CecMessageBuffer: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiControlService$1)>(r0, null);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$CecMessageBuffer mCecMessageBuffer> = r45;

        r46 = new com.android.server.hdmi.SelectRequestBuffer;

        specialinvoke r46.<com.android.server.hdmi.SelectRequestBuffer: void <init>()>();

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer> = r46;

        r1 = staticinvoke <android.sysprop.HdmiProperties: java.util.List device_type()>();

        r31 = r1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z0 == 0 goto label1;

        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing ro.hdmi.device.type: ");

        $r22 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.hdmi.device_type");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r24);

        $r25 = interfaceinvoke r1.<java.util.List: java.util.stream.Stream stream()>();

        $r26 = <com.android.server.hdmi._$$Lambda$K4ZzFqYFNam5YM38fkNzD7tIaNU: com.android.server.hdmi.'-$$Lambda$K4ZzFqYFNam5YM38fkNzD7tIaNU' INSTANCE>;

        r49 = (java.util.function.Predicate) $r26;

        $r27 = interfaceinvoke $r25.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r49);

        $r28 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r29 = interfaceinvoke $r27.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r28);

        r31 = (java.util.List) $r29;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices> = r31;

        r48 = new com.android.server.hdmi.HdmiControlService$SettingsObserver;

        $r19 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler>;

        specialinvoke r48.<com.android.server.hdmi.HdmiControlService$SettingsObserver: void <init>(com.android.server.hdmi.HdmiControlService,android.os.Handler)>(r0, $r19);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$SettingsObserver mSettingsObserver> = r48;

        return;
    }

    static void access$000(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        return;
    }

    static void access$100(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void onWakeUp()>();

        return;
    }

    static com.android.server.hdmi.HdmiMhlControllerStub access$1000(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiMhlControllerStub $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        return $r1;
    }

    static void access$1100(com.android.server.hdmi.HdmiControlService, java.lang.String)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void setDisplayName(java.lang.String)>(r1);

        return;
    }

    static android.hardware.hdmi.HdmiDeviceInfo access$1200(com.android.server.hdmi.HdmiControlService, int, int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2;
        android.hardware.hdmi.HdmiDeviceInfo $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiDeviceInfo createDeviceInfo(int,int,int)>(i0, i1, i2);

        return $r1;
    }

    static boolean access$1300(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated>;

        return $z0;
    }

    static boolean access$1302(com.android.server.hdmi.HdmiControlService, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated> = z0;

        return z0;
    }

    static void access$1400(com.android.server.hdmi.HdmiControlService, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void onInitializeCecComplete(int)>(i0);

        return;
    }

    static void access$1500(com.android.server.hdmi.HdmiControlService, java.util.ArrayList, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList r1;
        int i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: java.util.ArrayList;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void notifyAddressAllocated(java.util.ArrayList,int)>(r1, i0);

        return;
    }

    static android.hardware.hdmi.IHdmiControlCallback access$1600(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mDisplayStatusCallback>;

        return $r1;
    }

    static android.hardware.hdmi.IHdmiControlCallback access$1602(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mDisplayStatusCallback> = r1;

        return r1;
    }

    static void access$1700(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)>(r1);

        return;
    }

    static android.hardware.hdmi.IHdmiControlCallback access$1800(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mOtpCallbackPendingAddressAllocation>;

        return $r1;
    }

    static android.hardware.hdmi.IHdmiControlCallback access$1802(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mOtpCallbackPendingAddressAllocation> = r1;

        return r1;
    }

    static com.android.server.hdmi.HdmiControlService$CecMessageBuffer access$1900(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$CecMessageBuffer $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$CecMessageBuffer mCecMessageBuffer>;

        return $r1;
    }

    static java.lang.String access$200(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.String mMenuLanguage>;

        return $r1;
    }

    static java.util.ArrayList access$2100(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mMhlVendorCommandListenerRecords>;

        return $r1;
    }

    static java.lang.Object access$2200(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        return $r1;
    }

    static java.util.ArrayList access$2300(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHdmiControlStatusChangeListenerRecords>;

        return $r1;
    }

    static java.util.ArrayList access$2400(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHotplugEventListenerRecords>;

        return $r1;
    }

    static java.util.ArrayList access$2500(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mDeviceEventListenerRecords>;

        return $r1;
    }

    static java.util.ArrayList access$2600(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mSystemAudioModeChangeListenerRecords>;

        return $r1;
    }

    static java.util.ArrayList access$2700(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords>;

        return $r1;
    }

    static com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord access$2800(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

        return $r1;
    }

    static com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord access$2802(com.android.server.hdmi.HdmiControlService, com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord;

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord> = r1;

        return r1;
    }

    static void access$2900(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void enforceAccessPermission()>();

        return;
    }

    static void access$300(com.android.server.hdmi.HdmiControlService, java.lang.String)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void onLanguageChanged(java.lang.String)>(r1);

        return;
    }

    static void access$3000(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlCallback, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        int i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlCallback;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, i0);

        return;
    }

    static com.android.server.hdmi.SelectRequestBuffer access$3100(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.SelectRequestBuffer $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer>;

        return $r1;
    }

    static int access$3200(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $i0 = r0.<com.android.server.hdmi.HdmiControlService: int mActivePortId>;

        return $i0;
    }

    static void access$3300(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlStatusChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlStatusChangeListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>(r1);

        return;
    }

    static void access$3400(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlStatusChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlStatusChangeListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void removeHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)>(r1);

        return;
    }

    static void access$3500(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiHotplugEventListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiHotplugEventListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiHotplugEventListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>(r1);

        return;
    }

    static void access$3600(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiHotplugEventListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiHotplugEventListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiHotplugEventListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>(r1);

        return;
    }

    static void access$3700(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiDeviceEventListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiDeviceEventListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiDeviceEventListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)>(r1);

        return;
    }

    static int access$3800(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPhysicalAddress>;

        return $i0;
    }

    static void access$3900(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiSystemAudioModeChangeListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void addSystemAudioModeChangeListner(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>(r1);

        return;
    }

    static void access$4000(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiSystemAudioModeChangeListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>(r1);

        return;
    }

    static void access$4100(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiInputChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiInputChangeListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiInputChangeListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)>(r1);

        return;
    }

    static java.util.List access$4200(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: java.util.List getMhlDevicesLocked()>();

        return $r1;
    }

    static int access$4300(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $i0 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: int getRemoteControlSourceAddress()>();

        return $i0;
    }

    static com.android.server.hdmi.HdmiCecLocalDeviceSource access$4400(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecLocalDeviceSource $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceSource getSwitchDevice()>();

        return $r1;
    }

    static void access$4500(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiVendorCommandListener, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiVendorCommandListener r1;
        int i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiVendorCommandListener;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)>(r1, i0);

        return;
    }

    static void access$4600(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiRecordListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiRecordListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiRecordListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)>(r1);

        return;
    }

    static void access$4700(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiMhlVendorCommandListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiMhlVendorCommandListener r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiMhlVendorCommandListener;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>(r1);

        return;
    }

    static boolean access$4800(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mProhibitMode>;

        return $z0;
    }

    static int access$4900(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        return $i0;
    }

    static boolean access$5000(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiControlEnabled>;

        return $z0;
    }

    static boolean access$5100(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mMhlInputChangeEnabled>;

        return $z0;
    }

    static boolean access$5200(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiCecVolumeControlEnabled>;

        return $z0;
    }

    static java.util.List access$5300(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mPortInfo>;

        return $r1;
    }

    static void access$5400(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiControlStatusChangeListener, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r1;
        boolean z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiControlStatusChangeListener;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeHdmiControlStatusChangeListenerLocked(android.hardware.hdmi.IHdmiControlStatusChangeListener,boolean)>(r1, z0);

        return;
    }

    static void access$5600(com.android.server.hdmi.HdmiControlService, android.hardware.hdmi.IHdmiHotplugEventListener, android.hardware.hdmi.HdmiHotplugEvent)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiHotplugEventListener r1;
        android.hardware.hdmi.HdmiHotplugEvent r2;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: android.hardware.hdmi.IHdmiHotplugEventListener;

        r2 := @parameter2: android.hardware.hdmi.HdmiHotplugEvent;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeHotplugEventListenerLocked(android.hardware.hdmi.IHdmiHotplugEventListener,android.hardware.hdmi.HdmiHotplugEvent)>(r1, r2);

        return;
    }

    static com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord access$5900(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord>;

        return $r1;
    }

    static com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord access$5902(com.android.server.hdmi.HdmiControlService, com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter1: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord;

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord> = r1;

        return r1;
    }

    static void access$6200(com.android.server.hdmi.HdmiControlService, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void onStandbyCompleted(int)>(i0);

        return;
    }

    static void access$6600(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void disableHdmiControlService()>();

        return;
    }

    static void access$6700(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void clearLocalDevices()>();

        return;
    }

    static java.util.List access$700(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices>;

        return $r1;
    }

    static com.android.server.hdmi.HdmiCecController access$800(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        return $r1;
    }

    static int access$900(boolean)
    {
        boolean z0;
        int $i0;

        z0 := @parameter0: boolean;

        $i0 = staticinvoke <com.android.server.hdmi.HdmiControlService: int toInt(boolean)>(z0);

        return $i0;
    }

    private void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord $r1;
        android.os.IBinder $r2;
        java.util.ArrayList $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        android.hardware.hdmi.IHdmiDeviceEventListener r6;
        java.lang.Object r8;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r6 := @parameter0: android.hardware.hdmi.IHdmiDeviceEventListener;

        $r1 = new com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord;

        specialinvoke $r1.<com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiDeviceEventListener)>(r0, r6);

     label1:
        $r2 = interfaceinvoke r6.<android.hardware.hdmi.IHdmiDeviceEventListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r1, 0);

     label2:
        r8 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r8;

     label3:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mDeviceEventListenerRecords>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        exitmonitor r8;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r8;

     label7:
        throw $r4;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died");

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r2;
        com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord $r3;
        android.os.IBinder $r4;
        java.util.ArrayList $r5;
        com.android.server.hdmi.HdmiControlService$2 $r6;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r9 := @parameter0: android.hardware.hdmi.IHdmiControlStatusChangeListener;

        $r3 = new com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord;

        specialinvoke $r3.<com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiControlStatusChangeListener)>(r0, r9);

     label1:
        $r4 = interfaceinvoke r9.<android.hardware.hdmi.IHdmiControlStatusChangeListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r3, 0);

     label2:
        r2 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $r5 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHdmiControlStatusChangeListenerRecords>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        exitmonitor r2;

     label4:
        $r6 = new com.android.server.hdmi.HdmiControlService$2;

        specialinvoke $r6.<com.android.server.hdmi.HdmiControlService$2: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord,android.hardware.hdmi.IHdmiControlStatusChangeListener)>(r0, $r3, r9);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void runOnServiceThread(java.lang.Runnable)>($r6);

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r8;

     label8:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died");

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord $r1;
        android.os.IBinder $r2;
        java.util.ArrayList $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        android.hardware.hdmi.IHdmiMhlVendorCommandListener r6;
        java.lang.Object r8;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r6 := @parameter0: android.hardware.hdmi.IHdmiMhlVendorCommandListener;

        $r1 = new com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord;

        specialinvoke $r1.<com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiMhlVendorCommandListener)>(r0, r6);

     label1:
        $r2 = interfaceinvoke r6.<android.hardware.hdmi.IHdmiMhlVendorCommandListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r1, 0);

     label2:
        r8 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r8;

     label3:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mMhlVendorCommandListenerRecords>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        exitmonitor r8;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r8;

     label7:
        throw $r5;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died.");

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r2;
        com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord $r3;
        android.os.IBinder $r4;
        java.util.ArrayList $r5;
        com.android.server.hdmi.HdmiControlService$4 $r6;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        android.hardware.hdmi.IHdmiHotplugEventListener r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r9 := @parameter0: android.hardware.hdmi.IHdmiHotplugEventListener;

        $r3 = new com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord;

        specialinvoke $r3.<com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiHotplugEventListener)>(r0, r9);

     label1:
        $r4 = interfaceinvoke r9.<android.hardware.hdmi.IHdmiHotplugEventListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r3, 0);

     label2:
        r2 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $r5 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHotplugEventListenerRecords>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        exitmonitor r2;

     label4:
        $r6 = new com.android.server.hdmi.HdmiControlService$4;

        specialinvoke $r6.<com.android.server.hdmi.HdmiControlService$4: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord,android.hardware.hdmi.IHdmiHotplugEventListener)>(r0, $r3, r9);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void runOnServiceThread(java.lang.Runnable)>($r6);

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r8;

     label8:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died");

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addSystemAudioModeChangeListner(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord $r1;
        android.os.IBinder $r2;
        java.util.ArrayList $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        android.hardware.hdmi.IHdmiSystemAudioModeChangeListener r6;
        java.lang.Object r8;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r6 := @parameter0: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener;

        $r1 = new com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord;

        specialinvoke $r1.<com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>(r0, r6);

     label1:
        $r2 = interfaceinvoke r6.<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r1, 0);

     label2:
        r8 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r8;

     label3:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mSystemAudioModeChangeListenerRecords>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        exitmonitor r8;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r8;

     label7:
        throw $r5;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died");

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord $r1;
        android.os.IBinder $r2;
        java.util.ArrayList $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        android.hardware.hdmi.IHdmiVendorCommandListener r6;
        java.lang.Object r8;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r6 := @parameter0: android.hardware.hdmi.IHdmiVendorCommandListener;

        i0 := @parameter1: int;

        $r1 = new com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord;

        specialinvoke $r1.<com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiVendorCommandListener,int)>(r0, r6, i0);

     label1:
        $r2 = interfaceinvoke r6.<android.hardware.hdmi.IHdmiVendorCommandListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r1, 0);

     label2:
        r8 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r8;

     label3:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        exitmonitor r8;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r8;

     label7:
        throw $r4;

     label8:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died");

        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void announceHdmiCecVolumeControlFeatureChange(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;
        com.android.server.hdmi._$$Lambda$HdmiControlService$gJ3W6c9ujoKExO828xtTtayt8kE $r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: android.os.RemoteCallbackList mHdmiCecVolumeControlFeatureListenerRecords>;

        $r1 = new com.android.server.hdmi._$$Lambda$HdmiControlService$gJ3W6c9ujoKExO828xtTtayt8kE;

        specialinvoke $r1.<com.android.server.hdmi._$$Lambda$HdmiControlService$gJ3W6c9ujoKExO828xtTtayt8kE: void <init>(boolean)>(z0);

        virtualinvoke $r2.<android.os.RemoteCallbackList: void broadcast(java.util.function.Consumer)>($r1);

        return;
    }

    private void announceHdmiControlStatusChange(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.util.ArrayList $r2;
        com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord $r4;
        android.hardware.hdmi.IHdmiControlStatusChangeListener $r5;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHdmiControlStatusChangeListenerRecords>;

        r7 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord) $r3;

        $r5 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord: android.hardware.hdmi.IHdmiControlStatusChangeListener access$5500(com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord)>($r4);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeHdmiControlStatusChangeListenerLocked(android.hardware.hdmi.IHdmiControlStatusChangeListener,boolean)>($r5, z0);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void announceHotplugEvent(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object r2, $r5;
        android.hardware.hdmi.HdmiHotplugEvent $r3;
        java.util.ArrayList $r4;
        com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord $r6;
        android.hardware.hdmi.IHdmiHotplugEventListener $r7;
        java.lang.Throwable $r8;
        java.util.Iterator r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = new android.hardware.hdmi.HdmiHotplugEvent;

        specialinvoke $r3.<android.hardware.hdmi.HdmiHotplugEvent: void <init>(int,boolean)>(i0, z0);

        r2 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHotplugEventListenerRecords>;

        r9 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord) $r5;

        $r7 = staticinvoke <com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord: android.hardware.hdmi.IHdmiHotplugEventListener access$5700(com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord)>($r6);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeHotplugEventListenerLocked(android.hardware.hdmi.IHdmiHotplugEventListener,android.hardware.hdmi.HdmiHotplugEvent)>($r7, $r3);

     label3:
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void assertRunOnServiceThread()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.Looper $r1, $r3;
        android.os.Handler $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        if $r1 != $r3 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should run on service thread.");

        throw $r4;
    }

    private void bootCompleted()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.PowerManager $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager: boolean isInteractive()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void onWakeUp()>();

     label1:
        return;
    }

    private boolean canGoToStandby()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.Iterator r1;
        com.android.server.hdmi.HdmiCecController $r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        com.android.server.hdmi.HdmiCecLocalDevice $r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: java.util.List getLocalDeviceList()>();

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.hdmi.HdmiCecLocalDevice) $r4;

        $z1 = virtualinvoke $r5.<com.android.server.hdmi.HdmiCecLocalDevice: boolean canGoToStandby()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    private int checkPollStrategy(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2, $i3;
        java.lang.StringBuilder $r1, $r6;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.String $r5, $r10;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 = i0 & 3;

        if i1 == 0 goto label2;

        i2 = 196608 & i0;

        if i2 == 0 goto label1;

        $i3 = i1 | i2;

        return $i3;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid iteration strategy:");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid poll strategy:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void clearLocalDevices()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController r1, $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.server.hdmi.HdmiCecController: void clearLogicalAddress()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: void clearLocalDevices()>();

        return;
    }

    private android.hardware.hdmi.HdmiDeviceInfo createDeviceInfo(int, int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.String r1, $r2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r2 = <android.os.Build: java.lang.String MODEL>;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: java.lang.String readStringSetting(java.lang.String,java.lang.String)>("device_name", $r2);

        $r3 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i4 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i5 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>($i4);

        $i6 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int getVendorId()>();

        specialinvoke $r3.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String,int)>(i0, $i3, $i5, i1, $i6, r1, i2);

        return $r3;
    }

    private static java.util.Map createsTerminologyToBibliographicMap()
    {
        java.util.HashMap $r1;
        java.util.Map $r21;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sqi", "alb");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hye", "arm");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("eus", "baq");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mya", "bur");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ces", "cze");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("nld", "dut");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kat", "geo");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("deu", "ger");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ell", "gre");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("fra", "fre");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("isl", "ice");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mkd", "mac");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mri", "mao");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("msa", "may");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("fas", "per");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ron", "rum");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("slk", "slo");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("bod", "tib");

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cym", "wel");

        $r21 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r21;
    }

    private void disableDevices(com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1;
        com.android.server.hdmi.HdmiMhlControllerStub $r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        com.android.server.hdmi.HdmiCecLocalDevice $r5;
        com.android.server.hdmi.HdmiCecController r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback;

        r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if r6 == null goto label2;

        $r3 = virtualinvoke r6.<com.android.server.hdmi.HdmiCecController: java.util.List getLocalDeviceList()>();

        r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.hdmi.HdmiCecLocalDevice) $r4;

        $z1 = r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiCecLocalDevice: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>($z1, r1);

        goto label1;

     label2:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiMhlControllerStub: void clearAllLocalDevices()>();

        return;
    }

    private void disableHdmiControlService()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$9 $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = new com.android.server.hdmi.HdmiControlService$9;

        specialinvoke $r1.<com.android.server.hdmi.HdmiControlService$9: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void disableDevices(com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>($r1);

        return;
    }

    private boolean dispatchMessageToLocalDevice(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiCecController $r2;
        java.util.List $r3;
        boolean $z0, $z1;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        com.android.server.hdmi.HdmiCecLocalDevice $r10;
        java.util.Iterator r11;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: java.util.List getLocalDeviceList()>();

        r11 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.hdmi.HdmiCecLocalDevice) $r9;

        $z1 = virtualinvoke $r10.<com.android.server.hdmi.HdmiCecLocalDevice: boolean dispatchMessage(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z1 == 0 goto label2;

        $i1 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        if $i1 == 15 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getDestination()>();

        if $i0 == 15 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled cec command:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void warning(java.lang.String,java.lang.Object[])>($r7, $r8);

     label4:
        return 0;
    }

    private void enableHdmiControlService()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1, $r2;
        com.android.server.hdmi.HdmiMhlControllerStub $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(2, 1);

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(3, 1);

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiMhlControllerStub: void setOption(int,int)>(103, 1);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void initializeCec(int)>(0);

        return;
    }

    private void enforceAccessPermission()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.HDMI_CEC", "HdmiControlService");

        return;
    }

    protected static java.util.List getIntList(java.lang.String)
    {
        java.util.ArrayList $r1;
        android.text.TextUtils$SimpleStringSplitter $r2;
        boolean $z0;
        java.util.List $r3;
        java.lang.Object $r4;
        int $i0;
        java.lang.Integer $r5;
        java.lang.Throwable $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10, r11, r14;
        java.util.Iterator r13;

        r11 := @parameter0: java.lang.String;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new android.text.TextUtils$SimpleStringSplitter;

        specialinvoke $r2.<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>(44);

        virtualinvoke $r2.<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>(r11);

        r13 = virtualinvoke $r2.<android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r4;

     label2:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r14);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t parseInt: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r10);

     label5:
        goto label1;

     label6:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r3;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    private java.util.List getMhlDevicesLocked()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mMhlDevices>;

        return $r1;
    }

    private int getRemoteControlSourceAddress()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r1;
        android.hardware.hdmi.HdmiDeviceInfo $r2, $r4;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isAudioSystemDevice()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $r4 = virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i1 = virtualinvoke $r4.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        return $i1;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i0 = virtualinvoke $r2.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        return $i0;

     label2:
        return 15;
    }

    private com.android.server.hdmi.HdmiCecLocalDeviceSource getSwitchDevice()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isAudioSystemDevice()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        return $r2;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        return $r1;

     label2:
        return null;
    }

    private void initializeCec(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.HdmiCecController $r1, $r3;
        java.lang.String $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated> = 0;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(3, 1);

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.String mMenuLanguage>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecController: void setLanguage(java.lang.String)>($r2);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void initializeLocalDevices(int)>(i0);

        return;
    }

    private void initializeLocalDevices(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiCecLocalDevice r3, r9;
        java.util.ArrayList $r4;
        java.util.List $r5;
        java.lang.Object $r6;
        java.lang.Integer $r7;
        com.android.server.hdmi.HdmiCecController $r8;
        boolean $z1, $z2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.Integer) $r6;

        i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if i1 != 4 goto label2;

        $z1 = <com.android.server.hdmi.HdmiControlService: boolean isHdmiCecNeverClaimPlaybackLogicAddr>;

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        $r8 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        r3 = virtualinvoke $r8.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiCecLocalDevice getLocalDevice(int)>(i1);

        r9 = r3;

        if r3 != null goto label3;

        r9 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice create(com.android.server.hdmi.HdmiControlService,int)>(r0, i1);

     label3:
        virtualinvoke r9.<com.android.server.hdmi.HdmiCecLocalDevice: void init()>();

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r9);

        goto label1;

     label4:
        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void clearLocalDevices()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void allocateLogicalAddress(java.util.ArrayList,int)>($r4, i0);

        return;
    }

    private void invokeCallback(android.hardware.hdmi.IHdmiControlCallback, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.hardware.hdmi.IHdmiControlCallback r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r7 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        i0 := @parameter1: int;

     label1:
        interfaceinvoke r7.<android.hardware.hdmi.IHdmiControlCallback: void onComplete(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking callback failed:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiControlService", $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void invokeHdmiControlStatusChangeListenerLocked(android.hardware.hdmi.IHdmiControlStatusChangeListener, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;
        com.android.server.hdmi.HdmiControlService$5 $r2;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r9;
        android.hardware.hdmi.IHdmiControlStatusChangeListener r10;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r10 := @parameter0: android.hardware.hdmi.IHdmiControlStatusChangeListener;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = new com.android.server.hdmi.HdmiControlService$5;

        specialinvoke $r2.<com.android.server.hdmi.HdmiControlService$5: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiControlStatusChangeListener,boolean)>(r0, r10, z0);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)>($r2);

        return;

     label1:
        interfaceinvoke r10.<android.hardware.hdmi.IHdmiControlStatusChangeListener: void onStatusChange(boolean,boolean)>(z0, 0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report HdmiControlStatusChange: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isAvailable: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(0);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", $r9, $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void invokeHotplugEventListenerLocked(android.hardware.hdmi.IHdmiHotplugEventListener, android.hardware.hdmi.HdmiHotplugEvent)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.HdmiHotplugEvent r1;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r8;
        android.hardware.hdmi.IHdmiHotplugEventListener r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r9 := @parameter0: android.hardware.hdmi.IHdmiHotplugEventListener;

        r1 := @parameter1: android.hardware.hdmi.HdmiHotplugEvent;

     label1:
        interfaceinvoke r9.<android.hardware.hdmi.IHdmiHotplugEventListener: void onReceived(android.hardware.hdmi.HdmiHotplugEvent)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report hotplug event:");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", $r8, $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void invokeSystemAudioModeChangeLocked(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.hardware.hdmi.IHdmiSystemAudioModeChangeListener r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r7 := @parameter0: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener;

        z0 := @parameter1: boolean;

     label1:
        interfaceinvoke r7.<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener: void onStatusChanged(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking callback failed:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiControlService", $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void lambda$UDUaoEvDyy4HpU7CYvj9q-5NX80(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void bootCompleted()>();

        return;
    }

    static void lambda$announceHdmiCecVolumeControlFeatureChange$0(boolean, android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)
    {
        boolean z0;
        android.os.RemoteException $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener r5;

        z0 := @parameter0: boolean;

        r5 := @parameter1: android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener;

     label1:
        interfaceinvoke r5.<android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener: void onHdmiCecVolumeControlFeature(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report HdmiControlVolumeControlStatusChange: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiControlService", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static java.lang.String localeToMenuLanguage(java.util.Locale)
    {
        java.lang.String r0, r8;
        java.util.Locale $r1, $r2, $r3, r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r4, $r5;
        java.lang.Object $r6;

        r7 := @parameter0: java.util.Locale;

        $r1 = <java.util.Locale: java.util.Locale TAIWAN>;

        $z0 = virtualinvoke r7.<java.util.Locale: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r2 = <com.android.server.hdmi.HdmiControlService: java.util.Locale HONG_KONG>;

        $z1 = virtualinvoke r7.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label3;

        $r3 = <com.android.server.hdmi.HdmiControlService: java.util.Locale MACAU>;

        $z2 = virtualinvoke r7.<java.util.Locale: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        goto label3;

     label1:
        r0 = virtualinvoke r7.<java.util.Locale: java.lang.String getISO3Language()>();

        r8 = r0;

        $r4 = <com.android.server.hdmi.HdmiControlService: java.util.Map sTerminologyToBibliographicMap>;

        $z3 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z3 == 0 goto label2;

        $r5 = <com.android.server.hdmi.HdmiControlService: java.util.Map sTerminologyToBibliographicMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (java.lang.String) $r6;

     label2:
        return r8;

     label3:
        return "chi";
    }

    private void notifyAddressAllocated(java.util.ArrayList, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, $i1;
        java.util.Iterator r1;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;
        com.android.server.hdmi.SelectRequestBuffer $r3;
        java.lang.Object $r4;
        android.hardware.hdmi.HdmiDeviceInfo $r5;
        java.util.ArrayList r6;
        com.android.server.hdmi.HdmiCecLocalDevice r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r6 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r1 = virtualinvoke r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.android.server.hdmi.HdmiCecLocalDevice) $r4;

        $r5 = virtualinvoke r7.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i1 = virtualinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        virtualinvoke r7.<com.android.server.hdmi.HdmiCecLocalDevice: void handleAddressAllocated(int,int)>($i1, i0);

        goto label1;

     label2:
        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isTvDeviceEnabled()>();

        if $z1 == 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setSelectRequestBuffer(com.android.server.hdmi.SelectRequestBuffer)>($r3);

     label3:
        return;
    }

    private void onInitializeCecComplete(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0, $z2;
        com.android.server.hdmi.HdmiCecController $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;
        int i1;
        byte b2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i1 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void updatePowerStatusOnInitializeCecComplete()>();

        r0.<com.android.server.hdmi.HdmiControlService: boolean mWakeUpMessageReceived> = 0;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isTvDeviceEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $z2 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean getAutoWakeup()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(1, $z2);

     label1:
        if i1 == 0 goto label4;

        if i1 == 1 goto label3;

        if i1 == 2 goto label2;

        if i1 == 3 goto label2;

        b2 = -1;

        goto label5;

     label2:
        b2 = 2;

        goto label5;

     label3:
        b2 = 0;

        goto label5;

     label4:
        b2 = 1;

     label5:
        if b2 == -1 goto label6;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean invokeVendorCommandListenersOnControlStateChanged(boolean,int)>(1, b2);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void announceHdmiControlStatusChange(boolean)>(1);

     label6:
        return;
    }

    private void onLanguageChanged(java.lang.String)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1;
        boolean $z0;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;
        com.android.server.hdmi.HdmiCecController $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.lang.String mMenuLanguage> = r1;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isTvDeviceEnabled()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean broadcastMenuLanguage(java.lang.String)>(r1);

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecController: void setLanguage(java.lang.String)>(r1);

     label1:
        return;
    }

    private void onStandbyCompleted(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, $i2;
        java.util.Iterator r1;
        com.android.server.hdmi.HdmiCecController $r2, $r4;
        java.util.List $r3;
        boolean $z0, $z1, $z2;
        com.android.server.hdmi.HdmiMhlControllerStub $r5;
        java.lang.Object $r6;
        com.android.server.hdmi.HdmiCecLocalDevice $r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("HdmiControlService", "onStandbyCompleted");

        $i2 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        if $i2 == 3 goto label1;

        return;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 1;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: java.util.List getLocalDeviceList()>();

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.hdmi.HdmiCecLocalDevice) $r6;

        $z2 = r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived>;

        virtualinvoke $r7.<com.android.server.hdmi.HdmiCecLocalDevice: void onStandby(boolean,int)>($z2, i0);

        goto label2;

     label3:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived> = 0;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isAudioSystemDevice()>();

        if $z1 != 0 goto label4;

        $r4 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(3, 0);

        $r5 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiMhlControllerStub: void setOption(int,int)>(104, 0);

     label4:
        return;
    }

    private void onWakeUp()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        boolean $z0, $z1;
        byte b1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 2;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if $r1 == null goto label2;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiControlEnabled>;

        if $z0 == 0 goto label3;

        b1 = 2;

        $z1 = r0.<com.android.server.hdmi.HdmiControlService: boolean mWakeUpMessageReceived>;

        if $z1 == 0 goto label1;

        b1 = 3;

     label1:
        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void initializeCec(int)>(b1);

        goto label3;

     label2:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiControlService", "Device does not support HDMI-CEC.");

     label3:
        return;
    }

    private void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mDisplayStatusCallback> = r1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("HdmiControlService", "Local device is under address allocation. Queue display callback for later process.");

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        if r2 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Local playback device not available");

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 2);

        return;

     label2:
        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)>(r1);

        return;
    }

    private void registerContentObserver()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.content.ContentResolver r1;
        java.lang.String[] r2;
        int i0, i1;
        android.content.Context $r3;
        java.lang.String $r4;
        android.net.Uri $r5;
        com.android.server.hdmi.HdmiControlService$SettingsObserver $r6;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = newarray (java.lang.String)[9];

        r2[0] = "hdmi_control_enabled";

        r2[1] = "hdmi_control_volume_control_enabled";

        r2[2] = "hdmi_control_auto_wakeup_enabled";

        r2[3] = "hdmi_control_auto_device_off_enabled";

        r2[4] = "hdmi_system_audio_control_enabled";

        r2[5] = "mhl_input_switching_enabled";

        r2[6] = "mhl_power_charge_enabled";

        r2[7] = "hdmi_cec_switch_enabled";

        r2[8] = "device_name";

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r2[i1];

        $r5 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>($r4);

        $r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$SettingsObserver mSettingsObserver>;

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r5, 0, $r6, -1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void removeHdmiControlStatusChangeListener(android.hardware.hdmi.IHdmiControlStatusChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord r3;
        java.util.ArrayList $r4, $r10;
        boolean $z0;
        android.hardware.hdmi.IHdmiControlStatusChangeListener $r6, r12;
        android.os.IBinder $r7, $r8, $r9;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r12 := @parameter0: android.hardware.hdmi.IHdmiControlStatusChangeListener;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHdmiControlStatusChangeListenerRecords>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord) $r5;

        $r6 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord: android.hardware.hdmi.IHdmiControlStatusChangeListener access$5500(com.android.server.hdmi.HdmiControlService$HdmiControlStatusChangeListenerRecord)>(r3);

        $r7 = interfaceinvoke $r6.<android.hardware.hdmi.IHdmiControlStatusChangeListener: android.os.IBinder asBinder()>();

        $r8 = interfaceinvoke r12.<android.hardware.hdmi.IHdmiControlStatusChangeListener: android.os.IBinder asBinder()>();

        if $r7 != $r8 goto label4;

        $r9 = interfaceinvoke r12.<android.hardware.hdmi.IHdmiControlStatusChangeListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r9.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        $r10 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHdmiControlStatusChangeListenerRecords>;

        virtualinvoke $r10.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r11 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord r3;
        java.util.ArrayList $r4, $r10;
        boolean $z0;
        android.hardware.hdmi.IHdmiHotplugEventListener $r6, r12;
        android.os.IBinder $r7, $r8, $r9;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r12 := @parameter0: android.hardware.hdmi.IHdmiHotplugEventListener;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHotplugEventListenerRecords>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord) $r5;

        $r6 = staticinvoke <com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord: android.hardware.hdmi.IHdmiHotplugEventListener access$5700(com.android.server.hdmi.HdmiControlService$HotplugEventListenerRecord)>(r3);

        $r7 = interfaceinvoke $r6.<android.hardware.hdmi.IHdmiHotplugEventListener: android.os.IBinder asBinder()>();

        $r8 = interfaceinvoke r12.<android.hardware.hdmi.IHdmiHotplugEventListener: android.os.IBinder asBinder()>();

        if $r7 != $r8 goto label4;

        $r9 = interfaceinvoke r12.<android.hardware.hdmi.IHdmiHotplugEventListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r9.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        $r10 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mHotplugEventListenerRecords>;

        virtualinvoke $r10.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r11 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord r3;
        java.util.ArrayList $r4, $r9;
        boolean $z0;
        android.hardware.hdmi.IHdmiSystemAudioModeChangeListener $r6, r11;
        android.os.IBinder $r7, $r8;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r11 := @parameter0: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mSystemAudioModeChangeListenerRecords>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord) $r5;

        $r6 = staticinvoke <com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener access$2000(com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord)>(r3);

        $r7 = interfaceinvoke $r6.<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener: android.os.IBinder asBinder()>();

        if $r7 != r11 goto label4;

        $r8 = interfaceinvoke r11.<android.hardware.hdmi.IHdmiSystemAudioModeChangeListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r8.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r3, 0);

        $r9 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mSystemAudioModeChangeListenerRecords>;

        virtualinvoke $r9.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void setDisplayName(java.lang.String)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1, $r7;
        java.util.Iterator r2;
        com.android.server.hdmi.HdmiCecLocalDevice r3;
        android.hardware.hdmi.HdmiDeviceInfo r4, $r8;
        java.util.List $r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        com.android.server.hdmi.HdmiCecMessage $r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.String;

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: java.util.List getAllLocalDevices()>();

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.hdmi.HdmiCecLocalDevice) $r6;

        r4 = virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $r7 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r8 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i0 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i1 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i2 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $i3 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        $i4 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: int getVendorId()>();

        $i5 = virtualinvoke r4.<android.hardware.hdmi.HdmiDeviceInfo: int getDevicePowerStatus()>();

        specialinvoke $r8.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String,int)>($i0, $i1, $i2, $i3, $i4, r1, $i5);

        virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDevice: void setDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo)>($r8);

        $i6 = r3.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        $r9 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetOsdNameCommand(int,int,java.lang.String)>($i6, 0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r9);

        goto label1;

     label3:
        return;
    }

    private void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord r2, $r4;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        android.hardware.hdmi.IHdmiRecordListener r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r7 := @parameter0: android.hardware.hdmi.IHdmiRecordListener;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = new com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord;

        specialinvoke r2.<com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiRecordListener)>(r0, r7);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord> = r2;

     label02:
        $r3 = interfaceinvoke r7.<android.hardware.hdmi.IHdmiRecordListener: android.os.IBinder asBinder()>();

        $r4 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r4, 0);

     label03:
        goto label06;

     label04:
        $r6 := @caughtexception;

     label05:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Listener already died.", $r6);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord r2, $r4;
        android.os.IBinder $r3;
        android.os.RemoteException $r5;
        java.lang.Throwable $r6;
        android.hardware.hdmi.IHdmiInputChangeListener r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r7 := @parameter0: android.hardware.hdmi.IHdmiInputChangeListener;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = new com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord;

        specialinvoke r2.<com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiInputChangeListener)>(r0, r7);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord> = r2;

     label02:
        $r3 = interfaceinvoke r7.<android.hardware.hdmi.IHdmiInputChangeListener: android.os.IBinder asBinder()>();

        $r4 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord>;

        interfaceinvoke $r3.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r4, 0);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r5 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Listener already died");

        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private static int toInt(boolean)
    {
        boolean z0;
        int i0;

        z0 := @parameter0: boolean;

        i0 = (int) z0;

        return i0;
    }

    private void updatePowerStatusOnInitializeCecComplete()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        if i0 != 2 goto label1;

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 0;

        goto label2;

     label1:
        if i0 != 3 goto label2;

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 1;

     label2:
        return;
    }

    private void updateSafeMhlInput()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.util.SparseArray r1;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r2;
        com.android.server.hdmi.HdmiMhlControllerStub $r3;
        int $i0, i1;
        java.lang.Object $r4, r9, r10, r11;
        android.hardware.hdmi.HdmiDeviceInfo $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r8;
        java.util.ArrayList r13;
        java.util.List r14, r15, r16;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r1 = virtualinvoke $r3.<com.android.server.hdmi.HdmiMhlControllerStub: android.util.SparseArray getAllLocalDevices()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label4;

        $r4 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.hdmi.HdmiMhlLocalDeviceStub) $r4;

        r10 = r9;

        $r5 = virtualinvoke r2.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: android.hardware.hdmi.HdmiDeviceInfo getInfo()>();

        if $r5 == null goto label3;

        r10 = r9;

        r14 = (java.util.List) r9;

        $z0 = interfaceinvoke r14.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r13 = new java.util.ArrayList;

        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        r10 = r13;

     label2:
        $r6 = virtualinvoke r2.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: android.hardware.hdmi.HdmiDeviceInfo getInfo()>();

        r15 = (java.util.List) r10;

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r6);

     label3:
        i1 = i1 + 1;

        r9 = r10;

        goto label1;

     label4:
        r11 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r11;

     label5:
        r16 = (java.util.List) r9;

        r0.<com.android.server.hdmi.HdmiControlService: java.util.List mMhlDevices> = r16;

        exitmonitor r11;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r11;

     label9:
        throw $r8;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void addHdmiCecVolumeControlFeatureListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener r1;
        android.os.RemoteCallbackList $r2;
        com.android.server.hdmi.HdmiControlService$3 $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: android.os.RemoteCallbackList mHdmiCecVolumeControlFeatureListenerRecords>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        $r3 = new com.android.server.hdmi.HdmiControlService$3;

        specialinvoke $r3.<com.android.server.hdmi.HdmiControlService$3: void <init>(com.android.server.hdmi.HdmiControlService,android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)>(r0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void runOnServiceThread(java.lang.Runnable)>($r3);

        return;
    }

    protected void allocateLogicalAddress(java.util.ArrayList, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.ArrayList r1, $r7;
        int i0, $i1, $i2;
        int[] r3;
        java.util.Iterator r4;
        com.android.server.hdmi.HdmiCecLocalDevice r5;
        com.android.server.hdmi.HdmiCecController $r6, $r10;
        boolean $z0, $z1;
        com.android.server.hdmi.SelectRequestBuffer $r8;
        java.lang.Object $r9;
        com.android.server.hdmi.HdmiControlService$1 $r11;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiCecController: void clearLogicalAddress()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = newarray (int)[1];

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean isEmpty()>();

        r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated> = $z0;

        $r8 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.SelectRequestBuffer mSelectRequestBuffer>;

        virtualinvoke $r8.<com.android.server.hdmi.SelectRequestBuffer: void clear()>();

        r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.hdmi.HdmiCecLocalDevice) $r9;

        $r10 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $i1 = virtualinvoke r5.<com.android.server.hdmi.HdmiCecLocalDevice: int getType()>();

        $i2 = virtualinvoke r5.<com.android.server.hdmi.HdmiCecLocalDevice: int getPreferredAddress()>();

        $r11 = new com.android.server.hdmi.HdmiControlService$1;

        specialinvoke $r11.<com.android.server.hdmi.HdmiControlService$1: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiCecLocalDevice,java.util.ArrayList,java.util.ArrayList,int[],int)>(r0, r5, $r7, r1, r3, i0);

        virtualinvoke $r10.<com.android.server.hdmi.HdmiCecController: void allocateLogicalAddress(int,int,com.android.server.hdmi.HdmiCecController$AllocateAddressCallback)>($i1, $i2, $r11);

        goto label1;

     label2:
        return;
    }

    void announceSystemAudioModeChange(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3;
        java.util.ArrayList $r2;
        com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord $r4;
        android.hardware.hdmi.IHdmiSystemAudioModeChangeListener $r5;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mSystemAudioModeChangeListenerRecords>;

        r7 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r3 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord) $r3;

        $r5 = staticinvoke <com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord: android.hardware.hdmi.IHdmiSystemAudioModeChangeListener access$2000(com.android.server.hdmi.HdmiControlService$SystemAudioModeChangeListenerRecord)>($r4);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeSystemAudioModeChangeLocked(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener,boolean)>($r5, z0);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        com.android.server.hdmi.HdmiCecLocalDevice $r2;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiCecLocalDevice getLocalDevice(int)>(5);

        $r3 = (com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem) $r2;

        return $r3;
    }

    void changeInputForMhl(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        boolean z0;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1, $r2, $r7, $r9;
        com.android.server.hdmi.HdmiMhlControllerStub $r3;
        android.hardware.hdmi.HdmiDeviceInfo $r4, r11;
        com.android.server.hdmi.UnmodifiableSparseArray $r5;
        java.lang.Object $r6;
        com.android.server.hdmi.HdmiControlService$10 $r8;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r10;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        if $r1 != null goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        i1 = virtualinvoke $r9.<com.android.server.hdmi.HdmiCecLocalDeviceTv: int getActivePortId()>();

        goto label3;

     label2:
        i1 = -1;

     label3:
        if i0 == -1 goto label4;

        $r7 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $r8 = new com.android.server.hdmi.HdmiControlService$10;

        specialinvoke $r8.<com.android.server.hdmi.HdmiControlService$10: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r0, i1);

        virtualinvoke $r7.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void doManualPortSwitching(int,android.hardware.hdmi.IHdmiControlCallback)>(i0, $r8);

     label4:
        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setActivePortId(int)>(i0);

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r10 = virtualinvoke $r3.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDevice(int)>(i0);

        if r10 == null goto label5;

        r11 = virtualinvoke r10.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: android.hardware.hdmi.HdmiDeviceInfo getInfo()>();

        goto label6;

     label5:
        $r5 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseArray mPortDeviceMap>;

        $r4 = <android.hardware.hdmi.HdmiDeviceInfo: android.hardware.hdmi.HdmiDeviceInfo INACTIVE_DEVICE>;

        $r6 = virtualinvoke $r5.<com.android.server.hdmi.UnmodifiableSparseArray: java.lang.Object get(int,java.lang.Object)>(i0, $r4);

        r11 = (android.hardware.hdmi.HdmiDeviceInfo) $r6;

     label6:
        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeInputChangeListener(android.hardware.hdmi.HdmiDeviceInfo)>(r11);

        return;
    }

    protected void checkLogicalAddressConflictAndReallocate(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.hardware.hdmi.HdmiDeviceInfo $r4, $r7;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        java.lang.Object[] $r10;
        java.util.ArrayList $r11;
        java.util.Iterator r12;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: java.util.List getAllLocalDevices()>();

        r12 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.hdmi.HdmiCecLocalDevice) $r3;

        $r4 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i1 = virtualinvoke $r4.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        if $i1 != i0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("allocate logical address for ");

        $r7 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>($r9, $r10);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void allocateLogicalAddress(java.util.ArrayList,int)>($r11, 4);

        return;

     label2:
        goto label1;

     label3:
        return;
    }

    void displayOsd(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        android.content.Intent $r2;
        android.content.Context $r4;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.hdmi.action.OSD_MESSAGE");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.hardware.hdmi.extra.MESSAGE_ID", i0);

        $r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>($r2, $r5, "android.permission.HDMI_CEC");

        return;
    }

    void displayOsd(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        android.content.Intent $r2;
        android.content.Context $r5;
        android.os.UserHandle $r6;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.hdmi.action.OSD_MESSAGE");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.hardware.hdmi.extra.MESSAGE_ID", i0);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.hardware.hdmi.extra.MESSAGE_EXTRA_PARAM1", i1);

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>($r2, $r6, "android.permission.HDMI_CEC");

        return;
    }

    void enableAudioReturnChannel(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0;
        com.android.server.hdmi.HdmiCecController $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: void enableAudioReturnChannel(int,boolean)>(i0, z0);

        return;
    }

    java.util.List getAllLocalDevices()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: java.util.List getLocalDeviceList()>();

        return $r2;
    }

    android.media.AudioManager getAudioManager()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.media.AudioManager $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r3 = (android.media.AudioManager) $r2;

        return $r3;
    }

    int getCecVersion()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $i0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: int getVersion()>();

        return $i0;
    }

    android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1, $r2;
        android.hardware.hdmi.HdmiDeviceInfo r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        if $r1 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        r3 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: android.hardware.hdmi.HdmiDeviceInfo getCecDeviceInfo(int)>(i0);

     label2:
        return r3;
    }

    android.hardware.hdmi.HdmiDeviceInfo getDeviceInfoByPort(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r1;
        com.android.server.hdmi.HdmiMhlControllerStub $r2;
        android.hardware.hdmi.HdmiDeviceInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDevice(int)>(i0);

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: android.hardware.hdmi.HdmiDeviceInfo getInfo()>();

        return $r3;

     label1:
        return null;
    }

    int getInitialPowerStatus()
    {
        com.android.server.hdmi.HdmiControlService r0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        return 3;
    }

    android.os.Looper getIoLooper()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.Looper $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Looper mIoLooper>;

        return $r1;
    }

    java.lang.String getLanguage()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.String mMenuLanguage>;

        return $r1;
    }

    int getLastInputForMhl()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $i0 = r0.<com.android.server.hdmi.HdmiControlService: int mLastInputMhl>;

        return $i0;
    }

    com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getLocalActiveSource()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int getPhysicalAddress()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $i0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: int getPhysicalAddress()>();

        return $i0;
    }

    android.hardware.hdmi.HdmiPortInfo getPortInfo(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.UnmodifiableSparseArray $r1;
        java.lang.Object $r2;
        android.hardware.hdmi.HdmiPortInfo $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseArray mPortInfoMap>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.UnmodifiableSparseArray: java.lang.Object get(int,java.lang.Object)>(i0, null);

        $r3 = (android.hardware.hdmi.HdmiPortInfo) $r2;

        return $r3;
    }

    java.util.List getPortInfo()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.util.List r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mPortInfo>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    android.os.PowerManager getPowerManager()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.PowerManager $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager>;

        return $r1;
    }

    int getPowerStatus()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        return $i0;
    }

    java.lang.Object getServiceLock()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        return $r1;
    }

    android.os.Looper getServiceLooper()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.Handler $r1;
        android.os.Looper $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Looper getLooper()>();

        return $r2;
    }

    android.media.tv.TvInputManager getTvInputManager()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.media.tv.TvInputManager $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.media.tv.TvInputManager mTvInputManager>;

        return $r1;
    }

    int getVendorId()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $i0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: int getVendorId()>();

        return $i0;
    }

    boolean handleCecCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0;
        com.android.server.hdmi.HdmiCecMessageValidator $r2;
        boolean $z0, $z1, z2;
        com.android.server.hdmi.HdmiControlService$CecMessageBuffer $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecMessageValidator mMessageValidator>;

        i0 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecMessageValidator: int isValid(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if i0 == 0 goto label2;

        if i0 != 3 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, 3);

     label1:
        return 1;

     label2:
        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean dispatchMessageToLocalDevice(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $z1 = r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated>;

        if $z1 != 0 goto label4;

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$CecMessageBuffer mCecMessageBuffer>;

        z2 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService$CecMessageBuffer: boolean bufferMessage(com.android.server.hdmi.HdmiCecMessage)>(r1);

        goto label5;

     label4:
        z2 = 0;

     label5:
        return z2;
    }

    void handleMhlBusModeChanged(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        com.android.server.hdmi.HdmiMhlControllerStub $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r8;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r9 = virtualinvoke $r1.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDevice(int)>(i0);

        if r9 == null goto label1;

        virtualinvoke r9.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: void setBusMode(int)>(i1);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No mhl device exists for bus mode change[portId:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", busmode:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r8);

     label2:
        return;
    }

    void handleMhlBusOvercurrent(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0;
        com.android.server.hdmi.HdmiMhlControllerStub $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r7 = virtualinvoke $r1.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDevice(int)>(i0);

        if r7 == null goto label1;

        virtualinvoke r7.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: void onBusOvercurrentDetected(boolean)>(z0);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No mhl device exists for bus overcurrent event[portId:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r6);

     label2:
        return;
    }

    void handleMhlDeviceStatusChanged(int, int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2;
        com.android.server.hdmi.HdmiMhlControllerStub $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r10;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r11;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r11 = virtualinvoke $r1.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDevice(int)>(i0);

        if r11 == null goto label1;

        virtualinvoke r11.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: void setDeviceStatusChange(int,int)>(i1, i2);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No mhl device exists for device status event[portId:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", adopterId:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", deviceId:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r10);

     label2:
        return;
    }

    void handleMhlHotplugEvent(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0;
        com.android.server.hdmi.HdmiMhlControllerStub $r1, $r8;
        java.lang.StringBuilder $r2, $r10;
        java.lang.String $r5, $r14;
        android.hardware.hdmi.HdmiDeviceInfo $r6, $r9;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub $r7, r16, r18;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        if z0 == 0 goto label2;

        $r7 = new com.android.server.hdmi.HdmiMhlLocalDeviceStub;

        specialinvoke $r7.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r0, i0);

        $r8 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r16 = virtualinvoke $r8.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub addLocalDevice(com.android.server.hdmi.HdmiMhlLocalDeviceStub)>($r7);

        if r16 == null goto label1;

        virtualinvoke r16.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: void onDeviceRemoved()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Old device of port ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is removed");

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiControlService", $r14);

     label1:
        $r9 = virtualinvoke $r7.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: android.hardware.hdmi.HdmiDeviceInfo getInfo()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeDeviceEventListeners(android.hardware.hdmi.HdmiDeviceInfo,int)>($r9, 1);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void updateSafeMhlInput()>();

        goto label4;

     label2:
        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        r18 = virtualinvoke $r1.<com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlLocalDeviceStub removeLocalDevice(int)>(i0);

        if r18 == null goto label3;

        virtualinvoke r18.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: void onDeviceRemoved()>();

        $r6 = virtualinvoke r18.<com.android.server.hdmi.HdmiMhlLocalDeviceStub: android.hardware.hdmi.HdmiDeviceInfo getInfo()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeDeviceEventListeners(android.hardware.hdmi.HdmiDeviceInfo,int)>($r6, 2);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void updateSafeMhlInput()>();

        goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No device to remove:[portId=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r5);

     label4:
        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void announceHotplugEvent(int,boolean)>(i0, z0);

        return;
    }

    protected void initPortInfo()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20;
        android.util.SparseArray $r2, $r4;
        android.util.SparseIntArray $r3;
        com.android.server.hdmi.UnmodifiableSparseIntArray $r5;
        com.android.server.hdmi.UnmodifiableSparseArray $r6, $r7;
        android.util.ArraySet $r8;
        boolean $z0, $z1, $z3, $z4, $z6;
        java.util.ArrayList $r9;
        java.util.List $r10, $r13, $r14;
        java.lang.Integer $r11, $r15;
        android.hardware.hdmi.HdmiPortInfo $r12, r23, r27, r29;
        android.hardware.hdmi.HdmiDeviceInfo $r16;
        java.lang.Throwable $r17;
        android.hardware.hdmi.HdmiPortInfo[] r18, r25;
        java.lang.Object r19;
        com.android.server.hdmi.HdmiCecController r20;
        com.android.server.hdmi.HdmiMhlControllerStub r24;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r18 = null;

        r19 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r19;

     label01:
        $i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mPhysicalAddress> = $i1;

        exitmonitor r19;

     label02:
        r20 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if r20 == null goto label03;

        r18 = virtualinvoke r20.<com.android.server.hdmi.HdmiCecController: android.hardware.hdmi.HdmiPortInfo[] getPortInfos()>();

     label03:
        if r18 != null goto label04;

        return;

     label04:
        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        $r3 = new android.util.SparseIntArray;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>()>();

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        i15 = lengthof r18;

        i16 = 0;

     label05:
        if i16 >= i15 goto label06;

        r23 = r18[i16];

        $i9 = virtualinvoke r23.<android.hardware.hdmi.HdmiPortInfo: int getAddress()>();

        $i10 = virtualinvoke r23.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>($i9, $i10);

        $i11 = virtualinvoke r23.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>($i11, r23);

        $i12 = virtualinvoke r23.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        $r16 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i13 = virtualinvoke r23.<android.hardware.hdmi.HdmiPortInfo: int getAddress()>();

        $i14 = virtualinvoke r23.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        specialinvoke $r16.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int)>($i13, $i14);

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i12, $r16);

        i16 = i16 + 1;

        goto label05;

     label06:
        $r5 = new com.android.server.hdmi.UnmodifiableSparseIntArray;

        specialinvoke $r5.<com.android.server.hdmi.UnmodifiableSparseIntArray: void <init>(android.util.SparseIntArray)>($r3);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseIntArray mPortIdMap> = $r5;

        $r6 = new com.android.server.hdmi.UnmodifiableSparseArray;

        specialinvoke $r6.<com.android.server.hdmi.UnmodifiableSparseArray: void <init>(android.util.SparseArray)>($r2);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseArray mPortInfoMap> = $r6;

        $r7 = new com.android.server.hdmi.UnmodifiableSparseArray;

        specialinvoke $r7.<com.android.server.hdmi.UnmodifiableSparseArray: void <init>(android.util.SparseArray)>($r4);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseArray mPortDeviceMap> = $r7;

        r24 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        if r24 != null goto label07;

        return;

     label07:
        r25 = virtualinvoke r24.<com.android.server.hdmi.HdmiMhlControllerStub: android.hardware.hdmi.HdmiPortInfo[] getPortInfos()>();

        $r8 = new android.util.ArraySet;

        $i2 = lengthof r25;

        specialinvoke $r8.<android.util.ArraySet: void <init>(int)>($i2);

        i17 = lengthof r25;

        i18 = 0;

     label08:
        if i18 >= i17 goto label10;

        r27 = r25[i18];

        $z6 = virtualinvoke r27.<android.hardware.hdmi.HdmiPortInfo: boolean isMhlSupported()>();

        if $z6 == 0 goto label09;

        $i8 = virtualinvoke r27.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke $r8.<android.util.ArraySet: boolean add(java.lang.Object)>($r15);

     label09:
        i18 = i18 + 1;

        goto label08;

     label10:
        $z0 = virtualinvoke $r8.<android.util.ArraySet: boolean isEmpty()>();

        if $z0 == 0 goto label11;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r18);

        $r14 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r13);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setPortInfo(java.util.List)>($r14);

        return;

     label11:
        $r9 = new java.util.ArrayList;

        $i3 = lengthof r18;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i3);

        i19 = lengthof r18;

        i20 = 0;

     label12:
        if i20 >= i19 goto label15;

        r29 = r18[i20];

        $i4 = virtualinvoke r29.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $z1 = virtualinvoke $r8.<android.util.ArraySet: boolean contains(java.lang.Object)>($r11);

        if $z1 == 0 goto label13;

        $r12 = new android.hardware.hdmi.HdmiPortInfo;

        $i5 = virtualinvoke r29.<android.hardware.hdmi.HdmiPortInfo: int getId()>();

        $i6 = virtualinvoke r29.<android.hardware.hdmi.HdmiPortInfo: int getType()>();

        $i7 = virtualinvoke r29.<android.hardware.hdmi.HdmiPortInfo: int getAddress()>();

        $z3 = virtualinvoke r29.<android.hardware.hdmi.HdmiPortInfo: boolean isCecSupported()>();

        $z4 = virtualinvoke r29.<android.hardware.hdmi.HdmiPortInfo: boolean isArcSupported()>();

        specialinvoke $r12.<android.hardware.hdmi.HdmiPortInfo: void <init>(int,int,int,boolean,boolean,boolean)>($i5, $i6, $i7, $z3, 1, $z4);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        goto label14;

     label13:
        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

     label14:
        i20 = i20 + 1;

        goto label12;

     label15:
        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r9);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setPortInfo(java.util.List)>($r10);

        return;

     label16:
        $r17 := @caughtexception;

     label17:
        exitmonitor r19;

     label18:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    void invokeClearTimerRecordingResult(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord $r2, r6;
        android.hardware.hdmi.IHdmiRecordListener $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

     label02:
        if r6 == null goto label07;

     label03:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord: android.hardware.hdmi.IHdmiRecordListener access$6100(com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord)>($r2);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiRecordListener: void onClearTimerRecordingResult(int,int)>(i0, i1);

     label04:
        goto label07;

     label05:
        $r4 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to call onClearTimerRecordingResult.", $r4);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void invokeDeviceEventListeners(android.hardware.hdmi.HdmiDeviceInfo, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        java.util.ArrayList $r4;
        boolean $z0;
        android.hardware.hdmi.IHdmiDeviceEventListener $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        java.lang.String $r11;
        android.hardware.hdmi.HdmiDeviceInfo r12;
        com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r12 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mDeviceEventListenerRecords>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord) $r5;

     label03:
        $r6 = staticinvoke <com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord: android.hardware.hdmi.IHdmiDeviceEventListener access$5800(com.android.server.hdmi.HdmiControlService$DeviceEventListenerRecord)>(r13);

        interfaceinvoke $r6.<android.hardware.hdmi.IHdmiDeviceEventListener: void onStatusChanged(android.hardware.hdmi.HdmiDeviceInfo,int)>(r12, i0);

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

     label06:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to report device event:");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiControlService", $r11);

     label07:
        goto label02;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void invokeInputChangeListener(android.hardware.hdmi.HdmiDeviceInfo)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord $r2, r10;
        android.hardware.hdmi.IHdmiInputChangeListener $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.lang.String $r8;
        android.hardware.hdmi.HdmiDeviceInfo r9;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r9 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r10 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord>;

     label02:
        if r10 == null goto label07;

     label03:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord mInputChangeListenerRecord>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord: android.hardware.hdmi.IHdmiInputChangeListener access$6000(com.android.server.hdmi.HdmiControlService$InputChangeListenerRecord)>($r2);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiInputChangeListener: void onChanged(android.hardware.hdmi.HdmiDeviceInfo)>(r9);

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

     label06:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown by IHdmiInputChangeListener: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", $r8);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void invokeMhlVendorCommandListeners(int, int, int, byte[])
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r4;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        boolean $z0;
        android.hardware.hdmi.IHdmiMhlVendorCommandListener $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        byte[] r8;
        com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r8 := @parameter3: byte[];

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mMhlVendorCommandListenerRecords>;

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord) $r4;

     label03:
        $r5 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord: android.hardware.hdmi.IHdmiMhlVendorCommandListener access$6500(com.android.server.hdmi.HdmiControlService$HdmiMhlVendorCommandListenerRecord)>(r9);

        interfaceinvoke $r5.<android.hardware.hdmi.IHdmiMhlVendorCommandListener: void onReceived(int,int,int,byte[])>(i0, i1, i2, r8);

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to notify MHL vendor command", $r7);

     label07:
        goto label02;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void invokeOneTouchRecordResult(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord $r2, r6;
        android.hardware.hdmi.IHdmiRecordListener $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

     label02:
        if r6 == null goto label07;

     label03:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord: android.hardware.hdmi.IHdmiRecordListener access$6100(com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord)>($r2);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiRecordListener: void onOneTouchRecordResult(int,int)>(i0, i1);

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to call onOneTouchRecordResult.", $r5);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    byte[] invokeRecordRequestListener(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord $r2, r6;
        android.hardware.hdmi.IHdmiRecordListener $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        byte[] r7, r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

     label02:
        if r6 == null goto label08;

     label03:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord: android.hardware.hdmi.IHdmiRecordListener access$6100(com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord)>($r2);

        r7 = interfaceinvoke $r3.<android.hardware.hdmi.IHdmiRecordListener: byte[] getOneTouchRecordSource(int)>(i0);

     label04:
        exitmonitor r1;

     label05:
        return r7;

     label06:
        $r5 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to start record.", $r5);

     label08:
        r9 = <libcore.util.EmptyArray: byte[] BYTE>;

        exitmonitor r1;

     label09:
        return r9;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void invokeTimerRecordingResult(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord $r2, r6;
        android.hardware.hdmi.IHdmiRecordListener $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

     label02:
        if r6 == null goto label07;

     label03:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord mRecordListenerRecord>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord: android.hardware.hdmi.IHdmiRecordListener access$6100(com.android.server.hdmi.HdmiControlService$HdmiRecordListenerRecord)>($r2);

        interfaceinvoke $r3.<android.hardware.hdmi.IHdmiRecordListener: void onTimerRecordingResult(int,int)>(i0, i1);

     label04:
        goto label07;

     label05:
        $r5 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to call onTimerRecordingResult.", $r5);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    boolean invokeVendorCommandListenersOnControlStateChanged(boolean, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, $z1, $z2;
        int i0;
        java.lang.Object r1, $r4;
        java.util.ArrayList $r2, $r3;
        android.hardware.hdmi.IHdmiVendorCommandListener $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        java.util.Iterator r8;
        com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord r9;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords>;

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords>;

        r8 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord) $r4;

     label05:
        $r5 = staticinvoke <com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord: android.hardware.hdmi.IHdmiVendorCommandListener access$6400(com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord)>(r9);

        interfaceinvoke $r5.<android.hardware.hdmi.IHdmiVendorCommandListener: void onControlStateChanged(boolean,int)>(z0, i0);

     label06:
        goto label09;

     label07:
        $r7 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to notify control-state-changed to vendor handler", $r7);

     label09:
        goto label04;

     label10:
        exitmonitor r1;

     label11:
        return 1;

     label12:
        $r6 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    boolean invokeVendorCommandListenersOnReceived(int, int, int, byte[], boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2, i3;
        boolean z0, $z1, $z2;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        java.util.ArrayList $r3, $r4;
        android.hardware.hdmi.IHdmiVendorCommandListener $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        byte[] r9;
        com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord r10;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r9 := @parameter3: byte[];

        z0 := @parameter4: boolean;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords>;

        $z1 = virtualinvoke $r3.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: java.util.ArrayList mVendorCommandListenerRecords>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord) $r5;

        i3 = staticinvoke <com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord: int access$6300(com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord)>(r10);

     label05:
        if i3 == i0 goto label06;

        goto label04;

     label06:
        $r6 = staticinvoke <com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord: android.hardware.hdmi.IHdmiVendorCommandListener access$6400(com.android.server.hdmi.HdmiControlService$VendorCommandListenerRecord)>(r10);

        interfaceinvoke $r6.<android.hardware.hdmi.IHdmiVendorCommandListener: void onReceived(int,int,byte[],boolean)>(i1, i2, r9, z0);

     label07:
        goto label10;

     label08:
        $r8 := @caughtexception;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("HdmiControlService", "Failed to notify vendor command reception", $r8);

     label10:
        goto label04;

     label11:
        exitmonitor r1;

     label12:
        return 1;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    boolean isAddressAllocated()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated>;

        return $z0;
    }

    boolean isAudioSystemDevice()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    boolean isConnected(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi.HdmiCecController $r1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $z0 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: boolean isConnected(int)>(i0);

        return $z0;
    }

    boolean isConnectedToArcPort(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.UnmodifiableSparseArray $r1;
        java.lang.Object $r2;
        android.hardware.hdmi.HdmiPortInfo $r3;
        boolean $z0;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int pathToPortId(int)>(i0);

        if i1 == -1 goto label1;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseArray mPortInfoMap>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.UnmodifiableSparseArray: java.lang.Object get(int)>(i1);

        $r3 = (android.hardware.hdmi.HdmiPortInfo) $r2;

        $z0 = virtualinvoke $r3.<android.hardware.hdmi.HdmiPortInfo: boolean isArcSupported()>();

        return $z0;

     label1:
        return 0;
    }

    boolean isControlEnabled()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiControlEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isHdmiCecVolumeControlEnabled()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiCecVolumeControlEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isMhlInputChangeEnabled()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mMhlInputChangeEnabled>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isPlaybackDevice()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    boolean isPowerOnOrTransient()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        if i0 == 0 goto label2;

        if i0 != 2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isPowerStandby()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isPowerStandbyOrTransient()
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        i0 = r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus>;

        z1 = 1;

        if i0 == 1 goto label2;

        if i0 != 3 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isProhibitMode()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mProhibitMode>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isStandbyMessageReceived()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived>;

        return $z0;
    }

    boolean isSwitchDevice()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.hdmi.property_is_device_hdmi_cec_switch", 0);

        return $z0;
    }

    boolean isSystemAudioActivated()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mSystemAudioActivated>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isTvDevice()
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.util.List $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    boolean isTvDeviceEnabled()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0, z1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isTvDevice()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        if $r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean isValidPortId(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        android.hardware.hdmi.HdmiPortInfo $r1;
        boolean z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiPortInfo getPortInfo(int)>(i0);

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isWakeUpMessageReceived()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mWakeUpMessageReceived>;

        return $z0;
    }

    void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0;
        com.android.server.hdmi.HdmiCecController $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: void maySendFeatureAbortCommand(com.android.server.hdmi.HdmiCecMessage,int)>(r1, i0);

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        com.android.server.hdmi._$$Lambda$HdmiControlService$UDUaoEvDyy4HpU7CYvj9q_5NX80 $r1;
        android.content.Context $r2, $r5;
        java.lang.Object $r3, $r6;
        android.media.tv.TvInputManager $r4;
        android.os.PowerManager $r7;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        if i0 != 500 goto label1;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tv_input");

        $r4 = (android.media.tv.TvInputManager) $r3;

        r0.<com.android.server.hdmi.HdmiControlService: android.media.tv.TvInputManager mTvInputManager> = $r4;

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r7 = (android.os.PowerManager) $r6;

        r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager> = $r7;

        goto label2;

     label1:
        if i0 != 1000 goto label2;

        $r1 = new com.android.server.hdmi._$$Lambda$HdmiControlService$UDUaoEvDyy4HpU7CYvj9q_5NX80;

        specialinvoke $r1.<com.android.server.hdmi._$$Lambda$HdmiControlService$UDUaoEvDyy4HpU7CYvj9q_5NX80: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void runOnServiceThread(java.lang.Runnable)>($r1);

     label2:
        return;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, $i2;
        boolean z0, $z1, $z2, $z4, $z5, $z6;
        java.util.Iterator r2, r16;
        com.android.server.hdmi.HdmiCecLocalDevice r3, $r5, r13;
        java.lang.Object $r4, $r9;
        android.hardware.hdmi.HdmiPortInfo $r6;
        java.util.ArrayList $r7;
        java.util.List $r8, $r15;
        java.lang.Integer $r10;
        com.android.server.hdmi.HdmiCecController $r11, $r14;
        java.lang.Object[] $r12;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        if z0 == 0 goto label6;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isTvDevice()>();

        if $z1 != 0 goto label6;

        $r6 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiPortInfo getPortInfo(int)>(i0);

        $i2 = virtualinvoke $r6.<android.hardware.hdmi.HdmiPortInfo: int getType()>();

        if $i2 != 1 goto label6;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isSwitchDevice()>();

        if $z2 == 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void initPortInfo()>();

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("initPortInfo for switch device when onHotplug from tx.", $r12);

     label1:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<com.android.server.hdmi.HdmiControlService: java.util.List mLocalDevices>;

        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if i1 != 4 goto label3;

        $z4 = <com.android.server.hdmi.HdmiControlService: boolean isHdmiCecNeverClaimPlaybackLogicAddr>;

        if $z4 == 0 goto label3;

        goto label2;

     label3:
        $r11 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        r3 = virtualinvoke $r11.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiCecLocalDevice getLocalDevice(int)>(i1);

        r13 = r3;

        if r3 != null goto label4;

        r13 = staticinvoke <com.android.server.hdmi.HdmiCecLocalDevice: com.android.server.hdmi.HdmiCecLocalDevice create(com.android.server.hdmi.HdmiControlService,int)>(r0, i1);

        virtualinvoke r13.<com.android.server.hdmi.HdmiCecLocalDevice: void init()>();

     label4:
        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r13);

        goto label2;

     label5:
        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void allocateLogicalAddress(java.util.ArrayList,int)>($r7, 4);

     label6:
        $r14 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r15 = virtualinvoke $r14.<com.android.server.hdmi.HdmiCecController: java.util.List getLocalDeviceList()>();

        r16 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z6 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label8;

        $r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.server.hdmi.HdmiCecLocalDevice) $r4;

        virtualinvoke $r5.<com.android.server.hdmi.HdmiCecLocalDevice: void onHotplug(int,boolean)>(i0, z0);

        goto label7;

     label8:
        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void announceHotplugEvent(int,boolean)>(i0, z0);

        return;
    }

    protected void onStandby(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean $z1, $z2, $z3, $z4;
        com.android.server.hdmi.HdmiControlService$6 $r1;
        java.lang.Object $r2;
        com.android.server.hdmi.HdmiCecLocalDevice $r3;
        java.util.List r4;
        java.util.Iterator r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 3;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean invokeVendorCommandListenersOnControlStateChanged(boolean,int)>(0, 3);

        r4 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: java.util.List getAllLocalDevices()>();

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isStandbyMessageReceived()>();

        if $z1 != 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean canGoToStandby()>();

        if $z2 != 0 goto label3;

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = 1;

        r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r2 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (com.android.server.hdmi.HdmiCecLocalDevice) $r2;

        $z4 = r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDevice: void onStandby(boolean,int)>($z4, i0);

        goto label1;

     label2:
        return;

     label3:
        $r1 = new com.android.server.hdmi.HdmiControlService$6;

        specialinvoke $r1.<com.android.server.hdmi.HdmiControlService$6: void <init>(com.android.server.hdmi.HdmiControlService,java.util.List,int)>(r0, r4, i0);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void disableDevices(com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>($r1);

        return;
    }

    public void onStart()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.Looper $r1, $r19;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.hdmi.HdmiCecController $r2, $r8, $r16, r20;
        com.android.server.hdmi.HdmiMhlControllerStub $r3, $r4, $r9, $r15;
        java.util.List $r5;
        com.android.server.hdmi.HdmiCecMessageValidator $r6, $r14;
        com.android.server.hdmi.HdmiControlService$BinderService $r7;
        android.content.IntentFilter $r10;
        android.content.Context $r11;
        com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver $r12;
        android.os.HandlerThread $r17, $r18;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Looper mIoLooper>;

        if $r1 != null goto label1;

        $r17 = r0.<com.android.server.hdmi.HdmiControlService: android.os.HandlerThread mIoThread>;

        virtualinvoke $r17.<android.os.HandlerThread: void start()>();

        $r18 = r0.<com.android.server.hdmi.HdmiControlService: android.os.HandlerThread mIoThread>;

        $r19 = virtualinvoke $r18.<android.os.HandlerThread: android.os.Looper getLooper()>();

        r0.<com.android.server.hdmi.HdmiControlService: android.os.Looper mIoLooper> = $r19;

     label1:
        $i0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int getInitialPowerStatus()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = $i0;

        r0.<com.android.server.hdmi.HdmiControlService: boolean mProhibitMode> = 0;

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_enabled", 1);

        r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiControlEnabled> = $z0;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_volume_control_enabled", 1);

        r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiCecVolumeControlEnabled> = $z1;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("mhl_input_switching_enabled", 1);

        r0.<com.android.server.hdmi.HdmiControlService: boolean mMhlInputChangeEnabled> = $z2;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if $r2 != null goto label2;

        $r16 = staticinvoke <com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiCecController create(com.android.server.hdmi.HdmiControlService)>(r0);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController> = $r16;

     label2:
        r20 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if r20 == null goto label9;

        $z3 = r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiControlEnabled>;

        if $z3 == 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void initializeCec(int)>(1);

        goto label4;

     label3:
        virtualinvoke r20.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(2, 0);

     label4:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        if $r3 != null goto label5;

        $r15 = staticinvoke <com.android.server.hdmi.HdmiMhlControllerStub: com.android.server.hdmi.HdmiMhlControllerStub create(com.android.server.hdmi.HdmiControlService)>(r0);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController> = $r15;

     label5:
        $r4 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        $z4 = virtualinvoke $r4.<com.android.server.hdmi.HdmiMhlControllerStub: boolean isReady()>();

        if $z4 != 0 goto label6;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiControlService", "Device does not support MHL-control.");

     label6:
        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<com.android.server.hdmi.HdmiControlService: java.util.List mMhlDevices> = $r5;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void initPortInfo()>();

        $r6 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecMessageValidator mMessageValidator>;

        if $r6 != null goto label7;

        $r14 = new com.android.server.hdmi.HdmiCecMessageValidator;

        specialinvoke $r14.<com.android.server.hdmi.HdmiCecMessageValidator: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecMessageValidator mMessageValidator> = $r14;

     label7:
        $r7 = new com.android.server.hdmi.HdmiControlService$BinderService;

        specialinvoke $r7.<com.android.server.hdmi.HdmiControlService$BinderService: void <init>(com.android.server.hdmi.HdmiControlService,com.android.server.hdmi.HdmiControlService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void publishBinderService(java.lang.String,android.os.IBinder)>("hdmi_control", $r7);

        $r8 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        if $r8 == null goto label8;

        $r10 = new android.content.IntentFilter;

        specialinvoke $r10.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r10.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke $r10.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke $r10.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.ACTION_SHUTDOWN");

        virtualinvoke $r10.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CONFIGURATION_CHANGED");

        $r11 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r12 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiControlService$HdmiControlBroadcastReceiver mHdmiControlBroadcastReceiver>;

        virtualinvoke $r11.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r12, $r10);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void registerContentObserver()>();

     label8:
        $r9 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        virtualinvoke $r9.<com.android.server.hdmi.HdmiMhlControllerStub: void setOption(int,int)>(104, 1);

        return;

     label9:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiControlService", "Device does not support HDMI-CEC.");

        return;
    }

    protected void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r2;
        boolean $z0;
        com.android.server.hdmi.HdmiCecLocalDeviceSource r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $z0 = r0.<com.android.server.hdmi.HdmiControlService: boolean mAddressAllocated>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.IHdmiControlCallback mOtpCallbackPendingAddressAllocation> = r1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("HdmiControlService", "Local device is under address allocation. Save OTP callback for later process.");

        return;

     label1:
        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        r3 = r2;

        if r2 != null goto label2;

        r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

     label2:
        if r3 != null goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiControlService", "Local source device not available");

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 2);

        return;

     label3:
        virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)>(r1);

        return;
    }

    int pathToPortId(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, $i2, $i3, i6;
        java.lang.Object r1;
        com.android.server.hdmi.UnmodifiableSparseIntArray $r3;
        java.lang.Throwable $r4;
        char c4, c5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        c4 = 61440;

        c5 = 61440;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i1 = r0.<com.android.server.hdmi.HdmiControlService: int mPhysicalAddress>;

        exitmonitor r1;

     label2:
        i6 = i1;

     label3:
        if i6 == 0 goto label4;

        i6 = i1 & c4;

        c5 = c5 | c4;

        c4 = c4 >> 4;

        goto label3;

     label4:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.UnmodifiableSparseIntArray mPortIdMap>;

        $i2 = i0 & c5;

        $i3 = virtualinvoke $r3.<com.android.server.hdmi.UnmodifiableSparseIntArray: int get(int,int)>($i2, -1);

        return $i3;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    protected com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        com.android.server.hdmi.HdmiCecLocalDevice $r2;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiCecLocalDevice getLocalDevice(int)>(4);

        $r3 = (com.android.server.hdmi.HdmiCecLocalDevicePlayback) $r2;

        return $r3;
    }

    void pollDevices(com.android.server.hdmi.HdmiControlService$DevicePollingCallback, int, int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiControlService$DevicePollingCallback r1;
        int i0, i1, i2, $i3;
        com.android.server.hdmi.HdmiCecController $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService$DevicePollingCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $i3 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: int checkPollStrategy(int)>(i1);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecController: void pollDevices(com.android.server.hdmi.HdmiControlService$DevicePollingCallback,int,int,int)>(r1, i0, $i3, i2);

        return;
    }

    int portIdToPath(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.hardware.hdmi.HdmiPortInfo r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.hardware.hdmi.HdmiPortInfo getPortInfo(int)>(i0);

        if r5 != null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find the port info: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiControlService", $r4);

        return 65535;

     label1:
        $i1 = virtualinvoke r5.<android.hardware.hdmi.HdmiPortInfo: int getAddress()>();

        return $i1;
    }

    boolean readBooleanSetting(java.lang.String, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        boolean z0, z1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <com.android.server.hdmi.HdmiControlService: int toInt(boolean)>(z0);

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, r1, $i1);

        z1 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    boolean readBooleanSystemProperty(java.lang.String, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1;
        boolean z0, $z1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>(r1, z0);

        return $z1;
    }

    java.lang.String readStringSetting(java.lang.String, java.lang.String)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1, r4, r5;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r5 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r3, r4);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        return r5;
    }

    void registerTvInputCallback(android.media.tv.TvInputManager$TvInputCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.media.tv.TvInputManager$TvInputCallback r1;
        android.media.tv.TvInputManager r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.media.tv.TvInputManager$TvInputCallback;

        r2 = r0.<com.android.server.hdmi.HdmiControlService: android.media.tv.TvInputManager mTvInputManager>;

        if r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler>;

        virtualinvoke r2.<android.media.tv.TvInputManager: void registerCallback(android.media.tv.TvInputManager$TvInputCallback,android.os.Handler)>(r1, $r3);

        return;
    }

    void removeHdmiControlVolumeControlStatusChangeListener(android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.hardware.hdmi.IHdmiCecVolumeControlFeatureListener;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: android.os.RemoteCallbackList mHdmiCecVolumeControlFeatureListenerRecords>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    void runOnServiceThread(java.lang.Runnable)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

    void runOnServiceThreadAtFrontOfQueue(java.lang.Runnable)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>(r1);

        return;
    }

    void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r1, null);

        return;
    }

    void sendCecCommand(com.android.server.hdmi.HdmiCecMessage, com.android.server.hdmi.HdmiControlService$SendMessageCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        com.android.server.hdmi.HdmiControlService$SendMessageCallback r2;
        com.android.server.hdmi.HdmiCecMessageValidator $r4;
        int $i0;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.Object[] $r9;
        com.android.server.hdmi.HdmiCecController $r10;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r2 := @parameter1: com.android.server.hdmi.HdmiControlService$SendMessageCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r4 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecMessageValidator mMessageValidator>;

        $i0 = virtualinvoke $r4.<com.android.server.hdmi.HdmiCecMessageValidator: int isValid(com.android.server.hdmi.HdmiCecMessage)>(r1);

        if $i0 != 0 goto label1;

        $r10 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiCecController: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r1, r2);

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid message type:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void error(java.lang.String,java.lang.Object[])>($r8, $r9);

        if r2 == null goto label2;

        interfaceinvoke r2.<com.android.server.hdmi.HdmiControlService$SendMessageCallback: void onSendCompleted(int)>(3);

     label2:
        return;
    }

    void setActivePortId(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mActivePortId> = i0;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setLastInputForMhl(int)>(-1);

        return;
    }

    void setActiveSource(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, $i2, $i3;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r1, $r2;
        java.util.List $r3;
        java.lang.Object $r4, r9;
        boolean $z0, $z1;
        android.hardware.hdmi.HdmiDeviceInfo $r5;
        com.android.server.hdmi.HdmiCecLocalDeviceSource $r6, $r7;
        java.lang.Throwable $r8;
        java.util.Iterator r10;
        com.android.server.hdmi.HdmiCecLocalDevice r11;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r9;

     label01:
        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        $r1.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int logicalAddress> = i0;

        $r2 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource mActiveSource>;

        $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress> = i1;

        exitmonitor r9;

     label02:
        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: java.util.List getAllLocalDevices()>();

        r10 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.server.hdmi.HdmiCecLocalDevice) $r4;

        $z0 = r11 instanceof com.android.server.hdmi.HdmiCecLocalDeviceSource;

        if $z0 != 0 goto label04;

        goto label03;

     label04:
        $r5 = virtualinvoke r11.<com.android.server.hdmi.HdmiCecLocalDevice: android.hardware.hdmi.HdmiDeviceInfo getDeviceInfo()>();

        $i2 = virtualinvoke $r5.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        if i0 != $i2 goto label05;

        $i3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i1 != $i3 goto label05;

        $r7 = (com.android.server.hdmi.HdmiCecLocalDeviceSource) r11;

        virtualinvoke $r7.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setIsActiveSource(boolean)>(1);

        goto label06;

     label05:
        $r6 = (com.android.server.hdmi.HdmiCecLocalDeviceSource) r11;

        virtualinvoke $r6.<com.android.server.hdmi.HdmiCecLocalDeviceSource: void setIsActiveSource(boolean)>(0);

     label06:
        goto label03;

     label07:
        return;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r9;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    protected void setAndBroadcastActiveSource(int, int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, i2, $i3, $i4;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r1, r2;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 != 4 goto label1;

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void setIsActiveSource(boolean)>(1);

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void wakeUpIfActiveSource()>();

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySendActiveSource(int)>(i2);

        $i4 = r2.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setActiveSource(int,int)>($i4, i0);

     label1:
        if i1 != 5 goto label3;

        r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        if $r1 == null goto label2;

        virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setIsActiveSource(boolean)>(0);

        goto label3;

     label2:
        virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setIsActiveSource(boolean)>(1);

        virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void wakeUpIfActiveSource()>();

        virtualinvoke r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void maySendActiveSource(int)>(i2);

        $i3 = r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setActiveSource(int,int)>($i3, i0);

     label3:
        return;
    }

    protected void setAndBroadcastActiveSourceFromOneDeviceType(int, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0, i1, $i2, $i3;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r1;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        if r1 == null goto label2;

        virtualinvoke r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void setIsActiveSource(boolean)>(1);

        virtualinvoke r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void wakeUpIfActiveSource()>();

        virtualinvoke r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySendActiveSource(int)>(i0);

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setIsActiveSource(boolean)>(0);

     label1:
        $i3 = r1.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setActiveSource(int,int)>($i3, i1);

        goto label3;

     label2:
        if r2 == null goto label3;

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void setIsActiveSource(boolean)>(1);

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void wakeUpIfActiveSource()>();

        virtualinvoke r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void maySendActiveSource(int)>(i0);

        $i2 = r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: int mAddress>;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setActiveSource(int,int)>($i2, i1);

     label3:
        return;
    }

    void setAudioStatus(boolean, int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, z1, $z2, $z3, $z4;
        int i0;
        android.media.AudioManager r1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        short $s2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isTvDeviceEnabled()>();

        if $z2 == 0 goto label5;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $z3 = virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioActivated()>();

        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isHdmiCecVolumeControlEnabled()>();

        if $z4 != 0 goto label1;

        goto label5;

     label1:
        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.media.AudioManager getAudioManager()>();

        z1 = virtualinvoke r1.<android.media.AudioManager: boolean isStreamMute(int)>(3);

        if z0 == 0 goto label2;

        if z1 != 0 goto label4;

        virtualinvoke r1.<android.media.AudioManager: void setStreamMute(int,boolean)>(3, 1);

        goto label4;

     label2:
        if z1 == 0 goto label3;

        virtualinvoke r1.<android.media.AudioManager: void setStreamMute(int,boolean)>(3, 0);

     label3:
        if i0 < 0 goto label4;

        if i0 > 100 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volume: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("HdmiControlService", $r7);

        $s2 = 1 | 256;

        virtualinvoke r1.<android.media.AudioManager: void setStreamVolume(int,int,int)>(3, i0, $s2);

     label4:
        return;

     label5:
        return;
    }

    void setCecController(com.android.server.hdmi.HdmiCecController)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecController;

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController> = r1;

        return;
    }

    void setCecOption(int, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;
        boolean z0;
        com.android.server.hdmi.HdmiCecController $r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: void setOption(int,boolean)>(i0, z0);

        return;
    }

    void setControlEnabled(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, $z2;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiControlService$8 $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiControlEnabled> = z0;

        exitmonitor r1;

     label2:
        if z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void enableHdmiControlService()>();

        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_volume_control_enabled", 1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void setHdmiCecVolumeControlEnabled(boolean)>($z2);

        return;

     label3:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiCecVolumeControlEnabled> = 0;

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean invokeVendorCommandListenersOnControlStateChanged(boolean,int)>(0, 1);

        $r3 = new com.android.server.hdmi.HdmiControlService$8;

        specialinvoke $r3.<com.android.server.hdmi.HdmiControlService$8: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void runOnServiceThread(java.lang.Runnable)>($r3);

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void announceHdmiControlStatusChange(boolean)>(z0);

        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setHdmiCecVolumeControlEnabled(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Object[] $r3;
        java.lang.Boolean $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mHdmiCecVolumeControlEnabled> = z0;

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean readBooleanSetting(java.lang.String,boolean)>("hdmi_control_volume_control_enabled", 1);

        if $z1 == z0 goto label2;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3[0] = $r4;

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Changing HDMI CEC volume control feature state: %s", $r3);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void writeBooleanSetting(java.lang.String,boolean)>("hdmi_control_volume_control_enabled", z0);

     label2:
        exitmonitor r1;

     label3:
        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void announceHdmiCecVolumeControlFeatureChange(boolean)>(z0);

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void setHdmiMhlController(com.android.server.hdmi.HdmiMhlControllerStub)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiMhlControllerStub r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiMhlControllerStub;

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController> = r1;

        return;
    }

    void setIoLooper(android.os.Looper)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.Looper r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.os.Looper;

        r0.<com.android.server.hdmi.HdmiControlService: android.os.Looper mIoLooper> = r1;

        return;
    }

    void setLastInputForMhl(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mLastInputMhl> = i0;

        return;
    }

    void setMessageValidator(com.android.server.hdmi.HdmiCecMessageValidator)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecMessageValidator r1;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessageValidator;

        r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecMessageValidator mMessageValidator> = r1;

        return;
    }

    void setMhlInputChangeEnabled(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.hdmi.HdmiMhlControllerStub $r3;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiMhlControllerStub mMhlController>;

        $i0 = staticinvoke <com.android.server.hdmi.HdmiControlService: int toInt(boolean)>(z0);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiMhlControllerStub: void setOption(int,int)>(101, $i0);

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mMhlInputChangeEnabled> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setPortInfo(java.util.List)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.util.List r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r3 := @parameter0: java.util.List;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: java.util.List mPortInfo> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setPowerStatus(int)
    {
        com.android.server.hdmi.HdmiControlService r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: int mPowerStatus> = i0;

        return;
    }

    void setProhibitMode(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mProhibitMode> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setStandbyMode(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0, $z1, $z2;
        android.os.PowerManager $r1, $r4;
        long $l0, $l1;
        com.android.server.hdmi.HdmiCecLocalDevicePlayback $r2, $r5, $r6;
        com.android.server.hdmi.HdmiControlService$7 $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $z1 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isPowerOnOrTransient()>();

        if $z1 == 0 goto label1;

        if z0 == 0 goto label1;

        $r4 = r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r4.<android.os.PowerManager: void goToSleep(long,int,int)>($l1, 5, 0);

        $r5 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        virtualinvoke $r6.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void sendStandby(int)>(0);

        goto label2;

     label1:
        $z2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z2 == 0 goto label2;

        if z0 != 0 goto label2;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>($l0, 8, "android.server.hdmi:WAKE");

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecLocalDevicePlayback playback()>();

        if $r2 == null goto label2;

        $r3 = new com.android.server.hdmi.HdmiControlService$7;

        specialinvoke $r3.<com.android.server.hdmi.HdmiControlService$7: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)>($r3);

     label2:
        return;
    }

    void setSystemAudioActivated(boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.hdmi.HdmiControlService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mSystemAudioActivated> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void standby()
    {
        com.android.server.hdmi.HdmiControlService r0;
        boolean $z0;
        android.os.PowerManager $r1;
        long $l0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        $z0 = specialinvoke r0.<com.android.server.hdmi.HdmiControlService: boolean canGoToStandby()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r0.<com.android.server.hdmi.HdmiControlService: boolean mStandbyMessageReceived> = 1;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void goToSleep(long,int,int)>($l0, 5, 0);

        return;
    }

    public com.android.server.hdmi.HdmiCecLocalDeviceTv tv()
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiCecController $r1;
        com.android.server.hdmi.HdmiCecLocalDevice $r2;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r3;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: com.android.server.hdmi.HdmiCecController mCecController>;

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecController: com.android.server.hdmi.HdmiCecLocalDevice getLocalDevice(int)>(0);

        $r3 = (com.android.server.hdmi.HdmiCecLocalDeviceTv) $r2;

        return $r3;
    }

    void unregisterTvInputCallback(android.media.tv.TvInputManager$TvInputCallback)
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.media.tv.TvInputManager$TvInputCallback r1;
        android.media.tv.TvInputManager r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: android.media.tv.TvInputManager$TvInputCallback;

        r2 = r0.<com.android.server.hdmi.HdmiControlService: android.media.tv.TvInputManager mTvInputManager>;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r2.<android.media.tv.TvInputManager: void unregisterCallback(android.media.tv.TvInputManager$TvInputCallback)>(r1);

        return;
    }

    void wakeUp()
    {
        com.android.server.hdmi.HdmiControlService r0;
        android.os.PowerManager $r1;
        long $l0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiControlService: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiControlService: boolean mWakeUpMessageReceived> = 1;

        $r1 = r0.<com.android.server.hdmi.HdmiControlService: android.os.PowerManager mPowerManager>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void wakeUp(long,int,java.lang.String)>($l0, 8, "android.server.hdmi:WAKE");

        return;
    }

    void writeBooleanSetting(java.lang.String, boolean)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1;
        boolean z0;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.HdmiControlService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <com.android.server.hdmi.HdmiControlService: int toInt(boolean)>(z0);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, r1, $i0);

        return;
    }

    void writeStringSystemProperty(java.lang.String, java.lang.String)
    {
        com.android.server.hdmi.HdmiControlService r0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.hdmi.HdmiControlService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }
}
