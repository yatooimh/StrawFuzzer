final class com.android.server.hdmi.HdmiUtils extends java.lang.Object
{
    private static final int[] ADDRESS_TO_TYPE;
    private static final java.lang.String[] DEFAULT_NAMES;
    private static final java.lang.String TAG;
    static final int TARGET_NOT_UNDER_LOCAL_DEVICE;
    static final int TARGET_SAME_PHYSICAL_ADDRESS;

    static void <clinit>()
    {
        int[] $r0;
        java.lang.String[] $r1;

        <com.android.server.hdmi.HdmiUtils: int TARGET_SAME_PHYSICAL_ADDRESS> = 0;

        <com.android.server.hdmi.HdmiUtils: int TARGET_NOT_UNDER_LOCAL_DEVICE> = -1;

        <com.android.server.hdmi.HdmiUtils: java.lang.String TAG> = "HdmiUtils";

        $r0 = newarray (int)[15];

        $r0[0] = 0;

        $r0[1] = 1;

        $r0[2] = 1;

        $r0[3] = 3;

        $r0[4] = 4;

        $r0[5] = 5;

        $r0[6] = 3;

        $r0[7] = 3;

        $r0[8] = 4;

        $r0[9] = 1;

        $r0[10] = 3;

        $r0[11] = 4;

        $r0[12] = 2;

        $r0[13] = 2;

        $r0[14] = 0;

        <com.android.server.hdmi.HdmiUtils: int[] ADDRESS_TO_TYPE> = $r0;

        $r1 = newarray (java.lang.String)[15];

        $r1[0] = "TV";

        $r1[1] = "Recorder_1";

        $r1[2] = "Recorder_2";

        $r1[3] = "Tuner_1";

        $r1[4] = "Playback_1";

        $r1[5] = "AudioSystem";

        $r1[6] = "Tuner_2";

        $r1[7] = "Tuner_3";

        $r1[8] = "Playback_2";

        $r1[9] = "Recorder_3";

        $r1[10] = "Tuner_4";

        $r1[11] = "Playback_3";

        $r1[12] = "Reserved_1";

        $r1[13] = "Reserved_2";

        $r1[14] = "Secondary_TV";

        <com.android.server.hdmi.HdmiUtils: java.lang.String[] DEFAULT_NAMES> = $r1;

        return;
    }

    private void <init>()
    {
        com.android.server.hdmi.HdmiUtils r0;

        r0 := @this: com.android.server.hdmi.HdmiUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.List asImmutableList(int[])
    {
        int[] r0;
        int i0, $i1, $i2, i3;
        java.util.ArrayList $r2;
        java.util.List $r3;
        java.lang.Integer $r4;

        r0 := @parameter0: int[];

        $r2 = new java.util.ArrayList;

        $i1 = lengthof r0;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $i2 = r0[i3];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r3;
    }

    static boolean checkCommandSource(com.android.server.hdmi.HdmiCecMessage, int, java.lang.String)
    {
        int i0, i1;
        java.lang.String r0, $r7;
        java.lang.StringBuilder $r1;
        com.android.server.hdmi.HdmiCecMessage r8;

        r8 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        i1 = virtualinvoke r8.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if i1 == i0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid source [Expected:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Actual:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r0, $r7);

        return 0;

     label1:
        return 1;
    }

    static android.hardware.hdmi.HdmiDeviceInfo cloneHdmiDeviceInfo(android.hardware.hdmi.HdmiDeviceInfo, int)
    {
        android.hardware.hdmi.HdmiDeviceInfo r0, $r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r2;

        r0 := @parameter0: android.hardware.hdmi.HdmiDeviceInfo;

        i0 := @parameter1: int;

        $r1 = new android.hardware.hdmi.HdmiDeviceInfo;

        $i1 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: int getLogicalAddress()>();

        $i2 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: int getPhysicalAddress()>();

        $i3 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: int getPortId()>();

        $i4 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: int getDeviceType()>();

        $i5 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: int getVendorId()>();

        $r2 = virtualinvoke r0.<android.hardware.hdmi.HdmiDeviceInfo: java.lang.String getDisplayName()>();

        specialinvoke $r1.<android.hardware.hdmi.HdmiDeviceInfo: void <init>(int,int,int,int,int,java.lang.String,int)>($i1, $i2, $i3, $i4, $i5, $r2, i0);

        return $r1;
    }

    static void dumpIterable(com.android.internal.util.IndentingPrintWriter, java.lang.String, java.lang.Iterable)
    {
        com.android.internal.util.IndentingPrintWriter r0;
        java.lang.Iterable r1;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String r5;
        java.util.Iterator r6;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Iterable;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void printWithTrailingColon(com.android.internal.util.IndentingPrintWriter,java.lang.String)>(r0, r5);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r6 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r4);

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    static void dumpMap(com.android.internal.util.IndentingPrintWriter, java.lang.String, java.util.Map)
    {
        com.android.internal.util.IndentingPrintWriter r0;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r4, $r5, $r7;
        java.lang.String $r6, r9;
        java.util.Map r10;
        java.util.Iterator r11;
        java.util.Map$Entry r12;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r9 := @parameter1: java.lang.String;

        r10 := @parameter2: java.util.Map;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void printWithTrailingColon(com.android.internal.util.IndentingPrintWriter,java.lang.String)>(r0, r9);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r2 = interfaceinvoke r10.<java.util.Map: java.util.Set entrySet()>();

        r11 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        $r7 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>($r6, $r7);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println()>();

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    static void dumpSparseArray(com.android.internal.util.IndentingPrintWriter, java.lang.String, android.util.SparseArray)
    {
        com.android.internal.util.IndentingPrintWriter r0;
        android.util.SparseArray r1;
        int i0, i1, i2;
        java.lang.String $r4, r6;
        java.lang.Object r7;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r6 := @parameter1: java.lang.String;

        r1 := @parameter2: android.util.SparseArray;

        staticinvoke <com.android.server.hdmi.HdmiUtils: void printWithTrailingColon(com.android.internal.util.IndentingPrintWriter,java.lang.String)>(r0, r6);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i0 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = virtualinvoke r1.<android.util.SparseArray: int keyAt(int)>(i2);

        r7 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>($r4, r7);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    static int getAbortFeatureOpcode(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecMessage r0;
        byte[] $r1;
        byte $b0;
        short $s1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b0 = $r1[0];

        $s1 = $b0 & 255;

        return $s1;
    }

    static int getAbortReason(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecMessage r0;
        byte[] $r1;
        byte $b0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b0 = $r1[1];

        return $b0;
    }

    static int getAudioStatusVolume(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecMessage r0;
        byte b0, $b1, b2;
        byte[] $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b1 = $r1[0];

        b0 = $b1 & 127;

        if b0 < 0 goto label1;

        b2 = b0;

        if 100 >= b0 goto label2;

     label1:
        b2 = -1;

     label2:
        return b2;
    }

    static java.lang.String getDefaultDeviceName(int)
    {
        int i0;
        boolean $z0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isValidAddress(int)>(i0);

        if $z0 == 0 goto label1;

        $r0 = <com.android.server.hdmi.HdmiUtils: java.lang.String[] DEFAULT_NAMES>;

        $r1 = $r0[i0];

        return $r1;

     label1:
        return "";
    }

    public static int getLocalPortFromPhysicalAddress(int, int)
    {
        int i0, $i1, $i2, $i3, $i4, i5, i8, i9, i10;
        char c6, c7;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 != i5 goto label1;

        return 0;

     label1:
        c6 = 61440;

        c7 = 61440;

        i8 = i0;

     label2:
        if i8 == 0 goto label3;

        i8 = i0 & c6;

        c7 = c7 | c6;

        c6 = c6 >> 4;

        goto label2;

     label3:
        i9 = i5 & c7;

        $i1 = c7 << 4;

        $i2 = $i1 & i9;

        if $i2 == i0 goto label4;

        return -1;

     label4:
        $i3 = c6 << 4;

        i10 = i9 & $i3;

     label5:
        $i4 = i10 >> 4;

        if $i4 == 0 goto label6;

        i10 = i10 >> 4;

        goto label5;

     label6:
        return i10;
    }

    static int getTypeFromAddress(int)
    {
        int i0, $i1;
        boolean $z0;
        int[] $r0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isValidAddress(int)>(i0);

        if $z0 == 0 goto label1;

        $r0 = <com.android.server.hdmi.HdmiUtils: int[] ADDRESS_TO_TYPE>;

        $i1 = $r0[i0];

        return $i1;

     label1:
        return -1;
    }

    static boolean isAffectingActiveRoutingPath(int, int)
    {
        int i0, i1, $i2, $i3, $i4, i5, i6;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i5 = 0;

     label1:
        i6 = i1;

        if i5 > 12 goto label3;

        $i2 = i1 >> i5;

        $i3 = $i2 & 15;

        if $i3 == 0 goto label2;

        $i4 = 65520 << i5;

        i6 = i1 & $i4;

        goto label3;

     label2:
        i5 = i5 + 4;

        goto label1;

     label3:
        if i6 != 0 goto label4;

        return 1;

     label4:
        $z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isInActiveRoutingPath(int,int)>(i0, i6);

        return $z0;
    }

    static boolean isAudioStatusMute(com.android.server.hdmi.HdmiCecMessage)
    {
        byte $b0;
        short $s1;
        com.android.server.hdmi.HdmiCecMessage r0;
        byte[] r1;
        boolean z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        z0 = 0;

        $b0 = r1[0];

        $s1 = $b0 & 128;

        if $s1 != 128 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    static boolean isInActiveRoutingPath(int, int)
    {
        int i0, i1, i2, i3, $i4, $i5, i6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i6 = 12;

     label1:
        if i6 < 0 goto label5;

        $i4 = i0 >> i6;

        i2 = $i4 & 15;

        if i2 != 0 goto label2;

        goto label5;

     label2:
        $i5 = i1 >> i6;

        i3 = $i5 & 15;

        if i3 != 0 goto label3;

        goto label5;

     label3:
        if i2 == i3 goto label4;

        return 0;

     label4:
        i6 = i6 + -4;

        goto label1;

     label5:
        return 1;
    }

    static boolean isValidAddress(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 > 14 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static java.util.List mergeToUnmodifiableList(java.util.List, java.util.List)
    {
        java.util.List r0, r1, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z5;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z5 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z5 == 0 goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        $z1 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r1);

        return $r6;

     label2:
        $z2 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r0);

        return $r5;

     label3:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r0);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    static boolean parseCommandParamSystemAudioStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        byte $b0;
        com.android.server.hdmi.HdmiCecMessage r0;
        byte[] r1;
        boolean z0;

        r0 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r1 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        z0 = 0;

        $b0 = r1[0];

        if $b0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private static void printWithTrailingColon(com.android.internal.util.IndentingPrintWriter, java.lang.String)
    {
        com.android.internal.util.IndentingPrintWriter r0;
        boolean $z0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(":");

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r1 = virtualinvoke r1.<java.lang.String: java.lang.String concat(java.lang.String)>(":");

     label2:
        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(r1);

        return;
    }

    static java.util.List sparseArrayToList(android.util.SparseArray)
    {
        android.util.SparseArray r0;
        java.util.ArrayList $r2;
        int $i0, i1;
        java.lang.Object $r3;

        r0 := @parameter0: android.util.SparseArray;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = virtualinvoke r0.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    static int threeBytesToInt(byte[])
    {
        byte[] r0;
        byte $b0, $b2, $b6;
        short $s1, $s3, $s7;
        int $i4, $i5, $i8, $i9;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        $s1 = $b0 & 255;

        $i5 = $s1 << 16;

        $b2 = r0[1];

        $s3 = $b2 & 255;

        $i4 = $s3 << 8;

        $i8 = $i5 | $i4;

        $b6 = r0[2];

        $s7 = $b6 & 255;

        $i9 = $i8 | $s7;

        return $i9;
    }

    static int twoBytesToInt(byte[])
    {
        byte[] r0;
        byte $b0, $b2;
        short $s1, $s3;
        int $i4, $i5;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        $s1 = $b0 & 255;

        $i4 = $s1 << 8;

        $b2 = r0[1];

        $s3 = $b2 & 255;

        $i5 = $i4 | $s3;

        return $i5;
    }

    static int twoBytesToInt(byte[], int)
    {
        byte[] r0;
        int i0, $i3, $i6, $i7;
        byte $b1, $b4;
        short $s2, $s5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $s2 = $b1 & 255;

        $i6 = $s2 << 8;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s5 = $b4 & 255;

        $i7 = $i6 | $s5;

        return $i7;
    }

    static void verifyAddressType(int, int)
    {
        int i0, i1, i2;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        i2 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getTypeFromAddress(int)>(i1);

        if i2 != i0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device type missmatch:[Expected:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Actual:");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }
}
