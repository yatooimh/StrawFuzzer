final class com.android.server.hdmi.SendKeyAction extends com.android.server.hdmi.HdmiCecFeatureAction
{
    private static final int AWAIT_LONGPRESS_MS;
    private static final int AWAIT_RELEASE_KEY_MS;
    private static final int STATE_CHECKING_LONGPRESS;
    private static final int STATE_PROCESSING_KEYCODE;
    private static final java.lang.String TAG;
    private int mLastKeycode;
    private long mLastSendKeyTime;
    private final int mTargetAddress;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice, int, int)
    {
        com.android.server.hdmi.SendKeyAction r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.SendKeyAction: int mTargetAddress> = i0;

        r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode> = i1;

        return;
    }

    private long getCurrentTime()
    {
        com.android.server.hdmi.SendKeyAction r0;
        long $l0;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        return $l0;
    }

    private void sendKeyDown(int)
    {
        com.android.server.hdmi.SendKeyAction r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] r1;
        com.android.server.hdmi.HdmiCecMessage $r2, $r4;
        com.android.server.hdmi.HdmiCecLocalDevice $r3;
        com.android.server.hdmi.SendKeyAction$1 $r5;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        i0 := @parameter0: int;

        r1 = staticinvoke <com.android.server.hdmi.HdmiCecKeycode: byte[] androidKeyToCecKey(int)>(i0);

        if r1 != null goto label1;

        return;

     label1:
        $i1 = r0.<com.android.server.hdmi.SendKeyAction: int mTargetAddress>;

        if $i1 != 5 goto label2;

        $r3 = virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: com.android.server.hdmi.HdmiCecLocalDevice localDevice()>();

        $i4 = $r3.<com.android.server.hdmi.HdmiCecLocalDevice: int mAddress>;

        if $i4 == 0 goto label2;

        $i5 = virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: int getSourceAddress()>();

        $i6 = r0.<com.android.server.hdmi.SendKeyAction: int mTargetAddress>;

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildUserControlPressed(int,int,byte[])>($i5, $i6, r1);

        $r5 = new com.android.server.hdmi.SendKeyAction$1;

        specialinvoke $r5.<com.android.server.hdmi.SendKeyAction$1: void <init>(com.android.server.hdmi.SendKeyAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>($r4, $r5);

        goto label3;

     label2:
        $i2 = virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: int getSourceAddress()>();

        $i3 = r0.<com.android.server.hdmi.SendKeyAction: int mTargetAddress>;

        $r2 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildUserControlPressed(int,int,byte[])>($i2, $i3, r1);

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage)>($r2);

     label3:
        return;
    }

    private void sendKeyUp()
    {
        com.android.server.hdmi.SendKeyAction r0;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecMessage $r1;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        $i0 = virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: int getSourceAddress()>();

        $i1 = r0.<com.android.server.hdmi.SendKeyAction: int mTargetAddress>;

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildUserControlReleased(int,int)>($i0, $i1);

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage)>($r1);

        return;
    }

    public void handleTimerEvent(int)
    {
        com.android.server.hdmi.SendKeyAction r0;
        com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer $r1;
        int $i0, $i2, i4, i5;
        long $l1;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        i4 := @parameter0: int;

        i5 = r0.<com.android.server.hdmi.SendKeyAction: int mState>;

        if i5 == 1 goto label2;

        if i5 == 2 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SendKeyAction", "Not in a valid state");

        goto label3;

     label1:
        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyUp()>();

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void finish()>();

        goto label3;

     label2:
        $r1 = r0.<com.android.server.hdmi.SendKeyAction: com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer mActionTimer>;

        interfaceinvoke $r1.<com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer: void clearTimerMessage()>();

        r0.<com.android.server.hdmi.SendKeyAction: int mState> = 2;

        $i0 = r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode>;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyDown(int)>($i0);

        $l1 = specialinvoke r0.<com.android.server.hdmi.SendKeyAction: long getCurrentTime()>();

        r0.<com.android.server.hdmi.SendKeyAction: long mLastSendKeyTime> = $l1;

        $i2 = r0.<com.android.server.hdmi.SendKeyAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void addTimer(int,int)>($i2, 1000);

     label3:
        return;
    }

    public boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.SendKeyAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        return 0;
    }

    void processKeyEvent(int, boolean)
    {
        com.android.server.hdmi.SendKeyAction r0;
        int i0, $i1, $i2, $i3, $i10, $i12;
        boolean z0, $z1;
        long $l4, $l5, $l6, $l8, $l9;
        byte $b7;
        com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer $r1;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = r0.<com.android.server.hdmi.SendKeyAction: int mState>;

        if $i1 == 1 goto label1;

        $i10 = r0.<com.android.server.hdmi.SendKeyAction: int mState>;

        if $i10 == 2 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SendKeyAction", "Not in a valid state");

        return;

     label1:
        if z0 == 0 goto label4;

        $i3 = r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode>;

        if i0 == $i3 goto label2;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyDown(int)>(i0);

        $l9 = specialinvoke r0.<com.android.server.hdmi.SendKeyAction: long getCurrentTime()>();

        r0.<com.android.server.hdmi.SendKeyAction: long mLastSendKeyTime> = $l9;

        $z1 = staticinvoke <com.android.server.hdmi.HdmiCecKeycode: boolean isRepeatableKey(int)>(i0);

        if $z1 != 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyUp()>();

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void finish()>();

        return;

     label2:
        $l4 = specialinvoke r0.<com.android.server.hdmi.SendKeyAction: long getCurrentTime()>();

        $l5 = r0.<com.android.server.hdmi.SendKeyAction: long mLastSendKeyTime>;

        $l6 = $l4 - $l5;

        $b7 = $l6 cmp 300L;

        if $b7 < 0 goto label3;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyDown(int)>(i0);

        $l8 = specialinvoke r0.<com.android.server.hdmi.SendKeyAction: long getCurrentTime()>();

        r0.<com.android.server.hdmi.SendKeyAction: long mLastSendKeyTime> = $l8;

     label3:
        $r1 = r0.<com.android.server.hdmi.SendKeyAction: com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer mActionTimer>;

        interfaceinvoke $r1.<com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer: void clearTimerMessage()>();

        $i12 = r0.<com.android.server.hdmi.SendKeyAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void addTimer(int,int)>($i12, 1000);

        r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode> = i0;

        goto label5;

     label4:
        $i2 = r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode>;

        if i0 != $i2 goto label5;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyUp()>();

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void finish()>();

     label5:
        return;
    }

    public boolean start()
    {
        com.android.server.hdmi.SendKeyAction r0;
        int $i0, $i2, $i3;
        long $l1;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.SendKeyAction;

        $i0 = r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode>;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyDown(int)>($i0);

        $l1 = specialinvoke r0.<com.android.server.hdmi.SendKeyAction: long getCurrentTime()>();

        r0.<com.android.server.hdmi.SendKeyAction: long mLastSendKeyTime> = $l1;

        $i2 = r0.<com.android.server.hdmi.SendKeyAction: int mLastKeycode>;

        $z0 = staticinvoke <com.android.server.hdmi.HdmiCecKeycode: boolean isRepeatableKey(int)>($i2);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.hdmi.SendKeyAction: void sendKeyUp()>();

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void finish()>();

        return 1;

     label1:
        r0.<com.android.server.hdmi.SendKeyAction: int mState> = 1;

        $i3 = r0.<com.android.server.hdmi.SendKeyAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.SendKeyAction: void addTimer(int,int)>($i3, 400);

        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.SendKeyAction: java.lang.String TAG> = "SendKeyAction";

        <com.android.server.hdmi.SendKeyAction: int STATE_PROCESSING_KEYCODE> = 2;

        <com.android.server.hdmi.SendKeyAction: int STATE_CHECKING_LONGPRESS> = 1;

        <com.android.server.hdmi.SendKeyAction: int AWAIT_RELEASE_KEY_MS> = 1000;

        <com.android.server.hdmi.SendKeyAction: int AWAIT_LONGPRESS_MS> = 400;

        return;
    }
}
