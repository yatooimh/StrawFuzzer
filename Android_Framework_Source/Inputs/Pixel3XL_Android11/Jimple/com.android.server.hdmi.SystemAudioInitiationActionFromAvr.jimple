public class com.android.server.hdmi.SystemAudioInitiationActionFromAvr extends com.android.server.hdmi.HdmiCecFeatureAction
{
    static final int MAX_RETRY_COUNT;
    private static final int STATE_WAITING_FOR_ACTIVE_SOURCE;
    private static final int STATE_WAITING_FOR_TV_SUPPORT;
    private int mSendRequestActiveSourceRetryCount;
    private int mSendSetSystemAudioModeRetryCount;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mSendRequestActiveSourceRetryCount> = 0;

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mSendSetSystemAudioModeRetryCount> = 0;

        return;
    }

    private void handleActiveSourceTimeout()
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        java.lang.Object[] $r1;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r2, $r4, $r5;
        com.android.server.hdmi.HdmiControlService $r3, $r6;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.server.hdmi.HdmiLogger: void debug(java.lang.String,java.lang.Object[])>("Cannot get active source.", $r1);

        $r2 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $r3 = $r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $z0 = virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: boolean isPlaybackDevice()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $r6 = $r5.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int getSourcePath()>();

        virtualinvoke $r6.<com.android.server.hdmi.HdmiControlService: void setAndBroadcastActiveSourceFromOneDeviceType(int,int)>(15, $i0);

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState> = 2;

        specialinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void queryTvSystemAudioModeSupport()>();

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        virtualinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(0);

     label2:
        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void finish()>();

        return;
    }

    private void queryTvSystemAudioModeSupport()
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r1;
        com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$Kp6VigLqlvVoDJpkhSkGpu8E8NQ $r2;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $r2 = new com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$Kp6VigLqlvVoDJpkhSkGpu8E8NQ;

        specialinvoke $r2.<com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$Kp6VigLqlvVoDJpkhSkGpu8E8NQ: void <init>(com.android.server.hdmi.SystemAudioInitiationActionFromAvr)>(r0);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: void queryTvSystemAudioModeSupport(com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem$TvSystemAudioModeSupportedCallback)>($r2);

        return;
    }

    private void switchToRelevantInputForDeviceAt(int)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        int i0;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        i0 := @parameter0: int;

        return;
    }

    void handleTimerEvent(int)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState>;

        if $i1 == i0 goto label1;

        return;

     label1:
        $i2 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState>;

        if $i2 == 1 goto label2;

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void handleActiveSourceTimeout()>();

     label3:
        return;
    }

    public void lambda$queryTvSystemAudioModeSupport$2$SystemAudioInitiationActionFromAvr(boolean)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        boolean z0, $z2;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r1, $r2;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $z2 = virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(1);

        if $z2 == 0 goto label1;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendSetSystemAudioMode(boolean,int)>(1, 15);

     label1:
        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void finish()>();

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void finish()>();

     label3:
        return;
    }

    public void lambda$sendRequestActiveSource$0$SystemAudioInitiationActionFromAvr(int)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r1;
        int $i0, i1, i2;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        i1 := @parameter0: int;

        if i1 == 0 goto label2;

        i2 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mSendRequestActiveSourceRetryCount>;

        if i2 >= 5 goto label1;

        $i0 = i2 + 1;

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mSendRequestActiveSourceRetryCount> = $i0;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendRequestActiveSource()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void finish()>();

     label2:
        return;
    }

    public void lambda$sendSetSystemAudioMode$1$SystemAudioInitiationActionFromAvr(boolean, int, int)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        boolean z0;
        int i0, $i1, i2, i3;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r1;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        if i2 == 0 goto label2;

        i3 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mSendSetSystemAudioModeRetryCount>;

        if i3 >= 5 goto label1;

        $i1 = i3 + 1;

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mSendSetSystemAudioModeRetryCount> = $i1;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendSetSystemAudioMode(boolean,int)>(z0, i0);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean checkSupportAndSetSystemAudioMode(boolean)>(0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void finish()>();

     label2:
        return;
    }

    boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer $r2;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r3;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if $i0 == 130 goto label1;

        return 0;

     label1:
        $i1 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState>;

        if $i1 == 1 goto label2;

        return 0;

     label2:
        $r2 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer mActionTimer>;

        interfaceinvoke $r2.<com.android.server.hdmi.HdmiCecFeatureAction$ActionTimer: void clearTimerMessage()>();

        $r3 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)>(r1);

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState> = 2;

        specialinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void queryTvSystemAudioModeSupport()>();

        return 1;
    }

    protected void sendRequestActiveSource()
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        int $i0;
        com.android.server.hdmi.HdmiCecMessage $r1;
        com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$f4MXnpVbndKtwah7RVztUtj3RoU $r2;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        $i0 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int getSourceAddress()>();

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildRequestActiveSource(int)>($i0);

        $r2 = new com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$f4MXnpVbndKtwah7RVztUtj3RoU;

        specialinvoke $r2.<com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$f4MXnpVbndKtwah7RVztUtj3RoU: void <init>(com.android.server.hdmi.SystemAudioInitiationActionFromAvr)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>($r1, $r2);

        return;
    }

    protected void sendSetSystemAudioMode(boolean, int)
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        boolean z0;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecMessage $r1;
        com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$aPH0zHEfcwbPVrfqva9MSL3cLbI $r2;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int getSourceAddress()>();

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetSystemAudioMode(int,int,boolean)>($i1, i0, z0);

        $r2 = new com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$aPH0zHEfcwbPVrfqva9MSL3cLbI;

        specialinvoke $r2.<com.android.server.hdmi._$$Lambda$SystemAudioInitiationActionFromAvr$aPH0zHEfcwbPVrfqva9MSL3cLbI: void <init>(com.android.server.hdmi.SystemAudioInitiationActionFromAvr,boolean,int)>(r0, z0, i0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>($r1, $r2);

        return;
    }

    boolean start()
    {
        com.android.server.hdmi.SystemAudioInitiationActionFromAvr r0;
        com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem $r1;
        com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.hdmi.SystemAudioInitiationActionFromAvr;

        $r1 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem audioSystem()>();

        $r2 = virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceAudioSystem: com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource getActiveSource()>();

        $i0 = $r2.<com.android.server.hdmi.HdmiCecLocalDevice$ActiveSource: int physicalAddress>;

        if $i0 != 65535 goto label1;

        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState> = 1;

        $i1 = r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void addTimer(int,int)>($i1, 2000);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void sendRequestActiveSource()>();

        goto label2;

     label1:
        r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int mState> = 2;

        specialinvoke r0.<com.android.server.hdmi.SystemAudioInitiationActionFromAvr: void queryTvSystemAudioModeSupport()>();

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int STATE_WAITING_FOR_TV_SUPPORT> = 2;

        <com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int STATE_WAITING_FOR_ACTIVE_SOURCE> = 1;

        <com.android.server.hdmi.SystemAudioInitiationActionFromAvr: int MAX_RETRY_COUNT> = 5;

        return;
    }
}
