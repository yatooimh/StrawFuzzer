final class com.android.server.hdmi.SystemAudioStatusAction extends com.android.server.hdmi.HdmiCecFeatureAction
{
    private static final int STATE_WAIT_FOR_REPORT_AUDIO_STATUS;
    private static final java.lang.String TAG;
    private final int mAvrAddress;
    private final android.hardware.hdmi.IHdmiControlCallback mCallback;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice, int, android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        int i0;
        android.hardware.hdmi.IHdmiControlCallback r2;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.hdmi.IHdmiControlCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.SystemAudioStatusAction: int mAvrAddress> = i0;

        r0.<com.android.server.hdmi.SystemAudioStatusAction: android.hardware.hdmi.IHdmiControlCallback mCallback> = r2;

        return;
    }

    static void access$000(com.android.server.hdmi.SystemAudioStatusAction)
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;

        r0 := @parameter0: com.android.server.hdmi.SystemAudioStatusAction;

        specialinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void handleSendGiveAudioStatusFailure()>();

        return;
    }

    private void finishWithCallback(int)
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        int i0;
        android.os.RemoteException $r1;
        android.hardware.hdmi.IHdmiControlCallback r2;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        i0 := @parameter0: int;

        r2 = r0.<com.android.server.hdmi.SystemAudioStatusAction: android.hardware.hdmi.IHdmiControlCallback mCallback>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.hardware.hdmi.IHdmiControlCallback: void onComplete(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SystemAudioStatusAction", "Failed to invoke callback.", $r1);

     label4:
        virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void finish()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void handleReportAudioStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        boolean z0, $z1, $z2;
        int i0, $i1;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r3, $r4;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        z0 = staticinvoke <com.android.server.hdmi.HdmiUtils: boolean isAudioStatusMute(com.android.server.hdmi.HdmiCecMessage)>(r1);

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int getAudioStatusVolume(com.android.server.hdmi.HdmiCecMessage)>(r1);

        $r3 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        virtualinvoke $r3.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void setAudioStatus(boolean,int)>(z0, i0);

        $r4 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $z1 = virtualinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDeviceTv: boolean isSystemAudioActivated()>();

        $z2 = $z1 ^ z0;

        if $z2 != 0 goto label1;

        $i1 = r0.<com.android.server.hdmi.SystemAudioStatusAction: int mAvrAddress>;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void sendUserControlPressedAndReleased(int,int)>($i1, 67);

     label1:
        specialinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void finishWithCallback(int)>(0);

        return;
    }

    private void handleSendGiveAudioStatusFailure()
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        specialinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void finishWithCallback(int)>(0);

        return;
    }

    private void sendGiveAudioStatus()
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecMessage $r1;
        com.android.server.hdmi.SystemAudioStatusAction$1 $r2;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        $i0 = virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: int getSourceAddress()>();

        $i1 = r0.<com.android.server.hdmi.SystemAudioStatusAction: int mAvrAddress>;

        $r1 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildGiveAudioStatus(int,int)>($i0, $i1);

        $r2 = new com.android.server.hdmi.SystemAudioStatusAction$1;

        specialinvoke $r2.<com.android.server.hdmi.SystemAudioStatusAction$1: void <init>(com.android.server.hdmi.SystemAudioStatusAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>($r1, $r2);

        return;
    }

    void handleTimerEvent(int)
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        int i0, $i1;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.hdmi.SystemAudioStatusAction: int mState>;

        if $i1 == i0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void handleSendGiveAudioStatusFailure()>();

        return;
    }

    boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i0 = r0.<com.android.server.hdmi.SystemAudioStatusAction: int mState>;

        if $i0 != 1 goto label3;

        $i1 = r0.<com.android.server.hdmi.SystemAudioStatusAction: int mAvrAddress>;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        if $i1 == $i2 goto label1;

        goto label3;

     label1:
        $i3 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if $i3 == 122 goto label2;

        return 0;

     label2:
        specialinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void handleReportAudioStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return 1;

     label3:
        return 0;
    }

    boolean start()
    {
        com.android.server.hdmi.SystemAudioStatusAction r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.SystemAudioStatusAction;

        r0.<com.android.server.hdmi.SystemAudioStatusAction: int mState> = 1;

        $i0 = r0.<com.android.server.hdmi.SystemAudioStatusAction: int mState>;

        virtualinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void addTimer(int,int)>($i0, 2000);

        specialinvoke r0.<com.android.server.hdmi.SystemAudioStatusAction: void sendGiveAudioStatus()>();

        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.SystemAudioStatusAction: java.lang.String TAG> = "SystemAudioStatusAction";

        <com.android.server.hdmi.SystemAudioStatusAction: int STATE_WAIT_FOR_REPORT_AUDIO_STATUS> = 1;

        return;
    }
}
