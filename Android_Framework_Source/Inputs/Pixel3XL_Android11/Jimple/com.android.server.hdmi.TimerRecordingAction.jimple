public class com.android.server.hdmi.TimerRecordingAction extends com.android.server.hdmi.HdmiCecFeatureAction
{
    private static final int STATE_WAITING_FOR_TIMER_STATUS;
    private static final java.lang.String TAG;
    private static final int TIMER_STATUS_TIMEOUT_MS;
    private final byte[] mRecordSource;
    private final int mRecorderAddress;
    private final int mSourceType;

    void <init>(com.android.server.hdmi.HdmiCecLocalDevice, int, int, byte[])
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        com.android.server.hdmi.HdmiCecLocalDevice r1;
        int i0, i1;
        byte[] r2;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecLocalDevice;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        specialinvoke r0.<com.android.server.hdmi.HdmiCecFeatureAction: void <init>(com.android.server.hdmi.HdmiCecLocalDevice)>(r1);

        r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress> = i0;

        r0.<com.android.server.hdmi.TimerRecordingAction: int mSourceType> = i1;

        r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource> = r2;

        return;
    }

    static int access$000(com.android.server.hdmi.TimerRecordingAction)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        int $i0;

        r0 := @parameter0: com.android.server.hdmi.TimerRecordingAction;

        $i0 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        return $i0;
    }

    private static int bytesToInt(byte[])
    {
        byte[] r0;
        int $i0, $i1, $i3, $i4, $i6, i7, i8;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r7;
        java.lang.IllegalArgumentException $r6;
        byte $b2;
        short $s5;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 > 4 goto label3;

        i7 = 0;

        i8 = 0;

     label1:
        $i1 = lengthof r0;

        if i8 >= $i1 goto label2;

        $b2 = r0[i8];

        $s5 = $b2 & 255;

        $i3 = 3 - i8;

        $i4 = $i3 * 8;

        $i6 = $s5 << $i4;

        i7 = i7 | $i6;

        i8 = i8 + 1;

        goto label1;

     label2:
        return i7;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid data size:");

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private boolean handleFeatureAbort(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        short s0, $s4;
        byte b1, $b2;
        com.android.server.hdmi.HdmiCecMessage r5;
        byte[] r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r9;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r10;
        int $i5;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r5 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r6 = virtualinvoke r5.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $b2 = r6[0];

        s0 = $b2 & 255;

        if s0 == 52 goto label1;

        if s0 == 151 goto label1;

        if s0 == 162 goto label1;

        return 0;

     label1:
        b1 = r6[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Feature Abort] for ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reason:");

        $s4 = b1 & 255;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s4);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("TimerRecordingAction", $r9);

        $r10 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i5 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        virtualinvoke $r10.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>($i5, 1);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return 1;
    }

    private boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        int $i0, $i1, $i2, $i4;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r1;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r4, $r6, $r9, $r11;
        com.android.server.hdmi.HdmiCecMessage r12;
        byte[] r13;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r12 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        r13 = virtualinvoke r12.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        $i0 = lengthof r13;

        if $i0 == 1 goto label2;

        $i4 = lengthof r13;

        if $i4 != 3 goto label1;

        goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid [Timer Status Data]:");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r13);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("TimerRecordingAction", $r11);

        goto label3;

     label2:
        $r1 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i1 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $i2 = staticinvoke <com.android.server.hdmi.TimerRecordingAction: int bytesToInt(byte[])>(r13);

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>($i1, $i2);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received [Timer Status Data]:");

        $r4 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r13);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("TimerRecordingAction", $r6);

     label3:
        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return 1;
    }

    private void sendTimerMessage()
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte[] $r1, $r2, $r3;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r4;
        com.android.server.hdmi.HdmiCecMessage r5;
        com.android.server.hdmi.TimerRecordingAction$1 $r6;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        i0 = r0.<com.android.server.hdmi.TimerRecordingAction: int mSourceType>;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r4 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i7 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        virtualinvoke $r4.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>($i7, 2);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return;

     label1:
        $i5 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: int getSourceAddress()>();

        $i6 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $r3 = r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource>;

        r5 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetExternalTimer(int,int,byte[])>($i5, $i6, $r3);

        goto label4;

     label2:
        $i3 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: int getSourceAddress()>();

        $i4 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $r2 = r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource>;

        r5 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetAnalogueTimer(int,int,byte[])>($i3, $i4, $r2);

        goto label4;

     label3:
        $i1 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: int getSourceAddress()>();

        $i2 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        $r1 = r0.<com.android.server.hdmi.TimerRecordingAction: byte[] mRecordSource>;

        r5 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildSetDigitalTimer(int,int,byte[])>($i1, $i2, $r1);

     label4:
        $r6 = new com.android.server.hdmi.TimerRecordingAction$1;

        specialinvoke $r6.<com.android.server.hdmi.TimerRecordingAction$1: void <init>(com.android.server.hdmi.TimerRecordingAction)>(r0);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void sendCommand(com.android.server.hdmi.HdmiCecMessage,com.android.server.hdmi.HdmiControlService$SendMessageCallback)>(r5, $r6);

        return;
    }

    void handleTimerEvent(int)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        int i0, $i1, $i2, $i3;
        com.android.server.hdmi.HdmiCecLocalDeviceTv $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r9;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.hdmi.TimerRecordingAction: int mState>;

        if $i1 == i0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout in invalid state:[Expected:");

        $i3 = r0.<com.android.server.hdmi.TimerRecordingAction: int mState>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Actual:");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("TimerRecordingAction", $r9);

        return;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: com.android.server.hdmi.HdmiCecLocalDeviceTv tv()>();

        $i2 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiCecLocalDeviceTv: void announceTimerRecordingResult(int,int)>($i2, 1);

        virtualinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void finish()>();

        return;
    }

    boolean processCommand(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.TimerRecordingAction r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        $i1 = r0.<com.android.server.hdmi.TimerRecordingAction: int mState>;

        if $i1 != 1 goto label4;

        $i2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getSource()>();

        $i3 = r0.<com.android.server.hdmi.TimerRecordingAction: int mRecorderAddress>;

        if $i2 == $i3 goto label1;

        goto label4;

     label1:
        i0 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: int getOpcode()>();

        if i0 == 0 goto label3;

        if i0 == 53 goto label2;

        return 0;

     label2:
        $z1 = specialinvoke r0.<com.android.server.hdmi.TimerRecordingAction: boolean handleTimerStatus(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z1;

     label3:
        $z0 = specialinvoke r0.<com.android.server.hdmi.TimerRecordingAction: boolean handleFeatureAbort(com.android.server.hdmi.HdmiCecMessage)>(r1);

        return $z0;

     label4:
        return 0;
    }

    boolean start()
    {
        com.android.server.hdmi.TimerRecordingAction r0;

        r0 := @this: com.android.server.hdmi.TimerRecordingAction;

        specialinvoke r0.<com.android.server.hdmi.TimerRecordingAction: void sendTimerMessage()>();

        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.TimerRecordingAction: int TIMER_STATUS_TIMEOUT_MS> = 120000;

        <com.android.server.hdmi.TimerRecordingAction: java.lang.String TAG> = "TimerRecordingAction";

        <com.android.server.hdmi.TimerRecordingAction: int STATE_WAITING_FOR_TIMER_STATUS> = 1;

        return;
    }
}
