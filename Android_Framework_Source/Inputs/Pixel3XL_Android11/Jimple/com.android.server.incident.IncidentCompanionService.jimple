public class com.android.server.incident.IncidentCompanionService extends com.android.server.SystemService
{
    private static final java.lang.String[] DUMP_AND_USAGE_STATS_PERMISSIONS;
    private static java.lang.String[] RESTRICTED_IMAGE_DUMP_ARGS;
    static final java.lang.String TAG;
    private com.android.server.incident.PendingReports mPendingReports;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1;

        <com.android.server.incident.IncidentCompanionService: java.lang.String TAG> = "IncidentCompanionService";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "--hal";

        $r0[1] = "--restricted_image";

        <com.android.server.incident.IncidentCompanionService: java.lang.String[] RESTRICTED_IMAGE_DUMP_ARGS> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.DUMP";

        $r1[1] = "android.permission.PACKAGE_USAGE_STATS";

        <com.android.server.incident.IncidentCompanionService: java.lang.String[] DUMP_AND_USAGE_STATS_PERMISSIONS> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.incident.IncidentCompanionService r0;
        android.content.Context r1;
        com.android.server.incident.PendingReports $r2;

        r0 := @this: com.android.server.incident.IncidentCompanionService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new com.android.server.incident.PendingReports;

        specialinvoke $r2.<com.android.server.incident.PendingReports: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.incident.IncidentCompanionService: com.android.server.incident.PendingReports mPendingReports> = $r2;

        return;
    }

    static com.android.server.incident.PendingReports access$000(com.android.server.incident.IncidentCompanionService)
    {
        com.android.server.incident.IncidentCompanionService r0;
        com.android.server.incident.PendingReports $r1;

        r0 := @parameter0: com.android.server.incident.IncidentCompanionService;

        $r1 = r0.<com.android.server.incident.IncidentCompanionService: com.android.server.incident.PendingReports mPendingReports>;

        return $r1;
    }

    static java.lang.String[] access$100()
    {
        java.lang.String[] $r0;

        $r0 = <com.android.server.incident.IncidentCompanionService: java.lang.String[] DUMP_AND_USAGE_STATS_PERMISSIONS>;

        return $r0;
    }

    static android.os.IIncidentManager access$200(com.android.server.incident.IncidentCompanionService) throws android.os.RemoteException
    {
        com.android.server.incident.IncidentCompanionService r0;
        android.os.IIncidentManager $r1;

        r0 := @parameter0: com.android.server.incident.IncidentCompanionService;

        $r1 = specialinvoke r0.<com.android.server.incident.IncidentCompanionService: android.os.IIncidentManager getIIncidentManager()>();

        return $r1;
    }

    static java.lang.String[] access$300()
    {
        java.lang.String[] $r0;

        $r0 = <com.android.server.incident.IncidentCompanionService: java.lang.String[] RESTRICTED_IMAGE_DUMP_ARGS>;

        return $r0;
    }

    public static int getAndValidateUser(android.content.Context)
    {
        android.content.pm.UserInfo r0, r6;
        android.app.IActivityManager $r1;
        android.os.UserManager $r2;
        int $i0, $i1, $i2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        android.content.Context r5;

        r5 := @parameter0: android.content.Context;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r0 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

     label2:
        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>(r5);

        r6 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getPrimaryUser()>();

        if r0 != null goto label3;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("IncidentCompanionService", "No current user.  Nobody to approve the report. The report will be denied.");

        return -10000;

     label3:
        if r6 != null goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("IncidentCompanionService", "No primary user.  Nobody to approve the report. The report will be denied.");

        return -10000;

     label4:
        $i1 = r6.<android.content.pm.UserInfo: int id>;

        $i0 = r0.<android.content.pm.UserInfo: int id>;

        if $i1 == $i0 goto label5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("IncidentCompanionService", "Only the primary user can approve bugreports, but they are not the current user. The report will be denied.");

        return -10000;

     label5:
        $i2 = r6.<android.content.pm.UserInfo: int id>;

        return $i2;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label6;
    }

    private android.os.IIncidentManager getIIncidentManager() throws android.os.RemoteException
    {
        com.android.server.incident.IncidentCompanionService r0;
        android.os.IBinder $r1;
        android.os.IIncidentManager $r2;

        r0 := @this: com.android.server.incident.IncidentCompanionService;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("incident");

        $r2 = staticinvoke <android.os.IIncidentManager$Stub: android.os.IIncidentManager asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    public void onBootPhase(int)
    {
        com.android.server.incident.IncidentCompanionService r0;
        int i0;
        com.android.server.incident.PendingReports $r1;

        r0 := @this: com.android.server.incident.IncidentCompanionService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.SystemService: void onBootPhase(int)>(i0);

        if i0 == 1000 goto label1;

        goto label2;

     label1:
        $r1 = r0.<com.android.server.incident.IncidentCompanionService: com.android.server.incident.PendingReports mPendingReports>;

        virtualinvoke $r1.<com.android.server.incident.PendingReports: void onBootCompleted()>();

     label2:
        return;
    }

    public void onStart()
    {
        com.android.server.incident.IncidentCompanionService r0;
        com.android.server.incident.IncidentCompanionService$BinderService $r1;

        r0 := @this: com.android.server.incident.IncidentCompanionService;

        $r1 = new com.android.server.incident.IncidentCompanionService$BinderService;

        specialinvoke $r1.<com.android.server.incident.IncidentCompanionService$BinderService: void <init>(com.android.server.incident.IncidentCompanionService,com.android.server.incident.IncidentCompanionService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.incident.IncidentCompanionService: void publishBinderService(java.lang.String,android.os.IBinder)>("incidentcompanion", $r1);

        return;
    }
}
