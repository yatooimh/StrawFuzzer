public class com.android.server.input.InputManagerService extends android.hardware.input.IInputManager$Stub implements com.android.server.Watchdog$Monitor
{
    public static final int BTN_MOUSE;
    static final boolean DEBUG;
    private static final java.lang.String DEEP_PRESS_ENABLED;
    private static final java.lang.String EXCLUDED_DEVICES_PATH;
    private static final int INJECTION_TIMEOUT_MILLIS;
    private static final int INPUT_EVENT_INJECTION_FAILED;
    private static final int INPUT_EVENT_INJECTION_PERMISSION_DENIED;
    private static final int INPUT_EVENT_INJECTION_SUCCEEDED;
    private static final int INPUT_EVENT_INJECTION_TIMED_OUT;
    public static final int KEY_STATE_DOWN;
    public static final int KEY_STATE_UNKNOWN;
    public static final int KEY_STATE_UP;
    public static final int KEY_STATE_VIRTUAL;
    private static final int MSG_DELIVER_INPUT_DEVICES_CHANGED;
    private static final int MSG_DELIVER_TABLET_MODE_CHANGED;
    private static final int MSG_RELOAD_DEVICE_ALIASES;
    private static final int MSG_RELOAD_KEYBOARD_LAYOUTS;
    private static final int MSG_SWITCH_KEYBOARD_LAYOUT;
    private static final int MSG_UPDATE_KEYBOARD_LAYOUTS;
    private static final java.lang.String PORT_ASSOCIATIONS_PATH;
    public static final int SW_CAMERA_LENS_COVER;
    public static final int SW_CAMERA_LENS_COVER_BIT;
    public static final int SW_HEADPHONE_INSERT;
    public static final int SW_HEADPHONE_INSERT_BIT;
    public static final int SW_JACK_BITS;
    public static final int SW_JACK_PHYSICAL_INSERT;
    public static final int SW_JACK_PHYSICAL_INSERT_BIT;
    public static final int SW_KEYPAD_SLIDE;
    public static final int SW_KEYPAD_SLIDE_BIT;
    public static final int SW_LID;
    public static final int SW_LID_BIT;
    public static final int SW_LINEOUT_INSERT;
    public static final int SW_LINEOUT_INSERT_BIT;
    public static final int SW_MICROPHONE_INSERT;
    public static final int SW_MICROPHONE_INSERT_BIT;
    public static final int SW_MUTE_DEVICE;
    public static final int SW_MUTE_DEVICE_BIT;
    public static final int SW_TABLET_MODE;
    public static final int SW_TABLET_MODE_BIT;
    static final java.lang.String TAG;
    private final java.lang.Object mAssociationsLock;
    private final android.content.Context mContext;
    private final com.android.server.input.PersistentDataStore mDataStore;
    private android.content.Context mDisplayContext;
    private final java.io.File mDoubleTouchGestureEnableFile;
    private final com.android.server.input.InputManagerService$InputManagerHandler mHandler;
    private android.view.InputDevice[] mInputDevices;
    private final android.util.SparseArray mInputDevicesChangedListeners;
    private boolean mInputDevicesChangedPending;
    private java.lang.Object mInputDevicesLock;
    android.view.IInputFilter mInputFilter;
    com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost;
    final java.lang.Object mInputFilterLock;
    private boolean mKeyboardLayoutNotificationShown;
    private int mNextVibratorTokenValue;
    private android.app.NotificationManager mNotificationManager;
    private final long mPtr;
    private final java.util.Map mRuntimeAssociations;
    private final java.util.Map mStaticAssociations;
    private android.widget.Toast mSwitchedKeyboardLayoutToast;
    private boolean mSystemReady;
    private final android.util.SparseArray mTabletModeChangedListeners;
    private final java.lang.Object mTabletModeLock;
    private final java.util.ArrayList mTempFullKeyboards;
    private final java.util.ArrayList mTempInputDevicesChangedListenersToNotify;
    private final java.util.List mTempTabletModeChangedListenersToNotify;
    final boolean mUseDevInputEventForAudioJack;
    private java.lang.Object mVibratorLock;
    private java.util.HashMap mVibratorTokens;
    private com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks;
    private com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks;

    public void <init>(android.content.Context)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object $r2, $r6, $r11, $r13, $r14;
        android.util.SparseArray $r3, $r8;
        java.util.ArrayList $r4, $r9, $r10;
        com.android.server.input.PersistentDataStore $r5;
        android.view.InputDevice[] $r7;
        java.util.HashMap $r12, $r15;
        com.android.server.input.InputManagerService$InputManagerHandler $r16, $r25;
        com.android.server.DisplayThread $r17;
        android.os.Looper $r18, $r27;
        java.util.Map $r19;
        android.content.res.Resources $r20, $r29;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r21;
        java.lang.String $r24, r33;
        android.content.Context $r26, r32;
        android.os.MessageQueue $r28;
        long $l1;
        java.io.File $r30, r34;
        com.android.server.input.InputManagerService$LocalService $r31;

        r0 := @this: com.android.server.input.InputManagerService;

        r32 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.input.IInputManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mTabletModeLock> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.input.InputManagerService: android.util.SparseArray mTabletModeChangedListeners> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.List mTempTabletModeChangedListenersToNotify> = $r4;

        $r5 = new com.android.server.input.PersistentDataStore;

        specialinvoke $r5.<com.android.server.input.PersistentDataStore: void <init>()>();

        r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock> = $r6;

        $r7 = newarray (android.view.InputDevice)[0];

        r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify> = $r9;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards> = $r10;

        $r11 = new java.lang.Object;

        specialinvoke $r11.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock> = $r11;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens> = $r12;

        $r13 = new java.lang.Object;

        specialinvoke $r13.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock> = $r13;

        $r14 = new java.lang.Object;

        specialinvoke $r14.<java.lang.Object: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.lang.Object mAssociationsLock> = $r14;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.input.InputManagerService: java.util.Map mRuntimeAssociations> = $r15;

        r0.<com.android.server.input.InputManagerService: android.content.Context mContext> = r32;

        $r16 = new com.android.server.input.InputManagerService$InputManagerHandler;

        $r17 = staticinvoke <com.android.server.DisplayThread: com.android.server.DisplayThread get()>();

        $r18 = virtualinvoke $r17.<com.android.server.DisplayThread: android.os.Looper getLooper()>();

        specialinvoke $r16.<com.android.server.input.InputManagerService$InputManagerHandler: void <init>(com.android.server.input.InputManagerService,android.os.Looper)>(r0, $r18);

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler> = $r16;

        $r19 = staticinvoke <com.android.server.input.InputManagerService: java.util.Map loadStaticInputPortAssociations()>();

        r0.<com.android.server.input.InputManagerService: java.util.Map mStaticAssociations> = $r19;

        $r20 = virtualinvoke r32.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r20.<android.content.res.Resources: boolean getBoolean(int)>(17891570);

        r0.<com.android.server.input.InputManagerService: boolean mUseDevInputEventForAudioJack> = $z0;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initializing input manager, mUseDevInputEventForAudioJack=");

        $z1 = r0.<com.android.server.input.InputManagerService: boolean mUseDevInputEventForAudioJack>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("InputManager", $r24);

        $r26 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r25 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r27 = virtualinvoke $r25.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Looper getLooper()>();

        $r28 = virtualinvoke $r27.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $l1 = staticinvoke <com.android.server.input.InputManagerService: long nativeInit(com.android.server.input.InputManagerService,android.content.Context,android.os.MessageQueue)>(r0, $r26, $r28);

        r0.<com.android.server.input.InputManagerService: long mPtr> = $l1;

        $r29 = virtualinvoke r32.<android.content.Context: android.content.res.Resources getResources()>();

        r33 = virtualinvoke $r29.<android.content.res.Resources: java.lang.String getString(int)>(17039884);

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r33);

        if $z2 == 0 goto label1;

        r34 = null;

        goto label2;

     label1:
        $r30 = new java.io.File;

        specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>(r33);

        r34 = $r30;

     label2:
        r0.<com.android.server.input.InputManagerService: java.io.File mDoubleTouchGestureEnableFile> = r34;

        $r31 = new com.android.server.input.InputManagerService$LocalService;

        specialinvoke $r31.<com.android.server.input.InputManagerService$LocalService: void <init>(com.android.server.input.InputManagerService,com.android.server.input.InputManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/hardware/input/InputManagerInternal;", $r31);

        return;
    }

    static void access$100(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void updatePointerSpeedFromSettings()>();

        return;
    }

    static void access$1000(com.android.server.input.InputManagerService, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.input.InputManagerService: void handleSwitchKeyboardLayout(int,int)>(i0, i1);

        return;
    }

    static void access$1100(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadKeyboardLayouts()>();

        return;
    }

    static void access$1200(com.android.server.input.InputManagerService, long, boolean)
    {
        com.android.server.input.InputManagerService r0;
        long l0;
        boolean z0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.input.InputManagerService: void deliverTabletModeChanged(long,boolean)>(l0, z0);

        return;
    }

    static long access$1300(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        return $l0;
    }

    static int access$1400(long, android.view.InputEvent, int, int, int, int, int)
    {
        long l0;
        android.view.InputEvent r0;
        int i1, i2, i3, i4, i5, $i6;

        l0 := @parameter0: long;

        r0 := @parameter1: android.view.InputEvent;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        $i6 = staticinvoke <com.android.server.input.InputManagerService: int nativeInjectInputEvent(long,android.view.InputEvent,int,int,int,int,int)>(l0, r0, i1, i2, i3, i4, i5);

        return $i6;
    }

    static void access$1500(long, android.os.IBinder)
    {
        long l0;
        android.os.IBinder r0;

        l0 := @parameter0: long;

        r0 := @parameter1: android.os.IBinder;

        staticinvoke <com.android.server.input.InputManagerService: void nativePilferPointers(long,android.os.IBinder)>(l0, r0);

        return;
    }

    static void access$1600(long, android.view.InputChannel)
    {
        long l0;
        android.view.InputChannel r0;

        l0 := @parameter0: long;

        r0 := @parameter1: android.view.InputChannel;

        staticinvoke <com.android.server.input.InputManagerService: void nativeUnregisterInputChannel(long,android.view.InputChannel)>(l0, r0);

        return;
    }

    static void access$1700(com.android.server.input.InputManagerService, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.input.InputManagerService: void onInputDevicesChangedListenerDied(int)>(i0);

        return;
    }

    static void access$1800(com.android.server.input.InputManagerService, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.input.InputManagerService: void onTabletModeChangedListenerDied(int)>(i0);

        return;
    }

    static void access$1900(com.android.server.input.InputManagerService, java.util.List)
    {
        com.android.server.input.InputManagerService r0;
        java.util.List r1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<com.android.server.input.InputManagerService: void setDisplayViewportsInternal(java.util.List)>(r1);

        return;
    }

    static void access$200(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateShowTouchesFromSettings()>();

        return;
    }

    static boolean access$2000(com.android.server.input.InputManagerService, android.view.InputEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: android.view.InputEvent;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean injectInputEventInternal(android.view.InputEvent,int)>(r1, i0);

        return $z0;
    }

    static void access$2100(long, boolean)
    {
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInteractive(long,boolean)>(l0, z0);

        return;
    }

    static void access$2200(long, int)
    {
        long l0;
        int i1;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        staticinvoke <com.android.server.input.InputManagerService: void nativeToggleCapsLock(long,int)>(l0, i1);

        return;
    }

    static java.io.File access$2300(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: java.io.File mDoubleTouchGestureEnableFile>;

        return $r1;
    }

    static void access$300(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateAccessibilityLargePointerFromSettings()>();

        return;
    }

    static void access$400(com.android.server.input.InputManagerService, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateDeepPressStatusFromSettings(java.lang.String)>(r1);

        return;
    }

    static void access$500(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateKeyboardLayouts()>();

        return;
    }

    static void access$600(com.android.server.input.InputManagerService)
    {
        com.android.server.input.InputManagerService r0;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadDeviceAliases()>();

        return;
    }

    static boolean access$800(java.util.Locale, java.util.Locale)
    {
        java.util.Locale r0, r1;
        boolean $z0;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.Locale;

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean isCompatibleLocale(java.util.Locale,java.util.Locale)>(r0, r1);

        return $z0;
    }

    static void access$900(com.android.server.input.InputManagerService, android.view.InputDevice[])
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputDevice[] r1;

        r0 := @parameter0: com.android.server.input.InputManagerService;

        r1 := @parameter1: android.view.InputDevice[];

        specialinvoke r0.<com.android.server.input.InputManagerService: void deliverInputDevicesChanged(android.view.InputDevice[])>(r1);

        return;
    }

    private void cancelVibrateIfNeeded(com.android.server.input.InputManagerService$VibratorToken)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$VibratorToken r1;
        boolean $z0;
        int $i0, $i1;
        long $l2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$VibratorToken;

        entermonitor r1;

     label1:
        $z0 = r1.<com.android.server.input.InputManagerService$VibratorToken: boolean mVibrating>;

        if $z0 == 0 goto label2;

        $l2 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i1 = r1.<com.android.server.input.InputManagerService$VibratorToken: int mDeviceId>;

        $i0 = r1.<com.android.server.input.InputManagerService$VibratorToken: int mTokenValue>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeCancelVibrate(long,int,int)>($l2, $i1, $i0);

        r1.<com.android.server.input.InputManagerService$VibratorToken: boolean mVibrating> = 0;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean checkCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, r2, $r14;
        int $i0, $i1, $i2, $i3, $i4;
        android.content.Context $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i2 != 0 goto label2;

        return 1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r14);

        return 0;
    }

    private boolean checkInjectEventsPermission(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        boolean z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INJECT_EVENTS", i0, i1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean containsInputDeviceWithDescriptor(android.view.InputDevice[], java.lang.String)
    {
        android.view.InputDevice[] r0;
        java.lang.String r1, $r3;
        int i0, i1;
        android.view.InputDevice $r2;
        boolean $z0;

        r0 := @parameter0: android.view.InputDevice[];

        r1 := @parameter1: java.lang.String;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r0[i1];

        $r3 = virtualinvoke $r2.<android.view.InputDevice: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void deliverInputDevicesChanged(android.view.InputDevice[])
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15;
        java.util.ArrayList $r1, $r2, $r5, $r6, $r7, $r11, $r15, $r20, $r22, r32, $r40;
        boolean $z0, $z1, $z2, $z4, $z5, $z6;
        android.util.SparseArray $r3, $r21;
        android.view.InputDevice[] $r4, $r18, r28;
        android.app.NotificationManager $r8;
        java.lang.Object $r9, $r12, $r16, $r23, r29;
        android.view.InputDevice $r10, r31, r36;
        android.hardware.input.InputDeviceIdentifier $r13, $r14;
        com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord $r17, $r24;
        java.lang.String $r19, r37, r38, r39;
        java.lang.Throwable $r25, $r26, $r27, r33;
        int[] r30;
        com.android.server.input.PersistentDataStore r35;

        r0 := @this: com.android.server.input.InputManagerService;

        r28 := @parameter0: android.view.InputDevice[];

        i9 = 0;

        $r1 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        r29 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r29;

     label01:
        $z0 = r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending>;

        if $z0 != 0 goto label03;

        exitmonitor r29;

     label02:
        return;

     label03:
        r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending> = 0;

        $r3 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

     label04:
        i10 = 0;

     label05:
        if i10 >= i0 goto label08;

     label06:
        $r22 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        $r21 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        $r23 = virtualinvoke $r21.<android.util.SparseArray: java.lang.Object valueAt(int)>(i10);

        $r24 = (com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord) $r23;

        virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>($r24);

     label07:
        i10 = i10 + 1;

        goto label05;

     label08:
        $r4 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        i1 = lengthof $r4;

        $i2 = i1 * 2;

        r30 = newarray (int)[$i2];

     label09:
        i11 = 0;

     label10:
        if i11 >= i1 goto label23;

     label11:
        $r18 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        r31 = $r18[i11];

        $i4 = i11 * 2;

        $i5 = virtualinvoke r31.<android.view.InputDevice: int getId()>();

        r30[$i4] = $i5;

        $i6 = i11 * 2;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke r31.<android.view.InputDevice: int getGeneration()>();

        r30[$i7] = $i8;

     label12:
        i12 = i9;

     label13:
        $z4 = virtualinvoke r31.<android.view.InputDevice: boolean isVirtual()>();

        if $z4 != 0 goto label22;

     label14:
        i12 = i9;

     label15:
        $z5 = virtualinvoke r31.<android.view.InputDevice: boolean isFullKeyboard()>();

        if $z5 == 0 goto label22;

     label16:
        $r19 = virtualinvoke r31.<android.view.InputDevice: java.lang.String getDescriptor()>();

        $z6 = staticinvoke <com.android.server.input.InputManagerService: boolean containsInputDeviceWithDescriptor(android.view.InputDevice[],java.lang.String)>(r28, $r19);

        if $z6 != 0 goto label20;

        r32 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

     label17:
        virtualinvoke r32.<java.util.ArrayList: void add(int,java.lang.Object)>(i9, r31);

     label18:
        i12 = i9 + 1;

        goto label22;

     label19:
        $r25 := @caughtexception;

        r33 = $r25;

        goto label47;

     label20:
        $r20 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        virtualinvoke $r20.<java.util.ArrayList: boolean add(java.lang.Object)>(r31);

     label21:
        i12 = i9;

     label22:
        i11 = i11 + 1;

        i9 = i12;

        goto label10;

     label23:
        exitmonitor r29;

     label24:
        i13 = 0;

     label25:
        if i13 >= i0 goto label26;

        $r15 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r17 = (com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord) $r16;

        virtualinvoke $r17.<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void notifyInputDevicesChanged(int[])>(r30);

        i13 = i13 + 1;

        goto label25;

     label26:
        $r5 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempInputDevicesChangedListenersToNotify>;

        virtualinvoke $r5.<java.util.ArrayList: void clear()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        i14 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        r35 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r35;

        i15 = 0;

     label27:
        if i15 >= i14 goto label38;

     label28:
        $r11 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        $r12 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        r36 = (android.view.InputDevice) $r12;

     label29:
        $r13 = virtualinvoke r36.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        r37 = virtualinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>($r13);

     label30:
        r38 = r37;

        if r37 != null goto label35;

     label31:
        r39 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getDefaultKeyboardLayout(android.view.InputDevice)>(r36);

     label32:
        r38 = r39;

        if r39 == null goto label35;

     label33:
        $r14 = virtualinvoke r36.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        virtualinvoke r0.<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>($r14, r39);

     label34:
        r38 = r39;

     label35:
        if r38 != null goto label37;

     label36:
        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r36);

     label37:
        i15 = i15 + 1;

        goto label27;

     label38:
        exitmonitor r35;

     label39:
        $r8 = r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager>;

        if $r8 == null goto label42;

        $z1 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label41;

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i3 <= 1 goto label40;

        specialinvoke r0.<com.android.server.input.InputManagerService: void showMissingKeyboardLayoutNotification(android.view.InputDevice)>(null);

        goto label42;

     label40:
        $r9 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (android.view.InputDevice) $r9;

        specialinvoke r0.<com.android.server.input.InputManagerService: void showMissingKeyboardLayoutNotification(android.view.InputDevice)>($r10);

        goto label42;

     label41:
        $z2 = r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown>;

        if $z2 == 0 goto label42;

        specialinvoke r0.<com.android.server.input.InputManagerService: void hideMissingKeyboardLayoutNotification()>();

     label42:
        $r40 = r0.<com.android.server.input.InputManagerService: java.util.ArrayList mTempFullKeyboards>;

        virtualinvoke $r40.<java.util.ArrayList: void clear()>();

        return;

     label43:
        $r26 := @caughtexception;

     label44:
        exitmonitor r35;

     label45:
        throw $r26;

     label46:
        $r27 := @caughtexception;

        r33 = $r27;

     label47:
        exitmonitor r29;

     label48:
        throw r33;

        catch java.lang.Throwable from label01 to label02 with label46;
        catch java.lang.Throwable from label03 to label04 with label46;
        catch java.lang.Throwable from label06 to label07 with label46;
        catch java.lang.Throwable from label08 to label09 with label46;
        catch java.lang.Throwable from label11 to label12 with label46;
        catch java.lang.Throwable from label13 to label14 with label46;
        catch java.lang.Throwable from label15 to label16 with label46;
        catch java.lang.Throwable from label16 to label17 with label46;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label46;
        catch java.lang.Throwable from label23 to label24 with label46;
        catch java.lang.Throwable from label28 to label29 with label43;
        catch java.lang.Throwable from label29 to label30 with label43;
        catch java.lang.Throwable from label31 to label32 with label43;
        catch java.lang.Throwable from label33 to label34 with label43;
        catch java.lang.Throwable from label36 to label37 with label43;
        catch java.lang.Throwable from label38 to label39 with label43;
        catch java.lang.Throwable from label44 to label45 with label43;
        catch java.lang.Throwable from label47 to label48 with label46;
    }

    private void deliverTabletModeChanged(long, boolean)
    {
        com.android.server.input.InputManagerService r0;
        long l0;
        boolean z0;
        java.lang.Object r1, $r6, $r10;
        int i1, i2, i3;
        java.util.List $r3, $r5, $r9;
        android.util.SparseArray $r4, $r8;
        com.android.server.input.InputManagerService$TabletModeChangedListenerRecord $r7, $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.input.InputManagerService;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.input.InputManagerService: java.util.List mTempTabletModeChangedListenersToNotify>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mTabletModeLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mTabletModeChangedListeners>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

     label04:
        $r9 = r0.<com.android.server.input.InputManagerService: java.util.List mTempTabletModeChangedListenersToNotify>;

        $r8 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mTabletModeChangedListeners>;

        $r10 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r11 = (com.android.server.input.InputManagerService$TabletModeChangedListenerRecord) $r10;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r11);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        i3 = 0;

     label08:
        if i3 >= i1 goto label09;

        $r5 = r0.<com.android.server.input.InputManagerService: java.util.List mTempTabletModeChangedListenersToNotify>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r7 = (com.android.server.input.InputManagerService$TabletModeChangedListenerRecord) $r6;

        virtualinvoke $r7.<com.android.server.input.InputManagerService$TabletModeChangedListenerRecord: void notifyTabletModeChanged(long,boolean)>(l0, z0);

        i3 = i3 + 1;

        goto label08;

     label09:
        return;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1;
        android.view.KeyEvent r2, $r4;
        int i0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $r4 = interfaceinvoke $r3.<com.android.server.input.InputManagerService$WindowManagerCallbacks: android.view.KeyEvent dispatchUnhandledKey(android.os.IBinder,android.view.KeyEvent,int)>(r1, r2, i0);

        return $r4;
    }

    private void dumpAssociations(java.io.PrintWriter)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        java.util.Map r2, $r4, $r5, $r7;
        com.android.server.input._$$Lambda$InputManagerService$e8CLEFczq_4kLYCG30uaJDgK3rA r3;
        boolean $z0, $z1;
        com.android.server.input._$$Lambda$InputManagerService$M0FF5e8p6FGyFBNFwEYoVAKqrhQ $r6;
        java.lang.Throwable $r8;
        java.io.PrintWriter r9;

        r0 := @this: com.android.server.input.InputManagerService;

        r9 := @parameter0: java.io.PrintWriter;

        $r4 = r0.<com.android.server.input.InputManagerService: java.util.Map mStaticAssociations>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>("Static Associations:");

        $r7 = r0.<com.android.server.input.InputManagerService: java.util.Map mStaticAssociations>;

        $r6 = new com.android.server.input._$$Lambda$InputManagerService$M0FF5e8p6FGyFBNFwEYoVAKqrhQ;

        specialinvoke $r6.<com.android.server.input._$$Lambda$InputManagerService$M0FF5e8p6FGyFBNFwEYoVAKqrhQ: void <init>(java.io.PrintWriter)>(r9);

        interfaceinvoke $r7.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r6);

     label1:
        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mAssociationsLock>;

        entermonitor r1;

     label2:
        $r5 = r0.<com.android.server.input.InputManagerService: java.util.Map mRuntimeAssociations>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>("Runtime Associations:");

        r2 = r0.<com.android.server.input.InputManagerService: java.util.Map mRuntimeAssociations>;

        r3 = new com.android.server.input._$$Lambda$InputManagerService$e8CLEFczq_4kLYCG30uaJDgK3rA;

        specialinvoke r3.<com.android.server.input._$$Lambda$InputManagerService$e8CLEFczq_4kLYCG30uaJDgK3rA: void <init>(java.io.PrintWriter)>(r9);

        interfaceinvoke r2.<java.util.Map: void forEach(java.util.function.BiConsumer)>(r3);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static java.util.List flatten(java.util.Map)
    {
        java.util.Map r0;
        java.util.ArrayList $r2;
        int $i0, $i1;
        com.android.server.input._$$Lambda$InputManagerService$P986LfJHWb_Wytu9J9I0HQIpodU $r3;

        r0 := @parameter0: java.util.Map;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $i1 = $i0 * 2;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        $r3 = new com.android.server.input._$$Lambda$InputManagerService$P986LfJHWb_Wytu9J9I0HQIpodU;

        specialinvoke $r3.<com.android.server.input._$$Lambda$InputManagerService$P986LfJHWb_Wytu9J9I0HQIpodU: void <init>(java.util.List)>($r2);

        interfaceinvoke r0.<java.util.Map: void forEach(java.util.function.BiConsumer)>($r3);

        return $r2;
    }

    private android.content.Context getContextForDisplay(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, $i1, $i2;
        android.content.Context $r1, $r3, $r6, $r8, r9, r10, r12;
        android.view.Display $r2, $r7, r11;
        java.lang.Object $r4;
        android.hardware.display.DisplayManager $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r9 = r0.<com.android.server.input.InputManagerService: android.content.Context mDisplayContext>;

        if r9 == null goto label1;

        $r7 = virtualinvoke r9.<android.content.Context: android.view.Display getDisplay()>();

        $i2 = virtualinvoke $r7.<android.view.Display: int getDisplayId()>();

        if $i2 != i0 goto label1;

        $r8 = r0.<com.android.server.input.InputManagerService: android.content.Context mDisplayContext>;

        return $r8;

     label1:
        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.view.Display getDisplay()>();

        $i1 = virtualinvoke $r2.<android.view.Display: int getDisplayId()>();

        if $i1 != i0 goto label2;

        r10 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r0.<com.android.server.input.InputManagerService: android.content.Context mDisplayContext> = r10;

        return r10;

     label2:
        $r3 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        $r5 = (android.hardware.display.DisplayManager) $r4;

        r11 = virtualinvoke $r5.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(i0);

        $r6 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r12 = virtualinvoke $r6.<android.content.Context: android.content.Context createDisplayContext(android.view.Display)>(r11);

        r0.<com.android.server.input.InputManagerService: android.content.Context mDisplayContext> = r12;

        return r12;
    }

    private java.lang.String getDefaultKeyboardLayout(android.view.InputDevice)
    {
        com.android.server.input.InputManagerService r0;
        java.util.Locale r1, $r14, r26;
        int i0, i1, i2, i3, i4, i5, i6;
        android.hardware.input.KeyboardLayout r3, $r11, r27;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        android.content.res.Configuration $r6;
        java.lang.String $r7, $r12, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList $r8;
        com.android.server.input.InputManagerService$4 $r9;
        java.lang.Object $r10, $r13, $r18;
        android.view.InputDevice r24;
        android.os.LocaleList r25, r28;

        r0 := @this: com.android.server.input.InputManagerService;

        r24 := @parameter0: android.view.InputDevice;

        $r4 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        r1 = $r6.<android.content.res.Configuration: java.util.Locale locale>;

        $r7 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7);

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new com.android.server.input.InputManagerService$4;

        specialinvoke $r9.<com.android.server.input.InputManagerService$4: void <init>(com.android.server.input.InputManagerService,android.view.InputDevice,java.util.Locale,java.util.List)>(r0, r24, r1, $r8);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>($r9);

        $z1 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        return null;

     label02:
        staticinvoke <java.util.Collections: void sort(java.util.List)>($r8);

        i0 = interfaceinvoke $r8.<java.util.List: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

        $r18 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (android.hardware.input.KeyboardLayout) $r18;

        r25 = virtualinvoke r3.<android.hardware.input.KeyboardLayout: android.os.LocaleList getLocales()>();

        i2 = virtualinvoke r25.<android.os.LocaleList: int size()>();

        i3 = 0;

     label04:
        if i3 >= i2 goto label06;

        r26 = virtualinvoke r25.<android.os.LocaleList: java.util.Locale get(int)>(i3);

        $r19 = virtualinvoke r26.<java.util.Locale: java.lang.String getCountry()>();

        $r20 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z3 == 0 goto label05;

        $r21 = virtualinvoke r26.<java.util.Locale: java.lang.String getVariant()>();

        $r22 = virtualinvoke r1.<java.util.Locale: java.lang.String getVariant()>();

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z4 == 0 goto label05;

        $r23 = virtualinvoke r3.<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()>();

        return $r23;

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        i1 = i1 + 1;

        goto label03;

     label07:
        i4 = 0;

     label08:
        if i4 >= i0 goto label12;

        $r13 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        r27 = (android.hardware.input.KeyboardLayout) $r13;

        r28 = virtualinvoke r27.<android.hardware.input.KeyboardLayout: android.os.LocaleList getLocales()>();

        i5 = virtualinvoke r28.<android.os.LocaleList: int size()>();

        i6 = 0;

     label09:
        if i6 >= i5 goto label11;

        $r14 = virtualinvoke r28.<android.os.LocaleList: java.util.Locale get(int)>(i6);

        $r15 = virtualinvoke $r14.<java.util.Locale: java.lang.String getCountry()>();

        $r16 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label10;

        $r17 = virtualinvoke r27.<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()>();

        return $r17;

     label10:
        i6 = i6 + 1;

        goto label09;

     label11:
        i4 = i4 + 1;

        goto label08;

     label12:
        $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (android.hardware.input.KeyboardLayout) $r10;

        $r12 = virtualinvoke $r11.<android.hardware.input.KeyboardLayout: java.lang.String getDescriptor()>();

        return $r12;
    }

    private java.lang.String getDeviceAlias(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return null;

     label1:
        return null;
    }

    private int getDoubleTapTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getDoubleTapTimeout()>();

        return $i0;
    }

    private static java.lang.String[] getExcludedDeviceNames()
    {
        java.io.File[] r1;
        int i0, i2;
        java.util.ArrayList $r3;
        java.io.File $r4, $r5, $r9, $r10;
        java.lang.String[] $r6, $r8;
        java.lang.Object[] $r7;
        java.util.List $r11;
        java.lang.Throwable $r12;
        java.lang.Exception $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r16, $r19;
        java.io.FileInputStream r21;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = newarray (java.io.File)[2];

        $r4 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        r1[0] = $r4;

        $r5 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        r1[1] = $r5;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label7;

        $r9 = new java.io.File;

        $r10 = r1[i2];

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "etc/excluded-input-devices.xml");

     label2:
        r21 = new java.io.FileInputStream;

        specialinvoke r21.<java.io.FileInputStream: void <init>(java.io.File)>($r9);

        $r11 = staticinvoke <com.android.server.input.ConfigurationProcessor: java.util.List processExcludedDeviceNames(java.io.InputStream)>(r21);

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r11);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse \'");

        $r16 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", $r19, $r13);

        goto label6;

     label5:
        $r12 := @caughtexception;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        $r6 = newarray (java.lang.String)[0];

        $r7 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;

        catch java.io.FileNotFoundException from label2 to label3 with label5;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    private int getHoverTapSlop()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getHoverTapSlop()>();

        return $i0;
    }

    private int getHoverTapTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getHoverTapTimeout()>();

        return $i0;
    }

    private java.lang.String[] getInputPortAssociations()
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        java.util.Map $r3, $r4;
        java.util.List $r5;
        java.lang.String[] $r6, $r8;
        java.lang.Object[] $r7;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.input.InputManagerService;

        $r2 = new java.util.HashMap;

        $r3 = r0.<com.android.server.input.InputManagerService: java.util.Map mStaticAssociations>;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>($r3);

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mAssociationsLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: java.util.Map mRuntimeAssociations>;

        interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>($r4);

        exitmonitor r1;

     label2:
        $r5 = staticinvoke <com.android.server.input.InputManagerService: java.util.List flatten(java.util.Map)>($r2);

        $r6 = newarray (java.lang.String)[0];

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        return $r8;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int getKeyRepeatDelay()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatDelay()>();

        return $i0;
    }

    private int getKeyRepeatTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getKeyRepeatTimeout()>();

        return $i0;
    }

    private java.lang.String[] getKeyboardLayoutOverlay(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        boolean $z0;
        com.android.server.input.InputManagerService$13 $r1;
        java.lang.String $r2, $r7, r9;
        java.lang.StringBuilder $r3;
        android.hardware.input.InputDeviceIdentifier r8;
        java.lang.String[] r10;

        r0 := @this: com.android.server.input.InputManagerService;

        r8 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        $z0 = r0.<com.android.server.input.InputManagerService: boolean mSystemReady>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r9 = virtualinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)>(r8);

        if r9 != null goto label2;

        return null;

     label2:
        r10 = newarray (java.lang.String)[2];

        $r1 = new com.android.server.input.InputManagerService$13;

        specialinvoke $r1.<com.android.server.input.InputManagerService$13: void <init>(com.android.server.input.InputManagerService,java.lang.String[])>(r0, r10);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayout(java.lang.String,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r9, $r1);

        $r2 = r10[0];

        if $r2 != null goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get keyboard layout with descriptor \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r7);

        return null;

     label3:
        return r10;
    }

    private java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        android.hardware.input.InputDeviceIdentifier r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.String $r4, $r10, $r11;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        if r1 == null goto label2;

        $r4 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        if $r4 == null goto label2;

        $i0 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getVendorId()>();

        if $i0 != 0 goto label1;

        $i3 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getProductId()>();

        if $i3 != 0 goto label1;

        $r11 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        return $r11;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vendor:");

        $i1 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getVendorId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",product:");

        $i2 = virtualinvoke r1.<android.hardware.input.InputDeviceIdentifier: int getProductId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("identifier and descriptor must not be null");

        throw $r3;
    }

    private static android.os.LocaleList getLocalesFromLanguageTags(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        android.os.LocaleList $r2, $r3;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <android.os.LocaleList: android.os.LocaleList getEmptyLocaleList()>();

        return $r3;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(124, 44);

        $r2 = staticinvoke <android.os.LocaleList: android.os.LocaleList forLanguageTags(java.lang.String)>($r1);

        return $r2;
    }

    private int getLongPressTimeout()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        return $i0;
    }

    private int getPointerDisplayId()
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i0 = interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int getPointerDisplayId()>();

        return $i0;
    }

    private android.view.PointerIcon getPointerIcon(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        android.content.Context $r1;
        android.view.PointerIcon $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.input.InputManagerService: android.content.Context getContextForDisplay(int)>(i0);

        $r2 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getDefaultIcon(android.content.Context)>($r1);

        return $r2;
    }

    private int getPointerLayer()
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i0 = interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int getPointerLayer()>();

        return $i0;
    }

    private int getPointerSpeedSetting()
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i1 = 0;

     label1:
        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "pointer_speed", -2);

     label2:
        i1 = i0;

        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return i1;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    private int getShowTouchesSetting(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.provider.Settings$SettingNotFoundException $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i1 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>($r3, "show_touches", -2);

     label2:
        i1 = i0;

        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return i1;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    private int getVirtualKeyQuietTimeMillis()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694918);

        return $i0;
    }

    private void handleSwitchKeyboardLayout(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        boolean z0;
        android.hardware.input.InputDeviceIdentifier $r1;
        com.android.server.input.PersistentDataStore $r2, $r3, $r4, $r8, r12;
        android.content.Context $r5;
        java.lang.String $r6, r11, r13;
        java.lang.Throwable $r7, $r9;
        android.view.InputDevice r10;
        android.widget.Toast r14, r16;
        android.hardware.input.KeyboardLayout r15;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r10 = virtualinvoke r0.<com.android.server.input.InputManagerService: android.view.InputDevice getInputDevice(int)>(i0);

        if r10 == null goto label13;

        $r1 = virtualinvoke r10.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        r11 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>($r1);

        r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r12;

     label01:
        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        z0 = virtualinvoke $r2.<com.android.server.input.PersistentDataStore: boolean switchKeyboardLayout(java.lang.String,int)>(r11, i1);

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r13 = virtualinvoke $r3.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r11);

     label02:
        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r4.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label03:
        exitmonitor r12;

     label04:
        if z0 == 0 goto label13;

        r14 = r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast>;

        if r14 == null goto label05;

        virtualinvoke r14.<android.widget.Toast: void cancel()>();

        r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast> = null;

     label05:
        if r13 == null goto label06;

        r15 = virtualinvoke r0.<com.android.server.input.InputManagerService: android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)>(r13);

        if r15 == null goto label06;

        $r5 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke r15.<android.hardware.input.KeyboardLayout: java.lang.String getLabel()>();

        r16 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,java.lang.CharSequence,int)>($r5, $r6, 0);

        r0.<com.android.server.input.InputManagerService: android.widget.Toast mSwitchedKeyboardLayoutToast> = r16;

        virtualinvoke r16.<android.widget.Toast: void show()>();

     label06:
        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadKeyboardLayouts()>();

        goto label13;

     label07:
        $r7 := @caughtexception;

     label08:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r8.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label09:
        throw $r7;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r12;

     label12:
        throw $r9;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void hideMissingKeyboardLayoutNotification()
    {
        com.android.server.input.InputManagerService r0;
        boolean $z0;
        android.os.UserHandle $r1;
        android.app.NotificationManager $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        $z0 = r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown> = 0;

        $r2 = r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager>;

        $r1 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r2.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 19, $r1);

     label1:
        return;
    }

    private boolean injectInputEventInternal(android.view.InputEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i6, i8;
        long l2, $l7;
        java.lang.IllegalArgumentException $r1, $r18;
        java.lang.StringBuilder $r2, $r8, $r13;
        java.lang.String $r6, $r12, $r17;
        java.lang.SecurityException $r7;
        java.lang.Throwable $r19;
        android.view.InputEvent r20;

        r0 := @this: com.android.server.input.InputManagerService;

        r20 := @parameter0: android.view.InputEvent;

        i6 := @parameter1: int;

        if r20 == null goto label9;

        if i6 == 0 goto label2;

        if i6 == 2 goto label2;

        if i6 != 1 goto label1;

        goto label2;

     label1:
        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("mode is invalid");

        throw $r18;

     label2:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $l7 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        i8 = staticinvoke <com.android.server.input.InputManagerService: int nativeInjectInputEvent(long,android.view.InputEvent,int,int,int,int,int)>($l7, r20, i0, i1, i6, 30000, 134217728);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        if i8 == 0 goto label7;

        if i8 == 1 goto label6;

        if i8 == 3 goto label5;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event injection from pid ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed.");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r17);

        return 0;

     label5:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event injection from pid ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out.");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r12);

        return 0;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input event injection from pid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission denied.");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r6);

        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("Injecting to another application requires INJECT_EVENTS permission");

        throw $r7;

     label7:
        return 1;

     label8:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r19;

     label9:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("event must not be null");

        throw $r1;

        catch java.lang.Throwable from label3 to label4 with label8;
    }

    private long interceptKeyBeforeDispatching(android.os.IBinder, android.view.KeyEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1;
        android.view.KeyEvent r2;
        int i0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r3;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.KeyEvent;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $l1 = interfaceinvoke $r3.<com.android.server.input.InputManagerService$WindowManagerCallbacks: long interceptKeyBeforeDispatching(android.os.IBinder,android.view.KeyEvent,int)>(r1, r2, i0);

        return $l1;
    }

    private int interceptKeyBeforeQueueing(android.view.KeyEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.KeyEvent r1;
        int i0, $i1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.KeyEvent;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i1 = interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptKeyBeforeQueueing(android.view.KeyEvent,int)>(r1, i0);

        return $i1;
    }

    private int interceptMotionBeforeQueueingNonInteractive(int, long, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i2, $i3;
        long l1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $i3 = interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: int interceptMotionBeforeQueueingNonInteractive(int,long,int)>(i0, l1, i2);

        return $i3;
    }

    private static boolean isCompatibleLocale(java.util.Locale, java.util.Locale)
    {
        java.util.Locale r0, r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getLanguage()>();

        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<java.util.Locale: java.lang.String getCountry()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 != 0 goto label2;

        $r5 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z2 != 0 goto label2;

        $r6 = virtualinvoke r0.<java.util.Locale: java.lang.String getCountry()>();

        $r7 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    static void lambda$dumpAssociations$0(java.io.PrintWriter, java.lang.String, java.lang.Integer)
    {
        java.io.PrintWriter r0;
        java.lang.Integer r1;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r6, $r10, r11;

        r0 := @parameter0: java.io.PrintWriter;

        r11 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Integer;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  port: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  display: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return;
    }

    static void lambda$dumpAssociations$1(java.io.PrintWriter, java.lang.String, java.lang.Integer)
    {
        java.io.PrintWriter r0;
        java.lang.Integer r1;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r6, $r10, r11;

        r0 := @parameter0: java.io.PrintWriter;

        r11 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Integer;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  port: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  display: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return;
    }

    static void lambda$flatten$2(java.util.List, java.lang.String, java.lang.Integer)
    {
        java.util.List r0;
        java.lang.String r1, $r3;
        java.lang.Integer r2;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Integer;

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r3 = virtualinvoke r2.<java.lang.Integer: java.lang.String toString()>();

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    private static java.util.Map loadStaticInputPortAssociations()
    {
        java.io.File $r1, $r2;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r9;
        java.util.HashMap $r10;
        java.lang.Throwable $r11;
        java.io.FileInputStream r13;
        java.util.Map r14;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "etc/input-port-associations.xml");

     label1:
        r13 = new java.io.FileInputStream;

        specialinvoke r13.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        r14 = staticinvoke <com.android.server.input.ConfigurationProcessor: java.util.Map processInputPortAssociations(java.io.InputStream)>(r13);

     label2:
        return r14;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse \'");

        $r6 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", $r9, $r3);

        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        return $r10;

        catch java.io.FileNotFoundException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static native boolean nativeCanDispatchToDisplay(long, int, int);

    private static native void nativeCancelVibrate(long, int, int);

    private static native void nativeDisableInputDevice(long, int);

    private static native void nativeDisplayRemoved(long, int);

    private static native java.lang.String nativeDump(long);

    private static native void nativeEnableInputDevice(long, int);

    private static native int nativeGetKeyCodeState(long, int, int, int);

    private static native int nativeGetScanCodeState(long, int, int, int);

    private static native int nativeGetSwitchState(long, int, int, int);

    private static native boolean nativeHasKeys(long, int, int, int[], boolean[]);

    private static native long nativeInit(com.android.server.input.InputManagerService, android.content.Context, android.os.MessageQueue);

    private static native int nativeInjectInputEvent(long, android.view.InputEvent, int, int, int, int, int);

    private static native boolean nativeIsInputDeviceEnabled(long, int);

    private static native void nativeMonitor(long);

    private static native void nativeNotifyPortAssociationsChanged(long);

    private static native void nativePilferPointers(long, android.os.IBinder);

    private static native void nativeRegisterInputChannel(long, android.view.InputChannel);

    private static native void nativeRegisterInputMonitor(long, android.view.InputChannel, int, boolean);

    private static native void nativeReloadCalibration(long);

    private static native void nativeReloadDeviceAliases(long);

    private static native void nativeReloadKeyboardLayouts(long);

    private static native void nativeReloadPointerIcons(long);

    private static native void nativeSetCustomPointerIcon(long, android.view.PointerIcon);

    private static native void nativeSetDisplayViewports(long, android.hardware.display.DisplayViewport[]);

    private static native void nativeSetFocusedApplication(long, int, android.view.InputApplicationHandle);

    private static native void nativeSetFocusedDisplay(long, int);

    private static native void nativeSetInTouchMode(long, boolean);

    private static native void nativeSetInputDispatchMode(long, boolean, boolean);

    private static native void nativeSetInputFilterEnabled(long, boolean);

    private static native void nativeSetInteractive(long, boolean);

    private static native void nativeSetMotionClassifierEnabled(long, boolean);

    private static native void nativeSetPointerCapture(long, boolean);

    private static native void nativeSetPointerIconType(long, int);

    private static native void nativeSetPointerSpeed(long, int);

    private static native void nativeSetShowTouches(long, boolean);

    private static native void nativeSetSystemUiVisibility(long, int);

    private static native void nativeStart(long);

    private static native void nativeToggleCapsLock(long, int);

    private static native boolean nativeTransferTouchFocus(long, android.os.IBinder, android.os.IBinder);

    private static native void nativeUnregisterInputChannel(long, android.view.InputChannel);

    private static native android.view.VerifiedInputEvent nativeVerifyInputEvent(long, android.view.InputEvent);

    private static native void nativeVibrate(long, int, long[], int, int);

    private long notifyANR(android.view.InputApplicationHandle, android.os.IBinder, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputApplicationHandle r1;
        android.os.IBinder r2;
        java.lang.String r3;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r4;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputApplicationHandle;

        r2 := @parameter1: android.os.IBinder;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $l0 = interfaceinvoke $r4.<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(android.view.InputApplicationHandle,android.os.IBinder,java.lang.String)>(r1, r2, r3);

        return $l0;
    }

    private void notifyConfigurationChanged(long)
    {
        com.android.server.input.InputManagerService r0;
        long l0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r1;

        r0 := @this: com.android.server.input.InputManagerService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r1.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyConfigurationChanged()>();

        return;
    }

    private void notifyFocusChanged(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1, r2;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r3;
        boolean $z0;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.IBinder;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $z0 = interfaceinvoke $r3.<com.android.server.input.InputManagerService$WindowManagerCallbacks: boolean notifyFocusChanged(android.os.IBinder,android.os.IBinder)>(r1, r2);

        if $z0 == 0 goto label1;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetPointerCapture(long,boolean)>($l0, 0);

     label1:
        return;
    }

    private void notifyInputChannelBroken(android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyInputChannelBroken(android.os.IBinder)>(r1);

        return;
    }

    private void notifyInputDevicesChanged(android.view.InputDevice[])
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        android.view.InputDevice[] $r2, r6;
        com.android.server.input.InputManagerService$InputManagerHandler $r3;
        android.os.Message $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        r6 := @parameter0: android.view.InputDevice[];

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending>;

        if $z0 != 0 goto label2;

        r0.<com.android.server.input.InputManagerService: boolean mInputDevicesChangedPending> = 1;

        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r2 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        $r4 = virtualinvoke $r3.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r2);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label2:
        r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices> = r6;

        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void notifySwitch(long, int, int)
    {
        com.android.server.input.InputManagerService r0;
        long l0, $l5, $l7;
        int i1, i2, $i3, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        com.android.internal.os.SomeArgs r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.media.AudioManager $r4;
        java.lang.Boolean $r5;
        com.android.server.input.InputManagerService$InputManagerHandler $r6;
        android.os.Message $r7;
        com.android.server.input.InputManagerService$WiredAccessoryCallbacks $r8;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r9, $r10;
        boolean z1, z2, $z3, z4, z5;

        r0 := @this: com.android.server.input.InputManagerService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i2 & 1;

        if $i3 == 0 goto label03;

        $i12 = i1 & 1;

        if $i12 != 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r10.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyLidSwitchChanged(long,boolean)>(l0, z1);

     label03:
        $i13 = i2 & 512;

        if $i13 == 0 goto label06;

        $i11 = i1 & 512;

        if $i11 == 0 goto label04;

        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r9.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void notifyCameraLensCoverSwitchChanged(long,boolean)>(l0, z2);

     label06:
        $z3 = r0.<com.android.server.input.InputManagerService: boolean mUseDevInputEventForAudioJack>;

        if $z3 == 0 goto label07;

        $i10 = i2 & 212;

        if $i10 == 0 goto label07;

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks>;

        interfaceinvoke $r8.<com.android.server.input.InputManagerService$WiredAccessoryCallbacks: void notifyWiredAccessoryChanged(long,int,int)>(l0, i1, i2);

     label07:
        $i14 = i2 & 2;

        if $i14 == 0 goto label10;

        r1 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        $l5 = -1L & l0;

        $i6 = (int) $l5;

        r1.<com.android.internal.os.SomeArgs: int argi1> = $i6;

        $l7 = l0 >> 32;

        $i8 = (int) $l7;

        r1.<com.android.internal.os.SomeArgs: int argi2> = $i8;

        $i9 = i1 & 2;

        if $i9 == 0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        r1.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = $r5;

        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r7 = virtualinvoke $r6.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Message obtainMessage(int,java.lang.Object)>(6, r1);

        virtualinvoke $r7.<android.os.Message: void sendToTarget()>();

     label10:
        $i15 = i2 & 16384;

        if $i15 == 0 goto label12;

        z5 = 0;

        $i4 = i1 & 16384;

        if $i4 == 0 goto label11;

        z5 = 1;

     label11:
        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/media/AudioManager;");

        $r4 = (android.media.AudioManager) $r3;

        virtualinvoke $r4.<android.media.AudioManager: void setMicrophoneMuteFromSwitch(boolean)>(z5);

     label12:
        return;
    }

    private void onInputDevicesChangedListenerDied(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void onPointerDownOutsideFocus(android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: void onPointerDownOutsideFocus(android.os.IBinder)>(r1);

        return;
    }

    private void onTabletModeChangedListenerDied(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mTabletModeLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mTabletModeChangedListeners>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void registerAccessibilityLargePointerSettingObserver()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        com.android.server.input.InputManagerService$11 $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("accessibility_large_pointer_icon");

        $r4 = new com.android.server.input.InputManagerService$11;

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        specialinvoke $r4.<com.android.server.input.InputManagerService$11: void <init>(com.android.server.input.InputManagerService,android.os.Handler)>(r0, $r5);

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 1, $r4, -1);

        return;
    }

    private void registerLongPressTimeoutObserver()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        com.android.server.input.InputManagerService$12 $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("long_press_timeout");

        $r4 = new com.android.server.input.InputManagerService$12;

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        specialinvoke $r4.<com.android.server.input.InputManagerService$12: void <init>(com.android.server.input.InputManagerService,android.os.Handler)>(r0, $r5);

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 1, $r4, -1);

        return;
    }

    private void registerPointerSpeedSettingObserver()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        com.android.server.input.InputManagerService$9 $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("pointer_speed");

        $r4 = new com.android.server.input.InputManagerService$9;

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        specialinvoke $r4.<com.android.server.input.InputManagerService$9: void <init>(com.android.server.input.InputManagerService,android.os.Handler)>(r0, $r5);

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 1, $r4, -1);

        return;
    }

    private void registerShowTouchesSettingObserver()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3;
        com.android.server.input.InputManagerService$10 $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("show_touches");

        $r4 = new com.android.server.input.InputManagerService$10;

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        specialinvoke $r4.<com.android.server.input.InputManagerService$10: void <init>(com.android.server.input.InputManagerService,android.os.Handler)>(r0, $r5);

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 1, $r4, -1);

        return;
    }

    private void reloadDeviceAliases()
    {
        com.android.server.input.InputManagerService r0;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadDeviceAliases(long)>($l0);

        return;
    }

    private void reloadKeyboardLayouts()
    {
        com.android.server.input.InputManagerService r0;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadKeyboardLayouts(long)>($l0);

        return;
    }

    private void setDisplayViewportsInternal(java.util.List)
    {
        com.android.server.input.InputManagerService r0;
        java.util.List r1;
        android.hardware.display.DisplayViewport[] $r2, $r4;
        long $l0;
        java.lang.Object[] $r3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.util.List;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $r2 = newarray (android.hardware.display.DisplayViewport)[0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (android.hardware.display.DisplayViewport[]) $r3;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetDisplayViewports(long,android.hardware.display.DisplayViewport[])>($l0, $r4);

        return;
    }

    private void setPointerSpeedUnchecked(int)
    {
        com.android.server.input.InputManagerService r0;
        int $i0, i2, i3;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i2 := @parameter0: int;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(i2, -7);

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 7);

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetPointerSpeed(long,int)>($l1, i3);

        return;
    }

    private void showMissingKeyboardLayoutNotification(android.view.InputDevice)
    {
        com.android.server.input.InputManagerService r0;
        boolean $z0;
        android.content.Intent $r1;
        android.os.UserHandle $r3, $r17;
        android.content.Context $r4, $r5, $r8, $r15;
        android.app.Notification$Builder $r6, $r10, $r12, $r13, $r14, $r16;
        java.lang.String $r7, $r9, $r11;
        int $i0;
        android.app.NotificationManager $r18;
        android.hardware.input.InputDeviceIdentifier $r19;
        android.view.InputDevice r21;
        android.app.PendingIntent r23;
        android.content.res.Resources r24;
        android.app.Notification r25;

        r0 := @this: com.android.server.input.InputManagerService;

        r21 := @parameter0: android.view.InputDevice;

        $z0 = r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown>;

        if $z0 != 0 goto label2;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.settings.HARD_KEYBOARD_SETTINGS");

        if r21 == null goto label1;

        $r19 = virtualinvoke r21.<android.view.InputDevice: android.hardware.input.InputDeviceIdentifier getIdentifier()>();

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("input_device_identifier", $r19);

     label1:
        virtualinvoke $r1.<android.content.Intent: android.content.Intent setFlags(int)>(337641472);

        $r4 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r23 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r4, 0, $r1, 67108864, null, $r3);

        $r5 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r24 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = new android.app.Notification$Builder;

        $r8 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r7 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String PHYSICAL_KEYBOARD>;

        specialinvoke $r6.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r8, $r7);

        $r9 = virtualinvoke r24.<android.content.res.Resources: java.lang.String getString(int)>(17041205);

        $r10 = virtualinvoke $r6.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r9);

        $r11 = virtualinvoke r24.<android.content.res.Resources: java.lang.String getString(int)>(17041204);

        $r12 = virtualinvoke $r10.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r11);

        $r13 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r23);

        $r14 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302821);

        $r15 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r15.<android.content.Context: int getColor(int)>(17170460);

        $r16 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i0);

        r25 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification build()>();

        $r18 = r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager>;

        $r17 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r18.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 19, r25, $r17);

        r0.<com.android.server.input.InputManagerService: boolean mKeyboardLayoutNotificationShown> = 1;

     label2:
        return;
    }

    private void updateAccessibilityLargePointerFromSettings()
    {
        com.android.server.input.InputManagerService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        long $l1;
        boolean z0;

        r0 := @this: com.android.server.input.InputManagerService;

        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "accessibility_large_pointer_icon", 0, -2);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        staticinvoke <android.view.PointerIcon: void setUseLargeIcons(boolean)>(z0);

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadPointerIcons(long)>($l1);

        return;
    }

    private void updateDeepPressStatusFromSettings(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        boolean z0, z1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r11, r12, r14, r15;
        long $l2;
        java.lang.StringBuilder $r13;

        r0 := @this: com.android.server.input.InputManagerService;

        r12 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "long_press_timeout", 400, -2);

        z1 = 1;

        z0 = staticinvoke <android.provider.DeviceConfig: boolean getBoolean(java.lang.String,java.lang.String,boolean)>("input_native_boot", "deep_press_enabled", 1);

        if z0 == 0 goto label1;

        if i0 > 400 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        if z1 == 0 goto label3;

        r14 = "Enabling";

        goto label4;

     label3:
        r14 = "Disabling";

     label4:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" motion classifier because ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": feature ");

        if z0 == 0 goto label5;

        r15 = "enabled";

        goto label6;

     label5:
        r15 = "disabled";

     label6:
        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", long press timeout = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("InputManager", $r11);

        $l2 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetMotionClassifierEnabled(long,boolean)>($l2, z1);

        return;
    }

    private void updateKeyboardLayouts()
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.PersistentDataStore r1, $r4, $r5, $r7;
        java.util.HashSet $r2;
        com.android.server.input.InputManagerService$5 $r3;
        java.lang.Throwable $r6, $r8;

        r0 := @this: com.android.server.input.InputManagerService;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = new com.android.server.input.InputManagerService$5;

        specialinvoke $r3.<com.android.server.input.InputManagerService$5: void <init>(com.android.server.input.InputManagerService,java.util.HashSet)>(r0, $r2);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>($r3);

        r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r4.<com.android.server.input.PersistentDataStore: boolean removeUninstalledKeyboardLayouts(java.util.Set)>($r2);

     label02:
        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r5.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label03:
        exitmonitor r1;

     label04:
        specialinvoke r0.<com.android.server.input.InputManagerService: void reloadKeyboardLayouts()>();

        return;

     label05:
        $r6 := @caughtexception;

     label06:
        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r7.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label07:
        throw $r6;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void updatePointerSpeedFromSettings()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = specialinvoke r0.<com.android.server.input.InputManagerService: int getPointerSpeedSetting()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void setPointerSpeedUnchecked(int)>($i0);

        return;
    }

    private void updateShowTouchesFromSettings()
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long l1;
        boolean z0;

        r0 := @this: com.android.server.input.InputManagerService;

        z0 = 0;

        i0 = specialinvoke r0.<com.android.server.input.InputManagerService: int getShowTouchesSetting(int)>(0);

        l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        if i0 == 0 goto label1;

        z0 = 1;

     label1:
        staticinvoke <com.android.server.input.InputManagerService: void nativeSetShowTouches(long,boolean)>(l1, z0);

        return;
    }

    private void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$KeyboardLayoutVisitor r1;
        android.content.pm.PackageManager r2;
        java.util.Iterator r3;
        android.content.pm.ResolveInfo r4;
        android.content.Context $r5;
        android.content.Intent $r6;
        java.util.List $r7;
        boolean $z0;
        java.lang.Object $r8;
        int $i0;
        android.content.pm.ActivityInfo $r9;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$KeyboardLayoutVisitor;

        $r5 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS");

        $r7 = virtualinvoke r2.<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>($r6, 786560);

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.ResolveInfo) $r8;

        $r9 = r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $i0 = r4.<android.content.pm.ResolveInfo: int priority>;

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayoutsInPackage(android.content.pm.PackageManager,android.content.pm.ActivityInfo,java.lang.String,int,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r2, $r9, null, $i0, r1);

        goto label1;

     label2:
        return;
    }

    private void visitKeyboardLayout(java.lang.String, com.android.server.input.InputManagerService$KeyboardLayoutVisitor)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$KeyboardLayoutVisitor r1;
        com.android.server.input.InputManagerService$KeyboardLayoutDescriptor r2;
        android.content.ComponentName r3;
        android.content.Context $r4;
        java.lang.String $r5, $r6, $r8, r10;
        android.content.pm.ActivityInfo $r7;
        android.content.pm.PackageManager$NameNotFoundException $r9;
        android.content.pm.PackageManager r11;

        r0 := @this: com.android.server.input.InputManagerService;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.input.InputManagerService$KeyboardLayoutVisitor;

        r2 = staticinvoke <com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: com.android.server.input.InputManagerService$KeyboardLayoutDescriptor parse(java.lang.String)>(r10);

        if r2 == null goto label4;

        $r4 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        r11 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label1:
        r3 = new android.content.ComponentName;

        $r6 = r2.<com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String packageName>;

        $r5 = r2.<com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String receiverName>;

        specialinvoke r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r6, $r5);

        $r7 = virtualinvoke r11.<android.content.pm.PackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>(r3, 786560);

        $r8 = r2.<com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String keyboardLayoutName>;

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayoutsInPackage(android.content.pm.PackageManager,android.content.pm.ActivityInfo,java.lang.String,int,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r11, $r7, $r8, 0, r1);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

     label4:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void visitKeyboardLayoutsInPackage(android.content.pm.PackageManager, android.content.pm.ActivityInfo, java.lang.String, int, com.android.server.input.InputManagerService$KeyboardLayoutVisitor)
    {
        com.android.server.input.InputManagerService r0;
        android.content.pm.ActivityInfo r1;
        com.android.server.input.InputManagerService$KeyboardLayoutVisitor r2;
        android.os.Bundle r3;
        java.lang.String r4, r5, r6, $r12, $r15, $r17, $r19, $r24, $r25, $r29, $r32, $r34, r51, r54, r65, $r77, $r78, $r79, $r84, $r85, $r86;
        boolean z0, $z1;
        android.content.pm.ApplicationInfo $r7, $r8;
        int $i0, i5, i6, i7, i9, i16, i17, i18;
        int[] $r18;
        android.hardware.input.KeyboardLayout $r26;
        java.lang.StringBuilder $r27, r76, r80, $r82;
        java.lang.Throwable $r35, $r36, $r37, $r38, $r46, $r47, $r48, $r49, r74, r81;
        java.lang.Exception $r39, $r44, $r45, r66;
        android.content.pm.PackageManager r50;
        java.lang.CharSequence r53;
        android.content.res.Resources r55;
        android.content.res.XmlResourceParser r56, r58;
        android.content.res.TypedArray r71;
        android.os.LocaleList r72;

        r0 := @this: com.android.server.input.InputManagerService;

        r50 := @parameter0: android.content.pm.PackageManager;

        r1 := @parameter1: android.content.pm.ActivityInfo;

        r51 := @parameter2: java.lang.String;

        i5 := @parameter3: int;

        r2 := @parameter4: com.android.server.input.InputManagerService$KeyboardLayoutVisitor;

        r3 = r1.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if r3 != null goto label01;

        return;

     label01:
        i6 = virtualinvoke r3.<android.os.Bundle: int getInt(java.lang.String)>("android.hardware.input.metadata.KEYBOARD_LAYOUTS");

        if i6 != 0 goto label02;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing meta-data \'android.hardware.input.metadata.KEYBOARD_LAYOUTS\' on receiver ");

        $r29 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r32 = r1.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r34);

        return;

     label02:
        r53 = virtualinvoke r1.<android.content.pm.ActivityInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r50);

        if r53 == null goto label03;

        r54 = interfaceinvoke r53.<java.lang.CharSequence: java.lang.String toString()>();

        goto label04;

     label03:
        r54 = "";

     label04:
        $r7 = r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i7 = $r7.<android.content.pm.ApplicationInfo: int flags>;

        $i0 = i7 & 1;

        if $i0 == 0 goto label05;

        i9 = i5;

        goto label06;

     label05:
        i9 = 0;

     label06:
        $r8 = r1.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r55 = virtualinvoke r50.<android.content.pm.PackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>($r8);

        r56 = virtualinvoke r55.<android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)>(i6);

     label07:
        r58 = r56;

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r56, "keyboard-layouts");

     label09:
        r58 = r56;

     label10:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r56);

     label11:
        r58 = r56;

     label12:
        r65 = interfaceinvoke r56.<android.content.res.XmlResourceParser: java.lang.String getName()>();

     label13:
        if r65 != null goto label17;

     label14:
        interfaceinvoke r56.<android.content.res.XmlResourceParser: void close()>();

     label15:
        goto label53;

     label16:
        $r44 := @caughtexception;

        r66 = $r44;

        goto label52;

     label17:
        r58 = r56;

     label18:
        $z1 = virtualinvoke r65.<java.lang.String: boolean equals(java.lang.Object)>("keyboard-layout");

        if $z1 == 0 goto label44;

     label19:
        r58 = r56;

     label20:
        $r18 = <com.android.internal.R$styleable: int[] KeyboardLayout>;

        r71 = virtualinvoke r55.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>(r56, $r18);

     label21:
        r4 = virtualinvoke r71.<android.content.res.TypedArray: java.lang.String getString(int)>(1);

        r5 = virtualinvoke r71.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        i16 = virtualinvoke r71.<android.content.res.TypedArray: int getResourceId(int,int)>(2, 0);

        $r19 = virtualinvoke r71.<android.content.res.TypedArray: java.lang.String getString(int)>(3);

        r72 = staticinvoke <com.android.server.input.InputManagerService: android.os.LocaleList getLocalesFromLanguageTags(java.lang.String)>($r19);

     label22:
        i17 = virtualinvoke r71.<android.content.res.TypedArray: int getInt(int,int)>(5, -1);

     label23:
        i18 = virtualinvoke r71.<android.content.res.TypedArray: int getInt(int,int)>(4, -1);

     label24:
        if r4 == null goto label35;

        if r5 == null goto label35;

        if i16 != 0 goto label25;

        goto label35;

     label25:
        $r25 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r24 = r1.<android.content.pm.ActivityInfo: java.lang.String name>;

        r6 = staticinvoke <com.android.server.input.InputManagerService$KeyboardLayoutDescriptor: java.lang.String format(java.lang.String,java.lang.String,java.lang.String)>($r25, $r24, r4);

     label26:
        if r51 == null goto label31;

     label27:
        z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r51);

     label28:
        if z0 == 0 goto label29;

        goto label31;

     label29:
        goto label36;

     label30:
        $r47 := @caughtexception;

        r74 = $r47;

        goto label42;

     label31:
        $r26 = new android.hardware.input.KeyboardLayout;

        specialinvoke $r26.<android.hardware.input.KeyboardLayout: void <init>(java.lang.String,java.lang.String,java.lang.String,int,android.os.LocaleList,int,int)>(r6, r5, r54, i9, r72, i17, i18);

     label32:
        interfaceinvoke r2.<com.android.server.input.InputManagerService$KeyboardLayoutVisitor: void visitKeyboardLayout(android.content.res.Resources,int,android.hardware.input.KeyboardLayout)>(r55, i16, $r26);

     label33:
        goto label36;

     label34:
        $r48 := @caughtexception;

        r74 = $r48;

        goto label42;

     label35:
        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing required \'name\', \'label\' or \'keyboardLayout\' attributes in keyboard layout resource from receiver ");

        $r77 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r78 = r1.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r79 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r79);

     label36:
        virtualinvoke r71.<android.content.res.TypedArray: void recycle()>();

     label37:
        goto label45;

     label38:
        $r46 := @caughtexception;

        r74 = $r46;

        goto label42;

     label39:
        $r38 := @caughtexception;

        r74 = $r38;

        goto label42;

     label40:
        $r36 := @caughtexception;

        r74 = $r36;

        goto label42;

     label41:
        $r37 := @caughtexception;

        r74 = $r37;

     label42:
        virtualinvoke r71.<android.content.res.TypedArray: void recycle()>();

     label43:
        throw r74;

     label44:
        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unrecognized element \'");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in keyboard layout resource from receiver ");

        $r12 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r15 = r1.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r17);

     label45:
        goto label09;

     label46:
        $r49 := @caughtexception;

        r81 = $r49;

        goto label48;

     label47:
        $r35 := @caughtexception;

        r81 = $r35;

        r56 = r58;

     label48:
        interfaceinvoke r56.<android.content.res.XmlResourceParser: void close()>();

     label49:
        throw r81;

     label50:
        $r45 := @caughtexception;

        r66 = $r45;

        goto label52;

     label51:
        $r39 := @caughtexception;

        r66 = $r39;

     label52:
        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse keyboard layout resource from receiver ");

        $r84 = r1.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r85 = r1.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r86 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", $r86, r66);

     label53:
        return;

        catch java.lang.Exception from label06 to label07 with label51;
        catch java.lang.Throwable from label08 to label09 with label47;
        catch java.lang.Throwable from label10 to label11 with label47;
        catch java.lang.Throwable from label12 to label13 with label47;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label47;
        catch java.lang.Throwable from label20 to label21 with label47;
        catch java.lang.Throwable from label21 to label22 with label41;
        catch java.lang.Throwable from label22 to label23 with label40;
        catch java.lang.Throwable from label23 to label24 with label39;
        catch java.lang.Throwable from label25 to label26 with label39;
        catch java.lang.Throwable from label27 to label28 with label30;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label32 to label33 with label38;
        catch java.lang.Throwable from label35 to label36 with label38;
        catch java.lang.Throwable from label36 to label37 with label46;
        catch java.lang.Throwable from label42 to label43 with label46;
        catch java.lang.Throwable from label43 to label44 with label46;
        catch java.lang.Throwable from label44 to label45 with label46;
        catch java.lang.Exception from label48 to label49 with label50;
        catch java.lang.Exception from label49 to label50 with label50;
    }

    public void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, r2, r4, $r9, $r11, $r13, r18;
        com.android.server.input.PersistentDataStore r3, $r7, $r8, $r12, $r16, $r19, $r20;
        boolean $z0, $z1, $z3, $z4;
        java.lang.SecurityException $r5;
        java.lang.IllegalArgumentException $r6;
        com.android.server.input.InputManagerService$InputManagerHandler $r10;
        java.lang.Throwable $r14, $r15;
        android.hardware.input.InputDeviceIdentifier r17;

        r0 := @this: com.android.server.input.InputManagerService;

        r17 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_KEYBOARD_LAYOUT", "addKeyboardLayoutForInputDevice()");

        if $z0 == 0 goto label15;

        if r1 == null goto label14;

        r2 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r17);

        r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r3;

     label01:
        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = virtualinvoke $r7.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r2);

     label02:
        r18 = r4;

        if r4 != null goto label04;

        r18 = r4;

     label03:
        $r11 = virtualinvoke r17.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label04;

        $r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r13 = virtualinvoke r17.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r18 = virtualinvoke $r12.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>($r13);

     label04:
        $r19 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $z4 = virtualinvoke $r19.<com.android.server.input.PersistentDataStore: boolean addKeyboardLayout(java.lang.String,java.lang.String)>(r2, r1);

        if $z4 == 0 goto label05;

        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r9 = virtualinvoke $r8.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r2);

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r18, $r9);

        if $z1 != 0 goto label05;

        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r10.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(3);

     label05:
        $r20 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r20.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label06:
        exitmonitor r3;

     label07:
        return;

     label08:
        $r15 := @caughtexception;

     label09:
        $r16 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r16.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label10:
        throw $r15;

     label11:
        $r14 := @caughtexception;

     label12:
        exitmonitor r3;

     label13:
        throw $r14;

     label14:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r6;

     label15:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_KEYBOARD_LAYOUT permission");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void addPortAssociation(java.lang.String, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.util.Map $r4;
        java.lang.Integer $r5;
        long $l1;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.input.InputManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT", "addPortAssociation()");

        if $z0 == 0 goto label6;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r8);

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mAssociationsLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: java.util.Map mRuntimeAssociations>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5);

        exitmonitor r1;

     label2:
        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeNotifyPortAssociationsChanged(long)>($l1);

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

     label6:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT permission");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean canDispatchToDisplay(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        long $l2;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l2 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeCanDispatchToDisplay(long,int,int)>($l2, i0, i1);

        return $z0;
    }

    public void cancelVibrate(int, android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.util.HashMap $r2;
        java.lang.Throwable $r4;
        android.os.IBinder r5;
        com.android.server.input.InputManagerService$VibratorToken r6;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r5 := @parameter1: android.os.IBinder;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (com.android.server.input.InputManagerService$VibratorToken) $r3;

     label02:
        if r6 == null goto label07;

     label03:
        $i1 = r6.<com.android.server.input.InputManagerService$VibratorToken: int mDeviceId>;

        if $i1 == i0 goto label05;

     label04:
        goto label07;

     label05:
        exitmonitor r1;

     label06:
        specialinvoke r0.<com.android.server.input.InputManagerService: void cancelVibrateIfNeeded(com.android.server.input.InputManagerService$VibratorToken)>(r6);

        return;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void disableInputDevice(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        boolean $z0;
        java.lang.SecurityException $r1;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DISABLE_INPUT_DEVICE", "disableInputDevice()");

        if $z0 == 0 goto label1;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeDisableInputDevice(long,int)>($l1, i0);

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_INPUT_DEVICE permission");

        throw $r1;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.input.InputManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        android.content.Context $r3;
        boolean $z0;
        long $l0;
        java.io.FileDescriptor r4;
        java.lang.String r5;

        r0 := @this: com.android.server.input.InputManagerService;

        r4 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, "InputManager", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("INPUT MANAGER (dumpsys input)\n");

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        r5 = staticinvoke <com.android.server.input.InputManagerService: java.lang.String nativeDump(long)>($l0);

        if r5 == null goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r5);

        specialinvoke r0.<com.android.server.input.InputManagerService: void dumpAssociations(java.io.PrintWriter)>(r1);

     label2:
        return;
    }

    public void enableInputDevice(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        boolean $z0;
        java.lang.SecurityException $r1;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DISABLE_INPUT_DEVICE", "enableInputDevice()");

        if $z0 == 0 goto label1;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeEnableInputDevice(long,int)>($l1, i0);

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_INPUT_DEVICE permission");

        throw $r1;
    }

    final boolean filterInputEvent(android.view.InputEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        java.lang.Object r1;
        android.view.IInputFilter r2, $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        android.view.InputEvent r6;

        r0 := @this: com.android.server.input.InputManagerService;

        r6 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter>;

     label02:
        if r2 == null goto label08;

     label03:
        $r3 = r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter>;

        interfaceinvoke $r3.<android.view.IInputFilter: void filterInputEvent(android.view.InputEvent,int)>(r6, i0);

     label04:
        goto label06;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        exitmonitor r1;

     label09:
        virtualinvoke r6.<android.view.InputEvent: void recycle()>();

        return 1;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, r3, $r5, $r7, r10;
        com.android.server.input.PersistentDataStore r2, $r4, $r6;
        boolean $z0;
        java.lang.Throwable $r8;
        android.hardware.input.InputDeviceIdentifier r9;

        r0 := @this: com.android.server.input.InputManagerService;

        r9 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r9);

        r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r3 = virtualinvoke $r4.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r1);

     label2:
        r10 = r3;

        if r3 != null goto label4;

        r10 = r3;

     label3:
        $r5 = virtualinvoke r9.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r7 = virtualinvoke r9.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r10 = virtualinvoke $r6.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>($r7);

     label4:
        exitmonitor r2;

     label5:
        return r10;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, $r5, $r7;
        com.android.server.input.PersistentDataStore r2, $r4, $r6;
        java.lang.String[] r3, r10;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r8;
        android.hardware.input.InputDeviceIdentifier r9;

        r0 := @this: com.android.server.input.InputManagerService;

        r9 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r9);

        r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r3 = virtualinvoke $r4.<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)>(r1);

     label02:
        if r3 == null goto label04;

        r10 = r3;

     label03:
        $i0 = lengthof r3;

        if $i0 != 0 goto label06;

     label04:
        r10 = r3;

     label05:
        $r5 = virtualinvoke r9.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label06;

        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r7 = virtualinvoke r9.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r10 = virtualinvoke $r6.<com.android.server.input.PersistentDataStore: java.lang.String[] getKeyboardLayouts(java.lang.String)>($r7);

     label06:
        exitmonitor r2;

     label07:
        return r10;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.view.InputDevice getInputDevice(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2, i3;
        java.lang.Object r1;
        android.view.InputDevice[] $r2, $r3;
        java.lang.Throwable $r4;
        android.view.InputDevice r5;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        i1 = lengthof $r2;

     label02:
        i3 = 0;

     label03:
        if i3 >= i1 goto label07;

     label04:
        $r3 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        r5 = $r3[i3];

        $i2 = virtualinvoke r5.<android.view.InputDevice: int getId()>();

        if $i2 != i0 goto label06;

        exitmonitor r1;

     label05:
        return r5;

     label06:
        i3 = i3 + 1;

        goto label03;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int[] getInputDeviceIds()
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        int i0, $i1, i2;
        android.view.InputDevice[] $r2, $r3;
        android.view.InputDevice $r4;
        java.lang.Throwable $r5;
        int[] r6;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        i0 = lengthof $r2;

        r6 = newarray (int)[i0];

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

     label04:
        $r3 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        $r4 = $r3[i2];

        $i1 = virtualinvoke $r4.<android.view.InputDevice: int getId()>();

        r6[i2] = $i1;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.view.InputDevice[] getInputDevices()
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.view.InputDevice[] r3;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.input.InputManagerService: android.view.InputDevice[] mInputDevices>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getKeyCodeState(int, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i4;
        long $l3;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = staticinvoke <com.android.server.input.InputManagerService: int nativeGetKeyCodeState(long,int,int,int)>($l3, i0, i1, i2);

        return $i4;
    }

    public android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, $r12;
        android.hardware.input.KeyboardLayout[] r2;
        java.lang.IllegalArgumentException $r4;
        com.android.server.input.InputManagerService$8 $r5;
        android.hardware.input.KeyboardLayout $r6, $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label2;

        r2 = newarray (android.hardware.input.KeyboardLayout)[1];

        $r5 = new com.android.server.input.InputManagerService$8;

        specialinvoke $r5.<com.android.server.input.InputManagerService$8: void <init>(com.android.server.input.InputManagerService,android.hardware.input.KeyboardLayout[])>(r0, r2);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitKeyboardLayout(java.lang.String,com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>(r1, $r5);

        $r6 = r2[0];

        if $r6 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get keyboard layout with descriptor \'");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("InputManager", $r12);

     label1:
        $r7 = r2[0];

        return $r7;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r4;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayouts()
    {
        com.android.server.input.InputManagerService r0;
        java.util.ArrayList $r2;
        com.android.server.input.InputManagerService$6 $r3;
        int $i0;
        android.hardware.input.KeyboardLayout[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new com.android.server.input.InputManagerService$6;

        specialinvoke $r3.<com.android.server.input.InputManagerService$6: void <init>(com.android.server.input.InputManagerService,java.util.ArrayList)>(r0, $r2);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>($r3);

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r4 = newarray (android.hardware.input.KeyboardLayout)[$i0];

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (android.hardware.input.KeyboardLayout[]) $r5;

        return $r6;
    }

    public android.hardware.input.KeyboardLayout[] getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String[] r1;
        int i0, i1, $i2, $i3, $i4, i5;
        java.util.ArrayList $r4, $r5;
        com.android.server.input.InputManagerService$7 $r6;
        java.lang.Object $r8;
        android.hardware.input.KeyboardLayout $r9;
        android.hardware.input.InputDeviceIdentifier r10;
        android.hardware.input.KeyboardLayout[] r11;

        r0 := @this: com.android.server.input.InputManagerService;

        r10 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 = virtualinvoke r0.<com.android.server.input.InputManagerService: java.lang.String[] getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)>(r10);

        $r4 = new java.util.ArrayList;

        $i2 = lengthof r1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new com.android.server.input.InputManagerService$7;

        specialinvoke $r6.<com.android.server.input.InputManagerService$7: void <init>(com.android.server.input.InputManagerService,java.lang.String[],java.util.ArrayList,android.hardware.input.InputDeviceIdentifier,java.util.ArrayList)>(r0, r1, $r4, r10, $r5);

        specialinvoke r0.<com.android.server.input.InputManagerService: void visitAllKeyboardLayouts(com.android.server.input.InputManagerService$KeyboardLayoutVisitor)>($r6);

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i3 = i0 + i1;

        r11 = newarray (android.hardware.input.KeyboardLayout)[$i3];

        virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r11);

        i5 = 0;

     label1:
        if i5 >= i1 goto label2;

        $i4 = i0 + i5;

        $r8 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r9 = (android.hardware.input.KeyboardLayout) $r8;

        r11[$i4] = $r9;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r11;
    }

    public int getScanCodeState(int, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i4;
        long $l3;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = staticinvoke <com.android.server.input.InputManagerService: int nativeGetScanCodeState(long,int,int,int)>($l3, i0, i1, i2);

        return $i4;
    }

    public int getSwitchState(int, int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i4;
        long $l3;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $l3 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = staticinvoke <com.android.server.input.InputManagerService: int nativeGetSwitchState(long,int,int,int)>($l3, i0, i1, i2);

        return $i4;
    }

    public android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        com.android.server.input.PersistentDataStore r1, $r3;
        java.lang.IllegalArgumentException $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;
        android.hardware.input.TouchCalibration r6;

        r0 := @this: com.android.server.input.InputManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r5 == null goto label6;

        r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r6 = virtualinvoke $r3.<com.android.server.input.PersistentDataStore: android.hardware.input.TouchCalibration getTouchCalibration(java.lang.String,int)>(r5, i0);

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean hasKeys(int, int, int[], boolean[])
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, $i2, $i3;
        int[] r1;
        boolean[] r2;
        java.lang.IllegalArgumentException $r3, $r4;
        long $l4;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: boolean[];

        if r1 == null goto label2;

        if r2 == null goto label1;

        $i3 = lengthof r2;

        $i2 = lengthof r1;

        if $i3 < $i2 goto label1;

        $l4 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeHasKeys(long,int,int,int[],boolean[])>($l4, i0, i1, r1, r2);

        return $z0;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyExists must not be null and must be at least as large as keyCodes.");

        throw $r4;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyCodes must not be null.");

        throw $r3;
    }

    public boolean injectInputEvent(android.view.InputEvent, int)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputEvent;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean injectInputEventInternal(android.view.InputEvent,int)>(r1, i0);

        return $z0;
    }

    public int isInTabletMode()
    {
        com.android.server.input.InputManagerService r0;
        boolean $z0;
        java.lang.SecurityException $r1;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.TABLET_MODE", "isInTabletMode()");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>(-1, -256, 1);

        return $i0;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TABLET_MODE permission");

        throw $r1;
    }

    public boolean isInputDeviceEnabled(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeIsInputDeviceEnabled(long,int)>($l1, i0);

        return $z0;
    }

    public int isMicMuted()
    {
        com.android.server.input.InputManagerService r0;
        int $i0;

        r0 := @this: com.android.server.input.InputManagerService;

        $i0 = virtualinvoke r0.<com.android.server.input.InputManagerService: int getSwitchState(int,int,int)>(-1, -256, 14);

        return $i0;
    }

    public void monitor()
    {
        com.android.server.input.InputManagerService r0;
        long $l0;
        java.lang.Throwable $r1, $r2;
        java.lang.Object r3, r4;

        r0 := @this: com.android.server.input.InputManagerService;

        r3 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock>;

        entermonitor r3;

     label01:
        exitmonitor r3;

     label02:
        r4 = r0.<com.android.server.input.InputManagerService: java.lang.Object mAssociationsLock>;

        entermonitor r4;

     label03:
        exitmonitor r4;

     label04:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeMonitor(long)>($l0);

        return;

     label05:
        $r1 := @caughtexception;

     label06:
        exitmonitor r4;

     label07:
        throw $r1;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.view.InputMonitor monitorGestureInput(java.lang.String, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long l1, $l2;
        android.view.InputChannel[] r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.IllegalArgumentException $r4;
        android.view.InputChannel $r5, $r6, $r8;
        android.view.InputMonitor $r7;
        java.lang.Throwable $r9;
        java.lang.String r10;
        com.android.server.input.InputManagerService$InputMonitorHost r11;

        r0 := @this: com.android.server.input.InputManagerService;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MONITOR_INPUT", "monitorInputRegion()");

        if $z0 == 0 goto label5;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "inputChannelName must not be null.");

        if i0 < 0 goto label4;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = staticinvoke <android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>(r10);

        r11 = new com.android.server.input.InputManagerService$InputMonitorHost;

        $r5 = r1[0];

        specialinvoke r11.<com.android.server.input.InputManagerService$InputMonitorHost: void <init>(com.android.server.input.InputManagerService,android.view.InputChannel)>(r0, $r5);

        $l2 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $r6 = r1[0];

        staticinvoke <com.android.server.input.InputManagerService: void nativeRegisterInputMonitor(long,android.view.InputChannel,int,boolean)>($l2, $r6, i0, 1);

        $r7 = new android.view.InputMonitor;

        $r8 = r1[1];

        specialinvoke $r7.<android.view.InputMonitor: void <init>(android.view.InputChannel,android.view.IInputMonitorHost)>($r8, r11);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return $r7;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r9;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayId must >= 0.");

        throw $r4;

     label5:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MONITOR_INPUT permission");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.view.InputChannel monitorInput(java.lang.String, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        java.lang.IllegalArgumentException $r1, $r2;
        android.view.InputChannel $r3, $r4, $r5;
        long $l1;
        java.lang.String r6;
        android.view.InputChannel[] r7;

        r0 := @this: com.android.server.input.InputManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r6 == null goto label2;

        if i0 < 0 goto label1;

        r7 = staticinvoke <android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>(r6);

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $r3 = r7[0];

        staticinvoke <com.android.server.input.InputManagerService: void nativeRegisterInputMonitor(long,android.view.InputChannel,int,boolean)>($l1, $r3, i0, 0);

        $r4 = r7[0];

        virtualinvoke $r4.<android.view.InputChannel: void dispose()>();

        $r5 = r7[1];

        return $r5;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("displayId must >= 0.");

        throw $r2;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannelName must not be null.");

        throw $r1;
    }

    public void onDisplayRemoved(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeDisplayRemoved(long,int)>($l1, i0);

        return;
    }

    void onVibratorTokenDied(com.android.server.input.InputManagerService$VibratorToken)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        android.os.IBinder $r2;
        java.util.HashMap $r3;
        java.lang.Throwable $r5;
        com.android.server.input.InputManagerService$VibratorToken r6;

        r0 := @this: com.android.server.input.InputManagerService;

        r6 := @parameter0: com.android.server.input.InputManagerService$VibratorToken;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        $r2 = r6.<com.android.server.input.InputManagerService$VibratorToken: android.os.IBinder mToken>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        exitmonitor r1;

     label2:
        specialinvoke r0.<com.android.server.input.InputManagerService: void cancelVibrateIfNeeded(com.android.server.input.InputManagerService$VibratorToken)>(r6);

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerInputChannel(android.view.InputChannel)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputChannel r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputChannel;

        if r1 == null goto label1;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeRegisterInputChannel(long,android.view.InputChannel)>($l0, r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannel must not be null.");

        throw $r2;
    }

    public void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1, $r4;
        int i0;
        java.lang.IllegalArgumentException $r2;
        android.util.SparseArray $r3, $r6;
        android.os.IBinder $r5;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        android.hardware.input.IInputDevicesChangedListener r9;
        com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord r10;
        java.lang.RuntimeException r12;
        java.lang.SecurityException r13;

        r0 := @this: com.android.server.input.InputManagerService;

        r9 := @parameter0: android.hardware.input.IInputDevicesChangedListener;

        if r9 == null goto label11;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputDevicesLock>;

        entermonitor r1;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r3 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r4 != null goto label07;

        r10 = new com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord;

        specialinvoke r10.<com.android.server.input.InputManagerService$InputDevicesChangedListenerRecord: void <init>(com.android.server.input.InputManagerService,int,android.hardware.input.IInputDevicesChangedListener)>(r0, i0, r9);

     label02:
        $r5 = interfaceinvoke r9.<android.hardware.input.IInputDevicesChangedListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0);

     label03:
        $r6 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mInputDevicesChangedListeners>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r10);

        exitmonitor r1;

     label04:
        return;

     label05:
        $r8 := @caughtexception;

     label06:
        r12 = new java.lang.RuntimeException;

        specialinvoke r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw r12;

     label07:
        r13 = new java.lang.SecurityException;

        specialinvoke r13.<java.lang.SecurityException: void <init>(java.lang.String)>("The calling process has already registered an InputDevicesChangedListener.");

        throw r13;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r7;

     label11:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1, $r5;
        int i0;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.IllegalArgumentException $r3;
        android.util.SparseArray $r4, $r7;
        android.os.IBinder $r6;
        java.lang.Throwable $r8;
        android.os.RemoteException $r9;
        android.hardware.input.ITabletModeChangedListener r10;
        com.android.server.input.InputManagerService$TabletModeChangedListenerRecord r11;
        java.lang.RuntimeException r13;
        java.lang.IllegalStateException r14;

        r0 := @this: com.android.server.input.InputManagerService;

        r10 := @parameter0: android.hardware.input.ITabletModeChangedListener;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.TABLET_MODE", "registerTabletModeChangedListener()");

        if $z0 == 0 goto label12;

        if r10 == null goto label11;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mTabletModeLock>;

        entermonitor r1;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r4 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mTabletModeChangedListeners>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        if $r5 != null goto label07;

        r11 = new com.android.server.input.InputManagerService$TabletModeChangedListenerRecord;

        specialinvoke r11.<com.android.server.input.InputManagerService$TabletModeChangedListenerRecord: void <init>(com.android.server.input.InputManagerService,int,android.hardware.input.ITabletModeChangedListener)>(r0, i0, r10);

     label02:
        $r6 = interfaceinvoke r10.<android.hardware.input.ITabletModeChangedListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r11, 0);

     label03:
        $r7 = r0.<com.android.server.input.InputManagerService: android.util.SparseArray mTabletModeChangedListeners>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11);

        exitmonitor r1;

     label04:
        return;

     label05:
        $r9 := @caughtexception;

     label06:
        r13 = new java.lang.RuntimeException;

        specialinvoke r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw r13;

     label07:
        r14 = new java.lang.IllegalStateException;

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The calling process has already registered a TabletModeChangedListener.");

        throw r14;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r8;

     label11:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listener must not be null");

        throw $r3;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TABLET_MODE_LISTENER permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, r2, r4, $r9, $r12, $r13, $r15, r20, $r22;
        com.android.server.input.PersistentDataStore r3, $r7, $r8, $r11, $r14, $r18, $r21, $r23;
        boolean z0, $z1, $z2, $z4, $z5, z6, $z7;
        java.lang.SecurityException $r5;
        java.lang.IllegalArgumentException $r6;
        com.android.server.input.InputManagerService$InputManagerHandler $r10;
        java.lang.Throwable $r16, $r17;
        android.hardware.input.InputDeviceIdentifier r19;

        r0 := @this: com.android.server.input.InputManagerService;

        r19 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r1 := @parameter1: java.lang.String;

        $z1 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_KEYBOARD_LAYOUT", "removeKeyboardLayoutForInputDevice()");

        if $z1 == 0 goto label19;

        if r1 == null goto label18;

        r2 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r19);

        r3 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r3;

     label01:
        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        r4 = virtualinvoke $r7.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r2);

     label02:
        r20 = r4;

        if r4 != null goto label04;

        r20 = r4;

     label03:
        $r13 = virtualinvoke r19.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z5 != 0 goto label04;

        $r14 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r15 = virtualinvoke r19.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        r20 = virtualinvoke $r14.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>($r15);

     label04:
        $r21 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        z0 = virtualinvoke $r21.<com.android.server.input.PersistentDataStore: boolean removeKeyboardLayout(java.lang.String,java.lang.String)>(r2, r1);

     label05:
        z6 = z0;

     label06:
        $r22 = virtualinvoke r19.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z7 != 0 goto label07;

        $r11 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r12 = virtualinvoke r19.<android.hardware.input.InputDeviceIdentifier: java.lang.String getDescriptor()>();

        $z4 = virtualinvoke $r11.<com.android.server.input.PersistentDataStore: boolean removeKeyboardLayout(java.lang.String,java.lang.String)>($r12, r1);

        z6 = z0 | $z4;

     label07:
        if z6 == 0 goto label09;

     label08:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $r9 = virtualinvoke $r8.<com.android.server.input.PersistentDataStore: java.lang.String getCurrentKeyboardLayout(java.lang.String)>(r2);

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r20, $r9);

        if $z2 != 0 goto label09;

        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r10.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(3);

     label09:
        $r23 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r23.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        $r17 := @caughtexception;

     label13:
        $r18 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r18.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label14:
        throw $r17;

     label15:
        $r16 := @caughtexception;

     label16:
        exitmonitor r3;

     label17:
        throw $r16;

     label18:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r6;

     label19:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_KEYBOARD_LAYOUT permission");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void removePortAssociation(java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.util.Map $r4;
        long $l0;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.input.InputManagerService;

        r7 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT", "clearPortAssociations()");

        if $z0 == 0 goto label6;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mAssociationsLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.input.InputManagerService: java.util.Map mRuntimeAssociations>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7);

        exitmonitor r1;

     label2:
        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeNotifyPortAssociationsChanged(long)>($l0);

        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

     label6:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ASSOCIATE_INPUT_DEVICE_TO_DISPLAY_BY_PORT permission");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void requestPointerCapture(android.os.IBinder, boolean)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1;
        boolean z0, $z1;
        com.android.server.input.InputManagerService$WindowManagerCallbacks $r2;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks>;

        $z1 = interfaceinvoke $r2.<com.android.server.input.InputManagerService$WindowManagerCallbacks: boolean requestPointerCapture(android.os.IBinder,boolean)>(r1, z0);

        if $z1 == 0 goto label1;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetPointerCapture(long,boolean)>($l0, z0);

     label1:
        return;
    }

    public void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.String r1, r11;
        boolean $z0, $z1;
        java.lang.SecurityException $r2;
        java.lang.IllegalArgumentException $r3;
        com.android.server.input.PersistentDataStore $r4, $r5, $r9, r12;
        com.android.server.input.InputManagerService$InputManagerHandler $r6;
        java.lang.Throwable $r7, $r8;
        android.hardware.input.InputDeviceIdentifier r10;

        r0 := @this: com.android.server.input.InputManagerService;

        r10 := @parameter0: android.hardware.input.InputDeviceIdentifier;

        r11 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_KEYBOARD_LAYOUT", "setCurrentKeyboardLayoutForInputDevice()");

        if $z0 == 0 goto label12;

        if r11 == null goto label11;

        r1 = specialinvoke r0.<com.android.server.input.InputManagerService: java.lang.String getLayoutDescriptor(android.hardware.input.InputDeviceIdentifier)>(r10);

        r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r12;

     label01:
        $r4 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $z1 = virtualinvoke $r4.<com.android.server.input.PersistentDataStore: boolean setCurrentKeyboardLayout(java.lang.String,java.lang.String)>(r1, r11);

        if $z1 == 0 goto label02;

        $r6 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r6.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(3);

     label02:
        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r5.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label03:
        exitmonitor r12;

     label04:
        return;

     label05:
        $r8 := @caughtexception;

     label06:
        $r9 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r9.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label07:
        throw $r8;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r12;

     label10:
        throw $r7;

     label11:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyboardLayoutDescriptor must not be null");

        throw $r3;

     label12:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_KEYBOARD_LAYOUT permission");

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setCustomPointerIcon(android.view.PointerIcon)
    {
        com.android.server.input.InputManagerService r0;
        android.view.PointerIcon r1;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.PointerIcon;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetCustomPointerIcon(long,android.view.PointerIcon)>($l0, r1);

        return;
    }

    public void setFocusedApplication(int, android.view.InputApplicationHandle)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        android.view.InputApplicationHandle r1;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.InputApplicationHandle;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetFocusedApplication(long,int,android.view.InputApplicationHandle)>($l1, i0, r1);

        return;
    }

    public void setFocusedDisplay(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetFocusedDisplay(long,int)>($l1, i0);

        return;
    }

    public void setInTouchMode(boolean)
    {
        com.android.server.input.InputManagerService r0;
        boolean z0;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        z0 := @parameter0: boolean;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInTouchMode(long,boolean)>($l0, z0);

        return;
    }

    public void setInputDispatchMode(boolean, boolean)
    {
        com.android.server.input.InputManagerService r0;
        boolean z0, z1;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInputDispatchMode(long,boolean,boolean)>($l0, z0, z1);

        return;
    }

    public void setInputFilter(android.view.IInputFilter)
    {
        com.android.server.input.InputManagerService r0;
        java.lang.Object r1;
        long l0;
        com.android.server.input.InputManagerService$InputFilterHost $r2, r9;
        android.os.RemoteException $r3, $r4;
        java.lang.Throwable $r5;
        android.view.IInputFilter r6, r7;
        boolean z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r6 := @parameter0: android.view.IInputFilter;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mInputFilterLock>;

        entermonitor r1;

     label01:
        r7 = r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter>;

     label02:
        if r7 != r6 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        if r7 == null goto label10;

     label06:
        r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter> = null;

        $r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost>;

        virtualinvoke $r2.<com.android.server.input.InputManagerService$InputFilterHost: void disconnectLocked()>();

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost> = null;

     label07:
        interfaceinvoke r7.<android.view.IInputFilter: void uninstall()>();

     label08:
        goto label10;

     label09:
        $r4 := @caughtexception;

     label10:
        if r6 == null goto label15;

     label11:
        r0.<com.android.server.input.InputManagerService: android.view.IInputFilter mInputFilter> = r6;

        r9 = new com.android.server.input.InputManagerService$InputFilterHost;

        specialinvoke r9.<com.android.server.input.InputManagerService$InputFilterHost: void <init>(com.android.server.input.InputManagerService,com.android.server.input.InputManagerService$1)>(r0, null);

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputFilterHost mInputFilterHost> = r9;

     label12:
        interfaceinvoke r6.<android.view.IInputFilter: void install(android.view.IInputFilterHost)>(r9);

     label13:
        goto label15;

     label14:
        $r3 := @caughtexception;

     label15:
        l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

     label16:
        if r6 == null goto label17;

        z0 = 1;

        goto label18;

     label17:
        z0 = 0;

     label18:
        staticinvoke <com.android.server.input.InputManagerService: void nativeSetInputFilterEnabled(long,boolean)>(l0, z0);

        exitmonitor r1;

     label19:
        return;

     label20:
        $r5 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public void setPointerIconType(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetPointerIconType(long,int)>($l1, i0);

        return;
    }

    public void setSystemUiVisibility(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeSetSystemUiVisibility(long,int)>($l1, i0);

        return;
    }

    public void setTouchCalibrationForInputDevice(java.lang.String, int, android.hardware.input.TouchCalibration)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        android.hardware.input.TouchCalibration r1;
        com.android.server.input.PersistentDataStore r2, $r7, $r8, $r10;
        boolean $z0, $z1;
        java.lang.SecurityException $r3;
        java.lang.IllegalArgumentException $r4, $r5, $r6;
        long $l1;
        java.lang.Throwable $r9, $r11;
        java.lang.String r12;

        r0 := @this: com.android.server.input.InputManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.hardware.input.TouchCalibration;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_INPUT_CALIBRATION", "setTouchCalibrationForInputDevice()");

        if $z0 == 0 goto label14;

        if r12 == null goto label13;

        if r1 == null goto label12;

        if i0 < 0 goto label11;

        if i0 > 3 goto label11;

        r2 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        entermonitor r2;

     label01:
        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        $z1 = virtualinvoke $r7.<com.android.server.input.PersistentDataStore: boolean setTouchCalibration(java.lang.String,int,android.hardware.input.TouchCalibration)>(r12, i0, r1);

        if $z1 == 0 goto label02;

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeReloadCalibration(long)>($l1);

     label02:
        $r8 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r8.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label03:
        exitmonitor r2;

     label04:
        return;

     label05:
        $r9 := @caughtexception;

     label06:
        $r10 = r0.<com.android.server.input.InputManagerService: com.android.server.input.PersistentDataStore mDataStore>;

        virtualinvoke $r10.<com.android.server.input.PersistentDataStore: void saveIfNeeded()>();

     label07:
        throw $r9;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r11;

     label11:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("surfaceRotation value out of bounds");

        throw $r6;

     label12:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("calibration must not be null");

        throw $r5;

     label13:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputDeviceDescriptor must not be null");

        throw $r4;

     label14:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_INPUT_CALIBRATION permission");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setWindowManagerCallbacks(com.android.server.input.InputManagerService$WindowManagerCallbacks)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WindowManagerCallbacks r1;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$WindowManagerCallbacks;

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WindowManagerCallbacks mWindowManagerCallbacks> = r1;

        return;
    }

    public void setWiredAccessoryCallbacks(com.android.server.input.InputManagerService$WiredAccessoryCallbacks)
    {
        com.android.server.input.InputManagerService r0;
        com.android.server.input.InputManagerService$WiredAccessoryCallbacks r1;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: com.android.server.input.InputManagerService$WiredAccessoryCallbacks;

        r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks> = r1;

        return;
    }

    public void start()
    {
        com.android.server.input.InputManagerService r0;
        long $l1;
        com.android.server.Watchdog $r1;
        com.android.server.input.InputManagerService$1 $r2;
        android.content.Context $r3;
        android.content.IntentFilter $r4;
        com.android.server.input.InputManagerService$InputManagerHandler $r5;

        r0 := @this: com.android.server.input.InputManagerService;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("InputManager", "Starting input manager");

        $l1 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeStart(long)>($l1);

        $r1 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r1.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        specialinvoke r0.<com.android.server.input.InputManagerService: void registerPointerSpeedSettingObserver()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void registerShowTouchesSettingObserver()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void registerAccessibilityLargePointerSettingObserver()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void registerLongPressTimeoutObserver()>();

        $r3 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = new com.android.server.input.InputManagerService$1;

        specialinvoke $r2.<com.android.server.input.InputManagerService$1: void <init>(com.android.server.input.InputManagerService)>(r0);

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r5 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r3.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r2, $r4, null, $r5);

        specialinvoke r0.<com.android.server.input.InputManagerService: void updatePointerSpeedFromSettings()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateShowTouchesFromSettings()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateAccessibilityLargePointerFromSettings()>();

        specialinvoke r0.<com.android.server.input.InputManagerService: void updateDeepPressStatusFromSettings(java.lang.String)>("just booted");

        return;
    }

    public void switchKeyboardLayout(int, int)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1;
        com.android.server.input.InputManagerService$InputManagerHandler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.input.InputManagerService$InputManagerHandler: android.os.Message obtainMessage(int,int,int)>(2, i0, i1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void systemRunning()
    {
        com.android.server.input.InputManagerService r0;
        android.content.Context $r1, $r6, $r11;
        java.lang.Object $r2;
        android.app.NotificationManager $r3;
        android.content.IntentFilter $r4, $r9;
        com.android.server.input.InputManagerService$2 $r5;
        com.android.server.input.InputManagerService$InputManagerHandler $r7, $r12, $r14, $r15;
        com.android.server.input.InputManagerService$3 $r10;
        com.android.server.input.InputManagerService$WiredAccessoryCallbacks r18;

        r0 := @this: com.android.server.input.InputManagerService;

        $r1 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r3 = (android.app.NotificationManager) $r2;

        r0.<com.android.server.input.InputManagerService: android.app.NotificationManager mNotificationManager> = $r3;

        r0.<com.android.server.input.InputManagerService: boolean mSystemReady> = 1;

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REPLACED");

        virtualinvoke $r4.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r6 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r5 = new com.android.server.input.InputManagerService$2;

        specialinvoke $r5.<com.android.server.input.InputManagerService$2: void <init>(com.android.server.input.InputManagerService)>(r0);

        $r7 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r6.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r5, $r4, null, $r7);

        $r9 = new android.content.IntentFilter;

        specialinvoke $r9.<android.content.IntentFilter: void <init>(java.lang.String)>("android.bluetooth.device.action.ALIAS_CHANGED");

        $r11 = r0.<com.android.server.input.InputManagerService: android.content.Context mContext>;

        $r10 = new com.android.server.input.InputManagerService$3;

        specialinvoke $r10.<com.android.server.input.InputManagerService$3: void <init>(com.android.server.input.InputManagerService)>(r0);

        $r12 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r11.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r10, $r9, null, $r12);

        $r14 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r14.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(5);

        $r15 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$InputManagerHandler mHandler>;

        virtualinvoke $r15.<com.android.server.input.InputManagerService$InputManagerHandler: boolean sendEmptyMessage(int)>(4);

        r18 = r0.<com.android.server.input.InputManagerService: com.android.server.input.InputManagerService$WiredAccessoryCallbacks mWiredAccessoryCallbacks>;

        if r18 == null goto label1;

        interfaceinvoke r18.<com.android.server.input.InputManagerService$WiredAccessoryCallbacks: void systemReady()>();

     label1:
        return;
    }

    public boolean transferTouchFocus(android.os.IBinder, android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        android.os.IBinder r1, r2;
        long $l0;
        boolean $z2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.IBinder;

        staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: boolean nonNull(java.lang.Object)>(r2);

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $z2 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeTransferTouchFocus(long,android.os.IBinder,android.os.IBinder)>($l0, r1, r2);

        return $z2;
    }

    public boolean transferTouchFocus(android.view.InputChannel, android.view.InputChannel)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputChannel r1, r2;
        long $l0;
        android.os.IBinder $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputChannel;

        r2 := @parameter1: android.view.InputChannel;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $r3 = virtualinvoke r1.<android.view.InputChannel: android.os.IBinder getToken()>();

        $r4 = virtualinvoke r2.<android.view.InputChannel: android.os.IBinder getToken()>();

        $z0 = staticinvoke <com.android.server.input.InputManagerService: boolean nativeTransferTouchFocus(long,android.os.IBinder,android.os.IBinder)>($l0, $r3, $r4);

        return $z0;
    }

    public void tryPointerSpeed(int)
    {
        com.android.server.input.InputManagerService r0;
        int i0;
        boolean $z0;
        java.lang.SecurityException $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.input.InputManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_POINTER_SPEED", "tryPointerSpeed()");

        if $z0 == 0 goto label2;

        if i0 < -7 goto label1;

        if i0 > 7 goto label1;

        specialinvoke r0.<com.android.server.input.InputManagerService: void setPointerSpeedUnchecked(int)>(i0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("speed out of range");

        throw $r2;

     label2:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires SET_POINTER_SPEED permission");

        throw $r1;
    }

    public void unregisterInputChannel(android.view.InputChannel)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputChannel r1;
        java.lang.IllegalArgumentException $r2;
        long $l0;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputChannel;

        if r1 == null goto label1;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeUnregisterInputChannel(long,android.view.InputChannel)>($l0, r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inputChannel must not be null.");

        throw $r2;
    }

    public android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)
    {
        com.android.server.input.InputManagerService r0;
        android.view.InputEvent r1;
        long $l0;
        android.view.VerifiedInputEvent $r2;

        r0 := @this: com.android.server.input.InputManagerService;

        r1 := @parameter0: android.view.InputEvent;

        $l0 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $r2 = staticinvoke <com.android.server.input.InputManagerService: android.view.VerifiedInputEvent nativeVerifyInputEvent(long,android.view.InputEvent)>($l0, r1);

        return $r2;
    }

    public void vibrate(int, long[], int, android.os.IBinder)
    {
        com.android.server.input.InputManagerService r0;
        int i0, i1, i2, $i3, $i4, $i6;
        java.lang.Object r1, $r5;
        com.android.server.input.InputManagerService$VibratorToken r2, r13;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.util.HashMap $r4, $r6;
        long $l5;
        java.lang.Throwable $r8, $r9;
        android.os.RemoteException $r10;
        long[] r11;
        android.os.IBinder r12;
        java.lang.RuntimeException r15;

        r0 := @this: com.android.server.input.InputManagerService;

        i0 := @parameter0: int;

        r11 := @parameter1: long[];

        i1 := @parameter2: int;

        r12 := @parameter3: android.os.IBinder;

        $i3 = lengthof r11;

        if i1 >= $i3 goto label19;

        r1 = r0.<com.android.server.input.InputManagerService: java.lang.Object mVibratorLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12);

        r2 = (com.android.server.input.InputManagerService$VibratorToken) $r5;

     label02:
        r13 = r2;

        if r2 != null goto label09;

     label03:
        r13 = new com.android.server.input.InputManagerService$VibratorToken;

        i2 = r0.<com.android.server.input.InputManagerService: int mNextVibratorTokenValue>;

        $i6 = i2 + 1;

        r0.<com.android.server.input.InputManagerService: int mNextVibratorTokenValue> = $i6;

        specialinvoke r13.<com.android.server.input.InputManagerService$VibratorToken: void <init>(com.android.server.input.InputManagerService,int,android.os.IBinder,int)>(r0, i0, r12, i2);

     label04:
        interfaceinvoke r12.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r13, 0);

     label05:
        $r6 = r0.<com.android.server.input.InputManagerService: java.util.HashMap mVibratorTokens>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r13);

     label06:
        goto label09;

     label07:
        $r10 := @caughtexception;

     label08:
        r15 = new java.lang.RuntimeException;

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw r15;

     label09:
        exitmonitor r1;

     label10:
        entermonitor r13;

     label11:
        r13.<com.android.server.input.InputManagerService$VibratorToken: boolean mVibrating> = 1;

        $l5 = r0.<com.android.server.input.InputManagerService: long mPtr>;

        $i4 = r13.<com.android.server.input.InputManagerService$VibratorToken: int mTokenValue>;

        staticinvoke <com.android.server.input.InputManagerService: void nativeVibrate(long,int,long[],int,int)>($l5, i0, r11, i1, $i4);

        exitmonitor r13;

     label12:
        return;

     label13:
        $r9 := @caughtexception;

     label14:
        exitmonitor r13;

     label15:
        throw $r9;

     label16:
        $r8 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r8;

     label19:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public static void <clinit>()
    {
        <com.android.server.input.InputManagerService: java.lang.String TAG> = "InputManager";

        <com.android.server.input.InputManagerService: int SW_TABLET_MODE_BIT> = 2;

        <com.android.server.input.InputManagerService: int SW_TABLET_MODE> = 1;

        <com.android.server.input.InputManagerService: int SW_MUTE_DEVICE_BIT> = 16384;

        <com.android.server.input.InputManagerService: int SW_MUTE_DEVICE> = 14;

        <com.android.server.input.InputManagerService: int SW_MICROPHONE_INSERT_BIT> = 16;

        <com.android.server.input.InputManagerService: int SW_MICROPHONE_INSERT> = 4;

        <com.android.server.input.InputManagerService: int SW_LINEOUT_INSERT_BIT> = 64;

        <com.android.server.input.InputManagerService: int SW_LINEOUT_INSERT> = 6;

        <com.android.server.input.InputManagerService: int SW_LID_BIT> = 1;

        <com.android.server.input.InputManagerService: int SW_LID> = 0;

        <com.android.server.input.InputManagerService: int SW_KEYPAD_SLIDE_BIT> = 1024;

        <com.android.server.input.InputManagerService: int SW_KEYPAD_SLIDE> = 10;

        <com.android.server.input.InputManagerService: int SW_JACK_PHYSICAL_INSERT_BIT> = 128;

        <com.android.server.input.InputManagerService: int SW_JACK_PHYSICAL_INSERT> = 7;

        <com.android.server.input.InputManagerService: int SW_JACK_BITS> = 212;

        <com.android.server.input.InputManagerService: int SW_HEADPHONE_INSERT_BIT> = 4;

        <com.android.server.input.InputManagerService: int SW_HEADPHONE_INSERT> = 2;

        <com.android.server.input.InputManagerService: int SW_CAMERA_LENS_COVER_BIT> = 512;

        <com.android.server.input.InputManagerService: int SW_CAMERA_LENS_COVER> = 9;

        <com.android.server.input.InputManagerService: java.lang.String PORT_ASSOCIATIONS_PATH> = "etc/input-port-associations.xml";

        <com.android.server.input.InputManagerService: int MSG_UPDATE_KEYBOARD_LAYOUTS> = 4;

        <com.android.server.input.InputManagerService: int MSG_SWITCH_KEYBOARD_LAYOUT> = 2;

        <com.android.server.input.InputManagerService: int MSG_RELOAD_KEYBOARD_LAYOUTS> = 3;

        <com.android.server.input.InputManagerService: int MSG_RELOAD_DEVICE_ALIASES> = 5;

        <com.android.server.input.InputManagerService: int MSG_DELIVER_TABLET_MODE_CHANGED> = 6;

        <com.android.server.input.InputManagerService: int MSG_DELIVER_INPUT_DEVICES_CHANGED> = 1;

        <com.android.server.input.InputManagerService: int KEY_STATE_VIRTUAL> = 2;

        <com.android.server.input.InputManagerService: int KEY_STATE_UP> = 0;

        <com.android.server.input.InputManagerService: int KEY_STATE_UNKNOWN> = -1;

        <com.android.server.input.InputManagerService: int KEY_STATE_DOWN> = 1;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_TIMED_OUT> = 3;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_SUCCEEDED> = 0;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_PERMISSION_DENIED> = 1;

        <com.android.server.input.InputManagerService: int INPUT_EVENT_INJECTION_FAILED> = 2;

        <com.android.server.input.InputManagerService: int INJECTION_TIMEOUT_MILLIS> = 30000;

        <com.android.server.input.InputManagerService: java.lang.String EXCLUDED_DEVICES_PATH> = "etc/excluded-input-devices.xml";

        <com.android.server.input.InputManagerService: java.lang.String DEEP_PRESS_ENABLED> = "deep_press_enabled";

        <com.android.server.input.InputManagerService: boolean DEBUG> = 0;

        <com.android.server.input.InputManagerService: int BTN_MOUSE> = 272;

        return;
    }
}
