final class com.android.server.input.PersistentDataStore extends java.lang.Object
{
    static final java.lang.String TAG;
    private final android.util.AtomicFile mAtomicFile;
    private boolean mDirty;
    private final java.util.HashMap mInputDevices;
    private boolean mLoaded;

    public void <init>()
    {
        com.android.server.input.PersistentDataStore r0;
        java.util.HashMap $r1;
        android.util.AtomicFile $r2;
        java.io.File $r3;

        r0 := @this: com.android.server.input.PersistentDataStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices> = $r1;

        $r2 = new android.util.AtomicFile;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/data/system/input-manager-state.xml");

        specialinvoke $r2.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r3, "input-state");

        r0.<com.android.server.input.PersistentDataStore: android.util.AtomicFile mAtomicFile> = $r2;

        return;
    }

    private void clearState()
    {
        com.android.server.input.PersistentDataStore r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.input.PersistentDataStore;

        $r1 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    private com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String, boolean)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String r1;
        boolean z0;
        com.android.server.input.PersistentDataStore$InputDeviceState r2, $r5, r8;
        java.util.HashMap $r3, $r6;
        java.lang.Object $r4;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void loadIfNeeded()>();

        $r3 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.input.PersistentDataStore$InputDeviceState) $r4;

        r8 = r2;

        if r2 != null goto label1;

        r8 = r2;

        if z0 == 0 goto label1;

        $r5 = new com.android.server.input.PersistentDataStore$InputDeviceState;

        specialinvoke $r5.<com.android.server.input.PersistentDataStore$InputDeviceState: void <init>(com.android.server.input.PersistentDataStore$1)>(null);

        r8 = $r5;

        $r6 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

     label1:
        return r8;
    }

    private void load()
    {
        com.android.server.input.PersistentDataStore r0;
        java.io.BufferedInputStream r1;
        android.util.AtomicFile $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8;
        java.io.FileInputStream r9;
        org.xmlpull.v1.XmlPullParser r10;

        r0 := @this: com.android.server.input.PersistentDataStore;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void clearState()>();

     label01:
        $r2 = r0.<com.android.server.input.PersistentDataStore: android.util.AtomicFile mAtomicFile>;

        r9 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r10 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r1 = new java.io.BufferedInputStream;

        specialinvoke r1.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r9);

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r10.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, $r4);

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void loadFromXml(org.xmlpull.v1.XmlPullParser)>(r10);

     label03:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        goto label11;

     label04:
        $r8 := @caughtexception;

        goto label12;

     label05:
        $r6 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Failed to load input manager persistent store data.", $r6);

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void clearState()>();

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        goto label11;

     label08:
        $r7 := @caughtexception;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Failed to load input manager persistent store data.", $r7);

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void clearState()>();

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

     label11:
        return;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        throw $r8;

     label13:
        $r5 := @caughtexception;

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label13;
        catch java.io.IOException from label02 to label03 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    private void loadFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.input.PersistentDataStore r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "input-manager-state");

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z1 == 0 goto label2;

        $r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("input-devices");

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void loadInputDevicesFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label1;

     label2:
        return;
    }

    private void loadIfNeeded()
    {
        com.android.server.input.PersistentDataStore r0;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        $z0 = r0.<com.android.server.input.PersistentDataStore: boolean mLoaded>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void load()>();

        r0.<com.android.server.input.PersistentDataStore: boolean mLoaded> = 1;

     label1:
        return;
    }

    private void loadInputDevicesFromXml(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.input.PersistentDataStore r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        java.lang.String r2, $r4;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r6, $r9;
        com.android.server.input.PersistentDataStore$InputDeviceState r11;
        org.xmlpull.v1.XmlPullParserException r12, r13;
        java.lang.Throwable r14, r15;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("input-device");

        if $z0 == 0 goto label1;

        r2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "descriptor");

        if r2 == null goto label3;

        $r6 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        r11 = new com.android.server.input.PersistentDataStore$InputDeviceState;

        specialinvoke r11.<com.android.server.input.PersistentDataStore$InputDeviceState: void <init>(com.android.server.input.PersistentDataStore$1)>(null);

        virtualinvoke r11.<com.android.server.input.PersistentDataStore$InputDeviceState: void loadFromXml(org.xmlpull.v1.XmlPullParser)>(r1);

        $r9 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r11);

        goto label1;

     label2:
        r12 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Found duplicate input device.");

        r14 = (java.lang.Throwable) r12;

        throw r14;

     label3:
        r13 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Missing descriptor attribute on input-device.");

        r15 = (java.lang.Throwable) r13;

        throw r15;

     label4:
        return;
    }

    private void save()
    {
        com.android.server.input.PersistentDataStore r0;
        java.io.BufferedOutputStream r1;
        android.util.AtomicFile $r2, $r6, $r9;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        java.lang.Throwable $r7, $r8;
        java.io.FileOutputStream r11;
        com.android.internal.util.FastXmlSerializer r12;

        r0 := @this: com.android.server.input.PersistentDataStore;

     label01:
        $r2 = r0.<com.android.server.input.PersistentDataStore: android.util.AtomicFile mAtomicFile>;

        r11 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r12 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r12.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r1 = new java.io.BufferedOutputStream;

        specialinvoke r1.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r11);

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r12.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, $r4);

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r12);

        interfaceinvoke r12.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label03:
        $r6 = r0.<com.android.server.input.PersistentDataStore: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r6.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r11);

     label04:
        goto label05;

     label05:
        goto label10;

     label06:
        $r8 := @caughtexception;

        goto label07;

     label07:
        $r9 = r0.<com.android.server.input.PersistentDataStore: android.util.AtomicFile mAtomicFile>;

        virtualinvoke $r9.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r11);

     label08:
        throw $r8;

     label09:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputManager", "Failed to save input manager persistent store data.", $r7);

     label10:
        return;

        catch java.io.IOException from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label03 to label04 with label09;
        catch java.io.IOException from label05 to label05 with label09;
        catch java.io.IOException from label07 to label07 with label09;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label08 to label09 with label09;
    }

    private void saveToXml(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.input.PersistentDataStore r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.util.Iterator r2;
        java.lang.String r3;
        java.lang.Boolean $r4;
        java.util.HashMap $r7;
        java.util.Set $r8;
        boolean $z0;
        java.lang.Object $r11, $r12, $r13;
        java.util.Map$Entry r17;
        com.android.server.input.PersistentDataStore$InputDeviceState r18;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "input-manager-state");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "input-devices");

        $r7 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        r3 = (java.lang.String) $r12;

        $r13 = interfaceinvoke r17.<java.util.Map$Entry: java.lang.Object getValue()>();

        r18 = (com.android.server.input.PersistentDataStore$InputDeviceState) $r13;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "input-device");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "descriptor", r3);

        virtualinvoke r18.<com.android.server.input.PersistentDataStore$InputDeviceState: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "input-device");

        goto label1;

     label2:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "input-devices");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "input-manager-state");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        return;
    }

    private void setDirty()
    {
        com.android.server.input.PersistentDataStore r0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r0.<com.android.server.input.PersistentDataStore: boolean mDirty> = 1;

        return;
    }

    public boolean addKeyboardLayout(java.lang.String, java.lang.String)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String r1, r2;
        com.android.server.input.PersistentDataStore$InputDeviceState $r3;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r1, 1);

        $z0 = virtualinvoke $r3.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean addKeyboardLayout(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

        return 1;

     label1:
        return 0;
    }

    public java.lang.String getCurrentKeyboardLayout(java.lang.String)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String r1, r3;
        com.android.server.input.PersistentDataStore$InputDeviceState r2;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r1, 0);

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String getCurrentKeyboardLayout()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public java.lang.String[] getKeyboardLayouts(java.lang.String)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object[] $r2;
        java.lang.String r4;
        com.android.server.input.PersistentDataStore$InputDeviceState r5;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r4 := @parameter0: java.lang.String;

        r5 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r4, 0);

        if r5 != null goto label1;

        $r2 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>(class "Ljava/lang/String;");

        $r3 = (java.lang.String[]) $r2;

        return $r3;

     label1:
        $r1 = virtualinvoke r5.<com.android.server.input.PersistentDataStore$InputDeviceState: java.lang.String[] getKeyboardLayouts()>();

        return $r1;
    }

    public android.hardware.input.TouchCalibration getTouchCalibration(java.lang.String, int)
    {
        com.android.server.input.PersistentDataStore r0;
        int i0;
        android.hardware.input.TouchCalibration $r1, $r2, r5;
        java.lang.String r3;
        com.android.server.input.PersistentDataStore$InputDeviceState r4;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r4 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r3, 0);

        if r4 != null goto label1;

        $r2 = <android.hardware.input.TouchCalibration: android.hardware.input.TouchCalibration IDENTITY>;

        return $r2;

     label1:
        r5 = virtualinvoke r4.<com.android.server.input.PersistentDataStore$InputDeviceState: android.hardware.input.TouchCalibration getTouchCalibration(int)>(i0);

        if r5 != null goto label2;

        $r1 = <android.hardware.input.TouchCalibration: android.hardware.input.TouchCalibration IDENTITY>;

        return $r1;

     label2:
        return r5;
    }

    public boolean removeKeyboardLayout(java.lang.String, java.lang.String)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String r1, r2;
        com.android.server.input.PersistentDataStore$InputDeviceState $r3;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r1, 1);

        $z0 = virtualinvoke $r3.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean removeKeyboardLayout(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

        return 1;

     label1:
        return 0;
    }

    public boolean removeUninstalledKeyboardLayouts(java.util.Set)
    {
        com.android.server.input.PersistentDataStore r0;
        java.util.Set r1;
        java.util.Iterator r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        boolean $z0, $z1, z2;
        java.lang.Object $r5;
        com.android.server.input.PersistentDataStore$InputDeviceState $r6;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.util.Set;

        z2 = 0;

        $r3 = r0.<com.android.server.input.PersistentDataStore: java.util.HashMap mInputDevices>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.input.PersistentDataStore$InputDeviceState) $r5;

        $z1 = virtualinvoke $r6.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean removeUninstalledKeyboardLayouts(java.util.Set)>(r1);

        if $z1 == 0 goto label2;

        z2 = 1;

     label2:
        goto label1;

     label3:
        if z2 == 0 goto label4;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

        return 1;

     label4:
        return 0;
    }

    public void saveIfNeeded()
    {
        com.android.server.input.PersistentDataStore r0;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        $z0 = r0.<com.android.server.input.PersistentDataStore: boolean mDirty>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void save()>();

        r0.<com.android.server.input.PersistentDataStore: boolean mDirty> = 0;

     label1:
        return;
    }

    public boolean setCurrentKeyboardLayout(java.lang.String, java.lang.String)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String r1, r2;
        com.android.server.input.PersistentDataStore$InputDeviceState $r3;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r1, 1);

        $z0 = virtualinvoke $r3.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean setCurrentKeyboardLayout(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

        return 1;

     label1:
        return 0;
    }

    public boolean setTouchCalibration(java.lang.String, int, android.hardware.input.TouchCalibration)
    {
        com.android.server.input.PersistentDataStore r0;
        java.lang.String r1;
        int i0;
        android.hardware.input.TouchCalibration r2;
        com.android.server.input.PersistentDataStore$InputDeviceState $r3;
        boolean $z0;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.hardware.input.TouchCalibration;

        $r3 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r1, 1);

        $z0 = virtualinvoke $r3.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean setTouchCalibration(int,android.hardware.input.TouchCalibration)>(i0, r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

        return 1;

     label1:
        return 0;
    }

    public boolean switchKeyboardLayout(java.lang.String, int)
    {
        com.android.server.input.PersistentDataStore r0;
        int i0;
        boolean $z0;
        java.lang.String r1;
        com.android.server.input.PersistentDataStore$InputDeviceState r2;

        r0 := @this: com.android.server.input.PersistentDataStore;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<com.android.server.input.PersistentDataStore: com.android.server.input.PersistentDataStore$InputDeviceState getInputDeviceState(java.lang.String,boolean)>(r1, 0);

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<com.android.server.input.PersistentDataStore$InputDeviceState: boolean switchKeyboardLayout(int)>(i0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.input.PersistentDataStore: void setDirty()>();

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <com.android.server.input.PersistentDataStore: java.lang.String TAG> = "InputManager";

        return;
    }
}
