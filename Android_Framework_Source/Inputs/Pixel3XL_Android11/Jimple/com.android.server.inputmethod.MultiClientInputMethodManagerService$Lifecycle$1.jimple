class com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 extends com.android.server.inputmethod.InputMethodManagerInternal
{
    final com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle this$0;
    final com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap val$userIdToInputMethodInfoMapper;

    void <init>(com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle, com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle r1;
        com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap r2;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        r1 := @parameter0: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle;

        r2 := @parameter1: com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap;

        r0.<com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle this$0> = r1;

        r0.<com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1: com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap val$userIdToInputMethodInfoMapper> = r2;

        specialinvoke r0.<com.android.server.inputmethod.InputMethodManagerInternal: void <init>()>();

        return;
    }

    public java.util.List getEnabledInputMethodListAsUser(int)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        int i0;
        com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1: com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap val$userIdToInputMethodInfoMapper>;

        $r2 = virtualinvoke $r1.<com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap: java.util.List getAsList(int)>(i0);

        return $r2;
    }

    public java.util.List getInputMethodListAsUser(int)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        int i0;
        com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1: com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap val$userIdToInputMethodInfoMapper>;

        $r2 = virtualinvoke $r1.<com.android.server.inputmethod.MultiClientInputMethodManagerService$UserToInputMethodInfoMap: java.util.List getAsList(int)>(i0);

        return $r2;
    }

    public void hideCurrentInputMethod(int)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        int i0;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        i0 := @parameter0: int;

        staticinvoke <com.android.server.inputmethod.MultiClientInputMethodManagerService: void access$200()>();

        return;
    }

    public void onCreateInlineSuggestionsRequest(int, com.android.internal.view.InlineSuggestionsRequestInfo, com.android.internal.view.IInlineSuggestionsRequestCallback)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        int i0;
        com.android.internal.view.IInlineSuggestionsRequestCallback r1;
        android.os.RemoteException $r2;
        com.android.internal.view.InlineSuggestionsRequestInfo r3;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        i0 := @parameter0: int;

        r3 := @parameter1: com.android.internal.view.InlineSuggestionsRequestInfo;

        r1 := @parameter2: com.android.internal.view.IInlineSuggestionsRequestCallback;

     label1:
        interfaceinvoke r1.<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInlineSuggestionsUnsupported()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("MultiClientInputMethodManagerService", "Failed to call onInlineSuggestionsUnsupported.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerInputMethodListListener(com.android.server.inputmethod.InputMethodManagerInternal$InputMethodListListener)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        com.android.server.inputmethod.InputMethodManagerInternal$InputMethodListListener r1;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        r1 := @parameter0: com.android.server.inputmethod.InputMethodManagerInternal$InputMethodListListener;

        staticinvoke <com.android.server.inputmethod.MultiClientInputMethodManagerService: void access$200()>();

        return;
    }

    public void removeImeSurface()
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        staticinvoke <com.android.server.inputmethod.MultiClientInputMethodManagerService: void access$200()>();

        return;
    }

    public void reportImeControl(android.os.IBinder)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        android.os.IBinder r1;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        r1 := @parameter0: android.os.IBinder;

        return;
    }

    public void setInteractive(boolean)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        boolean z0;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.inputmethod.MultiClientInputMethodManagerService: void access$200()>();

        return;
    }

    public boolean switchToInputMethod(java.lang.String, int)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        staticinvoke <com.android.server.inputmethod.MultiClientInputMethodManagerService: void access$200()>();

        return 0;
    }

    public boolean transferTouchFocusToImeWindow(android.os.IBinder, int)
    {
        com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1 r0;
        android.os.IBinder r1;
        int i0;

        r0 := @this: com.android.server.inputmethod.MultiClientInputMethodManagerService$Lifecycle$1;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        staticinvoke <com.android.server.inputmethod.MultiClientInputMethodManagerService: void access$200()>();

        return 0;
    }
}
