public class com.android.server.integrity.AppIntegrityManagerServiceImpl extends android.content.integrity.IAppIntegrityManager$Stub
{
    public static final java.lang.String ADB_INSTALLER;
    private static final java.lang.String ALLOWED_INSTALLERS_METADATA_NAME;
    private static final java.lang.String ALLOWED_INSTALLER_DELIMITER;
    private static final java.lang.String BASE_APK_FILE;
    public static final boolean DEBUG_INTEGRITY_COMPONENT;
    private static final java.lang.String INSTALLER_PACKAGE_CERT_DELIMITER;
    private static final java.util.Set PACKAGE_INSTALLER;
    private static final java.lang.String PACKAGE_MIME_TYPE;
    private static final java.lang.String TAG;
    private static final java.lang.String UNKNOWN_INSTALLER;
    private final android.content.Context mContext;
    private final com.android.server.integrity.engine.RuleEvaluationEngine mEvaluationEngine;
    private final android.os.Handler mHandler;
    private final com.android.server.integrity.IntegrityFileManager mIntegrityFileManager;
    private final android.content.pm.PackageManagerInternal mPackageManagerInternal;
    private final java.util.function.Supplier mParserSupplier;

    static void <clinit>()
    {
        java.util.HashSet $r0;
        java.lang.String[] $r1;
        java.util.List $r2;

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String UNKNOWN_INSTALLER> = "";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String TAG> = "AppIntegrityManagerServiceImpl";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String PACKAGE_MIME_TYPE> = "application/vnd.android.package-archive";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String INSTALLER_PACKAGE_CERT_DELIMITER> = "\\|";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: boolean DEBUG_INTEGRITY_COMPONENT> = 0;

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String BASE_APK_FILE> = "base.apk";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String ALLOWED_INSTALLER_DELIMITER> = ",";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String ALLOWED_INSTALLERS_METADATA_NAME> = "allowed-installers";

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String ADB_INSTALLER> = "adb";

        $r0 = new java.util.HashSet;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "com.google.android.packageinstaller";

        $r1[1] = "com.android.packageinstaller";

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.Set PACKAGE_INSTALLER> = $r0;

        return;
    }

    void <init>(android.content.Context, android.content.pm.PackageManagerInternal, java.util.function.Supplier, com.android.server.integrity.engine.RuleEvaluationEngine, com.android.server.integrity.IntegrityFileManager, android.os.Handler)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        android.content.pm.PackageManagerInternal r1;
        java.util.function.Supplier r2;
        com.android.server.integrity.engine.RuleEvaluationEngine r3;
        com.android.server.integrity.IntegrityFileManager r4;
        android.os.Handler r5, $r9;
        android.content.IntentFilter $r6;
        com.android.server.integrity.AppIntegrityManagerServiceImpl$1 $r7;
        android.content.Context $r8, r13;
        android.content.IntentFilter$MalformedMimeTypeException $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r13 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.pm.PackageManagerInternal;

        r2 := @parameter2: java.util.function.Supplier;

        r3 := @parameter3: com.android.server.integrity.engine.RuleEvaluationEngine;

        r4 := @parameter4: com.android.server.integrity.IntegrityFileManager;

        r5 := @parameter5: android.os.Handler;

        specialinvoke r0.<android.content.integrity.IAppIntegrityManager$Stub: void <init>()>();

        r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext> = r13;

        r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageManagerInternal mPackageManagerInternal> = r1;

        r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.function.Supplier mParserSupplier> = r2;

        r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.engine.RuleEvaluationEngine mEvaluationEngine> = r3;

        r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.IntegrityFileManager mIntegrityFileManager> = r4;

        r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.os.Handler mHandler> = r5;

        $r6 = new android.content.IntentFilter;

        specialinvoke $r6.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r6.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_NEEDS_INTEGRITY_VERIFICATION");

     label1:
        virtualinvoke $r6.<android.content.IntentFilter: void addDataType(java.lang.String)>("application/vnd.android.package-archive");

     label2:
        $r8 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r7 = new com.android.server.integrity.AppIntegrityManagerServiceImpl$1;

        specialinvoke $r7.<com.android.server.integrity.AppIntegrityManagerServiceImpl$1: void <init>(com.android.server.integrity.AppIntegrityManagerServiceImpl)>(r0);

        $r9 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r7, $r6, null, $r9);

        return;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Mime type malformed: should never happen.", $r11);

        throw $r12;

        catch android.content.IntentFilter$MalformedMimeTypeException from label1 to label2 with label3;
    }

    static android.os.Handler access$000(com.android.server.integrity.AppIntegrityManagerServiceImpl)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $r1 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.os.Handler mHandler>;

        return $r1;
    }

    static void access$100(com.android.server.integrity.AppIntegrityManagerServiceImpl, android.content.Intent)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: void handleIntegrityVerification(android.content.Intent)>(r1);

        return;
    }

    public static com.android.server.integrity.AppIntegrityManagerServiceImpl create(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r4;
        android.content.pm.PackageManagerInternal $r5;
        com.android.server.integrity.'-$$Lambda$6mVxeiJkzyLjahsCCu7FkV8cQDo' $r6;
        com.android.server.integrity.engine.RuleEvaluationEngine $r7;
        com.android.server.integrity.IntegrityFileManager $r8;
        android.os.Handler $r9;
        android.os.HandlerThread r10;
        com.android.server.integrity.AppIntegrityManagerServiceImpl r11;
        java.util.function.Supplier r12;

        r0 := @parameter0: android.content.Context;

        r10 = new android.os.HandlerThread;

        specialinvoke r10.<android.os.HandlerThread: void <init>(java.lang.String)>("AppIntegrityManagerServiceHandler");

        virtualinvoke r10.<android.os.HandlerThread: void start()>();

        r11 = new com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r5 = (android.content.pm.PackageManagerInternal) $r4;

        $r6 = <com.android.server.integrity._$$Lambda$6mVxeiJkzyLjahsCCu7FkV8cQDo: com.android.server.integrity.'-$$Lambda$6mVxeiJkzyLjahsCCu7FkV8cQDo' INSTANCE>;

        $r7 = staticinvoke <com.android.server.integrity.engine.RuleEvaluationEngine: com.android.server.integrity.engine.RuleEvaluationEngine getRuleEvaluationEngine()>();

        $r8 = staticinvoke <com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.IntegrityFileManager getInstance()>();

        $r9 = virtualinvoke r10.<android.os.HandlerThread: android.os.Handler getThreadHandler()>();

        r12 = (java.util.function.Supplier) $r6;

        specialinvoke r11.<com.android.server.integrity.AppIntegrityManagerServiceImpl: void <init>(android.content.Context,android.content.pm.PackageManagerInternal,java.util.function.Supplier,com.android.server.integrity.engine.RuleEvaluationEngine,com.android.server.integrity.IntegrityFileManager,android.os.Handler)>(r0, $r5, r12, $r7, $r8, $r9);

        return r11;
    }

    private void extractSourceStamp(android.net.Uri, android.content.integrity.AppInstallMetadata$Builder)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.util.stream.Stream r1, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r3, $r11;
        java.security.cert.Certificate $r7;
        java.security.MessageDigest $r8;
        byte[] $r9, $r10;
        java.nio.file.Path $r13;
        com.android.server.integrity.'-$$Lambda$AppIntegrityManagerServiceImpl$ct2NSvc_tnI1IXBlQD5h7WqKow4' $r14;
        java.util.stream.Collector $r16;
        java.lang.Object $r17;
        java.util.List $r18;
        java.lang.Throwable $r19, $r20, $r22, $r24;
        android.net.Uri r25;
        android.content.integrity.AppInstallMetadata$Builder r26;
        java.io.File r27;
        android.util.apk.SourceStampVerificationResult r28;
        java.security.cert.X509Certificate r32;
        java.lang.IllegalArgumentException r34, r35, r36;
        java.util.function.Function r37;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r25 := @parameter0: android.net.Uri;

        r26 := @parameter1: android.content.integrity.AppInstallMetadata$Builder;

        r27 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.io.File getInstallationPath(android.net.Uri)>(r25);

        if r27 == null goto label19;

        $z0 = virtualinvoke r27.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label13;

     label01:
        $r13 = virtualinvoke r27.<java.io.File: java.nio.file.Path toPath()>();

        r1 = staticinvoke <java.nio.file.Files: java.util.stream.Stream list(java.nio.file.Path)>($r13);

     label02:
        $r14 = <com.android.server.integrity._$$Lambda$AppIntegrityManagerServiceImpl$ct2NSvc_tnI1IXBlQD5h7WqKow4: com.android.server.integrity.'-$$Lambda$AppIntegrityManagerServiceImpl$ct2NSvc_tnI1IXBlQD5h7WqKow4' INSTANCE>;

        r37 = (java.util.function.Function) $r14;

        $r15 = interfaceinvoke r1.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r37);

        $r16 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r17 = interfaceinvoke $r15.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r16);

        $r18 = (java.util.List) $r17;

        r28 = staticinvoke <android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(java.util.List)>($r18);

     label03:
        if r1 == null goto label05;

     label04:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label05:
        goto label14;

     label06:
        $r19 := @caughtexception;

        if r1 == null goto label11;

     label07:
        interfaceinvoke r1.<java.util.stream.Stream: void close()>();

     label08:
        goto label11;

     label09:
        $r24 := @caughtexception;

     label10:
        virtualinvoke $r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r24);

     label11:
        throw $r19;

     label12:
        $r22 := @caughtexception;

        r34 = new java.lang.IllegalArgumentException;

        specialinvoke r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not read APK directory");

        throw r34;

     label13:
        $r3 = virtualinvoke r27.<java.io.File: java.lang.String getAbsolutePath()>();

        r28 = staticinvoke <android.util.apk.SourceStampVerifier: android.util.apk.SourceStampVerificationResult verify(java.lang.String)>($r3);

     label14:
        $z1 = virtualinvoke r28.<android.util.apk.SourceStampVerificationResult: boolean isPresent()>();

        virtualinvoke r26.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setIsStampPresent(boolean)>($z1);

        $z2 = virtualinvoke r28.<android.util.apk.SourceStampVerificationResult: boolean isVerified()>();

        virtualinvoke r26.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setIsStampVerified(boolean)>($z2);

        $z3 = virtualinvoke r28.<android.util.apk.SourceStampVerificationResult: boolean isVerified()>();

        virtualinvoke r26.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setIsStampTrusted(boolean)>($z3);

        $z4 = virtualinvoke r28.<android.util.apk.SourceStampVerificationResult: boolean isVerified()>();

        if $z4 == 0 goto label18;

        $r7 = virtualinvoke r28.<android.util.apk.SourceStampVerificationResult: java.security.cert.Certificate getCertificate()>();

        r32 = (java.security.cert.X509Certificate) $r7;

     label15:
        $r8 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r9 = virtualinvoke r32.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r10 = virtualinvoke $r8.<java.security.MessageDigest: byte[] digest(byte[])>($r9);

        $r11 = staticinvoke <android.content.integrity.IntegrityUtils: java.lang.String getHexDigest(byte[])>($r10);

        virtualinvoke r26.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setStampCertificateHash(java.lang.String)>($r11);

     label16:
        goto label18;

     label17:
        $r20 := @caughtexception;

        r35 = new java.lang.IllegalArgumentException;

        specialinvoke r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error computing source stamp certificate digest", $r20);

        throw r35;

     label18:
        return;

     label19:
        r36 = new java.lang.IllegalArgumentException;

        specialinvoke r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Installation path is null, package not found");

        throw r36;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label17;
        catch java.security.cert.CertificateEncodingException from label15 to label16 with label17;
    }

    private java.util.Map getAllowedInstallers(android.content.pm.PackageInfo)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int i0, $i1, $i2, i3;
        java.util.HashMap $r2;
        android.content.pm.ApplicationInfo $r3, $r4, $r6;
        android.os.Bundle $r5, $r7;
        java.lang.String $r8, $r9, $r11, $r12, $r13, r16, r18;
        android.content.pm.PackageInfo r15;
        java.lang.String[] r17, r19;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r15 := @parameter0: android.content.pm.PackageInfo;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r3 = r15.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r3 == null goto label4;

        $r4 = r15.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = $r4.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        if $r5 == null goto label4;

        $r6 = r15.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r7 = $r6.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        r16 = virtualinvoke $r7.<android.os.Bundle: java.lang.String getString(java.lang.String)>("allowed-installers");

        if r16 == null goto label4;

        r17 = virtualinvoke r16.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r17;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r18 = r17[i3];

        r19 = virtualinvoke r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        $i1 = lengthof r19;

        if $i1 != 2 goto label2;

        $r11 = r19[0];

        $r12 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getPackageNameNormalized(java.lang.String)>($r11);

        $r13 = r19[1];

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        goto label3;

     label2:
        $i2 = lengthof r19;

        if $i2 != 1 goto label3;

        $r8 = r19[0];

        $r9 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getPackageNameNormalized(java.lang.String)>($r8);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, "");

        goto label3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return $r2;
    }

    private java.util.List getAllowedRuleProviderSystemApps()
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.util.Iterator r2;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        java.lang.String[] $r5;
        java.util.ArrayList $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        java.util.List r8;
        java.lang.String r9;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $r3 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236043);

        r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r7;

        $z1 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: boolean isSystemApp(java.lang.String)>(r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r9);

     label2:
        goto label1;

     label3:
        return $r6;
    }

    private java.lang.String getCallerPackageNameOrThrow(int)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int i0;
        java.lang.String r1;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCallingRulePusherPackageName(int)>(i0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Only system packages specified in config_integrityRuleProviderPackages are allowed to call this method.");

        throw $r2;
    }

    private java.lang.String getCallingRulePusherPackageName(int)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int i0;
        java.lang.String r2, r9;
        java.util.ArrayList $r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4, $r5;
        java.util.List r6, r7;
        java.util.Iterator r8;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        i0 := @parameter0: int;

        r6 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getAllowedRuleProviderSystemApps()>();

        r7 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getPackageListForUid(int)>(i0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r5;

        $z2 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label2:
        goto label1;

     label3:
        $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        r9 = null;

        goto label5;

     label4:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r9 = (java.lang.String) $r4;

     label5:
        return r9;
    }

    private java.util.List getCertificateFingerprint(android.content.pm.PackageInfo)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int i0, i1;
        java.util.ArrayList $r2;
        android.content.pm.Signature $r3;
        java.lang.String $r4;
        android.content.pm.PackageInfo r5;
        android.content.pm.Signature[] r6;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r5 := @parameter0: android.content.pm.PackageInfo;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r6 = staticinvoke <com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.Signature[] getSignatures(android.content.pm.PackageInfo)>(r5);

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r6[i1];

        $r4 = staticinvoke <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getFingerprint(android.content.pm.Signature)>($r3);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r2;
    }

    private static java.lang.String getFingerprint(android.content.pm.Signature)
    {
        java.security.cert.CertificateFactory r1;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3, $r6, $r7;
        java.lang.RuntimeException $r4, $r10, $r12;
        java.security.MessageDigest $r5;
        java.security.cert.Certificate $r8;
        java.lang.Throwable $r9, $r11, $r13;
        java.lang.IllegalArgumentException $r14;
        android.content.pm.Signature r15;
        java.security.cert.X509Certificate r16;
        java.lang.String r18;

        r15 := @parameter0: android.content.pm.Signature;

        $r2 = new java.io.ByteArrayInputStream;

        $r3 = virtualinvoke r15.<android.content.pm.Signature: byte[] toByteArray()>();

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

     label01:
        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X509");

     label02:
        r16 = null;

        if r1 == null goto label06;

     label03:
        $r8 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r2);

        r16 = (java.security.cert.X509Certificate) $r8;

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error getting X509Certificate", $r11);

        throw $r12;

     label06:
        if r16 == null goto label10;

     label07:
        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r6 = virtualinvoke r16.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r7 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>($r6);

        r18 = staticinvoke <android.content.integrity.IntegrityUtils: java.lang.String getHexDigest(byte[])>($r7);

     label08:
        return r18;

     label09:
        $r13 := @caughtexception;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Error error computing fingerprint", $r13);

        throw $r14;

     label10:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("X509 Certificate not found");

        throw $r4;

     label11:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error getting CertificateFactory", $r9);

        throw $r10;

        catch java.security.cert.CertificateException from label01 to label02 with label11;
        catch java.security.cert.CertificateException from label03 to label04 with label05;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
        catch java.security.cert.CertificateEncodingException from label07 to label08 with label09;
    }

    private java.io.File getInstallationPath(android.net.Uri)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        android.net.Uri r1;
        java.lang.IllegalArgumentException $r2, $r8, $r15, $r20;
        java.lang.String $r3, $r4, $r9, $r11, $r16, $r21;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5, $r12, $r17;
        java.io.File $r10;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r1 := @parameter0: android.net.Uri;

        if r1 == null goto label4;

        $r3 = "file";

        $r4 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label3;

        $r10 = new java.io.File;

        $r11 = virtualinvoke r1.<android.net.Uri: java.lang.String getPath()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        $z1 = virtualinvoke $r10.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke $r10.<java.io.File: boolean canRead()>();

        if $z2 == 0 goto label1;

        return $r10;

     label1:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file for ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find file for ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported scheme for ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null data uri");

        throw $r2;
    }

    private java.util.List getInstallerCertificateFingerprint(java.lang.String)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.lang.String r1, $r11;
        boolean $z0, $z1;
        java.util.List $r2, $r12, r13;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        android.content.pm.PackageInfo $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.StringBuilder $r7;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("adb");

        if $z0 != 0 goto label4;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 == 0 goto label1;

        goto label4;

     label1:
        $r3 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r1, 134217728);

        r13 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getCertificateFingerprint(android.content.pm.PackageInfo)>($r5);

     label2:
        return r13;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installer package ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", $r11);

        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

     label4:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private java.lang.String getInstallerPackageName(android.content.Intent)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.lang.String r1, $r5, $r9, $r15;
        java.util.List $r2, r18;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6, $r10;
        android.content.Intent r16;
        int i3, i4;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r16 := @parameter0: android.content.Intent;

        r1 = virtualinvoke r16.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android.content.pm.extra.VERIFICATION_INSTALLER_PACKAGE");

        if r1 != null goto label1;

        return "adb";

     label1:
        i3 = virtualinvoke r16.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_INSTALLER_UID", -1);

        if i3 >= 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installer cannot be determined: installer: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" installer UID: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", $r15);

        return "";

     label2:
        $r2 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getPackageListForUid(int)>(i3);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        return "";

     label3:
        $r3 = <com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.Set PACKAGE_INSTALLER>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label6;

        i4 = virtualinvoke r16.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.ORIGINATING_UID", -1);

        if i4 >= 0 goto label4;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", "Installer is package installer but originating UID not found.");

        return "";

     label4:
        r18 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getPackageListForUid(int)>(i4);

        $z2 = interfaceinvoke r18.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package found associated with originating UID ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", $r9);

        return "";

     label5:
        $r4 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label6:
        return r1;
    }

    private android.content.pm.PackageInfo getMultiApkInfo(java.io.File)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.io.File[] r1;
        int i0, i3;
        java.io.File $r3, r20, r25;
        android.content.Context $r4, $r8;
        android.content.pm.PackageManager $r5, $r9;
        java.lang.String $r6, $r10, $r14, $r19;
        java.lang.IllegalArgumentException $r7;
        boolean $z0;
        java.lang.StringBuilder $r11, $r16;
        java.lang.Exception $r15;
        android.content.pm.PackageInfo r22, r23, r24, r26, r27;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r20 := @parameter0: java.io.File;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r20, "base.apk");

        $r4 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r22 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>($r6, 134217856);

        r23 = r22;

        if r22 != null goto label7;

        r1 = virtualinvoke r20.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r1;

        i3 = 0;

        r24 = r22;

     label1:
        r23 = r24;

        if i3 >= i0 goto label7;

        r25 = r1[i3];

        $z0 = virtualinvoke r25.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        r26 = r24;

        goto label6;

     label2:
        $r8 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r10 = virtualinvoke r25.<java.io.File: java.lang.String getAbsolutePath()>();

        r27 = virtualinvoke $r9.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>($r10, 134217856);

     label3:
        r24 = r27;

        goto label5;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception reading ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", $r19, $r15);

     label5:
        r26 = r24;

        if r24 == null goto label6;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found package info from ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", $r14);

        r23 = r24;

        goto label7;

     label6:
        i3 = i3 + 1;

        r24 = r26;

        goto label1;

     label7:
        if r23 == null goto label8;

        return r23;

     label8:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Base package info cannot be found from installation directory");

        throw $r7;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private android.content.pm.PackageInfo getPackageArchiveInfo(android.net.Uri)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        android.net.Uri r1;
        android.content.pm.PackageUserState r2;
        java.lang.IllegalArgumentException $r3;
        java.util.function.Supplier $r4;
        java.lang.Object $r5;
        android.content.pm.PackageParser$SigningDetails $r6;
        int $i0;
        java.lang.Throwable $r8, $r14;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r13;
        java.io.File r15;
        com.android.server.pm.parsing.PackageParser2 r16;
        com.android.server.pm.parsing.pkg.ParsedPackage r17;
        android.content.pm.PackageInfo r18;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r1 := @parameter0: android.net.Uri;

        r15 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.io.File getInstallationPath(android.net.Uri)>(r1);

        if r15 == null goto label13;

     label01:
        $r4 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.function.Supplier mParserSupplier>;

        $r5 = interfaceinvoke $r4.<java.util.function.Supplier: java.lang.Object get()>();

        r16 = (com.android.server.pm.parsing.PackageParser2) $r5;

     label02:
        r17 = virtualinvoke r16.<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int,boolean)>(r15, 0, 0);

        $r6 = staticinvoke <android.content.pm.parsing.ParsingPackageUtils: android.content.pm.PackageParser$SigningDetails getSigningDetails(android.content.pm.parsing.ParsingPackageRead,boolean)>(r17, 1);

        interfaceinvoke r17.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSigningDetails(android.content.pm.PackageParser$SigningDetails)>($r6);

        r2 = new android.content.pm.PackageUserState;

        specialinvoke r2.<android.content.pm.PackageUserState: void <init>()>();

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r18 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PackageInfo generate(com.android.server.pm.parsing.pkg.AndroidPackage,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r17, null, 134217856, 0L, 0L, null, r2, $i0, null);

     label03:
        if r16 == null goto label05;

     label04:
        virtualinvoke r16.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label05:
        return r18;

     label06:
        $r14 := @caughtexception;

        if r16 == null goto label11;

     label07:
        virtualinvoke r16.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

     label10:
        virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label11:
        throw $r14;

     label12:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception reading ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", $r13, $r9);

        return null;

     label13:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Installation path is null, package not found");

        throw $r3;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label11 to label12 with label12;
    }

    private java.util.List getPackageListForUid(int)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int i0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        java.lang.String[] $r3;
        java.lang.NullPointerException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;
        java.util.List $r8, r9;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

     label2:
        return r9;

     label3:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("No packages were found for uid: %d", $r5);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", $r7);

        $r8 = staticinvoke <java.util.List: java.util.List of()>();

        return $r8;

        catch java.lang.NullPointerException from label1 to label2 with label3;
    }

    private java.lang.String getPackageNameNormalized(java.lang.String)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int $i0;
        java.security.MessageDigest $r1;
        java.nio.charset.Charset $r2;
        byte[] $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.RuntimeException $r6;
        java.lang.String r7, r8;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r7 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 > 32 goto label1;

        return r7;

     label1:
        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        $r4 = virtualinvoke $r1.<java.security.MessageDigest: byte[] digest(byte[])>($r3);

        r8 = staticinvoke <android.content.integrity.IntegrityUtils: java.lang.String getHexDigest(byte[])>($r4);

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("SHA-256 algorithm not found", $r5);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static android.content.pm.Signature[] getSignatures(android.content.pm.PackageInfo)
    {
        android.content.pm.PackageInfo r0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;
        android.content.pm.Signature[] $r6, $r7;
        int $i0;
        android.content.pm.SigningInfo r8;

        r0 := @parameter0: android.content.pm.PackageInfo;

        r8 = r0.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo>;

        if r8 == null goto label1;

        $r6 = virtualinvoke r8.<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>();

        $i0 = lengthof $r6;

        if $i0 < 1 goto label1;

        $r7 = virtualinvoke r8.<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>();

        return $r7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package signature not found in ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private void handleIntegrityVerification(android.content.Intent)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int i0, $i3;
        java.lang.String r1, $r6, $r10, $r18, $r23, r31;
        android.content.pm.PackageInfo r2;
        java.util.List r3, r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.net.Uri $r5, $r16;
        long $l1, $l2;
        java.util.Map $r14;
        com.android.server.integrity.engine.RuleEvaluationEngine $r17;
        com.android.server.integrity.model.IntegrityCheckResult$Effect $r19, $r20;
        android.content.pm.PackageManagerInternal $r24, $r25, $r27, $r29, r36;
        java.lang.Exception $r26;
        java.lang.Throwable $r28;
        android.content.Intent r30;
        java.lang.StringBuilder r32;
        android.content.integrity.AppInstallMetadata$Builder r33;
        android.content.integrity.AppInstallMetadata r34;
        com.android.server.integrity.model.IntegrityCheckResult r35;
        byte b7;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r30 := @parameter0: android.content.Intent;

        i0 = virtualinvoke r30.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_ID", -1);

     label01:
        r1 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getInstallerPackageName(android.content.Intent)>(r30);

        $z0 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: boolean integrityCheckIncludesRuleProvider()>();

        if $z0 != 0 goto label03;

        $z4 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: boolean isRuleProvider(java.lang.String)>(r1);

        if $z4 == 0 goto label03;

        $r25 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        virtualinvoke $r25.<android.content.pm.PackageManagerInternal: void setIntegrityVerificationResult(int,int)>(i0, 1);

     label02:
        return;

     label03:
        r31 = virtualinvoke r30.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("android.intent.extra.PACKAGE_NAME");

        $r5 = virtualinvoke r30.<android.content.Intent: android.net.Uri getData()>();

        r2 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageInfo getPackageArchiveInfo(android.net.Uri)>($r5);

     label04:
        if r2 != null goto label07;

     label05:
        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot parse package ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r23 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AppIntegrityManagerServiceImpl", $r23);

        $r24 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        virtualinvoke $r24.<android.content.pm.PackageManagerInternal: void setIntegrityVerificationResult(int,int)>(i0, 1);

     label06:
        return;

     label07:
        r3 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getCertificateFingerprint(android.content.pm.PackageInfo)>(r2);

     label08:
        r4 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getInstallerCertificateFingerprint(java.lang.String)>(r1);

        r33 = new android.content.integrity.AppInstallMetadata$Builder;

        specialinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: void <init>()>();

        $r6 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getPackageNameNormalized(java.lang.String)>(r31);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setPackageName(java.lang.String)>($r6);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setAppCertificates(java.util.List)>(r3);

        $l1 = virtualinvoke r30.<android.content.Intent: long getLongExtra(java.lang.String,long)>("android.intent.extra.LONG_VERSION_CODE", -1L);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setVersionCode(long)>($l1);

        $r10 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getPackageNameNormalized(java.lang.String)>(r1);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setInstallerName(java.lang.String)>($r10);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setInstallerCertificates(java.util.List)>(r4);

        $z1 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: boolean isSystemApp(java.lang.String)>(r31);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setIsPreInstalled(boolean)>($z1);

        $r14 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.Map getAllowedInstallers(android.content.pm.PackageInfo)>(r2);

        virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata$Builder setAllowedInstallersAndCert(java.util.Map)>($r14);

        $r16 = virtualinvoke r30.<android.content.Intent: android.net.Uri getData()>();

        specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: void extractSourceStamp(android.net.Uri,android.content.integrity.AppInstallMetadata$Builder)>($r16, r33);

        r34 = virtualinvoke r33.<android.content.integrity.AppInstallMetadata$Builder: android.content.integrity.AppInstallMetadata build()>();

        $r17 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.engine.RuleEvaluationEngine mEvaluationEngine>;

        r35 = virtualinvoke $r17.<com.android.server.integrity.engine.RuleEvaluationEngine: com.android.server.integrity.model.IntegrityCheckResult evaluate(android.content.integrity.AppInstallMetadata)>(r34);

        $r18 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $l2 = virtualinvoke r34.<android.content.integrity.AppInstallMetadata: long getVersionCode()>();

        $i3 = virtualinvoke r35.<com.android.server.integrity.model.IntegrityCheckResult: int getLoggingResponse()>();

        $z2 = virtualinvoke r35.<com.android.server.integrity.model.IntegrityCheckResult: boolean isCausedByAppCertRule()>();

        $z3 = virtualinvoke r35.<com.android.server.integrity.model.IntegrityCheckResult: boolean isCausedByInstallerRule()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,java.lang.String,java.lang.String,long,java.lang.String,int,boolean,boolean)>(247, r31, $r18, $l2, r1, $i3, $z2, $z3);

        r36 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        $r19 = virtualinvoke r35.<com.android.server.integrity.model.IntegrityCheckResult: com.android.server.integrity.model.IntegrityCheckResult$Effect getEffect()>();

        $r20 = <com.android.server.integrity.model.IntegrityCheckResult$Effect: com.android.server.integrity.model.IntegrityCheckResult$Effect ALLOW>;

        if $r19 != $r20 goto label10;

     label09:
        b7 = 1;

        goto label11;

     label10:
        b7 = 0;

     label11:
        virtualinvoke r36.<android.content.pm.PackageManagerInternal: void setIntegrityVerificationResult(int,int)>(i0, b7);

     label12:
        goto label15;

     label13:
        $r26 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", "Error handling integrity verification", $r26);

        $r27 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        virtualinvoke $r27.<android.content.pm.PackageManagerInternal: void setIntegrityVerificationResult(int,int)>(i0, 1);

        goto label15;

     label14:
        $r28 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", "Invalid input to integrity verification", $r28);

        $r29 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.pm.PackageManagerInternal mPackageManagerInternal>;

        virtualinvoke $r29.<android.content.pm.PackageManagerInternal: void setIntegrityVerificationResult(int,int)>(i0, 0);

     label15:
        return;

        catch java.lang.IllegalArgumentException from label01 to label02 with label14;
        catch java.lang.Exception from label01 to label02 with label13;
        catch java.lang.IllegalArgumentException from label03 to label04 with label14;
        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.IllegalArgumentException from label05 to label06 with label14;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.IllegalArgumentException from label07 to label08 with label14;
        catch java.lang.Exception from label07 to label08 with label13;
        catch java.lang.IllegalArgumentException from label08 to label09 with label14;
        catch java.lang.Exception from label08 to label09 with label13;
        catch java.lang.IllegalArgumentException from label11 to label12 with label14;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private boolean integrityCheckIncludesRuleProvider()
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $r2 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "verify_integrity_for_rule_provider", 0);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    private boolean isRuleProvider(java.lang.String)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.lang.String r1, $r5;
        java.util.Iterator r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getAllowedRuleProviderSystemApps()>();

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $z1 = virtualinvoke $r5.<java.lang.String: boolean matches(java.lang.String)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    private boolean isSystemApp(java.lang.String)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        boolean z0, z1;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.content.pm.ApplicationInfo $r3, $r4;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.String r6;
        android.content.pm.PackageInfo r7;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r6 := @parameter0: java.lang.String;

        z1 = 0;

     label1:
        $r1 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r7 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r6, 0);

        $r3 = r7.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r3 == null goto label3;

        $r4 = r7.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        z0 = virtualinvoke $r4.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

     label2:
        if z0 == 0 goto label3;

        z1 = 1;

        goto label3;

     label3:
        return z1;

     label4:
        $r5 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    static java.lang.String lambda$extractSourceStamp$1(java.nio.file.Path)
    {
        java.nio.file.Path r0, $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.nio.file.Path;

        $r1 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>();

        $r2 = interfaceinvoke $r1.<java.nio.file.Path: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getCurrentRuleSetProvider()
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int $i0;
        com.android.server.integrity.IntegrityFileManager $r2;
        java.lang.String $r3, r5;
        com.android.server.integrity.model.RuleMetadata r4;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCallerPackageNameOrThrow(int)>($i0);

        $r2 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.IntegrityFileManager mIntegrityFileManager>;

        r4 = virtualinvoke $r2.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata readMetadata()>();

        if r4 == null goto label1;

        $r3 = virtualinvoke r4.<com.android.server.integrity.model.RuleMetadata: java.lang.String getRuleProvider()>();

        if $r3 == null goto label1;

        r5 = virtualinvoke r4.<com.android.server.integrity.model.RuleMetadata: java.lang.String getRuleProvider()>();

        goto label2;

     label1:
        r5 = "";

     label2:
        return r5;
    }

    public java.lang.String getCurrentRuleSetVersion()
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        int $i0;
        com.android.server.integrity.IntegrityFileManager $r2;
        java.lang.String $r3, r5;
        com.android.server.integrity.model.RuleMetadata r4;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCallerPackageNameOrThrow(int)>($i0);

        $r2 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.IntegrityFileManager mIntegrityFileManager>;

        r4 = virtualinvoke $r2.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata readMetadata()>();

        if r4 == null goto label1;

        $r3 = virtualinvoke r4.<com.android.server.integrity.model.RuleMetadata: java.lang.String getVersion()>();

        if $r3 == null goto label1;

        r5 = virtualinvoke r4.<com.android.server.integrity.model.RuleMetadata: java.lang.String getVersion()>();

        goto label2;

     label1:
        r5 = "";

     label2:
        return r5;
    }

    public android.content.pm.ParceledListSlice getCurrentRules()
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        com.android.server.integrity.IntegrityFileManager $r1;
        android.content.pm.ParceledListSlice $r2;
        java.lang.Exception $r3;
        java.util.List r4, r5;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        $r1 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.IntegrityFileManager mIntegrityFileManager>;

        r5 = virtualinvoke $r1.<com.android.server.integrity.IntegrityFileManager: java.util.List readRules(android.content.integrity.AppInstallMetadata)>(null);

     label2:
        r4 = r5;

        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", "Error getting current rules", $r3);

     label4:
        $r2 = new android.content.pm.ParceledListSlice;

        specialinvoke $r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r4);

        return $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.util.List getWhitelistedRuleProviders()
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.util.List $r1;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        $r1 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.util.List getAllowedRuleProviderSystemApps()>();

        return $r1;
    }

    public void lambda$updateRuleSet$0$AppIntegrityManagerServiceImpl(java.lang.String, java.lang.String, android.content.pm.ParceledListSlice, android.content.IntentSender)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.lang.String r1, r10;
        android.content.IntentSender r2;
        com.android.server.integrity.IntegrityFileManager $r3;
        java.util.List $r4;
        android.content.Intent $r5;
        android.content.Context $r7;
        java.lang.Exception $r8, $r9;
        android.content.pm.ParceledListSlice r11;
        boolean z0, z1;
        int i3;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r11 := @parameter2: android.content.pm.ParceledListSlice;

        r2 := @parameter3: android.content.IntentSender;

        z0 = 1;

     label1:
        $r3 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: com.android.server.integrity.IntegrityFileManager mIntegrityFileManager>;

        $r4 = virtualinvoke r11.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        virtualinvoke $r3.<com.android.server.integrity.IntegrityFileManager: void writeRules(java.lang.String,java.lang.String,java.util.List)>(r10, r1, $r4);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", "Error writing rules.", $r9);

        z0 = 0;

     label4:
        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,boolean,java.lang.String,java.lang.String)>(248, z0, r1, r10);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>()>();

        z1 = z0 ^ 1;

        i3 = (int) z1;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.integrity.extra.STATUS", i3);

     label5:
        $r7 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke r2.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>($r7, 0, $r5, null, null);

     label6:
        goto label8;

     label7:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AppIntegrityManagerServiceImpl", "Error sending status feedback.", $r8);

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void updateRuleSet(java.lang.String, android.content.pm.ParceledListSlice, android.content.IntentSender)
    {
        com.android.server.integrity.AppIntegrityManagerServiceImpl r0;
        java.lang.String r1, r4;
        android.content.pm.ParceledListSlice r2;
        android.content.IntentSender r3;
        int $i0;
        com.android.server.integrity._$$Lambda$AppIntegrityManagerServiceImpl$mjGol37R4_F3yOIKIoAbde7yLk0 $r5;
        android.os.Handler $r6;

        r0 := @this: com.android.server.integrity.AppIntegrityManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.ParceledListSlice;

        r3 := @parameter2: android.content.IntentSender;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r4 = specialinvoke r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: java.lang.String getCallerPackageNameOrThrow(int)>($i0);

        $r6 = r0.<com.android.server.integrity.AppIntegrityManagerServiceImpl: android.os.Handler mHandler>;

        $r5 = new com.android.server.integrity._$$Lambda$AppIntegrityManagerServiceImpl$mjGol37R4_F3yOIKIoAbde7yLk0;

        specialinvoke $r5.<com.android.server.integrity._$$Lambda$AppIntegrityManagerServiceImpl$mjGol37R4_F3yOIKIoAbde7yLk0: void <init>(com.android.server.integrity.AppIntegrityManagerServiceImpl,java.lang.String,java.lang.String,android.content.pm.ParceledListSlice,android.content.IntentSender)>(r0, r1, r4, r2, r3);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        return;
    }
}
