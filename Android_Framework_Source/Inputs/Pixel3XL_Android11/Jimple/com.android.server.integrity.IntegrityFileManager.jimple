public class com.android.server.integrity.IntegrityFileManager extends java.lang.Object
{
    private static final java.lang.String INDEXING_FILE;
    private static final java.lang.String METADATA_FILE;
    private static final java.lang.String RULES_FILE;
    private static final java.lang.Object RULES_LOCK;
    private static final java.lang.String TAG;
    private static com.android.server.integrity.IntegrityFileManager sInstance;
    private final java.io.File mDataDir;
    private com.android.server.integrity.parser.RuleIndexingController mRuleIndexingController;
    private com.android.server.integrity.model.RuleMetadata mRuleMetadataCache;
    private final com.android.server.integrity.parser.RuleParser mRuleParser;
    private final com.android.server.integrity.serializer.RuleSerializer mRuleSerializer;
    private final java.io.File mRulesDir;
    private final java.io.File mStagingDir;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <com.android.server.integrity.IntegrityFileManager: java.lang.String TAG> = "IntegrityFileManager";

        <com.android.server.integrity.IntegrityFileManager: java.lang.String RULES_FILE> = "rules";

        <com.android.server.integrity.IntegrityFileManager: java.lang.String METADATA_FILE> = "metadata";

        <com.android.server.integrity.IntegrityFileManager: java.lang.String INDEXING_FILE> = "indexing";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.server.integrity.IntegrityFileManager: java.lang.Object RULES_LOCK> = $r0;

        <com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.IntegrityFileManager sInstance> = null;

        return;
    }

    private void <init>()
    {
        com.android.server.integrity.IntegrityFileManager r0;
        com.android.server.integrity.parser.RuleBinaryParser $r1;
        com.android.server.integrity.serializer.RuleBinarySerializer $r2;
        java.io.File $r3;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        $r1 = new com.android.server.integrity.parser.RuleBinaryParser;

        specialinvoke $r1.<com.android.server.integrity.parser.RuleBinaryParser: void <init>()>();

        $r2 = new com.android.server.integrity.serializer.RuleBinarySerializer;

        specialinvoke $r2.<com.android.server.integrity.serializer.RuleBinarySerializer: void <init>()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke r0.<com.android.server.integrity.IntegrityFileManager: void <init>(com.android.server.integrity.parser.RuleParser,com.android.server.integrity.serializer.RuleSerializer,java.io.File)>($r1, $r2, $r3);

        return;
    }

    void <init>(com.android.server.integrity.parser.RuleParser, com.android.server.integrity.serializer.RuleSerializer, java.io.File)
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.io.File r1, $r2, $r3, $r5, $r12, $r13;
        boolean $z0, $z1, $z2;
        com.android.server.integrity.model.RuleMetadata $r4;
        java.lang.Throwable $r6, $r8;
        java.lang.Exception $r7;
        com.android.server.integrity.parser.RuleParser r9;
        com.android.server.integrity.serializer.RuleSerializer r10;
        java.io.FileInputStream r15;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        r9 := @parameter0: com.android.server.integrity.parser.RuleParser;

        r10 := @parameter1: com.android.server.integrity.serializer.RuleSerializer;

        r1 := @parameter2: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.parser.RuleParser mRuleParser> = r9;

        r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.serializer.RuleSerializer mRuleSerializer> = r10;

        r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mDataDir> = r1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "integrity_rules");

        r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir> = $r2;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "integrity_staging");

        r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir> = $r3;

        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        if $z0 == 0 goto label01;

        $r5 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        $z1 = virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        if $z1 != 0 goto label02;

     label01:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("IntegrityFileManager", "Error creating staging and rules directory");

     label02:
        $r12 = new java.io.File;

        $r13 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "metadata");

        $z2 = virtualinvoke $r12.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label14;

     label03:
        r15 = new java.io.FileInputStream;

        specialinvoke r15.<java.io.FileInputStream: void <init>(java.io.File)>($r12);

     label04:
        $r4 = staticinvoke <com.android.server.integrity.parser.RuleMetadataParser: com.android.server.integrity.model.RuleMetadata parse(java.io.InputStream)>(r15);

        r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata mRuleMetadataCache> = $r4;

     label05:
        virtualinvoke r15.<java.io.FileInputStream: void close()>();

     label06:
        goto label14;

     label07:
        $r6 := @caughtexception;

     label08:
        virtualinvoke r15.<java.io.FileInputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r8 := @caughtexception;

     label11:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label12:
        throw $r6;

     label13:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IntegrityFileManager", "Error reading metadata file.", $r7);

     label14:
        specialinvoke r0.<com.android.server.integrity.IntegrityFileManager: void updateRuleIndexingController()>();

        return;

        catch java.lang.Exception from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Exception from label11 to label12 with label13;
        catch java.lang.Exception from label12 to label13 with label13;
    }

    public static com.android.server.integrity.IntegrityFileManager getInstance()
    {
        com.android.server.integrity.IntegrityFileManager $r0, r2, r3;
        java.lang.Throwable $r1;

        entermonitor class "Lcom/android/server/integrity/IntegrityFileManager;";

     label1:
        $r0 = <com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.IntegrityFileManager sInstance>;

        if $r0 != null goto label2;

        r2 = new com.android.server.integrity.IntegrityFileManager;

        specialinvoke r2.<com.android.server.integrity.IntegrityFileManager: void <init>()>();

        <com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.IntegrityFileManager sInstance> = r2;

     label2:
        r3 = <com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.IntegrityFileManager sInstance>;

     label3:
        exitmonitor class "Lcom/android/server/integrity/IntegrityFileManager;";

        return r3;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Lcom/android/server/integrity/IntegrityFileManager;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void switchStagingRulesDir() throws java.io.IOException
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.lang.Object r1;
        int i0, i1;
        java.io.File $r2, $r3, $r4, $r5, $r6, $r7, $r8, r10;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r9;
        java.io.File[] r11;
        java.io.IOException r12;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        r1 = <com.android.server.integrity.IntegrityFileManager: java.lang.Object RULES_LOCK>;

        entermonitor r1;

     label01:
        r10 = new java.io.File;

        $r2 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mDataDir>;

        specialinvoke r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "temp");

        $r3 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean renameTo(java.io.File)>(r10);

        if $z0 == 0 goto label08;

        $r5 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir>;

        $r4 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        $z1 = virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

        if $z1 == 0 goto label08;

        $r6 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir>;

        $z2 = virtualinvoke r10.<java.io.File: boolean renameTo(java.io.File)>($r6);

        if $z2 == 0 goto label08;

        $r7 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir>;

        r11 = virtualinvoke $r7.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r11;

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r8 = r11[i1];

        virtualinvoke $r8.<java.io.File: boolean delete()>();

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        r12 = new java.io.IOException;

        specialinvoke r12.<java.io.IOException: void <init>(java.lang.String)>("Error switching staging/rules directory");

        throw r12;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void updateRuleIndexingController()
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.io.File $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3, $r4;
        java.lang.Exception $r5;
        java.io.FileInputStream r7;
        com.android.server.integrity.parser.RuleIndexingController r8;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "indexing");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label12;

     label01:
        r7 = new java.io.FileInputStream;

        specialinvoke r7.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

     label02:
        r8 = new com.android.server.integrity.parser.RuleIndexingController;

        specialinvoke r8.<com.android.server.integrity.parser.RuleIndexingController: void <init>(java.io.InputStream)>(r7);

        r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.parser.RuleIndexingController mRuleIndexingController> = r8;

     label03:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r3 := @caughtexception;

     label06:
        virtualinvoke r7.<java.io.FileInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r4 := @caughtexception;

     label09:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label10:
        throw $r3;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IntegrityFileManager", "Error parsing the rule indexing file.", $r5);

     label12:
        return;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label10 to label11 with label11;
    }

    private void writeMetadata(java.io.File, java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.lang.String r1, r9;
        com.android.server.integrity.model.RuleMetadata $r2, $r5;
        java.io.FileOutputStream $r3;
        java.io.File $r4, r8;
        java.lang.Throwable $r6, $r7;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        r8 := @parameter0: java.io.File;

        r9 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = new com.android.server.integrity.model.RuleMetadata;

        specialinvoke $r2.<com.android.server.integrity.model.RuleMetadata: void <init>(java.lang.String,java.lang.String)>(r9, r1);

        r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata mRuleMetadataCache> = $r2;

        $r3 = new java.io.FileOutputStream;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r8, "metadata");

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

     label1:
        $r5 = r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata mRuleMetadataCache>;

        staticinvoke <com.android.server.integrity.serializer.RuleMetadataSerializer: void serialize(com.android.server.integrity.model.RuleMetadata,java.io.OutputStream)>($r5, $r3);

     label2:
        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public boolean initialized()
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.io.File $r1, $r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        $r1 = new java.io.File;

        $r2 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "rules");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r3 = new java.io.File;

        $r4 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "metadata");

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $r5 = new java.io.File;

        $r6 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "indexing");

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    public com.android.server.integrity.model.RuleMetadata readMetadata()
    {
        com.android.server.integrity.IntegrityFileManager r0;
        com.android.server.integrity.model.RuleMetadata $r1;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        $r1 = r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.model.RuleMetadata mRuleMetadataCache>;

        return $r1;
    }

    public java.util.List readRules(android.content.integrity.AppInstallMetadata) throws java.io.IOException, com.android.server.integrity.parser.RuleParseException
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.lang.Object r1;
        java.util.List r2, r7, r13;
        com.android.server.integrity.parser.RuleIndexingController $r3;
        java.lang.Exception $r4;
        java.lang.Throwable $r5;
        android.content.integrity.AppInstallMetadata r6;
        java.io.File r9, $r10;
        com.android.server.integrity.parser.RuleParser $r11;
        com.android.server.integrity.parser.RandomAccessObject $r12;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        r6 := @parameter0: android.content.integrity.AppInstallMetadata;

        r1 = <com.android.server.integrity.IntegrityFileManager: java.lang.Object RULES_LOCK>;

        entermonitor r1;

     label01:
        r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label02:
        r7 = r2;

        if r6 == null goto label08;

     label03:
        $r3 = r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.parser.RuleIndexingController mRuleIndexingController>;

        r7 = virtualinvoke $r3.<com.android.server.integrity.parser.RuleIndexingController: java.util.List identifyRulesToEvaluate(android.content.integrity.AppInstallMetadata)>(r6);

     label04:
        goto label08;

     label05:
        $r4 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("IntegrityFileManager", "Error identifying the rule indexes. Trying unindexed.", $r4);

     label07:
        r7 = r2;

     label08:
        r9 = new java.io.File;

        $r10 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mRulesDir>;

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "rules");

        $r11 = r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.parser.RuleParser mRuleParser>;

        $r12 = staticinvoke <com.android.server.integrity.parser.RandomAccessObject: com.android.server.integrity.parser.RandomAccessObject ofFile(java.io.File)>(r9);

        r13 = interfaceinvoke $r11.<com.android.server.integrity.parser.RuleParser: java.util.List parse(com.android.server.integrity.parser.RandomAccessObject,java.util.List)>($r12, r7);

        exitmonitor r1;

     label09:
        return r13;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void writeRules(java.lang.String, java.lang.String, java.util.List) throws java.io.IOException, com.android.server.integrity.serializer.RuleSerializeException
    {
        com.android.server.integrity.IntegrityFileManager r0;
        java.io.File r1, $r2, $r4, $r5, $r6;
        java.io.FileOutputStream $r3, r19;
        com.android.server.integrity.serializer.RuleSerializer $r7;
        java.util.Optional $r8;
        java.lang.Throwable $r9, $r10, $r11, $r12, $r13;
        java.lang.String r14, r15;
        java.util.List r16;

        r0 := @this: com.android.server.integrity.IntegrityFileManager;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: java.lang.String;

        r16 := @parameter2: java.util.List;

     label01:
        $r2 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir>;

        specialinvoke r0.<com.android.server.integrity.IntegrityFileManager: void writeMetadata(java.io.File,java.lang.String,java.lang.String)>($r2, r15, r14);

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IntegrityFileManager", "Error writing metadata.", $r9);

     label04:
        $r3 = new java.io.FileOutputStream;

        $r4 = new java.io.File;

        $r5 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir>;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "rules");

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r4);

     label05:
        r19 = new java.io.FileOutputStream;

        r1 = new java.io.File;

        $r6 = r0.<com.android.server.integrity.IntegrityFileManager: java.io.File mStagingDir>;

        specialinvoke r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "indexing");

        specialinvoke r19.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

     label06:
        $r7 = r0.<com.android.server.integrity.IntegrityFileManager: com.android.server.integrity.serializer.RuleSerializer mRuleSerializer>;

        $r8 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        interfaceinvoke $r7.<com.android.server.integrity.serializer.RuleSerializer: void serialize(java.util.List,java.util.Optional,java.io.OutputStream,java.io.OutputStream)>(r16, $r8, $r3, r19);

     label07:
        virtualinvoke r19.<java.io.FileOutputStream: void close()>();

     label08:
        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

        specialinvoke r0.<com.android.server.integrity.IntegrityFileManager: void switchStagingRulesDir()>();

        specialinvoke r0.<com.android.server.integrity.IntegrityFileManager: void updateRuleIndexingController()>();

        return;

     label09:
        $r13 := @caughtexception;

     label10:
        virtualinvoke r19.<java.io.FileOutputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r12 := @caughtexception;

     label13:
        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label14:
        throw $r13;

     label15:
        $r11 := @caughtexception;

     label16:
        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r10 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label19:
        throw $r11;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label18;
    }
}
