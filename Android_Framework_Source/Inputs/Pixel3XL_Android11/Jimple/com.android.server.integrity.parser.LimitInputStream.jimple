public class com.android.server.integrity.parser.LimitInputStream extends java.io.FilterInputStream
{
    private final int mLimit;
    private int mReadBytes;

    public void <init>(java.io.InputStream, int)
    {
        com.android.server.integrity.parser.LimitInputStream r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        java.io.InputStream r7;

        r0 := @this: com.android.server.integrity.parser.LimitInputStream;

        r7 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r7);

        if i0 < 0 goto label1;

        r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes> = 0;

        r0.<com.android.server.integrity.parser.LimitInputStream: int mLimit> = i0;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("limit ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be negative");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public int available() throws java.io.IOException
    {
        com.android.server.integrity.parser.LimitInputStream r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.server.integrity.parser.LimitInputStream;

        $i0 = specialinvoke r0.<java.io.FilterInputStream: int available()>();

        $i2 = r0.<com.android.server.integrity.parser.LimitInputStream: int mLimit>;

        $i1 = r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes>;

        $i3 = $i2 - $i1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i3);

        return $i4;
    }

    public int read() throws java.io.IOException
    {
        com.android.server.integrity.parser.LimitInputStream r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.integrity.parser.LimitInputStream;

        i0 = r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes>;

        $i1 = r0.<com.android.server.integrity.parser.LimitInputStream: int mLimit>;

        if i0 != $i1 goto label1;

        return -1;

     label1:
        $i2 = i0 + 1;

        r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes> = $i2;

        $i3 = specialinvoke r0.<java.io.FilterInputStream: int read()>();

        return $i3;
    }

    public int read(byte[]) throws java.io.IOException
    {
        com.android.server.integrity.parser.LimitInputStream r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: com.android.server.integrity.parser.LimitInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<com.android.server.integrity.parser.LimitInputStream: int read(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        com.android.server.integrity.parser.LimitInputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: com.android.server.integrity.parser.LimitInputStream;

        r1 := @parameter0: byte[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 > 0 goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r0.<com.android.server.integrity.parser.LimitInputStream: int available()>();

        if i1 > 0 goto label2;

        return -1;

     label2:
        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        i6 = specialinvoke r0.<java.io.FilterInputStream: int read(byte[],int,int)>(r1, i5, $i2);

        $i3 = r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes>;

        $i4 = $i3 + i6;

        r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes> = $i4;

        return i6;
    }

    public long skip(long) throws java.io.IOException
    {
        com.android.server.integrity.parser.LimitInputStream r0;
        int i0, $i4, $i6, $i7, $i8;
        byte $b1;
        long $l2, $l3, $l5, l9, l10;

        r0 := @this: com.android.server.integrity.parser.LimitInputStream;

        l9 := @parameter0: long;

        $b1 = l9 cmp 0L;

        if $b1 > 0 goto label1;

        return 0L;

     label1:
        i0 = virtualinvoke r0.<com.android.server.integrity.parser.LimitInputStream: int available()>();

        if i0 > 0 goto label2;

        return 0L;

     label2:
        $l2 = (long) i0;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>($l2, l9);

        $i4 = (int) $l3;

        $l5 = (long) $i4;

        l10 = specialinvoke r0.<java.io.FilterInputStream: long skip(long)>($l5);

        $i7 = r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes>;

        $i6 = (int) l10;

        $i8 = $i7 + $i6;

        r0.<com.android.server.integrity.parser.LimitInputStream: int mReadBytes> = $i8;

        return l10;
    }
}
