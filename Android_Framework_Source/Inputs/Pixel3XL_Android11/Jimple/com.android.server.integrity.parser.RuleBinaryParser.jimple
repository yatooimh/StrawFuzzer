public class com.android.server.integrity.parser.RuleBinaryParser extends java.lang.Object implements com.android.server.integrity.parser.RuleParser
{

    public void <init>()
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.util.List parseAllRules(com.android.server.integrity.parser.RandomAccessInputStream) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        java.util.ArrayList $r2;
        com.android.server.integrity.model.BitInputStream $r3;
        java.io.BufferedInputStream $r4;
        int $i0;
        android.content.integrity.Rule $r5;
        com.android.server.integrity.parser.RandomAccessInputStream r6;
        boolean $z1;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r6 := @parameter0: com.android.server.integrity.parser.RandomAccessInputStream;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new com.android.server.integrity.model.BitInputStream;

        $r4 = new java.io.BufferedInputStream;

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r6);

        specialinvoke $r3.<com.android.server.integrity.model.BitInputStream: void <init>(java.io.InputStream)>($r4);

     label1:
        $z1 = virtualinvoke $r3.<com.android.server.integrity.model.BitInputStream: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke $r3.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(1);

        if $i0 != 1 goto label1;

        $r5 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.Rule parseRule(com.android.server.integrity.model.BitInputStream)>($r3);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r2;
    }

    private android.content.integrity.AtomicFormula parseAtomicFormula(com.android.server.integrity.model.BitInputStream) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        com.android.server.integrity.model.BitInputStream r1;
        int i0, i1, $i2, $i5, $i8, $i9;
        android.content.integrity.AtomicFormula$BooleanAtomicFormula $r2;
        boolean $z0, z1;
        android.content.integrity.AtomicFormula$LongAtomicFormula $r3;
        long $l3, $l4, $l6, $l7;
        android.content.integrity.AtomicFormula$StringAtomicFormula $r4;
        java.lang.String $r5, $r9;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object[] $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r1 := @parameter0: com.android.server.integrity.model.BitInputStream;

        i0 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(4);

        i1 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(3);

        z1 = 0;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label4;
            default: goto label1;
        };

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown key: %d", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label2:
        $r2 = new android.content.integrity.AtomicFormula$BooleanAtomicFormula;

        $z0 = staticinvoke <com.android.server.integrity.parser.BinaryFileOperations: boolean getBooleanValue(com.android.server.integrity.model.BitInputStream)>(r1);

        specialinvoke $r2.<android.content.integrity.AtomicFormula$BooleanAtomicFormula: void <init>(int,boolean)>(i0, $z0);

        return $r2;

     label3:
        $r3 = new android.content.integrity.AtomicFormula$LongAtomicFormula;

        $i2 = staticinvoke <com.android.server.integrity.parser.BinaryFileOperations: int getIntValue(com.android.server.integrity.model.BitInputStream)>(r1);

        $l3 = (long) $i2;

        $l4 = $l3 << 32;

        $i5 = staticinvoke <com.android.server.integrity.parser.BinaryFileOperations: int getIntValue(com.android.server.integrity.model.BitInputStream)>(r1);

        $l6 = (long) $i5;

        $l7 = $l4 | $l6;

        specialinvoke $r3.<android.content.integrity.AtomicFormula$LongAtomicFormula: void <init>(int,int,long)>(i0, i1, $l7);

        return $r3;

     label4:
        $i8 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(1);

        if $i8 != 1 goto label5;

        z1 = 1;

     label5:
        $r4 = new android.content.integrity.AtomicFormula$StringAtomicFormula;

        $i9 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(8);

        $r5 = staticinvoke <com.android.server.integrity.parser.BinaryFileOperations: java.lang.String getStringValue(com.android.server.integrity.model.BitInputStream,int,boolean)>(r1, $i9, z1);

        specialinvoke $r4.<android.content.integrity.AtomicFormula$StringAtomicFormula: void <init>(int,java.lang.String,boolean)>(i0, $r5, z1);

        return $r4;
    }

    private android.content.integrity.CompoundFormula parseCompoundFormula(com.android.server.integrity.model.BitInputStream) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        com.android.server.integrity.model.BitInputStream r1;
        int i0;
        java.util.ArrayList $r3;
        android.content.integrity.CompoundFormula $r4;
        android.content.integrity.IntegrityFormula r5;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r1 := @parameter0: com.android.server.integrity.model.BitInputStream;

        i0 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r5 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.IntegrityFormula parseFormula(com.android.server.integrity.model.BitInputStream)>(r1);

     label1:
        if r5 == null goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r5);

        r5 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.IntegrityFormula parseFormula(com.android.server.integrity.model.BitInputStream)>(r1);

        goto label1;

     label2:
        $r4 = new android.content.integrity.CompoundFormula;

        specialinvoke $r4.<android.content.integrity.CompoundFormula: void <init>(int,java.util.List)>(i0, $r3);

        return $r4;
    }

    private android.content.integrity.IntegrityFormula parseFormula(com.android.server.integrity.model.BitInputStream) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        com.android.server.integrity.model.BitInputStream r1;
        int i0;
        android.content.integrity.AtomicFormula $r2;
        android.content.integrity.CompoundFormula $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6;
        java.lang.String $r7;
        android.content.integrity.InstallerAllowedByManifestFormula $r8;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r1 := @parameter0: com.android.server.integrity.model.BitInputStream;

        i0 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(3);

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 != 3 goto label1;

        $r8 = new android.content.integrity.InstallerAllowedByManifestFormula;

        specialinvoke $r8.<android.content.integrity.InstallerAllowedByManifestFormula: void <init>()>();

        return $r8;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Unknown formula separator: %s", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r4;

     label2:
        return null;

     label3:
        $r3 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.CompoundFormula parseCompoundFormula(com.android.server.integrity.model.BitInputStream)>(r1);

        return $r3;

     label4:
        $r2 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.AtomicFormula parseAtomicFormula(com.android.server.integrity.model.BitInputStream)>(r1);

        return $r2;
    }

    private java.util.List parseIndexedRules(com.android.server.integrity.parser.RandomAccessInputStream, java.util.List) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        com.android.server.integrity.parser.RandomAccessInputStream r1;
        java.util.ArrayList $r3;
        boolean $z0, $z2;
        java.lang.Object $r4;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.integrity.model.BitInputStream $r5;
        java.io.BufferedInputStream $r6;
        com.android.server.integrity.parser.LimitInputStream $r7;
        android.content.integrity.Rule $r8;
        java.util.List r9;
        java.util.Iterator r10;
        com.android.server.integrity.parser.RuleIndexRange r11;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r1 := @parameter0: com.android.server.integrity.parser.RandomAccessInputStream;

        r9 := @parameter1: java.util.List;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.android.server.integrity.parser.RuleIndexRange) $r4;

        $i0 = virtualinvoke r11.<com.android.server.integrity.parser.RuleIndexRange: int getStartIndex()>();

        virtualinvoke r1.<com.android.server.integrity.parser.RandomAccessInputStream: void seek(int)>($i0);

        $r5 = new com.android.server.integrity.model.BitInputStream;

        $r6 = new java.io.BufferedInputStream;

        $r7 = new com.android.server.integrity.parser.LimitInputStream;

        $i1 = virtualinvoke r11.<com.android.server.integrity.parser.RuleIndexRange: int getEndIndex()>();

        $i2 = virtualinvoke r11.<com.android.server.integrity.parser.RuleIndexRange: int getStartIndex()>();

        $i3 = $i1 - $i2;

        specialinvoke $r7.<com.android.server.integrity.parser.LimitInputStream: void <init>(java.io.InputStream,int)>(r1, $i3);

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);

        specialinvoke $r5.<com.android.server.integrity.model.BitInputStream: void <init>(java.io.InputStream)>($r6);

     label2:
        $z2 = virtualinvoke $r5.<com.android.server.integrity.model.BitInputStream: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $i4 = virtualinvoke $r5.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(1);

        if $i4 != 1 goto label2;

        $r8 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.Rule parseRule(com.android.server.integrity.model.BitInputStream)>($r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r3;
    }

    private android.content.integrity.Rule parseRule(com.android.server.integrity.model.BitInputStream) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        com.android.server.integrity.model.BitInputStream r1;
        android.content.integrity.IntegrityFormula r2;
        int i0, $i1;
        java.lang.IllegalArgumentException $r3;
        android.content.integrity.Rule $r4;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r1 := @parameter0: com.android.server.integrity.model.BitInputStream;

        r2 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: android.content.integrity.IntegrityFormula parseFormula(com.android.server.integrity.model.BitInputStream)>(r1);

        i0 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(3);

        $i1 = virtualinvoke r1.<com.android.server.integrity.model.BitInputStream: int getNext(int)>(1);

        if $i1 != 1 goto label1;

        $r4 = new android.content.integrity.Rule;

        specialinvoke $r4.<android.content.integrity.Rule: void <init>(android.content.integrity.IntegrityFormula,int)>(r2, i0);

        return $r4;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A rule must end with a \'1\' bit.");

        throw $r3;
    }

    private java.util.List parseRules(com.android.server.integrity.parser.RandomAccessInputStream, java.util.List) throws java.io.IOException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        java.util.List r1, r3;
        boolean $z0;
        com.android.server.integrity.parser.RandomAccessInputStream r2;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r2 := @parameter0: com.android.server.integrity.parser.RandomAccessInputStream;

        r1 := @parameter1: java.util.List;

        virtualinvoke r2.<com.android.server.integrity.parser.RandomAccessInputStream: long skip(long)>(1L);

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r3 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: java.util.List parseAllRules(com.android.server.integrity.parser.RandomAccessInputStream)>(r2);

        goto label2;

     label1:
        r3 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: java.util.List parseIndexedRules(com.android.server.integrity.parser.RandomAccessInputStream,java.util.List)>(r2, r1);

     label2:
        return r3;
    }

    public java.util.List parse(com.android.server.integrity.parser.RandomAccessObject, java.util.List) throws com.android.server.integrity.parser.RuleParseException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        com.android.server.integrity.parser.RandomAccessInputStream r1;
        java.lang.Throwable $r2, $r6;
        java.lang.Exception $r3;
        com.android.server.integrity.parser.RuleParseException $r4;
        java.lang.String $r5;
        com.android.server.integrity.parser.RandomAccessObject r7;
        java.util.List r8, r9;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r7 := @parameter0: com.android.server.integrity.parser.RandomAccessObject;

        r8 := @parameter1: java.util.List;

     label01:
        r1 = new com.android.server.integrity.parser.RandomAccessInputStream;

        specialinvoke r1.<com.android.server.integrity.parser.RandomAccessInputStream: void <init>(com.android.server.integrity.parser.RandomAccessObject)>(r7);

     label02:
        r9 = specialinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: java.util.List parseRules(com.android.server.integrity.parser.RandomAccessInputStream,java.util.List)>(r1, r8);

     label03:
        virtualinvoke r1.<com.android.server.integrity.parser.RandomAccessInputStream: void close()>();

     label04:
        return r9;

     label05:
        $r6 := @caughtexception;

     label06:
        virtualinvoke r1.<com.android.server.integrity.parser.RandomAccessInputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r2 := @caughtexception;

     label09:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label10:
        throw $r6;

     label11:
        $r3 := @caughtexception;

        $r4 = new com.android.server.integrity.parser.RuleParseException;

        $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<com.android.server.integrity.parser.RuleParseException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        throw $r4;

        catch java.lang.Exception from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Exception from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label10 to label11 with label11;
    }

    public java.util.List parse(byte[]) throws com.android.server.integrity.parser.RuleParseException
    {
        com.android.server.integrity.parser.RuleBinaryParser r0;
        byte[] r1;
        com.android.server.integrity.parser.RandomAccessObject $r2;
        java.util.List $r3, $r4;

        r0 := @this: com.android.server.integrity.parser.RuleBinaryParser;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <com.android.server.integrity.parser.RandomAccessObject: com.android.server.integrity.parser.RandomAccessObject ofBytes(byte[])>(r1);

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r4 = virtualinvoke r0.<com.android.server.integrity.parser.RuleBinaryParser: java.util.List parse(com.android.server.integrity.parser.RandomAccessObject,java.util.List)>($r2, $r3);

        return $r4;
    }
}
