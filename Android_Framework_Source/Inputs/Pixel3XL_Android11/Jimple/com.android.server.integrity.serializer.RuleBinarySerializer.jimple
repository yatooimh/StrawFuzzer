public class com.android.server.integrity.serializer.RuleBinarySerializer extends java.lang.Object implements com.android.server.integrity.serializer.RuleSerializer
{
    static final int INDEXED_RULE_SIZE_LIMIT;
    static final int NONINDEXED_RULE_SIZE_LIMIT;
    static final int TOTAL_RULE_SIZE_LIMIT;

    public void <init>()
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] getBytesForString(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        byte[] $r1, $r3;
        java.nio.charset.Charset $r2;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r3 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2);

        return $r3;

     label1:
        $r1 = staticinvoke <android.content.integrity.IntegrityUtils: byte[] getBytesFromHexDigest(java.lang.String)>(r0);

        return $r1;
    }

    static java.lang.Integer lambda$verifySize$0(java.util.List)
    {
        java.util.List r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    private void serializeAtomicFormula(android.content.integrity.AtomicFormula, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        com.android.server.integrity.model.BitOutputStream r1;
        long l0, $l6;
        java.lang.IllegalArgumentException $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i8;
        java.lang.Object[] $r4;
        java.lang.Class $r5;
        java.lang.String $r6, $r10;
        java.lang.Boolean $r7, $r11;
        boolean $z0, $z1;
        java.lang.Integer $r8;
        java.lang.Long $r9;
        android.content.integrity.AtomicFormula r12;
        android.content.integrity.AtomicFormula$StringAtomicFormula r13;
        android.content.integrity.AtomicFormula$LongAtomicFormula r14;
        android.content.integrity.AtomicFormula$BooleanAtomicFormula r15;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r12 := @parameter0: android.content.integrity.AtomicFormula;

        r1 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        if r12 == null goto label5;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, 0);

        $i1 = virtualinvoke r12.<android.content.integrity.AtomicFormula: int getKey()>();

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(4, $i1);

        $i2 = virtualinvoke r12.<android.content.integrity.AtomicFormula: int getTag()>();

        if $i2 != 1 goto label1;

        r13 = (android.content.integrity.AtomicFormula$StringAtomicFormula) r12;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, 0);

        $r10 = virtualinvoke r13.<android.content.integrity.AtomicFormula$StringAtomicFormula: java.lang.String getValue()>();

        $r11 = virtualinvoke r13.<android.content.integrity.AtomicFormula$StringAtomicFormula: java.lang.Boolean getIsHashedValue()>();

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeStringValue(java.lang.String,boolean,com.android.server.integrity.model.BitOutputStream)>($r10, $z1, r1);

        goto label3;

     label1:
        $i3 = virtualinvoke r12.<android.content.integrity.AtomicFormula: int getTag()>();

        if $i3 != 2 goto label2;

        r14 = (android.content.integrity.AtomicFormula$LongAtomicFormula) r12;

        $r8 = virtualinvoke r14.<android.content.integrity.AtomicFormula$LongAtomicFormula: java.lang.Integer getOperator()>();

        $i5 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, $i5);

        $r9 = virtualinvoke r14.<android.content.integrity.AtomicFormula$LongAtomicFormula: java.lang.Long getValue()>();

        l0 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        $l6 = l0 >>> 32;

        $i7 = (int) $l6;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIntValue(int,com.android.server.integrity.model.BitOutputStream)>($i7, r1);

        $i8 = (int) l0;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIntValue(int,com.android.server.integrity.model.BitOutputStream)>($i8, r1);

        goto label3;

     label2:
        $i4 = virtualinvoke r12.<android.content.integrity.AtomicFormula: int getTag()>();

        if $i4 != 3 goto label4;

        r15 = (android.content.integrity.AtomicFormula$BooleanAtomicFormula) r12;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, 0);

        $r7 = virtualinvoke r15.<android.content.integrity.AtomicFormula$BooleanAtomicFormula: java.lang.Boolean getValue()>();

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeBooleanValue(boolean,com.android.server.integrity.model.BitOutputStream)>($z0, r1);

     label3:
        return;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid atomic formula type: %s", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null atomic formula can not be serialized");

        throw $r2;
    }

    private void serializeBooleanValue(boolean, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        boolean z0;
        com.android.server.integrity.model.BitOutputStream r1;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(boolean)>(z0);

        return;
    }

    private void serializeCompoundFormula(android.content.integrity.CompoundFormula, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        com.android.server.integrity.model.BitOutputStream r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.content.integrity.IntegrityFormula $r5;
        android.content.integrity.CompoundFormula r6;
        java.util.Iterator r7;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r6 := @parameter0: android.content.integrity.CompoundFormula;

        r1 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        if r6 == null goto label3;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, 1);

        $i0 = virtualinvoke r6.<android.content.integrity.CompoundFormula: int getConnector()>();

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(2, $i0);

        $r3 = virtualinvoke r6.<android.content.integrity.CompoundFormula: java.util.List getFormulas()>();

        r7 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.content.integrity.IntegrityFormula) $r4;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeFormula(android.content.integrity.IntegrityFormula,com.android.server.integrity.model.BitOutputStream)>($r5, r1);

        goto label1;

     label2:
        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, 2);

        return;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null compound formula can not be serialized");

        throw $r2;
    }

    private void serializeFormula(android.content.integrity.IntegrityFormula, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        android.content.integrity.IntegrityFormula r1;
        com.android.server.integrity.model.BitOutputStream r2;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object[] $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        android.content.integrity.CompoundFormula $r7;
        android.content.integrity.AtomicFormula $r8;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r1 := @parameter0: android.content.integrity.IntegrityFormula;

        r2 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        $z0 = r1 instanceof android.content.integrity.AtomicFormula;

        if $z0 == 0 goto label1;

        $r8 = (android.content.integrity.AtomicFormula) r1;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeAtomicFormula(android.content.integrity.AtomicFormula,com.android.server.integrity.model.BitOutputStream)>($r8, r2);

        goto label3;

     label1:
        $z1 = r1 instanceof android.content.integrity.CompoundFormula;

        if $z1 == 0 goto label2;

        $r7 = (android.content.integrity.CompoundFormula) r1;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeCompoundFormula(android.content.integrity.CompoundFormula,com.android.server.integrity.model.BitOutputStream)>($r7, r2);

        goto label3;

     label2:
        $z2 = r1 instanceof android.content.integrity.InstallerAllowedByManifestFormula;

        if $z2 == 0 goto label4;

        virtualinvoke r2.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, 3);

     label3:
        return;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Invalid formula type: %s", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    private void serializeIndexGroup(java.util.LinkedHashMap, com.android.server.integrity.model.BitOutputStream, boolean) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        java.util.LinkedHashMap r1;
        com.android.server.integrity.model.BitOutputStream r2;
        boolean z0, $z1, $z2, $z3;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.lang.Object $r5, $r7, $r10, $r11, $r13, $r15, $r17;
        java.lang.Integer $r6, $r8, $r18;
        int $i0, $i1, $i2;
        java.util.Set $r9;
        java.lang.String $r12, $r14, $r16;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r1 := @parameter0: java.util.LinkedHashMap;

        r2 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeStringValue(java.lang.String,boolean,com.android.server.integrity.model.BitOutputStream)>("START_KEY", 0, r2);

        $r5 = virtualinvoke r1.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>("START_KEY");

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIntValue(int,com.android.server.integrity.model.BitOutputStream)>($i0, r2);

        if z0 == 0 goto label3;

        $r9 = virtualinvoke r1.<java.util.LinkedHashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("START_KEY");

        if $z2 != 0 goto label2;

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r13;

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("END_KEY");

        if $z3 != 0 goto label2;

        $r15 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (java.lang.String) $r15;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeStringValue(java.lang.String,boolean,com.android.server.integrity.model.BitOutputStream)>($r16, 0, r2);

        $r17 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (java.lang.Integer) $r17;

        $i2 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIntValue(int,com.android.server.integrity.model.BitOutputStream)>($i2, r2);

     label2:
        goto label1;

     label3:
        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeStringValue(java.lang.String,boolean,com.android.server.integrity.model.BitOutputStream)>("END_KEY", 0, r2);

        $r7 = virtualinvoke r1.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>("END_KEY");

        $r8 = (java.lang.Integer) $r7;

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIntValue(int,com.android.server.integrity.model.BitOutputStream)>($i1, r2);

        return;
    }

    private void serializeIntValue(int, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        int i0;
        com.android.server.integrity.model.BitOutputStream r1;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(32, i0);

        return;
    }

    private void serializeRule(android.content.integrity.Rule, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        android.content.integrity.Rule r1;
        com.android.server.integrity.model.BitOutputStream r2;
        java.lang.IllegalArgumentException $r3;
        android.content.integrity.IntegrityFormula $r4;
        int $i0;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r1 := @parameter0: android.content.integrity.Rule;

        r2 := @parameter1: com.android.server.integrity.model.BitOutputStream;

        if r1 == null goto label1;

        virtualinvoke r2.<com.android.server.integrity.model.BitOutputStream: void setNext()>();

        $r4 = virtualinvoke r1.<android.content.integrity.Rule: android.content.integrity.IntegrityFormula getFormula()>();

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeFormula(android.content.integrity.IntegrityFormula,com.android.server.integrity.model.BitOutputStream)>($r4, r2);

        $i0 = virtualinvoke r1.<android.content.integrity.Rule: int getEffect()>();

        virtualinvoke r2.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(3, $i0);

        virtualinvoke r2.<com.android.server.integrity.model.BitOutputStream: void setNext()>();

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null rule can not be serialized");

        throw $r3;
    }

    private void serializeRuleFileMetadata(java.util.Optional, com.android.server.integrity.model.ByteTrackedOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        com.android.server.integrity.model.ByteTrackedOutputStream r1;
        int i0;
        java.lang.Integer $r2, $r4;
        java.lang.Object $r3;
        com.android.server.integrity.model.BitOutputStream $r5;
        java.util.Optional r6;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r6 := @parameter0: java.util.Optional;

        r1 := @parameter1: com.android.server.integrity.model.ByteTrackedOutputStream;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r3 = virtualinvoke r6.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r2);

        $r4 = (java.lang.Integer) $r3;

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $r5 = new com.android.server.integrity.model.BitOutputStream;

        specialinvoke $r5.<com.android.server.integrity.model.BitOutputStream: void <init>(java.io.OutputStream)>(r1);

        virtualinvoke $r5.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(8, i0);

        virtualinvoke $r5.<com.android.server.integrity.model.BitOutputStream: void flush()>();

        return;
    }

    private java.util.LinkedHashMap serializeRuleList(java.util.Map, com.android.server.integrity.model.ByteTrackedOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        java.util.Map r1;
        com.android.server.integrity.model.ByteTrackedOutputStream r2;
        com.android.server.integrity.model.BitOutputStream $r5;
        java.util.LinkedHashMap $r6;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Integer $r7, $r14, $r21;
        java.util.Set $r9;
        java.util.stream.Stream $r10, $r11;
        java.util.stream.Collector $r12;
        java.lang.Object $r13, $r16, $r17, $r19;
        java.util.List $r18, r23;
        android.content.integrity.Rule $r20;
        boolean z0, $z1, $z2;
        java.util.Iterator r24, r26;
        java.lang.String r25;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: com.android.server.integrity.model.ByteTrackedOutputStream;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "serializeRuleList should never be called with null rule list.");

        $r5 = new com.android.server.integrity.model.BitOutputStream;

        specialinvoke $r5.<com.android.server.integrity.model.BitOutputStream: void <init>(java.io.OutputStream)>(r2);

        $r6 = new java.util.LinkedHashMap;

        specialinvoke $r6.<java.util.LinkedHashMap: void <init>()>();

        $i0 = virtualinvoke r2.<com.android.server.integrity.model.ByteTrackedOutputStream: int getWrittenBytesCount()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("START_KEY", $r7);

        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.stream.Stream stream()>();

        $r11 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream sorted()>();

        $r12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r12);

        r23 = (java.util.List) $r13;

        i3 = 0;

        r24 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r16 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.lang.String) $r16;

        i4 = i3;

        if i3 < 50 goto label4;

        $i2 = virtualinvoke r2.<com.android.server.integrity.model.ByteTrackedOutputStream: int getWrittenBytesCount()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, $r21);

        i4 = 0;

     label4:
        $r17 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r25);

        $r18 = (java.util.List) $r17;

        r26 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r19 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (android.content.integrity.Rule) $r19;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeRule(android.content.integrity.Rule,com.android.server.integrity.model.BitOutputStream)>($r20, $r5);

        virtualinvoke $r5.<com.android.server.integrity.model.BitOutputStream: void flush()>();

        i4 = i4 + 1;

        goto label5;

     label6:
        i3 = i4;

        goto label3;

     label7:
        $i1 = virtualinvoke r2.<com.android.server.integrity.model.ByteTrackedOutputStream: int getWrittenBytesCount()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("END_KEY", $r14);

        return $r6;
    }

    private void serializeStringValue(java.lang.String, boolean, com.android.server.integrity.model.BitOutputStream) throws java.io.IOException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        boolean z0;
        com.android.server.integrity.model.BitOutputStream r1;
        int i0, $i1, i3;
        java.lang.IllegalArgumentException $r2;
        byte $b2;
        java.lang.String r3;
        byte[] r4;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.integrity.model.BitOutputStream;

        if r3 == null goto label3;

        r4 = staticinvoke <com.android.server.integrity.serializer.RuleBinarySerializer: byte[] getBytesForString(java.lang.String,boolean)>(r3, z0);

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(boolean)>(z0);

        $i1 = lengthof r4;

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(8, $i1);

        i0 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $b2 = r4[i3];

        virtualinvoke r1.<com.android.server.integrity.model.BitOutputStream: void setNext(int,int)>(8, $b2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("String value can not be null.");

        throw $r2;
    }

    private void verifySize(java.util.Map, int)
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        int i0, i1;
        java.util.Collection $r1;
        java.util.stream.Stream $r2, $r4;
        com.android.server.integrity.serializer.'-$$Lambda$RuleBinarySerializer$zQONQpJbeFriqC_n-BZzfoN_XZk' $r3;
        com.android.server.integrity.serializer.'-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw' $r5;
        java.util.stream.Collector $r6;
        java.lang.Object $r7;
        java.lang.Integer $r8;
        java.lang.String $r15;
        java.util.Map r16;
        java.lang.StringBuilder r18;
        java.lang.IllegalArgumentException r19;
        java.util.function.Function r20;
        java.util.function.ToIntFunction r21;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r16 := @parameter0: java.util.Map;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r16.<java.util.Map: java.util.Collection values()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.stream.Stream stream()>();

        $r3 = <com.android.server.integrity.serializer._$$Lambda$RuleBinarySerializer$zQONQpJbeFriqC_n_BZzfoN_XZk: com.android.server.integrity.serializer.'-$$Lambda$RuleBinarySerializer$zQONQpJbeFriqC_n-BZzfoN_XZk' INSTANCE>;

        r20 = (java.util.function.Function) $r3;

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r20);

        $r5 = <com.android.server.integrity.serializer._$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw: com.android.server.integrity.serializer.'-$$Lambda$UV1wDVoVlbcxpr8zevj_aMFtUGw' INSTANCE>;

        r21 = (java.util.function.ToIntFunction) $r5;

        $r6 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector summingInt(java.util.function.ToIntFunction)>(r21);

        $r7 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r6);

        $r8 = (java.lang.Integer) $r7;

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if i1 > i0 goto label1;

        return;

     label1:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many rules provided in the indexing group. Provided ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" limit ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r19 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r19;
    }

    public void serialize(java.util.List, java.util.Optional, java.io.OutputStream, java.io.OutputStream) throws com.android.server.integrity.serializer.RuleSerializeException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        java.io.OutputStream r1, r29;
        com.android.server.integrity.model.ByteTrackedOutputStream r2;
        int $i0, $i1;
        java.lang.String $r5, $r26;
        java.lang.Integer $r6, $r9, $r12, $r15, $r18, $r21;
        java.lang.Object $r7, $r10, $r13, $r16, $r19, $r22;
        java.util.Map $r8, $r11, $r14, $r17, $r20, $r23, r30;
        java.lang.Exception $r24;
        com.android.server.integrity.serializer.RuleSerializeException $r25;
        java.util.List r27;
        java.util.Optional r28;
        java.util.LinkedHashMap r31, r32, r33;
        com.android.server.integrity.model.BitOutputStream r34;
        java.lang.IllegalArgumentException r35, r38;
        java.lang.StringBuilder r36;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r27 := @parameter0: java.util.List;

        r28 := @parameter1: java.util.Optional;

        r29 := @parameter2: java.io.OutputStream;

        r1 := @parameter3: java.io.OutputStream;

        if r27 == null goto label09;

     label01:
        $i0 = interfaceinvoke r27.<java.util.List: int size()>();

        if $i0 > 200000 goto label07;

     label02:
        r30 = staticinvoke <com.android.server.integrity.serializer.RuleIndexingDetailsIdentifier: java.util.Map splitRulesIntoIndexBuckets(java.util.List)>(r27);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r7 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.util.Map) $r7;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void verifySize(java.util.Map,int)>($r8, 100000);

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r10 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = (java.util.Map) $r10;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void verifySize(java.util.Map,int)>($r11, 100000);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r13 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (java.util.Map) $r13;

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void verifySize(java.util.Map,int)>($r14, 1000);

        r2 = new com.android.server.integrity.model.ByteTrackedOutputStream;

        specialinvoke r2.<com.android.server.integrity.model.ByteTrackedOutputStream: void <init>(java.io.OutputStream)>(r29);

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeRuleFileMetadata(java.util.Optional,com.android.server.integrity.model.ByteTrackedOutputStream)>(r28, r2);

     label03:
        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r16 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $r17 = (java.util.Map) $r16;

        r31 = specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: java.util.LinkedHashMap serializeRuleList(java.util.Map,com.android.server.integrity.model.ByteTrackedOutputStream)>($r17, r2);

     label04:
        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r19 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $r20 = (java.util.Map) $r19;

        r32 = specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: java.util.LinkedHashMap serializeRuleList(java.util.Map,com.android.server.integrity.model.ByteTrackedOutputStream)>($r20, r2);

     label05:
        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r22 = interfaceinvoke r30.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.util.Map) $r22;

        r33 = specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: java.util.LinkedHashMap serializeRuleList(java.util.Map,com.android.server.integrity.model.ByteTrackedOutputStream)>($r23, r2);

        r34 = new com.android.server.integrity.model.BitOutputStream;

        specialinvoke r34.<com.android.server.integrity.model.BitOutputStream: void <init>(java.io.OutputStream)>(r1);

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIndexGroup(java.util.LinkedHashMap,com.android.server.integrity.model.BitOutputStream,boolean)>(r31, r34, 1);

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIndexGroup(java.util.LinkedHashMap,com.android.server.integrity.model.BitOutputStream,boolean)>(r32, r34, 1);

        specialinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serializeIndexGroup(java.util.LinkedHashMap,com.android.server.integrity.model.BitOutputStream,boolean)>(r33, r34, 0);

        virtualinvoke r34.<com.android.server.integrity.model.BitOutputStream: void flush()>();

     label06:
        return;

     label07:
        r35 = new java.lang.IllegalArgumentException;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many rules provided: ");

        $i1 = interfaceinvoke r27.<java.util.List: int size()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r35;

     label08:
        $r24 := @caughtexception;

        goto label10;

     label09:
        r38 = new java.lang.IllegalArgumentException;

        specialinvoke r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null rules cannot be serialized.");

        throw r38;

     label10:
        $r25 = new com.android.server.integrity.serializer.RuleSerializeException;

        $r26 = virtualinvoke $r24.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r25.<com.android.server.integrity.serializer.RuleSerializeException: void <init>(java.lang.String,java.lang.Throwable)>($r26, $r24);

        throw $r25;

        catch java.lang.Exception from label01 to label02 with label08;
        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.Exception from label03 to label04 with label08;
        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.Exception from label07 to label08 with label08;
        catch java.lang.Exception from label09 to label10 with label08;
    }

    public byte[] serialize(java.util.List, java.util.Optional) throws com.android.server.integrity.serializer.RuleSerializeException
    {
        com.android.server.integrity.serializer.RuleBinarySerializer r0;
        java.util.Optional r1;
        java.io.ByteArrayOutputStream r2, r3;
        java.lang.Exception $r4;
        com.android.server.integrity.serializer.RuleSerializeException $r5;
        java.lang.String $r6;
        java.util.List r7;
        byte[] r8;

        r0 := @this: com.android.server.integrity.serializer.RuleBinarySerializer;

        r7 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Optional;

     label1:
        r2 = new java.io.ByteArrayOutputStream;

        specialinvoke r2.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = new java.io.ByteArrayOutputStream;

        specialinvoke r3.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r0.<com.android.server.integrity.serializer.RuleBinarySerializer: void serialize(java.util.List,java.util.Optional,java.io.OutputStream,java.io.OutputStream)>(r7, r1, r2, r3);

        r8 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label2:
        return r8;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.android.server.integrity.serializer.RuleSerializeException;

        $r6 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r5.<com.android.server.integrity.serializer.RuleSerializeException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r4);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.integrity.serializer.RuleBinarySerializer: int TOTAL_RULE_SIZE_LIMIT> = 200000;

        <com.android.server.integrity.serializer.RuleBinarySerializer: int NONINDEXED_RULE_SIZE_LIMIT> = 1000;

        <com.android.server.integrity.serializer.RuleBinarySerializer: int INDEXED_RULE_SIZE_LIMIT> = 100000;

        return;
    }
}
