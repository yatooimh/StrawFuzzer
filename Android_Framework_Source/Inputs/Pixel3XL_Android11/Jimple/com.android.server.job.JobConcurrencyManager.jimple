class com.android.server.job.JobConcurrencyManager extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int MAX_JOB_CONTEXTS_COUNT;
    private static final int SYSTEM_STATE_REFRESH_MIN_INTERVAL;
    private static final java.lang.String TAG;
    private final com.android.server.job.JobSchedulerService$Constants mConstants;
    private final android.content.Context mContext;
    private boolean mCurrentInteractiveState;
    private boolean mEffectiveInteractiveState;
    private final android.os.Handler mHandler;
    private final com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker;
    private int mLastMemoryTrimLevel;
    private long mLastScreenOffRealtime;
    private long mLastScreenOnRealtime;
    private final java.lang.Object mLock;
    private com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts;
    private long mNextSystemStateRefreshTime;
    private android.os.PowerManager mPowerManager;
    private final java.lang.Runnable mRampUpForScreenOff;
    private final android.content.BroadcastReceiver mReceiver;
    com.android.server.job.controllers.JobStatus[] mRecycledAssignContextIdToJobMap;
    int[] mRecycledPreferredUidForContext;
    boolean[] mRecycledSlotChanged;
    private final com.android.server.job.JobSchedulerService mService;
    private final com.android.internal.util.StatLogger mStatLogger;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.job.JobConcurrencyManager: java.lang.String TAG> = "JobScheduler";

        <com.android.server.job.JobConcurrencyManager: int SYSTEM_STATE_REFRESH_MIN_INTERVAL> = 1000;

        <com.android.server.job.JobConcurrencyManager: int MAX_JOB_CONTEXTS_COUNT> = 16;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        <com.android.server.job.JobConcurrencyManager: boolean DEBUG> = $z0;

        return;
    }

    void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobConcurrencyManager r0;
        com.android.server.job.JobSchedulerService r1;
        com.android.server.job.controllers.JobStatus[] $r2;
        boolean[] $r3;
        int[] $r4;
        com.android.server.job.JobConcurrencyManager$JobCountTracker $r5;
        com.android.internal.util.StatLogger $r6;
        java.lang.String[] $r7;
        com.android.server.job.JobConcurrencyManager$1 $r8;
        com.android.server.job._$$Lambda$JobConcurrencyManager$5dmb0pQscXPwEG6SBnhs7aCwpSs $r9;
        java.lang.Object $r10;
        com.android.server.job.JobSchedulerService$Constants $r11;
        android.content.Context $r12;
        android.os.Handler $r13;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (com.android.server.job.controllers.JobStatus)[16];

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.controllers.JobStatus[] mRecycledAssignContextIdToJobMap> = $r2;

        $r3 = newarray (boolean)[16];

        r0.<com.android.server.job.JobConcurrencyManager: boolean[] mRecycledSlotChanged> = $r3;

        $r4 = newarray (int)[16];

        r0.<com.android.server.job.JobConcurrencyManager: int[] mRecycledPreferredUidForContext> = $r4;

        $r5 = new com.android.server.job.JobConcurrencyManager$JobCountTracker;

        specialinvoke $r5.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void <init>()>();

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker> = $r5;

        $r6 = new com.android.internal.util.StatLogger;

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = "assignJobsToContexts";

        $r7[1] = "refreshSystemState";

        specialinvoke $r6.<com.android.internal.util.StatLogger: void <init>(java.lang.String[])>($r7);

        r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger> = $r6;

        $r8 = new com.android.server.job.JobConcurrencyManager$1;

        specialinvoke $r8.<com.android.server.job.JobConcurrencyManager$1: void <init>(com.android.server.job.JobConcurrencyManager)>(r0);

        r0.<com.android.server.job.JobConcurrencyManager: android.content.BroadcastReceiver mReceiver> = $r8;

        $r9 = new com.android.server.job._$$Lambda$JobConcurrencyManager$5dmb0pQscXPwEG6SBnhs7aCwpSs;

        specialinvoke $r9.<com.android.server.job._$$Lambda$JobConcurrencyManager$5dmb0pQscXPwEG6SBnhs7aCwpSs: void <init>(com.android.server.job.JobConcurrencyManager)>(r0);

        r0.<com.android.server.job.JobConcurrencyManager: java.lang.Runnable mRampUpForScreenOff> = $r9;

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService> = r1;

        $r10 = r1.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        r0.<com.android.server.job.JobConcurrencyManager: java.lang.Object mLock> = $r10;

        $r11 = r1.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$Constants mConstants> = $r11;

        $r12 = virtualinvoke r1.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        r0.<com.android.server.job.JobConcurrencyManager: android.content.Context mContext> = $r12;

        $r13 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        r0.<com.android.server.job.JobConcurrencyManager: android.os.Handler mHandler> = $r13;

        return;
    }

    static void access$000(com.android.server.job.JobConcurrencyManager, boolean)
    {
        com.android.server.job.JobConcurrencyManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.job.JobConcurrencyManager;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.job.JobConcurrencyManager: void onInteractiveStateChanged(boolean)>(z0);

        return;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        return $z0;
    }

    private void assignJobsToContextsInternalLocked()
    {
        com.android.server.job.JobConcurrencyManager r0;
        com.android.server.job.JobPackageTracker r1;
        java.util.ArrayList r2;
        java.util.List r3, r4, $r57;
        com.android.server.job.controllers.JobStatus[] r5;
        boolean[] r6;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z16;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i15, $i16, $i18, i20, i21, i22, i24, i26, i27, i28, i29, i30, i31, i33, i34, $i35;
        com.android.server.job.JobSchedulerService $r7, $r8, $r9, $r10, $r50, $r53, $r56;
        com.android.server.job.JobSchedulerService$MaxJobCounts $r11, $r13, $r14;
        com.android.server.job.JobConcurrencyManager$JobCountTracker $r12, $r15, $r16, $r17, $r18, $r49, $r51, $r54, $r59;
        java.lang.Object $r19, $r21, $r24, $r30, $r38, $r42, $r48, $r52, $r58;
        com.android.server.job.JobServiceContext $r20, $r22, $r25, $r39, $r43, r62;
        com.android.server.job.controllers.JobStatus $r23, $r44, r63, r64, r65, r66, r69;
        java.lang.StringBuilder $r26, $r32, $r40;
        java.lang.String $r29, $r37, $r46, $r47, $r55, $r60;
        com.android.server.job.controllers.StateController $r31;
        int[] r61, r67;
        byte b25;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        $z2 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z2 == 0 goto label01;

        $r60 = specialinvoke r0.<com.android.server.job.JobConcurrencyManager: java.lang.String printPendingQueueLocked()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r60);

     label01:
        $r7 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        r1 = $r7.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        $r8 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        r2 = $r8.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r9 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        r3 = $r9.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r10 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        r4 = $r10.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        specialinvoke r0.<com.android.server.job.JobConcurrencyManager: void updateMaxCountsLocked()>();

        r5 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.controllers.JobStatus[] mRecycledAssignContextIdToJobMap>;

        r6 = r0.<com.android.server.job.JobConcurrencyManager: boolean[] mRecycledSlotChanged>;

        r61 = r0.<com.android.server.job.JobConcurrencyManager: int[] mRecycledPreferredUidForContext>;

        $r12 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        $r11 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts>;

        $i1 = virtualinvoke $r11.<com.android.server.job.JobSchedulerService$MaxJobCounts: int getMaxTotal()>();

        $r13 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts>;

        $i2 = virtualinvoke $r13.<com.android.server.job.JobSchedulerService$MaxJobCounts: int getMaxBg()>();

        $r14 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts>;

        $i3 = virtualinvoke $r14.<com.android.server.job.JobSchedulerService$MaxJobCounts: int getMinBg()>();

        virtualinvoke $r12.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void reset(int,int,int)>($i1, $i2, $i3);

        i20 = 0;

     label02:
        if i20 >= 16 goto label04;

        $r56 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        $r57 = $r56.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r58 = interfaceinvoke $r57.<java.util.List: java.lang.Object get(int)>(i20);

        r62 = (com.android.server.job.JobServiceContext) $r58;

        r63 = virtualinvoke r62.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        r5[i20] = r63;

        if r63 == null goto label03;

        $r59 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        $z12 = specialinvoke r0.<com.android.server.job.JobConcurrencyManager: boolean isFgJob(com.android.server.job.controllers.JobStatus)>(r63);

        virtualinvoke $r59.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void incrementRunningJobCount(boolean)>($z12);

     label03:
        r6[i20] = 0;

        $i18 = virtualinvoke r62.<com.android.server.job.JobServiceContext: int getPreferredUid()>();

        r61[i20] = $i18;

        i20 = i20 + 1;

        goto label02;

     label04:
        $z3 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z3 == 0 goto label05;

        $r55 = staticinvoke <com.android.server.job.JobConcurrencyManager: java.lang.String printContextIdToJobMap(com.android.server.job.controllers.JobStatus[],java.lang.String)>(r5, "running jobs initial");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r55);

     label05:
        i21 = 0;

     label06:
        i22 = interfaceinvoke r2.<java.util.List: int size()>();

        if i21 >= i22 goto label09;

        $r52 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i21);

        r64 = (com.android.server.job.controllers.JobStatus) $r52;

        $i15 = staticinvoke <com.android.server.job.JobConcurrencyManager: int findJobContextIdFromMap(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus[])>(r64, r5);

        if $i15 == -1 goto label07;

        goto label08;

     label07:
        $r53 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        $i16 = virtualinvoke $r53.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>(r64);

        r64.<com.android.server.job.controllers.JobStatus: int lastEvaluatedPriority> = $i16;

        $r54 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        $z11 = specialinvoke r0.<com.android.server.job.JobConcurrencyManager: boolean isFgJob(com.android.server.job.controllers.JobStatus)>(r64);

        virtualinvoke $r54.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void incrementPendingJobCount(boolean)>($z11);

     label08:
        i21 = i21 + 1;

        goto label06;

     label09:
        $r15 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        virtualinvoke $r15.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void onCountDone()>();

        i24 = 0;

        b25 = -1;

     label10:
        $i4 = interfaceinvoke r2.<java.util.List: int size()>();

        if i24 >= $i4 goto label25;

        $r48 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i24);

        r65 = (com.android.server.job.controllers.JobStatus) $r48;

        i26 = staticinvoke <com.android.server.job.JobConcurrencyManager: int findJobContextIdFromMap(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus[])>(r65, r5);

        if i26 == b25 goto label11;

        goto label24;

     label11:
        z0 = specialinvoke r0.<com.android.server.job.JobConcurrencyManager: boolean isFgJob(com.android.server.job.controllers.JobStatus)>(r65);

        i27 = 2147483647;

        i28 = -1;

        i29 = 0;

     label12:
        if i29 >= 16 goto label21;

        r66 = r5[i29];

        i30 = r61[i29];

        if r66 != null goto label17;

        $i14 = virtualinvoke r65.<com.android.server.job.controllers.JobStatus: int getUid()>();

        if i30 == $i14 goto label14;

        if i30 != -1 goto label13;

        goto label14;

     label13:
        z13 = 0;

        goto label15;

     label14:
        z13 = 1;

     label15:
        if z13 == 0 goto label16;

        i31 = i27;

        $r51 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        $z10 = virtualinvoke $r51.<com.android.server.job.JobConcurrencyManager$JobCountTracker: boolean canJobStart(boolean)>(z0);

        if $z10 == 0 goto label20;

        z14 = 1;

        goto label22;

     label16:
        i31 = i27;

        goto label20;

     label17:
        $i11 = virtualinvoke r66.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i12 = virtualinvoke r65.<com.android.server.job.controllers.JobStatus: int getUid()>();

        if $i11 == $i12 goto label18;

        i31 = i27;

        goto label20;

     label18:
        $r50 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        i0 = virtualinvoke $r50.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>(r66);

        $i13 = r65.<com.android.server.job.controllers.JobStatus: int lastEvaluatedPriority>;

        if i0 < $i13 goto label19;

        i31 = i27;

        goto label20;

     label19:
        i31 = i27;

        if i27 <= i0 goto label20;

        i28 = i29;

        i31 = i0;

     label20:
        i29 = i29 + 1;

        i27 = i31;

        goto label12;

     label21:
        i29 = i28;

        z14 = 0;

     label22:
        r67 = r61;

        if i29 == -1 goto label23;

        r5[i29] = r65;

        r6[i29] = 1;

     label23:
        b25 = -1;

        r61 = r67;

        if z14 == 0 goto label24;

        $r49 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        virtualinvoke $r49.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void onStartingNewJob(boolean)>(z0);

        r61 = r67;

        b25 = -1;

     label24:
        i24 = i24 + 1;

        goto label10;

     label25:
        $z4 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z4 == 0 goto label26;

        $r47 = staticinvoke <com.android.server.job.JobConcurrencyManager: java.lang.String printContextIdToJobMap(com.android.server.job.controllers.JobStatus[],java.lang.String)>(r5, "running jobs final");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r47);

     label26:
        $r16 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        virtualinvoke $r16.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void logStatus()>();

        $r17 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        $i5 = virtualinvoke $r17.<com.android.server.job.JobConcurrencyManager$JobCountTracker: int getTotalRunningJobCountToNote()>();

        $r18 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        $i6 = virtualinvoke $r18.<com.android.server.job.JobConcurrencyManager$JobCountTracker: int getFgRunningJobCountToNote()>();

        virtualinvoke r1.<com.android.server.job.JobPackageTracker: void noteConcurrency(int,int)>($i5, $i6);

        i33 = 0;

     label27:
        if i33 >= 16 goto label36;

        z16 = 0;

        $z5 = r6[i33];

        if $z5 == 0 goto label34;

        $r21 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i33);

        $r22 = (com.android.server.job.JobServiceContext) $r21;

        $r23 = virtualinvoke $r22.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        if $r23 == null goto label29;

        $z9 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z9 == 0 goto label28;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preempting job: ");

        $r42 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i33);

        $r43 = (com.android.server.job.JobServiceContext) $r42;

        $r44 = virtualinvoke $r43.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r46);

     label28:
        $r38 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i33);

        $r39 = (com.android.server.job.JobServiceContext) $r38;

        virtualinvoke $r39.<com.android.server.job.JobServiceContext: void preemptExecutingJobLocked()>();

        z16 = 1;

        goto label34;

     label29:
        r69 = r5[i33];

        $z6 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z6 == 0 goto label30;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("About to run job on context ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i33);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", job: ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r69);

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r37);

     label30:
        i34 = 0;

     label31:
        $i35 = interfaceinvoke r4.<java.util.List: int size()>();

        if i34 >= $i35 goto label32;

        $r30 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i34);

        $r31 = (com.android.server.job.controllers.StateController) $r30;

        virtualinvoke $r31.<com.android.server.job.controllers.StateController: void prepareForExecutionLocked(com.android.server.job.controllers.JobStatus)>(r69);

        i34 = i34 + 1;

        goto label31;

     label32:
        $r24 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i33);

        $r25 = (com.android.server.job.JobServiceContext) $r24;

        $z7 = virtualinvoke $r25.<com.android.server.job.JobServiceContext: boolean executeRunnableJob(com.android.server.job.controllers.JobStatus)>(r69);

        if $z7 != 0 goto label33;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error executing ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r69);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r29);

     label33:
        z16 = 0;

        $z8 = interfaceinvoke r2.<java.util.List: boolean remove(java.lang.Object)>(r69);

        if $z8 == 0 goto label34;

        virtualinvoke r1.<com.android.server.job.JobPackageTracker: void noteNonpending(com.android.server.job.controllers.JobStatus)>(r69);

        z16 = 0;

     label34:
        if z16 != 0 goto label35;

        $r19 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i33);

        $r20 = (com.android.server.job.JobServiceContext) $r19;

        virtualinvoke $r20.<com.android.server.job.JobServiceContext: void clearPreferredUid()>();

     label35:
        i33 = i33 + 1;

        goto label27;

     label36:
        return;
    }

    private static int findJobContextIdFromMap(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus[])
    {
        com.android.server.job.controllers.JobStatus r0, $r2, $r3;
        com.android.server.job.controllers.JobStatus[] r1;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus[];

        i3 = 0;

     label1:
        $i0 = lengthof r1;

        if i3 >= $i0 goto label3;

        $r2 = r1[i3];

        if $r2 == null goto label2;

        $r3 = r1[i3];

        $i1 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i2 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z0 = virtualinvoke $r3.<com.android.server.job.controllers.JobStatus: boolean matches(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    private boolean isFgJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobConcurrencyManager r0;
        com.android.server.job.controllers.JobStatus r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $i0 = r1.<com.android.server.job.controllers.JobStatus: int lastEvaluatedPriority>;

        if $i0 < 40 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void lambda$5dmb0pQscXPwEG6SBnhs7aCwpSs(com.android.server.job.JobConcurrencyManager)
    {
        com.android.server.job.JobConcurrencyManager r0;

        r0 := @parameter0: com.android.server.job.JobConcurrencyManager;

        specialinvoke r0.<com.android.server.job.JobConcurrencyManager: void rampUpForScreenOff()>();

        return;
    }

    private void onInteractiveStateChanged(boolean)
    {
        com.android.server.job.JobConcurrencyManager r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        long l0, $l2;
        java.time.Clock $r2;
        com.android.server.job.JobSchedulerService$Constants $r3;
        android.util.KeyValueListParser$IntValue $r4;
        android.os.Handler $r5, $r8;
        java.lang.Runnable $r6, $r7;
        int $i1;
        java.lang.String $r11;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.job.JobConcurrencyManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<com.android.server.job.JobConcurrencyManager: boolean mCurrentInteractiveState>;

        if $z1 != z0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<com.android.server.job.JobConcurrencyManager: boolean mCurrentInteractiveState> = z0;

        $z2 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z2 == 0 goto label04;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interactive: ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r11);

     label04:
        $r2 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

     label05:
        if z0 == 0 goto label08;

     label06:
        r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOnRealtime> = l0;

        r0.<com.android.server.job.JobConcurrencyManager: boolean mEffectiveInteractiveState> = 1;

        $r8 = r0.<com.android.server.job.JobConcurrencyManager: android.os.Handler mHandler>;

        $r7 = r0.<com.android.server.job.JobConcurrencyManager: java.lang.Runnable mRampUpForScreenOff>;

        virtualinvoke $r8.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r7);

     label07:
        goto label09;

     label08:
        r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOffRealtime> = l0;

        $r5 = r0.<com.android.server.job.JobConcurrencyManager: android.os.Handler mHandler>;

        $r6 = r0.<com.android.server.job.JobConcurrencyManager: java.lang.Runnable mRampUpForScreenOff>;

        $r3 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $r4 = $r3.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS>;

        $i1 = virtualinvoke $r4.<android.util.KeyValueListParser$IntValue: int getValue()>();

        $l2 = (long) $i1;

        virtualinvoke $r5.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r6, $l2);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r12 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private static java.lang.String printContextIdToJobMap(com.android.server.job.controllers.JobStatus[], java.lang.String)
    {
        com.android.server.job.controllers.JobStatus[] r0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r5, $r6, r14;
        int $i1, i2, i3, i4;
        com.android.server.job.controllers.JobStatus $r8, $r10, $r11, r17;

        r0 := @parameter0: com.android.server.job.controllers.JobStatus[];

        r14 := @parameter1: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        i2 = 0;

     label1:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label6;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        r17 = r0[i2];

        if r17 != null goto label2;

        i3 = -1;

        goto label3;

     label2:
        $r8 = r0[i2];

        i3 = virtualinvoke $r8.<com.android.server.job.controllers.JobStatus: int getJobId()>();

     label3:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r10 = r0[i2];

        if $r10 != null goto label4;

        i4 = -1;

        goto label5;

     label4:
        $r11 = r0[i2];

        i4 = virtualinvoke $r11.<com.android.server.job.controllers.JobStatus: int getUid()>();

     label5:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        i2 = i2 + 1;

        goto label1;

     label6:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.lang.String printPendingQueueLocked()
    {
        com.android.server.job.JobConcurrencyManager r0;
        java.util.Iterator r2;
        com.android.server.job.controllers.JobStatus r3;
        java.lang.StringBuilder $r4;
        com.android.server.job.JobSchedulerService $r5;
        java.util.ArrayList $r6;
        boolean $z0;
        java.lang.String $r7;
        java.lang.Object $r8;
        android.app.job.JobInfo $r10;
        int $i0, $i1;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Pending queue: ");

        $r5 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        $r6 = $r5.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        r2 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.job.controllers.JobStatus) $r8;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r10 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $i0 = virtualinvoke $r10.<android.app.job.JobInfo: int getId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getUid()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        goto label1;

     label2:
        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private void rampUpForScreenOff()
    {
        com.android.server.job.JobConcurrencyManager r0;
        java.lang.Object r1;
        long l0, $l1, $l2, $l4, $l6, $l7;
        boolean $z0, $z1;
        byte $b3, $b8;
        java.time.Clock $r3;
        com.android.server.job.JobSchedulerService$Constants $r4;
        android.util.KeyValueListParser$IntValue $r5;
        int $i5;
        com.android.server.job.JobSchedulerService $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        r1 = r0.<com.android.server.job.JobConcurrencyManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.job.JobConcurrencyManager: boolean mEffectiveInteractiveState>;

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $l2 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOnRealtime>;

        $l1 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOffRealtime>;

        $b3 = $l2 cmp $l1;

        if $b3 <= 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $r3 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l0 = virtualinvoke $r3.<java.time.Clock: long millis()>();

        $l4 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOffRealtime>;

        $r4 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $r5 = $r4.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS>;

        $i5 = virtualinvoke $r5.<android.util.KeyValueListParser$IntValue: int getValue()>();

        $l6 = (long) $i5;

        $l7 = $l4 + $l6;

        $b8 = $l7 cmp l0;

        if $b8 <= 0 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        r0.<com.android.server.job.JobConcurrencyManager: boolean mEffectiveInteractiveState> = 0;

        $z1 = <com.android.server.job.JobConcurrencyManager: boolean DEBUG>;

        if $z1 == 0 goto label08;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "Ramping up concurrency");

     label08:
        $r6 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService mService>;

        virtualinvoke $r6.<com.android.server.job.JobSchedulerService: void maybeRunPendingJobsLocked()>();

        exitmonitor r1;

     label09:
        return;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void refreshSystemStateLocked()
    {
        com.android.server.job.JobConcurrencyManager r0;
        long l0, l1, $l2, $l4;
        java.time.Clock $r2;
        byte $b3;
        com.android.internal.util.StatLogger $r3, $r5;
        android.app.IActivityManager $r4;
        int $i5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        $r2 = <com.android.server.job.JobSchedulerService: java.time.Clock sUptimeMillisClock>;

        l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

        $l2 = r0.<com.android.server.job.JobConcurrencyManager: long mNextSystemStateRefreshTime>;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger>;

        l1 = virtualinvoke $r3.<com.android.internal.util.StatLogger: long getTime()>();

        $l4 = 1000L + l0;

        r0.<com.android.server.job.JobConcurrencyManager: long mNextSystemStateRefreshTime> = $l4;

        r0.<com.android.server.job.JobConcurrencyManager: int mLastMemoryTrimLevel> = 0;

     label2:
        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i5 = interfaceinvoke $r4.<android.app.IActivityManager: int getMemoryTrimLevel()>();

        r0.<com.android.server.job.JobConcurrencyManager: int mLastMemoryTrimLevel> = $i5;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r5 = r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r5.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(1, l1);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void updateMaxCountsLocked()
    {
        com.android.server.job.JobConcurrencyManager r0;
        int i0;
        boolean $z0;
        com.android.server.job.JobSchedulerService$Constants $r1, $r6;
        com.android.server.job.JobSchedulerService$MaxJobCounts $r2, $r3, $r4, $r5;
        com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel r7;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        specialinvoke r0.<com.android.server.job.JobConcurrencyManager: void refreshSystemStateLocked()>();

        $z0 = r0.<com.android.server.job.JobConcurrencyManager: boolean mEffectiveInteractiveState>;

        if $z0 == 0 goto label1;

        $r6 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$Constants mConstants>;

        r7 = $r6.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        goto label2;

     label1:
        $r1 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$Constants mConstants>;

        r7 = $r1.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

     label2:
        i0 = r0.<com.android.server.job.JobConcurrencyManager: int mLastMemoryTrimLevel>;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        $r5 = r7.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts normal>;

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts> = $r5;

        goto label6;

     label3:
        $r4 = r7.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts critical>;

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts> = $r4;

        goto label6;

     label4:
        $r3 = r7.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts low>;

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts> = $r3;

        goto label6;

     label5:
        $r2 = r7.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts moderate>;

        r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobSchedulerService$MaxJobCounts mMaxJobCounts> = $r2;

     label6:
        return;
    }

    void assignJobsToContextsLocked()
    {
        com.android.server.job.JobConcurrencyManager r0;
        long l0;
        com.android.internal.util.StatLogger $r1, $r2;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        $r1 = r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger>;

        l0 = virtualinvoke $r1.<com.android.internal.util.StatLogger: long getTime()>();

        specialinvoke r0.<com.android.server.job.JobConcurrencyManager: void assignJobsToContextsInternalLocked()>();

        $r2 = r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r2.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(0, l0);

        return;
    }

    public void dumpLocked(com.android.internal.util.IndentingPrintWriter, long, long)
    {
        com.android.server.job.JobConcurrencyManager r0;
        com.android.internal.util.IndentingPrintWriter r1;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l7;
        boolean z0, $z1;
        com.android.server.job.JobConcurrencyManager$JobCountTracker $r4;
        int $i8;
        com.android.internal.util.StatLogger $r5;
        java.lang.Throwable $r7;
        java.lang.String r9, r10;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Concurrency:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label1:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Screen state: current ");

        z0 = r0.<com.android.server.job.JobConcurrencyManager: boolean mCurrentInteractiveState>;

     label2:
        if z0 == 0 goto label3;

        r9 = "ON";

        goto label4;

     label3:
        r9 = "OFF";

     label4:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("  effective ");

        $z1 = r0.<com.android.server.job.JobConcurrencyManager: boolean mEffectiveInteractiveState>;

        if $z1 == 0 goto label6;

     label5:
        r10 = "ON";

        goto label7;

     label6:
        r10 = "OFF";

     label7:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r10);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Last screen ON: ");

        $l3 = l0 - l1;

        $l2 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOnRealtime>;

        $l4 = $l3 + $l2;

        staticinvoke <android.util.TimeUtils: void dumpTimeWithDelta(java.io.PrintWriter,long,long)>(r1, $l4, l0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Last screen OFF: ");

        $l6 = l0 - l1;

        $l5 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOffRealtime>;

        $l7 = $l6 + $l5;

        staticinvoke <android.util.TimeUtils: void dumpTimeWithDelta(java.io.PrintWriter,long,long)>(r1, $l7, l0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current max jobs:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  ");

        $r4 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mLastMemoryTrimLevel: ");

        $i8 = r0.<com.android.server.job.JobConcurrencyManager: int mLastMemoryTrimLevel>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r5 = r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r5.<com.android.internal.util.StatLogger: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

     label8:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;

     label9:
        $r7 := @caughtexception;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public void dumpProtoLocked(android.util.proto.ProtoOutputStream, long, long, long)
    {
        com.android.server.job.JobConcurrencyManager r0;
        android.util.proto.ProtoOutputStream r1;
        long l0, l1, $l2, $l3, $l4, $l5, l7, l8;
        boolean $z0, $z1;
        com.android.server.job.JobConcurrencyManager$JobCountTracker $r2;
        int $i6;
        com.android.internal.util.StatLogger $r3;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l7 := @parameter1: long;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        l8 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l7);

        $z0 = r0.<com.android.server.job.JobConcurrencyManager: boolean mCurrentInteractiveState>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, $z0);

        $z1 = r0.<com.android.server.job.JobConcurrencyManager: boolean mEffectiveInteractiveState>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, $z1);

        $l2 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOnRealtime>;

        $l3 = l1 - $l2;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529667L, $l3);

        $l4 = r0.<com.android.server.job.JobConcurrencyManager: long mLastScreenOffRealtime>;

        $l5 = l1 - $l4;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529668L, $l5);

        $r2 = r0.<com.android.server.job.JobConcurrencyManager: com.android.server.job.JobConcurrencyManager$JobCountTracker mJobCountTracker>;

        virtualinvoke $r2.<com.android.server.job.JobConcurrencyManager$JobCountTracker: void dumpProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268037L);

        $i6 = r0.<com.android.server.job.JobConcurrencyManager: int mLastMemoryTrimLevel>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464262L, $i6);

        $r3 = r0.<com.android.server.job.JobConcurrencyManager: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r3.<com.android.internal.util.StatLogger: void dumpProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268039L);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l8);

        return;
    }

    public void onSystemReady()
    {
        com.android.server.job.JobConcurrencyManager r0;
        android.content.Context $r2, $r7;
        java.lang.Object $r3;
        android.os.PowerManager $r4, $r9;
        android.content.IntentFilter $r5;
        android.content.BroadcastReceiver $r6;
        boolean $z0;

        r0 := @this: com.android.server.job.JobConcurrencyManager;

        $r2 = r0.<com.android.server.job.JobConcurrencyManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r4 = (android.os.PowerManager) $r3;

        r0.<com.android.server.job.JobConcurrencyManager: android.os.PowerManager mPowerManager> = $r4;

        $r5 = new android.content.IntentFilter;

        specialinvoke $r5.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        $r7 = r0.<com.android.server.job.JobConcurrencyManager: android.content.Context mContext>;

        $r6 = r0.<com.android.server.job.JobConcurrencyManager: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r7.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r6, $r5);

        $r9 = r0.<com.android.server.job.JobConcurrencyManager: android.os.PowerManager mPowerManager>;

        $z0 = virtualinvoke $r9.<android.os.PowerManager: boolean isInteractive()>();

        specialinvoke r0.<com.android.server.job.JobConcurrencyManager: void onInteractiveStateChanged(boolean)>($z0);

        return;
    }
}
