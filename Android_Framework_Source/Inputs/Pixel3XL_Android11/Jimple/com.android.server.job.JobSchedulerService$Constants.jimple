public class com.android.server.job.JobSchedulerService$Constants extends java.lang.Object
{
    private static final int DEFAULT_API_QUOTA_SCHEDULE_COUNT;
    private static final boolean DEFAULT_API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT;
    private static final boolean DEFAULT_API_QUOTA_SCHEDULE_THROW_EXCEPTION;
    private static final long DEFAULT_API_QUOTA_SCHEDULE_WINDOW_MS;
    private static final float DEFAULT_CONN_CONGESTION_DELAY_FRAC;
    private static final float DEFAULT_CONN_PREFETCH_RELAX_FRAC;
    private static final boolean DEFAULT_ENABLE_API_QUOTAS;
    private static final float DEFAULT_HEAVY_USE_FACTOR;
    private static final long DEFAULT_MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS;
    private static final long DEFAULT_MIN_EXP_BACKOFF_TIME;
    private static final long DEFAULT_MIN_LINEAR_BACKOFF_TIME;
    private static final int DEFAULT_MIN_READY_NON_ACTIVE_JOBS_COUNT;
    private static final float DEFAULT_MODERATE_USE_FACTOR;
    private static final java.lang.String DEPRECATED_KEY_BG_CRITICAL_JOB_COUNT;
    private static final java.lang.String DEPRECATED_KEY_BG_LOW_JOB_COUNT;
    private static final java.lang.String DEPRECATED_KEY_BG_MODERATE_JOB_COUNT;
    private static final java.lang.String DEPRECATED_KEY_BG_NORMAL_JOB_COUNT;
    private static final java.lang.String DEPRECATED_KEY_FG_JOB_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MAX_STANDARD_RESCHEDULE_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MAX_WORK_RESCHEDULE_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_BATTERY_NOT_LOW_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_CHARGING_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_CONNECTIVITY_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_CONTENT_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_IDLE_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_READY_JOBS_COUNT;
    private static final java.lang.String DEPRECATED_KEY_MIN_STORAGE_NOT_LOW_COUNT;
    private static final java.lang.String DEPRECATED_KEY_STANDBY_FREQUENT_BEATS;
    private static final java.lang.String DEPRECATED_KEY_STANDBY_HEARTBEAT_TIME;
    private static final java.lang.String DEPRECATED_KEY_STANDBY_RARE_BEATS;
    private static final java.lang.String DEPRECATED_KEY_STANDBY_WORKING_BEATS;
    private static final java.lang.String DEPRECATED_KEY_USE_HEARTBEATS;
    private static final java.lang.String KEY_API_QUOTA_SCHEDULE_COUNT;
    private static final java.lang.String KEY_API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT;
    private static final java.lang.String KEY_API_QUOTA_SCHEDULE_THROW_EXCEPTION;
    private static final java.lang.String KEY_API_QUOTA_SCHEDULE_WINDOW_MS;
    private static final java.lang.String KEY_CONN_CONGESTION_DELAY_FRAC;
    private static final java.lang.String KEY_CONN_PREFETCH_RELAX_FRAC;
    private static final java.lang.String KEY_ENABLE_API_QUOTAS;
    private static final java.lang.String KEY_HEAVY_USE_FACTOR;
    private static final java.lang.String KEY_MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS;
    private static final java.lang.String KEY_MIN_EXP_BACKOFF_TIME;
    private static final java.lang.String KEY_MIN_LINEAR_BACKOFF_TIME;
    private static final java.lang.String KEY_MIN_READY_NON_ACTIVE_JOBS_COUNT;
    private static final java.lang.String KEY_MODERATE_USE_FACTOR;
    public int API_QUOTA_SCHEDULE_COUNT;
    public boolean API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT;
    public boolean API_QUOTA_SCHEDULE_THROW_EXCEPTION;
    public long API_QUOTA_SCHEDULE_WINDOW_MS;
    public float CONN_CONGESTION_DELAY_FRAC;
    public float CONN_PREFETCH_RELAX_FRAC;
    public boolean ENABLE_API_QUOTAS;
    float HEAVY_USE_FACTOR;
    final com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF;
    final com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON;
    long MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS;
    long MIN_EXP_BACKOFF_TIME;
    long MIN_LINEAR_BACKOFF_TIME;
    int MIN_READY_NON_ACTIVE_JOBS_COUNT;
    float MODERATE_USE_FACTOR;
    final android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS;
    private final android.util.KeyValueListParser mParser;

    public void <init>()
    {
        com.android.server.job.JobSchedulerService$Constants r0;
        com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel $r1, $r6;
        com.android.server.job.JobSchedulerService$MaxJobCounts $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        android.util.KeyValueListParser$IntValue $r11;
        android.util.KeyValueListParser $r12;

        r0 := @this: com.android.server.job.JobSchedulerService$Constants;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService$Constants: int MIN_READY_NON_ACTIVE_JOBS_COUNT> = 5;

        r0.<com.android.server.job.JobSchedulerService$Constants: long MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS> = 1860000L;

        r0.<com.android.server.job.JobSchedulerService$Constants: float HEAVY_USE_FACTOR> = 0.9F;

        r0.<com.android.server.job.JobSchedulerService$Constants: float MODERATE_USE_FACTOR> = 0.5F;

        $r1 = new com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel;

        $r2 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r2.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(8, "max_job_total_on_normal", 6, "max_job_max_bg_on_normal", 2, "max_job_min_bg_on_normal");

        $r3 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r3.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(8, "max_job_total_on_moderate", 4, "max_job_max_bg_on_moderate", 2, "max_job_min_bg_on_moderate");

        $r4 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r4.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(5, "max_job_total_on_low", 1, "max_job_max_bg_on_low", 1, "max_job_min_bg_on_low");

        $r5 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r5.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(5, "max_job_total_on_critical", 1, "max_job_max_bg_on_critical", 1, "max_job_min_bg_on_critical");

        specialinvoke $r1.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: void <init>(com.android.server.job.JobSchedulerService$MaxJobCounts,com.android.server.job.JobSchedulerService$MaxJobCounts,com.android.server.job.JobSchedulerService$MaxJobCounts,com.android.server.job.JobSchedulerService$MaxJobCounts)>($r2, $r3, $r4, $r5);

        r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON> = $r1;

        $r6 = new com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel;

        $r7 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r7.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(10, "max_job_total_off_normal", 6, "max_job_max_bg_off_normal", 2, "max_job_min_bg_off_normal");

        $r8 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r8.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(10, "max_job_total_off_moderate", 4, "max_job_max_bg_off_moderate", 2, "max_job_min_bg_off_moderate");

        $r9 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r9.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(5, "max_job_total_off_low", 1, "max_job_max_bg_off_low", 1, "max_job_min_bg_off_low");

        $r10 = new com.android.server.job.JobSchedulerService$MaxJobCounts;

        specialinvoke $r10.<com.android.server.job.JobSchedulerService$MaxJobCounts: void <init>(int,java.lang.String,int,java.lang.String,int,java.lang.String)>(5, "max_job_total_off_critical", 1, "max_job_max_bg_off_critical", 1, "max_job_min_bg_off_critical");

        specialinvoke $r6.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: void <init>(com.android.server.job.JobSchedulerService$MaxJobCounts,com.android.server.job.JobSchedulerService$MaxJobCounts,com.android.server.job.JobSchedulerService$MaxJobCounts,com.android.server.job.JobSchedulerService$MaxJobCounts)>($r7, $r8, $r9, $r10);

        r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF> = $r6;

        $r11 = new android.util.KeyValueListParser$IntValue;

        specialinvoke $r11.<android.util.KeyValueListParser$IntValue: void <init>(java.lang.String,int)>("screen_off_job_concurrency_increase_delay_ms", 30000);

        r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS> = $r11;

        r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_LINEAR_BACKOFF_TIME> = 10000L;

        r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_EXP_BACKOFF_TIME> = 10000L;

        r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_CONGESTION_DELAY_FRAC> = 0.5F;

        r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_PREFETCH_RELAX_FRAC> = 0.5F;

        r0.<com.android.server.job.JobSchedulerService$Constants: boolean ENABLE_API_QUOTAS> = 1;

        r0.<com.android.server.job.JobSchedulerService$Constants: int API_QUOTA_SCHEDULE_COUNT> = 250;

        r0.<com.android.server.job.JobSchedulerService$Constants: long API_QUOTA_SCHEDULE_WINDOW_MS> = 60000L;

        r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_THROW_EXCEPTION> = 1;

        r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT> = 0;

        $r12 = new android.util.KeyValueListParser;

        specialinvoke $r12.<android.util.KeyValueListParser: void <init>(char)>(44);

        r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser> = $r12;

        return;
    }

    void dump(android.util.proto.ProtoOutputStream)
    {
        com.android.server.job.JobSchedulerService$Constants r0;
        android.util.proto.ProtoOutputStream r1;
        int $i0, $i4;
        long $l1, $l2, $l3, $l5;
        float $f0, $f1, $f2, $f3;
        com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel $r2, $r3;
        android.util.KeyValueListParser$IntValue $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.job.JobSchedulerService$Constants;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        $i0 = r0.<com.android.server.job.JobSchedulerService$Constants: int MIN_READY_NON_ACTIVE_JOBS_COUNT>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464285L, $i0);

        $l1 = r0.<com.android.server.job.JobSchedulerService$Constants: long MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529694L, $l1);

        $f0 = r0.<com.android.server.job.JobSchedulerService$Constants: float HEAVY_USE_FACTOR>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1103806595080L, $f0);

        $f1 = r0.<com.android.server.job.JobSchedulerService$Constants: float MODERATE_USE_FACTOR>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1103806595081L, $f1);

        $r2 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        virtualinvoke $r2.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: void dumpProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268058L);

        $r3 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        virtualinvoke $r3.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: void dumpProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268059L);

        $r4 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS>;

        virtualinvoke $r4.<android.util.KeyValueListParser$IntValue: void dumpProto(android.util.proto.ProtoOutputStream,long)>(r1, 1120986464284L);

        $l2 = r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_LINEAR_BACKOFF_TIME>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529681L, $l2);

        $l3 = r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_EXP_BACKOFF_TIME>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529682L, $l3);

        $f2 = r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_CONGESTION_DELAY_FRAC>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1103806595093L, $f2);

        $f3 = r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_PREFETCH_RELAX_FRAC>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,float)>(1103806595094L, $f3);

        $z0 = r0.<com.android.server.job.JobSchedulerService$Constants: boolean ENABLE_API_QUOTAS>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366175L, $z0);

        $i4 = r0.<com.android.server.job.JobSchedulerService$Constants: int API_QUOTA_SCHEDULE_COUNT>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464288L, $i4);

        $l5 = r0.<com.android.server.job.JobSchedulerService$Constants: long API_QUOTA_SCHEDULE_WINDOW_MS>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529697L, $l5);

        $z1 = r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_THROW_EXCEPTION>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366178L, $z1);

        $z2 = r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366179L, $z2);

        return;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.job.JobSchedulerService$Constants r0;
        com.android.internal.util.IndentingPrintWriter r1, $r4, $r6, $r8, $r10, $r29, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45;
        int $i0, $i4;
        java.lang.Integer $r3, $r38;
        long $l1, $l2, $l3, $l5;
        java.lang.Long $r5, $r28, $r30, $r40;
        float $f0, $f1, $f2, $f3;
        java.lang.Float $r7, $r9, $r32, $r34;
        com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25;
        com.android.server.job.JobSchedulerService$MaxJobCounts $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26;
        android.util.KeyValueListParser$IntValue $r27;
        boolean $z0, $z1, $z2;
        java.lang.Boolean $r36, $r42, $r44;

        r0 := @this: com.android.server.job.JobSchedulerService$Constants;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Settings:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $i0 = r0.<com.android.server.job.JobSchedulerService$Constants: int MIN_READY_NON_ACTIVE_JOBS_COUNT>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("min_ready_non_active_jobs_count", $r3);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $l1 = r0.<com.android.server.job.JobSchedulerService$Constants: long MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r6 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("max_non_active_job_batch_delay_ms", $r5);

        virtualinvoke $r6.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $f0 = r0.<com.android.server.job.JobSchedulerService$Constants: float HEAVY_USE_FACTOR>;

        $r7 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $r8 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("heavy_use_factor", $r7);

        virtualinvoke $r8.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $f1 = r0.<com.android.server.job.JobSchedulerService$Constants: float MODERATE_USE_FACTOR>;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        $r10 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("moderate_use_factor", $r9);

        virtualinvoke $r10.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r11 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r12 = $r11.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts normal>;

        virtualinvoke $r12.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r13 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r14 = $r13.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts moderate>;

        virtualinvoke $r14.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r15 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r16 = $r15.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts low>;

        virtualinvoke $r16.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r17 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r18 = $r17.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts critical>;

        virtualinvoke $r18.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r19 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r20 = $r19.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts normal>;

        virtualinvoke $r20.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r21 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r22 = $r21.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts moderate>;

        virtualinvoke $r22.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r23 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r24 = $r23.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts low>;

        virtualinvoke $r24.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r25 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r26 = $r25.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts critical>;

        virtualinvoke $r26.<com.android.server.job.JobSchedulerService$MaxJobCounts: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $r27 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS>;

        virtualinvoke $r27.<android.util.KeyValueListParser$IntValue: void dump(java.io.PrintWriter,java.lang.String)>(r1, "");

        $l2 = r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_LINEAR_BACKOFF_TIME>;

        $r28 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r29 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("min_linear_backoff_time", $r28);

        virtualinvoke $r29.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $l3 = r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_EXP_BACKOFF_TIME>;

        $r30 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r31 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("min_exp_backoff_time", $r30);

        virtualinvoke $r31.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $f2 = r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_CONGESTION_DELAY_FRAC>;

        $r32 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f2);

        $r33 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("conn_congestion_delay_frac", $r32);

        virtualinvoke $r33.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $f3 = r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_PREFETCH_RELAX_FRAC>;

        $r34 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3);

        $r35 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("conn_prefetch_relax_frac", $r34);

        virtualinvoke $r35.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $z0 = r0.<com.android.server.job.JobSchedulerService$Constants: boolean ENABLE_API_QUOTAS>;

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r37 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("enable_api_quotas", $r36);

        virtualinvoke $r37.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $i4 = r0.<com.android.server.job.JobSchedulerService$Constants: int API_QUOTA_SCHEDULE_COUNT>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r39 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("aq_schedule_count", $r38);

        virtualinvoke $r39.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $l5 = r0.<com.android.server.job.JobSchedulerService$Constants: long API_QUOTA_SCHEDULE_WINDOW_MS>;

        $r40 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r41 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("aq_schedule_window_ms", $r40);

        virtualinvoke $r41.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $z1 = r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_THROW_EXCEPTION>;

        $r42 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r43 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("aq_schedule_throw_exception", $r42);

        virtualinvoke $r43.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $z2 = r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT>;

        $r44 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r45 = virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("aq_schedule_return_failure", $r44);

        virtualinvoke $r45.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    void updateConstantsLocked(java.lang.String)
    {
        com.android.server.job.JobSchedulerService$Constants r0;
        android.util.KeyValueListParser $r1, $r2, $r3, $r4, $r5, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r30, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40;
        int $i0, $i4, $i5;
        long $l1, $l2, $l3, $l6;
        float $f0, $f1, $f2, $f3;
        com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;
        com.android.server.job.JobSchedulerService$MaxJobCounts $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29;
        android.util.KeyValueListParser$IntValue $r31;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r41;
        java.lang.String r42;

        r0 := @this: com.android.server.job.JobSchedulerService$Constants;

        r42 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r1.<android.util.KeyValueListParser: void setString(java.lang.String)>(r42);

     label2:
        goto label4;

     label3:
        $r41 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("JobScheduler", "Bad jobscheduler settings", $r41);

     label4:
        $r2 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $i0 = virtualinvoke $r2.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("min_ready_non_active_jobs_count", 5);

        r0.<com.android.server.job.JobSchedulerService$Constants: int MIN_READY_NON_ACTIVE_JOBS_COUNT> = $i0;

        $r3 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $l1 = virtualinvoke $r3.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("max_non_active_job_batch_delay_ms", 1860000L);

        r0.<com.android.server.job.JobSchedulerService$Constants: long MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS> = $l1;

        $r4 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $f0 = virtualinvoke $r4.<android.util.KeyValueListParser: float getFloat(java.lang.String,float)>("heavy_use_factor", 0.9F);

        r0.<com.android.server.job.JobSchedulerService$Constants: float HEAVY_USE_FACTOR> = $f0;

        $r5 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $f1 = virtualinvoke $r5.<android.util.KeyValueListParser: float getFloat(java.lang.String,float)>("moderate_use_factor", 0.5F);

        r0.<com.android.server.job.JobSchedulerService$Constants: float MODERATE_USE_FACTOR> = $f1;

        $r6 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r8 = $r6.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts normal>;

        $r7 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r8.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r7);

        $r9 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r11 = $r9.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts moderate>;

        $r10 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r11.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r10);

        $r12 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r14 = $r12.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts low>;

        $r13 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r14.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r13);

        $r15 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_ON>;

        $r17 = $r15.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts critical>;

        $r16 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r17.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r16);

        $r18 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r20 = $r18.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts normal>;

        $r19 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r20.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r19);

        $r21 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r23 = $r21.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts moderate>;

        $r22 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r23.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r22);

        $r24 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r26 = $r24.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts low>;

        $r25 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r26.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r25);

        $r27 = r0.<com.android.server.job.JobSchedulerService$Constants: com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel MAX_JOB_COUNTS_SCREEN_OFF>;

        $r29 = $r27.<com.android.server.job.JobSchedulerService$MaxJobCountsPerMemoryTrimLevel: com.android.server.job.JobSchedulerService$MaxJobCounts critical>;

        $r28 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r29.<com.android.server.job.JobSchedulerService$MaxJobCounts: void parse(android.util.KeyValueListParser)>($r28);

        $r31 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser$IntValue SCREEN_OFF_JOB_CONCURRENCY_INCREASE_DELAY_MS>;

        $r30 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        virtualinvoke $r31.<android.util.KeyValueListParser$IntValue: void parse(android.util.KeyValueListParser)>($r30);

        $r32 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $l2 = virtualinvoke $r32.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("min_linear_backoff_time", 10000L);

        r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_LINEAR_BACKOFF_TIME> = $l2;

        $r33 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $l3 = virtualinvoke $r33.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("min_exp_backoff_time", 10000L);

        r0.<com.android.server.job.JobSchedulerService$Constants: long MIN_EXP_BACKOFF_TIME> = $l3;

        $r34 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $f2 = virtualinvoke $r34.<android.util.KeyValueListParser: float getFloat(java.lang.String,float)>("conn_congestion_delay_frac", 0.5F);

        r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_CONGESTION_DELAY_FRAC> = $f2;

        $r35 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $f3 = virtualinvoke $r35.<android.util.KeyValueListParser: float getFloat(java.lang.String,float)>("conn_prefetch_relax_frac", 0.5F);

        r0.<com.android.server.job.JobSchedulerService$Constants: float CONN_PREFETCH_RELAX_FRAC> = $f3;

        $r36 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $z0 = virtualinvoke $r36.<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)>("enable_api_quotas", 1);

        r0.<com.android.server.job.JobSchedulerService$Constants: boolean ENABLE_API_QUOTAS> = $z0;

        $r37 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $i4 = virtualinvoke $r37.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("aq_schedule_count", 250);

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(250, $i4);

        r0.<com.android.server.job.JobSchedulerService$Constants: int API_QUOTA_SCHEDULE_COUNT> = $i5;

        $r38 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $l6 = virtualinvoke $r38.<android.util.KeyValueListParser: long getDurationMillis(java.lang.String,long)>("aq_schedule_window_ms", 60000L);

        r0.<com.android.server.job.JobSchedulerService$Constants: long API_QUOTA_SCHEDULE_WINDOW_MS> = $l6;

        $r39 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $z1 = virtualinvoke $r39.<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)>("aq_schedule_throw_exception", 1);

        r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_THROW_EXCEPTION> = $z1;

        $r40 = r0.<com.android.server.job.JobSchedulerService$Constants: android.util.KeyValueListParser mParser>;

        $z2 = virtualinvoke $r40.<android.util.KeyValueListParser: boolean getBoolean(java.lang.String,boolean)>("aq_schedule_return_failure", 0);

        r0.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT> = $z2;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_MODERATE_USE_FACTOR> = "moderate_use_factor";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_MIN_READY_NON_ACTIVE_JOBS_COUNT> = "min_ready_non_active_jobs_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_MIN_LINEAR_BACKOFF_TIME> = "min_linear_backoff_time";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_MIN_EXP_BACKOFF_TIME> = "min_exp_backoff_time";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS> = "max_non_active_job_batch_delay_ms";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_HEAVY_USE_FACTOR> = "heavy_use_factor";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_ENABLE_API_QUOTAS> = "enable_api_quotas";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_CONN_PREFETCH_RELAX_FRAC> = "conn_prefetch_relax_frac";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_CONN_CONGESTION_DELAY_FRAC> = "conn_congestion_delay_frac";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_API_QUOTA_SCHEDULE_WINDOW_MS> = "aq_schedule_window_ms";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_API_QUOTA_SCHEDULE_THROW_EXCEPTION> = "aq_schedule_throw_exception";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT> = "aq_schedule_return_failure";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String KEY_API_QUOTA_SCHEDULE_COUNT> = "aq_schedule_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_USE_HEARTBEATS> = "use_heartbeats";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_STANDBY_WORKING_BEATS> = "standby_working_beats";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_STANDBY_RARE_BEATS> = "standby_rare_beats";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_STANDBY_HEARTBEAT_TIME> = "standby_heartbeat_time";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_STANDBY_FREQUENT_BEATS> = "standby_frequent_beats";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_STORAGE_NOT_LOW_COUNT> = "min_storage_not_low_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_READY_JOBS_COUNT> = "min_ready_jobs_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_IDLE_COUNT> = "min_idle_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_CONTENT_COUNT> = "min_content_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_CONNECTIVITY_COUNT> = "min_connectivity_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_CHARGING_COUNT> = "min_charging_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MIN_BATTERY_NOT_LOW_COUNT> = "min_battery_not_low_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MAX_WORK_RESCHEDULE_COUNT> = "max_work_reschedule_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_MAX_STANDARD_RESCHEDULE_COUNT> = "max_standard_reschedule_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_FG_JOB_COUNT> = "fg_job_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_BG_NORMAL_JOB_COUNT> = "bg_normal_job_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_BG_MODERATE_JOB_COUNT> = "bg_moderate_job_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_BG_LOW_JOB_COUNT> = "bg_low_job_count";

        <com.android.server.job.JobSchedulerService$Constants: java.lang.String DEPRECATED_KEY_BG_CRITICAL_JOB_COUNT> = "bg_critical_job_count";

        <com.android.server.job.JobSchedulerService$Constants: float DEFAULT_MODERATE_USE_FACTOR> = 0.5F;

        <com.android.server.job.JobSchedulerService$Constants: int DEFAULT_MIN_READY_NON_ACTIVE_JOBS_COUNT> = 5;

        <com.android.server.job.JobSchedulerService$Constants: long DEFAULT_MIN_LINEAR_BACKOFF_TIME> = 10000L;

        <com.android.server.job.JobSchedulerService$Constants: long DEFAULT_MIN_EXP_BACKOFF_TIME> = 10000L;

        <com.android.server.job.JobSchedulerService$Constants: long DEFAULT_MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS> = 1860000L;

        <com.android.server.job.JobSchedulerService$Constants: float DEFAULT_HEAVY_USE_FACTOR> = 0.9F;

        <com.android.server.job.JobSchedulerService$Constants: boolean DEFAULT_ENABLE_API_QUOTAS> = 1;

        <com.android.server.job.JobSchedulerService$Constants: float DEFAULT_CONN_PREFETCH_RELAX_FRAC> = 0.5F;

        <com.android.server.job.JobSchedulerService$Constants: float DEFAULT_CONN_CONGESTION_DELAY_FRAC> = 0.5F;

        <com.android.server.job.JobSchedulerService$Constants: long DEFAULT_API_QUOTA_SCHEDULE_WINDOW_MS> = 60000L;

        <com.android.server.job.JobSchedulerService$Constants: boolean DEFAULT_API_QUOTA_SCHEDULE_THROW_EXCEPTION> = 1;

        <com.android.server.job.JobSchedulerService$Constants: boolean DEFAULT_API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT> = 0;

        <com.android.server.job.JobSchedulerService$Constants: int DEFAULT_API_QUOTA_SCHEDULE_COUNT> = 250;

        return;
    }
}
