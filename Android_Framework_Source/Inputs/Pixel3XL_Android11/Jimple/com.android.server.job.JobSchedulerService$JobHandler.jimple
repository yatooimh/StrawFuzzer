final class com.android.server.job.JobSchedulerService$JobHandler extends android.os.Handler
{
    final com.android.server.job.JobSchedulerService this$0;

    public void <init>(com.android.server.job.JobSchedulerService, android.os.Looper)
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        com.android.server.job.JobSchedulerService r1;
        android.os.Looper r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r2 := @parameter1: android.os.Looper;

        r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        java.lang.Object r1, $r18, $r24, r37, r39, r41;
        com.android.server.job.JobSchedulerService $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r29, $r44;
        boolean $z0, $z3, $z4, $z5, $z6, z8, z9;
        int $i0, $i1, i4, i5, i6, i7, i8, i9;
        com.android.server.job.controllers.DeviceIdleJobsController $r6, $r10, $r14;
        com.android.server.job.controllers.JobStatus $r19, r43;
        com.android.server.job.JobPackageTracker $r28;
        java.util.ArrayList $r30;
        java.util.Comparator $r31;
        java.lang.Throwable $r32, $r33, $r34, $r35;
        android.os.Message r36;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        r36 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        r1 = $r2.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $z0 = $r3.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        i4 = r36.<android.os.Message: int what>;

     label04:
        z8 = 1;

        tableswitch(i4)
        {
            case 0: goto label47;
            case 1: goto label42;
            case 2: goto label40;
            case 3: goto label37;
            case 4: goto label35;
            case 5: goto label23;
            case 6: goto label17;
            case 7: goto label06;
            default: goto label05;
        };

     label05:
        goto label52;

     label06:
        i5 = r36.<android.os.Message: int arg1>;

        $i0 = r36.<android.os.Message: int arg2>;

        if $i0 == 0 goto label08;

     label07:
        goto label09;

     label08:
        z8 = 0;

     label09:
        if z8 == 0 goto label11;

     label10:
        $r7 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r7.<com.android.server.job.JobSchedulerService: boolean cancelJobsForUid(int,java.lang.String)>(i5, "app uid idle");

     label11:
        $r4 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        r37 = $r4.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r37;

     label12:
        $r5 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r6 = staticinvoke <com.android.server.job.JobSchedulerService: com.android.server.job.controllers.DeviceIdleJobsController access$600(com.android.server.job.JobSchedulerService)>($r5);

        virtualinvoke $r6.<com.android.server.job.controllers.DeviceIdleJobsController: void setUidActiveLocked(int,boolean)>(i5, 0);

        exitmonitor r37;

     label13:
        goto label52;

     label14:
        $r32 := @caughtexception;

     label15:
        exitmonitor r37;

     label16:
        throw $r32;

     label17:
        i6 = r36.<android.os.Message: int arg1>;

        $r8 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        r39 = $r8.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r39;

     label18:
        $r9 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r10 = staticinvoke <com.android.server.job.JobSchedulerService: com.android.server.job.controllers.DeviceIdleJobsController access$600(com.android.server.job.JobSchedulerService)>($r9);

        virtualinvoke $r10.<com.android.server.job.controllers.DeviceIdleJobsController: void setUidActiveLocked(int,boolean)>(i6, 1);

        exitmonitor r39;

     label19:
        goto label52;

     label20:
        $r34 := @caughtexception;

     label21:
        exitmonitor r39;

     label22:
        throw $r34;

     label23:
        i7 = r36.<android.os.Message: int arg1>;

        $i1 = r36.<android.os.Message: int arg2>;

        if $i1 == 0 goto label25;

     label24:
        z9 = 1;

        goto label26;

     label25:
        z9 = 0;

     label26:
        $r11 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r11.<com.android.server.job.JobSchedulerService: void updateUidState(int,int)>(i7, 19);

     label27:
        if z9 == 0 goto label29;

     label28:
        $r15 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r15.<com.android.server.job.JobSchedulerService: boolean cancelJobsForUid(int,java.lang.String)>(i7, "uid gone");

     label29:
        $r12 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        r41 = $r12.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r41;

     label30:
        $r13 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r14 = staticinvoke <com.android.server.job.JobSchedulerService: com.android.server.job.controllers.DeviceIdleJobsController access$600(com.android.server.job.JobSchedulerService)>($r13);

        virtualinvoke $r14.<com.android.server.job.controllers.DeviceIdleJobsController: void setUidActiveLocked(int,boolean)>(i7, 0);

        exitmonitor r41;

     label31:
        goto label52;

     label32:
        $r35 := @caughtexception;

     label33:
        exitmonitor r41;

     label34:
        throw $r35;

     label35:
        i8 = r36.<android.os.Message: int arg1>;

        i9 = r36.<android.os.Message: int arg2>;

        $r16 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r16.<com.android.server.job.JobSchedulerService: void updateUidState(int,int)>(i8, i9);

     label36:
        goto label52;

     label37:
        $z3 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z3 == 0 goto label38;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "MSG_CHECK_JOB_GREEDY");

     label38:
        $r17 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        staticinvoke <com.android.server.job.JobSchedulerService: void access$300(com.android.server.job.JobSchedulerService)>($r17);

     label39:
        goto label52;

     label40:
        $r20 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r18 = r36.<android.os.Message: java.lang.Object obj>;

        $r19 = (com.android.server.job.controllers.JobStatus) $r18;

        staticinvoke <com.android.server.job.JobSchedulerService: void access$500(com.android.server.job.JobSchedulerService,com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>($r20, $r19, null, "app no longer allowed to run");

     label41:
        goto label52;

     label42:
        $z4 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z4 == 0 goto label43;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "MSG_CHECK_JOB");

     label43:
        virtualinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: void removeMessages(int)>(1);

        $r21 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $z5 = $r21.<com.android.server.job.JobSchedulerService: boolean mReportedActive>;

        if $z5 == 0 goto label45;

        $r23 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        staticinvoke <com.android.server.job.JobSchedulerService: void access$300(com.android.server.job.JobSchedulerService)>($r23);

     label44:
        goto label52;

     label45:
        $r22 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        staticinvoke <com.android.server.job.JobSchedulerService: void access$400(com.android.server.job.JobSchedulerService)>($r22);

     label46:
        goto label52;

     label47:
        $r24 = r36.<android.os.Message: java.lang.Object obj>;

        r43 = (com.android.server.job.controllers.JobStatus) $r24;

     label48:
        if r43 == null goto label51;

     label49:
        $r26 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $z6 = virtualinvoke $r26.<com.android.server.job.JobSchedulerService: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r43);

        if $z6 == 0 goto label51;

        $r27 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r28 = $r27.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r28.<com.android.server.job.JobPackageTracker: void notePending(com.android.server.job.controllers.JobStatus)>(r43);

        $r29 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r30 = $r29.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r31 = staticinvoke <com.android.server.job.JobSchedulerService: java.util.Comparator access$200()>();

        staticinvoke <com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>($r30, r43, $r31);

     label50:
        goto label52;

     label51:
        $r25 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        staticinvoke <com.android.server.job.JobSchedulerService: void access$300(com.android.server.job.JobSchedulerService)>($r25);

     label52:
        $r44 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r44.<com.android.server.job.JobSchedulerService: void maybeRunPendingJobsLocked()>();

        exitmonitor r1;

     label53:
        return;

     label54:
        $r33 := @caughtexception;

     label55:
        exitmonitor r1;

     label56:
        throw $r33;

        catch java.lang.Throwable from label01 to label02 with label54;
        catch java.lang.Throwable from label03 to label04 with label54;
        catch java.lang.Throwable from label06 to label07 with label54;
        catch java.lang.Throwable from label10 to label11 with label54;
        catch java.lang.Throwable from label11 to label12 with label54;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label54;
        catch java.lang.Throwable from label17 to label18 with label54;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label22 to label23 with label54;
        catch java.lang.Throwable from label23 to label24 with label54;
        catch java.lang.Throwable from label26 to label27 with label54;
        catch java.lang.Throwable from label28 to label29 with label54;
        catch java.lang.Throwable from label29 to label30 with label54;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
        catch java.lang.Throwable from label34 to label35 with label54;
        catch java.lang.Throwable from label35 to label36 with label54;
        catch java.lang.Throwable from label37 to label38 with label54;
        catch java.lang.Throwable from label38 to label39 with label54;
        catch java.lang.Throwable from label40 to label41 with label54;
        catch java.lang.Throwable from label42 to label43 with label54;
        catch java.lang.Throwable from label43 to label44 with label54;
        catch java.lang.Throwable from label45 to label46 with label54;
        catch java.lang.Throwable from label47 to label48 with label54;
        catch java.lang.Throwable from label49 to label50 with label54;
        catch java.lang.Throwable from label51 to label52 with label54;
        catch java.lang.Throwable from label52 to label53 with label54;
        catch java.lang.Throwable from label55 to label56 with label54;
    }
}
