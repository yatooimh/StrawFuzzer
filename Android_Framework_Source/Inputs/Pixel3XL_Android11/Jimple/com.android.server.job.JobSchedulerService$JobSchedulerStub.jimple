final class com.android.server.job.JobSchedulerService$JobSchedulerStub extends android.app.job.IJobScheduler$Stub
{
    private final android.util.SparseArray mPersistCache;
    final com.android.server.job.JobSchedulerService this$0;

    void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        com.android.server.job.JobSchedulerService r1;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0> = r1;

        specialinvoke r0.<android.app.job.IJobScheduler$Stub: void <init>()>();

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache> = $r2;

        return;
    }

    private boolean canPersistJobs(int, int)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, i1, $i2;
        android.util.SparseArray r1, $r2, $r6;
        java.lang.Object $r3;
        com.android.server.job.JobSchedulerService $r4;
        android.content.Context $r5;
        java.lang.Boolean $r7, r9;
        java.lang.Throwable $r8;
        boolean z0;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r9 = (java.lang.Boolean) $r3;

     label02:
        if r9 == null goto label05;

     label03:
        z0 = virtualinvoke r9.<java.lang.Boolean: boolean booleanValue()>();

     label04:
        goto label09;

     label05:
        $r4 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $i2 = virtualinvoke $r5.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.RECEIVE_BOOT_COMPLETED", i0, i1);

        if $i2 != 0 goto label07;

     label06:
        z0 = 1;

        goto label08;

     label07:
        z0 = 0;

     label08:
        $r6 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: android.util.SparseArray mPersistCache>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, $r7);

     label09:
        exitmonitor r1;

     label10:
        return z0;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void enforceValidJobRequest(int, android.app.job.JobInfo)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, $i1, $i2;
        java.lang.String $r3, $r8, $r10, $r11, $r12, $r16;
        android.content.pm.ApplicationInfo $r4;
        boolean $z0;
        android.os.RemoteException $r17;
        android.app.job.JobInfo r18;
        android.content.pm.IPackageManager r19;
        android.content.ComponentName r20;
        android.content.pm.ServiceInfo r21;
        java.lang.IllegalArgumentException r22, r24, r26;
        java.lang.StringBuilder r23, r25, r27;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        r18 := @parameter1: android.app.job.JobInfo;

        r19 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r20 = virtualinvoke r18.<android.app.job.JobInfo: android.content.ComponentName getService()>();

     label1:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r21 = interfaceinvoke r19.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r20, 786432, $i1);

     label2:
        if r21 == null goto label7;

     label3:
        $r4 = r21.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i2 = $r4.<android.content.pm.ApplicationInfo: int uid>;

        if $i2 != i0 goto label6;

        $r12 = "android.permission.BIND_JOB_SERVICE";

        $r11 = r21.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 == 0 goto label5;

     label4:
        goto label9;

     label5:
        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduled service ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not require android.permission.BIND_JOB_SERVICE permission");

        $r16 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw r22;

     label6:
        r24 = new java.lang.IllegalArgumentException;

        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot schedule job in ");

        $r8 = virtualinvoke r20.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r24;

     label7:
        r26 = new java.lang.IllegalArgumentException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such service ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        $r3 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw r26;

     label8:
        $r17 := @caughtexception;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label3 to label4 with label8;
        catch android.os.RemoteException from label5 to label6 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
        catch android.os.RemoteException from label7 to label8 with label8;
    }

    private void validateJobFlags(android.app.job.JobInfo, int)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        android.app.job.JobInfo r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.SecurityException $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        com.android.server.job.JobSchedulerService $r8;
        android.content.Context $r9;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: android.app.job.JobInfo;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.app.job.JobInfo: int getFlags()>();

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $r8 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r9 = virtualinvoke $r8.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "JobScheduler");

     label1:
        $i3 = virtualinvoke r1.<android.app.job.JobInfo: int getFlags()>();

        $i4 = $i3 & 8;

        if $i4 == 0 goto label3;

        if i0 != 1000 goto label2;

        $z0 = virtualinvoke r1.<android.app.job.JobInfo: boolean isPeriodic()>();

        if $z0 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Periodic jobs mustn\'t have FLAG_EXEMPT_FROM_APP_STANDBY. Job=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler", $r7);

        goto label3;

     label2:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Job has invalid flags");

        throw $r3;

     label3:
        return;
    }

    public void cancel(int) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, i1;
        long l2;
        com.android.server.job.JobSchedulerService $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r2.<com.android.server.job.JobSchedulerService: boolean cancelJob(int,int,int)>(i1, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void cancelAll() throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0;
        long l1;
        com.android.server.job.JobSchedulerService r1;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.StringBuilder r6;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r6 = new java.lang.StringBuilder;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cancelAll() called by app, callingUid=");

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.job.JobSchedulerService: boolean cancelJobsForUid(int,java.lang.String)>(i0, $r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r9, $r10, $r11, $r15, $r21, r25;
        long l1;
        com.android.server.job.JobSchedulerService $r3, $r5, $r6, r28;
        android.content.Context $r4, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        int $i2, $i3, i5, i6, $i7;
        android.content.pm.PackageManager $r8;
        char $c4;
        java.lang.StringBuilder $r12, $r18;
        java.lang.Throwable $r16;
        android.content.pm.PackageManager$NameNotFoundException $r17;
        java.io.FileDescriptor r22;
        java.lang.String[] r23;
        com.android.internal.util.IndentingPrintWriter r29;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r22 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r23 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r4 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "JobScheduler", r1);

        if $z0 != 0 goto label01;

        return;

     label01:
        z5 = 0;

        z6 = 0;

        i5 = -1;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r23);

        if $z1 != 0 goto label11;

        i6 = 0;

     label02:
        $i2 = lengthof r23;

        if i6 >= $i2 goto label07;

        r2 = r23[i6];

        $r9 = "-h";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label03;

        staticinvoke <com.android.server.job.JobSchedulerService: void dumpHelp(java.io.PrintWriter)>(r1);

        return;

     label03:
        $r10 = "-a";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label04;

        goto label05;

     label04:
        $r11 = "--proto";

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label06;

        z6 = 1;

     label05:
        i6 = i6 + 1;

        goto label02;

     label06:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i3 <= 0 goto label07;

        $c4 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0);

        if $c4 != 45 goto label07;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown option: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        return;

     label07:
        i5 = -1;

        z5 = z6;

        $i7 = lengthof r23;

        if i6 >= $i7 goto label11;

        r25 = r23[i6];

     label08:
        $r6 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r7 = virtualinvoke $r6.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i5 = virtualinvoke $r8.<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>(r25, 4194304);

     label09:
        z5 = z6;

        goto label11;

     label10:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        return;

     label11:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z5 == 0 goto label14;

     label12:
        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r5.<com.android.server.job.JobSchedulerService: void dumpInternalProto(java.io.FileDescriptor,int)>(r22, i5);

     label13:
        goto label15;

     label14:
        r28 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r29 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r29.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r1, "  ");

        virtualinvoke r28.<com.android.server.job.JobSchedulerService: void dumpInternal(com.android.internal.util.IndentingPrintWriter,int)>(r29, i5);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label16:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r16;

        catch android.content.pm.PackageManager$NameNotFoundException from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    public int enqueue(android.app.job.JobInfo, android.app.job.JobWorkItem) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        android.app.job.JobWorkItem r1;
        int i0, i3, i4;
        long l1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        java.lang.NullPointerException $r4;
        com.android.server.job.JobSchedulerService $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r12;
        java.lang.Throwable $r13;
        android.app.job.JobInfo r14;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r14 := @parameter0: android.app.job.JobInfo;

        r1 := @parameter1: android.app.job.JobWorkItem;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enqueueing job: ");

        $r8 = virtualinvoke r14.<android.app.job.JobInfo: java.lang.String toString()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" work: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r12);

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void enforceValidJobRequest(int,android.app.job.JobInfo)>(i0, r14);

        $z1 = virtualinvoke r14.<android.app.job.JobInfo: boolean isPersisted()>();

        if $z1 != 0 goto label6;

        if r1 == null goto label5;

        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void validateJobFlags(android.app.job.JobInfo,int)>(r14, i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        i4 = virtualinvoke $r5.<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>(r14, r1, i0, null, i3, null);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i4;

     label4:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r13;

     label5:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("work is null");

        throw $r4;

     label6:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t enqueue work for persisted jobs");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.content.pm.ParceledListSlice getAllJobSnapshots()
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        java.lang.Object r1;
        com.android.server.job.JobStore r2, $r6;
        int $i0, $i1;
        java.lang.SecurityException $r3;
        com.android.server.job.JobSchedulerService $r4, $r5, $r7;
        java.lang.Throwable $r8;
        java.util.ArrayList r9;
        com.android.server.job._$$Lambda$JobSchedulerService$JobSchedulerStub$9zQe5CBU32yn1NEDzLYvt_QAEGk r10;
        android.content.pm.ParceledListSlice r11;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label6;

        $r4 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r1 = $r4.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r9 = new java.util.ArrayList;

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r6 = $r5.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $i1 = virtualinvoke $r6.<com.android.server.job.JobStore: int size()>();

        specialinvoke r9.<java.util.ArrayList: void <init>(int)>($i1);

        $r7 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r2 = $r7.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r10 = new com.android.server.job._$$Lambda$JobSchedulerService$JobSchedulerStub$9zQe5CBU32yn1NEDzLYvt_QAEGk;

        specialinvoke r10.<com.android.server.job._$$Lambda$JobSchedulerService$JobSchedulerStub$9zQe5CBU32yn1NEDzLYvt_QAEGk: void <init>(com.android.server.job.JobSchedulerService$JobSchedulerStub,java.util.ArrayList)>(r0, r9);

        virtualinvoke r2.<com.android.server.job.JobStore: void forEachJob(java.util.function.Consumer)>(r10);

        r11 = new android.content.pm.ParceledListSlice;

        specialinvoke r11.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r9);

        exitmonitor r1;

     label2:
        return r11;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("getAllJobSnapshots() is system internal use only.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.ParceledListSlice getAllPendingJobs() throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0;
        long l1;
        android.content.pm.ParceledListSlice $r1;
        com.android.server.job.JobSchedulerService $r2;
        java.util.List $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = new android.content.pm.ParceledListSlice;

        $r2 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r3 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: java.util.List getPendingJobs(int)>(i0);

        specialinvoke $r1.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return $r1;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.app.job.JobInfo getPendingJob(int) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, i1;
        long l2;
        com.android.server.job.JobSchedulerService $r1;
        java.lang.Throwable $r2;
        android.app.job.JobInfo r3;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r3 = virtualinvoke $r1.<com.android.server.job.JobSchedulerService: android.app.job.JobInfo getPendingJob(int,int)>(i1, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.util.List getStartedJobs()
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        java.lang.Object r1, $r10;
        java.util.ArrayList r2;
        com.android.server.job.controllers.JobStatus r3;
        int $i0, $i1;
        java.lang.SecurityException $r4;
        com.android.server.job.JobSchedulerService $r5, $r6, $r8;
        java.util.List $r7, $r9;
        boolean $z0;
        com.android.server.job.JobServiceContext $r11;
        android.app.job.JobInfo $r12;
        java.lang.Throwable $r13;
        java.util.Iterator r14;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label11;

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        r1 = $r5.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = new java.util.ArrayList;

        $r6 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r7 = $r6.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i1);

        $r8 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r9 = $r8.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        r14 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r10 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.job.JobServiceContext) $r10;

        r3 = virtualinvoke $r11.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

     label03:
        if r3 == null goto label05;

     label04:
        $r12 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label05:
        goto label02;

     label06:
        exitmonitor r1;

     label07:
        return r2;

     label08:
        $r13 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r13;

     label11:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("getStartedJobs() is system internal use only.");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public int handleShellCommand(android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, android.os.ParcelFileDescriptor, java.lang.String[])
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        android.os.ParcelFileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        com.android.server.job.JobSchedulerShellCommand $r5;
        com.android.server.job.JobSchedulerService $r6;
        java.io.FileDescriptor $r7, $r8, $r9;
        int $i0;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.os.ParcelFileDescriptor;

        r4 := @parameter3: java.lang.String[];

        $r5 = new com.android.server.job.JobSchedulerShellCommand;

        $r6 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        specialinvoke $r5.<com.android.server.job.JobSchedulerShellCommand: void <init>(com.android.server.job.JobSchedulerService)>($r6);

        $r7 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r8 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r9 = virtualinvoke r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $i0 = virtualinvoke $r5.<com.android.server.job.JobSchedulerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[])>(r0, $r7, $r8, $r9, r4);

        return $i0;
    }

    public void lambda$getAllJobSnapshots$0$JobSchedulerService$JobSchedulerStub(java.util.ArrayList, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        java.util.ArrayList r1;
        com.android.server.job.controllers.JobStatus r2;
        android.app.job.JobSnapshot $r3;
        android.app.job.JobInfo $r4;
        int $i0;
        com.android.server.job.JobSchedulerService $r5;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        $r3 = new android.app.job.JobSnapshot;

        $r4 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $i0 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSatisfiedConstraintFlags()>();

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $z0 = virtualinvoke $r5.<com.android.server.job.JobSchedulerService: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r2);

        specialinvoke $r3.<android.app.job.JobSnapshot: void <init>(android.app.job.JobInfo,int,boolean)>($r4, $i0, $z0);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return;
    }

    public int schedule(android.app.job.JobInfo) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        int i0, i1, i4, i5;
        long l2;
        boolean $z0, $z1, $z2;
        com.android.server.job.JobSchedulerService $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r8;
        java.lang.Throwable $r9;
        android.app.job.JobInfo r10;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r10 := @parameter0: android.app.job.JobInfo;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling job: ");

        $r6 = virtualinvoke r10.<android.app.job.JobInfo: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r8);

     label1:
        i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void enforceValidJobRequest(int,android.app.job.JobInfo)>(i1, r10);

        $z1 = virtualinvoke r10.<android.app.job.JobInfo: boolean isPersisted()>();

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: boolean canPersistJobs(int,int)>(i0, i1);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Error: requested job be persisted without holding RECEIVE_BOOT_COMPLETED permission.");

        throw $r3;

     label3:
        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void validateJobFlags(android.app.job.JobInfo,int)>(r10, i1);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        $r2 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        i5 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>(r10, null, i1, null, i4, null);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return i5;

     label6:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r9;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public int scheduleAsPackage(android.app.job.JobInfo, java.lang.String, int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.job.JobSchedulerService$JobSchedulerStub r0;
        java.lang.String r1, r2, $r12, $r18, $r23;
        int i0, $i2, i4, i5;
        long l1;
        boolean $z0;
        java.lang.NullPointerException $r4;
        com.android.server.job.JobSchedulerService $r5, $r13;
        android.content.Context $r6;
        java.lang.StringBuilder $r7, $r14;
        java.lang.SecurityException $r11;
        java.lang.Throwable $r24;
        android.app.job.JobInfo r25;

        r0 := @this: com.android.server.job.JobSchedulerService$JobSchedulerStub;

        r25 := @parameter0: android.app.job.JobInfo;

        r1 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller uid ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scheduling job: ");

        $r18 = virtualinvoke r25.<android.app.job.JobInfo: java.lang.String toString()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on behalf of ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r23 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r23);

     label1:
        if r1 == null goto label6;

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        $r6 = virtualinvoke $r5.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $i2 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.UPDATE_DEVICE_STATS");

        if $i2 != 0 goto label5;

        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void validateJobFlags(android.app.job.JobInfo,int)>(r25, i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r13 = r0.<com.android.server.job.JobSchedulerService$JobSchedulerStub: com.android.server.job.JobSchedulerService this$0>;

        i5 = virtualinvoke $r13.<com.android.server.job.JobSchedulerService: int scheduleAsPackage(android.app.job.JobInfo,android.app.job.JobWorkItem,int,java.lang.String,int,java.lang.String)>(r25, null, i0, r1, i4, r2);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i5;

     label4:
        $r24 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r24;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller uid ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not permitted to schedule jobs for other apps");

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label6:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Must specify a package for scheduleAsPackage()");

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
