final class com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor extends java.lang.Object implements java.util.function.Consumer
{
    int forceBatchedCount;
    final java.util.List runnableJobs;
    final com.android.server.job.JobSchedulerService this$0;
    int unbatchedCount;

    public void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor r0;
        com.android.server.job.JobSchedulerService r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: java.util.List runnableJobs> = $r2;

        virtualinvoke r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void reset()>();

        return;
    }

    public void accept(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor r0;
        com.android.server.job.controllers.JobStatus r1;
        long l0, l1, $l10, $l12, $l14, $l15, $l16;
        com.android.server.job.JobSchedulerService $r2, $r3, $r10, $r20, $r26;
        boolean $z1, $z2, z4, z5;
        android.app.IActivityManager $r4;
        int $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i13, $i18, $i20;
        android.app.job.JobInfo $r5, $r15;
        android.content.ComponentName $r6;
        java.lang.String $r7, $r16, $r19;
        java.time.Clock $r8, $r9;
        byte $b5, $b11, $b17;
        com.android.server.job.JobSchedulerService$Constants $r11, $r27;
        com.android.server.job.JobSchedulerService$JobHandler $r21;
        android.os.Message $r22;
        android.os.RemoteException $r23;
        java.lang.StringBuilder r24;
        java.util.List $r28;

        r0 := @this: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $z1 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r1);

        if $z1 == 0 goto label14;

     label01:
        $r4 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $r5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r6 = virtualinvoke $r5.<android.app.job.JobInfo: android.content.ComponentName getService()>();

        $r7 = virtualinvoke $r6.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = interfaceinvoke $r4.<android.app.IActivityManager: boolean isAppStartModeDisabled(int,java.lang.String)>($i2, $r7);

        if $z2 == 0 goto label03;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Aborting job ");

        $i18 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r15 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r16 = virtualinvoke $r15.<android.app.job.JobInfo: java.lang.String toString()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- package not allowed to start");

        $r19 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler", $r19);

        $r20 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r21 = $r20.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r22 = virtualinvoke $r21.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        virtualinvoke $r22.<android.os.Message: void sendToTarget()>();

     label02:
        return;

     label03:
        goto label05;

     label04:
        $r23 := @caughtexception;

     label05:
        $i3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getEffectiveStandbyBucket()>();

        if $i3 != 5 goto label06;

        z4 = 1;

        goto label11;

     label06:
        $i4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getNumFailures()>();

        if $i4 <= 0 goto label07;

        z4 = 0;

        goto label11;

     label07:
        $r8 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l0 = virtualinvoke $r8.<java.time.Clock: long millis()>();

        l1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getFirstForceBatchedTimeElapsed()>();

        $b5 = l1 cmp 0L;

        if $b5 <= 0 goto label08;

        $l14 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getFirstForceBatchedTimeElapsed()>();

        $l16 = l0 - $l14;

        $r10 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r11 = $r10.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $l15 = $r11.<com.android.server.job.JobSchedulerService$Constants: long MAX_NON_ACTIVE_JOB_BATCH_DELAY_MS>;

        $b17 = $l16 cmp $l15;

        if $b17 < 0 goto label08;

        z5 = 1;

        goto label09;

     label08:
        z5 = 0;

     label09:
        $r26 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r27 = $r26.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $i20 = $r27.<com.android.server.job.JobSchedulerService$Constants: int MIN_READY_NON_ACTIVE_JOBS_COUNT>;

        if $i20 <= 1 goto label10;

        $i13 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getEffectiveStandbyBucket()>();

        if $i13 == 0 goto label10;

        if z5 != 0 goto label10;

        z4 = 1;

        goto label11;

     label10:
        z4 = 0;

     label11:
        if z4 == 0 goto label12;

        $i8 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int forceBatchedCount>;

        $i9 = $i8 + 1;

        r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int forceBatchedCount> = $i9;

        $l10 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getFirstForceBatchedTimeElapsed()>();

        $b11 = $l10 cmp 0L;

        if $b11 != 0 goto label13;

        $r9 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l12 = virtualinvoke $r9.<java.time.Clock: long millis()>();

        virtualinvoke r1.<com.android.server.job.controllers.JobStatus: void setFirstForceBatchedTimeElapsed(long)>($l12);

        goto label13;

     label12:
        $i6 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int unbatchedCount>;

        $i7 = $i6 + 1;

        r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int unbatchedCount> = $i7;

     label13:
        $r28 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: java.util.List runnableJobs>;

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>(r1);

        goto label15;

     label14:
        $r3 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        virtualinvoke $r3.<com.android.server.job.JobSchedulerService: void evaluateControllerStatesLocked(com.android.server.job.controllers.JobStatus)>(r1);

     label15:
        return;

        catch android.os.RemoteException from label01 to label02 with label04;
    }

    public volatile void accept(java.lang.Object)
    {
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor r0;
        java.lang.Object r1;
        com.android.server.job.controllers.JobStatus $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.android.server.job.controllers.JobStatus) r1;

        virtualinvoke r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void accept(com.android.server.job.controllers.JobStatus)>($r2);

        return;
    }

    public void postProcess()
    {
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor r0;
        int $i0, $i1, $i3, $i4;
        boolean $z0, $z2;
        java.util.List $r1, $r4;
        com.android.server.job.JobSchedulerService $r2, $r3, $r6, $r8, $r11;
        java.util.ArrayList $r5, $r7, $r9;
        java.util.Comparator $r10;
        com.android.server.job.JobSchedulerService$Constants $r12;

        r0 := @this: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor;

        $i0 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int unbatchedCount>;

        if $i0 > 0 goto label2;

        $i4 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int forceBatchedCount>;

        $r11 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r12 = $r11.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $i3 = $r12.<com.android.server.job.JobSchedulerService$Constants: int MIN_READY_NON_ACTIVE_JOBS_COUNT>;

        if $i4 < $i3 goto label1;

        goto label2;

     label1:
        $z2 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z2 == 0 goto label4;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "maybeQueueReadyJobsForExecutionLocked: Not running anything.");

        goto label4;

     label2:
        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "maybeQueueReadyJobsForExecutionLocked: Running jobs.");

     label3:
        $r2 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r1 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: java.util.List runnableJobs>;

        virtualinvoke $r2.<com.android.server.job.JobSchedulerService: void noteJobsPending(java.util.List)>($r1);

        $r3 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r5 = $r3.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r4 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: java.util.List runnableJobs>;

        virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $r6 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r7 = $r6.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if $i1 <= 1 goto label4;

        $r8 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: com.android.server.job.JobSchedulerService this$0>;

        $r9 = $r8.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r10 = staticinvoke <com.android.server.job.JobSchedulerService: java.util.Comparator access$200()>();

        virtualinvoke $r9.<java.util.ArrayList: void sort(java.util.Comparator)>($r10);

     label4:
        virtualinvoke r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void reset()>();

        return;
    }

    void reset()
    {
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor r0;
        java.util.List $r1;

        r0 := @this: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor;

        r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int forceBatchedCount> = 0;

        r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: int unbatchedCount> = 0;

        $r1 = r0.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: java.util.List runnableJobs>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }
}
