public class com.android.server.job.JobSchedulerService extends com.android.server.SystemService implements com.android.server.job.StateChangedListener, com.android.server.job.JobCompletedListener
{
    public static final int ACTIVE_INDEX;
    public static final boolean DEBUG;
    public static final boolean DEBUG_STANDBY;
    private static final boolean ENFORCE_MAX_JOBS;
    public static final int FREQUENT_INDEX;
    public static final long MAX_ALLOWED_PERIOD_MS;
    private static final int MAX_JOBS_PER_APP;
    static final int MAX_JOB_CONTEXTS_COUNT;
    static final int MSG_CHECK_JOB;
    static final int MSG_CHECK_JOB_GREEDY;
    static final int MSG_JOB_EXPIRED;
    static final int MSG_STOP_JOB;
    static final int MSG_UID_ACTIVE;
    static final int MSG_UID_GONE;
    static final int MSG_UID_IDLE;
    static final int MSG_UID_STATE_CHANGED;
    public static final int NEVER_INDEX;
    private static final long PERIODIC_JOB_WINDOW_BUFFER;
    private static final com.android.server.utils.quota.Categorizer QUOTA_CATEGORIZER;
    private static final com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_LOGGED;
    private static final com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED;
    private static final java.lang.String QUOTA_TRACKER_SCHEDULE_LOGGED;
    private static final java.lang.String QUOTA_TRACKER_SCHEDULE_PERSISTED_TAG;
    public static final int RARE_INDEX;
    public static final int RESTRICTED_INDEX;
    public static final java.lang.String TAG;
    public static final int WORKING_INDEX;
    public static java.time.Clock sElapsedRealtimeClock;
    private static final java.util.Comparator sPendingJobComparator;
    public static java.time.Clock sSystemClock;
    public static java.time.Clock sUptimeMillisClock;
    final java.util.List mActiveServices;
    android.app.ActivityManagerInternal mActivityManagerInternal;
    private final com.android.server.usage.AppStandbyInternal mAppStandbyInternal;
    com.android.server.AppStateTracker mAppStateTracker;
    final android.util.SparseIntArray mBackingUpUids;
    private final com.android.server.job.controllers.BatteryController mBatteryController;
    com.android.internal.app.IBatteryStats mBatteryStats;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    final com.android.server.job.JobConcurrencyManager mConcurrencyManager;
    final com.android.server.job.JobSchedulerService$Constants mConstants;
    final com.android.server.job.JobSchedulerService$ConstantsObserver mConstantsObserver;
    final java.util.List mControllers;
    final android.util.ArrayMap mDebuggableApps;
    private final com.android.server.job.controllers.DeviceIdleJobsController mDeviceIdleJobsController;
    final com.android.server.job.JobSchedulerService$JobHandler mHandler;
    private final java.util.function.Predicate mIsUidActivePredicate;
    final com.android.server.job.JobPackageTracker mJobPackageTracker;
    private final java.util.List mJobRestrictions;
    final com.android.server.job.JobSchedulerService$JobSchedulerStub mJobSchedulerStub;
    private final java.lang.Runnable mJobTimeUpdater;
    final com.android.server.job.JobStore mJobs;
    com.android.server.DeviceIdleInternal mLocalDeviceIdleController;
    android.content.pm.PackageManagerInternal mLocalPM;
    final java.lang.Object mLock;
    private final com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor mMaybeQueueFunctor;
    final java.util.ArrayList mPendingJobs;
    private final com.android.server.job.controllers.QuotaController mQuotaController;
    private final com.android.server.utils.quota.CountQuotaTracker mQuotaTracker;
    private final com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor mReadyQueueFunctor;
    boolean mReadyToRock;
    boolean mReportedActive;
    private final java.util.List mRestrictiveControllers;
    final com.android.server.job.JobSchedulerService$StandbyTracker mStandbyTracker;
    int[] mStartedUsers;
    private final com.android.server.job.controllers.StorageController mStorageController;
    private final java.lang.String mSystemGalleryPackage;
    private final android.content.BroadcastReceiver mTimeSetReceiver;
    private final android.app.IUidObserver mUidObserver;
    final android.util.SparseIntArray mUidPriorityOverride;
    final android.app.usage.UsageStatsManagerInternal mUsageStats;

    static void <clinit>()
    {
        java.time.Clock $r0;
        java.time.ZoneOffset $r2, $r4;
        com.android.server.job.'-$$Lambda$JobSchedulerService$vjPMLQ-SEWWeqjJkyucZKbr772U' $r7;
        com.android.server.job.'-$$Lambda$JobSchedulerService$SyDoBnH1urvVqu31d-xC2ZPsCBo' $r8;
        boolean z0, z1;
        com.android.server.job.JobSchedulerService$1 r9;
        com.android.server.job.JobSchedulerService$2 r10;
        com.android.server.utils.quota.Category r11, r12;
        com.android.server.utils.quota.Categorizer r13;
        java.util.Comparator r14;

        <com.android.server.job.JobSchedulerService: int WORKING_INDEX> = 1;

        <com.android.server.job.JobSchedulerService: java.lang.String TAG> = "JobScheduler";

        <com.android.server.job.JobSchedulerService: int RESTRICTED_INDEX> = 5;

        <com.android.server.job.JobSchedulerService: int RARE_INDEX> = 3;

        <com.android.server.job.JobSchedulerService: java.lang.String QUOTA_TRACKER_SCHEDULE_PERSISTED_TAG> = ".schedulePersisted()";

        <com.android.server.job.JobSchedulerService: java.lang.String QUOTA_TRACKER_SCHEDULE_LOGGED> = ".schedulePersisted out-of-quota logged";

        <com.android.server.job.JobSchedulerService: long PERIODIC_JOB_WINDOW_BUFFER> = 1800000L;

        <com.android.server.job.JobSchedulerService: int NEVER_INDEX> = 4;

        <com.android.server.job.JobSchedulerService: int MSG_UID_STATE_CHANGED> = 4;

        <com.android.server.job.JobSchedulerService: int MSG_UID_IDLE> = 7;

        <com.android.server.job.JobSchedulerService: int MSG_UID_GONE> = 5;

        <com.android.server.job.JobSchedulerService: int MSG_UID_ACTIVE> = 6;

        <com.android.server.job.JobSchedulerService: int MSG_STOP_JOB> = 2;

        <com.android.server.job.JobSchedulerService: int MSG_JOB_EXPIRED> = 0;

        <com.android.server.job.JobSchedulerService: int MSG_CHECK_JOB_GREEDY> = 3;

        <com.android.server.job.JobSchedulerService: int MSG_CHECK_JOB> = 1;

        <com.android.server.job.JobSchedulerService: int MAX_JOB_CONTEXTS_COUNT> = 16;

        <com.android.server.job.JobSchedulerService: int MAX_JOBS_PER_APP> = 100;

        <com.android.server.job.JobSchedulerService: long MAX_ALLOWED_PERIOD_MS> = 31536000000L;

        <com.android.server.job.JobSchedulerService: int FREQUENT_INDEX> = 2;

        <com.android.server.job.JobSchedulerService: boolean ENFORCE_MAX_JOBS> = 1;

        <com.android.server.job.JobSchedulerService: int ACTIVE_INDEX> = 0;

        z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobScheduler", 3);

        <com.android.server.job.JobSchedulerService: boolean DEBUG> = z0;

        if z0 != 0 goto label1;

        z1 = 0;

        goto label2;

     label1:
        z1 = 1;

     label2:
        <com.android.server.job.JobSchedulerService: boolean DEBUG_STANDBY> = z1;

        $r0 = staticinvoke <java.time.Clock: java.time.Clock systemUTC()>();

        <com.android.server.job.JobSchedulerService: java.time.Clock sSystemClock> = $r0;

        r9 = new com.android.server.job.JobSchedulerService$1;

        $r2 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        specialinvoke r9.<com.android.server.job.JobSchedulerService$1: void <init>(java.time.ZoneId)>($r2);

        <com.android.server.job.JobSchedulerService: java.time.Clock sUptimeMillisClock> = r9;

        r10 = new com.android.server.job.JobSchedulerService$2;

        $r4 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        specialinvoke r10.<com.android.server.job.JobSchedulerService$2: void <init>(java.time.ZoneId)>($r4);

        <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock> = r10;

        r11 = new com.android.server.utils.quota.Category;

        specialinvoke r11.<com.android.server.utils.quota.Category: void <init>(java.lang.String)>(".schedulePersisted()");

        <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED> = r11;

        r12 = new com.android.server.utils.quota.Category;

        specialinvoke r12.<com.android.server.utils.quota.Category: void <init>(java.lang.String)>(".schedulePersisted out-of-quota logged");

        <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_LOGGED> = r12;

        $r7 = <com.android.server.job._$$Lambda$JobSchedulerService$vjPMLQ_SEWWeqjJkyucZKbr772U: com.android.server.job.'-$$Lambda$JobSchedulerService$vjPMLQ-SEWWeqjJkyucZKbr772U' INSTANCE>;

        r13 = (com.android.server.utils.quota.Categorizer) $r7;

        <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Categorizer QUOTA_CATEGORIZER> = r13;

        $r8 = <com.android.server.job._$$Lambda$JobSchedulerService$SyDoBnH1urvVqu31d_xC2ZPsCBo: com.android.server.job.'-$$Lambda$JobSchedulerService$SyDoBnH1urvVqu31d-xC2ZPsCBo' INSTANCE>;

        r14 = (java.util.Comparator) $r8;

        <com.android.server.job.JobSchedulerService: java.util.Comparator sPendingJobComparator> = r14;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.job.JobSchedulerService r0;
        android.content.Context r1;
        java.lang.Object $r3, $r18, $r20, $r31, $r40;
        com.android.server.job.JobPackageTracker $r4;
        java.util.ArrayList $r5, $r6, $r44, $r63, $r67;
        int[] $r7;
        android.util.SparseIntArray $r8, $r9;
        android.util.ArrayMap $r10;
        com.android.server.job.JobSchedulerService$3 $r11;
        com.android.server.job.JobSchedulerService$4 $r12;
        com.android.server.job._$$Lambda$JobSchedulerService$AauD0it1BcgWldVm_V1m2Jo7_Zc $r13;
        com.android.server.job.JobSchedulerService$5 $r14;
        com.android.server.job._$$Lambda$JobSchedulerService$oCsDzEV0rgDVnZl_2bTNBQfZW9I $r15;
        com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor $r16;
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor $r17;
        android.content.pm.PackageManagerInternal $r19;
        android.app.ActivityManagerInternal $r22, r75;
        com.android.server.job.JobSchedulerService$JobHandler $r23, $r27;
        android.os.Looper $r24;
        com.android.server.job.JobSchedulerService$Constants $r25, $r35, $r36;
        com.android.server.job.JobSchedulerService$ConstantsObserver $r26;
        com.android.server.job.JobSchedulerService$JobSchedulerStub $r28;
        com.android.server.job.JobConcurrencyManager $r29;
        com.android.server.job.JobSchedulerService$StandbyTracker $r30, $r41;
        android.app.usage.UsageStatsManagerInternal $r32;
        com.android.server.utils.quota.CountQuotaTracker $r33, $r39;
        com.android.server.utils.quota.Categorizer $r34;
        long $l0;
        int $i1;
        com.android.server.utils.quota.Category $r37, $r38;
        com.android.server.job.JobSchedulerService$LocalService $r42;
        com.android.server.job.JobStore $r43, $r71;
        com.android.server.job.controllers.ConnectivityController $r45;
        java.util.List $r46, $r48, $r50, $r52, $r54, $r56, $r58, $r60, $r62, $r65, $r66;
        com.android.server.job.controllers.TimeController $r47;
        com.android.server.job.controllers.IdleController $r49;
        com.android.server.job.controllers.BatteryController $r51, $r64;
        com.android.server.job.controllers.StorageController $r53;
        com.android.server.job.controllers.BackgroundJobsController $r55;
        com.android.server.job.controllers.ContentObserverController $r57;
        com.android.server.job.controllers.DeviceIdleJobsController $r59;
        com.android.server.job.controllers.QuotaController $r61;
        com.android.server.job.restrictions.ThermalStatusRestriction $r68;
        java.lang.String $r70, r85;
        boolean $z13;
        android.content.IntentFilter $r72;
        android.content.BroadcastReceiver $r73;
        com.android.server.usage.AppStandbyInternal r77;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock> = $r3;

        $r4 = new com.android.server.job.JobPackageTracker;

        specialinvoke $r4.<com.android.server.job.JobPackageTracker: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs> = $r6;

        $r7 = <libcore.util.EmptyArray: int[] INT>;

        r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers> = $r7;

        $r8 = new android.util.SparseIntArray;

        specialinvoke $r8.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride> = $r8;

        $r9 = new android.util.SparseIntArray;

        specialinvoke $r9.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids> = $r9;

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: android.util.ArrayMap mDebuggableApps> = $r10;

        $r11 = new com.android.server.job.JobSchedulerService$3;

        specialinvoke $r11.<com.android.server.job.JobSchedulerService$3: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mBroadcastReceiver> = $r11;

        $r12 = new com.android.server.job.JobSchedulerService$4;

        specialinvoke $r12.<com.android.server.job.JobSchedulerService$4: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: android.app.IUidObserver mUidObserver> = $r12;

        $r13 = new com.android.server.job._$$Lambda$JobSchedulerService$AauD0it1BcgWldVm_V1m2Jo7_Zc;

        specialinvoke $r13.<com.android.server.job._$$Lambda$JobSchedulerService$AauD0it1BcgWldVm_V1m2Jo7_Zc: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: java.util.function.Predicate mIsUidActivePredicate> = $r13;

        $r14 = new com.android.server.job.JobSchedulerService$5;

        specialinvoke $r14.<com.android.server.job.JobSchedulerService$5: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mTimeSetReceiver> = $r14;

        $r15 = new com.android.server.job._$$Lambda$JobSchedulerService$oCsDzEV0rgDVnZl_2bTNBQfZW9I;

        specialinvoke $r15.<com.android.server.job._$$Lambda$JobSchedulerService$oCsDzEV0rgDVnZl_2bTNBQfZW9I: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: java.lang.Runnable mJobTimeUpdater> = $r15;

        $r16 = new com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor;

        specialinvoke $r16.<com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor mReadyQueueFunctor> = $r16;

        $r17 = new com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor;

        specialinvoke $r17.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor mMaybeQueueFunctor> = $r17;

        $r18 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r19 = (android.content.pm.PackageManagerInternal) $r18;

        r0.<com.android.server.job.JobSchedulerService: android.content.pm.PackageManagerInternal mLocalPM> = $r19;

        $r20 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        r75 = (android.app.ActivityManagerInternal) $r20;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r75);

        $r22 = (android.app.ActivityManagerInternal) r75;

        r0.<com.android.server.job.JobSchedulerService: android.app.ActivityManagerInternal mActivityManagerInternal> = $r22;

        $r23 = new com.android.server.job.JobSchedulerService$JobHandler;

        $r24 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r23.<com.android.server.job.JobSchedulerService$JobHandler: void <init>(com.android.server.job.JobSchedulerService,android.os.Looper)>(r0, $r24);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler> = $r23;

        $r25 = new com.android.server.job.JobSchedulerService$Constants;

        specialinvoke $r25.<com.android.server.job.JobSchedulerService$Constants: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants> = $r25;

        $r26 = new com.android.server.job.JobSchedulerService$ConstantsObserver;

        $r27 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        specialinvoke $r26.<com.android.server.job.JobSchedulerService$ConstantsObserver: void <init>(com.android.server.job.JobSchedulerService,android.os.Handler)>(r0, $r27);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$ConstantsObserver mConstantsObserver> = $r26;

        $r28 = new com.android.server.job.JobSchedulerService$JobSchedulerStub;

        specialinvoke $r28.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobSchedulerStub mJobSchedulerStub> = $r28;

        $r29 = new com.android.server.job.JobConcurrencyManager;

        specialinvoke $r29.<com.android.server.job.JobConcurrencyManager: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobConcurrencyManager mConcurrencyManager> = $r29;

        $r30 = new com.android.server.job.JobSchedulerService$StandbyTracker;

        specialinvoke $r30.<com.android.server.job.JobSchedulerService$StandbyTracker: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$StandbyTracker mStandbyTracker> = $r30;

        $r31 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        $r32 = (android.app.usage.UsageStatsManagerInternal) $r31;

        r0.<com.android.server.job.JobSchedulerService: android.app.usage.UsageStatsManagerInternal mUsageStats> = $r32;

        $r33 = new com.android.server.utils.quota.CountQuotaTracker;

        $r34 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Categorizer QUOTA_CATEGORIZER>;

        specialinvoke $r33.<com.android.server.utils.quota.CountQuotaTracker: void <init>(android.content.Context,com.android.server.utils.quota.Categorizer)>(r1, $r34);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker> = $r33;

        $r37 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED>;

        $r35 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $i1 = $r35.<com.android.server.job.JobSchedulerService$Constants: int API_QUOTA_SCHEDULE_COUNT>;

        $r36 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $l0 = $r36.<com.android.server.job.JobSchedulerService$Constants: long API_QUOTA_SCHEDULE_WINDOW_MS>;

        virtualinvoke $r33.<com.android.server.utils.quota.CountQuotaTracker: void setCountLimit(com.android.server.utils.quota.Category,int,long)>($r37, $i1, $l0);

        $r39 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $r38 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_LOGGED>;

        virtualinvoke $r39.<com.android.server.utils.quota.CountQuotaTracker: void setCountLimit(com.android.server.utils.quota.Category,int,long)>($r38, 1, 60000L);

        $r40 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/usage/AppStandbyInternal;");

        r77 = (com.android.server.usage.AppStandbyInternal) $r40;

        r0.<com.android.server.job.JobSchedulerService: com.android.server.usage.AppStandbyInternal mAppStandbyInternal> = r77;

        $r41 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$StandbyTracker mStandbyTracker>;

        interfaceinvoke r77.<com.android.server.usage.AppStandbyInternal: void addListener(com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener)>($r41);

        $r42 = new com.android.server.job.JobSchedulerService$LocalService;

        specialinvoke $r42.<com.android.server.job.JobSchedulerService$LocalService: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/job/JobSchedulerInternal;", $r42);

        $r43 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobStore initAndGet(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs> = $r43;

        $r44 = new java.util.ArrayList;

        specialinvoke $r44.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers> = $r44;

        $r45 = new com.android.server.job.controllers.ConnectivityController;

        specialinvoke $r45.<com.android.server.job.controllers.ConnectivityController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        $r46 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        interfaceinvoke $r46.<java.util.List: boolean add(java.lang.Object)>($r45);

        $r48 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r47 = new com.android.server.job.controllers.TimeController;

        specialinvoke $r47.<com.android.server.job.controllers.TimeController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r48.<java.util.List: boolean add(java.lang.Object)>($r47);

        $r49 = new com.android.server.job.controllers.IdleController;

        specialinvoke $r49.<com.android.server.job.controllers.IdleController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        $r50 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>($r49);

        $r51 = new com.android.server.job.controllers.BatteryController;

        specialinvoke $r51.<com.android.server.job.controllers.BatteryController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController> = $r51;

        $r52 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        interfaceinvoke $r52.<java.util.List: boolean add(java.lang.Object)>($r51);

        $r53 = new com.android.server.job.controllers.StorageController;

        specialinvoke $r53.<com.android.server.job.controllers.StorageController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.StorageController mStorageController> = $r53;

        $r54 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        interfaceinvoke $r54.<java.util.List: boolean add(java.lang.Object)>($r53);

        $r56 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r55 = new com.android.server.job.controllers.BackgroundJobsController;

        specialinvoke $r55.<com.android.server.job.controllers.BackgroundJobsController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r56.<java.util.List: boolean add(java.lang.Object)>($r55);

        $r58 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r57 = new com.android.server.job.controllers.ContentObserverController;

        specialinvoke $r57.<com.android.server.job.controllers.ContentObserverController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r58.<java.util.List: boolean add(java.lang.Object)>($r57);

        $r59 = new com.android.server.job.controllers.DeviceIdleJobsController;

        specialinvoke $r59.<com.android.server.job.controllers.DeviceIdleJobsController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.DeviceIdleJobsController mDeviceIdleJobsController> = $r59;

        $r60 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        interfaceinvoke $r60.<java.util.List: boolean add(java.lang.Object)>($r59);

        $r61 = new com.android.server.job.controllers.QuotaController;

        specialinvoke $r61.<com.android.server.job.controllers.QuotaController: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.QuotaController mQuotaController> = $r61;

        $r62 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>($r61);

        $r63 = new java.util.ArrayList;

        specialinvoke $r63.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.List mRestrictiveControllers> = $r63;

        $r64 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        interfaceinvoke $r63.<java.util.List: boolean add(java.lang.Object)>($r64);

        $r65 = r0.<com.android.server.job.JobSchedulerService: java.util.List mRestrictiveControllers>;

        interfaceinvoke $r65.<java.util.List: boolean add(java.lang.Object)>($r45);

        $r66 = r0.<com.android.server.job.JobSchedulerService: java.util.List mRestrictiveControllers>;

        interfaceinvoke $r66.<java.util.List: boolean add(java.lang.Object)>($r49);

        $r67 = new java.util.ArrayList;

        specialinvoke $r67.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions> = $r67;

        $r68 = new com.android.server.job.restrictions.ThermalStatusRestriction;

        specialinvoke $r68.<com.android.server.job.restrictions.ThermalStatusRestriction: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r67.<java.util.List: boolean add(java.lang.Object)>($r68);

        r85 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(17039399);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r85);

        $r70 = (java.lang.String) r85;

        r0.<com.android.server.job.JobSchedulerService: java.lang.String mSystemGalleryPackage> = $r70;

        $r71 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $z13 = virtualinvoke $r71.<com.android.server.job.JobStore: boolean jobTimesInflatedValid()>();

        if $z13 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler", "!!! RTC not yet good; tracking time updates for job scheduling");

        $r73 = r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mTimeSetReceiver>;

        $r72 = new android.content.IntentFilter;

        specialinvoke $r72.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.TIME_SET");

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r73, $r72);

     label1:
        return;
    }

    static java.lang.String access$000(com.android.server.job.JobSchedulerService, android.content.Intent)
    {
        com.android.server.job.JobSchedulerService r0;
        android.content.Intent r1;
        java.lang.String $r2;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        r1 := @parameter1: android.content.Intent;

        $r2 = specialinvoke r0.<com.android.server.job.JobSchedulerService: java.lang.String getPackageName(android.content.Intent)>(r1);

        return $r2;
    }

    static java.lang.Runnable access$100(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Runnable mJobTimeUpdater>;

        return $r1;
    }

    static java.util.Comparator access$200()
    {
        java.util.Comparator $r0;

        $r0 = <com.android.server.job.JobSchedulerService: java.util.Comparator sPendingJobComparator>;

        return $r0;
    }

    static void access$300(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService r0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void queueReadyJobsForExecutionLocked()>();

        return;
    }

    static void access$400(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService r0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void maybeQueueReadyJobsForExecutionLocked()>();

        return;
    }

    static void access$500(com.android.server.job.JobSchedulerService, com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus, java.lang.String)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        java.lang.String r3;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        r2 := @parameter2: com.android.server.job.controllers.JobStatus;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>(r1, r2, r3);

        return;
    }

    static com.android.server.job.controllers.DeviceIdleJobsController access$600(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.DeviceIdleJobsController $r1;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.DeviceIdleJobsController mDeviceIdleJobsController>;

        return $r1;
    }

    static java.lang.String access$700(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.String mSystemGalleryPackage>;

        return $r1;
    }

    static boolean access$800(com.android.server.job.JobSchedulerService, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        $z0 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)>(r1);

        return $z0;
    }

    static void addOrderedItem(java.util.ArrayList, java.lang.Object, java.util.Comparator)
    {
        java.util.ArrayList r0;
        java.lang.Object r1;
        java.util.Comparator r2;
        int i0, i1;

        r0 := @parameter0: java.util.ArrayList;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Comparator;

        i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object,java.util.Comparator)>(r0, r1, r2);

        i1 = i0;

        if i0 >= 0 goto label1;

        i1 = i0;

     label1:
        virtualinvoke r0.<java.util.ArrayList: void add(int,java.lang.Object)>(i1, r1);

        return;
    }

    private int adjustJobPriority(int, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i3;
        com.android.server.job.controllers.JobStatus r1;
        float f0, $f1, $f2;
        com.android.server.job.JobPackageTracker $r2;
        com.android.server.job.JobSchedulerService$Constants $r3, $r4;
        byte $b1, $b2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        i3 = i0;

        if i0 >= 40 goto label2;

        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        f0 = virtualinvoke $r2.<com.android.server.job.JobPackageTracker: float getLoadFactor(com.android.server.job.controllers.JobStatus)>(r1);

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $f1 = $r3.<com.android.server.job.JobSchedulerService$Constants: float HEAVY_USE_FACTOR>;

        $b1 = f0 cmpl $f1;

        if $b1 < 0 goto label1;

        i3 = i0 - 80;

        goto label2;

     label1:
        i3 = i0;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $f2 = $r4.<com.android.server.job.JobSchedulerService$Constants: float MODERATE_USE_FACTOR>;

        $b2 = f0 cmpl $f2;

        if $b2 < 0 goto label2;

        i3 = i0 - 40;

     label2:
        return i3;
    }

    private boolean areUsersStartedLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUserId()>();

        z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r2, $i0);

        $i1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUserId()>();

        if $i1 != $i2 goto label1;

        return z1;

     label1:
        if z1 == 0 goto label2;

        $r3 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $i3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r3, $i3);

        if $z0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    private void cancelJobImplLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus, java.lang.String)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        boolean $z0, $z2, $z4;
        java.util.ArrayList $r4;
        java.lang.StringBuilder $r5, $r11;
        java.lang.String $r7, $r9, $r13, $r15, r16;
        com.android.server.job.JobPackageTracker $r10;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        r16 := @parameter2: java.lang.String;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CANCEL: ");

        $r13 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r15);

     label1:
        virtualinvoke r1.<com.android.server.job.controllers.JobStatus: void unprepareLocked()>();

        specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,boolean)>(r1, r2, 1);

        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $z2 = virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r10 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r10.<com.android.server.job.JobPackageTracker: void noteNonpending(com.android.server.job.controllers.JobStatus)>(r1);

     label2:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopJobOnServiceContextLocked(com.android.server.job.controllers.JobStatus,int,java.lang.String)>(r1, 0, r16);

        if r2 == null goto label4;

        $z4 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z4 == 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tracking replacement job ");

        $r7 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler", $r9);

     label3:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>(r2, r1);

     label4:
        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void reportActiveLocked()>();

        return;
    }

    private void cancelJobsForNonExistentUsers()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1, $r2;
        com.android.server.job.JobStore $r3;
        int[] $r4;
        java.lang.Throwable $r5;
        android.os.UserManagerInternal r6;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        r6 = (android.os.UserManagerInternal) $r2;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r4 = virtualinvoke r6.<android.os.UserManagerInternal: int[] getUserIds()>();

        virtualinvoke $r3.<com.android.server.job.JobStore: void removeJobsOfNonUsers(int[])>($r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private com.android.server.job.restrictions.JobRestriction checkIfRestricted(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        com.android.server.job.restrictions.JobRestriction r2;
        int $i0, $i1, i2;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $i0 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>(r1);

        if $i0 < 30 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label4;

        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.job.restrictions.JobRestriction) $r5;

        $z0 = virtualinvoke r2.<com.android.server.job.restrictions.JobRestriction: boolean isJobRestricted(com.android.server.job.controllers.JobStatus)>(r1);

        if $z0 == 0 goto label3;

        return r2;

     label3:
        i2 = i2 + -1;

        goto label2;

     label4:
        return null;
    }

    static void dumpHelp(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Job Scheduler (jobscheduler) dump options:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  [-h] [package] ...");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    -h: print this help");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  [package] is an optional package name to limit the output to.");

        return;
    }

    private java.lang.String getPackageName(android.content.Intent)
    {
        com.android.server.job.JobSchedulerService r0;
        android.content.Intent r1;
        android.net.Uri r2;
        java.lang.String r3;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: android.content.Intent;

        r2 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.net.Uri: java.lang.String getSchemeSpecificPart()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    private boolean isComponentUsable(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        boolean z0, $z1, $z2, $z3;
        android.content.pm.IPackageManager $r1;
        android.content.ComponentName $r2;
        int $i0;
        android.content.pm.ApplicationInfo $r3;
        android.app.ActivityManagerInternal $r4;
        java.lang.StringBuilder $r5, $r11;
        java.lang.String $r7, $r10, $r13, $r16;
        android.os.RemoteException $r17;
        java.lang.RuntimeException $r18;
        com.android.server.job.controllers.JobStatus r19;
        android.content.pm.ServiceInfo r20;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r19 := @parameter0: com.android.server.job.controllers.JobStatus;

     label1:
        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r2 = virtualinvoke r19.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $i0 = virtualinvoke r19.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        r20 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>($r2, 268435456, $i0);

     label2:
        if r20 != null goto label4;

        $z2 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z2 == 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isComponentUsable: ");

        $r13 = virtualinvoke r19.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" component not present");

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r16);

     label3:
        return 0;

     label4:
        $r4 = r0.<com.android.server.job.JobSchedulerService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        $r3 = r20.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        z0 = virtualinvoke $r4.<android.app.ActivityManagerInternal: boolean isAppBad(android.content.pm.ApplicationInfo)>($r3);

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label5;

        if z0 == 0 goto label5;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("App is bad for ");

        $r7 = virtualinvoke r19.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" so not runnable");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler", $r10);

     label5:
        $z3 = z0 ^ 1;

        return $z3;

     label6:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

        catch android.os.RemoteException from label1 to label2 with label6;
    }

    private boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        java.util.List $r3, $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r5;
        com.android.server.job.JobServiceContext $r6;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i3 = 0;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i3 >= $i0 goto label3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        $r6 = (com.android.server.job.JobServiceContext) $r5;

        r2 = virtualinvoke $r6.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        if r2 == null goto label2;

        $i1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z0 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean matches(int,int)>($i1, $i2);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isUidActive(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        com.android.server.AppStateTracker $r1;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.AppStateTracker mAppStateTracker>;

        $z0 = virtualinvoke $r1.<com.android.server.AppStateTracker: boolean isUidActiveSynced(int)>(i0);

        return $z0;
    }

    public static boolean lambda$AauD0it1BcgWldVm_V1m2Jo7_Zc(com.android.server.job.JobSchedulerService, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isUidActive(int)>(i0);

        return $z0;
    }

    static boolean lambda$dumpInternal$4(int, com.android.server.job.controllers.JobStatus)
    {
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.job.controllers.JobStatus r0;
        boolean z0;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.job.controllers.JobStatus;

        if i0 == -1 goto label2;

        $i1 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i2 == i0 goto label2;

        $i3 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        if $i4 != i0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    static boolean lambda$dumpInternalProto$5(int, com.android.server.job.controllers.JobStatus)
    {
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.job.controllers.JobStatus r0;
        boolean z0;

        i0 := @parameter0: int;

        r0 := @parameter1: com.android.server.job.controllers.JobStatus;

        if i0 == -1 goto label2;

        $i1 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        if $i2 == i0 goto label2;

        $i3 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        if $i4 != i0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    static com.android.server.utils.quota.Category lambda$static$0(int, java.lang.String, java.lang.String)
    {
        int i0;
        java.lang.String r0, r1, $r2;
        boolean $z0;
        com.android.server.utils.quota.Category $r3, $r4;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r2 = ".schedulePersisted()";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED>;

        return $r4;

     label1:
        $r3 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_LOGGED>;

        return $r3;
    }

    static int lambda$static$1(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.JobStatus r0, r1;
        int $i0, $i1, $i8, $i9, $i10;
        long $l2, $l3, $l5, $l6;
        byte $b4, $b7, b11;

        r0 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        $i1 = r0.<com.android.server.job.controllers.JobStatus: int overrideState>;

        $i0 = r1.<com.android.server.job.controllers.JobStatus: int overrideState>;

        if $i1 == $i0 goto label1;

        $i9 = r1.<com.android.server.job.controllers.JobStatus: int overrideState>;

        $i8 = r0.<com.android.server.job.controllers.JobStatus: int overrideState>;

        $i10 = $i9 - $i8;

        return $i10;

     label1:
        $l3 = r0.<com.android.server.job.controllers.JobStatus: long enqueueTime>;

        $l2 = r1.<com.android.server.job.controllers.JobStatus: long enqueueTime>;

        $b4 = $l3 cmp $l2;

        if $b4 >= 0 goto label2;

        return -1;

     label2:
        $l6 = r0.<com.android.server.job.controllers.JobStatus: long enqueueTime>;

        $l5 = r1.<com.android.server.job.controllers.JobStatus: long enqueueTime>;

        $b7 = $l6 cmp $l5;

        if $b7 <= 0 goto label3;

        b11 = 1;

        goto label4;

     label3:
        b11 = 0;

     label4:
        return b11;
    }

    private void maybeQueueReadyJobsForExecutionLocked()
    {
        com.android.server.job.JobSchedulerService r0;
        boolean $z0;
        java.util.ArrayList $r1, $r2;
        com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor $r3, $r5;
        com.android.server.job.JobStore $r4;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "Maybe queuing ready jobs...");

     label1:
        $r1 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void noteJobsNonpending(java.util.List)>($r1);

        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void stopNonReadyActiveJobsLocked()>();

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor mMaybeQueueFunctor>;

        virtualinvoke $r4.<com.android.server.job.JobStore: void forEachJob(java.util.function.Consumer)>($r3);

        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor mMaybeQueueFunctor>;

        virtualinvoke $r5.<com.android.server.job.JobSchedulerService$MaybeReadyJobQueueFunctor: void postProcess()>();

        return;
    }

    private void queueReadyJobsForExecutionLocked()
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        boolean $z0, $z1;
        java.util.ArrayList $r2, $r3, $r7;
        com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor $r4, $r6;
        com.android.server.job.JobStore $r5;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "queuing all ready jobs for execution:");

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void noteJobsNonpending(java.util.List)>($r2);

        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void stopNonReadyActiveJobsLocked()>();

        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor mReadyQueueFunctor>;

        virtualinvoke $r5.<com.android.server.job.JobStore: void forEachJob(java.util.function.Consumer)>($r4);

        $r6 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor mReadyQueueFunctor>;

        virtualinvoke $r6.<com.android.server.job.JobSchedulerService$ReadyJobQueueFunctor: void postProcess()>();

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label3;

        $r7 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        if i0 != 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "No jobs pending.");

        goto label3;

     label2:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" jobs queued.");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r11);

     label3:
        return;
    }

    private static void sortJobs(java.util.List)
    {
        java.util.List r0;
        com.android.server.job.JobSchedulerService$6 $r1;

        r0 := @parameter0: java.util.List;

        $r1 = new com.android.server.job.JobSchedulerService$6;

        specialinvoke $r1.<com.android.server.job.JobSchedulerService$6: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r0, $r1);

        return;
    }

    public static int standbyBucketForPackage(java.lang.String, int, long)
    {
        java.lang.String r0, $r8;
        int i0, i3, i4;
        long l1;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        android.app.usage.UsageStatsManagerInternal r9;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        r9 = (android.app.usage.UsageStatsManagerInternal) $r1;

        if r9 == null goto label1;

        i3 = virtualinvoke r9.<android.app.usage.UsageStatsManagerInternal: int getAppStandbyBucket(java.lang.String,int,long)>(r0, i0, l1);

        goto label2;

     label1:
        i3 = 0;

     label2:
        i4 = staticinvoke <com.android.server.job.JobSchedulerService: int standbyBucketToBucketIndex(int)>(i3);

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG_STANDBY>;

        if $z0 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" standby bucket index: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r8);

     label3:
        return i4;
    }

    public static int standbyBucketToBucketIndex(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 != 50 goto label1;

        return 4;

     label1:
        if i0 <= 40 goto label2;

        return 5;

     label2:
        if i0 <= 30 goto label3;

        return 3;

     label3:
        if i0 <= 20 goto label4;

        return 2;

     label4:
        if i0 <= 10 goto label5;

        return 1;

     label5:
        return 0;
    }

    private void startTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        boolean z0, $z1, $z2;
        java.time.Clock $r3;
        long $l0;
        com.android.server.job.JobStore $r4;
        java.util.List $r5, $r6;
        int $i1, i3;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r11;
        com.android.server.job.controllers.StateController r13;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        $z1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean isPreparedLocked()>();

        if $z1 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not yet prepared when started tracking: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler", $r11);

     label1:
        $r3 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l0 = virtualinvoke $r3.<java.time.Clock: long millis()>();

        r1.<com.android.server.job.controllers.JobStatus: long enqueueTime> = $l0;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        z0 = virtualinvoke $r4.<com.android.server.job.JobStore: boolean add(com.android.server.job.controllers.JobStatus)>(r1);

        $z2 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        if $z2 == 0 goto label4;

        i3 = 0;

     label2:
        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        r13 = (com.android.server.job.controllers.StateController) $r7;

        if z0 == 0 goto label3;

        virtualinvoke r13.<com.android.server.job.controllers.StateController: void maybeStopTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,boolean)>(r1, null, 1);

     label3:
        virtualinvoke r13.<com.android.server.job.controllers.StateController: void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>(r1, r2);

        i3 = i3 + 1;

        goto label2;

     label4:
        return;
    }

    private boolean stopJobOnServiceContextLocked(com.android.server.job.controllers.JobStatus, int, java.lang.String)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r4;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r2;
        com.android.server.job.JobServiceContext r3;
        java.util.List $r5, $r6;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i4 = 0;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i4 >= $i1 goto label3;

        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        r3 = (com.android.server.job.JobServiceContext) $r7;

        r4 = virtualinvoke r3.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        if r4 == null goto label2;

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z0 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: boolean matches(int,int)>($i2, $i3);

        if $z0 == 0 goto label2;

        virtualinvoke r3.<com.android.server.job.JobServiceContext: void cancelExecutingJobLocked(int,java.lang.String)>(i0, r2);

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void stopNonReadyActiveJobsLocked()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobServiceContext r1;
        int i0, $i1, $i2, i3;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9;
        com.android.server.job.controllers.JobStatus r10;
        com.android.server.job.restrictions.JobRestriction r11;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i3 = 0;

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label6;

        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i3);

        r1 = (com.android.server.job.JobServiceContext) $r4;

        r10 = virtualinvoke r1.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        if r10 != null goto label2;

        goto label5;

     label2:
        $z0 = virtualinvoke r10.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        if $z0 != 0 goto label4;

        $i2 = virtualinvoke r10.<com.android.server.job.controllers.JobStatus: int getEffectiveStandbyBucket()>();

        if $i2 != 5 goto label3;

        $z1 = virtualinvoke r10.<com.android.server.job.controllers.JobStatus: boolean areDynamicConstraintsSatisfied()>();

        if $z1 != 0 goto label3;

        virtualinvoke r1.<com.android.server.job.JobServiceContext: void cancelExecutingJobLocked(int,java.lang.String)>(6, "cancelled due to restricted bucket");

        goto label5;

     label3:
        virtualinvoke r1.<com.android.server.job.JobServiceContext: void cancelExecutingJobLocked(int,java.lang.String)>(1, "cancelled due to unsatisfied constraints");

        goto label5;

     label4:
        r11 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.restrictions.JobRestriction checkIfRestricted(com.android.server.job.controllers.JobStatus)>(r10);

        if r11 == null goto label5;

        i0 = virtualinvoke r11.<com.android.server.job.restrictions.JobRestriction: int getReason()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("restricted due to ");

        $r7 = staticinvoke <android.app.job.JobParameters: java.lang.String getReasonCodeDescription(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.job.JobServiceContext: void cancelExecutingJobLocked(int,java.lang.String)>(i0, $r9);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }

    private boolean stopTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus, boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        com.android.server.job.JobStore $r3;
        boolean $z0, z1, z2;
        java.util.List $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;
        com.android.server.job.controllers.StateController $r7;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        z1 := @parameter2: boolean;

        virtualinvoke r1.<com.android.server.job.controllers.JobStatus: void stopTrackingJobLocked(com.android.server.job.controllers.JobStatus)>(r2);

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        z2 = virtualinvoke $r3.<com.android.server.job.JobStore: boolean remove(com.android.server.job.controllers.JobStatus,boolean)>(r1, z1);

        if z2 == 0 goto label2;

        $z0 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        if $z0 == 0 goto label2;

        i1 = 0;

     label1:
        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (com.android.server.job.controllers.StateController) $r6;

        virtualinvoke $r7.<com.android.server.job.controllers.StateController: void maybeStopTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,boolean)>(r1, r2, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return z2;
    }

    public boolean areComponentsInPlaceLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean z0, z1, $z2, $z3, z4;
        com.android.server.job.JobStore $r3;
        android.util.SparseIntArray $r4;
        int $i0, $i1;
        com.android.server.job.restrictions.JobRestriction $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r16;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        z0 = virtualinvoke $r3.<com.android.server.job.JobStore: boolean containsJob(com.android.server.job.controllers.JobStatus)>(r1);

        z1 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean areUsersStartedLocked(com.android.server.job.controllers.JobStatus)>(r1);

        $r4 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i1 = virtualinvoke $r4.<android.util.SparseIntArray: int indexOfKey(int)>($i0);

        if $i1 < 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        $z2 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z2 == 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("areComponentsInPlaceLocked: ");

        $r8 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userStarted=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" backingUp=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        $r16 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r16);

     label3:
        if z0 == 0 goto label6;

        if z1 == 0 goto label6;

        if z4 == 0 goto label4;

        goto label6;

     label4:
        $r5 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.restrictions.JobRestriction checkIfRestricted(com.android.server.job.controllers.JobStatus)>(r1);

        if $r5 == null goto label5;

        return 0;

     label5:
        $z3 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isComponentUsable(com.android.server.job.controllers.JobStatus)>(r1);

        return $z3;

     label6:
        return 0;
    }

    public boolean cancelJob(int, int, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        com.android.server.job.JobStore $r3;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        com.android.server.job.controllers.JobStatus r12;
        boolean z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r12 = virtualinvoke $r3.<com.android.server.job.JobStore: com.android.server.job.controllers.JobStatus getJobByUidAndJobId(int,int)>(i0, i1);

     label02:
        if r12 == null goto label04;

     label03:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cancel() called by app, callingUid=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" jobId=");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>(r12, null, $r10);

     label04:
        if r12 == null goto label05;

        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void cancelJobsForPackageAndUid(java.lang.String, int, java.lang.String)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.String r1, $r5, $r8, r10;
        java.lang.Object r2, $r7;
        java.util.List r3;
        com.android.server.job.controllers.JobStatus r4;
        boolean $z0, $z1;
        com.android.server.job.JobStore $r6;
        int $i0, i2, i3;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r10 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r5 = "android";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>("JobScheduler", "Can\'t cancel all jobs for system package");

        return;

     label01:
        r2 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        $r6 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r3 = virtualinvoke $r6.<com.android.server.job.JobStore: java.util.List getJobsByUid(int)>(i2);

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        i3 = $i0 - 1;

     label03:
        if i3 < 0 goto label06;

     label04:
        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.job.controllers.JobStatus) $r7;

        $r8 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r10);

        if $z1 == 0 goto label05;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>(r4, null, r1);

     label05:
        i3 = i3 + -1;

        goto label03;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean cancelJobsForUid(int, java.lang.String)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1, $r4;
        java.util.List r2;
        com.android.server.job.JobStore $r3;
        int $i0, i2, i3;
        com.android.server.job.controllers.JobStatus $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        boolean z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i2 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        if i2 != 1000 goto label01;

        staticinvoke <android.util.Slog: int wtfStack(java.lang.String,java.lang.String)>("JobScheduler", "Can\'t cancel all jobs for system uid");

        return 0;

     label01:
        z0 = 0;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = virtualinvoke $r3.<com.android.server.job.JobStore: java.util.List getJobsByUid(int)>(i2);

     label03:
        i3 = 0;

     label04:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i3 >= $i0 goto label06;

        $r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (com.android.server.job.controllers.JobStatus) $r4;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>($r5, null, r7);

     label05:
        z0 = 1;

        i3 = i3 + 1;

        goto label04;

     label06:
        exitmonitor r1;

     label07:
        return z0;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void cancelJobsForUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1, $r3;
        com.android.server.job.JobStore $r2;
        int $i0, i1, i2;
        com.android.server.job.controllers.JobStatus $r4;
        java.lang.Throwable $r5;
        java.util.List r6;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r6 = virtualinvoke $r2.<com.android.server.job.JobStore: java.util.List getJobsByUser(int)>(i1);

     label2:
        i2 = 0;

     label3:
        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        if i2 >= $i0 goto label5;

        $r3 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (com.android.server.job.controllers.JobStatus) $r3;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>($r4, null, "user removed");

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void dumpInternal(com.android.internal.util.IndentingPrintWriter, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i5, $i6, $i7, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i41, i42, i44, i46, i49, i51, i52, i54, i55, i61, $i65, i71, i72, i73;
        long l1, l2, l3, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19;
        java.util.Iterator r1, r87;
        com.android.server.job.controllers.JobStatus r2, $r29, r182, r188;
        java.time.Clock $r3, $r4, $r5;
        com.android.server.job._$$Lambda$JobSchedulerService$VVCk0M0TpfxhVRrY_28dggbYJQc $r6;
        com.android.server.job.JobSchedulerService$Constants $r7;
        java.util.List $r8, $r9, $r22, $r26, $r44, $r53, $r64, $r65, $r71, r93, $r143;
        com.android.server.utils.quota.CountQuotaTracker $r10;
        int[] $r12;
        java.lang.String $r13, $r15, $r28, $r30, $r31, $r32, $r35, $r36, $r37, $r40, $r42, $r48, $r51, $r60, $r68, $r70;
        com.android.server.job.JobStore $r16, $r17, $r24, $r57;
        android.util.SparseIntArray $r18, $r19, $r38, $r39, $r41, $r43, $r63;
        com.android.server.job.JobPackageTracker $r20, $r21;
        com.android.server.job.JobConcurrencyManager $r23;
        com.android.server.job.JobSchedulerInternal$JobStorePersistStats $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, z12, z13, z14, z15, z16, z17, z18, z19;
        java.lang.Object $r27, $r34, $r45, $r54, $r59, $r66, $r72, $r74, r86, r92, r104, r141, r189;
        java.util.ArrayList $r33, $r62, $r180;
        com.android.server.job.controllers.StateController $r46, $r55, r88;
        java.lang.Class $r47;
        com.android.server.job.JobStore$JobSet $r58;
        com.android.server.job.restrictions.JobRestriction $r61, $r73, r109;
        java.lang.Throwable $r77, $r78, $r79, $r80, $r81, $r82, $r83, r89;
        com.android.internal.util.IndentingPrintWriter r84;
        java.lang.StringBuilder r90, r113, r146;
        com.android.server.job.JobServiceContext r187;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r84 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        i0 := @parameter1: int;

        i27 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r3 = <com.android.server.job.JobSchedulerService: java.time.Clock sSystemClock>;

        l1 = virtualinvoke $r3.<java.time.Clock: long millis()>();

        $r4 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l2 = virtualinvoke $r4.<java.time.Clock: long millis()>();

        $r5 = <com.android.server.job.JobSchedulerService: java.time.Clock sUptimeMillisClock>;

        l3 = virtualinvoke $r5.<java.time.Clock: long millis()>();

        $r6 = new com.android.server.job._$$Lambda$JobSchedulerService$VVCk0M0TpfxhVRrY_28dggbYJQc;

        specialinvoke $r6.<com.android.server.job._$$Lambda$JobSchedulerService$VVCk0M0TpfxhVRrY_28dggbYJQc: void <init>(int)>(i27);

        r86 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r86;

     label001:
        $r7 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        virtualinvoke $r7.<com.android.server.job.JobSchedulerService$Constants: void dump(com.android.internal.util.IndentingPrintWriter)>(r84);

        $r8 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        r87 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label002:
        z10 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>();

     label003:
        if z10 == 0 goto label007;

     label004:
        $r74 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>();

        r88 = (com.android.server.job.controllers.StateController) $r74;

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r88.<com.android.server.job.controllers.StateController: void dumpConstants(com.android.internal.util.IndentingPrintWriter)>(r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label005:
        goto label002;

     label006:
        $r83 := @caughtexception;

        r89 = $r83;

        goto label249;

     label007:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r9 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        i28 = interfaceinvoke $r9.<java.util.List: int size()>();

     label008:
        i29 = i28 + -1;

     label009:
        if i29 < 0 goto label012;

     label010:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    ");

        $r71 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $r72 = interfaceinvoke $r71.<java.util.List: java.lang.Object get(int)>(i29);

        $r73 = (com.android.server.job.restrictions.JobRestriction) $r72;

        virtualinvoke $r73.<com.android.server.job.restrictions.JobRestriction: void dumpConstants(com.android.internal.util.IndentingPrintWriter)>(r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label011:
        i29 = i29 + -1;

        goto label009;

     label012:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r10 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        virtualinvoke $r10.<com.android.server.utils.quota.CountQuotaTracker: void dump(com.android.internal.util.IndentingPrintWriter)>(r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Started users: ");

        $r12 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $r13 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r12);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Registered ");

        $r16 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $i6 = virtualinvoke $r16.<com.android.server.job.JobStore: int size()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i6);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" jobs:");

        $r17 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        i30 = virtualinvoke $r17.<com.android.server.job.JobStore: int size()>();

     label013:
        if i30 <= 0 goto label117;

        r92 = r86;

     label014:
        $r57 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r58 = $r57.<com.android.server.job.JobStore: com.android.server.job.JobStore$JobSet mJobSet>;

        r93 = virtualinvoke $r58.<com.android.server.job.JobStore$JobSet: java.util.List getAllJobs()>();

     label015:
        r92 = r86;

     label016:
        staticinvoke <com.android.server.job.JobSchedulerService: void sortJobs(java.util.List)>(r93);

     label017:
        r92 = r86;

     label018:
        r1 = interfaceinvoke r93.<java.util.List: java.util.Iterator iterator()>();

     label019:
        r92 = r86;

     label020:
        $z11 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label115;

     label021:
        r92 = r86;

     label022:
        $r59 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.job.controllers.JobStatus) $r59;

     label023:
        r92 = r86;

     label024:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("  JOB #");

     label025:
        r92 = r86;

     label026:
        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void printUniqueId(java.io.PrintWriter)>(r84);

     label027:
        r92 = r86;

     label028:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

     label029:
        r92 = r86;

     label030:
        $r60 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String toShortStringExceptUniqueId()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r60);

     label031:
        r92 = r86;

     label032:
        $z2 = interfaceinvoke $r6.<java.util.function.Predicate: boolean test(java.lang.Object)>(r2);

        if $z2 != 0 goto label034;

     label033:
        goto label019;

     label034:
        r104 = r86;

     label035:
        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void dump(java.io.PrintWriter,java.lang.String,boolean,long)>(r84, "    ", 1, l2);

     label036:
        r104 = r86;

     label037:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Restricted due to:");

     label038:
        r104 = r86;

     label039:
        $r61 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.restrictions.JobRestriction checkIfRestricted(com.android.server.job.controllers.JobStatus)>(r2);

        if $r61 == null goto label041;

     label040:
        z12 = 1;

        goto label042;

     label041:
        z12 = 0;

     label042:
        if z12 == 0 goto label062;

        r104 = r86;

     label043:
        $r64 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $i26 = interfaceinvoke $r64.<java.util.List: int size()>();

        i41 = $i26 - 1;

     label044:
        if i41 < 0 goto label061;

        r104 = r86;

     label045:
        $r65 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $r66 = interfaceinvoke $r65.<java.util.List: java.lang.Object get(int)>(i41);

        r109 = (com.android.server.job.restrictions.JobRestriction) $r66;

     label046:
        r104 = r86;

     label047:
        $z9 = virtualinvoke r109.<com.android.server.job.restrictions.JobRestriction: boolean isJobRestricted(com.android.server.job.controllers.JobStatus)>(r2);

        if $z9 == 0 goto label060;

     label048:
        r104 = r86;

     label049:
        i42 = virtualinvoke r109.<com.android.server.job.restrictions.JobRestriction: int getReason()>();

     label050:
        r104 = r86;

     label051:
        r113 = new java.lang.StringBuilder;

     label052:
        r104 = r86;

     label053:
        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

     label054:
        r104 = r86;

     label055:
        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label056:
        r104 = r86;

     label057:
        $r68 = staticinvoke <android.app.job.JobParameters: java.lang.String getReasonCodeDescription(int)>(i42);

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

     label058:
        r104 = r86;

     label059:
        $r70 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r70);

     label060:
        i41 = i41 + -1;

        goto label044;

     label061:
        goto label064;

     label062:
        r104 = r86;

     label063:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" none");

     label064:
        r104 = r86;

     label065:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(".");

     label066:
        r104 = r86;

     label067:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Ready: ");

     label068:
        r104 = r86;

     label069:
        $z3 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z3);

     label070:
        r104 = r86;

     label071:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" (job=");

     label072:
        r104 = r86;

     label073:
        $z4 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z4);

     label074:
        r104 = r86;

     label075:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" user=");

     label076:
        r104 = r86;

     label077:
        $z5 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean areUsersStartedLocked(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z5);

     label078:
        r104 = r86;

     label079:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" !restricted=");

     label080:
        if z12 != 0 goto label081;

        z13 = 1;

        goto label082;

     label081:
        z13 = 0;

     label082:
        r104 = r86;

     label083:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>(z13);

     label084:
        r104 = r86;

     label085:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" !pending=");

     label086:
        r104 = r86;

     label087:
        $r62 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $z6 = virtualinvoke $r62.<java.util.ArrayList: boolean contains(java.lang.Object)>(r2);

        if $z6 != 0 goto label089;

     label088:
        z14 = 1;

        goto label090;

     label089:
        z14 = 0;

     label090:
        r104 = r86;

     label091:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>(z14);

     label092:
        r104 = r86;

     label093:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" !active=");

     label094:
        r104 = r86;

     label095:
        $z7 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)>(r2);

        if $z7 != 0 goto label097;

     label096:
        z15 = 1;

        goto label098;

     label097:
        z15 = 0;

     label098:
        r104 = r86;

     label099:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>(z15);

     label100:
        r104 = r86;

     label101:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" !backingup=");

     label102:
        r104 = r86;

     label103:
        $r63 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        $i24 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i25 = virtualinvoke $r63.<android.util.SparseIntArray: int indexOfKey(int)>($i24);

        if $i25 >= 0 goto label105;

     label104:
        z16 = 1;

        goto label106;

     label105:
        z16 = 0;

     label106:
        r104 = r86;

     label107:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>(z16);

     label108:
        r104 = r86;

     label109:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" comp=");

     label110:
        r104 = r86;

     label111:
        $z8 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isComponentUsable(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z8);

     label112:
        r104 = r86;

     label113:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(")");

     label114:
        goto label019;

     label115:
        goto label119;

     label116:
        $r81 := @caughtexception;

        r89 = $r81;

        r86 = r92;

        goto label249;

     label117:
        r141 = r86;

     label118:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  None.");

     label119:
        i44 = 0;

     label120:
        r141 = r86;

     label121:
        $r143 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        i46 = interfaceinvoke $r143.<java.util.List: int size()>();

     label122:
        if i44 >= i46 goto label142;

        r104 = r86;

     label123:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label124:
        r104 = r86;

     label125:
        r146 = new java.lang.StringBuilder;

     label126:
        r104 = r86;

     label127:
        specialinvoke r146.<java.lang.StringBuilder: void <init>()>();

     label128:
        r104 = r86;

     label129:
        $r44 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r45 = interfaceinvoke $r44.<java.util.List: java.lang.Object get(int)>(i44);

        $r46 = (com.android.server.job.controllers.StateController) $r45;

        $r47 = virtualinvoke $r46.<java.lang.Object: java.lang.Class getClass()>();

        $r48 = virtualinvoke $r47.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

     label130:
        r104 = r86;

     label131:
        virtualinvoke r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label132:
        r104 = r86;

     label133:
        $r51 = virtualinvoke r146.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r51);

     label134:
        r104 = r86;

     label135:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label136:
        r104 = r86;

     label137:
        $r53 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r54 = interfaceinvoke $r53.<java.util.List: java.lang.Object get(int)>(i44);

        $r55 = (com.android.server.job.controllers.StateController) $r54;

        virtualinvoke $r55.<com.android.server.job.controllers.StateController: void dumpControllerStateLocked(com.android.internal.util.IndentingPrintWriter,java.util.function.Predicate)>(r84, $r6);

     label138:
        r104 = r86;

     label139:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label140:
        i44 = i44 + 1;

        goto label120;

     label141:
        $r77 := @caughtexception;

        r89 = $r77;

        r86 = r104;

        goto label249;

     label142:
        r141 = r86;

     label143:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label144:
        r141 = r86;

     label145:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Uid priority overrides:");

     label146:
        i49 = 0;

     label147:
        r141 = r86;

     label148:
        $r18 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        i51 = virtualinvoke $r18.<android.util.SparseIntArray: int size()>();

     label149:
        if i49 >= i51 goto label162;

        r104 = r86;

     label150:
        $r41 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        i52 = virtualinvoke $r41.<android.util.SparseIntArray: int keyAt(int)>(i49);

     label151:
        if i27 == -1 goto label153;

        r104 = r86;

     label152:
        $i23 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i52);

        if i27 != $i23 goto label161;

     label153:
        r104 = r86;

     label154:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("  ");

     label155:
        r104 = r86;

     label156:
        $r42 = staticinvoke <android.os.UserHandle: java.lang.String formatUid(int)>(i52);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r42);

     label157:
        r104 = r86;

     label158:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

     label159:
        r104 = r86;

     label160:
        $r43 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        $i22 = virtualinvoke $r43.<android.util.SparseIntArray: int valueAt(int)>(i49);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i22);

     label161:
        i49 = i49 + 1;

        goto label147;

     label162:
        r141 = r86;

     label163:
        $r19 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        i54 = virtualinvoke $r19.<android.util.SparseIntArray: int size()>();

     label164:
        if i54 <= 0 goto label186;

        r104 = r86;

     label165:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label166:
        r104 = r86;

     label167:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Backing up uids:");

     label168:
        z17 = 1;

        i55 = 0;

     label169:
        r104 = r86;

     label170:
        $r38 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        $i20 = virtualinvoke $r38.<android.util.SparseIntArray: int size()>();

        if i55 >= $i20 goto label184;

     label171:
        r104 = r86;

     label172:
        $r39 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        i5 = virtualinvoke $r39.<android.util.SparseIntArray: int keyAt(int)>(i55);

     label173:
        if i27 == -1 goto label175;

        r104 = r86;

        z18 = z17;

     label174:
        $i21 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i5);

        if i27 != $i21 goto label183;

     label175:
        if z17 == 0 goto label178;

        r104 = r86;

     label176:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("  ");

     label177:
        z17 = 0;

        goto label180;

     label178:
        r104 = r86;

     label179:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(", ");

     label180:
        r104 = r86;

     label181:
        $r40 = staticinvoke <android.os.UserHandle: java.lang.String formatUid(int)>(i5);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r40);

     label182:
        z18 = z17;

     label183:
        i55 = i55 + 1;

        z17 = z18;

        goto label169;

     label184:
        r104 = r86;

     label185:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label186:
        r141 = r86;

     label187:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label188:
        r141 = r86;

     label189:
        $r20 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r20.<com.android.server.job.JobPackageTracker: void dump(java.io.PrintWriter,java.lang.String,int)>(r84, "", i27);

     label190:
        r141 = r86;

     label191:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label192:
        r141 = r86;

     label193:
        $r21 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        z19 = virtualinvoke $r21.<com.android.server.job.JobPackageTracker: boolean dumpHistory(java.io.PrintWriter,java.lang.String,int)>(r84, "", i27);

     label194:
        if z19 == 0 goto label196;

        r104 = r86;

     label195:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label196:
        r141 = r86;

     label197:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Pending queue:");

     label198:
        i61 = 0;

     label199:
        r141 = r86;

     label200:
        $r180 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $i65 = virtualinvoke $r180.<java.util.ArrayList: int size()>();

        if i61 >= $i65 goto label213;

     label201:
        r141 = r86;

     label202:
        $r33 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r34 = virtualinvoke $r33.<java.util.ArrayList: java.lang.Object get(int)>(i61);

        r182 = (com.android.server.job.controllers.JobStatus) $r34;

     label203:
        r141 = r86;

     label204:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("  Pending #");

     label205:
        r141 = r86;

     label206:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i61);

     label207:
        r141 = r86;

     label208:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

     label209:
        r141 = r86;

     label210:
        $r35 = virtualinvoke r182.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r35);

     label211:
        virtualinvoke r182.<com.android.server.job.controllers.JobStatus: void dump(java.io.PrintWriter,java.lang.String,boolean,long)>(r84, "    ", 0, l2);

        i71 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>(r182);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Evaluated priority: ");

        $r36 = staticinvoke <android.app.job.JobInfo: java.lang.String getPriorityString(int)>(i71);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r36);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Tag: ");

        $r37 = virtualinvoke r182.<com.android.server.job.controllers.JobStatus: java.lang.String getTag()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r37);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Enq: ");

        $l18 = r182.<com.android.server.job.controllers.JobStatus: long madePending>;

        $l19 = $l18 - l3;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l19, r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label212:
        i61 = i61 + 1;

        goto label199;

     label213:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active jobs:");

     label214:
        i72 = 0;

     label215:
        $r22 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i7 = interfaceinvoke $r22.<java.util.List: int size()>();

        if i72 >= $i7 goto label223;

        $r26 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i72);

        r187 = (com.android.server.job.JobServiceContext) $r27;

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("  Slot #");

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i72);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        r188 = virtualinvoke r187.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

     label216:
        if r188 != null goto label221;

     label217:
        $r31 = r187.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason>;

        if $r31 == null goto label219;

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("inactive since ");

        $l17 = r187.<com.android.server.job.JobServiceContext: long mStoppedTime>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l17, l2, r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(", stopped because: ");

        $r32 = r187.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason>;

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r32);

     label218:
        goto label222;

     label219:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("inactive");

     label220:
        goto label222;

     label221:
        $r28 = virtualinvoke r188.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r28);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Running for: ");

        $l8 = virtualinvoke r187.<com.android.server.job.JobServiceContext: long getExecutionStartTimeElapsed()>();

        $l9 = l2 - $l8;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l9, r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(", timeout at: ");

        $l10 = virtualinvoke r187.<com.android.server.job.JobServiceContext: long getTimeoutElapsed()>();

        $l11 = $l10 - l2;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l11, r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r188.<com.android.server.job.controllers.JobStatus: void dump(java.io.PrintWriter,java.lang.String,boolean,long)>(r84, "    ", 0, l2);

        $r29 = virtualinvoke r187.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        i73 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>($r29);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Evaluated priority: ");

        $r30 = staticinvoke <android.app.job.JobInfo: java.lang.String getPriorityString(int)>(i73);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r30);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("    Active at ");

        $l12 = r188.<com.android.server.job.controllers.JobStatus: long madeActive>;

        $l13 = $l12 - l3;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l13, r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(", pending for ");

        $l15 = r188.<com.android.server.job.controllers.JobStatus: long madeActive>;

        $l14 = r188.<com.android.server.job.controllers.JobStatus: long madePending>;

        $l16 = $l15 - $l14;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l16, r84);

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label222:
        i72 = i72 + 1;

        goto label215;

     label223:
        if i0 != -1 goto label233;

        r189 = r86;

     label224:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label225:
        r189 = r86;

     label226:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mReadyToRock=");

     label227:
        r189 = r86;

     label228:
        $z0 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z0);

     label229:
        r189 = r86;

     label230:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("mReportedActive=");

     label231:
        r189 = r86;

     label232:
        $z1 = r0.<com.android.server.job.JobSchedulerService: boolean mReportedActive>;

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z1);

     label233:
        r189 = r86;

     label234:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label235:
        r189 = r86;

     label236:
        $r23 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobConcurrencyManager mConcurrencyManager>;

        virtualinvoke $r23.<com.android.server.job.JobConcurrencyManager: void dumpLocked(com.android.internal.util.IndentingPrintWriter,long,long)>(r84, l1, l2);

     label237:
        r189 = r86;

     label238:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label239:
        r189 = r86;

     label240:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("PersistStats: ");

     label241:
        r189 = r86;

     label242:
        $r24 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r25 = virtualinvoke $r24.<com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats getPersistStats()>();

        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r25);

     label243:
        r189 = r86;

     label244:
        exitmonitor r86;

     label245:
        virtualinvoke r84.<com.android.internal.util.IndentingPrintWriter: void println()>();

        return;

     label246:
        $r80 := @caughtexception;

        r89 = $r80;

        goto label249;

     label247:
        $r82 := @caughtexception;

        r89 = $r82;

        r86 = r141;

        goto label249;

     label248:
        $r79 := @caughtexception;

        r89 = $r79;

     label249:
        r189 = r86;

     label250:
        exitmonitor r86;

     label251:
        throw r89;

     label252:
        $r78 := @caughtexception;

        r89 = $r78;

        r86 = r189;

        goto label249;

        catch java.lang.Throwable from label001 to label002 with label248;
        catch java.lang.Throwable from label002 to label003 with label248;
        catch java.lang.Throwable from label004 to label005 with label006;
        catch java.lang.Throwable from label007 to label008 with label248;
        catch java.lang.Throwable from label010 to label011 with label006;
        catch java.lang.Throwable from label012 to label013 with label248;
        catch java.lang.Throwable from label014 to label015 with label116;
        catch java.lang.Throwable from label016 to label017 with label116;
        catch java.lang.Throwable from label018 to label019 with label116;
        catch java.lang.Throwable from label020 to label021 with label116;
        catch java.lang.Throwable from label022 to label023 with label116;
        catch java.lang.Throwable from label024 to label025 with label116;
        catch java.lang.Throwable from label026 to label027 with label116;
        catch java.lang.Throwable from label028 to label029 with label116;
        catch java.lang.Throwable from label030 to label031 with label116;
        catch java.lang.Throwable from label032 to label033 with label116;
        catch java.lang.Throwable from label035 to label036 with label141;
        catch java.lang.Throwable from label037 to label038 with label141;
        catch java.lang.Throwable from label039 to label040 with label141;
        catch java.lang.Throwable from label043 to label044 with label141;
        catch java.lang.Throwable from label045 to label046 with label141;
        catch java.lang.Throwable from label047 to label048 with label141;
        catch java.lang.Throwable from label049 to label050 with label141;
        catch java.lang.Throwable from label051 to label052 with label141;
        catch java.lang.Throwable from label053 to label054 with label141;
        catch java.lang.Throwable from label055 to label056 with label141;
        catch java.lang.Throwable from label057 to label058 with label141;
        catch java.lang.Throwable from label059 to label060 with label141;
        catch java.lang.Throwable from label063 to label064 with label141;
        catch java.lang.Throwable from label065 to label066 with label141;
        catch java.lang.Throwable from label067 to label068 with label141;
        catch java.lang.Throwable from label069 to label070 with label141;
        catch java.lang.Throwable from label071 to label072 with label141;
        catch java.lang.Throwable from label073 to label074 with label141;
        catch java.lang.Throwable from label075 to label076 with label141;
        catch java.lang.Throwable from label077 to label078 with label141;
        catch java.lang.Throwable from label079 to label080 with label141;
        catch java.lang.Throwable from label083 to label084 with label141;
        catch java.lang.Throwable from label085 to label086 with label141;
        catch java.lang.Throwable from label087 to label088 with label141;
        catch java.lang.Throwable from label091 to label092 with label141;
        catch java.lang.Throwable from label093 to label094 with label141;
        catch java.lang.Throwable from label095 to label096 with label141;
        catch java.lang.Throwable from label099 to label100 with label141;
        catch java.lang.Throwable from label101 to label102 with label141;
        catch java.lang.Throwable from label103 to label104 with label141;
        catch java.lang.Throwable from label107 to label108 with label141;
        catch java.lang.Throwable from label109 to label110 with label141;
        catch java.lang.Throwable from label111 to label112 with label141;
        catch java.lang.Throwable from label113 to label114 with label141;
        catch java.lang.Throwable from label118 to label119 with label247;
        catch java.lang.Throwable from label121 to label122 with label247;
        catch java.lang.Throwable from label123 to label124 with label141;
        catch java.lang.Throwable from label125 to label126 with label141;
        catch java.lang.Throwable from label127 to label128 with label141;
        catch java.lang.Throwable from label129 to label130 with label141;
        catch java.lang.Throwable from label131 to label132 with label141;
        catch java.lang.Throwable from label133 to label134 with label141;
        catch java.lang.Throwable from label135 to label136 with label141;
        catch java.lang.Throwable from label137 to label138 with label141;
        catch java.lang.Throwable from label139 to label140 with label141;
        catch java.lang.Throwable from label143 to label144 with label247;
        catch java.lang.Throwable from label145 to label146 with label247;
        catch java.lang.Throwable from label148 to label149 with label247;
        catch java.lang.Throwable from label150 to label151 with label141;
        catch java.lang.Throwable from label152 to label153 with label141;
        catch java.lang.Throwable from label154 to label155 with label141;
        catch java.lang.Throwable from label156 to label157 with label141;
        catch java.lang.Throwable from label158 to label159 with label141;
        catch java.lang.Throwable from label160 to label161 with label141;
        catch java.lang.Throwable from label163 to label164 with label247;
        catch java.lang.Throwable from label165 to label166 with label141;
        catch java.lang.Throwable from label167 to label168 with label141;
        catch java.lang.Throwable from label170 to label171 with label141;
        catch java.lang.Throwable from label172 to label173 with label141;
        catch java.lang.Throwable from label174 to label175 with label141;
        catch java.lang.Throwable from label176 to label177 with label141;
        catch java.lang.Throwable from label179 to label180 with label141;
        catch java.lang.Throwable from label181 to label182 with label141;
        catch java.lang.Throwable from label185 to label186 with label141;
        catch java.lang.Throwable from label187 to label188 with label247;
        catch java.lang.Throwable from label189 to label190 with label247;
        catch java.lang.Throwable from label191 to label192 with label247;
        catch java.lang.Throwable from label193 to label194 with label247;
        catch java.lang.Throwable from label195 to label196 with label141;
        catch java.lang.Throwable from label197 to label198 with label247;
        catch java.lang.Throwable from label200 to label201 with label247;
        catch java.lang.Throwable from label202 to label203 with label247;
        catch java.lang.Throwable from label204 to label205 with label247;
        catch java.lang.Throwable from label206 to label207 with label247;
        catch java.lang.Throwable from label208 to label209 with label247;
        catch java.lang.Throwable from label210 to label211 with label247;
        catch java.lang.Throwable from label211 to label212 with label246;
        catch java.lang.Throwable from label213 to label214 with label246;
        catch java.lang.Throwable from label215 to label216 with label246;
        catch java.lang.Throwable from label217 to label218 with label246;
        catch java.lang.Throwable from label219 to label220 with label246;
        catch java.lang.Throwable from label221 to label222 with label246;
        catch java.lang.Throwable from label224 to label225 with label252;
        catch java.lang.Throwable from label226 to label227 with label252;
        catch java.lang.Throwable from label228 to label229 with label252;
        catch java.lang.Throwable from label230 to label231 with label252;
        catch java.lang.Throwable from label232 to label233 with label252;
        catch java.lang.Throwable from label234 to label235 with label252;
        catch java.lang.Throwable from label236 to label237 with label252;
        catch java.lang.Throwable from label238 to label239 with label252;
        catch java.lang.Throwable from label240 to label241 with label252;
        catch java.lang.Throwable from label242 to label243 with label252;
        catch java.lang.Throwable from label244 to label245 with label252;
        catch java.lang.Throwable from label250 to label251 with label252;
    }

    void dumpInternalProto(java.io.FileDescriptor, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1, $i10, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i29, i30, i31, i32, i33, i51, i52, i53, i55, i57, i58;
        long l2, l3, l4, l5, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l19, $l20, l28, l50, l54, l63, l64, l65, l66;
        com.android.server.job.controllers.JobStatus r2, $r24, r73, r76;
        java.util.Iterator r3, r61, r68, r71, r72, r74;
        android.util.proto.ProtoOutputStream $r4;
        java.time.Clock $r5, $r6, $r7;
        com.android.server.job._$$Lambda$JobSchedulerService$eQqdX2w3FwBMn_LMfN2Y0HQCDq4 $r8;
        com.android.server.job.JobSchedulerService$Constants $r9;
        java.util.List $r10, $r11, $r14, $r20, $r39, $r41, r67;
        com.android.server.utils.quota.CountQuotaTracker $r12;
        com.android.server.job.JobStore $r13, $r21, $r33;
        android.util.SparseIntArray $r15, $r16, $r28, $r29, $r30, $r38;
        com.android.server.job.JobPackageTracker $r17, $r18;
        java.util.ArrayList $r19, $r37;
        com.android.server.job.JobSchedulerInternal$JobStorePersistStats $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, $z10, z11, z12, z13, $z14, z15, z16, z17;
        java.lang.Object $r23, $r27, $r31, $r35, $r40, $r42, $r44, r60, r65, r69, r78;
        java.lang.String $r25, $r26;
        com.android.server.job.controllers.StateController $r32, $r45;
        com.android.server.job.JobStore$JobSet $r34;
        com.android.server.job.restrictions.JobRestriction $r36, $r43, r70;
        java.lang.Throwable $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, r64;
        java.io.FileDescriptor r58;
        int[] r66;
        com.android.server.job.JobServiceContext r75;
        com.android.server.job.JobConcurrencyManager r77;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r58 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

        $r4 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r4.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r58);

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r5 = <com.android.server.job.JobSchedulerService: java.time.Clock sSystemClock>;

        l2 = virtualinvoke $r5.<java.time.Clock: long millis()>();

        $r6 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l3 = virtualinvoke $r6.<java.time.Clock: long millis()>();

        $r7 = <com.android.server.job.JobSchedulerService: java.time.Clock sUptimeMillisClock>;

        l4 = virtualinvoke $r7.<java.time.Clock: long millis()>();

        $r8 = new com.android.server.job._$$Lambda$JobSchedulerService$eQqdX2w3FwBMn_LMfN2Y0HQCDq4;

        specialinvoke $r8.<com.android.server.job._$$Lambda$JobSchedulerService$eQqdX2w3FwBMn_LMfN2Y0HQCDq4: void <init>(int)>(i1);

        r60 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r60;

     label001:
        l28 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268033L);

        $r9 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        virtualinvoke $r9.<com.android.server.job.JobSchedulerService$Constants: void dump(android.util.proto.ProtoOutputStream)>($r4);

        $r10 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        r61 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label002:
        z9 = interfaceinvoke r61.<java.util.Iterator: boolean hasNext()>();

     label003:
        if z9 == 0 goto label007;

     label004:
        $r44 = interfaceinvoke r61.<java.util.Iterator: java.lang.Object next()>();

        $r45 = (com.android.server.job.controllers.StateController) $r44;

        virtualinvoke $r45.<com.android.server.job.controllers.StateController: void dumpConstants(android.util.proto.ProtoOutputStream)>($r4);

     label005:
        goto label002;

     label006:
        $r57 := @caughtexception;

        r64 = $r57;

        r65 = r60;

        goto label179;

     label007:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l28);

        $r11 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        i29 = interfaceinvoke $r11.<java.util.List: int size()>();

     label008:
        i30 = i29 + -1;

     label009:
        if i30 < 0 goto label012;

     label010:
        $r41 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $r42 = interfaceinvoke $r41.<java.util.List: java.lang.Object get(int)>(i30);

        $r43 = (com.android.server.job.restrictions.JobRestriction) $r42;

        virtualinvoke $r43.<com.android.server.job.restrictions.JobRestriction: void dumpConstants(android.util.proto.ProtoOutputStream)>($r4);

     label011:
        i30 = i30 + -1;

        goto label009;

     label012:
        r66 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        i31 = lengthof r66;

     label013:
        i32 = 0;

     label014:
        if i32 >= i31 goto label017;

     label015:
        $i27 = r66[i32];

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(2220498092034L, $i27);

     label016:
        i32 = i32 + 1;

        goto label014;

     label017:
        $r12 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        virtualinvoke $r12.<com.android.server.utils.quota.CountQuotaTracker: void dump(android.util.proto.ProtoOutputStream,long)>($r4, 1146756268054L);

        $r13 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        i33 = virtualinvoke $r13.<com.android.server.job.JobStore: int size()>();

     label018:
        if i33 <= 0 goto label081;

        r65 = r60;

     label019:
        $r33 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r34 = $r33.<com.android.server.job.JobStore: com.android.server.job.JobStore$JobSet mJobSet>;

        r67 = virtualinvoke $r34.<com.android.server.job.JobStore$JobSet: java.util.List getAllJobs()>();

     label020:
        r65 = r60;

     label021:
        staticinvoke <com.android.server.job.JobSchedulerService: void sortJobs(java.util.List)>(r67);

     label022:
        r65 = r60;

     label023:
        r68 = interfaceinvoke r67.<java.util.List: java.util.Iterator iterator()>();

     label024:
        r65 = r60;

     label025:
        $z10 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label079;

     label026:
        r65 = r60;

     label027:
        $r35 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.job.controllers.JobStatus) $r35;

     label028:
        r65 = r60;

     label029:
        l5 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895811L);

     label030:
        r65 = r60;

     label031:
        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void writeToShortProto(android.util.proto.ProtoOutputStream,long)>($r4, 1146756268033L);

     label032:
        r65 = r60;

     label033:
        z11 = interfaceinvoke $r8.<java.util.function.Predicate: boolean test(java.lang.Object)>(r2);

     label034:
        if z11 != 0 goto label035;

        goto label024;

     label035:
        r69 = r60;

     label036:
        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void dump(android.util.proto.ProtoOutputStream,long,boolean,long)>($r4, 1146756268034L, 1, l3);

     label037:
        r69 = r60;

     label038:
        $z2 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366154L, $z2);

     label039:
        r69 = r60;

     label040:
        $z3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366147L, $z3);

     label041:
        r69 = r60;

     label042:
        $z4 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean areUsersStartedLocked(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z4);

     label043:
        r69 = r60;

     label044:
        $r36 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.restrictions.JobRestriction checkIfRestricted(com.android.server.job.controllers.JobStatus)>(r2);

        if $r36 == null goto label046;

     label045:
        z12 = 1;

        goto label047;

     label046:
        z12 = 0;

     label047:
        r69 = r60;

     label048:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366155L, z12);

     label049:
        r69 = r60;

     label050:
        $r37 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $z5 = virtualinvoke $r37.<java.util.ArrayList: boolean contains(java.lang.Object)>(r2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z5);

     label051:
        r69 = r60;

     label052:
        $z6 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z6);

     label053:
        r69 = r60;

     label054:
        $r38 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        $i24 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i25 = virtualinvoke $r38.<android.util.SparseIntArray: int indexOfKey(int)>($i24);

        if $i25 < 0 goto label056;

     label055:
        z13 = 1;

        goto label057;

     label056:
        z13 = 0;

     label057:
        r69 = r60;

     label058:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, z13);

     label059:
        r69 = r60;

     label060:
        $z7 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isComponentUsable(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366152L, $z7);

     label061:
        r69 = r60;

     label062:
        $r39 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        r3 = interfaceinvoke $r39.<java.util.List: java.util.Iterator iterator()>();

     label063:
        r69 = r60;

     label064:
        $z14 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label076;

     label065:
        r69 = r60;

     label066:
        $r40 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r70 = (com.android.server.job.restrictions.JobRestriction) $r40;

     label067:
        r69 = r60;

     label068:
        l50 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895820L);

     label069:
        r69 = r60;

     label070:
        $i26 = virtualinvoke r70.<com.android.server.job.restrictions.JobRestriction: int getReason()>();

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1159641169921L, $i26);

     label071:
        r69 = r60;

     label072:
        $z8 = virtualinvoke r70.<com.android.server.job.restrictions.JobRestriction: boolean isJobRestricted(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, $z8);

     label073:
        r69 = r60;

     label074:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l50);

     label075:
        goto label063;

     label076:
        r69 = r60;

     label077:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l5);

     label078:
        goto label024;

     label079:
        r65 = r60;

        goto label082;

     label080:
        $r47 := @caughtexception;

        r64 = $r47;

        goto label179;

     label081:
        r65 = r60;

     label082:
        $r14 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        r71 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label083:
        z15 = interfaceinvoke r71.<java.util.Iterator: boolean hasNext()>();

     label084:
        if z15 == 0 goto label088;

        r69 = r65;

     label085:
        $r31 = interfaceinvoke r71.<java.util.Iterator: java.lang.Object next()>();

        $r32 = (com.android.server.job.controllers.StateController) $r31;

        virtualinvoke $r32.<com.android.server.job.controllers.StateController: void dumpControllerStateLocked(android.util.proto.ProtoOutputStream,long,java.util.function.Predicate)>($r4, 2246267895812L, $r8);

     label086:
        goto label083;

     label087:
        $r56 := @caughtexception;

        r64 = $r56;

        r65 = r69;

        goto label179;

     label088:
        i51 = 0;

     label089:
        $r15 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        i52 = virtualinvoke $r15.<android.util.SparseIntArray: int size()>();

     label090:
        if i51 >= i52 goto label098;

     label091:
        $r29 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        i53 = virtualinvoke $r29.<android.util.SparseIntArray: int keyAt(int)>(i51);

     label092:
        if i1 == -1 goto label094;

     label093:
        $i23 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i53);

        if i1 != $i23 goto label095;

     label094:
        l54 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895813L);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, i53);

        $r30 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        $i22 = virtualinvoke $r30.<android.util.SparseIntArray: int valueAt(int)>(i51);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071810L, $i22);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l54);

     label095:
        i51 = i51 + 1;

        goto label089;

     label096:
        $r49 := @caughtexception;

        r64 = $r49;

        goto label179;

     label097:
        $r55 := @caughtexception;

        r64 = $r55;

        goto label179;

     label098:
        i55 = 0;

     label099:
        $r16 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        i57 = virtualinvoke $r16.<android.util.SparseIntArray: int size()>();

     label100:
        if i55 >= i57 goto label106;

     label101:
        $r28 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        i58 = virtualinvoke $r28.<android.util.SparseIntArray: int keyAt(int)>(i55);

     label102:
        if i1 == -1 goto label104;

     label103:
        $i21 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i58);

        if i1 != $i21 goto label105;

     label104:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(2220498092038L, i58);

     label105:
        i55 = i55 + 1;

        goto label099;

     label106:
        $r17 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r17.<com.android.server.job.JobPackageTracker: void dump(android.util.proto.ProtoOutputStream,long,int)>($r4, 1146756268040L, i1);

     label107:
        $r18 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r18.<com.android.server.job.JobPackageTracker: void dumpHistory(android.util.proto.ProtoOutputStream,long,int)>($r4, 1146756268039L, i1);

     label108:
        $r19 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        r72 = virtualinvoke $r19.<java.util.ArrayList: java.util.Iterator iterator()>();

     label109:
        z16 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

     label110:
        if z16 == 0 goto label122;

     label111:
        $r27 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (com.android.server.job.controllers.JobStatus) $r27;

        l63 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895817L);

        virtualinvoke r73.<com.android.server.job.controllers.JobStatus: void writeToShortProto(android.util.proto.ProtoOutputStream,long)>($r4, 1146756268033L);

     label112:
        r69 = r65;

     label113:
        virtualinvoke r73.<com.android.server.job.controllers.JobStatus: void dump(android.util.proto.ProtoOutputStream,long,boolean,long)>($r4, 1146756268034L, 0, l3);

     label114:
        r69 = r65;

     label115:
        $i18 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>(r73);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071811L, $i18);

     label116:
        r69 = r65;

     label117:
        $l19 = r73.<com.android.server.job.controllers.JobStatus: long madePending>;

        $l20 = l4 - $l19;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529668L, $l20);

     label118:
        r69 = r65;

     label119:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l63);

     label120:
        goto label109;

     label121:
        $r48 := @caughtexception;

        r64 = $r48;

        goto label179;

     label122:
        $r20 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        r74 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>();

     label123:
        z17 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();

     label124:
        if z17 == 0 goto label162;

        r69 = r65;

     label125:
        $r23 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();

        r75 = (com.android.server.job.JobServiceContext) $r23;

     label126:
        r69 = r65;

     label127:
        l64 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895818L);

     label128:
        r69 = r65;

     label129:
        r76 = virtualinvoke r75.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

     label130:
        if r76 != null goto label141;

        r69 = r65;

     label131:
        l65 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268033L);

     label132:
        r69 = r65;

     label133:
        $l16 = r75.<com.android.server.job.JobServiceContext: long mStoppedTime>;

        $l17 = l3 - $l16;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529665L, $l17);

     label134:
        r69 = r65;

     label135:
        $r25 = r75.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason>;

        if $r25 == null goto label138;

     label136:
        r69 = r65;

     label137:
        $r26 = r75.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333442L, $r26);

     label138:
        r69 = r65;

     label139:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l65);

     label140:
        goto label159;

     label141:
        r69 = r65;

     label142:
        l66 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268034L);

     label143:
        r69 = r65;

     label144:
        virtualinvoke r76.<com.android.server.job.controllers.JobStatus: void writeToShortProto(android.util.proto.ProtoOutputStream,long)>($r4, 1146756268033L);

     label145:
        r69 = r65;

     label146:
        $l6 = virtualinvoke r75.<com.android.server.job.JobServiceContext: long getExecutionStartTimeElapsed()>();

        $l7 = l3 - $l6;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529666L, $l7);

     label147:
        r69 = r65;

     label148:
        $l8 = virtualinvoke r75.<com.android.server.job.JobServiceContext: long getTimeoutElapsed()>();

        $l9 = $l8 - l3;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529667L, $l9);

     label149:
        r69 = r65;

     label150:
        virtualinvoke r76.<com.android.server.job.controllers.JobStatus: void dump(android.util.proto.ProtoOutputStream,long,boolean,long)>($r4, 1146756268036L, 0, l3);

     label151:
        r69 = r65;

     label152:
        $r24 = virtualinvoke r75.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        $i10 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)>($r24);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1172526071813L, $i10);

     label153:
        r69 = r65;

     label154:
        $l11 = r76.<com.android.server.job.controllers.JobStatus: long madeActive>;

        $l12 = l4 - $l11;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529670L, $l12);

     label155:
        r69 = r65;

     label156:
        $l14 = r76.<com.android.server.job.controllers.JobStatus: long madeActive>;

        $l13 = r76.<com.android.server.job.controllers.JobStatus: long madePending>;

        $l15 = $l14 - $l13;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529671L, $l15);

     label157:
        r69 = r65;

     label158:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l66);

     label159:
        r69 = r65;

     label160:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l64);

     label161:
        goto label123;

     label162:
        if i0 != -1 goto label166;

     label163:
        $z0 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366155L, $z0);

        $z1 = r0.<com.android.server.job.JobSchedulerService: boolean mReportedActive>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366156L, $z1);

     label164:
        goto label166;

     label165:
        $r50 := @caughtexception;

        r64 = $r50;

        goto label179;

     label166:
        r77 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobConcurrencyManager mConcurrencyManager>;

     label167:
        r78 = r65;

     label168:
        virtualinvoke r77.<com.android.server.job.JobConcurrencyManager: void dumpProtoLocked(android.util.proto.ProtoOutputStream,long,long,long)>($r4, 1146756268052L, l2, l3);

     label169:
        r78 = r65;

     label170:
        $r21 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $r22 = virtualinvoke $r21.<com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats getPersistStats()>();

        virtualinvoke $r22.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: void dumpDebug(android.util.proto.ProtoOutputStream,long)>($r4, 1146756268053L);

     label171:
        r78 = r65;

     label172:
        exitmonitor r65;

     label173:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void flush()>();

        return;

     label174:
        $r46 := @caughtexception;

        r64 = $r46;

        goto label177;

     label175:
        $r52 := @caughtexception;

        r64 = $r52;

        goto label179;

     label176:
        $r51 := @caughtexception;

        r64 = $r51;

     label177:
        goto label179;

     label178:
        $r53 := @caughtexception;

        r65 = r60;

        r64 = $r53;

     label179:
        r78 = r65;

     label180:
        exitmonitor r65;

     label181:
        throw r64;

     label182:
        $r54 := @caughtexception;

        r64 = $r54;

        r65 = r78;

        goto label179;

        catch java.lang.Throwable from label001 to label002 with label178;
        catch java.lang.Throwable from label002 to label003 with label178;
        catch java.lang.Throwable from label004 to label005 with label006;
        catch java.lang.Throwable from label007 to label008 with label178;
        catch java.lang.Throwable from label010 to label011 with label006;
        catch java.lang.Throwable from label012 to label013 with label178;
        catch java.lang.Throwable from label015 to label016 with label006;
        catch java.lang.Throwable from label017 to label018 with label178;
        catch java.lang.Throwable from label019 to label020 with label080;
        catch java.lang.Throwable from label021 to label022 with label080;
        catch java.lang.Throwable from label023 to label024 with label080;
        catch java.lang.Throwable from label025 to label026 with label080;
        catch java.lang.Throwable from label027 to label028 with label080;
        catch java.lang.Throwable from label029 to label030 with label080;
        catch java.lang.Throwable from label031 to label032 with label080;
        catch java.lang.Throwable from label033 to label034 with label080;
        catch java.lang.Throwable from label036 to label037 with label087;
        catch java.lang.Throwable from label038 to label039 with label087;
        catch java.lang.Throwable from label040 to label041 with label087;
        catch java.lang.Throwable from label042 to label043 with label087;
        catch java.lang.Throwable from label044 to label045 with label087;
        catch java.lang.Throwable from label048 to label049 with label087;
        catch java.lang.Throwable from label050 to label051 with label087;
        catch java.lang.Throwable from label052 to label053 with label087;
        catch java.lang.Throwable from label054 to label055 with label087;
        catch java.lang.Throwable from label058 to label059 with label087;
        catch java.lang.Throwable from label060 to label061 with label087;
        catch java.lang.Throwable from label062 to label063 with label087;
        catch java.lang.Throwable from label064 to label065 with label087;
        catch java.lang.Throwable from label066 to label067 with label087;
        catch java.lang.Throwable from label068 to label069 with label087;
        catch java.lang.Throwable from label070 to label071 with label087;
        catch java.lang.Throwable from label072 to label073 with label087;
        catch java.lang.Throwable from label074 to label075 with label087;
        catch java.lang.Throwable from label077 to label078 with label087;
        catch java.lang.Throwable from label082 to label083 with label176;
        catch java.lang.Throwable from label083 to label084 with label176;
        catch java.lang.Throwable from label085 to label086 with label087;
        catch java.lang.Throwable from label089 to label090 with label176;
        catch java.lang.Throwable from label091 to label092 with label097;
        catch java.lang.Throwable from label093 to label094 with label096;
        catch java.lang.Throwable from label094 to label095 with label096;
        catch java.lang.Throwable from label099 to label100 with label175;
        catch java.lang.Throwable from label101 to label102 with label096;
        catch java.lang.Throwable from label103 to label104 with label096;
        catch java.lang.Throwable from label104 to label105 with label096;
        catch java.lang.Throwable from label106 to label107 with label175;
        catch java.lang.Throwable from label107 to label108 with label175;
        catch java.lang.Throwable from label108 to label109 with label175;
        catch java.lang.Throwable from label109 to label110 with label175;
        catch java.lang.Throwable from label111 to label112 with label121;
        catch java.lang.Throwable from label113 to label114 with label087;
        catch java.lang.Throwable from label115 to label116 with label087;
        catch java.lang.Throwable from label117 to label118 with label087;
        catch java.lang.Throwable from label119 to label120 with label087;
        catch java.lang.Throwable from label122 to label123 with label176;
        catch java.lang.Throwable from label123 to label124 with label176;
        catch java.lang.Throwable from label125 to label126 with label087;
        catch java.lang.Throwable from label127 to label128 with label087;
        catch java.lang.Throwable from label129 to label130 with label087;
        catch java.lang.Throwable from label131 to label132 with label087;
        catch java.lang.Throwable from label133 to label134 with label087;
        catch java.lang.Throwable from label135 to label136 with label087;
        catch java.lang.Throwable from label137 to label138 with label087;
        catch java.lang.Throwable from label139 to label140 with label087;
        catch java.lang.Throwable from label142 to label143 with label087;
        catch java.lang.Throwable from label144 to label145 with label087;
        catch java.lang.Throwable from label146 to label147 with label087;
        catch java.lang.Throwable from label148 to label149 with label087;
        catch java.lang.Throwable from label150 to label151 with label087;
        catch java.lang.Throwable from label152 to label153 with label087;
        catch java.lang.Throwable from label154 to label155 with label087;
        catch java.lang.Throwable from label156 to label157 with label087;
        catch java.lang.Throwable from label158 to label159 with label087;
        catch java.lang.Throwable from label160 to label161 with label087;
        catch java.lang.Throwable from label163 to label164 with label165;
        catch java.lang.Throwable from label166 to label167 with label174;
        catch java.lang.Throwable from label168 to label169 with label182;
        catch java.lang.Throwable from label170 to label171 with label182;
        catch java.lang.Throwable from label172 to label173 with label182;
        catch java.lang.Throwable from label180 to label181 with label182;
    }

    void evaluateControllerStatesLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.job.controllers.StateController $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.job.controllers.StateController) $r4;

        virtualinvoke $r5.<com.android.server.job.controllers.StateController: void evaluateStateLocked(com.android.server.job.controllers.JobStatus)>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    int evaluateJobPriorityLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.util.SparseIntArray $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getPriority()>();

        if i0 < 30 goto label1;

        $i5 = specialinvoke r0.<com.android.server.job.JobSchedulerService: int adjustJobPriority(int,com.android.server.job.controllers.JobStatus)>(i0, r1);

        return $i5;

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        i1 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int,int)>($i2, 0);

        if i1 == 0 goto label2;

        $i4 = specialinvoke r0.<com.android.server.job.JobSchedulerService: int adjustJobPriority(int,com.android.server.job.controllers.JobStatus)>(i1, r1);

        return $i4;

     label2:
        $i3 = specialinvoke r0.<com.android.server.job.JobSchedulerService: int adjustJobPriority(int,com.android.server.job.controllers.JobStatus)>(i0, r1);

        return $i3;
    }

    int executeCancelCommand(java.io.PrintWriter, java.lang.String, int, boolean, int)
    {
        com.android.server.job.JobSchedulerService r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r11, $r17, $r22, $r30;
        int i0, i1, i2, i4;
        boolean z0, $z1, $z2, $z3;
        android.content.pm.IPackageManager $r3;
        java.lang.StringBuilder $r4, $r12, $r18, $r23;
        android.os.RemoteException $r31;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label1;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("executeCancelCommand(): ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r30);

     label1:
        i4 = -1;

     label2:
        $r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        i2 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r2, 0, i0);

     label3:
        i4 = i2;

        goto label5;

     label4:
        $r31 := @caughtexception;

     label5:
        if i4 >= 0 goto label6;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.");

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        return -1000;

     label6:
        if z0 != 0 goto label7;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Canceling all jobs for ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in user ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        $z3 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: boolean cancelJobsForUid(int,java.lang.String)>(i4, "cancel shell command for package");

        if $z3 != 0 goto label8;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("No matching jobs found.");

        goto label8;

     label7:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Canceling job ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/#");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in user ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $z2 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: boolean cancelJob(int,int,int)>(i4, i1, 2000);

        if $z2 != 0 goto label8;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("No matching job found.");

     label8:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    int executeRunCommand(java.lang.String, int, int, boolean, boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1, i3, $i5, i6;
        boolean z0, z1, $z2;
        java.lang.StringBuilder $r1;
        java.lang.String $r12, r19;
        com.android.server.job.JobStore $r13;
        java.util.List $r14, $r24;
        java.lang.Object $r15, r22;
        com.android.server.job.controllers.StateController $r16;
        android.os.RemoteException $r17;
        java.lang.Throwable $r18;
        android.content.pm.IPackageManager r21;
        com.android.server.job.controllers.JobStatus r23;
        byte b4;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r19 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("executeRunCommand(): ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" f=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r12 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r12);

     label01:
        r21 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

     label02:
        if i3 == -1 goto label03;

        goto label04;

     label03:
        i3 = 0;

     label04:
        i1 = interfaceinvoke r21.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r19, 0, i3);

     label05:
        if i1 >= 0 goto label06;

        return -1000;

     label06:
        r22 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r22;

     label07:
        $r13 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r23 = virtualinvoke $r13.<com.android.server.job.JobStore: com.android.server.job.controllers.JobStatus getJobByUidAndJobId(int,int)>(i1, i0);

     label08:
        if r23 != null goto label11;

     label09:
        exitmonitor r22;

     label10:
        return -1001;

     label11:
        if z1 == 0 goto label12;

        b4 = 3;

        goto label14;

     label12:
        if z0 == 0 goto label13;

        b4 = 1;

        goto label14;

     label13:
        b4 = 2;

     label14:
        r23.<com.android.server.job.controllers.JobStatus: int overrideState> = b4;

        $r24 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i5 = interfaceinvoke $r24.<java.util.List: int size()>();

        i6 = $i5 - 1;

     label15:
        if i6 < 0 goto label18;

     label16:
        $r14 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i6);

        $r16 = (com.android.server.job.controllers.StateController) $r15;

        virtualinvoke $r16.<com.android.server.job.controllers.StateController: void reevaluateStateLocked(int)>(i1);

     label17:
        i6 = i6 + -1;

        goto label15;

     label18:
        $z2 = virtualinvoke r23.<com.android.server.job.controllers.JobStatus: boolean isConstraintsSatisfied()>();

        if $z2 != 0 goto label20;

        r23.<com.android.server.job.controllers.JobStatus: int overrideState> = 0;

        exitmonitor r22;

     label19:
        return -1002;

     label20:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void queueReadyJobsForExecutionLocked()>();

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void maybeRunPendingJobsLocked()>();

        exitmonitor r22;

     label21:
        goto label26;

     label22:
        $r18 := @caughtexception;

     label23:
        exitmonitor r22;

     label24:
        throw $r18;

     label25:
        $r17 := @caughtexception;

     label26:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label25;
        catch android.os.RemoteException from label04 to label05 with label25;
        catch android.os.RemoteException from label06 to label07 with label25;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch android.os.RemoteException from label24 to label25 with label25;
    }

    int executeTimeoutCommand(java.io.PrintWriter, java.lang.String, int, boolean, int)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.String r1, $r7, $r15;
        int i0, i1, i3, $i4;
        boolean z0, $z1, $z2, z3;
        com.android.server.job.JobServiceContext r2;
        com.android.server.job.controllers.JobStatus r3;
        java.util.List $r4, $r20;
        java.lang.Object $r5, r19;
        android.content.ComponentName $r6;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r16;
        java.io.PrintWriter r17;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r17 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label01;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("executeTimeoutCommand(): ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r15);

     label01:
        r19 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r19;

        z3 = 0;

        i3 = 0;

     label02:
        $r20 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i4 = interfaceinvoke $r20.<java.util.List: int size()>();

        if i3 >= $i4 goto label07;

        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (com.android.server.job.JobServiceContext) $r5;

        r3 = virtualinvoke r2.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

     label03:
        $z2 = virtualinvoke r2.<com.android.server.job.JobServiceContext: boolean timeoutIfExecutingLocked(java.lang.String,int,boolean,int,java.lang.String)>(r1, i0, z0, i1, "shell");

        if $z2 == 0 goto label06;

     label04:
        z3 = 1;

     label05:
        virtualinvoke r17.<java.io.PrintWriter: void print(java.lang.String)>("Timing out: ");

        virtualinvoke r3.<com.android.server.job.controllers.JobStatus: void printUniqueId(java.io.PrintWriter)>(r17);

        virtualinvoke r17.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $r6 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r7 = virtualinvoke $r6.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>($r7);

     label06:
        i3 = i3 + 1;

        goto label02;

     label07:
        if z3 != 0 goto label09;

     label08:
        virtualinvoke r17.<java.io.PrintWriter: void println(java.lang.String)>("No matching executing jobs found.");

     label09:
        exitmonitor r19;

     label10:
        return 0;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r19;

     label13:
        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    boolean getBatteryCharging()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1;
        com.android.server.job.controllers.BatteryController $r3, $r4;
        com.android.server.job.controllers.BatteryController$ChargingTracker $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.BatteryController: com.android.server.job.controllers.BatteryController$ChargingTracker getTracker()>();

        z0 = virtualinvoke $r5.<com.android.server.job.controllers.BatteryController$ChargingTracker: boolean isOnStablePower()>();

     label2:
        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean getBatteryNotLow()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1;
        com.android.server.job.controllers.BatteryController $r3, $r4;
        com.android.server.job.controllers.BatteryController$ChargingTracker $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.BatteryController: com.android.server.job.controllers.BatteryController$ChargingTracker getTracker()>();

        z0 = virtualinvoke $r5.<com.android.server.job.controllers.BatteryController$ChargingTracker: boolean isBatteryNotLow()>();

     label2:
        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int getBatterySeq()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1;
        com.android.server.job.controllers.BatteryController $r3, $r4;
        com.android.server.job.controllers.BatteryController$ChargingTracker $r5;
        java.lang.Throwable $r6;
        int i0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.BatteryController: com.android.server.job.controllers.BatteryController$ChargingTracker getTracker()>();

        i0 = virtualinvoke $r5.<com.android.server.job.controllers.BatteryController$ChargingTracker: int getSeq()>();

     label2:
        goto label4;

     label3:
        i0 = -1;

     label4:
        exitmonitor r1;

     label5:
        return i0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.android.server.job.JobSchedulerService$Constants getConstants()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobSchedulerService$Constants $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        return $r1;
    }

    int getJobState(java.io.PrintWriter, java.lang.String, int, int)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobStore $r1;
        boolean $z0, $z1, $z2, z3, z4, z5, $z6, z7, $z8, z9, z10, z11, z12, z13, $z14;
        java.util.ArrayList $r2;
        java.lang.String $r9, r14;
        android.os.RemoteException $r10, $r11;
        java.lang.Throwable $r12;
        java.io.PrintWriter r13;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        android.content.pm.IPackageManager r15, $r22;
        java.lang.Object r16;
        com.android.server.job.controllers.JobStatus r17;
        java.lang.StringBuilder r18;
        int[] $r19, $r20;
        android.util.SparseIntArray $r21;
        android.content.ComponentName $r23;
        android.content.pm.ServiceInfo r24;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r13 := @parameter0: java.io.PrintWriter;

        r14 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

     label01:
        r15 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

     label02:
        if i1 == -1 goto label03;

        goto label04;

     label03:
        i1 = 0;

     label04:
        i3 = interfaceinvoke r15.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r14, 0, i1);

     label05:
        if i3 >= 0 goto label08;

     label06:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>("unknown(");

        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>(")");

     label07:
        return -1000;

     label08:
        r16 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r16;

     label09:
        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r17 = virtualinvoke $r1.<com.android.server.job.JobStore: com.android.server.job.controllers.JobStatus getJobByUidAndJobId(int,int)>(i3, i2);

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label10;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get-job-state ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r9 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r9);

     label10:
        if r17 != null goto label13;

     label11:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>("unknown(");

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r13, i3);

        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>("/jid");

        virtualinvoke r13.<java.io.PrintWriter: void print(int)>(i2);

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>(")");

        exitmonitor r16;

     label12:
        return -1001;

     label13:
        z3 = 0;

     label14:
        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $z1 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r17);

        if $z1 == 0 goto label16;

        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>("pending");

     label15:
        z3 = 1;

     label16:
        z4 = z3;

     label17:
        $z2 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)>(r17);

        if $z2 == 0 goto label22;

     label18:
        if z3 == 0 goto label20;

     label19:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(" ");

     label20:
        z4 = 1;

     label21:
        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>("active");

     label22:
        z5 = z4;

     label23:
        $r19 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $i4 = virtualinvoke r17.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        $z6 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r19, $i4);

        if $z6 != 0 goto label28;

     label24:
        if z4 == 0 goto label26;

     label25:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(" ");

     label26:
        z5 = 1;

     label27:
        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>("user-stopped");

     label28:
        z7 = z5;

     label29:
        $r20 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $i5 = virtualinvoke r17.<com.android.server.job.controllers.JobStatus: int getSourceUserId()>();

        $z8 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r20, $i5);

        if $z8 != 0 goto label34;

     label30:
        if z5 == 0 goto label32;

     label31:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(" ");

     label32:
        z7 = 1;

     label33:
        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>("source-user-stopped");

     label34:
        z9 = z7;

     label35:
        $r21 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        $i6 = virtualinvoke r17.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i7 = virtualinvoke $r21.<android.util.SparseIntArray: int indexOfKey(int)>($i6);

        if $i7 < 0 goto label40;

     label36:
        if z7 == 0 goto label38;

     label37:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(" ");

     label38:
        z9 = 1;

     label39:
        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>("backing-up");

     label40:
        z10 = 0;

     label41:
        $r22 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r23 = virtualinvoke r17.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $i8 = virtualinvoke r17.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        r24 = interfaceinvoke $r22.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>($r23, 268435456, $i8);

     label42:
        if r24 == null goto label43;

        z11 = 1;

        goto label44;

     label43:
        z11 = 0;

     label44:
        z10 = z11;

        goto label46;

     label45:
        $r11 := @caughtexception;

     label46:
        z12 = z9;

        if z10 != 0 goto label50;

        if z9 == 0 goto label48;

     label47:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(" ");

     label48:
        z12 = 1;

     label49:
        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>("no-component");

     label50:
        z13 = z12;

     label51:
        $z14 = virtualinvoke r17.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        if $z14 == 0 goto label56;

     label52:
        if z12 == 0 goto label54;

     label53:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>(" ");

     label54:
        z13 = 1;

     label55:
        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>("ready");

     label56:
        if z13 != 0 goto label58;

     label57:
        virtualinvoke r13.<java.io.PrintWriter: void print(java.lang.String)>("waiting");

     label58:
        virtualinvoke r13.<java.io.PrintWriter: void println()>();

        exitmonitor r16;

     label59:
        goto label64;

     label60:
        $r12 := @caughtexception;

     label61:
        exitmonitor r16;

     label62:
        throw $r12;

     label63:
        $r10 := @caughtexception;

     label64:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label63;
        catch android.os.RemoteException from label04 to label05 with label63;
        catch android.os.RemoteException from label06 to label07 with label63;
        catch android.os.RemoteException from label08 to label09 with label63;
        catch java.lang.Throwable from label09 to label10 with label60;
        catch java.lang.Throwable from label11 to label12 with label60;
        catch java.lang.Throwable from label14 to label15 with label60;
        catch java.lang.Throwable from label17 to label18 with label60;
        catch java.lang.Throwable from label19 to label20 with label60;
        catch java.lang.Throwable from label21 to label22 with label60;
        catch java.lang.Throwable from label23 to label24 with label60;
        catch java.lang.Throwable from label25 to label26 with label60;
        catch java.lang.Throwable from label27 to label28 with label60;
        catch java.lang.Throwable from label29 to label30 with label60;
        catch java.lang.Throwable from label31 to label32 with label60;
        catch java.lang.Throwable from label33 to label34 with label60;
        catch java.lang.Throwable from label35 to label36 with label60;
        catch java.lang.Throwable from label37 to label38 with label60;
        catch java.lang.Throwable from label39 to label40 with label60;
        catch android.os.RemoteException from label41 to label42 with label45;
        catch java.lang.Throwable from label41 to label42 with label60;
        catch java.lang.Throwable from label47 to label48 with label60;
        catch java.lang.Throwable from label49 to label50 with label60;
        catch java.lang.Throwable from label51 to label52 with label60;
        catch java.lang.Throwable from label53 to label54 with label60;
        catch java.lang.Throwable from label55 to label56 with label60;
        catch java.lang.Throwable from label57 to label58 with label60;
        catch java.lang.Throwable from label58 to label59 with label60;
        catch java.lang.Throwable from label61 to label62 with label60;
        catch android.os.RemoteException from label62 to label63 with label63;
    }

    public com.android.server.job.JobStore getJobStore()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobStore $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        return $r1;
    }

    public java.lang.Object getLock()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        return $r1;
    }

    public long getMaxJobExecutionTimeMs(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1;
        long l0, $l1;
        com.android.server.job.controllers.QuotaController $r2;
        java.lang.Throwable $r3;
        com.android.server.job.controllers.JobStatus r4;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r4 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.QuotaController mQuotaController>;

        $l1 = virtualinvoke $r2.<com.android.server.job.controllers.QuotaController: long getMaxJobExecutionTimeMsLocked(com.android.server.job.controllers.JobStatus)>(r4);

        l0 = staticinvoke <java.lang.Math: long min(long,long)>($l1, 600000L);

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.app.job.JobInfo getPendingJob(int, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r1, $r4;
        com.android.server.job.controllers.JobStatus r2;
        com.android.server.job.JobStore $r3;
        java.lang.Throwable $r5;
        java.util.List r6;
        android.app.job.JobInfo r7;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r6 = virtualinvoke $r3.<com.android.server.job.JobStore: java.util.List getJobsByUid(int)>(i3);

        $i1 = interfaceinvoke r6.<java.util.List: int size()>();

        i4 = $i1 - 1;

     label02:
        if i4 < 0 goto label06;

     label03:
        $r4 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i4);

        r2 = (com.android.server.job.controllers.JobStatus) $r4;

        $i2 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        if $i2 != i0 goto label05;

        r7 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        exitmonitor r1;

     label04:
        return r7;

     label05:
        i4 = i4 + -1;

        goto label02;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.util.List getPendingJobs(int)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1, $r4;
        java.util.ArrayList r2;
        com.android.server.job.JobStore $r3;
        int $i0, $i1, i2, i3;
        com.android.server.job.controllers.JobStatus $r5;
        android.app.job.JobInfo $r6;
        java.lang.Throwable $r7;
        java.util.List r8;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i2 := @parameter0: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r8 = virtualinvoke $r3.<com.android.server.job.JobStore: java.util.List getJobsByUid(int)>(i2);

        r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i0);

        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        i3 = $i1 - 1;

     label2:
        if i3 < 0 goto label5;

     label3:
        $r4 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i3);

        $r5 = (com.android.server.job.controllers.JobStatus) $r4;

        $r6 = virtualinvoke $r5.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label4:
        i3 = i3 + -1;

        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return r2;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    com.android.server.job.controllers.JobStatus getRescheduleJobForFailureLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, $r12;
        long l0, $l3, $l5, $l6, l9, l11, $l12, l14, l15, $l16, $l17, $l18, $l19;
        android.app.job.JobInfo r2;
        int i1, $i2, $i7, i10, i20, $i21;
        java.time.Clock $r4, $r13;
        com.android.server.job.JobSchedulerService$Constants $r5, $r9, $r10, $r11;
        byte $b4, $b13;
        java.util.List $r6, $r14;
        java.lang.Object $r7;
        com.android.server.job.controllers.StateController $r8;
        float $f0, $f1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r4 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l0 = virtualinvoke $r4.<java.time.Clock: long millis()>();

        r2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        l9 = virtualinvoke r2.<android.app.job.JobInfo: long getInitialBackoffMillis()>();

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getNumFailures()>();

        i10 = $i2 + 1;

        i1 = virtualinvoke r2.<android.app.job.JobInfo: int getBackoffPolicy()>();

        if i1 == 0 goto label3;

        if i1 == 1 goto label1;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", "Unrecognised back-off policy, defaulting to exponential.");

     label1:
        l11 = l9;

        $r11 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $l12 = $r11.<com.android.server.job.JobSchedulerService$Constants: long MIN_EXP_BACKOFF_TIME>;

        $b13 = l9 cmp $l12;

        if $b13 >= 0 goto label2;

        $r10 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        l11 = $r10.<com.android.server.job.JobSchedulerService$Constants: long MIN_EXP_BACKOFF_TIME>;

     label2:
        $f0 = (float) l11;

        $i7 = i10 - 1;

        $f1 = staticinvoke <java.lang.Math: float scalb(float,int)>($f0, $i7);

        l14 = (long) $f1;

        goto label5;

     label3:
        l15 = l9;

        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $l3 = $r5.<com.android.server.job.JobSchedulerService$Constants: long MIN_LINEAR_BACKOFF_TIME>;

        $b4 = l9 cmp $l3;

        if $b4 >= 0 goto label4;

        $r9 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        l15 = $r9.<com.android.server.job.JobSchedulerService$Constants: long MIN_LINEAR_BACKOFF_TIME>;

     label4:
        $l5 = (long) i10;

        l14 = $l5 * l15;

     label5:
        $r12 = new com.android.server.job.controllers.JobStatus;

        $l16 = staticinvoke <java.lang.Math: long min(long,long)>(l14, 18000000L);

        $l17 = l0 + $l16;

        $l18 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getLastSuccessfulRunTime()>();

        $r13 = <com.android.server.job.JobSchedulerService: java.time.Clock sSystemClock>;

        $l19 = virtualinvoke $r13.<java.time.Clock: long millis()>();

        specialinvoke $r12.<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus,long,long,int,long,long)>(r1, $l17, 9223372036854775807L, i10, $l18, $l19);

        $z1 = virtualinvoke r2.<android.app.job.JobInfo: boolean isPeriodic()>();

        if $z1 == 0 goto label6;

        $l6 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getOriginalLatestRunTimeElapsed()>();

        virtualinvoke $r12.<com.android.server.job.controllers.JobStatus: void setOriginalLatestRunTimeElapsed(long)>($l6);

     label6:
        i20 = 0;

     label7:
        $r14 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i21 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i20 >= $i21 goto label8;

        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i20);

        $r8 = (com.android.server.job.controllers.StateController) $r7;

        virtualinvoke $r8.<com.android.server.job.controllers.StateController: void rescheduleForFailureLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>($r12, r1);

        i20 = i20 + 1;

        goto label7;

     label8:
        return $r12;
    }

    com.android.server.job.controllers.JobStatus getRescheduleJobForPeriodic(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, $r9, $r22;
        long l0, l1, l2, l3, l5, $l6, $l7, $l8, $l9, $l10, $l11, $l15, $l16, $l17, $l18, $l19, $l20, $l23, $l24, $l25, $l26, $l27, $l28, $l30, $l31, $l32, $l34, $l35, $l36, l41, l42, $l43, l45, $l46, l47, l48, l50;
        java.time.Clock $r2, $r10, $r23;
        android.app.job.JobInfo $r3, $r4;
        byte $b12, $b14, $b29, $b33, $b37, $b40, $b44, $b49;
        java.lang.StringBuilder $r5, $r11, $r18;
        java.lang.String $r8, $r17, $r21;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

        $l6 = staticinvoke <android.app.job.JobInfo: long getMinPeriodMillis()>();

        $r3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $l7 = virtualinvoke $r3.<android.app.job.JobInfo: long getIntervalMillis()>();

        $l8 = staticinvoke <java.lang.Math: long min(long,long)>(31536000000L, $l7);

        l1 = staticinvoke <java.lang.Math: long max(long,long)>($l6, $l8);

        $l9 = staticinvoke <android.app.job.JobInfo: long getMinFlexMillis()>();

        $r4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $l10 = virtualinvoke $r4.<android.app.job.JobInfo: long getFlexMillis()>();

        $l11 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l10);

        l2 = staticinvoke <java.lang.Math: long max(long,long)>($l9, $l11);

        l41 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getOriginalLatestRunTimeElapsed()>();

        $b12 = l41 cmp 0L;

        if $b12 < 0 goto label01;

        l42 = l41;

        $b40 = l41 cmp 9223372036854775807L;

        if $b40 != 0 goto label02;

     label01:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid periodic job original latest run time: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l41);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler", $r8);

        l42 = l0;

     label02:
        $l43 = l0 - l42;

        l3 = staticinvoke <java.lang.Math: long abs(long)>($l43);

        $b44 = l0 cmp l42;

        if $b44 <= 0 goto label07;

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label03;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler", "Periodic job ran after its intended window.");

     label03:
        $l32 = l3 / l1;

        l5 = $l32 + 1L;

        $b33 = l1 cmp l2;

        if $b33 == 0 goto label05;

        l45 = l5;

        $l34 = l1 - l2;

        $l35 = $l34 / 2L;

        $l36 = staticinvoke <java.lang.Math: long min(long,long)>(1800000L, $l35);

        $b37 = l3 cmp $l36;

        if $b37 <= 0 goto label06;

        $z2 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z2 == 0 goto label04;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "Custom flex job ran too close to next window.");

     label04:
        l45 = l5 + 1L;

        goto label06;

     label05:
        l45 = l5;

     label06:
        $l46 = l1 * l45;

        l47 = $l46 + l42;

        l48 = 0L;

        goto label09;

     label07:
        l47 = l42 + l1;

        $b14 = l3 cmp 1800000L;

        if $b14 >= 0 goto label08;

        $l28 = l1 / 6L;

        $b29 = l3 cmp $l28;

        if $b29 >= 0 goto label08;

        $l30 = l1 / 6L;

        $l31 = $l30 - l3;

        l48 = staticinvoke <java.lang.Math: long min(long,long)>(1800000L, $l31);

        goto label09;

     label08:
        l48 = 0L;

     label09:
        $b49 = l47 cmp l0;

        if $b49 >= 0 goto label10;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rescheduling calculated latest runtime in the past: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l47);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler", $r21);

        $r22 = new com.android.server.job.controllers.JobStatus;

        $l23 = l0 + l1;

        $l24 = $l23 - l2;

        $l25 = l0 + l1;

        $r23 = <com.android.server.job.JobSchedulerService: java.time.Clock sSystemClock>;

        $l26 = virtualinvoke $r23.<java.time.Clock: long millis()>();

        $l27 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getLastFailedRunTime()>();

        specialinvoke $r22.<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus,long,long,int,long,long)>(r1, $l24, $l25, 0, $l26, $l27);

        return $r22;

     label10:
        $l15 = l1 - l48;

        $l16 = staticinvoke <java.lang.Math: long min(long,long)>(l2, $l15);

        l50 = l47 - $l16;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label11;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rescheduling executed periodic. New execution window [");

        $l19 = l50 / 1000L;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l19);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $l20 = l47 / 1000L;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l20);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]s");

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r17);

        goto label11;

     label11:
        $r9 = new com.android.server.job.controllers.JobStatus;

        $r10 = <com.android.server.job.JobSchedulerService: java.time.Clock sSystemClock>;

        $l17 = virtualinvoke $r10.<java.time.Clock: long millis()>();

        $l18 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getLastFailedRunTime()>();

        specialinvoke $r9.<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus,long,long,int,long,long)>(r1, l50, l47, 0, $l17, $l18);

        return $r9;
    }

    boolean getStorageNotLow()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1;
        com.android.server.job.controllers.StorageController $r3, $r4;
        com.android.server.job.controllers.StorageController$StorageTracker $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.StorageController mStorageController>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.StorageController mStorageController>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.StorageController: com.android.server.job.controllers.StorageController$StorageTracker getTracker()>();

        z0 = virtualinvoke $r5.<com.android.server.job.controllers.StorageController$StorageTracker: boolean isStorageNotLow()>();

     label2:
        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int getStorageSeq()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1;
        com.android.server.job.controllers.StorageController $r3, $r4;
        com.android.server.job.controllers.StorageController$StorageTracker $r5;
        java.lang.Throwable $r6;
        int i0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.StorageController mStorageController>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.StorageController mStorageController>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.StorageController: com.android.server.job.controllers.StorageController$StorageTracker getTracker()>();

        i0 = virtualinvoke $r5.<com.android.server.job.controllers.StorageController$StorageTracker: int getSeq()>();

     label2:
        goto label4;

     label3:
        i0 = -1;

     label4:
        exitmonitor r1;

     label5:
        return i0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.content.Context getTestableContext()
    {
        com.android.server.job.JobSchedulerService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        return $r1;
    }

    public boolean isChainedAttributionEnabled()
    {
        com.android.server.job.JobSchedulerService r0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $z0 = staticinvoke <android.os.WorkSource: boolean isChainedBatteryAttributionEnabled(android.content.Context)>($r1);

        return $z0;
    }

    boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, z9, z10;
        com.android.server.job.JobStore $r2;
        android.util.SparseIntArray $r3;
        int $i0, $i1;
        com.android.server.job.restrictions.JobRestriction $r4;
        java.util.ArrayList $r5;
        java.lang.StringBuilder $r6, $r15, $r27, $r31;
        java.lang.String $r8, $r14, $r17, $r25, $r26, $r30, $r33, $r37;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        z6 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label01;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isReadyToBeExecutedLocked: ");

        $r33 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ready=");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z6);

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r37);

     label01:
        if z6 != 0 goto label03;

        $r26 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>("android.jobscheduler.cts.jobtestapp");

        if $z5 == 0 goto label02;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    NOT READY: ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r30);

     label02:
        return 0;

     label03:
        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        z7 = virtualinvoke $r2.<com.android.server.job.JobStore: boolean containsJob(com.android.server.job.controllers.JobStatus)>(r1);

        z0 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean areUsersStartedLocked(com.android.server.job.controllers.JobStatus)>(r1);

        $r3 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mBackingUpUids>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i1 = virtualinvoke $r3.<android.util.SparseIntArray: int indexOfKey(int)>($i0);

        if $i1 < 0 goto label04;

        z8 = 1;

        goto label05;

     label04:
        z8 = 0;

     label05:
        $z2 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z2 == 0 goto label06;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isReadyToBeExecutedLocked: ");

        $r17 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z7);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userStarted=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" backingUp=");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z8);

        $r25 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r25);

     label06:
        if z7 == 0 goto label12;

        if z0 == 0 goto label12;

        if z8 == 0 goto label07;

        goto label12;

     label07:
        $r4 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.restrictions.JobRestriction checkIfRestricted(com.android.server.job.controllers.JobStatus)>(r1);

        if $r4 == null goto label08;

        return 0;

     label08:
        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        z9 = virtualinvoke $r5.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        z10 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)>(r1);

        $z3 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z3 == 0 goto label09;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isReadyToBeExecutedLocked: ");

        $r8 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pending=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z10);

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r14);

     label09:
        if z9 != 0 goto label11;

        if z10 == 0 goto label10;

        goto label11;

     label10:
        $z4 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isComponentUsable(com.android.server.job.controllers.JobStatus)>(r1);

        return $z4;

     label11:
        return 0;

     label12:
        return 0;
    }

    public void lambda$new$2$JobSchedulerService()
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r3, $r9, $r10;
        int i0, i2;
        com.android.server.job.controllers.JobStatus r4, r17;
        java.lang.StringBuilder r5;
        java.util.ArrayList $r6, $r7;
        com.android.server.job.JobStore $r8;
        boolean $z0;
        java.lang.String $r15;
        java.lang.Throwable $r16;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r3 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r8 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        virtualinvoke $r8.<com.android.server.job.JobStore: void getRtcCorrectedJobsLocked(java.util.ArrayList,java.util.ArrayList)>($r7, $r6);

        i0 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label07;

     label04:
        $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.job.controllers.JobStatus) $r9;

        $r10 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r17 = (com.android.server.job.controllers.JobStatus) $r10;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label05;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  replacing ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r15 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler", $r15);

     label05:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>(r4, r17, "deferred rtc calculation");

     label06:
        i2 = i2 + 1;

        goto label03;

     label07:
        exitmonitor r3;

     label08:
        return;

     label09:
        $r16 := @caughtexception;

     label10:
        exitmonitor r3;

     label11:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void lambda$onBootPhase$3$JobSchedulerService(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        com.android.server.job.controllers.StateController $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i1 = 0;

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (com.android.server.job.controllers.StateController) $r4;

        virtualinvoke $r5.<com.android.server.job.controllers.StateController: void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>(r1, null);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void maybeRunPendingJobsLocked()
    {
        com.android.server.job.JobSchedulerService r0;
        boolean $z0;
        com.android.server.job.JobConcurrencyManager $r2;
        java.lang.StringBuilder $r3;
        java.util.ArrayList $r5;
        int $i0;
        java.lang.String $r8;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pending queue: ");

        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" jobs.");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r8);

     label1:
        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobConcurrencyManager mConcurrencyManager>;

        virtualinvoke $r2.<com.android.server.job.JobConcurrencyManager: void assignJobsToContextsLocked()>();

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void reportActiveLocked()>();

        return;
    }

    void noteJobsNonpending(java.util.List)
    {
        com.android.server.job.JobSchedulerService r0;
        java.util.List r1;
        com.android.server.job.controllers.JobStatus r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.job.JobPackageTracker $r4;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.job.controllers.JobStatus) $r3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r4.<com.android.server.job.JobPackageTracker: void noteNonpending(com.android.server.job.controllers.JobStatus)>(r2);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    void noteJobsPending(java.util.List)
    {
        com.android.server.job.JobSchedulerService r0;
        java.util.List r1;
        com.android.server.job.controllers.JobStatus r2;
        int $i0, i1;
        java.lang.Object $r3;
        com.android.server.job.JobPackageTracker $r4;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.job.controllers.JobStatus) $r3;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r4.<com.android.server.job.JobPackageTracker: void notePending(com.android.server.job.controllers.JobStatus)>(r2);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.job.JobSchedulerService r0;
        android.os.IBinder $r1;
        com.android.internal.app.IBatteryStats $r2, $r7;
        java.lang.Object $r3, $r15, $r33, $r35, r44;
        com.android.server.DeviceIdleInternal $r4;
        com.android.server.job.JobSchedulerService$JobHandler $r5;
        android.os.Message $r6;
        com.android.server.job.JobPackageTracker $r8;
        android.content.Context $r9, $r12, $r19, $r24;
        android.os.Looper $r10;
        com.android.server.job.JobSchedulerService$ConstantsObserver $r11;
        android.content.ContentResolver $r13;
        java.util.List $r14, $r31, $r32, r45;
        boolean $z1;
        com.android.server.AppStateTracker $r17, r40;
        android.content.IntentFilter $r18, $r23;
        android.os.UserHandle $r20, $r25;
        android.content.BroadcastReceiver $r21, $r26;
        android.app.IActivityManager $r28;
        android.app.IUidObserver $r29;
        com.android.server.job.JobConcurrencyManager $r30;
        int $i0, i1, i2, i3;
        com.android.server.job.restrictions.JobRestriction $r34;
        com.android.server.job.controllers.StateController $r36;
        java.lang.Throwable $r37;
        android.os.RemoteException $r38;
        java.util.Iterator r39;
        com.android.server.job.JobServiceContext r46;
        com.android.server.job.JobStore r47;
        com.android.server.job._$$Lambda$JobSchedulerService$0Wz_b63Vzxu3lYEmfPzreSihZzE r48;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i1 := @parameter0: int;

        if 500 != i1 goto label09;

        $r11 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$ConstantsObserver mConstantsObserver>;

        $r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r11.<com.android.server.job.JobSchedulerService$ConstantsObserver: void start(android.content.ContentResolver)>($r13);

        $r14 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        r39 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r35 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        $r36 = (com.android.server.job.controllers.StateController) $r35;

        virtualinvoke $r36.<com.android.server.job.controllers.StateController: void onSystemServicesReady()>();

        goto label01;

     label02:
        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/AppStateTracker;");

        r40 = (com.android.server.AppStateTracker) $r15;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r40);

        $r17 = (com.android.server.AppStateTracker) r40;

        r0.<com.android.server.job.JobSchedulerService: com.android.server.AppStateTracker mAppStateTracker> = $r17;

        $r18 = new android.content.IntentFilter;

        specialinvoke $r18.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r18.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r18.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke $r18.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_RESTARTED");

        virtualinvoke $r18.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.QUERY_PACKAGE_RESTART");

        virtualinvoke $r18.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r19 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r21 = r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r20 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r19.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r21, $r20, $r18, null, null);

        $r23 = new android.content.IntentFilter;

        specialinvoke $r23.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r24 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r26 = r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r25 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r24.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r26, $r25, $r23, null, null);

     label03:
        $r28 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r29 = r0.<com.android.server.job.JobSchedulerService: android.app.IUidObserver mUidObserver>;

        interfaceinvoke $r28.<android.app.IActivityManager: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>($r29, 15, -1, null);

     label04:
        goto label06;

     label05:
        $r38 := @caughtexception;

     label06:
        $r30 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobConcurrencyManager mConcurrencyManager>;

        virtualinvoke $r30.<com.android.server.job.JobConcurrencyManager: void onSystemReady()>();

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobsForNonExistentUsers()>();

        $r31 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $i0 = interfaceinvoke $r31.<java.util.List: int size()>();

        i2 = $i0 - 1;

     label07:
        if i2 < 0 goto label08;

        $r32 = r0.<com.android.server.job.JobSchedulerService: java.util.List mJobRestrictions>;

        $r33 = interfaceinvoke $r32.<java.util.List: java.lang.Object get(int)>(i2);

        $r34 = (com.android.server.job.restrictions.JobRestriction) $r33;

        virtualinvoke $r34.<com.android.server.job.restrictions.JobRestriction: void onSystemServicesReady()>();

        i2 = i2 + -1;

        goto label07;

     label08:
        goto label20;

     label09:
        if i1 != 600 goto label20;

        r44 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r44;

     label10:
        r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock> = 1;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r2 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r1);

        r0.<com.android.server.job.JobSchedulerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r2;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/DeviceIdleInternal;");

        $r4 = (com.android.server.DeviceIdleInternal) $r3;

        r0.<com.android.server.job.JobSchedulerService: com.android.server.DeviceIdleInternal mLocalDeviceIdleController> = $r4;

     label11:
        i3 = 0;

     label12:
        if i3 >= 16 goto label15;

     label13:
        r45 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        r46 = new com.android.server.job.JobServiceContext;

        $r7 = r0.<com.android.server.job.JobSchedulerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r8 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        $r9 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r10 = virtualinvoke $r9.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke r46.<com.android.server.job.JobServiceContext: void <init>(com.android.server.job.JobSchedulerService,com.android.internal.app.IBatteryStats,com.android.server.job.JobPackageTracker,android.os.Looper)>(r0, $r7, $r8, $r10);

        interfaceinvoke r45.<java.util.List: boolean add(java.lang.Object)>(r46);

     label14:
        i3 = i3 + 1;

        goto label12;

     label15:
        r47 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r48 = new com.android.server.job._$$Lambda$JobSchedulerService$0Wz_b63Vzxu3lYEmfPzreSihZzE;

        specialinvoke r48.<com.android.server.job._$$Lambda$JobSchedulerService$0Wz_b63Vzxu3lYEmfPzreSihZzE: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        virtualinvoke r47.<com.android.server.job.JobStore: void forEachJob(java.util.function.Consumer)>(r48);

        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r6 = virtualinvoke $r5.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

        exitmonitor r44;

     label16:
        goto label20;

     label17:
        $r37 := @caughtexception;

     label18:
        exitmonitor r44;

     label19:
        throw $r37;

     label20:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void onControllerStateChanged()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobSchedulerService$JobHandler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onDeviceIdleStateChanged(boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r7;
        com.android.server.job.controllers.JobStatus r2;
        com.android.server.DeviceIdleInternal $r3, $r4;
        java.util.List $r5, $r6;
        int $i0, $i1, $i2, i4;
        java.lang.String $r10;
        java.lang.Throwable $r11;
        java.lang.StringBuilder r12;
        com.android.server.job.JobServiceContext r13;
        com.android.server.job.JobSchedulerService$JobHandler $r14;
        android.os.Message $r15;

        r0 := @this: com.android.server.job.JobSchedulerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label02;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Doze state changed: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r10 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r10);

     label02:
        if z0 == 0 goto label08;

        i4 = 0;

     label03:
        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i4 >= $i0 goto label07;

        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        r13 = (com.android.server.job.JobServiceContext) $r7;

        r2 = virtualinvoke r13.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

     label04:
        if r2 == null goto label06;

     label05:
        $i1 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getFlags()>();

        $i2 = $i1 & 1;

        if $i2 != 0 goto label06;

        virtualinvoke r13.<com.android.server.job.JobServiceContext: void cancelExecutingJobLocked(int,java.lang.String)>(4, "cancelled due to doze");

     label06:
        i4 = i4 + 1;

        goto label03;

     label07:
        goto label10;

     label08:
        $z2 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        if $z2 == 0 goto label10;

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.DeviceIdleInternal mLocalDeviceIdleController>;

        if $r3 == null goto label09;

        $z3 = r0.<com.android.server.job.JobSchedulerService: boolean mReportedActive>;

        if $z3 != 0 goto label09;

        r0.<com.android.server.job.JobSchedulerService: boolean mReportedActive> = 1;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.DeviceIdleInternal mLocalDeviceIdleController>;

        interfaceinvoke $r4.<com.android.server.DeviceIdleInternal: void setJobsActive(boolean)>(1);

     label09:
        $r14 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r15 = virtualinvoke $r14.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r15.<android.os.Message: void sendToTarget()>();

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void onJobCompletedLocked(com.android.server.job.controllers.JobStatus, boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r23, r26;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.app.job.JobInfo $r2, $r3;
        com.android.server.job.JobSchedulerService$JobHandler $r4, $r29;
        android.os.Message $r5, $r30;
        java.lang.StringBuilder $r6, $r13, $r18;
        java.lang.String $r11, $r16, $r21;
        java.lang.Throwable $r12, $r17;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        z0 := @parameter1: boolean;

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z1 == 0 goto label01;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Completed ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reschedule=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r11);

     label01:
        if z0 == 0 goto label02;

        r23 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.JobStatus getRescheduleJobForFailureLocked(com.android.server.job.controllers.JobStatus)>(r1);

        goto label03;

     label02:
        r23 = null;

     label03:
        $r2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $z2 = virtualinvoke $r2.<android.app.job.JobInfo: boolean isPeriodic()>();

        $z3 = $z2 ^ 1;

        $z4 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,boolean)>(r1, r23, $z3);

        if $z4 != 0 goto label05;

        $z6 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z6 == 0 goto label04;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", "Could not find job to remove. Was job removed while executing?");

     label04:
        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r5 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

        return;

     label05:
        if r23 == null goto label10;

     label06:
        virtualinvoke r23.<com.android.server.job.controllers.JobStatus: void prepareLocked()>();

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to regrant job permissions for ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler", $r21);

     label09:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>(r23, r1);

        goto label15;

     label10:
        $r3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $z5 = virtualinvoke $r3.<android.app.job.JobInfo: boolean isPeriodic()>();

        if $z5 == 0 goto label15;

        r26 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.JobStatus getRescheduleJobForPeriodic(com.android.server.job.controllers.JobStatus)>(r1);

     label11:
        virtualinvoke r26.<com.android.server.job.controllers.JobStatus: void prepareLocked()>();

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to regrant job permissions for ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler", $r16);

     label14:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>(r26, r1);

     label15:
        virtualinvoke r1.<com.android.server.job.controllers.JobStatus: void unprepareLocked()>();

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void reportActiveLocked()>();

        $r29 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r30 = virtualinvoke $r29.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke $r30.<android.os.Message: void sendToTarget()>();

        return;

        catch java.lang.SecurityException from label06 to label07 with label08;
        catch java.lang.SecurityException from label11 to label12 with label13;
    }

    public void onRestrictedBucketChanged(java.util.List)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, $i1, $i2, i4, i5;
        java.lang.Object r1, $r5, $r8, $r11;
        com.android.server.job.controllers.JobStatus r2;
        com.android.server.job.JobSchedulerService$JobHandler $r3;
        android.os.Message $r4;
        java.util.List $r6, $r7, $r10, r14;
        com.android.server.job.controllers.RestrictingController $r9, $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r14 := @parameter0: java.util.List;

        i0 = interfaceinvoke r14.<java.util.List: int size()>();

        if i0 != 0 goto label01;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler", "onRestrictedBucketChanged called with no jobs");

        return;

     label01:
        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

        i4 = 0;

     label02:
        if i4 >= i0 goto label10;

     label03:
        $r5 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(i4);

        r2 = (com.android.server.job.controllers.JobStatus) $r5;

        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mRestrictiveControllers>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        i5 = $i1 - 1;

     label04:
        if i5 < 0 goto label09;

     label05:
        $i2 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getStandbyBucket()>();

        if $i2 != 5 goto label07;

        $r10 = r0.<com.android.server.job.JobSchedulerService: java.util.List mRestrictiveControllers>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i5);

        $r12 = (com.android.server.job.controllers.RestrictingController) $r11;

        virtualinvoke $r12.<com.android.server.job.controllers.RestrictingController: void startTrackingRestrictedJobLocked(com.android.server.job.controllers.JobStatus)>(r2);

     label06:
        goto label08;

     label07:
        $r7 = r0.<com.android.server.job.JobSchedulerService: java.util.List mRestrictiveControllers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i5);

        $r9 = (com.android.server.job.controllers.RestrictingController) $r8;

        virtualinvoke $r9.<com.android.server.job.controllers.RestrictingController: void stopTrackingRestrictedJobLocked(com.android.server.job.controllers.JobStatus)>(r2);

     label08:
        i5 = i5 + -1;

        goto label04;

     label09:
        i4 = i4 + 1;

        goto label02;

     label10:
        exitmonitor r1;

     label11:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r4 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r13;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void onRunJobNow(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        com.android.server.job.JobSchedulerService$JobHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int,java.lang.Object)>(0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onStart()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobSchedulerService$JobSchedulerStub $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobSchedulerStub mJobSchedulerStub>;

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void publishBinderService(java.lang.String,android.os.IBinder)>("jobscheduler", $r1);

        return;
    }

    public void onStartUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        java.lang.Object r1;
        int[] $r3, $r4;
        com.android.server.job.JobSchedulerService$JobHandler $r5;
        android.os.Message $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $r4 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>($r3, i0);

        r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers> = $r4;

        exitmonitor r1;

     label2:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r6 = virtualinvoke $r5.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onStopUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        java.lang.Object r1;
        int[] $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers>;

        $r4 = staticinvoke <com.android.internal.util.ArrayUtils: int[] removeInt(int[],int)>($r3, i0);

        r0.<com.android.server.job.JobSchedulerService: int[] mStartedUsers> = $r4;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onUnlockUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        com.android.server.job.JobSchedulerService$JobHandler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    void reportActiveLocked()
    {
        com.android.server.job.JobSchedulerService r0;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.List $r3, $r4;
        java.lang.Object $r5;
        com.android.server.job.JobServiceContext $r6;
        android.app.job.JobInfo $r7;
        boolean $z0, $z1, z2, z3, $z4;
        com.android.server.job.controllers.JobStatus r8;
        com.android.server.DeviceIdleInternal r9;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        z3 = z2;

        $r2 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 > 0 goto label5;

        i5 = 0;

     label3:
        z3 = z2;

        $r3 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i5 >= $i2 goto label5;

        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i5);

        $r6 = (com.android.server.job.JobServiceContext) $r5;

        r8 = virtualinvoke $r6.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        if r8 == null goto label4;

        $r7 = virtualinvoke r8.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $i3 = virtualinvoke $r7.<android.app.job.JobInfo: int getFlags()>();

        $i4 = $i3 & 1;

        if $i4 != 0 goto label4;

        $z0 = r8.<com.android.server.job.controllers.JobStatus: boolean dozeWhitelisted>;

        if $z0 != 0 goto label4;

        $z1 = r8.<com.android.server.job.controllers.JobStatus: boolean uidActive>;

        if $z1 != 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $z4 = r0.<com.android.server.job.JobSchedulerService: boolean mReportedActive>;

        if $z4 == z3 goto label6;

        r0.<com.android.server.job.JobSchedulerService: boolean mReportedActive> = z3;

        r9 = r0.<com.android.server.job.JobSchedulerService: com.android.server.DeviceIdleInternal mLocalDeviceIdleController>;

        if r9 == null goto label6;

        interfaceinvoke r9.<com.android.server.DeviceIdleInternal: void setJobsActive(boolean)>(z3);

     label6:
        return;
    }

    void reportAppUsage(java.lang.String, int)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        return;
    }

    void resetExecutionQuota(java.lang.String, int)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.job.controllers.QuotaController $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.QuotaController mQuotaController>;

        virtualinvoke $r2.<com.android.server.job.controllers.QuotaController: void clearAppStats(int,java.lang.String)>(i0, r1);

        return;
    }

    void resetScheduleQuota()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.utils.quota.CountQuotaTracker $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        virtualinvoke $r1.<com.android.server.utils.quota.CountQuotaTracker: void clear()>();

        return;
    }

    public int scheduleAsPackage(android.app.job.JobInfo, android.app.job.JobWorkItem, int, java.lang.String, int, java.lang.String)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1, $i2, $i3, $i7, $i9, $i10, i12, i13;
        android.content.pm.ApplicationInfo r1;
        android.util.ArrayMap r2, $r31, $r32;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z10, $z12, $z13, $z14, $z16, z17, z18, z19, $z20, z21, z22;
        android.content.ComponentName $r3, $r57, $r77;
        com.android.server.job.JobStore $r4, $r8;
        com.android.server.job.JobPackageTracker $r5;
        java.util.Comparator $r6;
        java.util.ArrayList $r7;
        java.lang.String $r11, $r13, $r15, $r21, $r24, $r46, $r55, r66, r67, r68, r69, $r78, r90;
        android.app.job.JobInfo $r16, r64;
        java.util.function.Predicate $r17, $r86;
        com.android.server.utils.quota.CountQuotaTracker $r25, $r26, $r27, $r38, $r42, $r56;
        com.android.server.usage.AppStandbyInternal $r28;
        com.android.server.job.JobSchedulerService$Constants $r29, $r30;
        java.lang.Object $r33, r71, r81, r84, r91;
        java.lang.Boolean $r34, $r48;
        java.lang.StringBuilder $r35, $r50, r79, r87, r88;
        com.android.server.utils.quota.Category $r37, $r41;
        long $l8;
        android.os.LimitExceededException $r45;
        android.content.pm.IPackageManager $r47;
        java.lang.Throwable $r58, $r61, $r62, $r63, r83;
        android.os.RemoteException $r59, $r60;
        android.app.job.JobWorkItem r65;
        java.lang.RuntimeException r73;
        android.app.IActivityManager $r76;
        com.android.server.job.controllers.JobStatus r82, r85;
        java.lang.IllegalStateException r89;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r64 := @parameter0: android.app.job.JobInfo;

        r65 := @parameter1: android.app.job.JobWorkItem;

        i0 := @parameter2: int;

        r66 := @parameter3: java.lang.String;

        i12 := @parameter4: int;

        r67 := @parameter5: java.lang.String;

        $r3 = virtualinvoke r64.<android.app.job.JobInfo: android.content.ComponentName getService()>();

        r68 = virtualinvoke $r3.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z7 = virtualinvoke r64.<android.app.job.JobInfo: boolean isPersisted()>();

        if $z7 == 0 goto label26;

        if r66 == null goto label01;

        $z16 = virtualinvoke r66.<java.lang.String: boolean equals(java.lang.Object)>(r68);

        if $z16 == 0 goto label26;

     label01:
        if r66 != null goto label02;

        $r57 = virtualinvoke r64.<android.app.job.JobInfo: android.content.ComponentName getService()>();

        r69 = virtualinvoke $r57.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label03;

     label02:
        r69 = r66;

     label03:
        $r25 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $z10 = virtualinvoke $r25.<com.android.server.utils.quota.CountQuotaTracker: boolean isWithinQuota(int,java.lang.String,java.lang.String)>(i12, r69, ".schedulePersisted()");

        if $z10 != 0 goto label25;

        $r27 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $z12 = virtualinvoke $r27.<com.android.server.utils.quota.CountQuotaTracker: boolean isWithinQuota(int,java.lang.String,java.lang.String)>(i12, r69, ".schedulePersisted out-of-quota logged");

        if $z12 == 0 goto label04;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r69);

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has called schedule() too many times");

        $r55 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler", $r55);

        $r56 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        virtualinvoke $r56.<com.android.server.utils.quota.CountQuotaTracker: boolean noteEvent(int,java.lang.String,java.lang.String)>(i12, r69, ".schedulePersisted out-of-quota logged");

     label04:
        $r28 = r0.<com.android.server.job.JobSchedulerService: com.android.server.usage.AppStandbyInternal mAppStandbyInternal>;

        interfaceinvoke $r28.<com.android.server.usage.AppStandbyInternal: void restrictApp(java.lang.String,int,int)>(r69, i12, 4);

        $r29 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $z13 = $r29.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_THROW_EXCEPTION>;

        if $z13 == 0 goto label24;

        r71 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r71;

     label05:
        $r31 = r0.<com.android.server.job.JobSchedulerService: android.util.ArrayMap mDebuggableApps>;

        z17 = virtualinvoke $r31.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r66);

     label06:
        if z17 != 0 goto label18;

     label07:
        $r47 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r1 = interfaceinvoke $r47.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r69, 0, i12);

     label08:
        if r1 == null goto label14;

     label09:
        r2 = r0.<com.android.server.job.JobSchedulerService: android.util.ArrayMap mDebuggableApps>;

        $i9 = r1.<android.content.pm.ApplicationInfo: int flags>;

        $i10 = $i9 & 2;

        if $i10 == 0 goto label11;

     label10:
        z18 = 1;

        goto label12;

     label11:
        z18 = 0;

     label12:
        $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z18);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r66, $r48);

     label13:
        goto label18;

     label14:
        exitmonitor r71;

     label15:
        return 0;

     label16:
        $r59 := @caughtexception;

     label17:
        r73 = new java.lang.RuntimeException;

        specialinvoke r73.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r59);

        throw r73;

     label18:
        $r32 = r0.<com.android.server.job.JobSchedulerService: android.util.ArrayMap mDebuggableApps>;

        $r33 = virtualinvoke $r32.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r66);

        $r34 = (java.lang.Boolean) $r33;

        z19 = virtualinvoke $r34.<java.lang.Boolean: boolean booleanValue()>();

        exitmonitor r71;

     label19:
        if z19 != 0 goto label20;

        goto label24;

     label20:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("schedule()/enqueue() called more than ");

        $r38 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $r37 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED>;

        $i7 = virtualinvoke $r38.<com.android.server.utils.quota.CountQuotaTracker: int getLimit(com.android.server.utils.quota.Category)>($r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" times in the past ");

        $r42 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $r41 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED>;

        $l8 = virtualinvoke $r42.<com.android.server.utils.quota.CountQuotaTracker: long getWindowSizeMs(com.android.server.utils.quota.Category)>($r41);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms. See the documentation for more information.");

        $r45 = new android.os.LimitExceededException;

        $r46 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<android.os.LimitExceededException: void <init>(java.lang.String)>($r46);

        throw $r45;

     label21:
        $r62 := @caughtexception;

     label22:
        exitmonitor r71;

     label23:
        throw $r62;

     label24:
        $r30 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $z14 = $r30.<com.android.server.job.JobSchedulerService$Constants: boolean API_QUOTA_SCHEDULE_RETURN_FAILURE_RESULT>;

        if $z14 == 0 goto label25;

        return 0;

     label25:
        $r26 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        virtualinvoke $r26.<com.android.server.utils.quota.CountQuotaTracker: boolean noteEvent(int,java.lang.String,java.lang.String)>(i12, r69, ".schedulePersisted()");

     label26:
        $r76 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r77 = virtualinvoke r64.<android.app.job.JobInfo: android.content.ComponentName getService()>();

        $r78 = virtualinvoke $r77.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z20 = interfaceinvoke $r76.<android.app.IActivityManager: boolean isAppStartModeDisabled(int,java.lang.String)>(i0, $r78);

        if $z20 == 0 goto label28;

        r79 = new java.lang.StringBuilder;

        specialinvoke r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not scheduling job ");

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r21 = virtualinvoke r64.<android.app.job.JobInfo: java.lang.String toString()>();

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- package not allowed to start");

        $r24 = virtualinvoke r79.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler", $r24);

     label27:
        return 0;

     label28:
        goto label30;

     label29:
        $r60 := @caughtexception;

     label30:
        r81 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r81;

     label31:
        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $i2 = virtualinvoke r64.<android.app.job.JobInfo: int getId()>();

        r82 = virtualinvoke $r4.<com.android.server.job.JobStore: com.android.server.job.controllers.JobStatus getJobByUidAndJobId(int,int)>(i0, $i2);

     label32:
        if r65 == null goto label36;

        if r82 == null goto label36;

     label33:
        $r16 = virtualinvoke r82.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $z9 = virtualinvoke $r16.<android.app.job.JobInfo: boolean equals(java.lang.Object)>(r64);

        if $z9 == 0 goto label36;

        virtualinvoke r82.<com.android.server.job.controllers.JobStatus: void enqueueWorkLocked(android.app.job.JobWorkItem)>(r65);

        $r17 = r0.<com.android.server.job.JobSchedulerService: java.util.function.Predicate mIsUidActivePredicate>;

        virtualinvoke r82.<com.android.server.job.controllers.JobStatus: void maybeAddForegroundExemption(java.util.function.Predicate)>($r17);

        exitmonitor r81;

     label34:
        return 1;

     label35:
        $r58 := @caughtexception;

        r83 = $r58;

        r84 = r81;

        goto label68;

     label36:
        r85 = staticinvoke <com.android.server.job.controllers.JobStatus: com.android.server.job.controllers.JobStatus createFromJobInfo(android.app.job.JobInfo,int,java.lang.String,int,java.lang.String)>(r64, i0, r66, i12, r67);

        $r86 = r0.<com.android.server.job.JobSchedulerService: java.util.function.Predicate mIsUidActivePredicate>;

        virtualinvoke r85.<com.android.server.job.controllers.JobStatus: void maybeAddForegroundExemption(java.util.function.Predicate)>($r86);

        z21 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

     label37:
        if z21 == 0 goto label39;

     label38:
        r87 = new java.lang.StringBuilder;

        specialinvoke r87.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SCHEDULE: ");

        $r13 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r87.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler", $r15);

     label39:
        if r66 != null goto label43;

     label40:
        $r8 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $i3 = virtualinvoke $r8.<com.android.server.job.JobStore: int countJobsForUid(int)>(i0);

        if $i3 > 100 goto label42;

     label41:
        goto label43;

     label42:
        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many jobs for uid ");

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler", $r11);

        r89 = new java.lang.IllegalStateException;

        specialinvoke r89.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Apps may not schedule more than 100 distinct jobs");

        throw r89;

     label43:
        virtualinvoke r85.<com.android.server.job.controllers.JobStatus: void prepareLocked()>();

     label44:
        if r82 == null goto label47;

     label45:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImplLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus,java.lang.String)>(r82, r85, "job rescheduled by app");

     label46:
        goto label48;

     label47:
        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJobLocked(com.android.server.job.controllers.JobStatus,com.android.server.job.controllers.JobStatus)>(r85, null);

     label48:
        if r65 == null goto label50;

     label49:
        virtualinvoke r85.<com.android.server.job.controllers.JobStatus: void enqueueWorkLocked(android.app.job.JobWorkItem)>(r65);

     label50:
        r90 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: java.lang.String getBatteryName()>();

        i13 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: int getStandbyBucket()>();

        i1 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        z0 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasChargingConstraint()>();

        z1 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasBatteryNotLowConstraint()>();

        z22 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasStorageNotLowConstraint()>();

        z2 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasTimingDelayConstraint()>();

        z3 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasDeadlineConstraint()>();

        z4 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasIdleConstraint()>();

        z5 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        z6 = virtualinvoke r85.<com.android.server.job.controllers.JobStatus: boolean hasContentTriggerConstraint()>();

     label51:
        r91 = r81;

     label52:
        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,java.lang.String,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>(8, i0, null, r90, 2, 0, i13, i1, z0, z1, z22, z2, z3, z4, z5, z6);

     label53:
        r91 = r81;

     label54:
        $z8 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r85);

        if $z8 == 0 goto label62;

     label55:
        r91 = r81;

     label56:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r5.<com.android.server.job.JobPackageTracker: void notePending(com.android.server.job.controllers.JobStatus)>(r85);

     label57:
        r91 = r81;

     label58:
        $r7 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r6 = <com.android.server.job.JobSchedulerService: java.util.Comparator sPendingJobComparator>;

        staticinvoke <com.android.server.job.JobSchedulerService: void addOrderedItem(java.util.ArrayList,java.lang.Object,java.util.Comparator)>($r7, r85, $r6);

     label59:
        r91 = r81;

     label60:
        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void maybeRunPendingJobsLocked()>();

     label61:
        goto label64;

     label62:
        r91 = r81;

     label63:
        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void evaluateControllerStatesLocked(com.android.server.job.controllers.JobStatus)>(r85);

     label64:
        r91 = r81;

     label65:
        exitmonitor r81;

     label66:
        return 1;

     label67:
        $r61 := @caughtexception;

        r83 = $r61;

        r84 = r81;

     label68:
        r91 = r84;

     label69:
        exitmonitor r84;

     label70:
        throw r83;

     label71:
        $r63 := @caughtexception;

        r83 = $r63;

        r84 = r91;

        goto label68;

        catch java.lang.Throwable from label05 to label06 with label21;
        catch android.os.RemoteException from label07 to label08 with label16;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch android.os.RemoteException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch android.os.RemoteException from label12 to label13 with label16;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
        catch android.os.RemoteException from label26 to label27 with label29;
        catch java.lang.Throwable from label31 to label32 with label67;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label67;
        catch java.lang.Throwable from label38 to label39 with label35;
        catch java.lang.Throwable from label40 to label41 with label35;
        catch java.lang.Throwable from label42 to label43 with label35;
        catch java.lang.Throwable from label43 to label44 with label67;
        catch java.lang.Throwable from label45 to label46 with label35;
        catch java.lang.Throwable from label47 to label48 with label67;
        catch java.lang.Throwable from label49 to label50 with label35;
        catch java.lang.Throwable from label50 to label51 with label67;
        catch java.lang.Throwable from label52 to label53 with label71;
        catch java.lang.Throwable from label54 to label55 with label71;
        catch java.lang.Throwable from label56 to label57 with label71;
        catch java.lang.Throwable from label58 to label59 with label71;
        catch java.lang.Throwable from label60 to label61 with label71;
        catch java.lang.Throwable from label63 to label64 with label71;
        catch java.lang.Throwable from label65 to label66 with label71;
        catch java.lang.Throwable from label69 to label70 with label71;
    }

    void setMonitorBattery(boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        boolean z0;
        java.lang.Object r1;
        com.android.server.job.controllers.BatteryController $r3, $r4;
        com.android.server.job.controllers.BatteryController$ChargingTracker $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.job.JobSchedulerService;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.BatteryController mBatteryController>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.BatteryController: com.android.server.job.controllers.BatteryController$ChargingTracker getTracker()>();

        virtualinvoke $r5.<com.android.server.job.controllers.BatteryController$ChargingTracker: void setMonitorBatteryLocked(boolean)>(z0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void triggerDockState(boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        boolean z0;
        android.content.Intent $r1, $r6, r7;
        android.content.Context $r4;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.DOCK_IDLE");

        r7 = $r6;

        goto label2;

     label1:
        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.DOCK_ACTIVE");

        r7 = $r1;

     label2:
        virtualinvoke r7.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("android");

        virtualinvoke r7.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        $r4 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r7, $r5);

        return;
    }

    void updateQuotaTracker()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobSchedulerService$Constants $r1, $r3, $r4;
        boolean $z0;
        com.android.server.utils.quota.CountQuotaTracker $r2, $r6;
        long $l0;
        int $i1;
        com.android.server.utils.quota.Category $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $z0 = $r1.<com.android.server.job.JobSchedulerService$Constants: boolean ENABLE_API_QUOTAS>;

        virtualinvoke $r2.<com.android.server.utils.quota.CountQuotaTracker: void setEnabled(boolean)>($z0);

        $r6 = r0.<com.android.server.job.JobSchedulerService: com.android.server.utils.quota.CountQuotaTracker mQuotaTracker>;

        $r5 = <com.android.server.job.JobSchedulerService: com.android.server.utils.quota.Category QUOTA_TRACKER_CATEGORY_SCHEDULE_PERSISTED>;

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $i1 = $r3.<com.android.server.job.JobSchedulerService$Constants: int API_QUOTA_SCHEDULE_COUNT>;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$Constants mConstants>;

        $l0 = $r4.<com.android.server.job.JobSchedulerService$Constants: long API_QUOTA_SCHEDULE_WINDOW_MS>;

        virtualinvoke $r6.<com.android.server.utils.quota.CountQuotaTracker: void setCountLimit(com.android.server.utils.quota.Category,int,long)>($r5, $i1, $l0);

        return;
    }

    void updateUidState(int, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1;
        java.lang.Object r1;
        android.util.SparseIntArray $r3, $r4, $r5, $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.job.JobSchedulerService: java.lang.Object mLock>;

        entermonitor r1;

        if i1 != 2 goto label04;

     label01:
        $r6 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        virtualinvoke $r6.<android.util.SparseIntArray: void put(int,int)>(i0, 40);

     label02:
        goto label11;

     label03:
        $r7 := @caughtexception;

        goto label13;

     label04:
        if i1 > 4 goto label07;

     label05:
        $r5 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        virtualinvoke $r5.<android.util.SparseIntArray: void put(int,int)>(i0, 35);

     label06:
        goto label11;

     label07:
        if i1 > 5 goto label10;

     label08:
        $r4 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(i0, 30);

     label09:
        goto label11;

     label10:
        $r3 = r0.<com.android.server.job.JobSchedulerService: android.util.SparseIntArray mUidPriorityOverride>;

        virtualinvoke $r3.<android.util.SparseIntArray: void delete(int)>(i0);

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label10 to label11 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
        catch java.lang.Throwable from label13 to label14 with label03;
    }
}
