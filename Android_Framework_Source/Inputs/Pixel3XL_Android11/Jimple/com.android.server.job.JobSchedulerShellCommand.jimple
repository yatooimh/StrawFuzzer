public final class com.android.server.job.JobSchedulerShellCommand extends android.os.BasicShellCommandHandler
{
    public static final int CMD_ERR_CONSTRAINTS;
    public static final int CMD_ERR_NO_JOB;
    public static final int CMD_ERR_NO_PACKAGE;
    com.android.server.job.JobSchedulerService mInternal;
    android.content.pm.IPackageManager mPM;

    void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        com.android.server.job.JobSchedulerService r1;
        android.content.pm.IPackageManager $r2;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<android.os.BasicShellCommandHandler: void <init>()>();

        r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal> = r1;

        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.job.JobSchedulerShellCommand: android.content.pm.IPackageManager mPM> = $r2;

        return;
    }

    private int cancelJob(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.lang.String r1, $r2, $r7, r10, r12;
        long l0;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r3;
        java.lang.Throwable $r8;
        java.io.PrintWriter r9;
        int i1, i3, i5, i6;
        byte b4;
        com.android.server.job.JobSchedulerService r13;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("cancel jobs");

        i1 = 0;

     label01:
        r10 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextOption()>();

        if r10 == null goto label08;

        i3 = virtualinvoke r10.<java.lang.String: int hashCode()>();

        if i3 == 1512 goto label04;

        if i3 == 1333469547 goto label03;

     label02:
        goto label05;

     label03:
        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z1 == 0 goto label02;

        b4 = 1;

        goto label06;

     label04:
        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("-u");

        if $z0 == 0 goto label02;

        b4 = 0;

        goto label06;

     label05:
        b4 = -1;

     label06:
        if b4 == 0 goto label07;

        if b4 == 1 goto label07;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label07:
        $r2 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r2);

        goto label01;

     label08:
        if i1 >= 0 goto label09;

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>("Error: must specify a concrete user ID");

        return -1;

     label09:
        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArg()>();

        r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArg()>();

        if r12 == null goto label10;

        i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r12);

        goto label11;

     label10:
        i5 = -1;

     label11:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label12:
        r13 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

     label13:
        if r12 == null goto label14;

        z2 = 1;

        goto label15;

     label14:
        z2 = 0;

     label15:
        i6 = virtualinvoke r13.<com.android.server.job.JobSchedulerService: int executeCancelCommand(java.io.PrintWriter,java.lang.String,int,boolean,int)>(r9, r1, i1, z2, i5);

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i6;

     label17:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private void checkPermission(java.lang.String) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.lang.String r1, $r10;
        int i0, $i1;
        android.content.pm.IPackageManager $r3;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r9;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.job.JobSchedulerShellCommand: android.content.pm.IPackageManager mPM>;

        $i1 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>("android.permission.CHANGE_APP_IDLE_STATE", i0);

        if $i1 != 0 goto label2;

        return;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uid ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not permitted to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = new java.lang.SecurityException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private int doHeartbeat(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("manipulate scheduler heartbeat");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Heartbeat command is no longer supported");

        return -1;
    }

    private int getBatteryCharging(java.io.PrintWriter)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.job.JobSchedulerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        $z0 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: boolean getBatteryCharging()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    private int getBatteryNotLow(java.io.PrintWriter)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.job.JobSchedulerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        $z0 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: boolean getBatteryNotLow()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    private int getBatterySeq(java.io.PrintWriter)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.job.JobSchedulerService $r2;
        int $i0;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        $i0 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: int getBatterySeq()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i0);

        return 0;
    }

    private int getJobState(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        long l0;
        int i1, i2, i3, i5, i6;
        java.lang.String $r2, $r4, $r9, r12, r13;
        com.android.server.job.JobSchedulerService $r3;
        boolean $z1, $z2;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r10;
        java.io.PrintWriter r11;
        byte b4;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("force timeout jobs");

        i2 = 0;

     label01:
        r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextOption()>();

        if r12 == null goto label08;

        i3 = virtualinvoke r12.<java.lang.String: int hashCode()>();

        if i3 == 1512 goto label04;

        if i3 == 1333469547 goto label03;

     label02:
        goto label05;

     label03:
        $z2 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z2 == 0 goto label02;

        b4 = 1;

        goto label06;

     label04:
        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("-u");

        if $z1 == 0 goto label02;

        b4 = 0;

        goto label06;

     label05:
        b4 = -1;

     label06:
        if b4 == 0 goto label07;

        if b4 == 1 goto label07;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return -1;

     label07:
        $r4 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r4);

        goto label01;

     label08:
        i5 = i2;

        if i2 != -2 goto label09;

        i5 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

     label09:
        r13 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        $r2 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label10:
        $r3 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        i1 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService: int getJobState(java.io.PrintWriter,java.lang.String,int,int)>(r11, r13, i5, i6);

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: boolean printError(int,java.lang.String,int,int)>(i1, r13, i5, i6);

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i1;

     label12:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private int getStorageNotLow(java.io.PrintWriter)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.job.JobSchedulerService $r2;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        $z0 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: boolean getStorageNotLow()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        return 0;
    }

    private int getStorageSeq(java.io.PrintWriter)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.job.JobSchedulerService $r2;
        int $i0;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 := @parameter0: java.io.PrintWriter;

        $r2 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        $i0 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService: int getStorageSeq()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i0);

        return 0;
    }

    private int monitorBattery(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.lang.String r1, $r3, $r4, $r8;
        long l0;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r5;
        com.android.server.job.JobSchedulerService $r9;
        java.lang.Throwable $r10;
        java.io.PrintWriter r11, r13;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("change battery monitoring");

        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        $r3 = "on";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        $r4 = "off";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label10;

        z2 = 0;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r9 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        virtualinvoke $r9.<com.android.server.job.JobSchedulerService: void setMonitorBattery(boolean)>(z2);

     label04:
        if z2 == 0 goto label07;

     label05:
        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>("Battery monitoring enabled");

     label06:
        goto label08;

     label07:
        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>("Battery monitoring disabled");

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label09:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

     label10:
        r13 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return 1;

        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    private boolean printError(int, java.lang.String, int, int)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        int i0, i1, i2;
        java.lang.String r1;
        java.io.PrintWriter r2, r3, r4;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        tableswitch(i0)
        {
            case -1002: goto label4;
            case -1001: goto label3;
            case -1000: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        r2 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Package not found: ");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" / user ");

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>(i1);

        return 1;

     label3:
        r3 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>("Could not find job ");

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>(i2);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" in package ");

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(" / user ");

        virtualinvoke r3.<java.io.PrintWriter: void println(int)>(i1);

        return 1;

     label4:
        r4 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>("Job ");

        virtualinvoke r4.<java.io.PrintWriter: void print(int)>(i2);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(" in package ");

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r4.<java.io.PrintWriter: void print(java.lang.String)>(" / user ");

        virtualinvoke r4.<java.io.PrintWriter: void print(int)>(i1);

        virtualinvoke r4.<java.io.PrintWriter: void println(java.lang.String)>(" has functional constraints but --force not specified");

        return 1;
    }

    private int resetExecutionQuota(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.lang.String r1, $r4, $r9, r12;
        long l0;
        com.android.server.job.JobSchedulerService $r3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r10;
        java.io.PrintWriter r11;
        int i1, i3, i5;
        byte b4;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("reset execution quota");

        i1 = 0;

     label01:
        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextOption()>();

        if r1 == null goto label08;

        i3 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if i3 == 1512 goto label04;

        if i3 == 1333469547 goto label03;

     label02:
        goto label05;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z1 == 0 goto label02;

        b4 = 1;

        goto label06;

     label04:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("-u");

        if $z0 == 0 goto label02;

        b4 = 0;

        goto label06;

     label05:
        b4 = -1;

     label06:
        if b4 == 0 goto label07;

        if b4 == 1 goto label07;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return -1;

     label07:
        $r4 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i1 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r4);

        goto label01;

     label08:
        i5 = i1;

        if i1 != -2 goto label09;

        i5 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

     label09:
        r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label10:
        $r3 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        virtualinvoke $r3.<com.android.server.job.JobSchedulerService: void resetExecutionQuota(java.lang.String,int)>(r12, i5);

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label12:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private int resetScheduleQuota(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        long l0;
        com.android.server.job.JobSchedulerService $r1;
        java.lang.Throwable $r2;
        java.io.PrintWriter r3;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r3 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("reset schedule quota");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        virtualinvoke $r1.<com.android.server.job.JobSchedulerService: void resetScheduleQuota()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int runJob(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        int i0, i2, i3, i5;
        long l1;
        java.lang.String $r2, $r4, $r9, r12, r13;
        com.android.server.job.JobSchedulerService $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r10;
        java.io.PrintWriter r11;
        byte b4;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("force scheduled jobs");

        z6 = 0;

        z7 = 0;

        i2 = 0;

     label01:
        r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextOption()>();

        if r12 == null goto label15;

        i3 = virtualinvoke r12.<java.lang.String: int hashCode()>();

        if i3 == -1626076853 goto label08;

        if i3 == -969907566 goto label07;

        if i3 == 1497 goto label06;

        if i3 == 1510 goto label05;

        if i3 == 1512 goto label04;

        if i3 == 1333469547 goto label03;

     label02:
        goto label09;

     label03:
        $z5 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z5 == 0 goto label02;

        b4 = 5;

        goto label10;

     label04:
        $z4 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("-u");

        if $z4 == 0 goto label02;

        b4 = 4;

        goto label10;

     label05:
        $z3 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("-s");

        if $z3 == 0 goto label02;

        b4 = 2;

        goto label10;

     label06:
        $z2 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("-f");

        if $z2 == 0 goto label02;

        b4 = 0;

        goto label10;

     label07:
        $z1 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("--satisfied");

        if $z1 == 0 goto label02;

        b4 = 3;

        goto label10;

     label08:
        $z0 = virtualinvoke r12.<java.lang.String: boolean equals(java.lang.Object)>("--force");

        if $z0 == 0 goto label02;

        b4 = 1;

        goto label10;

     label09:
        b4 = -1;

     label10:
        if b4 == 0 goto label13;

        if b4 == 1 goto label13;

        if b4 == 2 goto label12;

        if b4 == 3 goto label12;

        if b4 == 4 goto label11;

        if b4 == 5 goto label11;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        return -1;

     label11:
        $r4 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        goto label14;

     label12:
        z7 = 1;

        goto label14;

     label13:
        z6 = 1;

     label14:
        goto label01;

     label15:
        if z6 == 0 goto label16;

        if z7 == 0 goto label16;

        virtualinvoke r11.<java.io.PrintWriter: void println(java.lang.String)>("Cannot specify both --force and --satisfied");

        return -1;

     label16:
        r13 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        $r2 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label17:
        $r3 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        i5 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService: int executeRunCommand(java.lang.String,int,int,boolean,boolean)>(r13, i2, i0, z7, z6);

        z8 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: boolean printError(int,java.lang.String,int,int)>(i5, r13, i2, i0);

     label18:
        if z8 == 0 goto label19;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i5;

     label19:
        virtualinvoke r11.<java.io.PrintWriter: void print(java.lang.String)>("Running job");

     label20:
        if z6 == 0 goto label22;

     label21:
        virtualinvoke r11.<java.io.PrintWriter: void print(java.lang.String)>(" [FORCED]");

     label22:
        virtualinvoke r11.<java.io.PrintWriter: void println()>();

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i5;

     label24:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r10;

        catch java.lang.Throwable from label17 to label18 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
    }

    private int timeout(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.lang.String r1, $r2, $r7, r10, r12;
        long l1;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r3;
        java.lang.Throwable $r8;
        java.io.PrintWriter r9;
        int i2, i3, i4, i6;
        byte b5;
        com.android.server.job.JobSchedulerService r13;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r9 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("force timeout jobs");

        i2 = -1;

     label01:
        r10 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextOption()>();

        i3 = -1;

        if r10 == null goto label08;

        i4 = virtualinvoke r10.<java.lang.String: int hashCode()>();

        if i4 == 1512 goto label04;

        if i4 == 1333469547 goto label03;

     label02:
        goto label05;

     label03:
        $z1 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("--user");

        if $z1 == 0 goto label02;

        b5 = 1;

        goto label06;

     label04:
        $z0 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("-u");

        if $z0 == 0 goto label02;

        b5 = 0;

        goto label06;

     label05:
        b5 = -1;

     label06:
        if b5 == 0 goto label07;

        if b5 == 1 goto label07;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r9.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

     label07:
        $r2 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        i2 = staticinvoke <android.os.UserHandle: int parseUserArg(java.lang.String)>($r2);

        goto label01;

     label08:
        if i2 != -2 goto label09;

        i2 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        goto label09;

     label09:
        r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArg()>();

        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArg()>();

        if r1 == null goto label10;

        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label10:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label11:
        r13 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

     label12:
        if r1 == null goto label13;

        z2 = 1;

        goto label14;

     label13:
        z2 = 0;

     label14:
        i6 = virtualinvoke r13.<com.android.server.job.JobSchedulerService: int executeTimeoutCommand(java.io.PrintWriter,java.lang.String,int,boolean,int)>(r9, r12, i2, z2, i3);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i6;

     label16:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
    }

    private int triggerDockState(java.io.PrintWriter) throws java.lang.Exception
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        long l0;
        java.io.PrintWriter r1, r11;
        java.lang.String $r3, $r4, $r8, r12;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r5;
        com.android.server.job.JobSchedulerService $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r11 := @parameter0: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: void checkPermission(java.lang.String)>("trigger wireless charging dock state");

        r12 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.lang.String getNextArgRequired()>();

        $r3 = "idle";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z0 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        $r4 = "active";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z1 == 0 goto label6;

        z2 = 0;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r9 = r0.<com.android.server.job.JobSchedulerShellCommand: com.android.server.job.JobSchedulerService mInternal>;

        virtualinvoke $r9.<com.android.server.job.JobSchedulerService: void triggerDockState(boolean)>(z2);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r10;

     label6:
        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getErrPrintWriter()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown option ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return 1;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public int onCommand(java.lang.String)
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7, r8;
        byte b14;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r7 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        if r7 == null goto label01;

        r8 = r7;

        goto label02;

     label01:
        r8 = "";

     label02:
        $i0 = virtualinvoke r8.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1894245460: goto label30;
            case -1845752298: goto label28;
            case -1687551032: goto label26;
            case -1367724422: goto label24;
            case -1313911455: goto label22;
            case 113291: goto label20;
            case 55361425: goto label18;
            case 200896764: goto label16;
            case 703160488: goto label14;
            case 826231557: goto label12;
            case 859357184: goto label10;
            case 1749711139: goto label08;
            case 1791471818: goto label06;
            case 1854493850: goto label04;
            default: goto label03;
        };

     label03:
        goto label32;

     label04:
        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("monitor-battery");

        if $z0 == 0 goto label03;

     label05:
        b14 = 3;

        goto label33;

     label06:
        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get-job-state");

        if $z1 == 0 goto label03;

     label07:
        b14 = 9;

        goto label33;

     label08:
        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get-battery-not-low");

        if $z2 == 0 goto label03;

     label09:
        b14 = 6;

        goto label33;

     label10:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("reset-schedule-quota");

        if $z3 == 0 goto label03;

     label11:
        b14 = 12;

        goto label33;

     label12:
        $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("reset-execution-quota");

        if $z4 == 0 goto label03;

     label13:
        b14 = 11;

        goto label33;

     label14:
        $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get-battery-seq");

        if $z5 == 0 goto label03;

     label15:
        b14 = 4;

        goto label33;

     label16:
        $z6 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("heartbeat");

        if $z6 == 0 goto label03;

     label17:
        b14 = 10;

        goto label33;

     label18:
        $z7 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get-storage-not-low");

        if $z7 == 0 goto label03;

     label19:
        b14 = 8;

        goto label33;

     label20:
        $z8 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("run");

        if $z8 == 0 goto label03;

     label21:
        b14 = 0;

        goto label33;

     label22:
        $z9 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("timeout");

        if $z9 == 0 goto label03;

     label23:
        b14 = 1;

        goto label33;

     label24:
        $z10 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("cancel");

        if $z10 == 0 goto label03;

     label25:
        b14 = 2;

        goto label33;

     label26:
        $z11 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get-battery-charging");

        if $z11 == 0 goto label03;

     label27:
        b14 = 5;

        goto label33;

     label28:
        $z12 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get-storage-seq");

        if $z12 == 0 goto label03;

     label29:
        b14 = 7;

        goto label33;

     label30:
        $z13 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("trigger-dock-state");

        if $z13 == 0 goto label03;

     label31:
        b14 = 13;

        goto label33;

     label32:
        b14 = -1;

     label33:
        tableswitch(b14)
        {
            case 0: goto label49;
            case 1: goto label48;
            case 2: goto label47;
            case 3: goto label46;
            case 4: goto label45;
            case 5: goto label44;
            case 6: goto label43;
            case 7: goto label42;
            case 8: goto label41;
            case 9: goto label40;
            case 10: goto label39;
            case 11: goto label38;
            case 12: goto label37;
            case 13: goto label36;
            default: goto label34;
        };

     label34:
        i15 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int handleDefaultCommands(java.lang.String)>(r7);

     label35:
        goto label51;

     label36:
        $i1 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int triggerDockState(java.io.PrintWriter)>(r1);

        return $i1;

     label37:
        $i2 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int resetScheduleQuota(java.io.PrintWriter)>(r1);

        return $i2;

     label38:
        $i3 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int resetExecutionQuota(java.io.PrintWriter)>(r1);

        return $i3;

     label39:
        $i4 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int doHeartbeat(java.io.PrintWriter)>(r1);

        return $i4;

     label40:
        $i5 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int getJobState(java.io.PrintWriter)>(r1);

        return $i5;

     label41:
        $i6 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int getStorageNotLow(java.io.PrintWriter)>(r1);

        return $i6;

     label42:
        $i7 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int getStorageSeq(java.io.PrintWriter)>(r1);

        return $i7;

     label43:
        $i8 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int getBatteryNotLow(java.io.PrintWriter)>(r1);

        return $i8;

     label44:
        $i9 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int getBatteryCharging(java.io.PrintWriter)>(r1);

        return $i9;

     label45:
        $i10 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int getBatterySeq(java.io.PrintWriter)>(r1);

        return $i10;

     label46:
        $i11 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int monitorBattery(java.io.PrintWriter)>(r1);

        return $i11;

     label47:
        $i12 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int cancelJob(java.io.PrintWriter)>(r1);

        return $i12;

     label48:
        $i13 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int timeout(java.io.PrintWriter)>(r1);

        return $i13;

     label49:
        i16 = specialinvoke r0.<com.android.server.job.JobSchedulerShellCommand: int runJob(java.io.PrintWriter)>(r1);

     label50:
        return i16;

     label51:
        return i15;

     label52:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return -1;

        catch java.lang.Exception from label02 to label03 with label52;
        catch java.lang.Exception from label04 to label05 with label52;
        catch java.lang.Exception from label06 to label07 with label52;
        catch java.lang.Exception from label08 to label09 with label52;
        catch java.lang.Exception from label10 to label11 with label52;
        catch java.lang.Exception from label12 to label13 with label52;
        catch java.lang.Exception from label14 to label15 with label52;
        catch java.lang.Exception from label16 to label17 with label52;
        catch java.lang.Exception from label18 to label19 with label52;
        catch java.lang.Exception from label20 to label21 with label52;
        catch java.lang.Exception from label22 to label23 with label52;
        catch java.lang.Exception from label24 to label25 with label52;
        catch java.lang.Exception from label26 to label27 with label52;
        catch java.lang.Exception from label28 to label29 with label52;
        catch java.lang.Exception from label30 to label31 with label52;
        catch java.lang.Exception from label34 to label35 with label52;
        catch java.lang.Exception from label36 to label37 with label52;
        catch java.lang.Exception from label37 to label38 with label52;
        catch java.lang.Exception from label38 to label39 with label52;
        catch java.lang.Exception from label39 to label40 with label52;
        catch java.lang.Exception from label40 to label41 with label52;
        catch java.lang.Exception from label41 to label42 with label52;
        catch java.lang.Exception from label42 to label43 with label52;
        catch java.lang.Exception from label43 to label44 with label52;
        catch java.lang.Exception from label44 to label45 with label52;
        catch java.lang.Exception from label45 to label46 with label52;
        catch java.lang.Exception from label46 to label47 with label52;
        catch java.lang.Exception from label47 to label48 with label52;
        catch java.lang.Exception from label48 to label49 with label52;
        catch java.lang.Exception from label49 to label50 with label52;
    }

    public void onHelp()
    {
        com.android.server.job.JobSchedulerShellCommand r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.job.JobSchedulerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.job.JobSchedulerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Job scheduler (jobscheduler) commands:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Print this help text.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  run [-f | --force] [-s | --satisfied] [-u | --user USER_ID] PACKAGE JOB_ID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Trigger immediate execution of a specific scheduled job. For historical");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    reasons, some constraints, such as battery, are ignored when this");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    command is called. If you don\'t want any constraints to be ignored,");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    include the -s flag.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Options:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      -f or --force: run the job even if technical constraints such as");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         connectivity are not currently met. This is incompatible with -f ");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         and so an error will be reported if both are given.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      -s or --satisfied: run the job only if all constraints are met.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         This is incompatible with -f and so an error will be reported");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         if both are given.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      -u or --user: specify which user\'s job is to be run; the default is");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         the primary or system user");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  timeout [-u | --user USER_ID] [PACKAGE] [JOB_ID]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Trigger immediate timeout of currently executing jobs, as if their.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    execution timeout had expired.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Options:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      -u or --user: specify which user\'s job is to be run; the default is");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         all users");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  cancel [-u | --user USER_ID] PACKAGE [JOB_ID]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Cancel a scheduled job.  If a job ID is not supplied, all jobs scheduled");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    by that package will be canceled.  USE WITH CAUTION.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Options:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      -u or --user: specify which user\'s job is to be run; the default is");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         the primary or system user");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  heartbeat [num]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    No longer used.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  monitor-battery [on|off]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Control monitoring of all battery changes.  Off by default.  Turning");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    on makes get-battery-seq useful.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get-battery-seq");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Return the last battery update sequence number that was received.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get-battery-charging");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Return whether the battery is currently considered to be charging.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get-battery-not-low");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Return whether the battery is currently considered to not be low.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get-storage-seq");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Return the last storage update sequence number that was received.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get-storage-not-low");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Return whether storage is currently considered to not be low.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get-job-state [-u | --user USER_ID] PACKAGE JOB_ID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Return the current state of a job, may be any combination of:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      pending: currently on the pending list, waiting to be active");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      active: job is actively running");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      user-stopped: job can\'t run because its user is stopped");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      backing-up: job can\'t run because app is currently backing up its data");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      no-component: job can\'t run because its component is not available");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      ready: job is ready to run (all constraints satisfied or bypassed)");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      waiting: if nothing else above is printed, job not ready to run");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Options:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("      -u or --user: specify which user\'s job is to be run; the default is");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("         the primary or system user");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  trigger-dock-state [idle|active]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Trigger wireless charging dock state.  Active by default.");

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.job.JobSchedulerShellCommand: int CMD_ERR_NO_PACKAGE> = -1000;

        <com.android.server.job.JobSchedulerShellCommand: int CMD_ERR_NO_JOB> = -1001;

        <com.android.server.job.JobSchedulerShellCommand: int CMD_ERR_CONSTRAINTS> = -1002;

        return;
    }
}
