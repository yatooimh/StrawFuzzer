public final class com.android.server.job.JobServiceContext extends java.lang.Object implements android.content.ServiceConnection
{
    private static final boolean DEBUG;
    private static final boolean DEBUG_STANDBY;
    public static final long EXECUTING_TIMESLICE_MILLIS;
    private static final int MSG_TIMEOUT;
    public static final int NO_PREFERRED_UID;
    private static final long OP_BIND_TIMEOUT_MILLIS;
    private static final long OP_TIMEOUT_MILLIS;
    private static final java.lang.String TAG;
    static final int VERB_BINDING;
    static final int VERB_EXECUTING;
    static final int VERB_FINISHED;
    static final int VERB_STARTING;
    static final int VERB_STOPPING;
    private static final java.lang.String[] VERB_STRINGS;
    private boolean mAvailable;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private final android.os.Handler mCallbackHandler;
    private boolean mCancelled;
    private final com.android.server.job.JobCompletedListener mCompletedListener;
    private final android.content.Context mContext;
    private long mExecutionStartTimeElapsed;
    private final com.android.server.job.JobPackageTracker mJobPackageTracker;
    private final java.lang.Object mLock;
    private android.app.job.JobParameters mParams;
    private int mPreferredUid;
    private com.android.server.job.JobServiceContext$JobCallback mRunningCallback;
    private com.android.server.job.controllers.JobStatus mRunningJob;
    public java.lang.String mStoppedReason;
    public long mStoppedTime;
    private long mTimeoutElapsed;
    int mVerb;
    private android.os.PowerManager$WakeLock mWakeLock;
    android.app.job.IJobService service;

    static void <clinit>()
    {
        boolean $z0, $z1;
        java.lang.String[] $r0;

        <com.android.server.job.JobServiceContext: int VERB_STOPPING> = 3;

        <com.android.server.job.JobServiceContext: int VERB_STARTING> = 1;

        <com.android.server.job.JobServiceContext: int VERB_FINISHED> = 4;

        <com.android.server.job.JobServiceContext: int VERB_EXECUTING> = 2;

        <com.android.server.job.JobServiceContext: int VERB_BINDING> = 0;

        <com.android.server.job.JobServiceContext: java.lang.String TAG> = "JobServiceContext";

        <com.android.server.job.JobServiceContext: long OP_TIMEOUT_MILLIS> = 8000L;

        <com.android.server.job.JobServiceContext: long OP_BIND_TIMEOUT_MILLIS> = 18000L;

        <com.android.server.job.JobServiceContext: int NO_PREFERRED_UID> = -1;

        <com.android.server.job.JobServiceContext: int MSG_TIMEOUT> = 0;

        <com.android.server.job.JobServiceContext: long EXECUTING_TIMESLICE_MILLIS> = 600000L;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        <com.android.server.job.JobServiceContext: boolean DEBUG> = $z0;

        $z1 = <com.android.server.job.JobSchedulerService: boolean DEBUG_STANDBY>;

        <com.android.server.job.JobServiceContext: boolean DEBUG_STANDBY> = $z1;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "VERB_BINDING";

        $r0[1] = "VERB_STARTING";

        $r0[2] = "VERB_EXECUTING";

        $r0[3] = "VERB_STOPPING";

        $r0[4] = "VERB_FINISHED";

        <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS> = $r0;

        return;
    }

    void <init>(android.content.Context, java.lang.Object, com.android.internal.app.IBatteryStats, com.android.server.job.JobPackageTracker, com.android.server.job.JobCompletedListener, android.os.Looper)
    {
        com.android.server.job.JobServiceContext r0;
        android.content.Context r1;
        java.lang.Object r2;
        com.android.internal.app.IBatteryStats r3;
        com.android.server.job.JobPackageTracker r4;
        com.android.server.job.JobCompletedListener r5;
        android.os.Looper r6;
        com.android.server.job.JobServiceContext$JobServiceHandler $r7;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: com.android.internal.app.IBatteryStats;

        r4 := @parameter3: com.android.server.job.JobPackageTracker;

        r5 := @parameter4: com.android.server.job.JobCompletedListener;

        r6 := @parameter5: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.job.JobServiceContext: android.content.Context mContext> = r1;

        r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock> = r2;

        r0.<com.android.server.job.JobServiceContext: com.android.internal.app.IBatteryStats mBatteryStats> = r3;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobPackageTracker mJobPackageTracker> = r4;

        $r7 = new com.android.server.job.JobServiceContext$JobServiceHandler;

        specialinvoke $r7.<com.android.server.job.JobServiceContext$JobServiceHandler: void <init>(com.android.server.job.JobServiceContext,android.os.Looper)>(r0, r6);

        r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler> = $r7;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobCompletedListener mCompletedListener> = r5;

        r0.<com.android.server.job.JobServiceContext: boolean mAvailable> = 1;

        r0.<com.android.server.job.JobServiceContext: int mVerb> = 4;

        r0.<com.android.server.job.JobServiceContext: int mPreferredUid> = -1;

        return;
    }

    void <init>(com.android.server.job.JobSchedulerService, com.android.internal.app.IBatteryStats, com.android.server.job.JobPackageTracker, android.os.Looper)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobSchedulerService r1;
        com.android.internal.app.IBatteryStats r2;
        com.android.server.job.JobPackageTracker r3;
        android.os.Looper r4;
        android.content.Context $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r2 := @parameter1: com.android.internal.app.IBatteryStats;

        r3 := @parameter2: com.android.server.job.JobPackageTracker;

        r4 := @parameter3: android.os.Looper;

        $r5 = virtualinvoke r1.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r6 = virtualinvoke r1.<com.android.server.job.JobSchedulerService: java.lang.Object getLock()>();

        specialinvoke r0.<com.android.server.job.JobServiceContext: void <init>(android.content.Context,java.lang.Object,com.android.internal.app.IBatteryStats,com.android.server.job.JobPackageTracker,com.android.server.job.JobCompletedListener,android.os.Looper)>($r5, $r6, r2, r3, r1, r4);

        return;
    }

    static java.lang.Object access$000(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.job.JobServiceContext$JobCallback access$100(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobServiceContext$JobCallback $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback>;

        return $r1;
    }

    static void access$200(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleOpTimeoutLocked()>();

        return;
    }

    private void applyStoppedReasonLocked(java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.String $r1, $r3, r5;
        java.time.Clock $r2;
        long $l0, $l1;
        com.android.server.job.JobServiceContext$JobCallback $r4, r6;

        r0 := @this: com.android.server.job.JobServiceContext;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label1;

        $r1 = r0.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason>;

        if $r1 != null goto label1;

        r0.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason> = r5;

        $r2 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

        r0.<com.android.server.job.JobServiceContext: long mStoppedTime> = $l0;

        r6 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback>;

        if r6 == null goto label1;

        $r3 = r0.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason>;

        r6.<com.android.server.job.JobServiceContext$JobCallback: java.lang.String mStoppedReason> = $r3;

        $r4 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback>;

        $l1 = r0.<com.android.server.job.JobServiceContext: long mStoppedTime>;

        $r4.<com.android.server.job.JobServiceContext$JobCallback: long mStoppedTime> = $l1;

     label1:
        return;
    }

    private void assertCallerLocked(com.android.server.job.JobServiceContext$JobCallback)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobServiceContext$JobCallback r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7, $r11;
        java.lang.SecurityException $r6;
        java.time.Clock $r9;
        long $l0, $l1, $l2;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        $z0 = specialinvoke r0.<com.android.server.job.JobServiceContext: boolean verifyCallerLocked(com.android.server.job.JobServiceContext$JobCallback)>(r1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller no longer running");

        $r5 = r1.<com.android.server.job.JobServiceContext$JobCallback: java.lang.String mStoppedReason>;

        if $r5 == null goto label1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", last stopped ");

        $r9 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l0 = virtualinvoke $r9.<java.time.Clock: long millis()>();

        $l1 = r1.<com.android.server.job.JobServiceContext$JobCallback: long mStoppedTime>;

        $l2 = $l0 - $l1;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l2, $r3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because: ");

        $r11 = r1.<com.android.server.job.JobServiceContext$JobCallback: java.lang.String mStoppedReason>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

     label1:
        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        return;
    }

    private void closeAndCleanupJobLocked(boolean, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.server.job.controllers.JobStatus r1, $r6, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.app.job.JobParameters $r2, $r5, $r10;
        com.android.server.job.JobPackageTracker $r3;
        java.lang.String $r4, $r8, r14;
        com.android.internal.app.IBatteryStats $r7;
        android.content.Context $r11;
        com.android.server.job.JobCompletedListener $r12;
        android.os.RemoteException $r13;
        android.os.PowerManager$WakeLock r16;

        r0 := @this: com.android.server.job.JobServiceContext;

        z0 := @parameter0: boolean;

        r14 := @parameter1: java.lang.String;

        $i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i0 != 4 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void applyStoppedReasonLocked(java.lang.String)>(r14);

        r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $r3 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        $r2 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        $i1 = virtualinvoke $r2.<android.app.job.JobParameters: int getStopReason()>();

        virtualinvoke $r3.<com.android.server.job.JobPackageTracker: void noteInactive(com.android.server.job.controllers.JobStatus,int,java.lang.String)>(r1, $i1, r14);

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $r4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String getBatteryName()>();

        $r5 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        $i3 = virtualinvoke $r5.<android.app.job.JobParameters: int getStopReason()>();

        $i4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getStandbyBucket()>();

        $i5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasChargingConstraint()>();

        $z2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasBatteryNotLowConstraint()>();

        $z3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasStorageNotLowConstraint()>();

        $z4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasTimingDelayConstraint()>();

        $z5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasDeadlineConstraint()>();

        $z6 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasIdleConstraint()>();

        $z7 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        $z8 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasContentTriggerConstraint()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,java.lang.String,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>(8, $i2, null, $r4, 0, $i3, $i4, $i5, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8);

     label2:
        $r7 = r0.<com.android.server.job.JobServiceContext: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r6 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $r8 = virtualinvoke $r6.<com.android.server.job.controllers.JobStatus: java.lang.String getBatteryName()>();

        $r9 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $i6 = virtualinvoke $r9.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $r10 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        $i7 = virtualinvoke $r10.<android.app.job.JobParameters: int getStopReason()>();

        interfaceinvoke $r7.<com.android.internal.app.IBatteryStats: void noteJobFinish(java.lang.String,int,int)>($r8, $i6, $i7);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

     label5:
        r16 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        if r16 == null goto label6;

        virtualinvoke r16.<android.os.PowerManager$WakeLock: void release()>();

     label6:
        $r11 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void unbindService(android.content.ServiceConnection)>(r0);

        r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock> = null;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob> = null;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback> = null;

        r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams> = null;

        r0.<com.android.server.job.JobServiceContext: int mVerb> = 4;

        r0.<com.android.server.job.JobServiceContext: boolean mCancelled> = 0;

        r0.<com.android.server.job.JobServiceContext: android.app.job.IJobService service> = null;

        r0.<com.android.server.job.JobServiceContext: boolean mAvailable> = 1;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOutLocked()>();

        $r12 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobCompletedListener mCompletedListener>;

        interfaceinvoke $r12.<com.android.server.job.JobCompletedListener: void onJobCompletedLocked(com.android.server.job.controllers.JobStatus,boolean)>(r1, z0);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private android.os.WorkSource deriveWorkSource(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobServiceContext r0;
        int i0;
        android.content.Context $r1;
        boolean $z0;
        android.os.WorkSource $r2, $r3;
        android.os.WorkSource$WorkChain $r4, $r5;
        com.android.server.job.controllers.JobStatus r7;

        r0 := @this: com.android.server.job.JobServiceContext;

        r7 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 = virtualinvoke r7.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $r1 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        $z0 = staticinvoke <android.os.WorkSource: boolean isChainedBatteryAttributionEnabled(android.content.Context)>($r1);

        if $z0 == 0 goto label1;

        $r3 = new android.os.WorkSource;

        specialinvoke $r3.<android.os.WorkSource: void <init>()>();

        $r4 = virtualinvoke $r3.<android.os.WorkSource: android.os.WorkSource$WorkChain createWorkChain()>();

        $r5 = virtualinvoke $r4.<android.os.WorkSource$WorkChain: android.os.WorkSource$WorkChain addNode(int,java.lang.String)>(i0, null);

        virtualinvoke $r5.<android.os.WorkSource$WorkChain: android.os.WorkSource$WorkChain addNode(int,java.lang.String)>(1000, "JobScheduler");

        return $r3;

     label1:
        $r2 = new android.os.WorkSource;

        specialinvoke $r2.<android.os.WorkSource: void <init>(int)>(i0);

        return $r2;
    }

    private java.lang.String getRunningJobNameLocked()
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.controllers.JobStatus r1;
        java.lang.String r2;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        goto label2;

     label1:
        r2 = "<null>";

     label2:
        return r2;
    }

    private void handleCancelLocked(java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        int i0, $i1, $i3, $i4;
        boolean $z0;
        java.lang.StringBuilder $r2, $r6;
        java.lang.String $r5, $r12, $r14, r15;
        com.android.server.job.controllers.JobStatus $r8;
        java.lang.String[] $r11;

        r0 := @this: com.android.server.job.JobServiceContext;

        r15 := @parameter0: java.lang.String;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling cancel for: ");

        $r8 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $i3 = virtualinvoke $r8.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS>;

        $i4 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        $r12 = $r11[$i4];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r14);

     label1:
        i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if i0 == 0 goto label4;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cancelling a job without a valid verb: ");

        $i1 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", $r5);

        goto label5;

     label2:
        goto label5;

     label3:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void sendStopMessageLocked(java.lang.String)>(r15);

        goto label5;

     label4:
        r0.<com.android.server.job.JobServiceContext: boolean mCancelled> = 1;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void applyStoppedReasonLocked(java.lang.String)>(r15);

     label5:
        return;
    }

    private void handleFinishedLocked(boolean, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        boolean z0;
        int i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String[] $r3;
        java.lang.String $r4, $r7, r8;

        r0 := @this: com.android.server.job.JobServiceContext;

        z0 := @parameter0: boolean;

        r8 := @parameter1: java.lang.String;

        i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got an execution complete message for a job that wasn\'t beingexecuted. Was ");

        $r3 = <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS>;

        $i1 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        $r4 = $r3[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", $r7);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(z0, r8);

     label2:
        return;
    }

    private void handleOpTimeoutLocked()
    {
        com.android.server.job.JobServiceContext r0;
        int i0;
        java.lang.StringBuilder $r1, $r7, $r12, $r18, $r23;
        java.lang.String $r3, $r6, $r9, $r11, $r14, $r16, $r20, $r22, $r25, $r28;
        android.app.job.JobParameters $r17;

        r0 := @this: com.android.server.job.JobServiceContext;

        i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling timeout for an invalid job state: ");

        $r25 = specialinvoke r0.<com.android.server.job.JobServiceContext: java.lang.String getRunningJobNameLocked()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dropping.");

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", $r28);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(0, "invalid timeout");

        goto label5;

     label1:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No response from client for onStopJob ");

        $r20 = specialinvoke r0.<com.android.server.job.JobServiceContext: java.lang.String getRunningJobNameLocked()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobServiceContext", $r22);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(1, "timed out while stopping");

        goto label5;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client timed out while executing (no jobFinished received), sending onStop: ");

        $r14 = specialinvoke r0.<com.android.server.job.JobServiceContext: java.lang.String getRunningJobNameLocked()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobServiceContext", $r16);

        $r17 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        virtualinvoke $r17.<android.app.job.JobParameters: void setStopReason(int,java.lang.String)>(3, "client timed out");

        specialinvoke r0.<com.android.server.job.JobServiceContext: void sendStopMessageLocked(java.lang.String)>("timeout while executing");

        goto label5;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No response from client for onStartJob ");

        $r9 = specialinvoke r0.<com.android.server.job.JobServiceContext: java.lang.String getRunningJobNameLocked()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobServiceContext", $r11);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(0, "timed out while starting");

        goto label5;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time-out while trying to bind ");

        $r3 = specialinvoke r0.<com.android.server.job.JobServiceContext: java.lang.String getRunningJobNameLocked()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dropping.");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobServiceContext", $r6);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(0, "timed out while binding");

     label5:
        return;
    }

    private void handleServiceBoundLocked()
    {
        com.android.server.job.JobServiceContext r0;
        boolean $z0, $z1, $z2;
        int $i0, $i2;
        android.app.job.JobParameters $r2;
        android.app.job.IJobService $r3;
        java.lang.StringBuilder $r4, $r9, $r15, $r21;
        com.android.server.job.controllers.JobStatus $r6, $r23;
        java.lang.String $r8, $r12, $r14, $r17, $r19, $r25, $r28;
        java.lang.String[] $r11;
        java.lang.Exception $r20;
        android.content.ComponentName $r24;

        r0 := @this: com.android.server.job.JobServiceContext;

        $z0 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleServiceBound for ");

        $r17 = specialinvoke r0.<com.android.server.job.JobServiceContext: java.lang.String getRunningJobNameLocked()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r19);

     label1:
        $i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i0 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending onStartJob for a job that isn\'t pending. ");

        $r11 = <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS>;

        $i2 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        $r12 = $r11[$i2];

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", $r14);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(0, "started job not pending");

        return;

     label2:
        $z1 = r0.<com.android.server.job.JobServiceContext: boolean mCancelled>;

        if $z1 == 0 goto label4;

        $z2 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z2 == 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job cancelled while waiting for bind to complete. ");

        $r6 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r8);

     label3:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(1, "cancelled while waiting for bind");

        return;

     label4:
        r0.<com.android.server.job.JobServiceContext: int mVerb> = 1;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void scheduleOpTimeOutLocked()>();

        $r3 = r0.<com.android.server.job.JobServiceContext: android.app.job.IJobService service>;

        $r2 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        interfaceinvoke $r3.<android.app.job.IJobService: void startJob(android.app.job.JobParameters)>($r2);

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error sending onStart message to \'");

        $r23 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $r24 = virtualinvoke $r23.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r25 = virtualinvoke $r24.<android.content.ComponentName: java.lang.String getShortClassName()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r28 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("JobServiceContext", $r28, $r20);

     label7:
        return;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    private void handleStartedLocked(boolean)
    {
        com.android.server.job.JobServiceContext r0;
        boolean z0, $z1, $z2;
        int $i0, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String[] $r4;
        java.lang.String $r5, $r8;

        r0 := @this: com.android.server.job.JobServiceContext;

        z0 := @parameter0: boolean;

        $i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i0 == 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handling started job but job wasn\'t starting! Was ");

        $r4 = <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS>;

        $i2 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        $r5 = $r4[$i2];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", $r8);

        return;

     label1:
        r0.<com.android.server.job.JobServiceContext: int mVerb> = 2;

        if z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleFinishedLocked(boolean,java.lang.String)>(0, "onStartJob returned false");

        return;

     label2:
        $z1 = r0.<com.android.server.job.JobServiceContext: boolean mCancelled>;

        if $z1 == 0 goto label4;

        $z2 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z2 == 0 goto label3;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", "Job cancelled while waiting for onStartJob to complete.");

     label3:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleCancelLocked(java.lang.String)>(null);

        return;

     label4:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void scheduleOpTimeOutLocked()>();

        return;
    }

    private void removeOpTimeOutLocked()
    {
        com.android.server.job.JobServiceContext r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(0);

        return;
    }

    private void scheduleOpTimeOutLocked()
    {
        com.android.server.job.JobServiceContext r0;
        int i0, $i3;
        com.android.server.job.JobServiceContext$JobCallback $r1;
        android.os.Handler $r2, $r3;
        java.time.Clock $r4;
        long $l1, $l2, $l4, l6;
        java.lang.StringBuilder $r5;
        com.android.server.job.controllers.JobStatus $r7;
        android.content.ComponentName $r8;
        java.lang.String $r9, $r17;
        android.app.job.JobParameters $r12;
        boolean $z1;
        android.os.Message r19;

        r0 := @this: com.android.server.job.JobServiceContext;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOutLocked()>();

        i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if i0 == 0 goto label2;

        if i0 == 2 goto label1;

        l6 = 8000L;

        goto label3;

     label1:
        l6 = 600000L;

        goto label3;

     label2:
        l6 = 18000L;

     label3:
        $z1 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z1 == 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheduling time out for \'");

        $r7 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $r8 = virtualinvoke $r7.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r9 = virtualinvoke $r8.<android.content.ComponentName: java.lang.String getShortClassName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' jId: ");

        $r12 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        $i3 = virtualinvoke $r12.<android.app.job.JobParameters: int getJobId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", in ");

        $l4 = l6 / 1000L;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" s");

        $r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r17);

     label4:
        $r2 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback>;

        r19 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(0, $r1);

        $r3 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r19, l6);

        $r4 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l1 = virtualinvoke $r4.<java.time.Clock: long millis()>();

        $l2 = $l1 + l6;

        r0.<com.android.server.job.JobServiceContext: long mTimeoutElapsed> = $l2;

        return;
    }

    private void sendStopMessageLocked(java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        int $i0;
        android.app.job.JobParameters $r2;
        android.app.job.IJobService $r3;
        java.lang.StringBuilder $r4;
        com.android.server.job.controllers.JobStatus $r6;
        java.lang.String $r8, r10;
        android.os.RemoteException $r9;

        r0 := @this: com.android.server.job.JobServiceContext;

        r10 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOutLocked()>();

        $i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i0 == 2 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending onStopJob for a job that isn\'t started. ");

        $r6 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", $r8);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(0, r10);

        return;

     label1:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void applyStoppedReasonLocked(java.lang.String)>(r10);

        r0.<com.android.server.job.JobServiceContext: int mVerb> = 3;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void scheduleOpTimeOutLocked()>();

        $r3 = r0.<com.android.server.job.JobServiceContext: android.app.job.IJobService service>;

        $r2 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        interfaceinvoke $r3.<android.app.job.IJobService: void stopJob(android.app.job.JobParameters)>($r2);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("JobServiceContext", "Error sending onStopJob to client.", $r9);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(1, "host crashed when trying to stop");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean verifyCallerLocked(com.android.server.job.JobServiceContext$JobCallback)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobServiceContext$JobCallback r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        $r2 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback>;

        if $r2 == r1 goto label2;

        $z0 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", "Stale callback received, ignoring.");

     label1:
        return 0;

     label2:
        return 1;
    }

    void cancelExecutingJobLocked(int, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.job.JobServiceContext;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCancelLocked(int,java.lang.String)>(i0, r1);

        return;
    }

    void clearPreferredUid()
    {
        com.android.server.job.JobServiceContext r0;

        r0 := @this: com.android.server.job.JobServiceContext;

        r0.<com.android.server.job.JobServiceContext: int mPreferredUid> = -1;

        return;
    }

    void doAcknowledgeStartMessage(com.android.server.job.JobServiceContext$JobCallback, int, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobServiceContext$JobCallback r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCallback(com.android.server.job.JobServiceContext$JobCallback,boolean,java.lang.String)>(r1, z0, "finished start");

        return;
    }

    void doAcknowledgeStopMessage(com.android.server.job.JobServiceContext$JobCallback, int, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobServiceContext$JobCallback r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCallback(com.android.server.job.JobServiceContext$JobCallback,boolean,java.lang.String)>(r1, z0, null);

        return;
    }

    void doCallback(com.android.server.job.JobServiceContext$JobCallback, boolean, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        boolean z0, $z1;
        java.lang.String r1;
        long l0;
        java.lang.Object r2;
        java.lang.Throwable $r3, $r4;
        com.android.server.job.JobServiceContext$JobCallback r5;

        r0 := @this: com.android.server.job.JobServiceContext;

        r5 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $z1 = specialinvoke r0.<com.android.server.job.JobServiceContext: boolean verifyCallerLocked(com.android.server.job.JobServiceContext$JobCallback)>(r5);

        if $z1 != 0 goto label4;

        exitmonitor r2;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCallbackLocked(boolean,java.lang.String)>(z0, r1);

        exitmonitor r2;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r3;

     label9:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    void doCallbackLocked(boolean, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        boolean z0, $z1, $z2;
        int i0, $i2;
        java.lang.StringBuilder $r2, $r7;
        com.android.server.job.controllers.JobStatus $r4, $r9;
        java.lang.String $r6, $r13, $r15, r16;
        java.lang.String[] $r12;

        r0 := @this: com.android.server.job.JobServiceContext;

        z0 := @parameter0: boolean;

        r16 := @parameter1: java.lang.String;

        $z1 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z1 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doCallback of : ");

        $r9 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" v:");

        $r12 = <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS>;

        $i2 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        $r13 = $r12[$i2];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r15);

     label1:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOutLocked()>();

        i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if i0 != 1 goto label2;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleStartedLocked(boolean)>(z0);

        goto label5;

     label2:
        if i0 == 2 goto label4;

        if i0 != 3 goto label3;

        goto label4;

     label3:
        $z2 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z2 == 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognised callback: ");

        $r4 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r6);

        goto label5;

     label4:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleFinishedLocked(boolean,java.lang.String)>(z0, r16);

     label5:
        return;
    }

    void doCancelLocked(int, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.String r1;
        com.android.server.job.controllers.JobStatus r2;
        int $i0, i2, i3;
        android.app.job.JobParameters $r3;
        boolean $z0;

        r0 := @this: com.android.server.job.JobServiceContext;

        i2 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $i0 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i0 != 4 goto label2;

        $z0 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", "Trying to process cancel for torn-down context, ignoring.");

     label1:
        return;

     label2:
        $r3 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        virtualinvoke $r3.<android.app.job.JobParameters: void setStopReason(int,java.lang.String)>(i2, r1);

        if i2 != 2 goto label5;

        r2 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        if r2 == null goto label3;

        i3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getUid()>();

        goto label4;

     label3:
        i3 = -1;

     label4:
        r0.<com.android.server.job.JobServiceContext: int mPreferredUid> = i3;

     label5:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleCancelLocked(java.lang.String)>(r1);

        return;
    }

    boolean doCompleteWork(com.android.server.job.JobServiceContext$JobCallback, int, int)
    {
        com.android.server.job.JobServiceContext r0;
        int i0, i1;
        long l2;
        java.lang.Object r1;
        boolean z0;
        com.android.server.job.controllers.JobStatus $r2;
        java.lang.Throwable $r3, $r4;
        com.android.server.job.JobServiceContext$JobCallback r5;

        r0 := @this: com.android.server.job.JobServiceContext;

        r5 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r1 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void assertCallerLocked(com.android.server.job.JobServiceContext$JobCallback)>(r5);

        $r2 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        z0 = virtualinvoke $r2.<com.android.server.job.controllers.JobStatus: boolean completeWorkLocked(int)>(i1);

        exitmonitor r1;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    android.app.job.JobWorkItem doDequeueWork(com.android.server.job.JobServiceContext$JobCallback, int)
    {
        com.android.server.job.JobServiceContext r0;
        int i0, $i2, $i3;
        long l1;
        java.lang.Object r1;
        com.android.server.job.controllers.JobStatus $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4, $r5;
        com.android.server.job.JobServiceContext$JobCallback r6;
        android.app.job.JobWorkItem r7;

        r0 := @this: com.android.server.job.JobServiceContext;

        r6 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void assertCallerLocked(com.android.server.job.JobServiceContext$JobCallback)>(r6);

        $i2 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i2 == 3 goto label09;

        $i3 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i3 != 4 goto label04;

     label03:
        goto label09;

     label04:
        $r2 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        r7 = virtualinvoke $r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobWorkItem dequeueWorkLocked()>();

     label05:
        if r7 != null goto label07;

     label06:
        $r3 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $z0 = virtualinvoke $r3.<com.android.server.job.controllers.JobStatus: boolean hasExecutingWorkLocked()>();

        if $z0 != 0 goto label07;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCallbackLocked(boolean,java.lang.String)>(0, "last work dequeued");

     label07:
        exitmonitor r1;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r7;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return null;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

     label14:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    void doJobFinished(com.android.server.job.JobServiceContext$JobCallback, int, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobServiceContext$JobCallback r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobServiceContext$JobCallback;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCallback(com.android.server.job.JobServiceContext$JobCallback,boolean,java.lang.String)>(r1, z0, "app called jobFinished");

        return;
    }

    void doServiceBoundLocked()
    {
        com.android.server.job.JobServiceContext r0;

        r0 := @this: com.android.server.job.JobServiceContext;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOutLocked()>();

        specialinvoke r0.<com.android.server.job.JobServiceContext: void handleServiceBoundLocked()>();

        return;
    }

    boolean executeRunnableJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Object r1, $r15;
        android.app.job.JobInfo r2;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, $i14, $i15, $i23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13;
        android.util.ArraySet $r4, $r27, $r28, $r30, $r31, $r47;
        com.android.server.job.JobServiceContext$JobCallback $r5, r62;
        android.os.PersistableBundle $r6;
        android.os.Bundle $r7;
        android.content.ClipData $r8;
        android.net.Network $r9;
        java.time.Clock $r10, $r33;
        long $l3, $l9, $l11, $l16, $l17, l21, l22;
        byte $b4, $b18;
        com.android.server.job.JobPackageTracker $r11;
        java.lang.String $r12, $r14, $r18, $r21, $r24, $r26, $r37, $r40, $r42, r60;
        com.android.internal.app.IBatteryStats $r13;
        android.app.usage.UsageStatsManagerInternal $r16;
        android.content.ComponentName $r17, $r36, $r52;
        java.lang.Throwable $r34, $r44;
        android.os.RemoteException $r43;
        com.android.server.job.controllers.JobStatus r45;
        android.net.Uri[] r48;
        java.lang.String[] r49;
        android.content.Intent r53, r65;
        android.content.Context $r54;
        android.os.UserHandle $r55;
        android.app.job.JobParameters r63;
        java.lang.StringBuilder r64, r66, r67;
        java.lang.SecurityException r68;

        r0 := @this: com.android.server.job.JobServiceContext;

        r45 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.job.JobServiceContext: boolean mAvailable>;

        if $z0 != 0 goto label03;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", "Starting new runnable but context is unavailable > Error.");

        exitmonitor r1;

     label02:
        return 0;

     label03:
        r0.<com.android.server.job.JobServiceContext: int mPreferredUid> = -1;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob> = r45;

        r62 = new com.android.server.job.JobServiceContext$JobCallback;

        specialinvoke r62.<com.android.server.job.JobServiceContext$JobCallback: void <init>(com.android.server.job.JobServiceContext)>(r0);

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback> = r62;

     label04:
        $z1 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasDeadlineConstraint()>();

        if $z1 == 0 goto label06;

        $l16 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: long getLatestRunTimeElapsed()>();

        $r33 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l17 = virtualinvoke $r33.<java.time.Clock: long millis()>();

        $b18 = $l16 cmp $l17;

        if $b18 >= 0 goto label06;

     label05:
        z12 = 1;

        goto label07;

     label06:
        z12 = 0;

     label07:
        $r47 = r45.<com.android.server.job.controllers.JobStatus: android.util.ArraySet changedUris>;

        if $r47 == null goto label09;

        $r30 = r45.<com.android.server.job.controllers.JobStatus: android.util.ArraySet changedUris>;

        $i15 = virtualinvoke $r30.<android.util.ArraySet: int size()>();

        r48 = newarray (android.net.Uri)[$i15];

        $r31 = r45.<com.android.server.job.controllers.JobStatus: android.util.ArraySet changedUris>;

        virtualinvoke $r31.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>(r48);

     label08:
        goto label10;

     label09:
        r48 = null;

     label10:
        $r4 = r45.<com.android.server.job.controllers.JobStatus: android.util.ArraySet changedAuthorities>;

        if $r4 == null goto label12;

        $r27 = r45.<com.android.server.job.controllers.JobStatus: android.util.ArraySet changedAuthorities>;

        $i14 = virtualinvoke $r27.<android.util.ArraySet: int size()>();

        r49 = newarray (java.lang.String)[$i14];

        $r28 = r45.<com.android.server.job.controllers.JobStatus: android.util.ArraySet changedAuthorities>;

        virtualinvoke $r28.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>(r49);

     label11:
        goto label13;

     label12:
        r49 = null;

     label13:
        r2 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        r63 = new android.app.job.JobParameters;

        $r5 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback>;

        $i1 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $r6 = virtualinvoke r2.<android.app.job.JobInfo: android.os.PersistableBundle getExtras()>();

        $r7 = virtualinvoke r2.<android.app.job.JobInfo: android.os.Bundle getTransientExtras()>();

        $r8 = virtualinvoke r2.<android.app.job.JobInfo: android.content.ClipData getClipData()>();

        $i2 = virtualinvoke r2.<android.app.job.JobInfo: int getClipGrantFlags()>();

        $r9 = r45.<com.android.server.job.controllers.JobStatus: android.net.Network network>;

        specialinvoke r63.<android.app.job.JobParameters: void <init>(android.os.IBinder,int,android.os.PersistableBundle,android.os.Bundle,android.content.ClipData,int,boolean,android.net.Uri[],java.lang.String[],android.net.Network)>($r5, $i1, $r6, $r7, $r8, $i2, z12, r48, r49, $r9);

        r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams> = r63;

        $r10 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        $l3 = virtualinvoke $r10.<java.time.Clock: long millis()>();

        r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed> = $l3;

        l21 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: long getWhenStandbyDeferred()>();

     label14:
        $b4 = l21 cmp 0L;

        if $b4 <= 0 goto label16;

     label15:
        $l11 = r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed>;

        l22 = $l11 - l21;

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(8000, l22);

        $z11 = <com.android.server.job.JobServiceContext: boolean DEBUG_STANDBY>;

        if $z11 == 0 goto label16;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting job deferred for standby by ");

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>(l22, r64);

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms : ");

        $r24 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobServiceContext", $r26);

     label16:
        virtualinvoke r45.<com.android.server.job.controllers.JobStatus: void clearPersistedUtcTimes()>();

        r0.<com.android.server.job.JobServiceContext: int mVerb> = 0;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void scheduleOpTimeOutLocked()>();

        r65 = new android.content.Intent;

        specialinvoke r65.<android.content.Intent: void <init>()>();

        $r52 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        r53 = virtualinvoke r65.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r52);

     label17:
        $r54 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        $i23 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        $r55 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i23);

        z13 = virtualinvoke $r54.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r53, r0, 261, $r55);

     label18:
        goto label22;

     label19:
        $r34 := @caughtexception;

     label20:
        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Job service ");

        $r36 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r37 = virtualinvoke $r36.<android.content.ComponentName: java.lang.String getShortClassName()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be executed: ");

        r68 = (java.lang.SecurityException) $r34;

        $r40 = virtualinvoke r68.<java.lang.SecurityException: java.lang.String getMessage()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobServiceContext", $r42);

     label21:
        z13 = 0;

     label22:
        if z13 != 0 goto label26;

     label23:
        $z10 = <com.android.server.job.JobServiceContext: boolean DEBUG>;

        if $z10 == 0 goto label24;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r18 = virtualinvoke $r17.<android.content.ComponentName: java.lang.String getShortClassName()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unavailable.");

        $r21 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobServiceContext", $r21);

     label24:
        r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob> = null;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobServiceContext$JobCallback mRunningCallback> = null;

        r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams> = null;

        r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed> = 0L;

        r0.<com.android.server.job.JobServiceContext: int mVerb> = 4;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOutLocked()>();

        exitmonitor r1;

     label25:
        return 0;

     label26:
        $r11 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobPackageTracker mJobPackageTracker>;

        virtualinvoke $r11.<com.android.server.job.JobPackageTracker: void noteActive(com.android.server.job.controllers.JobStatus)>(r45);

        $i5 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $r12 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: java.lang.String getBatteryName()>();

        $i6 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getStandbyBucket()>();

        $i7 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z2 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasChargingConstraint()>();

        $z3 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasBatteryNotLowConstraint()>();

        $z4 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasStorageNotLowConstraint()>();

        $z5 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasTimingDelayConstraint()>();

        $z6 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasDeadlineConstraint()>();

        $z7 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasIdleConstraint()>();

        $z8 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        $z9 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: boolean hasContentTriggerConstraint()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write_non_chained(int,int,java.lang.String,java.lang.String,int,int,int,int,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean)>(8, $i5, null, $r12, 1, -1, $i6, $i7, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9);

     label27:
        $r13 = r0.<com.android.server.job.JobServiceContext: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r14 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: java.lang.String getBatteryName()>();

        $i8 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        interfaceinvoke $r13.<com.android.internal.app.IBatteryStats: void noteJobStart(java.lang.String,int)>($r14, $i8);

     label28:
        goto label30;

     label29:
        $r43 := @caughtexception;

     label30:
        r60 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        i0 = virtualinvoke r45.<com.android.server.job.controllers.JobStatus: int getSourceUserId()>();

        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        $r16 = (android.app.usage.UsageStatsManagerInternal) $r15;

        $l9 = r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed>;

        virtualinvoke $r16.<android.app.usage.UsageStatsManagerInternal: void setLastJobRunTime(java.lang.String,int,long)>(r60, i0, $l9);

        r0.<com.android.server.job.JobServiceContext: boolean mAvailable> = 0;

        r0.<com.android.server.job.JobServiceContext: java.lang.String mStoppedReason> = null;

        r0.<com.android.server.job.JobServiceContext: long mStoppedTime> = 0L;

        exitmonitor r1;

     label31:
        return 1;

     label32:
        $r44 := @caughtexception;

     label33:
        exitmonitor r1;

     label34:
        throw $r44;

        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label03 to label04 with label32;
        catch java.lang.Throwable from label04 to label05 with label32;
        catch java.lang.Throwable from label07 to label08 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label15 to label16 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.SecurityException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.Throwable from label20 to label21 with label32;
        catch java.lang.Throwable from label23 to label24 with label32;
        catch java.lang.Throwable from label24 to label25 with label32;
        catch java.lang.Throwable from label26 to label27 with label32;
        catch android.os.RemoteException from label27 to label28 with label29;
        catch java.lang.Throwable from label27 to label28 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
    }

    long getExecutionStartTimeElapsed()
    {
        com.android.server.job.JobServiceContext r0;
        long $l0;

        r0 := @this: com.android.server.job.JobServiceContext;

        $l0 = r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed>;

        return $l0;
    }

    int getPreferredUid()
    {
        com.android.server.job.JobServiceContext r0;
        int $i0;

        r0 := @this: com.android.server.job.JobServiceContext;

        $i0 = r0.<com.android.server.job.JobServiceContext: int mPreferredUid>;

        return $i0;
    }

    com.android.server.job.controllers.JobStatus getRunningJobLocked()
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.controllers.JobStatus $r1;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        return $r1;
    }

    long getTimeoutElapsed()
    {
        com.android.server.job.JobServiceContext r0;
        long $l0;

        r0 := @this: com.android.server.job.JobServiceContext;

        $l0 = r0.<com.android.server.job.JobServiceContext: long mTimeoutElapsed>;

        return $l0;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Object r1, $r6;
        com.android.server.job.controllers.JobStatus r2;
        android.content.ComponentName $r3, r22;
        boolean $z0;
        android.app.job.IJobService $r4;
        android.content.Context $r5;
        java.lang.String $r7, $r17, $r19;
        android.os.WorkSource $r8;
        android.os.PowerManager$WakeLock $r9, $r13, $r16, $r20, r25;
        java.lang.Throwable $r21;
        android.os.IBinder r23;
        android.os.PowerManager r24;
        java.lang.StringBuilder r26;

        r0 := @this: com.android.server.job.JobServiceContext;

        r22 := @parameter0: android.content.ComponentName;

        r23 := @parameter1: android.os.IBinder;

        r1 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

     label02:
        if r2 == null goto label09;

     label03:
        $r3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $z0 = virtualinvoke r22.<android.content.ComponentName: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label05;

     label04:
        goto label09;

     label05:
        $r4 = staticinvoke <android.app.job.IJobService$Stub: android.app.job.IJobService asInterface(android.os.IBinder)>(r23);

        r0.<com.android.server.job.JobServiceContext: android.app.job.IJobService service> = $r4;

        $r5 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r24 = (android.os.PowerManager) $r6;

     label06:
        $r7 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String getTag()>();

        r25 = virtualinvoke r24.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, $r7);

        $r8 = specialinvoke r0.<com.android.server.job.JobServiceContext: android.os.WorkSource deriveWorkSource(com.android.server.job.controllers.JobStatus)>(r2);

        virtualinvoke r25.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r8);

        virtualinvoke r25.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        virtualinvoke r25.<android.os.PowerManager$WakeLock: void acquire()>();

        $r9 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        if $r9 == null goto label07;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bound new job ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but live wakelock ");

        $r13 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tag=");

        $r16 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        $r17 = virtualinvoke $r16.<android.os.PowerManager$WakeLock: java.lang.String getTag()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobServiceContext", $r19);

        $r20 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r20.<android.os.PowerManager$WakeLock: void release()>();

     label07:
        r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock> = r25;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doServiceBoundLocked()>();

        exitmonitor r1;

     label08:
        return;

     label09:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(1, "connected for different component");

        exitmonitor r1;

     label10:
        return;

     label11:
        $r21 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Throwable $r2;
        android.content.ComponentName r3;
        java.lang.Object r4;

        r0 := @this: com.android.server.job.JobServiceContext;

        r3 := @parameter0: android.content.ComponentName;

        r4 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        specialinvoke r0.<com.android.server.job.JobServiceContext: void closeAndCleanupJobLocked(boolean,java.lang.String)>(1, "unexpectedly disconnected");

        exitmonitor r4;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r4;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void preemptExecutingJobLocked()
    {
        com.android.server.job.JobServiceContext r0;

        r0 := @this: com.android.server.job.JobServiceContext;

        virtualinvoke r0.<com.android.server.job.JobServiceContext: void doCancelLocked(int,java.lang.String)>(2, "cancelled due to preemption");

        return;
    }

    boolean timeoutIfExecutingLocked(java.lang.String, int, boolean, int, java.lang.String)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.String r1, r2, $r5;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, $z1;
        com.android.server.job.controllers.JobStatus r3;
        android.app.job.JobParameters $r4;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        r3 = virtualinvoke r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJobLocked()>();

        if r3 == null goto label4;

        if i0 == -1 goto label1;

        $i4 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        if i0 != $i4 goto label4;

     label1:
        if r1 == null goto label2;

        $r5 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label4;

     label2:
        if z0 == 0 goto label3;

        $i3 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        if i1 != $i3 goto label4;

     label3:
        $i2 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i2 != 2 goto label4;

        $r4 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        virtualinvoke $r4.<android.app.job.JobParameters: void setStopReason(int,java.lang.String)>(3, r2);

        specialinvoke r0.<com.android.server.job.JobServiceContext: void sendStopMessageLocked(java.lang.String)>("force timeout from shell");

        return 1;

     label4:
        return 0;
    }
}
