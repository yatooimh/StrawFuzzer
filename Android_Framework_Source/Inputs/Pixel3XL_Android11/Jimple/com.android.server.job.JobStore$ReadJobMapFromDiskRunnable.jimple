final class com.android.server.job.JobStore$ReadJobMapFromDiskRunnable extends java.lang.Object implements java.lang.Runnable
{
    private final com.android.server.job.JobStore$JobSet jobSet;
    private final boolean rtcGood;
    final com.android.server.job.JobStore this$0;

    void <init>(com.android.server.job.JobStore, com.android.server.job.JobStore$JobSet, boolean)
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        com.android.server.job.JobStore r1;
        com.android.server.job.JobStore$JobSet r2;
        boolean z0;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: com.android.server.job.JobStore;

        r2 := @parameter1: com.android.server.job.JobStore$JobSet;

        z0 := @parameter2: boolean;

        r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore$JobSet jobSet> = r2;

        r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: boolean rtcGood> = z0;

        return;
    }

    private android.app.job.JobInfo$Builder buildBuilderFromXml(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.app.job.JobInfo$Builder $r2;
        java.lang.String $r3, $r5, $r6;
        int $i0;
        android.content.ComponentName $r4;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r2 = new android.app.job.JobInfo$Builder;

        $r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "jobid");

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = new android.content.ComponentName;

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        $r6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "class");

        specialinvoke $r4.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        specialinvoke $r2.<android.app.job.JobInfo$Builder: void <init>(int,android.content.ComponentName)>($i0, $r4);

        return $r2;
    }

    private void buildConstraintsFromXml(android.app.job.JobInfo$Builder, org.xmlpull.v1.XmlPullParser)
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        android.app.job.JobInfo$Builder r1;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String r3, r4, r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r31;
        android.net.NetworkRequest r6;
        android.net.NetworkRequest$Builder $r22;
        android.net.NetworkCapabilities $r23, $r25, $r28;
        int[] $r24, $r26, $r27, $r29;
        long $l0, $l1, l2;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: android.app.job.JobInfo$Builder;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "net-capabilities");

        r4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "net-unwanted-capabilities");

        r5 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "net-transport-types");

        if r3 == null goto label03;

        if r5 == null goto label03;

        $r22 = new android.net.NetworkRequest$Builder;

        specialinvoke $r22.<android.net.NetworkRequest$Builder: void <init>()>();

        r6 = virtualinvoke $r22.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        if r4 == null goto label01;

        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

        goto label02;

     label01:
        $r23 = r6.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $r24 = virtualinvoke $r23.<android.net.NetworkCapabilities: int[] getUnwantedCapabilities()>();

        l2 = staticinvoke <com.android.internal.util.BitUtils: long packBits(int[])>($r24);

     label02:
        $r25 = r6.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r3);

        $r26 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>($l0);

        $r27 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>(l2);

        virtualinvoke $r25.<android.net.NetworkCapabilities: void setCapabilities(int[],int[])>($r26, $r27);

        $r28 = r6.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r5);

        $r29 = staticinvoke <com.android.internal.util.BitUtils: int[] unpackBits(long)>($l1);

        virtualinvoke $r28.<android.net.NetworkCapabilities: void setTransportTypes(int[])>($r29);

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetwork(android.net.NetworkRequest)>(r6);

        goto label07;

     label03:
        $r7 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "connectivity");

        if $r7 == null goto label04;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(1);

     label04:
        $r8 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "metered");

        if $r8 == null goto label05;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(4);

     label05:
        $r9 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "unmetered");

        if $r9 == null goto label06;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(2);

     label06:
        $r10 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "not-roaming");

        if $r10 == null goto label07;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiredNetworkType(int)>(3);

     label07:
        $r31 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "idle");

        if $r31 == null goto label08;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresDeviceIdle(boolean)>(1);

     label08:
        $r11 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "charging");

        if $r11 == null goto label09;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresCharging(boolean)>(1);

     label09:
        $r12 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "battery-not-low");

        if $r12 == null goto label10;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresBatteryNotLow(boolean)>(1);

     label10:
        $r13 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "storage-not-low");

        if $r13 == null goto label11;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setRequiresStorageNotLow(boolean)>(1);

     label11:
        return;
    }

    private android.util.Pair buildRtcExecutionTimesFromXml(org.xmlpull.v1.XmlPullParser) throws java.lang.NumberFormatException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        java.lang.String r1, r6;
        java.lang.Long $r2, $r3;
        android.util.Pair $r4;
        org.xmlpull.v1.XmlPullParser r5;
        long l0, l1;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r5 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "delay");

        if r1 == null goto label1;

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        goto label2;

     label1:
        l0 = 0L;

     label2:
        r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "deadline");

        if r6 == null goto label3;

        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r6);

        goto label4;

     label3:
        l1 = 9223372036854775807L;

     label4:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r2, $r3);

        return $r4;
    }

    private void maybeBuildBackoffPolicyFromXml(android.app.job.JobInfo$Builder, org.xmlpull.v1.XmlPullParser)
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        android.app.job.JobInfo$Builder r1;
        org.xmlpull.v1.XmlPullParser r2;
        java.lang.String r3, $r4;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r1 := @parameter0: android.app.job.JobInfo$Builder;

        r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "initial-backoff");

        if r3 == null goto label1;

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r3);

        $r4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "backoff-policy");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setBackoffCriteria(long,int)>($l0, $i1);

     label1:
        return;
    }

    private java.util.List readJobMapImpl(java.io.FileInputStream, boolean) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        boolean z0, $z1, $z2, $z3, $z5;
        org.xmlpull.v1.XmlPullParser r1;
        com.android.server.job.controllers.JobStatus r3;
        int i0, $i1, i8, i9;
        java.nio.charset.Charset $r4;
        java.lang.String $r5, $r6, $r7, $r9, $r10, $r11, $r15, $r18, $r20;
        java.util.ArrayList $r8;
        java.lang.StringBuilder $r12, $r16;
        java.lang.Throwable $r21;
        java.io.FileInputStream r22;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        r22 := @parameter0: java.io.FileInputStream;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r22, $r5);

        i8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label01:
        if i8 == 2 goto label02;

        if i8 == 1 goto label02;

        i8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Start tag: ");

        $r18 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", $r20);

        goto label01;

     label02:
        if i8 != 1 goto label04;

        $z5 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z5 == 0 goto label03;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "No persisted jobs.");

     label03:
        return null;

     label04:
        $r6 = "job-info";

        $r7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label13;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

     label05:
        $r9 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "version");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        if $i1 == 0 goto label07;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Invalid version number, aborting jobs file read.");

     label06:
        return null;

     label07:
        i9 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

     label08:
        if i9 != 2 goto label11;

        $r10 = "job";

        $r11 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label11;

        r3 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.controllers.JobStatus restoreJobFromXml(boolean,org.xmlpull.v1.XmlPullParser)>(z0, r1);

        if r3 == null goto label10;

        $z3 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z3 == 0 goto label09;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read out ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", $r15);

     label09:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label11;

     label10:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading job from file.");

     label11:
        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        i9 = i0;

        if i0 != 1 goto label08;

        return $r8;

     label12:
        $r21 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobStore", "Invalid version number, aborting jobs file read.");

        return null;

     label13:
        return null;

        catch java.lang.NumberFormatException from label05 to label06 with label12;
    }

    private com.android.server.job.controllers.JobStatus restoreJobFromXml(boolean, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        android.app.job.JobInfo$Builder r1;
        int i0, $i19, $i20, i21, i22, i25, i26, i33, i34;
        java.lang.String r2, r3, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15, $r20, $r21, $r22, $r25, $r30, $r37, $r40, $r41, $r42, $r43, $r50, $r51, r61, r62, r63, r64, r65, r66, r68, r70, r71;
        android.util.Pair r4, r67, r80;
        long l1, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l12, $l13, $l14, $l15, $l16, $l17, $l18, l23, l24, l27, l28, l29, l30, l31, l32, l35, l36;
        java.time.Clock $r8;
        java.lang.StringBuilder $r13, $r24, $r49;
        java.lang.Object $r16, $r18, $r26, $r28, $r31, $r35, $r38, $r73, $r76, $r78;
        java.lang.Long $r17, $r19, $r27, $r29, $r32, $r36, $r39, $r44, $r45, $r46, $r77, $r79;
        byte $b2, $b3, $b11;
        com.android.server.job.controllers.JobStatus $r23;
        java.lang.Object[] $r33;
        java.lang.Integer $r34;
        java.lang.Throwable $r47, $r52, $r53, $r54, $r55, $r56, $r57, $r58;
        java.lang.Exception $r48;
        org.xmlpull.v1.XmlPullParser r59;
        android.os.PersistableBundle r69;
        com.android.server.job.JobSchedulerInternal r74;
        android.app.job.JobInfo r75;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        z0 := @parameter0: boolean;

        r59 := @parameter1: org.xmlpull.v1.XmlPullParser;

        i21 = 0;

     label01:
        r1 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: android.app.job.JobInfo$Builder buildBuilderFromXml(org.xmlpull.v1.XmlPullParser)>(r59);

     label02:
        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPersisted(boolean)>(1);

        $r5 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "uid");

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        r61 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "priority");

     label03:
        if r61 == null goto label05;

     label04:
        $i20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r61);

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPriority(int)>($i20);

     label05:
        r62 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "flags");

     label06:
        if r62 == null goto label08;

     label07:
        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r62);

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setFlags(int)>($i19);

     label08:
        r63 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "internalFlags");

     label09:
        if r63 == null goto label11;

     label10:
        i21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r63);

     label11:
        r64 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "sourceUserId");

     label12:
        if r64 != null goto label13;

        i22 = -1;

        goto label14;

     label13:
        i22 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r64);

     label14:
        r65 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lastSuccessfulRunTime");

     label15:
        if r65 != null goto label16;

        l23 = 0L;

        goto label17;

     label16:
        l23 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r65);

     label17:
        r66 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lastFailedRunTime");

     label18:
        if r66 != null goto label19;

        l24 = 0L;

        goto label20;

     label19:
        l24 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r66);

     label20:
        r2 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "sourcePackageName");

        r3 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "sourceTag");

     label21:
        i25 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i25 == 4 goto label72;

        if i25 != 2 goto label71;

        $r6 = "constraints";

        $r7 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label22;

        goto label71;

     label22:
        specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: void buildConstraintsFromXml(android.app.job.JobInfo$Builder,org.xmlpull.v1.XmlPullParser)>(r1, r59);

     label23:
        interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: int next()>();

     label24:
        i26 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i26 == 4 goto label69;

        if i26 == 2 goto label25;

        return null;

     label25:
        r4 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: android.util.Pair buildRtcExecutionTimesFromXml(org.xmlpull.v1.XmlPullParser)>(r59);

     label26:
        $r8 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l1 = virtualinvoke $r8.<java.time.Clock: long millis()>();

        r67 = staticinvoke <com.android.server.job.JobStore: android.util.Pair access$600(android.util.Pair,long)>(r4, l1);

        $r9 = "periodic";

        $r10 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label42;

     label27:
        $r30 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "period");

        l27 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r30);

        r68 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "flex");

     label28:
        if r68 == null goto label32;

     label29:
        $r46 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r68);

        l28 = virtualinvoke $r46.<java.lang.Long: long longValue()>();

     label30:
        goto label33;

     label31:
        $r47 := @caughtexception;

        goto label41;

     label32:
        l28 = l27;

     label33:
        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setPeriodic(long,long)>(l27, l28);

        $r31 = r67.<android.util.Pair: java.lang.Object second>;

        $r32 = (java.lang.Long) $r31;

        $l8 = virtualinvoke $r32.<java.lang.Long: long longValue()>();

        $l9 = l1 + l27;

        $l10 = $l9 + l28;

        $b11 = $l8 cmp $l10;

        if $b11 <= 0 goto label38;

     label34:
        $l12 = l1 + l28;

        l29 = $l12 + l27;

        l30 = l29 - l28;

     label35:
        $r33 = newarray (java.lang.Object)[5];

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r33[0] = $r34;

        $r35 = r67.<android.util.Pair: java.lang.Object first>;

        $r36 = (java.lang.Long) $r35;

        $l13 = virtualinvoke $r36.<java.lang.Long: long longValue()>();

        $l14 = $l13 / 1000L;

        $r37 = staticinvoke <android.text.format.DateUtils: java.lang.String formatElapsedTime(long)>($l14);

        $r33[1] = $r37;

        $r38 = r67.<android.util.Pair: java.lang.Object second>;

        $r39 = (java.lang.Long) $r38;

        $l15 = virtualinvoke $r39.<java.lang.Long: long longValue()>();

        $l16 = $l15 / 1000L;

        $r40 = staticinvoke <android.text.format.DateUtils: java.lang.String formatElapsedTime(long)>($l16);

        $r33[2] = $r40;

        $l17 = l30 / 1000L;

        $r41 = staticinvoke <android.text.format.DateUtils: java.lang.String formatElapsedTime(long)>($l17);

        $r33[3] = $r41;

        $l18 = l29 / 1000L;

        $r42 = staticinvoke <android.text.format.DateUtils: java.lang.String formatElapsedTime(long)>($l18);

        $r33[4] = $r42;

        $r43 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Periodic job for uid=\'%d\' persisted run-time is too big [%s, %s]. Clamping to [%s,%s]", $r33);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobStore", $r43);

     label36:
        $r44 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l30);

        $r45 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l29);

        r67 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r44, $r45);

     label37:
        goto label38;

     label38:
        goto label51;

     label39:
        $r55 := @caughtexception;

        goto label41;

     label40:
        $r57 := @caughtexception;

     label41:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading periodic execution criteria, skipping.");

        return null;

     label42:
        $r11 = "one-off";

        $r12 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label65;

     label43:
        $r16 = r67.<android.util.Pair: java.lang.Object first>;

        $r17 = (java.lang.Long) $r16;

        l31 = virtualinvoke $r17.<java.lang.Long: long longValue()>();

     label44:
        $b2 = l31 cmp 0L;

        if $b2 == 0 goto label48;

     label45:
        $r28 = r67.<android.util.Pair: java.lang.Object first>;

        $r29 = (java.lang.Long) $r28;

        $l6 = virtualinvoke $r29.<java.lang.Long: long longValue()>();

        $l7 = $l6 - l1;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setMinimumLatency(long)>($l7);

     label46:
        goto label48;

     label47:
        $r58 := @caughtexception;

        goto label64;

     label48:
        $r18 = r67.<android.util.Pair: java.lang.Object second>;

        $r19 = (java.lang.Long) $r18;

        l32 = virtualinvoke $r19.<java.lang.Long: long longValue()>();

     label49:
        $b3 = l32 cmp 9223372036854775807L;

        if $b3 == 0 goto label51;

     label50:
        $r26 = r67.<android.util.Pair: java.lang.Object second>;

        $r27 = (java.lang.Long) $r26;

        $l4 = virtualinvoke $r27.<java.lang.Long: long longValue()>();

        $l5 = $l4 - l1;

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setOverrideDeadline(long)>($l5);

     label51:
        specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: void maybeBuildBackoffPolicyFromXml(android.app.job.JobInfo$Builder,org.xmlpull.v1.XmlPullParser)>(r1, r59);

        interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label52:
        i33 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i33 == 4 goto label62;

        if i33 != 2 goto label60;

        $r20 = "extras";

        $r21 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z6 != 0 goto label53;

        goto label60;

     label53:
        r69 = staticinvoke <android.os.PersistableBundle: android.os.PersistableBundle restoreFromXml(org.xmlpull.v1.XmlPullParser)>(r59);

        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo$Builder setExtras(android.os.PersistableBundle)>(r69);

        interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label54:
        virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

     label55:
        r70 = r2;

        $r22 = "android";

        $z7 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label56;

        r70 = r2;

        if r69 == null goto label56;

        r70 = r2;

        $z8 = virtualinvoke r69.<android.os.PersistableBundle: boolean getBoolean(java.lang.String,boolean)>("SyncManagerJob", 0);

        if $z8 == 0 goto label56;

        r71 = virtualinvoke r69.<android.os.PersistableBundle: java.lang.String getString(java.lang.String,java.lang.String)>("owningPackage", r2);

        r70 = r71;

        $z9 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z9 == 0 goto label56;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixing up sync job source package name from \'android\' to \'");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r71);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobStore", $r25);

        r70 = r71;

     label56:
        $r73 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/job/JobSchedulerInternal;");

        r74 = (com.android.server.job.JobSchedulerInternal) $r73;

        i34 = staticinvoke <com.android.server.job.JobSchedulerService: int standbyBucketForPackage(java.lang.String,int,long)>(r70, i22, l1);

        r75 = virtualinvoke r1.<android.app.job.JobInfo$Builder: android.app.job.JobInfo build()>();

        $r76 = r67.<android.util.Pair: java.lang.Object first>;

        $r77 = (java.lang.Long) $r76;

        l35 = virtualinvoke $r77.<java.lang.Long: long longValue()>();

        $r78 = r67.<android.util.Pair: java.lang.Object second>;

        $r79 = (java.lang.Long) $r78;

        l36 = virtualinvoke $r79.<java.lang.Long: long longValue()>();

        if z0 == 0 goto label57;

        r80 = null;

        goto label58;

     label57:
        r80 = r4;

     label58:
        $r23 = new com.android.server.job.controllers.JobStatus;

        specialinvoke $r23.<com.android.server.job.controllers.JobStatus: void <init>(android.app.job.JobInfo,int,java.lang.String,int,int,java.lang.String,long,long,long,long,android.util.Pair,int)>(r75, i0, r70, i22, i34, r3, l35, l36, l23, l24, r80, i21);

        return $r23;

     label59:
        $r48 := @caughtexception;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to build job from XML, ignoring: ");

        $r50 = virtualinvoke r1.<android.app.job.JobInfo$Builder: java.lang.String summarize()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobStore", $r51);

        return null;

     label60:
        $z5 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z5 == 0 goto label61;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading extras, skipping.");

     label61:
        return null;

     label62:
        goto label52;

     label63:
        $r56 := @caughtexception;

     label64:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading job execution criteria, skipping.");

        return null;

     label65:
        $z4 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z4 == 0 goto label66;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid parameter tag, skipping - ");

        $r14 = interfaceinvoke r59.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", $r15);

     label66:
        return null;

     label67:
        $r54 := @caughtexception;

        $z10 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z10 == 0 goto label68;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error parsing execution time parameters, skipping.");

     label68:
        return null;

     label69:
        goto label24;

     label70:
        $r52 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Error reading constraints, skipping.");

        return null;

     label71:
        return null;

     label72:
        goto label21;

     label73:
        $r53 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobStore", "Error parsing job\'s required fields, skipping");

        return null;

        catch java.lang.NumberFormatException from label01 to label02 with label73;
        catch java.lang.NumberFormatException from label02 to label03 with label73;
        catch java.lang.NumberFormatException from label04 to label05 with label73;
        catch java.lang.NumberFormatException from label05 to label06 with label73;
        catch java.lang.NumberFormatException from label07 to label08 with label73;
        catch java.lang.NumberFormatException from label08 to label09 with label73;
        catch java.lang.NumberFormatException from label10 to label11 with label73;
        catch java.lang.NumberFormatException from label11 to label12 with label73;
        catch java.lang.NumberFormatException from label13 to label14 with label73;
        catch java.lang.NumberFormatException from label14 to label15 with label73;
        catch java.lang.NumberFormatException from label16 to label17 with label73;
        catch java.lang.NumberFormatException from label17 to label18 with label73;
        catch java.lang.NumberFormatException from label19 to label20 with label73;
        catch java.lang.NumberFormatException from label22 to label23 with label70;
        catch java.lang.NumberFormatException from label25 to label26 with label67;
        catch java.lang.NumberFormatException from label27 to label28 with label40;
        catch java.lang.NumberFormatException from label29 to label30 with label31;
        catch java.lang.NumberFormatException from label33 to label34 with label39;
        catch java.lang.NumberFormatException from label35 to label36 with label39;
        catch java.lang.NumberFormatException from label36 to label37 with label39;
        catch java.lang.NumberFormatException from label43 to label44 with label63;
        catch java.lang.NumberFormatException from label45 to label46 with label47;
        catch java.lang.NumberFormatException from label48 to label49 with label63;
        catch java.lang.NumberFormatException from label50 to label51 with label47;
        catch java.lang.Exception from label54 to label55 with label59;
    }

    public void run()
    {
        com.android.server.job.JobStore$ReadJobMapFromDiskRunnable r0;
        java.io.FileInputStream r1;
        java.util.List r2;
        long l15;
        com.android.server.job.JobStore $r3, $r5, $r6, $r16, $r18, $r20, $r22, $r25, $r28, $r32, $r34, $r36;
        android.util.AtomicFile $r4;
        boolean $z0, $z2, $z3;
        com.android.server.job.JobSchedulerInternal$JobStorePersistStats $r7, $r17, $r19, $r21, $r23, $r26, $r29, $r33, $r35, $r37;
        int $i16, $i18, $i19, $i20, $i21, $i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44;
        java.time.Clock $r11;
        java.lang.Object $r12, r30;
        com.android.server.job.JobStore$JobSet $r13;
        java.lang.Throwable $r14, $r15, $r24, $r27;
        com.android.server.job.controllers.JobStatus r31;
        java.lang.StringBuilder $r42;
        java.lang.String $r44;

        r0 := @this: com.android.server.job.JobStore$ReadJobMapFromDiskRunnable;

        i25 = 0;

        i26 = 0;

        i27 = 0;

        i28 = 0;

        i29 = 0;

        i30 = 0;

        i31 = 0;

        i32 = 0;

        i33 = 0;

        i34 = 0;

        i35 = 0;

        i36 = 0;

     label01:
        $r3 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r4 = staticinvoke <com.android.server.job.JobStore: android.util.AtomicFile access$400(com.android.server.job.JobStore)>($r3);

        r1 = virtualinvoke $r4.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        i28 = 0;

        i29 = 0;

        i30 = 0;

        i31 = 0;

        i32 = 0;

        i33 = 0;

        i34 = 0;

        i35 = 0;

        i36 = 0;

     label03:
        $r5 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        r30 = $r5.<com.android.server.job.JobStore: java.lang.Object mLock>;

     label04:
        i28 = 0;

        i29 = 0;

        i30 = 0;

        i31 = 0;

        i32 = 0;

        i33 = 0;

        i34 = 0;

        i35 = 0;

        i36 = 0;

     label05:
        entermonitor r30;

     label06:
        i34 = 0;

        i35 = 0;

        i36 = 0;

     label07:
        $z0 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: boolean rtcGood>;

        r2 = specialinvoke r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: java.util.List readJobMapImpl(java.io.FileInputStream,boolean)>(r1, $z0);

     label08:
        if r2 == null goto label27;

        i34 = 0;

        i35 = 0;

        i36 = 0;

     label09:
        $r11 = <com.android.server.job.JobSchedulerService: java.time.Clock sElapsedRealtimeClock>;

        l15 = virtualinvoke $r11.<java.time.Clock: long millis()>();

     label10:
        i37 = 0;

        i38 = 0;

        i39 = 0;

        i40 = 0;

     label11:
        i25 = i40;

        i26 = i39;

        i27 = i38;

        i34 = i40;

        i35 = i39;

        i36 = i38;

     label12:
        $i18 = interfaceinvoke r2.<java.util.List: int size()>();

        if i37 >= $i18 goto label27;

     label13:
        i34 = i40;

        i35 = i39;

        i36 = i38;

     label14:
        $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i37);

        r31 = (com.android.server.job.controllers.JobStatus) $r12;

     label15:
        i34 = i40;

        i35 = i39;

        i36 = i38;

     label16:
        virtualinvoke r31.<com.android.server.job.controllers.JobStatus: void prepareLocked()>();

     label17:
        i34 = i40;

        i35 = i39;

        i36 = i38;

     label18:
        r31.<com.android.server.job.controllers.JobStatus: long enqueueTime> = l15;

     label19:
        i34 = i40;

        i35 = i39;

        i36 = i38;

     label20:
        $r13 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore$JobSet jobSet>;

        virtualinvoke $r13.<com.android.server.job.JobStore$JobSet: boolean add(com.android.server.job.controllers.JobStatus)>(r31);

     label21:
        i40 = i40 + 1;

        i41 = i39;

        i42 = i38;

        i34 = i40;

        i35 = i39;

        i36 = i38;

     label22:
        $i19 = virtualinvoke r31.<com.android.server.job.controllers.JobStatus: int getUid()>();

        if $i19 != 1000 goto label26;

     label23:
        i43 = i39 + 1;

        i41 = i43;

        i42 = i38;

        i34 = i40;

        i35 = i43;

        i36 = i38;

     label24:
        $z2 = staticinvoke <com.android.server.job.JobStore: boolean access$300(com.android.server.job.controllers.JobStatus)>(r31);

        if $z2 == 0 goto label26;

     label25:
        i42 = i38 + 1;

        i41 = i43;

     label26:
        i37 = i37 + 1;

        i39 = i41;

        i38 = i42;

        goto label11;

     label27:
        i34 = i25;

        i35 = i26;

        i36 = i27;

     label28:
        exitmonitor r30;

     label29:
        i28 = i25;

        i29 = i26;

        i30 = i27;

        i31 = i25;

        i32 = i26;

        i33 = i27;

        i34 = i25;

        i35 = i26;

        i36 = i27;

     label30:
        virtualinvoke r1.<java.io.FileInputStream: void close()>();

     label31:
        i44 = i25;

        $r6 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r7 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r6);

        $i16 = $r7.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countAllJobsLoaded>;

        if $i16 >= 0 goto label46;

        i35 = i26;

     label32:
        $r32 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r33 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r32);

        $r33.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countAllJobsLoaded> = i25;

        $r34 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r35 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r34);

        $r35.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countSystemServerJobsLoaded> = i35;

        $r36 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r37 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r36);

        $r37.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countSystemSyncManagerJobsLoaded> = i27;

        i44 = i25;

        goto label46;

     label33:
        $r14 := @caughtexception;

     label34:
        exitmonitor r30;

     label35:
        i28 = i34;

        i29 = i35;

        i30 = i36;

        i31 = i34;

        i32 = i35;

        i33 = i36;

     label36:
        throw $r14;

     label37:
        $r15 := @caughtexception;

        goto label47;

     label38:
        $r27 := @caughtexception;

        i28 = i31;

        i29 = i32;

        i30 = i33;

     label39:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("JobStore", "Error jobstore xml.", $r27);

     label40:
        i44 = i31;

        $r28 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r29 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r28);

        $i24 = $r29.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countAllJobsLoaded>;

        if $i24 >= 0 goto label46;

        i25 = i31;

        i35 = i32;

        i27 = i33;

        goto label32;

     label41:
        $r24 := @caughtexception;

        i28 = i34;

        i29 = i35;

        i30 = i36;

     label42:
        $z3 = staticinvoke <com.android.server.job.JobStore: boolean access$100()>();

        if $z3 == 0 goto label45;

     label43:
        i28 = i34;

        i29 = i35;

        i30 = i36;

     label44:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobStore", "Could not find jobs file, probably there was nothing to load.");

     label45:
        i44 = i34;

        $r25 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r26 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r25);

        $i21 = $r26.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countAllJobsLoaded>;

        if $i21 >= 0 goto label46;

        i25 = i34;

        i27 = i36;

        goto label32;

     label46:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read ");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i44);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" jobs");

        $r44 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobStore", $r44);

        return;

     label47:
        $r16 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r17 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r16);

        $i20 = $r17.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countAllJobsLoaded>;

        if $i20 >= 0 goto label48;

        $r18 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r19 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r18);

        $r19.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countAllJobsLoaded> = i28;

        $r20 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r21 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r20);

        $r21.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countSystemServerJobsLoaded> = i29;

        $r22 = r0.<com.android.server.job.JobStore$ReadJobMapFromDiskRunnable: com.android.server.job.JobStore this$0>;

        $r23 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobSchedulerInternal$JobStorePersistStats access$500(com.android.server.job.JobStore)>($r22);

        $r23.<com.android.server.job.JobSchedulerInternal$JobStorePersistStats: int countSystemSyncManagerJobsLoaded> = i30;

     label48:
        throw $r15;

        catch java.io.FileNotFoundException from label01 to label02 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label38;
        catch java.io.IOException from label01 to label02 with label38;
        catch java.lang.Throwable from label01 to label02 with label37;
        catch java.io.FileNotFoundException from label03 to label04 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label38;
        catch java.io.IOException from label03 to label04 with label38;
        catch java.lang.Throwable from label03 to label04 with label37;
        catch java.io.FileNotFoundException from label05 to label06 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label38;
        catch java.io.IOException from label05 to label06 with label38;
        catch java.lang.Throwable from label05 to label06 with label37;
        catch java.lang.Throwable from label07 to label08 with label33;
        catch java.lang.Throwable from label09 to label10 with label33;
        catch java.lang.Throwable from label12 to label13 with label33;
        catch java.lang.Throwable from label14 to label15 with label33;
        catch java.lang.Throwable from label16 to label17 with label33;
        catch java.lang.Throwable from label18 to label19 with label33;
        catch java.lang.Throwable from label20 to label21 with label33;
        catch java.lang.Throwable from label22 to label23 with label33;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.io.FileNotFoundException from label30 to label31 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label30 to label31 with label38;
        catch java.io.IOException from label30 to label31 with label38;
        catch java.lang.Throwable from label30 to label31 with label37;
        catch java.lang.Throwable from label34 to label35 with label33;
        catch java.io.FileNotFoundException from label36 to label37 with label41;
        catch org.xmlpull.v1.XmlPullParserException from label36 to label37 with label38;
        catch java.io.IOException from label36 to label37 with label38;
        catch java.lang.Throwable from label36 to label37 with label37;
        catch java.lang.Throwable from label39 to label40 with label37;
        catch java.lang.Throwable from label42 to label43 with label37;
        catch java.lang.Throwable from label44 to label45 with label37;
    }
}
