public final class com.android.server.job.controllers.BackgroundJobsController extends com.android.server.job.controllers.StateController
{
    private static final boolean DEBUG;
    static final int KNOWN_ACTIVE;
    static final int KNOWN_INACTIVE;
    private static final java.lang.String TAG;
    static final int UNKNOWN;
    private final com.android.server.AppStateTracker mAppStateTracker;
    private final com.android.server.AppStateTracker$Listener mForceAppStandbyListener;

    static void <clinit>()
    {
        boolean $z0, $z1, z2;

        <com.android.server.job.controllers.BackgroundJobsController: int UNKNOWN> = 0;

        <com.android.server.job.controllers.BackgroundJobsController: java.lang.String TAG> = "JobScheduler.Background";

        <com.android.server.job.controllers.BackgroundJobsController: int KNOWN_INACTIVE> = 2;

        <com.android.server.job.controllers.BackgroundJobsController: int KNOWN_ACTIVE> = 1;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobScheduler.Background", 3);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        <com.android.server.job.controllers.BackgroundJobsController: boolean DEBUG> = z2;

        return;
    }

    public void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        com.android.server.job.controllers.BackgroundJobsController$1 $r1;
        java.lang.Object $r2;
        com.android.server.AppStateTracker$Listener $r4;
        com.android.server.job.JobSchedulerService r5;
        com.android.server.AppStateTracker r6, r7;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r5 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<com.android.server.job.controllers.StateController: void <init>(com.android.server.job.JobSchedulerService)>(r5);

        $r1 = new com.android.server.job.controllers.BackgroundJobsController$1;

        specialinvoke $r1.<com.android.server.job.controllers.BackgroundJobsController$1: void <init>(com.android.server.job.controllers.BackgroundJobsController)>(r0);

        r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker$Listener mForceAppStandbyListener> = $r1;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/AppStateTracker;");

        r6 = (com.android.server.AppStateTracker) $r2;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        r7 = (com.android.server.AppStateTracker) r6;

        r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker> = r7;

        $r4 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker$Listener mForceAppStandbyListener>;

        virtualinvoke r7.<com.android.server.AppStateTracker: void addListener(com.android.server.AppStateTracker$Listener)>($r4);

        return;
    }

    static void access$000(com.android.server.job.controllers.BackgroundJobsController)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;

        r0 := @parameter0: com.android.server.job.controllers.BackgroundJobsController;

        specialinvoke r0.<com.android.server.job.controllers.BackgroundJobsController: void updateAllJobRestrictionsLocked()>();

        return;
    }

    static void access$100(com.android.server.job.controllers.BackgroundJobsController, int, boolean)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.job.controllers.BackgroundJobsController;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.job.controllers.BackgroundJobsController: void updateJobRestrictionsForUidLocked(int,boolean)>(i0, z0);

        return;
    }

    private void updateAllJobRestrictionsLocked()
    {
        com.android.server.job.controllers.BackgroundJobsController r0;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        specialinvoke r0.<com.android.server.job.controllers.BackgroundJobsController: void updateJobRestrictionsLocked(int,int)>(-1, 0);

        return;
    }

    private void updateJobRestrictionsForUidLocked(int, boolean)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        int i0;
        boolean z0;
        byte b1;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        b1 = 1;

        goto label2;

     label1:
        b1 = 2;

     label2:
        specialinvoke r0.<com.android.server.job.controllers.BackgroundJobsController: void updateJobRestrictionsLocked(int,int)>(i0, b1);

        return;
    }

    private void updateJobRestrictionsLocked(int, int)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        int i0, i1, $i2, $i3;
        boolean z0, $z1, $z2, $z3;
        com.android.server.job.JobStore r2;
        com.android.server.job.controllers.BackgroundJobsController$UpdateJobFunctor $r3;
        com.android.server.job.JobSchedulerService $r4;
        com.android.server.job.StateChangedListener $r5;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8;
        long $l4, $l6, l7, l8;
        java.lang.Long $r9;
        java.lang.String $r10;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = new com.android.server.job.controllers.BackgroundJobsController$UpdateJobFunctor;

        specialinvoke $r3.<com.android.server.job.controllers.BackgroundJobsController$UpdateJobFunctor: void <init>(com.android.server.job.controllers.BackgroundJobsController,int)>(r0, i1);

        z0 = <com.android.server.job.controllers.BackgroundJobsController: boolean DEBUG>;

        l7 = 0L;

        if z0 == 0 goto label1;

        l8 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        goto label2;

     label1:
        l8 = 0L;

     label2:
        $r4 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.job.JobSchedulerService mService>;

        r2 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        if i0 <= 0 goto label3;

        virtualinvoke r2.<com.android.server.job.JobStore: void forEachJobForSourceUid(int,java.util.function.Consumer)>(i0, $r3);

        goto label4;

     label3:
        virtualinvoke r2.<com.android.server.job.JobStore: void forEachJob(java.util.function.Consumer)>($r3);

     label4:
        $z1 = <com.android.server.job.controllers.BackgroundJobsController: boolean DEBUG>;

        if $z1 == 0 goto label5;

        $l6 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        l7 = $l6 - l8;

     label5:
        $z2 = <com.android.server.job.controllers.BackgroundJobsController: boolean DEBUG>;

        if $z2 == 0 goto label6;

        $r6 = newarray (java.lang.Object)[3];

        $i2 = $r3.<com.android.server.job.controllers.BackgroundJobsController$UpdateJobFunctor: int mCheckedCount>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r6[0] = $r7;

        $i3 = $r3.<com.android.server.job.controllers.BackgroundJobsController$UpdateJobFunctor: int mTotalCount>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r6[1] = $r8;

        $l4 = l7 / 1000L;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Job status updated: %d/%d checked/total jobs, %d us", $r6);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler.Background", $r10);

     label6:
        $z3 = $r3.<com.android.server.job.controllers.BackgroundJobsController$UpdateJobFunctor: boolean mChanged>;

        if $z3 == 0 goto label7;

        $r5 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.job.StateChangedListener mStateChangedListener>;

        interfaceinvoke $r5.<com.android.server.job.StateChangedListener: void onControllerStateChanged()>();

     label7:
        return;
    }

    public void dumpControllerStateLocked(android.util.proto.ProtoOutputStream, long, java.util.function.Predicate)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        android.util.proto.ProtoOutputStream r1;
        java.util.function.Predicate r2;
        long l0, l1, l2;
        com.android.server.AppStateTracker $r3;
        com.android.server.job.JobSchedulerService $r4;
        com.android.server.job.JobStore $r5;
        com.android.server.job.controllers._$$Lambda$BackgroundJobsController$ypgNv91qX_67RP8z3Z9CsC0SRRs $r6;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        r2 := @parameter2: java.util.function.Predicate;

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        l0 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268033L);

        $r3 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        virtualinvoke $r3.<com.android.server.AppStateTracker: void dumpProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268033L);

        $r4 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.job.JobSchedulerService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r6 = new com.android.server.job.controllers._$$Lambda$BackgroundJobsController$ypgNv91qX_67RP8z3Z9CsC0SRRs;

        specialinvoke $r6.<com.android.server.job.controllers._$$Lambda$BackgroundJobsController$ypgNv91qX_67RP8z3Z9CsC0SRRs: void <init>(com.android.server.job.controllers.BackgroundJobsController,android.util.proto.ProtoOutputStream)>(r0, r1);

        virtualinvoke $r5.<com.android.server.job.JobStore: void forEachJob(java.util.function.Predicate,java.util.function.Consumer)>(r2, $r6);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;
    }

    public void dumpControllerStateLocked(com.android.internal.util.IndentingPrintWriter, java.util.function.Predicate)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.function.Predicate r2;
        com.android.server.AppStateTracker $r3;
        com.android.server.job.JobSchedulerService $r4;
        com.android.server.job.JobStore $r5;
        com.android.server.job.controllers._$$Lambda$BackgroundJobsController$5YoufKSiImueGHv9obiMns19gXE $r6;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: java.util.function.Predicate;

        $r3 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        virtualinvoke $r3.<com.android.server.AppStateTracker: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r4 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.job.JobSchedulerService mService>;

        $r5 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r6 = new com.android.server.job.controllers._$$Lambda$BackgroundJobsController$5YoufKSiImueGHv9obiMns19gXE;

        specialinvoke $r6.<com.android.server.job.controllers._$$Lambda$BackgroundJobsController$5YoufKSiImueGHv9obiMns19gXE: void <init>(com.android.server.job.controllers.BackgroundJobsController,com.android.internal.util.IndentingPrintWriter)>(r0, r1);

        virtualinvoke $r5.<com.android.server.job.JobStore: void forEachJob(java.util.function.Predicate,java.util.function.Consumer)>(r2, $r6);

        return;
    }

    public void lambda$dumpControllerStateLocked$0$BackgroundJobsController(com.android.internal.util.IndentingPrintWriter, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        com.android.internal.util.IndentingPrintWriter r1;
        com.android.server.job.controllers.JobStatus r2;
        int i0, $i1, $i2;
        java.lang.String r3, r7, r9;
        com.android.server.AppStateTracker $r4, $r5, $r6, $r8;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        i0 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        r3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("#");

        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void printUniqueId(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" from ");

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r1, i0);

        $r4 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z0 = virtualinvoke $r4.<com.android.server.AppStateTracker: boolean isUidActive(int)>(i0);

        if $z0 == 0 goto label1;

        r7 = " active";

        goto label2;

     label1:
        r7 = " idle";

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r7);

        $r5 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z1 = virtualinvoke $r5.<com.android.server.AppStateTracker: boolean isUidPowerSaveWhitelisted(int)>(i0);

        if $z1 != 0 goto label3;

        $r6 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z2 = virtualinvoke $r6.<com.android.server.AppStateTracker: boolean isUidTempPowerSaveWhitelisted(int)>(i0);

        if $z2 == 0 goto label4;

     label3:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(", whitelisted");

     label4:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" [RUN_ANY_IN_BACKGROUND ");

        $r8 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z3 = virtualinvoke $r8.<com.android.server.AppStateTracker: boolean isRunAnyInBackgroundAppOpsAllowed(int,java.lang.String)>(i0, r3);

        if $z3 == 0 goto label5;

        r9 = "allowed]";

        goto label6;

     label5:
        r9 = "disallowed]";

     label6:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r9);

        $i1 = r2.<com.android.server.job.controllers.JobStatus: int satisfiedConstraints>;

        $i2 = $i1 & 4194304;

        if $i2 == 0 goto label7;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" RUNNABLE");

        goto label8;

     label7:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(" WAITING");

     label8:
        return;
    }

    public void lambda$dumpControllerStateLocked$1$BackgroundJobsController(android.util.proto.ProtoOutputStream, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        android.util.proto.ProtoOutputStream r1;
        com.android.server.job.controllers.JobStatus r2;
        long l0;
        int i1, $i2, $i3;
        java.lang.String r3;
        com.android.server.AppStateTracker $r4, $r5, $r6, $r7;
        boolean $z1, $z2, z3, z4, $z5, z6;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        l0 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895810L);

        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void writeToShortProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268033L);

        i1 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, i1);

        r3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, r3);

        $r4 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z1 = virtualinvoke $r4.<com.android.server.AppStateTracker: boolean isUidActive(int)>(i1);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z1);

        $r5 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        z3 = virtualinvoke $r5.<com.android.server.AppStateTracker: boolean isUidPowerSaveWhitelisted(int)>(i1);

        if z3 != 0 goto label2;

        $r6 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z2 = virtualinvoke $r6.<com.android.server.AppStateTracker: boolean isUidTempPowerSaveWhitelisted(int)>(i1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z4 = 0;

        goto label3;

     label2:
        z4 = 1;

     label3:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, z4);

        $r7 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        $z5 = virtualinvoke $r7.<com.android.server.AppStateTracker: boolean isRunAnyInBackgroundAppOpsAllowed(int,java.lang.String)>(i1, r3);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z5);

        z6 = 0;

        $i2 = r2.<com.android.server.job.controllers.JobStatus: int satisfiedConstraints>;

        $i3 = $i2 & 4194304;

        if $i3 == 0 goto label4;

        z6 = 1;

     label4:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366151L, z6);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        return;
    }

    public void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        com.android.server.job.controllers.JobStatus r1, r2;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        virtualinvoke r0.<com.android.server.job.controllers.BackgroundJobsController: boolean updateSingleJobRestrictionLocked(com.android.server.job.controllers.JobStatus,int)>(r1, 0);

        return;
    }

    public void maybeStopTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus, boolean)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        boolean z0;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        z0 := @parameter2: boolean;

        return;
    }

    boolean updateSingleJobRestrictionLocked(com.android.server.job.controllers.JobStatus, int)
    {
        com.android.server.job.controllers.BackgroundJobsController r0;
        com.android.server.job.controllers.JobStatus r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r2, $r7;
        boolean z1, z2, z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r3;
        com.android.server.AppStateTracker $r8, r9;

        r0 := @this: com.android.server.job.controllers.BackgroundJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        r2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        r9 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getInternalFlags()>();

        $i3 = i2 & 1;

        if $i3 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        z1 = virtualinvoke r9.<com.android.server.AppStateTracker: boolean areJobsRestricted(int,java.lang.String,boolean)>(i1, r2, z2);

        if i0 != 0 goto label3;

        $r8 = r0.<com.android.server.job.controllers.BackgroundJobsController: com.android.server.AppStateTracker mAppStateTracker>;

        z3 = virtualinvoke $r8.<com.android.server.AppStateTracker: boolean isUidActive(int)>(i1);

        goto label5;

     label3:
        if i0 != 1 goto label4;

        z3 = 1;

        goto label5;

     label4:
        z3 = 0;

     label5:
        if z3 == 0 goto label6;

        $i4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getStandbyBucket()>();

        if $i4 != 4 goto label6;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("App ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" became active but still in NEVER bucket");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler.Background", $r7);

     label6:
        $z4 = z1 ^ 1;

        $z5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean setBackgroundNotRestrictedConstraintSatisfied(boolean)>($z4);

        $z6 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean setUidActive(boolean)>(z3);

        $z7 = $z5 | $z6;

        return $z7;
    }
}
