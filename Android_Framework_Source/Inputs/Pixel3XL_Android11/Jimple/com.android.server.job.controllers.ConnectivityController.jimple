public final class com.android.server.job.controllers.ConnectivityController extends com.android.server.job.controllers.RestrictingController implements android.net.ConnectivityManager$OnNetworkActiveListener
{
    private static final boolean DEBUG;
    private static final int MSG_DATA_SAVER_TOGGLED;
    private static final int MSG_REEVALUATE_JOBS;
    private static final int MSG_UID_RULES_CHANGES;
    private static final java.lang.String TAG;
    private final android.util.ArraySet mAvailableNetworks;
    private final android.net.ConnectivityManager mConnManager;
    private final android.os.Handler mHandler;
    private final android.net.INetworkPolicyListener mNetPolicyListener;
    private final android.net.NetworkPolicyManager mNetPolicyManager;
    private final com.android.server.net.NetworkPolicyManagerInternal mNetPolicyManagerInternal;
    private final android.net.ConnectivityManager$NetworkCallback mNetworkCallback;
    private final android.util.SparseArray mRequestedWhitelistJobs;
    private final android.util.SparseArray mTrackedJobs;

    static void <clinit>()
    {
        boolean $z0, $z1, z2;

        <com.android.server.job.controllers.ConnectivityController: java.lang.String TAG> = "JobScheduler.Connectivity";

        <com.android.server.job.controllers.ConnectivityController: int MSG_UID_RULES_CHANGES> = 1;

        <com.android.server.job.controllers.ConnectivityController: int MSG_REEVALUATE_JOBS> = 2;

        <com.android.server.job.controllers.ConnectivityController: int MSG_DATA_SAVER_TOGGLED> = 0;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobScheduler.Connectivity", 3);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        <com.android.server.job.controllers.ConnectivityController: boolean DEBUG> = z2;

        return;
    }

    public void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.util.SparseArray $r1, $r2;
        android.util.ArraySet $r3;
        com.android.server.job.controllers.ConnectivityController$1 $r4;
        com.android.server.job.controllers.ConnectivityController$2 $r5;
        com.android.server.job.controllers.ConnectivityController$CcHandler $r6;
        android.content.Context $r7, $r9, $r12;
        android.os.Looper $r8;
        java.lang.Object $r10, $r13, $r15;
        android.net.ConnectivityManager $r11, $r20;
        android.net.NetworkPolicyManager $r14, $r22;
        com.android.server.net.NetworkPolicyManagerInternal $r16;
        android.net.NetworkRequest$Builder $r17, $r18;
        android.net.ConnectivityManager$NetworkCallback $r19;
        android.net.INetworkPolicyListener $r21;
        com.android.server.job.JobSchedulerService r23;
        android.net.NetworkRequest r24;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r23 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<com.android.server.job.controllers.RestrictingController: void <init>(com.android.server.job.JobSchedulerService)>(r23);

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks> = $r3;

        $r4 = new com.android.server.job.controllers.ConnectivityController$1;

        specialinvoke $r4.<com.android.server.job.controllers.ConnectivityController$1: void <init>(com.android.server.job.controllers.ConnectivityController)>(r0);

        r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager$NetworkCallback mNetworkCallback> = $r4;

        $r5 = new com.android.server.job.controllers.ConnectivityController$2;

        specialinvoke $r5.<com.android.server.job.controllers.ConnectivityController$2: void <init>(com.android.server.job.controllers.ConnectivityController)>(r0);

        r0.<com.android.server.job.controllers.ConnectivityController: android.net.INetworkPolicyListener mNetPolicyListener> = $r5;

        $r6 = new com.android.server.job.controllers.ConnectivityController$CcHandler;

        $r7 = r0.<com.android.server.job.controllers.ConnectivityController: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<com.android.server.job.controllers.ConnectivityController$CcHandler: void <init>(com.android.server.job.controllers.ConnectivityController,android.os.Looper)>(r0, $r8);

        r0.<com.android.server.job.controllers.ConnectivityController: android.os.Handler mHandler> = $r6;

        $r9 = r0.<com.android.server.job.controllers.ConnectivityController: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/ConnectivityManager;");

        $r11 = (android.net.ConnectivityManager) $r10;

        r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager> = $r11;

        $r12 = r0.<com.android.server.job.controllers.ConnectivityController: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/NetworkPolicyManager;");

        $r14 = (android.net.NetworkPolicyManager) $r13;

        r0.<com.android.server.job.controllers.ConnectivityController: android.net.NetworkPolicyManager mNetPolicyManager> = $r14;

        $r15 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        $r16 = (com.android.server.net.NetworkPolicyManagerInternal) $r15;

        r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.net.NetworkPolicyManagerInternal mNetPolicyManagerInternal> = $r16;

        $r17 = new android.net.NetworkRequest$Builder;

        specialinvoke $r17.<android.net.NetworkRequest$Builder: void <init>()>();

        $r18 = virtualinvoke $r17.<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder clearCapabilities()>();

        r24 = virtualinvoke $r18.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        $r20 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        $r19 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager$NetworkCallback mNetworkCallback>;

        virtualinvoke $r20.<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>(r24, $r19);

        $r22 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.NetworkPolicyManager mNetPolicyManager>;

        $r21 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.INetworkPolicyListener mNetPolicyListener>;

        virtualinvoke $r22.<android.net.NetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>($r21);

        return;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        return $z0;
    }

    static android.util.ArraySet access$100(com.android.server.job.controllers.ConnectivityController)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.job.controllers.ConnectivityController;

        $r1 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        return $r1;
    }

    static void access$200(com.android.server.job.controllers.ConnectivityController, int, android.net.Network)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        int i0;
        android.net.Network r1;

        r0 := @parameter0: com.android.server.job.controllers.ConnectivityController;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.Network;

        specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: void updateTrackedJobs(int,android.net.Network)>(i0, r1);

        return;
    }

    static android.os.Handler access$300(com.android.server.job.controllers.ConnectivityController)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.job.controllers.ConnectivityController;

        $r1 = r0.<com.android.server.job.controllers.ConnectivityController: android.os.Handler mHandler>;

        return $r1;
    }

    private static boolean isCongestionDelayed(com.android.server.job.controllers.JobStatus, android.net.Network, android.net.NetworkCapabilities, com.android.server.job.JobSchedulerService$Constants)
    {
        com.android.server.job.controllers.JobStatus r0;
        android.net.Network r1;
        android.net.NetworkCapabilities r2;
        com.android.server.job.JobSchedulerService$Constants r3;
        boolean z0, z1;
        float $f0, $f1;
        byte $b0;

        r0 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 := @parameter1: android.net.Network;

        r2 := @parameter2: android.net.NetworkCapabilities;

        r3 := @parameter3: com.android.server.job.JobSchedulerService$Constants;

        z0 = virtualinvoke r2.<android.net.NetworkCapabilities: boolean hasCapability(int)>(20);

        z1 = 0;

        if z0 != 0 goto label2;

        $f0 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: float getFractionRunTime()>();

        $f1 = r3.<com.android.server.job.JobSchedulerService$Constants: float CONN_CONGESTION_DELAY_FRAC>;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label1;

        z1 = 1;

     label1:
        return z1;

     label2:
        return 0;
    }

    private boolean isInsane(com.android.server.job.controllers.JobStatus, android.net.Network, android.net.NetworkCapabilities, com.android.server.job.JobSchedulerService$Constants)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.net.Network r1;
        android.net.NetworkCapabilities r2;
        com.android.server.job.JobSchedulerService$Constants r3;
        long l0, $l4, $l5, $l6, $l11, $l12, $l13, l16, l17, l18, l19, l21, l22;
        com.android.server.job.JobSchedulerService $r4;
        byte $b1, $b3, $b7, $b10, $b14, $b20;
        int $i2, $i9;
        android.util.DataUnit $r5, $r17;
        java.lang.StringBuilder $r6, $r18;
        java.lang.String $r16, $r28;
        com.android.server.job.controllers.JobStatus r29;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r29 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 := @parameter1: android.net.Network;

        r2 := @parameter2: android.net.NetworkCapabilities;

        r3 := @parameter3: com.android.server.job.JobSchedulerService$Constants;

        $r4 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.job.JobSchedulerService mService>;

        l0 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService: long getMaxJobExecutionTimeMs(com.android.server.job.controllers.JobStatus)>(r29);

        l16 = virtualinvoke r29.<com.android.server.job.controllers.JobStatus: long getEstimatedNetworkDownloadBytes()>();

        $b1 = l16 cmp -1L;

        if $b1 == 0 goto label3;

        $i9 = virtualinvoke r2.<android.net.NetworkCapabilities: int getLinkDownstreamBandwidthKbps()>();

        l17 = (long) $i9;

        $b10 = l17 cmp 0L;

        if $b10 == 0 goto label2;

        $l11 = l16 * 1000L;

        $r17 = <android.util.DataUnit: android.util.DataUnit KIBIBYTES>;

        $l12 = virtualinvoke $r17.<android.util.DataUnit: long toBytes(long)>(l17);

        $l13 = $l12 / 8L;

        l18 = $l11 / $l13;

        $b14 = l18 cmp l0;

        if $b14 <= 0 goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Estimated ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l16);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" download bytes over ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l17);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" kbps network would take ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l18);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms and job has ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms to run; that\'s insane!");

        $r28 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r28);

        return 1;

     label1:
        goto label3;

     label2:
        goto label3;

     label3:
        l19 = virtualinvoke r29.<com.android.server.job.controllers.JobStatus: long getEstimatedNetworkUploadBytes()>();

        $b20 = l19 cmp -1L;

        if $b20 == 0 goto label5;

        $i2 = virtualinvoke r2.<android.net.NetworkCapabilities: int getLinkUpstreamBandwidthKbps()>();

        l21 = (long) $i2;

        $b3 = l21 cmp 0L;

        if $b3 == 0 goto label4;

        $l4 = 1000L * l19;

        $r5 = <android.util.DataUnit: android.util.DataUnit KIBIBYTES>;

        $l5 = virtualinvoke $r5.<android.util.DataUnit: long toBytes(long)>(l21);

        $l6 = $l5 / 8L;

        l22 = $l4 / $l6;

        $b7 = l22 cmp l0;

        if $b7 <= 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Estimated ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l19);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upload bytes over ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l21);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" kbps network would take ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l22);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms and job has ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms to run; that\'s insane!");

        $r16 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r16);

        return 1;

     label4:
        goto label5;

     label5:
        return 0;
    }

    private static boolean isRelaxedSatisfied(com.android.server.job.controllers.JobStatus, android.net.Network, android.net.NetworkCapabilities, com.android.server.job.JobSchedulerService$Constants)
    {
        com.android.server.job.controllers.JobStatus r0;
        android.net.Network r1;
        android.net.NetworkCapabilities r2, $r5, $r8, $r9;
        com.android.server.job.JobSchedulerService$Constants r3;
        boolean z0, $z1, z2;
        android.app.job.JobInfo $r4, $r6;
        int $i0;
        android.net.NetworkRequest $r7;
        float $f0, $f1;
        byte $b1;

        r0 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 := @parameter1: android.net.Network;

        r2 := @parameter2: android.net.NetworkCapabilities;

        r3 := @parameter3: com.android.server.job.JobSchedulerService$Constants;

        $r4 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        z0 = virtualinvoke $r4.<android.app.job.JobInfo: boolean isPrefetch()>();

        z2 = 0;

        if z0 == 0 goto label4;

        $i0 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: int getStandbyBucket()>();

        if $i0 != 5 goto label1;

        goto label4;

     label1:
        $r5 = new android.net.NetworkCapabilities;

        $r6 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r7 = virtualinvoke $r6.<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>();

        $r8 = $r7.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r5.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r8);

        $r9 = virtualinvoke $r5.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(11);

        $z1 = virtualinvoke $r9.<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)>(r2);

        if $z1 == 0 goto label3;

        $f0 = virtualinvoke r0.<com.android.server.job.controllers.JobStatus: float getFractionRunTime()>();

        $f1 = r3.<com.android.server.job.JobSchedulerService$Constants: float CONN_PREFETCH_RELAX_FRAC>;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label2;

        z2 = 1;

     label2:
        return z2;

     label3:
        return 0;

     label4:
        return 0;
    }

    private static boolean isStrictSatisfied(com.android.server.job.controllers.JobStatus, android.net.Network, android.net.NetworkCapabilities, com.android.server.job.JobSchedulerService$Constants)
    {
        android.net.Network r0;
        android.net.NetworkCapabilities r1, $r5, $r8, r10;
        com.android.server.job.JobSchedulerService$Constants r2;
        int $i0;
        android.app.job.JobInfo $r3, $r6;
        android.net.NetworkRequest $r4, $r7;
        boolean $z0, $z1;
        com.android.server.job.controllers.JobStatus r9;

        r9 := @parameter0: com.android.server.job.controllers.JobStatus;

        r0 := @parameter1: android.net.Network;

        r1 := @parameter2: android.net.NetworkCapabilities;

        r2 := @parameter3: com.android.server.job.JobSchedulerService$Constants;

        $i0 = virtualinvoke r9.<com.android.server.job.controllers.JobStatus: int getEffectiveStandbyBucket()>();

        if $i0 != 5 goto label1;

        $z0 = virtualinvoke r9.<com.android.server.job.controllers.JobStatus: boolean isConstraintSatisfied(int)>(16777216);

        if $z0 != 0 goto label1;

        $r5 = new android.net.NetworkCapabilities;

        $r6 = virtualinvoke r9.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r7 = virtualinvoke $r6.<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>();

        $r8 = $r7.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r5.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r8);

        r10 = virtualinvoke $r5.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(11);

        goto label2;

     label1:
        $r3 = virtualinvoke r9.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r4 = virtualinvoke $r3.<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>();

        r10 = $r4.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

     label2:
        $z1 = virtualinvoke r10.<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)>(r1);

        return $z1;
    }

    private void revokeStandbyExceptionLocked(int)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        int i0;
        boolean $z0;
        com.android.server.net.NetworkPolicyManagerInternal $r2;
        android.util.SparseArray $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        i0 := @parameter0: int;

        $z0 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Revoking standby exception for UID: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r7);

     label1:
        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.net.NetworkPolicyManagerInternal mNetPolicyManagerInternal>;

        virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerInternal: void setAppIdleWhitelist(int,boolean)>(i0, 0);

        $r3 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        virtualinvoke $r3.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    private boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        android.net.Network r2;
        android.net.ConnectivityManager $r3, $r4;
        int $i0;
        android.net.NetworkCapabilities $r5;
        boolean $z0;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r3 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        r2 = virtualinvoke $r3.<android.net.ConnectivityManager: android.net.Network getActiveNetworkForUid(int)>($i0);

        $r4 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        $r5 = virtualinvoke $r4.<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>(r2);

        $z0 = specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities)>(r1, r2, $r5);

        return $z0;
    }

    private boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus, android.net.Network, android.net.NetworkCapabilities)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        int i0, $i1, $i2;
        android.net.NetworkInfo r2;
        boolean z0, $z1, z2, z3, z4, z5, $z6;
        android.net.ConnectivityManager $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r13, r18;
        android.net.Network r14;
        android.net.NetworkCapabilities r15;
        com.android.server.job.JobSchedulerService$Constants $r16;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r14 := @parameter1: android.net.Network;

        r15 := @parameter2: android.net.NetworkCapabilities;

        i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getFlags()>();

        z2 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $r3 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        r2 = virtualinvoke $r3.<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>(r14, $i2, z3);

        if r2 == null goto label3;

        $z1 = virtualinvoke r2.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        $r16 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.job.JobSchedulerService$Constants mConstants>;

        z0 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean isSatisfied(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities,com.android.server.job.JobSchedulerService$Constants)>(r1, r14, r15, $r16);

        if z4 == 0 goto label5;

        if z0 == 0 goto label5;

        goto label6;

     label5:
        z2 = 0;

     label6:
        z5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean setConnectivityConstraintSatisfied(boolean)>(z2);

        r1.<com.android.server.job.controllers.JobStatus: android.net.Network network> = r14;

        $z6 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z6 == 0 goto label9;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connectivity ");

        if z5 == 0 goto label7;

        r18 = "CHANGED";

        goto label8;

     label7:
        r18 = "unchanged";

     label8:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": connected=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" satisfied=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r13);

     label9:
        return z5;
    }

    private void updateTrackedJobs(int, android.net.Network)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        java.lang.Object r1, $r4, $r9;
        android.util.ArrayMap r2;
        android.util.SparseArray $r3, $r7, $r8;
        android.util.ArraySet $r5, $r10;
        com.android.server.job.StateChangedListener $r6;
        int $i0, i1, i2;
        boolean $z0, z1;
        java.lang.Throwable $r11;
        android.net.Network r12;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        i1 := @parameter0: int;

        r12 := @parameter1: android.net.Network;

        r1 = r0.<com.android.server.job.controllers.ConnectivityController: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = new android.util.ArrayMap;

        specialinvoke r2.<android.util.ArrayMap: void <init>()>();

     label02:
        z1 = 0;

        if i1 != -1 goto label08;

     label03:
        $r7 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i0 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        i2 = $i0 - 1;

     label04:
        if i2 < 0 goto label07;

     label05:
        $r8 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r10 = (android.util.ArraySet) $r9;

        $z0 = specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateTrackedJobsLocked(android.util.ArraySet,android.net.Network,android.util.ArrayMap)>($r10, r12, r2);

        z1 = z1 | $z0;

     label06:
        i2 = i2 + -1;

        goto label04;

     label07:
        goto label09;

     label08:
        $r3 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r5 = (android.util.ArraySet) $r4;

        z1 = specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateTrackedJobsLocked(android.util.ArraySet,android.net.Network,android.util.ArrayMap)>($r5, r12, r2);

     label09:
        if z1 == 0 goto label11;

     label10:
        $r6 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.job.StateChangedListener mStateChangedListener>;

        interfaceinvoke $r6.<com.android.server.job.StateChangedListener: void onControllerStateChanged()>();

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private boolean updateTrackedJobsLocked(android.util.ArraySet, android.net.Network, android.util.ArrayMap)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.util.ArraySet r1;
        android.util.ArrayMap r2;
        android.net.Network r3, $r10, r13;
        android.net.NetworkCapabilities r4, r14;
        int $i0, $i1, $i2, i3;
        android.net.ConnectivityManager $r5, $r11;
        java.lang.Object $r6, $r8, $r9;
        com.android.server.job.controllers.JobStatus $r7, r15;
        boolean $z0, $z1, $z2, z3, z4, z5;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: android.util.ArraySet;

        r13 := @parameter1: android.net.Network;

        r2 := @parameter2: android.util.ArrayMap;

        z3 = 0;

        if r1 == null goto label9;

        $i0 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        if $i0 != 0 goto label1;

        goto label9;

     label1:
        $r5 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        $r6 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(0);

        $r7 = (com.android.server.job.controllers.JobStatus) $r6;

        $i1 = virtualinvoke $r7.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        r3 = virtualinvoke $r5.<android.net.ConnectivityManager: android.net.Network getActiveNetworkForUid(int)>($i1);

        $r8 = virtualinvoke r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (android.net.NetworkCapabilities) $r8;

        r14 = r4;

        if r4 != null goto label2;

        $r11 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        r14 = virtualinvoke $r11.<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>(r3);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r14);

     label2:
        if r13 == null goto label3;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r13, r3);

        if $z2 == 0 goto label4;

     label3:
        z3 = 1;

     label4:
        z4 = 0;

        $i2 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i3 = $i2 - 1;

     label5:
        if i3 < 0 goto label8;

        $r9 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i3);

        r15 = (com.android.server.job.controllers.JobStatus) $r9;

        if z3 != 0 goto label6;

        z5 = z4;

        $r10 = r15.<com.android.server.job.controllers.JobStatus: android.net.Network network>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r10, r3);

        if $z1 != 0 goto label7;

     label6:
        $z0 = specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities)>(r15, r3, r14);

        z5 = z4 | $z0;

     label7:
        i3 = i3 + -1;

        z4 = z5;

        goto label5;

     label8:
        return z4;

     label9:
        return 0;
    }

    public void dumpControllerStateLocked(android.util.proto.ProtoOutputStream, long, java.util.function.Predicate)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.util.proto.ProtoOutputStream r1;
        java.util.function.Predicate r2;
        long l0, l1, l2, l9;
        android.util.SparseArray $r3, $r5, $r6, $r12;
        int $i3, $i4, $i5, $i6, $i7, $i8, i11, i12, i13, i14;
        android.util.ArraySet $r4, $r10, r14;
        java.lang.Object $r7, $r8, $r11;
        boolean $z0;
        android.app.job.JobInfo $r9;
        android.net.Network r13;
        com.android.server.job.controllers.JobStatus r15;
        android.net.NetworkRequest r16;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l9 := @parameter1: long;

        r2 := @parameter2: java.util.function.Predicate;

        l0 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l9);

        l1 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268035L);

        i11 = 0;

     label01:
        $r3 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $i3 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i11 >= $i3 goto label02;

        $r12 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $i8 = virtualinvoke $r12.<android.util.SparseArray: int keyAt(int)>(i11);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(2220498092035L, $i8);

        i11 = i11 + 1;

        goto label01;

     label02:
        i12 = 0;

     label03:
        $r4 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $i4 = virtualinvoke $r4.<android.util.ArraySet: int size()>();

        if i12 >= $i4 goto label05;

        $r10 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $r11 = virtualinvoke $r10.<android.util.ArraySet: java.lang.Object valueAt(int)>(i12);

        r13 = (android.net.Network) $r11;

        if r13 == null goto label04;

        virtualinvoke r13.<android.net.Network: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 2246267895812L);

     label04:
        i12 = i12 + 1;

        goto label03;

     label05:
        i13 = 0;

     label06:
        $r5 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i5 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i13 >= $i5 goto label12;

        $r6 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i13);

        r14 = (android.util.ArraySet) $r7;

        i14 = 0;

     label07:
        $i6 = virtualinvoke r14.<android.util.ArraySet: int size()>();

        if i14 >= $i6 goto label11;

        $r8 = virtualinvoke r14.<android.util.ArraySet: java.lang.Object valueAt(int)>(i14);

        r15 = (com.android.server.job.controllers.JobStatus) $r8;

        $z0 = interfaceinvoke r2.<java.util.function.Predicate: boolean test(java.lang.Object)>(r15);

        if $z0 != 0 goto label08;

        goto label10;

     label08:
        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895810L);

        virtualinvoke r15.<com.android.server.job.controllers.JobStatus: void writeToShortProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268033L);

        $i7 = virtualinvoke r15.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i7);

        $r9 = virtualinvoke r15.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        r16 = virtualinvoke $r9.<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>();

        if r16 == null goto label09;

        virtualinvoke r16.<android.net.NetworkRequest: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268035L);

        goto label09;

     label09:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

     label10:
        i14 = i14 + 1;

        goto label07;

     label11:
        i13 = i13 + 1;

        goto label06;

     label12:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l1);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        return;
    }

    public void dumpControllerStateLocked(com.android.internal.util.IndentingPrintWriter, java.util.function.Predicate)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.function.Predicate r2;
        android.util.ArraySet r3, $r6, $r13, $r15, $r21;
        com.android.server.job.controllers.JobStatus r4;
        android.util.SparseArray $r5, $r7, $r17, $r18, $r19, $r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i11, i12;
        java.lang.Object $r8, $r9, $r16, $r20;
        boolean $z0;
        android.app.job.JobInfo $r10;
        android.net.NetworkRequest $r11;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: java.util.function.Predicate;

        $r5 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if $i0 <= 0 goto label03;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Requested standby exceptions:");

        i8 = 0;

     label01:
        $r17 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $i5 = virtualinvoke $r17.<android.util.SparseArray: int size()>();

        if i8 >= $i5 goto label02;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" ");

        $r18 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $i6 = virtualinvoke $r18.<android.util.SparseArray: int keyAt(int)>(i8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" (");

        $r19 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $r20 = virtualinvoke $r19.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        $r21 = (android.util.ArraySet) $r20;

        $i7 = virtualinvoke $r21.<android.util.ArraySet: int size()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" jobs)");

        i8 = i8 + 1;

        goto label01;

     label02:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label03:
        $r6 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $i1 = virtualinvoke $r6.<android.util.ArraySet: int size()>();

        if $i1 <= 0 goto label06;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Available networks:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i9 = 0;

     label04:
        $r13 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $i4 = virtualinvoke $r13.<android.util.ArraySet: int size()>();

        if i9 >= $i4 goto label05;

        $r15 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $r16 = virtualinvoke $r15.<android.util.ArraySet: java.lang.Object valueAt(int)>(i9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r16);

        i9 = i9 + 1;

        goto label04;

     label05:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label07;

     label06:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("No available networks");

     label07:
        i10 = 0;

     label08:
        $r22 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i11 = virtualinvoke $r22.<android.util.SparseArray: int size()>();

        if i10 >= $i11 goto label13;

        $r7 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i10);

        r3 = (android.util.ArraySet) $r8;

        i12 = 0;

     label09:
        $i2 = virtualinvoke r3.<android.util.ArraySet: int size()>();

        if i12 >= $i2 goto label12;

        $r9 = virtualinvoke r3.<android.util.ArraySet: java.lang.Object valueAt(int)>(i12);

        r4 = (com.android.server.job.controllers.JobStatus) $r9;

        $z0 = interfaceinvoke r2.<java.util.function.Predicate: boolean test(java.lang.Object)>(r4);

        if $z0 != 0 goto label10;

        goto label11;

     label10:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("#");

        virtualinvoke r4.<com.android.server.job.controllers.JobStatus: void printUniqueId(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" from ");

        $i3 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r1, $i3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r10 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r11 = virtualinvoke $r10.<android.app.job.JobInfo: android.net.NetworkRequest getRequiredNetwork()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.Object)>($r11);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label11:
        i12 = i12 + 1;

        goto label09;

     label12:
        i10 = i10 + 1;

        goto label08;

     label13:
        return;
    }

    public void evaluateStateLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r6, $r11;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean wouldBeReadyWithConnectivityLocked(com.android.server.job.controllers.JobStatus)>(r1);

        if $z1 == 0 goto label3;

        $z3 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z3 == 0 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("evaluateStateLocked finds job ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" would be ready.");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r11);

     label2:
        virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: void requestStandbyExceptionLocked(com.android.server.job.controllers.JobStatus)>(r1);

        goto label5;

     label3:
        $z2 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z2 == 0 goto label4;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("evaluateStateLocked finds job ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" would not be ready.");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r6);

     label4:
        virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: void maybeRevokeStandbyExceptionLocked(com.android.server.job.controllers.JobStatus)>(r1);

     label5:
        return;
    }

    public boolean isNetworkAvailable(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        java.lang.Object r1, $r7;
        android.net.Network r2;
        android.net.NetworkCapabilities r3;
        boolean z0, $z1;
        java.lang.StringBuilder r4;
        android.util.ArraySet $r5, $r6;
        int $i0, i2;
        android.net.ConnectivityManager $r8;
        com.android.server.job.JobSchedulerService$Constants $r9;
        java.lang.String $r18;
        java.lang.Throwable $r19;
        com.android.server.job.controllers.JobStatus r20;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r20 := @parameter0: com.android.server.job.controllers.JobStatus;

        r1 = r0.<com.android.server.job.controllers.ConnectivityController: java.lang.Object mLock>;

        entermonitor r1;

        i2 = 0;

     label01:
        $r5 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $i0 = virtualinvoke $r5.<android.util.ArraySet: int size()>();

        if i2 >= $i0 goto label06;

        $r6 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.ArraySet mAvailableNetworks>;

        $r7 = virtualinvoke $r6.<android.util.ArraySet: java.lang.Object valueAt(int)>(i2);

        r2 = (android.net.Network) $r7;

        $r8 = r0.<com.android.server.job.controllers.ConnectivityController: android.net.ConnectivityManager mConnManager>;

        r3 = virtualinvoke $r8.<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>(r2);

        $r9 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.job.JobSchedulerService$Constants mConstants>;

        z0 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean isSatisfied(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities,com.android.server.job.JobSchedulerService$Constants)>(r20, r2, r3, $r9);

        $z1 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z1 == 0 goto label02;

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isNetworkAvailable(");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r20);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") with network ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and capabilities ");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Satisfied=");

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r18 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r18);

     label02:
        if z0 == 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 1;

     label05:
        i2 = i2 + 1;

        goto label01;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r19 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean isSatisfied(com.android.server.job.controllers.JobStatus, android.net.Network, android.net.NetworkCapabilities, com.android.server.job.JobSchedulerService$Constants)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        android.net.Network r2;
        android.net.NetworkCapabilities r3;
        com.android.server.job.JobSchedulerService$Constants r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: android.net.Network;

        r3 := @parameter2: android.net.NetworkCapabilities;

        r4 := @parameter3: com.android.server.job.JobSchedulerService$Constants;

        if r2 == null goto label6;

        if r3 != null goto label1;

        goto label6;

     label1:
        $z0 = specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean isInsane(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities,com.android.server.job.JobSchedulerService$Constants)>(r1, r2, r3, r4);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z1 = staticinvoke <com.android.server.job.controllers.ConnectivityController: boolean isCongestionDelayed(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities,com.android.server.job.JobSchedulerService$Constants)>(r1, r2, r3, r4);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $z2 = staticinvoke <com.android.server.job.controllers.ConnectivityController: boolean isStrictSatisfied(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities,com.android.server.job.JobSchedulerService$Constants)>(r1, r2, r3, r4);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        $z3 = staticinvoke <com.android.server.job.controllers.ConnectivityController: boolean isRelaxedSatisfied(com.android.server.job.controllers.JobStatus,android.net.Network,android.net.NetworkCapabilities,com.android.server.job.JobSchedulerService$Constants)>(r1, r2, r3, r4);

        if $z3 == 0 goto label5;

        return 1;

     label5:
        return 0;

     label6:
        return 0;
    }

    boolean isStandbyExceptionRequestedLocked(int)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        int i0, $i1;
        android.util.ArraySet r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        boolean z0;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.ArraySet) $r3;

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        if $i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void maybeRevokeStandbyExceptionLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        int i0, $i1, $i3;
        android.util.ArraySet r1;
        boolean $z0, $z1, $z2;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        com.android.server.job.controllers.JobStatus r9;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r9 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 = virtualinvoke r9.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $z0 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean isStandbyExceptionRequestedLocked(int)>(i0);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.ArraySet) $r3;

        if r1 != null goto label2;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", "maybeRevokeStandbyExceptionLocked found null jobs array even though a standby exception has been requested.");

        return;

     label2:
        $z1 = virtualinvoke r1.<android.util.ArraySet: boolean remove(java.lang.Object)>(r9);

        if $z1 == 0 goto label4;

        $i3 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        if $i3 <= 0 goto label3;

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: void revokeStandbyExceptionLocked(int)>(i0);

        return;

     label4:
        $z2 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z2 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maybeRevokeStandbyExceptionLocked not revoking because there are still ");

        $i1 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" jobs left.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r8);

     label5:
        return;
    }

    public void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1, r7;
        android.util.ArraySet r2, $r5, r8;
        boolean $z0;
        android.util.SparseArray $r3, $r6;
        int $i0, $i1;
        java.lang.Object $r4;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r7 := @parameter1: com.android.server.job.controllers.JobStatus;

        $z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus)>(r1);

        $r3 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        r2 = (android.util.ArraySet) $r4;

        r8 = r2;

        if r2 != null goto label1;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        r8 = $r5;

        $r6 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, $r5);

     label1:
        virtualinvoke r8.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<com.android.server.job.controllers.JobStatus: void setTrackingController(int)>(2);

     label2:
        return;
    }

    public void maybeStopTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus, boolean)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1, r4;
        boolean z0, $z1;
        android.util.SparseArray $r2;
        int $i0;
        java.lang.Object $r3;
        android.util.ArraySet r5;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r4 := @parameter1: com.android.server.job.controllers.JobStatus;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean clearTrackingController(int)>(2);

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        r5 = (android.util.ArraySet) $r3;

        if r5 == null goto label1;

        virtualinvoke r5.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

     label1:
        virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: void maybeRevokeStandbyExceptionLocked(com.android.server.job.controllers.JobStatus)>(r1);

     label2:
        return;
    }

    public void onAppRemovedLocked(java.lang.String, int)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        java.lang.String r1;
        int i0;
        android.util.SparseArray $r2;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        virtualinvoke $r2.<android.util.SparseArray: void delete(int)>(i0);

        return;
    }

    public void onNetworkActive()
    {
        com.android.server.job.controllers.ConnectivityController r0;
        java.lang.Object r1, $r6, $r7;
        android.util.ArraySet r2;
        java.lang.StringBuilder r3;
        android.util.SparseArray $r4, $r5;
        int $i0, $i1, i3, i4;
        boolean $z0, $z1;
        com.android.server.job.StateChangedListener $r8;
        java.lang.String $r12;
        java.lang.Throwable $r13;
        com.android.server.job.controllers.JobStatus r14;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 = r0.<com.android.server.job.controllers.ConnectivityController: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        i3 = $i0 - 1;

     label02:
        if i3 < 0 goto label09;

     label03:
        $r5 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r2 = (android.util.ArraySet) $r6;

        $i1 = virtualinvoke r2.<android.util.ArraySet: int size()>();

        i4 = $i1 - 1;

     label04:
        if i4 < 0 goto label08;

     label05:
        $r7 = virtualinvoke r2.<android.util.ArraySet: java.lang.Object valueAt(int)>(i4);

        r14 = (com.android.server.job.controllers.JobStatus) $r7;

        $z0 = virtualinvoke r14.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        if $z0 == 0 goto label07;

        $z1 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z1 == 0 goto label06;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to network activity.");

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r12);

     label06:
        $r8 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.job.StateChangedListener mStateChangedListener>;

        interfaceinvoke $r8.<com.android.server.job.StateChangedListener: void onRunJobNow(com.android.server.job.controllers.JobStatus)>(r14);

     label07:
        i4 = i4 + -1;

        goto label04;

     label08:
        i3 = i3 + -1;

        goto label02;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r13 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void reevaluateStateLocked(int)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        android.util.ArraySet r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3, $r4;
        int $i0, i1, i2;
        com.android.server.job.controllers.JobStatus $r5;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        i1 := @parameter0: int;

        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mTrackedJobs>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (android.util.ArraySet) $r3;

        if r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label3;

        $r4 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i2);

        $r5 = (com.android.server.job.controllers.JobStatus) $r4;

        virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: void evaluateStateLocked(com.android.server.job.controllers.JobStatus)>($r5);

        i2 = i2 + -1;

        goto label2;

     label3:
        return;
    }

    void requestStandbyExceptionLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        int i0;
        boolean z0, $z1, $z2, $z3;
        android.util.ArraySet r1, $r9, r12;
        android.util.SparseArray $r2, $r10;
        java.lang.Object $r3;
        com.android.server.net.NetworkPolicyManagerInternal $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        com.android.server.job.controllers.JobStatus r11;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r11 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 = virtualinvoke r11.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        z0 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean isStandbyExceptionRequestedLocked(int)>(i0);

        $r2 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.ArraySet) $r3;

        r12 = r1;

        if r1 != null goto label1;

        $r9 = new android.util.ArraySet;

        specialinvoke $r9.<android.util.ArraySet: void <init>()>();

        r12 = $r9;

        $r10 = r0.<com.android.server.job.controllers.ConnectivityController: android.util.SparseArray mRequestedWhitelistJobs>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r9);

     label1:
        $z1 = virtualinvoke r12.<android.util.ArraySet: boolean add(java.lang.Object)>(r11);

        if $z1 == 0 goto label4;

        if z0 == 0 goto label2;

        goto label4;

     label2:
        $z3 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z3 == 0 goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requesting standby exception for UID: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r8);

     label3:
        $r4 = r0.<com.android.server.job.controllers.ConnectivityController: com.android.server.net.NetworkPolicyManagerInternal mNetPolicyManagerInternal>;

        virtualinvoke $r4.<com.android.server.net.NetworkPolicyManagerInternal: void setAppIdleWhitelist(int,boolean)>(i0, 1);

        return;

     label4:
        $z2 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", "requestStandbyExceptionLocked found exception already requested.");

     label5:
        return;
    }

    public void startTrackingRestrictedJobLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus)>(r1);

     label1:
        return;
    }

    public void stopTrackingRestrictedJobLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean updateConstraintsSatisfied(com.android.server.job.controllers.JobStatus)>(r1);

     label1:
        return;
    }

    boolean wouldBeReadyWithConnectivityLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.ConnectivityController r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0, $z1, z2, z3;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;

        r0 := @this: com.android.server.job.controllers.ConnectivityController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        z2 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean isNetworkAvailable(com.android.server.job.controllers.JobStatus)>(r1);

        $z0 = <com.android.server.job.controllers.ConnectivityController: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wouldBeReadyWithConnectivityLocked: ");

        $r5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" networkAvailable=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("JobScheduler.Connectivity", $r9);

     label1:
        if z2 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.job.controllers.ConnectivityController: boolean wouldBeReadyWithConstraintLocked(com.android.server.job.controllers.JobStatus,int)>(r1, 268435456);

        if $z1 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }
}
