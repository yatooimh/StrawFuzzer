public final class com.android.server.job.controllers.DeviceIdleJobsController extends com.android.server.job.controllers.StateController
{
    private static final long BACKGROUND_JOBS_DELAY;
    private static final boolean DEBUG;
    static final int PROCESS_BACKGROUND_JOBS;
    private static final java.lang.String TAG;
    private final android.util.ArraySet mAllowInIdleJobs;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private boolean mDeviceIdleMode;
    private final com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor;
    private int[] mDeviceIdleWhitelistAppIds;
    private final android.util.SparseBooleanArray mForegroundUids;
    private final com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler mHandler;
    private final com.android.server.DeviceIdleInternal mLocalDeviceIdleController;
    private final android.os.PowerManager mPowerManager;
    private int[] mPowerSaveTempWhitelistAppIds;

    static void <clinit>()
    {
        boolean $z0, $z1, z2;

        <com.android.server.job.controllers.DeviceIdleJobsController: java.lang.String TAG> = "JobScheduler.DeviceIdle";

        <com.android.server.job.controllers.DeviceIdleJobsController: int PROCESS_BACKGROUND_JOBS> = 1;

        <com.android.server.job.controllers.DeviceIdleJobsController: long BACKGROUND_JOBS_DELAY> = 3000L;

        $z0 = <com.android.server.job.JobSchedulerService: boolean DEBUG>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("JobScheduler.DeviceIdle", 3);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        <com.android.server.job.controllers.DeviceIdleJobsController: boolean DEBUG> = z2;

        return;
    }

    public void <init>(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.DeviceIdleJobsController$1 $r1;
        com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler $r2;
        android.content.Context $r3, $r5, $r18;
        android.os.Looper $r4;
        java.lang.Object $r6, $r8;
        android.os.PowerManager $r7;
        int[] $r9, $r11;
        com.android.server.DeviceIdleInternal $r10, r21;
        com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor $r12;
        android.util.ArraySet $r13;
        android.util.SparseBooleanArray $r14;
        android.content.IntentFilter $r15;
        android.os.UserHandle $r16;
        android.content.BroadcastReceiver $r17;
        com.android.server.job.JobSchedulerService r20;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r20 := @parameter0: com.android.server.job.JobSchedulerService;

        specialinvoke r0.<com.android.server.job.controllers.StateController: void <init>(com.android.server.job.JobSchedulerService)>(r20);

        $r1 = new com.android.server.job.controllers.DeviceIdleJobsController$1;

        specialinvoke $r1.<com.android.server.job.controllers.DeviceIdleJobsController$1: void <init>(com.android.server.job.controllers.DeviceIdleJobsController)>(r0);

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.content.BroadcastReceiver mBroadcastReceiver> = $r1;

        $r2 = new com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler;

        $r3 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler: void <init>(com.android.server.job.controllers.DeviceIdleJobsController,android.os.Looper)>(r0, $r4);

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler mHandler> = $r2;

        $r5 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r7 = (android.os.PowerManager) $r6;

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.os.PowerManager mPowerManager> = $r7;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/DeviceIdleInternal;");

        r21 = (com.android.server.DeviceIdleInternal) $r8;

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.DeviceIdleInternal mLocalDeviceIdleController> = r21;

        $r9 = interfaceinvoke r21.<com.android.server.DeviceIdleInternal: int[] getPowerSaveWhitelistUserAppIds()>();

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mDeviceIdleWhitelistAppIds> = $r9;

        $r10 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.DeviceIdleInternal mLocalDeviceIdleController>;

        $r11 = interfaceinvoke $r10.<com.android.server.DeviceIdleInternal: int[] getPowerSaveTempWhitelistAppIds()>();

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mPowerSaveTempWhitelistAppIds> = $r11;

        $r12 = new com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor;

        specialinvoke $r12.<com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor: void <init>(com.android.server.job.controllers.DeviceIdleJobsController)>(r0);

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor> = $r12;

        $r13 = new android.util.ArraySet;

        specialinvoke $r13.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.ArraySet mAllowInIdleJobs> = $r13;

        $r14 = new android.util.SparseBooleanArray;

        specialinvoke $r14.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids> = $r14;

        $r15 = new android.content.IntentFilter;

        specialinvoke $r15.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r15.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.DEVICE_IDLE_MODE_CHANGED");

        virtualinvoke $r15.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED");

        virtualinvoke $r15.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.POWER_SAVE_WHITELIST_CHANGED");

        virtualinvoke $r15.<android.content.IntentFilter: void addAction(java.lang.String)>("android.os.action.POWER_SAVE_TEMP_WHITELIST_CHANGED");

        $r18 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.content.Context mContext>;

        $r17 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r16 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r18.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r17, $r16, $r15, null, null);

        return;
    }

    static android.os.PowerManager access$000(com.android.server.job.controllers.DeviceIdleJobsController)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        android.os.PowerManager $r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        $r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.os.PowerManager mPowerManager>;

        return $r1;
    }

    static int[] access$100(com.android.server.job.controllers.DeviceIdleJobsController)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        int[] $r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        $r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mDeviceIdleWhitelistAppIds>;

        return $r1;
    }

    static int[] access$102(com.android.server.job.controllers.DeviceIdleJobsController, int[])
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        int[] r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter1: int[];

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mDeviceIdleWhitelistAppIds> = r1;

        return r1;
    }

    static com.android.server.DeviceIdleInternal access$200(com.android.server.job.controllers.DeviceIdleJobsController)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.DeviceIdleInternal $r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        $r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.DeviceIdleInternal mLocalDeviceIdleController>;

        return $r1;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = <com.android.server.job.controllers.DeviceIdleJobsController: boolean DEBUG>;

        return $z0;
    }

    static int[] access$400(com.android.server.job.controllers.DeviceIdleJobsController)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        int[] $r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        $r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mPowerSaveTempWhitelistAppIds>;

        return $r1;
    }

    static int[] access$402(com.android.server.job.controllers.DeviceIdleJobsController, int[])
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        int[] r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter1: int[];

        r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mPowerSaveTempWhitelistAppIds> = r1;

        return r1;
    }

    static android.util.ArraySet access$500(com.android.server.job.controllers.DeviceIdleJobsController)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        $r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.ArraySet mAllowInIdleJobs>;

        return $r1;
    }

    static boolean access$600(com.android.server.job.controllers.DeviceIdleJobsController, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        $z0 = specialinvoke r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean updateTaskStateLocked(com.android.server.job.controllers.JobStatus)>(r1);

        return $z0;
    }

    static com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor access$700(com.android.server.job.controllers.DeviceIdleJobsController)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor $r1;

        r0 := @parameter0: com.android.server.job.controllers.DeviceIdleJobsController;

        $r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor>;

        return $r1;
    }

    private boolean updateTaskStateLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean z1, $z2, $z3, z4, z5, $z6, $z7;
        int $i0, $i1, i2;
        android.util.SparseBooleanArray $r2;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getFlags()>();

        $i0 = i2 & 2;

        if $i0 == 0 goto label2;

        $r2 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids>;

        $i1 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $z2 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>($i1);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean isTempWhitelistedLocked(com.android.server.job.controllers.JobStatus)>(r1);

        if $z3 == 0 goto label2;

     label1:
        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        z1 = virtualinvoke r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean isWhitelistedLocked(com.android.server.job.controllers.JobStatus)>(r1);

        z5 = 1;

        $z6 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean mDeviceIdleMode>;

        if $z6 == 0 goto label5;

        z5 = 1;

        if z1 != 0 goto label5;

        if z4 == 0 goto label4;

        z5 = 1;

        goto label5;

     label4:
        z5 = 0;

     label5:
        $z7 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean setDeviceNotDozingConstraintSatisfied(boolean,boolean)>(z5, z1);

        return $z7;
    }

    public void dumpControllerStateLocked(android.util.proto.ProtoOutputStream, long, java.util.function.Predicate)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        android.util.proto.ProtoOutputStream r1;
        java.util.function.Predicate r2;
        long l0, l1, l2;
        boolean $z0;
        com.android.server.job.JobSchedulerService $r3;
        com.android.server.job.JobStore $r4;
        com.android.server.job.controllers._$$Lambda$DeviceIdleJobsController$JMszgdQK87AK2bjaiI_rwQuTKpc $r5;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        r2 := @parameter2: java.util.function.Predicate;

        l0 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268037L);

        $z0 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean mDeviceIdleMode>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366145L, $z0);

        $r3 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.JobSchedulerService mService>;

        $r4 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r5 = new com.android.server.job.controllers._$$Lambda$DeviceIdleJobsController$JMszgdQK87AK2bjaiI_rwQuTKpc;

        specialinvoke $r5.<com.android.server.job.controllers._$$Lambda$DeviceIdleJobsController$JMszgdQK87AK2bjaiI_rwQuTKpc: void <init>(com.android.server.job.controllers.DeviceIdleJobsController,android.util.proto.ProtoOutputStream)>(r0, r1);

        virtualinvoke $r4.<com.android.server.job.JobStore: void forEachJob(java.util.function.Predicate,java.util.function.Consumer)>(r2, $r5);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        return;
    }

    public void dumpControllerStateLocked(com.android.internal.util.IndentingPrintWriter, java.util.function.Predicate)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.function.Predicate r2;
        java.lang.StringBuilder $r4;
        boolean $z0;
        java.lang.String $r7;
        com.android.server.job.JobSchedulerService $r8;
        com.android.server.job.JobStore $r9;
        com.android.server.job.controllers._$$Lambda$DeviceIdleJobsController$essc_q8XD1L8ojfbmN1Aow_AVPk $r10;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: java.util.function.Predicate;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Idle mode: ");

        $z0 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean mDeviceIdleMode>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r8 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.JobSchedulerService mService>;

        $r9 = virtualinvoke $r8.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r10 = new com.android.server.job.controllers._$$Lambda$DeviceIdleJobsController$essc_q8XD1L8ojfbmN1Aow_AVPk;

        specialinvoke $r10.<com.android.server.job.controllers._$$Lambda$DeviceIdleJobsController$essc_q8XD1L8ojfbmN1Aow_AVPk: void <init>(com.android.server.job.controllers.DeviceIdleJobsController,com.android.internal.util.IndentingPrintWriter)>(r0, r1);

        virtualinvoke $r9.<com.android.server.job.JobStore: void forEachJob(java.util.function.Predicate,java.util.function.Consumer)>(r2, $r10);

        return;
    }

    boolean isTempWhitelistedLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.JobStatus r1;
        int[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mPowerSaveTempWhitelistAppIds>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r2, $i1);

        return $z0;
    }

    boolean isWhitelistedLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.JobStatus r1;
        int[] $r2;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: int[] mDeviceIdleWhitelistAppIds>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, $i1);

        if $i2 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void lambda$dumpControllerStateLocked$0$DeviceIdleJobsController(com.android.internal.util.IndentingPrintWriter, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.internal.util.IndentingPrintWriter r1;
        com.android.server.job.controllers.JobStatus r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, r5;
        boolean $z0, $z1;
        android.util.ArraySet $r4;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("#");

        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void printUniqueId(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" from ");

        $i0 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        staticinvoke <android.os.UserHandle: void formatUid(java.io.PrintWriter,int)>(r1, $i0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r3);

        $i1 = r2.<com.android.server.job.controllers.JobStatus: int satisfiedConstraints>;

        $i2 = $i1 & 33554432;

        if $i2 == 0 goto label1;

        r5 = " RUNNABLE";

        goto label2;

     label1:
        r5 = " WAITING";

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r5);

        $z0 = r2.<com.android.server.job.controllers.JobStatus: boolean dozeWhitelisted>;

        if $z0 == 0 goto label3;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" WHITELISTED");

     label3:
        $r4 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.ArraySet mAllowInIdleJobs>;

        $z1 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label4;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" ALLOWED_IN_DOZE");

     label4:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        return;
    }

    public void lambda$dumpControllerStateLocked$1$DeviceIdleJobsController(android.util.proto.ProtoOutputStream, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        android.util.proto.ProtoOutputStream r1;
        com.android.server.job.controllers.JobStatus r2;
        long l0;
        int $i1, $i2, $i3;
        java.lang.String $r3;
        boolean $z0, $z1, z2;
        android.util.ArraySet $r4;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        l0 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895810L);

        virtualinvoke r2.<com.android.server.job.controllers.JobStatus: void writeToShortProto(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268033L);

        $i1 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getSourceUid()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        $r3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: java.lang.String getSourcePackageName()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, $r3);

        $i2 = r2.<com.android.server.job.controllers.JobStatus: int satisfiedConstraints>;

        $i3 = $i2 & 33554432;

        if $i3 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, z2);

        $z0 = r2.<com.android.server.job.controllers.JobStatus: boolean dozeWhitelisted>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z0);

        $r4 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.ArraySet mAllowInIdleJobs>;

        $z1 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>(r2);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366150L, $z1);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        return;
    }

    public void maybeStartTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        int $i0, $i1;
        android.util.ArraySet $r3;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getFlags()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r3 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.ArraySet mAllowInIdleJobs>;

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label1:
        specialinvoke r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean updateTaskStateLocked(com.android.server.job.controllers.JobStatus)>(r1);

        return;
    }

    public void maybeStopTrackingJobLocked(com.android.server.job.controllers.JobStatus, com.android.server.job.controllers.JobStatus, boolean)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        com.android.server.job.controllers.JobStatus r1, r2;
        boolean z0;
        int $i0, $i1;
        android.util.ArraySet $r3;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getFlags()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $r3 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.ArraySet mAllowInIdleJobs>;

        virtualinvoke $r3.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void setUidActiveLocked(int, boolean)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        int i0;
        boolean z0, $z1, $z2, z3, $z4;
        android.util.SparseBooleanArray $r2, $r11;
        com.android.server.job.StateChangedListener $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r9, r10;
        com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor $r12, $r15, $r16;
        com.android.server.job.JobSchedulerService $r13;
        com.android.server.job.JobStore $r14;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids>;

        $z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if z0 == $z1 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 != 0 goto label3;

        return;

     label3:
        $z2 = <com.android.server.job.controllers.DeviceIdleJobsController: boolean DEBUG>;

        if $z2 == 0 goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" going ");

        if z0 == 0 goto label4;

        r10 = "active";

        goto label5;

     label4:
        r10 = "inactive";

     label5:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler.DeviceIdle", $r9);

     label6:
        $r11 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids>;

        virtualinvoke $r11.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

        $r12 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor>;

        $r12.<com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor: boolean mChanged> = 0;

        $r13 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.JobSchedulerService mService>;

        $r14 = virtualinvoke $r13.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r15 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor>;

        virtualinvoke $r14.<com.android.server.job.JobStore: void forEachJobForSourceUid(int,java.util.function.Consumer)>(i0, $r15);

        $r16 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor>;

        $z4 = $r16.<com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor: boolean mChanged>;

        if $z4 == 0 goto label7;

        $r3 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.StateChangedListener mStateChangedListener>;

        interfaceinvoke $r3.<com.android.server.job.StateChangedListener: void onControllerStateChanged()>();

     label7:
        return;
    }

    void updateIdleMode(boolean)
    {
        com.android.server.job.controllers.DeviceIdleJobsController r0;
        boolean z0, $z1, $z2, $z4, $z5, z6;
        java.lang.Object r1;
        android.util.SparseBooleanArray $r2, $r5, $r8;
        int $i0, $i1, i3;
        com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler $r3, $r10;
        com.android.server.job.StateChangedListener $r4;
        com.android.server.job.JobSchedulerService $r6, $r11;
        com.android.server.job.JobStore $r7, $r12;
        com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor $r9, $r13;
        java.lang.String $r16;
        java.lang.Throwable $r17;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.job.controllers.DeviceIdleJobsController;

        z0 := @parameter0: boolean;

        z6 = 0;

        r1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean mDeviceIdleMode>;

        if $z1 == z0 goto label03;

     label02:
        z6 = 1;

     label03:
        r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean mDeviceIdleMode> = z0;

        $z2 = <com.android.server.job.controllers.DeviceIdleJobsController: boolean DEBUG>;

        if $z2 == 0 goto label04;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDeviceIdleMode=");

        $z5 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: boolean mDeviceIdleMode>;

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r16 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("JobScheduler.DeviceIdle", $r16);

     label04:
        if z0 == 0 goto label07;

     label05:
        $r10 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler mHandler>;

        virtualinvoke $r10.<com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler: void removeMessages(int)>(1);

        $r11 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.JobSchedulerService mService>;

        $r12 = virtualinvoke $r11.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r13 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor>;

        virtualinvoke $r12.<com.android.server.job.JobStore: void forEachJob(java.util.function.Consumer)>($r13);

     label06:
        goto label11;

     label07:
        i3 = 0;

     label08:
        $r2 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids>;

        $i0 = virtualinvoke $r2.<android.util.SparseBooleanArray: int size()>();

        if i3 >= $i0 goto label10;

        $r5 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids>;

        $z4 = virtualinvoke $r5.<android.util.SparseBooleanArray: boolean valueAt(int)>(i3);

        if $z4 == 0 goto label09;

        $r6 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.JobSchedulerService mService>;

        $r7 = virtualinvoke $r6.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore getJobStore()>();

        $r8 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: android.util.SparseBooleanArray mForegroundUids>;

        $i1 = virtualinvoke $r8.<android.util.SparseBooleanArray: int keyAt(int)>(i3);

        $r9 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleUpdateFunctor mDeviceIdleUpdateFunctor>;

        virtualinvoke $r7.<com.android.server.job.JobStore: void forEachJobForSourceUid(int,java.util.function.Consumer)>($i1, $r9);

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        $r3 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler mHandler>;

        virtualinvoke $r3.<com.android.server.job.controllers.DeviceIdleJobsController$DeviceIdleJobsDelayHandler: boolean sendEmptyMessageDelayed(int,long)>(1, 3000L);

     label11:
        exitmonitor r1;

     label12:
        if z6 == 0 goto label13;

        $r4 = r0.<com.android.server.job.controllers.DeviceIdleJobsController: com.android.server.job.StateChangedListener mStateChangedListener>;

        interfaceinvoke $r4.<com.android.server.job.StateChangedListener: void onDeviceIdleStateChanged(boolean)>(z0);

     label13:
        return;

     label14:
        $r17 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }
}
