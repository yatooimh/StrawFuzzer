public class com.android.server.location.LocationBasedCountryDetector extends com.android.server.location.CountryDetectorBase
{
    private static final long QUERY_LOCATION_TIMEOUT;
    private static final java.lang.String TAG;
    private java.util.List mEnabledProviders;
    protected java.util.List mLocationListeners;
    private android.location.LocationManager mLocationManager;
    protected java.lang.Thread mQueryThread;
    protected java.util.Timer mTimer;

    public void <init>(android.content.Context)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.location.LocationManager $r3;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.location.CountryDetectorBase: void <init>(android.content.Context)>(r1);

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("location");

        $r3 = (android.location.LocationManager) $r2;

        r0.<com.android.server.location.LocationBasedCountryDetector: android.location.LocationManager mLocationManager> = $r3;

        return;
    }

    static void access$000(com.android.server.location.LocationBasedCountryDetector, android.location.Location)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        android.location.Location r1;

        r0 := @parameter0: com.android.server.location.LocationBasedCountryDetector;

        r1 := @parameter1: android.location.Location;

        specialinvoke r0.<com.android.server.location.LocationBasedCountryDetector: void queryCountryCode(android.location.Location)>(r1);

        return;
    }

    private void queryCountryCode(android.location.Location)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        java.lang.Thread r1, r4;
        java.lang.Throwable $r2;
        android.location.Location r3;
        com.android.server.location.LocationBasedCountryDetector$3 r5;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        r3 := @parameter0: android.location.Location;

        entermonitor r0;

     label1:
        r4 = r0.<com.android.server.location.LocationBasedCountryDetector: java.lang.Thread mQueryThread>;

     label2:
        if r4 == null goto label3;

        exitmonitor r0;

        return;

     label3:
        r1 = new java.lang.Thread;

        r5 = new com.android.server.location.LocationBasedCountryDetector$3;

        specialinvoke r5.<com.android.server.location.LocationBasedCountryDetector$3: void <init>(com.android.server.location.LocationBasedCountryDetector,android.location.Location)>(r0, r3);

        specialinvoke r1.<java.lang.Thread: void <init>(java.lang.Runnable)>(r5);

        r0.<com.android.server.location.LocationBasedCountryDetector: java.lang.Thread mQueryThread> = r1;

        virtualinvoke r1.<java.lang.Thread: void start()>();

     label4:
        exitmonitor r0;

        return;

     label5:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.location.Country detectCountry()
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        int i0, i2;
        java.lang.String r1;
        java.util.List $r2, $r5, r7;
        android.location.Location $r3;
        long $l1;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.util.ArrayList r8;
        com.android.server.location.LocationBasedCountryDetector$1 r9;
        java.util.Timer r10;
        com.android.server.location.LocationBasedCountryDetector$2 r11;
        android.location.Country r12;
        java.lang.IllegalStateException r13;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        entermonitor r0;

     label01:
        $r2 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mLocationListeners>;

        if $r2 != null goto label13;

        r7 = virtualinvoke r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()>();

        i0 = interfaceinvoke r7.<java.util.List: int size()>();

     label02:
        if i0 <= 0 goto label10;

     label03:
        r8 = new java.util.ArrayList;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mLocationListeners> = r8;

     label04:
        i2 = 0;

     label05:
        if i2 >= i0 goto label08;

     label06:
        $r4 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (java.lang.String) $r4;

        $z0 = virtualinvoke r0.<com.android.server.location.LocationBasedCountryDetector: boolean isAcceptableProvider(java.lang.String)>(r1);

        if $z0 == 0 goto label07;

        r9 = new com.android.server.location.LocationBasedCountryDetector$1;

        specialinvoke r9.<com.android.server.location.LocationBasedCountryDetector$1: void <init>(com.android.server.location.LocationBasedCountryDetector)>(r0);

        $r5 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mLocationListeners>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r9);

        virtualinvoke r0.<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)>(r1, r9);

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        r10 = new java.util.Timer;

        specialinvoke r10.<java.util.Timer: void <init>()>();

        r0.<com.android.server.location.LocationBasedCountryDetector: java.util.Timer mTimer> = r10;

        r11 = new com.android.server.location.LocationBasedCountryDetector$2;

        specialinvoke r11.<com.android.server.location.LocationBasedCountryDetector$2: void <init>(com.android.server.location.LocationBasedCountryDetector)>(r0);

        $l1 = virtualinvoke r0.<com.android.server.location.LocationBasedCountryDetector: long getQueryLocationTimeout()>();

        virtualinvoke r10.<java.util.Timer: void schedule(java.util.TimerTask,long)>(r11, $l1);

     label09:
        goto label11;

     label10:
        $r3 = virtualinvoke r0.<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()>();

        specialinvoke r0.<com.android.server.location.LocationBasedCountryDetector: void queryCountryCode(android.location.Location)>($r3);

     label11:
        r12 = r0.<com.android.server.location.LocationBasedCountryDetector: android.location.Country mDetectedCountry>;

     label12:
        exitmonitor r0;

        return r12;

     label13:
        r13 = new java.lang.IllegalStateException;

        specialinvoke r13.<java.lang.IllegalStateException: void <init>()>();

        throw r13;

     label14:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    protected java.lang.String getCountryFromLocation(android.location.Location)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        android.location.Geocoder $r1;
        android.content.Context $r2;
        double $d0, $d1;
        int $i0;
        java.lang.Object $r3;
        android.location.Address $r4;
        java.lang.Throwable $r5;
        android.location.Location r6;
        java.util.List r8;
        java.lang.String r9;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        r6 := @parameter0: android.location.Location;

        $r1 = new android.location.Geocoder;

        $r2 = r0.<com.android.server.location.LocationBasedCountryDetector: android.content.Context mContext>;

        specialinvoke $r1.<android.location.Geocoder: void <init>(android.content.Context)>($r2);

     label1:
        $d0 = virtualinvoke r6.<android.location.Location: double getLatitude()>();

        $d1 = virtualinvoke r6.<android.location.Location: double getLongitude()>();

        r8 = virtualinvoke $r1.<android.location.Geocoder: java.util.List getFromLocation(double,double,int)>($d0, $d1, 1);

     label2:
        r9 = null;

        if r8 == null goto label4;

        r9 = null;

     label3:
        $i0 = interfaceinvoke r8.<java.util.List: int size()>();

        if $i0 <= 0 goto label4;

        $r3 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.location.Address) $r3;

        r9 = virtualinvoke $r4.<android.location.Address: java.lang.String getCountryCode()>();

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LocationBasedCountryDetector", "Exception occurs when getting country from location");

        r9 = null;

     label6:
        return r9;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    protected java.util.List getEnabledProviders()
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        java.util.List $r1, $r2, $r4;
        android.location.LocationManager $r3;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        $r1 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mEnabledProviders>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.location.LocationBasedCountryDetector: android.location.LocationManager mLocationManager>;

        $r4 = virtualinvoke $r3.<android.location.LocationManager: java.util.List getProviders(boolean)>(1);

        r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mEnabledProviders> = $r4;

     label1:
        $r2 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mEnabledProviders>;

        return $r2;
    }

    protected android.location.Location getLastKnownLocation()
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        long l0, l1, l2;
        java.util.Iterator r1;
        android.location.Location r2, r8, r10;
        android.location.LocationManager $r3, $r5;
        boolean $z0;
        java.lang.Object $r4;
        byte $b3;
        java.lang.Throwable $r6;
        java.util.List r7;
        java.lang.String r9;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r3 = r0.<com.android.server.location.LocationBasedCountryDetector: android.location.LocationManager mLocationManager>;

        r7 = virtualinvoke $r3.<android.location.LocationManager: java.util.List getAllProviders()>();

     label02:
        r8 = null;

     label03:
        r1 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.lang.String) $r4;

        $r5 = r0.<com.android.server.location.LocationBasedCountryDetector: android.location.LocationManager mLocationManager>;

        r2 = virtualinvoke $r5.<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>(r9);

     label05:
        r10 = r8;

        if r2 == null goto label09;

        if r8 == null goto label08;

     label06:
        l1 = virtualinvoke r8.<android.location.Location: long getElapsedRealtimeNanos()>();

        l2 = virtualinvoke r2.<android.location.Location: long getElapsedRealtimeNanos()>();

     label07:
        r10 = r8;

        $b3 = l1 cmp l2;

        if $b3 >= 0 goto label09;

     label08:
        r10 = r2;

     label09:
        r8 = r10;

        goto label04;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r8;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
    }

    protected long getQueryLocationTimeout()
    {
        com.android.server.location.LocationBasedCountryDetector r0;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        return 300000L;
    }

    protected boolean isAcceptableProvider(java.lang.String)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        r1 := @parameter0: java.lang.String;

        $r2 = "passive";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    protected void registerListener(java.lang.String, android.location.LocationListener)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        android.location.LocationListener r1;
        long l0;
        android.location.LocationManager $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: android.location.LocationListener;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.location.LocationBasedCountryDetector: android.location.LocationManager mLocationManager>;

        virtualinvoke $r2.<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>(r4, 0L, 0.0F, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stop()
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        java.util.List $r1, $r4;
        java.util.Timer $r2, $r3;
        boolean $z0;
        java.lang.Object $r5;
        android.location.LocationListener $r6;
        java.lang.Throwable $r7;
        java.util.Iterator r8;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mLocationListeners>;

        if $r1 == null goto label5;

        $r4 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mLocationListeners>;

        r8 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.location.LocationListener) $r5;

        virtualinvoke r0.<com.android.server.location.LocationBasedCountryDetector: void unregisterListener(android.location.LocationListener)>($r6);

     label3:
        goto label2;

     label4:
        r0.<com.android.server.location.LocationBasedCountryDetector: java.util.List mLocationListeners> = null;

     label5:
        $r2 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.Timer mTimer>;

        if $r2 == null goto label6;

        $r3 = r0.<com.android.server.location.LocationBasedCountryDetector: java.util.Timer mTimer>;

        virtualinvoke $r3.<java.util.Timer: void cancel()>();

        r0.<com.android.server.location.LocationBasedCountryDetector: java.util.Timer mTimer> = null;

     label6:
        exitmonitor r0;

        return;

     label7:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    protected void unregisterListener(android.location.LocationListener)
    {
        com.android.server.location.LocationBasedCountryDetector r0;
        long l0;
        android.location.LocationManager $r1;
        java.lang.Throwable $r2;
        android.location.LocationListener r3;

        r0 := @this: com.android.server.location.LocationBasedCountryDetector;

        r3 := @parameter0: android.location.LocationListener;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.location.LocationBasedCountryDetector: android.location.LocationManager mLocationManager>;

        virtualinvoke $r1.<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>(r3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.location.LocationBasedCountryDetector: java.lang.String TAG> = "LocationBasedCountryDetector";

        <com.android.server.location.LocationBasedCountryDetector: long QUERY_LOCATION_TIMEOUT> = 300000L;

        return;
    }
}
