public class com.android.server.location.LocationFudger extends java.lang.Object
{
    private static final int APPROXIMATE_METERS_PER_DEGREE_AT_EQUATOR;
    private static final double CHANGE_PER_INTERVAL;
    private static final double MAX_LATITUDE;
    private static final float MIN_ACCURACY_M;
    private static final double NEW_WEIGHT;
    static final long OFFSET_UPDATE_INTERVAL_MS;
    private static final double OLD_WEIGHT;
    private final float mAccuracyM;
    private android.location.Location mCachedCoarseLocation;
    private android.location.Location mCachedFineLocation;
    private final java.time.Clock mClock;
    private double mLatitudeOffsetM;
    private double mLongitudeOffsetM;
    private long mNextUpdateRealtimeMs;
    private final java.util.Random mRandom;

    static void <clinit>()
    {
        double $d0;

        <com.android.server.location.LocationFudger: long OFFSET_UPDATE_INTERVAL_MS> = 3600000L;

        <com.android.server.location.LocationFudger: double NEW_WEIGHT> = 0.03;

        <com.android.server.location.LocationFudger: float MIN_ACCURACY_M> = 200.0F;

        <com.android.server.location.LocationFudger: double MAX_LATITUDE> = 89.999990990991;

        <com.android.server.location.LocationFudger: double CHANGE_PER_INTERVAL> = 0.03;

        <com.android.server.location.LocationFudger: int APPROXIMATE_METERS_PER_DEGREE_AT_EQUATOR> = 111000;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>(0.9991);

        <com.android.server.location.LocationFudger: double OLD_WEIGHT> = $d0;

        return;
    }

    public void <init>(float)
    {
        com.android.server.location.LocationFudger r0;
        float f0;
        java.time.Clock $r1;
        java.security.SecureRandom $r2;

        r0 := @this: com.android.server.location.LocationFudger;

        f0 := @parameter0: float;

        $r1 = staticinvoke <android.os.SystemClock: java.time.Clock elapsedRealtimeClock()>();

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        specialinvoke r0.<com.android.server.location.LocationFudger: void <init>(float,java.time.Clock,java.util.Random)>(f0, $r1, $r2);

        return;
    }

    void <init>(float, java.time.Clock, java.util.Random)
    {
        com.android.server.location.LocationFudger r0;
        float f0, $f1;
        java.time.Clock r1;
        java.util.Random r2;

        r0 := @this: com.android.server.location.LocationFudger;

        f0 := @parameter0: float;

        r1 := @parameter1: java.time.Clock;

        r2 := @parameter2: java.util.Random;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.location.LocationFudger: java.time.Clock mClock> = r1;

        r0.<com.android.server.location.LocationFudger: java.util.Random mRandom> = r2;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>(f0, 200.0F);

        r0.<com.android.server.location.LocationFudger: float mAccuracyM> = $f1;

        virtualinvoke r0.<com.android.server.location.LocationFudger: void resetOffsets()>();

        return;
    }

    private static double metersToDegreesLatitude(double)
    {
        double d0, $d1;

        d0 := @parameter0: double;

        $d1 = d0 / 111000.0;

        return $d1;
    }

    private static double metersToDegreesLongitude(double, double)
    {
        double d0, d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $d2 = d0 / 111000.0;

        $d3 = staticinvoke <java.lang.Math: double toRadians(double)>(d1);

        $d4 = staticinvoke <java.lang.Math: double cos(double)>($d3);

        $d5 = $d2 / $d4;

        return $d5;
    }

    private double nextRandomOffset()
    {
        com.android.server.location.LocationFudger r0;
        java.util.Random $r1;
        double $d0, $d1, $d2, $d3;
        float $f0;

        r0 := @this: com.android.server.location.LocationFudger;

        $r1 = r0.<com.android.server.location.LocationFudger: java.util.Random mRandom>;

        $d0 = virtualinvoke $r1.<java.util.Random: double nextGaussian()>();

        $f0 = r0.<com.android.server.location.LocationFudger: float mAccuracyM>;

        $d1 = (double) $f0;

        $d2 = $d1 / 4.0;

        $d3 = $d0 * $d2;

        return $d3;
    }

    private void updateOffsets()
    {
        com.android.server.location.LocationFudger r0;
        long l0, l1, $l3;
        java.time.Clock $r2;
        byte $b2;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.location.LocationFudger;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.location.LocationFudger: java.time.Clock mClock>;

        l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

        l1 = r0.<com.android.server.location.LocationFudger: long mNextUpdateRealtimeMs>;

     label2:
        $b2 = l0 cmp l1;

        if $b2 >= 0 goto label3;

        exitmonitor r0;

        return;

     label3:
        $d1 = <com.android.server.location.LocationFudger: double OLD_WEIGHT>;

        $d0 = r0.<com.android.server.location.LocationFudger: double mLatitudeOffsetM>;

        $d2 = $d1 * $d0;

        $d3 = specialinvoke r0.<com.android.server.location.LocationFudger: double nextRandomOffset()>();

        $d4 = $d3 * 0.03;

        $d5 = $d2 + $d4;

        r0.<com.android.server.location.LocationFudger: double mLatitudeOffsetM> = $d5;

        $d7 = <com.android.server.location.LocationFudger: double OLD_WEIGHT>;

        $d6 = r0.<com.android.server.location.LocationFudger: double mLongitudeOffsetM>;

        $d8 = $d7 * $d6;

        $d9 = specialinvoke r0.<com.android.server.location.LocationFudger: double nextRandomOffset()>();

        $d10 = $d9 * 0.03;

        $d11 = $d8 + $d10;

        r0.<com.android.server.location.LocationFudger: double mLongitudeOffsetM> = $d11;

        $l3 = 3600000L + l0;

        r0.<com.android.server.location.LocationFudger: long mNextUpdateRealtimeMs> = $l3;

     label4:
        exitmonitor r0;

        return;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static double wrapLatitude(double)
    {
        byte $b0, $b1;
        double d0, d1, d2;

        d0 := @parameter0: double;

        d1 = d0;

        $b0 = d0 cmpl 89.999990990991;

        if $b0 <= 0 goto label1;

        d1 = 89.999990990991;

     label1:
        d2 = d1;

        $b1 = d1 cmpg -89.999990990991;

        if $b1 >= 0 goto label2;

        d2 = -89.999990990991;

     label2:
        return d2;
    }

    private static double wrapLongitude(double)
    {
        byte $b0, $b1;
        double d0, d1, d2, d3;

        d0 := @parameter0: double;

        d1 = d0 % 360.0;

        d2 = d1;

        $b0 = d1 cmpl 180.0;

        if $b0 < 0 goto label1;

        d2 = d1 - 360.0;

     label1:
        d3 = d2;

        $b1 = d2 cmpg -180.0;

        if $b1 >= 0 goto label2;

        d3 = d2 + 360.0;

     label2:
        return d3;
    }

    public android.location.Location createCoarse(android.location.Location)
    {
        com.android.server.location.LocationFudger r0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18, d19, d20, d21, d22, d23;
        android.location.Location $r2, $r3, $r4, $r5, $r6, r9, r10;
        float $f0, $f1, $f2, $f3, $f4;
        long $l0, $l1;
        java.lang.Throwable $r7, $r8;

        r0 := @this: com.android.server.location.LocationFudger;

        r9 := @parameter0: android.location.Location;

        entermonitor r0;

     label01:
        $r2 = r0.<com.android.server.location.LocationFudger: android.location.Location mCachedFineLocation>;

        if r9 != $r2 goto label03;

        r10 = new android.location.Location;

        $r6 = r0.<com.android.server.location.LocationFudger: android.location.Location mCachedCoarseLocation>;

        specialinvoke r10.<android.location.Location: void <init>(android.location.Location)>($r6);

        exitmonitor r0;

     label02:
        return r10;

     label03:
        exitmonitor r0;

     label04:
        specialinvoke r0.<com.android.server.location.LocationFudger: void updateOffsets()>();

        $r3 = new android.location.Location;

        specialinvoke $r3.<android.location.Location: void <init>(android.location.Location)>(r9);

        virtualinvoke $r3.<android.location.Location: void removeBearing()>();

        virtualinvoke $r3.<android.location.Location: void removeSpeed()>();

        virtualinvoke $r3.<android.location.Location: void removeAltitude()>();

        virtualinvoke $r3.<android.location.Location: void setExtras(android.os.Bundle)>(null);

        $d2 = virtualinvoke $r3.<android.location.Location: double getLatitude()>();

        d18 = staticinvoke <com.android.server.location.LocationFudger: double wrapLatitude(double)>($d2);

        $d3 = virtualinvoke $r3.<android.location.Location: double getLongitude()>();

        d19 = staticinvoke <com.android.server.location.LocationFudger: double wrapLongitude(double)>($d3);

        $d4 = r0.<com.android.server.location.LocationFudger: double mLongitudeOffsetM>;

        $d5 = staticinvoke <com.android.server.location.LocationFudger: double metersToDegreesLongitude(double,double)>($d4, d18);

        d0 = staticinvoke <com.android.server.location.LocationFudger: double wrapLongitude(double)>($d5);

        $d6 = r0.<com.android.server.location.LocationFudger: double mLatitudeOffsetM>;

        $d7 = staticinvoke <com.android.server.location.LocationFudger: double metersToDegreesLatitude(double)>($d6);

        d1 = staticinvoke <com.android.server.location.LocationFudger: double wrapLatitude(double)>($d7);

        $f0 = r0.<com.android.server.location.LocationFudger: float mAccuracyM>;

        $d8 = (double) $f0;

        d20 = staticinvoke <com.android.server.location.LocationFudger: double metersToDegreesLatitude(double)>($d8);

        $d9 = d18 + d1;

        $d10 = $d9 / d20;

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d10);

        $d11 = (double) $l0;

        $d12 = $d11 * d20;

        d21 = staticinvoke <com.android.server.location.LocationFudger: double wrapLatitude(double)>($d12);

        $f1 = r0.<com.android.server.location.LocationFudger: float mAccuracyM>;

        $d13 = (double) $f1;

        d22 = staticinvoke <com.android.server.location.LocationFudger: double metersToDegreesLongitude(double,double)>($d13, d21);

        $d14 = d19 + d0;

        $d15 = $d14 / d22;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d15);

        $d16 = (double) $l1;

        $d17 = $d16 * d22;

        d23 = staticinvoke <com.android.server.location.LocationFudger: double wrapLongitude(double)>($d17);

        virtualinvoke $r3.<android.location.Location: void setLatitude(double)>(d21);

        virtualinvoke $r3.<android.location.Location: void setLongitude(double)>(d23);

        $f2 = r0.<com.android.server.location.LocationFudger: float mAccuracyM>;

        $f3 = virtualinvoke $r3.<android.location.Location: float getAccuracy()>();

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        virtualinvoke $r3.<android.location.Location: void setAccuracy(float)>($f4);

        entermonitor r0;

     label05:
        r0.<com.android.server.location.LocationFudger: android.location.Location mCachedFineLocation> = r9;

        r0.<com.android.server.location.LocationFudger: android.location.Location mCachedCoarseLocation> = $r3;

        exitmonitor r0;

     label06:
        $r4 = new android.location.Location;

        $r5 = r0.<com.android.server.location.LocationFudger: android.location.Location mCachedCoarseLocation>;

        specialinvoke $r4.<android.location.Location: void <init>(android.location.Location)>($r5);

        return $r4;

     label07:
        $r7 := @caughtexception;

     label08:
        exitmonitor r0;

     label09:
        throw $r7;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void resetOffsets()
    {
        com.android.server.location.LocationFudger r0;
        double $d0, $d1;
        java.time.Clock $r1;
        long $l0, $l1;

        r0 := @this: com.android.server.location.LocationFudger;

        $d0 = specialinvoke r0.<com.android.server.location.LocationFudger: double nextRandomOffset()>();

        r0.<com.android.server.location.LocationFudger: double mLatitudeOffsetM> = $d0;

        $d1 = specialinvoke r0.<com.android.server.location.LocationFudger: double nextRandomOffset()>();

        r0.<com.android.server.location.LocationFudger: double mLongitudeOffsetM> = $d1;

        $r1 = r0.<com.android.server.location.LocationFudger: java.time.Clock mClock>;

        $l0 = virtualinvoke $r1.<java.time.Clock: long millis()>();

        $l1 = $l0 + 3600000L;

        r0.<com.android.server.location.LocationFudger: long mNextUpdateRealtimeMs> = $l1;

        return;
    }
}
