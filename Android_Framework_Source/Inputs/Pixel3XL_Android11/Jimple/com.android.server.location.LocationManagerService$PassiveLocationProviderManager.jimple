class com.android.server.location.LocationManagerService$PassiveLocationProviderManager extends com.android.server.location.LocationManagerService$LocationProviderManager
{
    final com.android.server.location.LocationManagerService this$0;

    private void <init>(com.android.server.location.LocationManagerService)
    {
        com.android.server.location.LocationManagerService$PassiveLocationProviderManager r0;
        com.android.server.location.LocationManagerService r1;

        r0 := @this: com.android.server.location.LocationManagerService$PassiveLocationProviderManager;

        r1 := @parameter0: com.android.server.location.LocationManagerService;

        r0.<com.android.server.location.LocationManagerService$PassiveLocationProviderManager: com.android.server.location.LocationManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.location.LocationManagerService$LocationProviderManager: void <init>(com.android.server.location.LocationManagerService,java.lang.String,com.android.server.location.LocationManagerService$1)>(r1, "passive", null);

        return;
    }

    void <init>(com.android.server.location.LocationManagerService, com.android.server.location.LocationManagerService$1)
    {
        com.android.server.location.LocationManagerService$PassiveLocationProviderManager r0;
        com.android.server.location.LocationManagerService r1;
        com.android.server.location.LocationManagerService$1 r2;

        r0 := @this: com.android.server.location.LocationManagerService$PassiveLocationProviderManager;

        r1 := @parameter0: com.android.server.location.LocationManagerService;

        r2 := @parameter1: com.android.server.location.LocationManagerService$1;

        specialinvoke r0.<com.android.server.location.LocationManagerService$PassiveLocationProviderManager: void <init>(com.android.server.location.LocationManagerService)>(r1);

        return;
    }

    public void setMockProvider(com.android.server.location.MockProvider)
    {
        com.android.server.location.LocationManagerService$PassiveLocationProviderManager r0;
        com.android.server.location.MockProvider r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.server.location.LocationManagerService$PassiveLocationProviderManager;

        r1 := @parameter0: com.android.server.location.MockProvider;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot mock the passive provider");

        throw $r2;
    }

    public void setRealProvider(com.android.server.location.AbstractLocationProvider)
    {
        com.android.server.location.LocationManagerService$PassiveLocationProviderManager r0;
        com.android.server.location.AbstractLocationProvider r1;
        boolean $z0;

        r0 := @this: com.android.server.location.LocationManagerService$PassiveLocationProviderManager;

        r1 := @parameter0: com.android.server.location.AbstractLocationProvider;

        $z0 = r1 instanceof com.android.server.location.PassiveProvider;

        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>($z0);

        specialinvoke r0.<com.android.server.location.LocationManagerService$LocationProviderManager: void setRealProvider(com.android.server.location.AbstractLocationProvider)>(r1);

        return;
    }

    public void updateLocation(android.location.Location)
    {
        com.android.server.location.LocationManagerService$PassiveLocationProviderManager r0;
        java.lang.Object r1;
        com.android.server.location.PassiveProvider r2;
        long l0;
        com.android.server.location.LocationManagerService $r3;
        com.android.server.location.MockableLocationProvider $r4;
        com.android.server.location.AbstractLocationProvider $r5;
        java.lang.Throwable $r6, $r7;
        android.location.Location r8;
        boolean z0;

        r0 := @this: com.android.server.location.LocationManagerService$PassiveLocationProviderManager;

        r8 := @parameter0: android.location.Location;

        $r3 = r0.<com.android.server.location.LocationManagerService$PassiveLocationProviderManager: com.android.server.location.LocationManagerService this$0>;

        r1 = staticinvoke <com.android.server.location.LocationManagerService: java.lang.Object access$600(com.android.server.location.LocationManagerService)>($r3);

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.location.LocationManagerService$PassiveLocationProviderManager: com.android.server.location.MockableLocationProvider mProvider>;

        $r5 = virtualinvoke $r4.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider getProvider()>();

        r2 = (com.android.server.location.PassiveProvider) $r5;

     label02:
        if r2 == null goto label03;

        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>(z0);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        virtualinvoke r2.<com.android.server.location.PassiveProvider: void updateLocation(android.location.Location)>(r8);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r6 := @caughtexception;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label11:
        throw $r6;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }
}
