public class com.android.server.location.MockableLocationProvider extends com.android.server.location.AbstractLocationProvider
{
    private com.android.server.location.MockProvider mMockProvider;
    private final java.lang.Object mOwnerLock;
    private com.android.server.location.AbstractLocationProvider mProvider;
    private com.android.server.location.AbstractLocationProvider mRealProvider;
    private com.android.internal.location.ProviderRequest mRequest;

    public void <init>(java.lang.Object, com.android.server.location.AbstractLocationProvider$Listener)
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        com.android.server.location.AbstractLocationProvider$Listener r2;
        java.util.concurrent.Executor $r3;
        java.util.Set $r4;
        com.android.internal.location.ProviderRequest $r5;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.android.server.location.AbstractLocationProvider$Listener;

        $r3 = <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR>;

        $r4 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        specialinvoke r0.<com.android.server.location.AbstractLocationProvider: void <init>(java.util.concurrent.Executor,java.util.Set)>($r3, $r4);

        r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock> = r1;

        $r5 = <com.android.internal.location.ProviderRequest: com.android.internal.location.ProviderRequest EMPTY_REQUEST>;

        r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest> = $r5;

        virtualinvoke r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider$State setListener(com.android.server.location.AbstractLocationProvider$Listener)>(r2);

        return;
    }

    static java.lang.Object access$100(com.android.server.location.MockableLocationProvider)
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.location.MockableLocationProvider;

        $r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        return $r1;
    }

    static com.android.server.location.AbstractLocationProvider access$200(com.android.server.location.MockableLocationProvider)
    {
        com.android.server.location.MockableLocationProvider r0;
        com.android.server.location.AbstractLocationProvider $r1;

        r0 := @parameter0: com.android.server.location.MockableLocationProvider;

        $r1 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        return $r1;
    }

    private void setProviderLocked(com.android.server.location.AbstractLocationProvider)
    {
        com.android.server.location.MockableLocationProvider r0;
        com.android.server.location.AbstractLocationProvider r1, $r2, r6, r7, r8;
        com.android.server.location.MockableLocationProvider$ListenerWrapper $r3;
        com.android.internal.location.ProviderRequest $r5, r10, r11;
        com.android.server.location.AbstractLocationProvider$State r9;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r6 := @parameter0: com.android.server.location.AbstractLocationProvider;

        $r2 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        if $r2 != r6 goto label1;

        return;

     label1:
        r7 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider> = r6;

        if r7 == null goto label2;

        virtualinvoke r7.<com.android.server.location.AbstractLocationProvider: com.android.server.location.AbstractLocationProvider$State setListener(com.android.server.location.AbstractLocationProvider$Listener)>(null);

        $r5 = <com.android.internal.location.ProviderRequest: com.android.internal.location.ProviderRequest EMPTY_REQUEST>;

        virtualinvoke r7.<com.android.server.location.AbstractLocationProvider: void setRequest(com.android.internal.location.ProviderRequest)>($r5);

     label2:
        r8 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        if r8 == null goto label3;

        $r3 = new com.android.server.location.MockableLocationProvider$ListenerWrapper;

        specialinvoke $r3.<com.android.server.location.MockableLocationProvider$ListenerWrapper: void <init>(com.android.server.location.MockableLocationProvider,com.android.server.location.AbstractLocationProvider,com.android.server.location.MockableLocationProvider$1)>(r0, r8, null);

        r9 = virtualinvoke r8.<com.android.server.location.AbstractLocationProvider: com.android.server.location.AbstractLocationProvider$State setListener(com.android.server.location.AbstractLocationProvider$Listener)>($r3);

        goto label4;

     label3:
        r9 = <com.android.server.location.AbstractLocationProvider$State: com.android.server.location.AbstractLocationProvider$State EMPTY_STATE>;

     label4:
        r10 = r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest>;

        virtualinvoke r0.<com.android.server.location.MockableLocationProvider: void setState(com.android.server.location.AbstractLocationProvider$State)>(r9);

        r1 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        if r1 == null goto label5;

        r11 = r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest>;

        if r10 != r11 goto label5;

        virtualinvoke r1.<com.android.server.location.AbstractLocationProvider: void setRequest(com.android.internal.location.ProviderRequest)>(r11);

     label5:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.location.MockableLocationProvider r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        java.lang.Object r3, $r5;
        com.android.server.location.AbstractLocationProvider r4;
        boolean $z0, $z1, $z2;
        com.android.server.location.AbstractLocationProvider$State $r7, $r11, $r16;
        java.lang.String $r9, $r14, $r19, $r23;
        com.android.internal.location.ProviderProperties $r12;
        java.util.Set $r17;
        com.android.internal.location.ProviderRequest $r21;
        java.lang.Throwable $r24;
        java.io.FileDescriptor r25;
        java.lang.StringBuilder r26, r27, r28, r29;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r25 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r5);

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        r3 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r3;

     label1:
        r4 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("allowed=");

        $r7 = virtualinvoke r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider$State getState()>();

        $z2 = $r7.<com.android.server.location.AbstractLocationProvider$State: boolean allowed>;

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r9 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("properties=");

        $r11 = virtualinvoke r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider$State getState()>();

        $r12 = $r11.<com.android.server.location.AbstractLocationProvider$State: com.android.internal.location.ProviderProperties properties>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("packages=");

        $r16 = virtualinvoke r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider$State getState()>();

        $r17 = $r16.<com.android.server.location.AbstractLocationProvider$State: java.util.Set providerPackageNames>;

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("request=");

        $r21 = r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest>;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        exitmonitor r3;

     label2:
        if r4 == null goto label3;

        virtualinvoke r4.<com.android.server.location.AbstractLocationProvider: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r25, r1, r2);

     label3:
        return;

     label4:
        $r24 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        throw $r24;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public com.android.internal.location.ProviderRequest getCurrentRequest()
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.internal.location.ProviderRequest r3;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.android.server.location.AbstractLocationProvider getProvider()
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.location.AbstractLocationProvider r3;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isMock()
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        com.android.server.location.MockProvider $r3, $r4;
        com.android.server.location.AbstractLocationProvider $r5;
        java.lang.Throwable $r6;
        boolean z0;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.MockProvider mMockProvider>;

        if $r3 == null goto label3;

        $r5 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        $r4 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.MockProvider mMockProvider>;

        if $r5 != $r4 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected void onExtraCommand(int, int, java.lang.String, android.os.Bundle)
    {
        com.android.server.location.MockableLocationProvider r0;
        int i0, i1;
        android.os.Bundle r1;
        java.lang.Object r2;
        com.android.server.location.AbstractLocationProvider $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: android.os.Bundle;

        r2 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        virtualinvoke $r4.<com.android.server.location.AbstractLocationProvider: void sendExtraCommand(int,int,java.lang.String,android.os.Bundle)>(i0, i1, r6, r1);

     label2:
        exitmonitor r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected void onSetRequest(com.android.internal.location.ProviderRequest)
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        com.android.internal.location.ProviderRequest $r2, r6;
        com.android.server.location.AbstractLocationProvider $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r6 := @parameter0: com.android.internal.location.ProviderRequest;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest>;

        if r6 != $r2 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.location.MockableLocationProvider: com.android.internal.location.ProviderRequest mRequest> = r6;

        $r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        if $r3 == null goto label4;

        $r4 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mProvider>;

        virtualinvoke $r4.<com.android.server.location.AbstractLocationProvider: void setRequest(com.android.internal.location.ProviderRequest)>(r6);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setMockProvider(com.android.server.location.MockProvider)
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        com.android.server.location.MockProvider $r2, r5;
        com.android.server.location.AbstractLocationProvider $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r5 := @parameter0: com.android.server.location.MockProvider;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.MockProvider mMockProvider>;

        if $r2 != r5 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.MockProvider mMockProvider> = r5;

     label04:
        if r5 == null goto label07;

     label05:
        specialinvoke r0.<com.android.server.location.MockableLocationProvider: void setProviderLocked(com.android.server.location.AbstractLocationProvider)>(r5);

     label06:
        goto label08;

     label07:
        $r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mRealProvider>;

        specialinvoke r0.<com.android.server.location.MockableLocationProvider: void setProviderLocked(com.android.server.location.AbstractLocationProvider)>($r3);

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setMockProviderAllowed(boolean)
    {
        com.android.server.location.MockableLocationProvider r0;
        boolean z0, $z1;
        java.lang.Object r1;
        com.android.server.location.MockProvider $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.location.MockableLocationProvider: boolean isMock()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        $r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.MockProvider mMockProvider>;

        virtualinvoke $r3.<com.android.server.location.MockProvider: void setProviderAllowed(boolean)>(z0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setMockProviderLocation(android.location.Location)
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.location.MockProvider $r2;
        java.lang.Throwable $r3;
        android.location.Location r4;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r4 := @parameter0: android.location.Location;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.location.MockableLocationProvider: boolean isMock()>();

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z0);

        $r2 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.MockProvider mMockProvider>;

        virtualinvoke $r2.<com.android.server.location.MockProvider: void setProviderLocation(android.location.Location)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setRealProvider(com.android.server.location.AbstractLocationProvider)
    {
        com.android.server.location.MockableLocationProvider r0;
        java.lang.Object r1;
        com.android.server.location.AbstractLocationProvider $r2, $r3, r5;
        boolean $z0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.location.MockableLocationProvider;

        r5 := @parameter0: com.android.server.location.AbstractLocationProvider;

        r1 = r0.<com.android.server.location.MockableLocationProvider: java.lang.Object mOwnerLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mRealProvider>;

        if $r2 != r5 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mRealProvider> = r5;

        $z0 = virtualinvoke r0.<com.android.server.location.MockableLocationProvider: boolean isMock()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<com.android.server.location.MockableLocationProvider: com.android.server.location.AbstractLocationProvider mRealProvider>;

        specialinvoke r0.<com.android.server.location.MockableLocationProvider: void setProviderLocked(com.android.server.location.AbstractLocationProvider)>($r3);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
