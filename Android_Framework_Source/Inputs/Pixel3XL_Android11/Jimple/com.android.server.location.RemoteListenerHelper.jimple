public abstract class com.android.server.location.RemoteListenerHelper extends java.lang.Object
{
    protected static final int RESULT_GPS_LOCATION_DISABLED;
    protected static final int RESULT_INTERNAL_ERROR;
    protected static final int RESULT_NOT_ALLOWED;
    protected static final int RESULT_NOT_AVAILABLE;
    protected static final int RESULT_NOT_SUPPORTED;
    protected static final int RESULT_SUCCESS;
    protected static final int RESULT_UNKNOWN;
    protected final android.app.AppOpsManager mAppOps;
    protected final android.content.Context mContext;
    protected final android.os.Handler mHandler;
    private boolean mHasIsSupported;
    private volatile boolean mIsRegistered;
    private boolean mIsSupported;
    private int mLastReportedResult;
    protected final java.util.Map mListenerMap;
    private final java.lang.String mTag;

    protected void <init>(android.content.Context, android.os.Handler, java.lang.String)
    {
        com.android.server.location.RemoteListenerHelper r0;
        android.content.Context r1;
        android.os.Handler r2;
        java.lang.String r3;
        java.util.HashMap $r4;
        java.lang.Object $r6;
        android.app.AppOpsManager $r7;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap> = $r4;

        r0.<com.android.server.location.RemoteListenerHelper: int mLastReportedResult> = 5;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r3);

        r0.<com.android.server.location.RemoteListenerHelper: android.os.Handler mHandler> = r2;

        r0.<com.android.server.location.RemoteListenerHelper: java.lang.String mTag> = r3;

        r0.<com.android.server.location.RemoteListenerHelper: android.content.Context mContext> = r1;

        $r6 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r7 = (android.app.AppOpsManager) $r6;

        r0.<com.android.server.location.RemoteListenerHelper: android.app.AppOpsManager mAppOps> = $r7;

        return;
    }

    static boolean access$200(com.android.server.location.RemoteListenerHelper)
    {
        com.android.server.location.RemoteListenerHelper r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.location.RemoteListenerHelper;

        $z0 = r0.<com.android.server.location.RemoteListenerHelper: boolean mIsRegistered>;

        return $z0;
    }

    static boolean access$202(com.android.server.location.RemoteListenerHelper, boolean)
    {
        com.android.server.location.RemoteListenerHelper r0;
        boolean z0;

        r0 := @parameter0: com.android.server.location.RemoteListenerHelper;

        z0 := @parameter1: boolean;

        r0.<com.android.server.location.RemoteListenerHelper: boolean mIsRegistered> = z0;

        return z0;
    }

    static void access$300(com.android.server.location.RemoteListenerHelper, com.android.server.location.RemoteListenerHelper$ListenerOperation)
    {
        com.android.server.location.RemoteListenerHelper r0;
        com.android.server.location.RemoteListenerHelper$ListenerOperation r1;

        r0 := @parameter0: com.android.server.location.RemoteListenerHelper;

        r1 := @parameter1: com.android.server.location.RemoteListenerHelper$ListenerOperation;

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void foreachUnsafe(com.android.server.location.RemoteListenerHelper$ListenerOperation)>(r1);

        return;
    }

    static java.lang.String access$600(com.android.server.location.RemoteListenerHelper)
    {
        com.android.server.location.RemoteListenerHelper r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.location.RemoteListenerHelper;

        $r1 = r0.<com.android.server.location.RemoteListenerHelper: java.lang.String mTag>;

        return $r1;
    }

    private int calculateCurrentResultUnsafe()
    {
        com.android.server.location.RemoteListenerHelper r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Map $r1;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        $z0 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: boolean isAvailableInPlatform()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z1 = r0.<com.android.server.location.RemoteListenerHelper: boolean mHasIsSupported>;

        if $z1 == 0 goto label5;

        $r1 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        $z2 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        goto label5;

     label2:
        $z3 = r0.<com.android.server.location.RemoteListenerHelper: boolean mIsSupported>;

        if $z3 != 0 goto label3;

        return 2;

     label3:
        $z4 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: boolean isGpsEnabled()>();

        if $z4 != 0 goto label4;

        return 3;

     label4:
        return 0;

     label5:
        return 5;
    }

    private void foreachUnsafe(com.android.server.location.RemoteListenerHelper$ListenerOperation)
    {
        com.android.server.location.RemoteListenerHelper r0;
        com.android.server.location.RemoteListenerHelper$ListenerOperation r1;
        java.util.Iterator r2;
        java.util.Map $r3;
        java.util.Collection $r4;
        boolean $z0;
        java.lang.Object $r5;
        com.android.server.location.RemoteListenerHelper$IdentifiedListener $r6;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 := @parameter0: com.android.server.location.RemoteListenerHelper$ListenerOperation;

        $r3 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.location.RemoteListenerHelper$IdentifiedListener) $r5;

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void post(com.android.server.location.RemoteListenerHelper$IdentifiedListener,com.android.server.location.RemoteListenerHelper$ListenerOperation)>($r6, r1);

        goto label1;

     label2:
        return;
    }

    private void post(com.android.server.location.RemoteListenerHelper$IdentifiedListener, com.android.server.location.RemoteListenerHelper$ListenerOperation)
    {
        com.android.server.location.RemoteListenerHelper r0;
        com.android.server.location.RemoteListenerHelper$IdentifiedListener r1;
        com.android.server.location.RemoteListenerHelper$ListenerOperation r2;
        com.android.server.location.RemoteListenerHelper$HandlerRunnable $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 := @parameter0: com.android.server.location.RemoteListenerHelper$IdentifiedListener;

        r2 := @parameter1: com.android.server.location.RemoteListenerHelper$ListenerOperation;

        if r2 == null goto label1;

        $r4 = r0.<com.android.server.location.RemoteListenerHelper: android.os.Handler mHandler>;

        $r3 = new com.android.server.location.RemoteListenerHelper$HandlerRunnable;

        specialinvoke $r3.<com.android.server.location.RemoteListenerHelper$HandlerRunnable: void <init>(com.android.server.location.RemoteListenerHelper,com.android.server.location.RemoteListenerHelper$IdentifiedListener,com.android.server.location.RemoteListenerHelper$ListenerOperation,com.android.server.location.RemoteListenerHelper$1)>(r0, r1, r2, null);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

     label1:
        return;
    }

    private void tryRegister()
    {
        com.android.server.location.RemoteListenerHelper r0;
        com.android.server.location.RemoteListenerHelper$1 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        $r2 = r0.<com.android.server.location.RemoteListenerHelper: android.os.Handler mHandler>;

        $r1 = new com.android.server.location.RemoteListenerHelper$1;

        specialinvoke $r1.<com.android.server.location.RemoteListenerHelper$1: void <init>(com.android.server.location.RemoteListenerHelper)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void tryUnregister()
    {
        com.android.server.location.RemoteListenerHelper r0;
        com.android.server.location._$$Lambda$RemoteListenerHelper$0Rlnad83RE1JdiVK0ULOLm530JM $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        $r2 = r0.<com.android.server.location.RemoteListenerHelper: android.os.Handler mHandler>;

        $r1 = new com.android.server.location._$$Lambda$RemoteListenerHelper$0Rlnad83RE1JdiVK0ULOLm530JM;

        specialinvoke $r1.<com.android.server.location._$$Lambda$RemoteListenerHelper$0Rlnad83RE1JdiVK0ULOLm530JM: void <init>(com.android.server.location.RemoteListenerHelper)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void addListener(java.lang.Object, android.os.IInterface, com.android.server.location.CallerIdentity)
    {
        com.android.server.location.RemoteListenerHelper r0;
        android.os.IInterface r1;
        com.android.server.location.CallerIdentity r2;
        android.os.IBinder r3;
        java.util.Map r4, $r7, $r8;
        com.android.server.location.RemoteListenerHelper$IdentifiedListener r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Throwable $r10;
        java.lang.Object r11;
        byte b0;
        com.android.server.location.RemoteListenerHelper$ListenerOperation $r12;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r11 := @parameter0: java.lang.Object;

        r1 := @parameter1: android.os.IInterface;

        r2 := @parameter2: com.android.server.location.CallerIdentity;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "Attempted to register a \'null\' listener.");

        r3 = interfaceinvoke r1.<android.os.IInterface: android.os.IBinder asBinder()>();

        r4 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        entermonitor r4;

     label01:
        $r7 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 == 0 goto label03;

        exitmonitor r4;

     label02:
        return;

     label03:
        r5 = new com.android.server.location.RemoteListenerHelper$IdentifiedListener;

        specialinvoke r5.<com.android.server.location.RemoteListenerHelper$IdentifiedListener: void <init>(com.android.server.location.RemoteListenerHelper,java.lang.Object,android.os.IInterface,com.android.server.location.CallerIdentity,com.android.server.location.RemoteListenerHelper$1)>(r0, r11, r1, r2, null);

        $r8 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

        $z1 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: boolean isAvailableInPlatform()>();

        if $z1 != 0 goto label05;

     label04:
        b0 = 1;

        goto label11;

     label05:
        $z2 = r0.<com.android.server.location.RemoteListenerHelper: boolean mHasIsSupported>;

        if $z2 == 0 goto label07;

        $z6 = r0.<com.android.server.location.RemoteListenerHelper: boolean mIsSupported>;

        if $z6 != 0 goto label07;

     label06:
        b0 = 2;

        goto label11;

     label07:
        $z3 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: boolean isGpsEnabled()>();

        if $z3 != 0 goto label09;

     label08:
        b0 = 3;

        goto label11;

     label09:
        $z4 = r0.<com.android.server.location.RemoteListenerHelper: boolean mHasIsSupported>;

        if $z4 == 0 goto label13;

        $z5 = r0.<com.android.server.location.RemoteListenerHelper: boolean mIsSupported>;

        if $z5 == 0 goto label13;

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void tryRegister()>();

     label10:
        b0 = 0;

     label11:
        $r12 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: com.android.server.location.RemoteListenerHelper$ListenerOperation getHandlerOperation(int)>(b0);

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void post(com.android.server.location.RemoteListenerHelper$IdentifiedListener,com.android.server.location.RemoteListenerHelper$ListenerOperation)>(r5, $r12);

        exitmonitor r4;

     label12:
        return;

     label13:
        exitmonitor r4;

     label14:
        return;

     label15:
        $r10 := @caughtexception;

     label16:
        exitmonitor r4;

     label17:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    protected void foreach(com.android.server.location.RemoteListenerHelper$ListenerOperation)
    {
        com.android.server.location.RemoteListenerHelper r0;
        java.util.Map r1;
        java.lang.Throwable $r2;
        com.android.server.location.RemoteListenerHelper$ListenerOperation r3;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r3 := @parameter0: com.android.server.location.RemoteListenerHelper$ListenerOperation;

        r1 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void foreachUnsafe(com.android.server.location.RemoteListenerHelper$ListenerOperation)>(r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected abstract com.android.server.location.RemoteListenerHelper$ListenerOperation getHandlerOperation(int);

    protected boolean hasPermission(android.content.Context, com.android.server.location.CallerIdentity)
    {
        com.android.server.location.RemoteListenerHelper r0;
        android.content.Context r1;
        com.android.server.location.CallerIdentity r2;
        boolean z0, z2, z3;
        java.lang.String $r3, $r4, $r6;
        int $i0, $i1, $i2, $i3;
        android.app.AppOpsManager $r5, $r7;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.location.CallerIdentity;

        z0 = staticinvoke <com.android.server.location.LocationPermissionUtil: boolean doesCallerReportToAppOps(android.content.Context,com.android.server.location.CallerIdentity)>(r1, r2);

        z2 = 0;

        if z0 == 0 goto label2;

        $r7 = r0.<com.android.server.location.RemoteListenerHelper: android.app.AppOpsManager mAppOps>;

        $i2 = r2.<com.android.server.location.CallerIdentity: int uid>;

        $r6 = r2.<com.android.server.location.CallerIdentity: java.lang.String packageName>;

        $i3 = virtualinvoke $r7.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(1, $i2, $r6);

        if $i3 != 0 goto label1;

        z2 = 1;

     label1:
        return z2;

     label2:
        z3 = 0;

        $r5 = r0.<com.android.server.location.RemoteListenerHelper: android.app.AppOpsManager mAppOps>;

        $i0 = r2.<com.android.server.location.CallerIdentity: int uid>;

        $r4 = r2.<com.android.server.location.CallerIdentity: java.lang.String packageName>;

        $r3 = r2.<com.android.server.location.CallerIdentity: java.lang.String featureId>;

        $i1 = virtualinvoke $r5.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String,java.lang.String,java.lang.String)>(1, $i0, $r4, $r3, null);

        if $i1 != 0 goto label3;

        z3 = 1;

     label3:
        return z3;
    }

    protected abstract boolean isAvailableInPlatform();

    protected abstract boolean isGpsEnabled();

    public boolean isRegistered()
    {
        com.android.server.location.RemoteListenerHelper r0;
        boolean $z0;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        $z0 = r0.<com.android.server.location.RemoteListenerHelper: boolean mIsRegistered>;

        return $z0;
    }

    public void lambda$tryUnregister$0$RemoteListenerHelper()
    {
        com.android.server.location.RemoteListenerHelper r0;
        boolean $z0;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        $z0 = r0.<com.android.server.location.RemoteListenerHelper: boolean mIsRegistered>;

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: void unregisterFromService()>();

        r0.<com.android.server.location.RemoteListenerHelper: boolean mIsRegistered> = 0;

        return;
    }

    protected void logPermissionDisabledEventNotReported(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.location.RemoteListenerHelper r0;
        java.lang.String r1, r2, r3, $r10;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>(r1, 3);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Location permission disabled. Skipping ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reporting for app: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r1, $r10);

     label1:
        return;
    }

    protected abstract int registerWithService();

    public void removeListener(android.os.IInterface)
    {
        com.android.server.location.RemoteListenerHelper r0;
        java.util.Map r1, $r3, $r6;
        android.os.IBinder $r4;
        boolean $z0;
        java.lang.Throwable $r7;
        android.os.IInterface r8;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r8 := @parameter0: android.os.IInterface;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "Attempted to remove a \'null\' listener.");

        r1 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        $r4 = interfaceinvoke r8.<android.os.IInterface: android.os.IBinder asBinder()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void tryUnregister()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    protected void setSupported(boolean)
    {
        com.android.server.location.RemoteListenerHelper r0;
        boolean z0;
        java.util.Map r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        entermonitor r1;

     label1:
        r0.<com.android.server.location.RemoteListenerHelper: boolean mHasIsSupported> = 1;

        r0.<com.android.server.location.RemoteListenerHelper: boolean mIsSupported> = z0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void tryUpdateRegistrationWithService()
    {
        com.android.server.location.RemoteListenerHelper r0;
        java.util.Map r1, $r3;
        boolean $z0, $z1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        entermonitor r1;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: boolean isGpsEnabled()>();

        if $z0 != 0 goto label3;

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void tryUnregister()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        exitmonitor r1;

     label4:
        return;

     label5:
        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void tryRegister()>();

        exitmonitor r1;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    protected abstract void unregisterFromService();

    protected void updateResult()
    {
        com.android.server.location.RemoteListenerHelper r0;
        java.util.Map r1;
        int i0, $i1;
        com.android.server.location.RemoteListenerHelper$ListenerOperation $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.location.RemoteListenerHelper;

        r1 = r0.<com.android.server.location.RemoteListenerHelper: java.util.Map mListenerMap>;

        entermonitor r1;

     label1:
        i0 = specialinvoke r0.<com.android.server.location.RemoteListenerHelper: int calculateCurrentResultUnsafe()>();

        $i1 = r0.<com.android.server.location.RemoteListenerHelper: int mLastReportedResult>;

        if $i1 != i0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = virtualinvoke r0.<com.android.server.location.RemoteListenerHelper: com.android.server.location.RemoteListenerHelper$ListenerOperation getHandlerOperation(int)>(i0);

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void foreachUnsafe(com.android.server.location.RemoteListenerHelper$ListenerOperation)>($r3);

        r0.<com.android.server.location.RemoteListenerHelper: int mLastReportedResult> = i0;

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.location.RemoteListenerHelper: int RESULT_UNKNOWN> = 5;

        <com.android.server.location.RemoteListenerHelper: int RESULT_SUCCESS> = 0;

        <com.android.server.location.RemoteListenerHelper: int RESULT_NOT_SUPPORTED> = 2;

        <com.android.server.location.RemoteListenerHelper: int RESULT_NOT_AVAILABLE> = 1;

        <com.android.server.location.RemoteListenerHelper: int RESULT_NOT_ALLOWED> = 6;

        <com.android.server.location.RemoteListenerHelper: int RESULT_INTERNAL_ERROR> = 4;

        <com.android.server.location.RemoteListenerHelper: int RESULT_GPS_LOCATION_DISABLED> = 3;

        return;
    }
}
