public class com.android.server.location.gnss.GnssBatchingProvider extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private boolean mEnabled;
    private final com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative;
    private long mPeriodNanos;
    private boolean mStarted;
    private boolean mWakeOnFifoFull;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.location.gnss.GnssBatchingProvider: java.lang.String TAG> = "GnssBatchingProvider";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("GnssBatchingProvider", 3);

        <com.android.server.location.gnss.GnssBatchingProvider: boolean DEBUG> = $z0;

        return;
    }

    void <init>()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        $r1 = new com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative;

        specialinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: void <init>()>();

        specialinvoke r0.<com.android.server.location.gnss.GnssBatchingProvider: void <init>(com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative)>($r1);

        return;
    }

    void <init>(com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative)
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        r1 := @parameter0: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative> = r1;

        return;
    }

    static int access$000()
    {
        int $i0;

        $i0 = staticinvoke <com.android.server.location.gnss.GnssBatchingProvider: int native_get_batch_size()>();

        return $i0;
    }

    static boolean access$100(long, boolean)
    {
        long l0;
        boolean z0, $z1;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <com.android.server.location.gnss.GnssBatchingProvider: boolean native_start_batch(long,boolean)>(l0, z0);

        return $z1;
    }

    static void access$200()
    {
        staticinvoke <com.android.server.location.gnss.GnssBatchingProvider: void native_flush_batch()>();

        return;
    }

    static boolean access$300()
    {
        boolean $z0;

        $z0 = staticinvoke <com.android.server.location.gnss.GnssBatchingProvider: boolean native_stop_batch()>();

        return $z0;
    }

    static boolean access$400()
    {
        boolean $z0;

        $z0 = staticinvoke <com.android.server.location.gnss.GnssBatchingProvider: boolean native_init_batching()>();

        return $z0;
    }

    static void access$500()
    {
        staticinvoke <com.android.server.location.gnss.GnssBatchingProvider: void native_cleanup_batching()>();

        return;
    }

    private static native void native_cleanup_batching();

    private static native void native_flush_batch();

    private static native int native_get_batch_size();

    private static native boolean native_init_batching();

    private static native boolean native_start_batch(long, boolean);

    private static native boolean native_stop_batch();

    public void disable()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        virtualinvoke r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean stop()>();

        $r1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        virtualinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: void cleanupBatching()>();

        r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mEnabled> = 0;

        return;
    }

    public void enable()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        boolean z0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        $r1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        z0 = virtualinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: boolean initBatching()>();

        r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mEnabled> = z0;

        if z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GnssBatchingProvider", "Failed to initialize GNSS batching");

     label1:
        return;
    }

    public void flush()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        boolean $z0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        $z0 = r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mStarted>;

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("GnssBatchingProvider", "Cannot flush since GNSS batching has not started.");

        return;

     label1:
        $r1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        virtualinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: void flushBatch()>();

        return;
    }

    public int getBatchSize()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;
        int $i0;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        $r1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        $i0 = virtualinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: int getBatchSize()>();

        return $i0;
    }

    void resumeIfStarted()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        boolean $z0, $z1, $z2;
        long $l0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        $z0 = <com.android.server.location.gnss.GnssBatchingProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GnssBatchingProvider", "resumeIfStarted");

     label1:
        $z1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mStarted>;

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        $l0 = r0.<com.android.server.location.gnss.GnssBatchingProvider: long mPeriodNanos>;

        $z2 = r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mWakeOnFifoFull>;

        virtualinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: boolean startBatch(long,boolean)>($l0, $z2);

     label2:
        return;
    }

    public boolean start(long, boolean)
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        long l0;
        boolean z0, z1, $z2, $z3;
        java.lang.IllegalStateException $r2;
        byte $b1;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z2 = r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mEnabled>;

        if $z2 == 0 goto label3;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid periodNanos ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in batching request, not started");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GnssBatchingProvider", $r8);

        return 0;

     label1:
        $r3 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        z1 = virtualinvoke $r3.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: boolean startBatch(long,boolean)>(l0, z0);

        r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mStarted> = z1;

        if z1 == 0 goto label2;

        r0.<com.android.server.location.gnss.GnssBatchingProvider: long mPeriodNanos> = l0;

        r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mWakeOnFifoFull> = z0;

     label2:
        $z3 = r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mStarted>;

        return $z3;

     label3:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;
    }

    public boolean stop()
    {
        com.android.server.location.gnss.GnssBatchingProvider r0;
        boolean z0;
        com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssBatchingProvider;

        $r1 = r0.<com.android.server.location.gnss.GnssBatchingProvider: com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative mNative>;

        z0 = virtualinvoke $r1.<com.android.server.location.gnss.GnssBatchingProvider$GnssBatchingProviderNative: boolean stopBatch()>();

        if z0 == 0 goto label1;

        r0.<com.android.server.location.gnss.GnssBatchingProvider: boolean mStarted> = 0;

     label1:
        return z0;
    }
}
