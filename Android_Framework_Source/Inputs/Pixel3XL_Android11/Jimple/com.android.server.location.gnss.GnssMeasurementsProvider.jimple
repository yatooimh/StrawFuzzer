public abstract class com.android.server.location.gnss.GnssMeasurementsProvider extends com.android.server.location.RemoteListenerHelper
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative mNative;
    private boolean mStartedCollection;
    private boolean mStartedFullTracking;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.location.gnss.GnssMeasurementsProvider: java.lang.String TAG> = "GnssMeasProvider";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("GnssMeasProvider", 3);

        <com.android.server.location.gnss.GnssMeasurementsProvider: boolean DEBUG> = $z0;

        return;
    }

    protected void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        android.content.Context r1;
        android.os.Handler r2;
        com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative $r3;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        $r3 = new com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative;

        specialinvoke $r3.<com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative: void <init>()>();

        specialinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void <init>(android.content.Context,android.os.Handler,com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative)>(r1, r2, $r3);

        return;
    }

    public void <init>(android.content.Context, android.os.Handler, com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative)
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        android.content.Context r1;
        android.os.Handler r2;
        com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative r3;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative;

        specialinvoke r0.<com.android.server.location.RemoteListenerHelper: void <init>(android.content.Context,android.os.Handler,java.lang.String)>(r1, r2, "GnssMeasProvider");

        r0.<com.android.server.location.gnss.GnssMeasurementsProvider: com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative mNative> = r3;

        return;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = staticinvoke <com.android.server.location.gnss.GnssMeasurementsProvider: boolean native_is_measurement_supported()>();

        return $z0;
    }

    static boolean access$100(boolean)
    {
        boolean z0, $z1;

        z0 := @parameter0: boolean;

        $z1 = staticinvoke <com.android.server.location.gnss.GnssMeasurementsProvider: boolean native_start_measurement_collection(boolean)>(z0);

        return $z1;
    }

    static boolean access$200()
    {
        boolean $z0;

        $z0 = staticinvoke <com.android.server.location.gnss.GnssMeasurementsProvider: boolean native_stop_measurement_collection()>();

        return $z0;
    }

    private boolean getMergedFullTracking()
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        int i0, i1;
        java.util.Map r1, $r7;
        java.util.Iterator r2;
        android.content.Context $r3, $r5;
        android.content.ContentResolver $r4, $r6;
        java.util.Collection $r8;
        boolean $z0, $z1, z2;
        java.lang.Object $r9, $r11;
        com.android.server.location.RemoteListenerHelper$IdentifiedListener $r10;
        java.lang.Throwable $r12;
        android.location.GnssRequest r13;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        $r3 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "development_settings_enabled", 0);

        $r5 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "enable_gnss_raw_meas_full_tracking", 0);

        if i0 != 1 goto label01;

        if i1 != 1 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        if z2 == 0 goto label03;

        return 1;

     label03:
        r1 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: java.util.Map mListenerMap>;

        entermonitor r1;

     label04:
        $r7 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: java.util.Map mListenerMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.location.RemoteListenerHelper$IdentifiedListener) $r9;

        $r11 = virtualinvoke $r10.<com.android.server.location.RemoteListenerHelper$IdentifiedListener: java.lang.Object getRequest()>();

        r13 = (android.location.GnssRequest) $r11;

     label06:
        if r13 == null goto label09;

     label07:
        $z1 = virtualinvoke r13.<android.location.GnssRequest: boolean isFullTracking()>();

        if $z1 == 0 goto label09;

        exitmonitor r1;

     label08:
        return 1;

     label09:
        goto label05;

     label10:
        exitmonitor r1;

     label11:
        return 0;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r12;

        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private static native boolean native_is_measurement_supported();

    private static native boolean native_start_measurement_collection(boolean);

    private static native boolean native_stop_measurement_collection();

    protected com.android.server.location.RemoteListenerHelper$ListenerOperation getHandlerOperation(int)
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        int i1;
        byte b2;
        com.android.server.location.gnss.GnssMeasurementsProvider$StatusChangedOperation $r6;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        i1 := @parameter0: int;

        tableswitch(i1)
        {
            case 0: goto label6;
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled addListener result: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("GnssMeasProvider", $r5);

        return null;

     label2:
        b2 = 3;

        goto label7;

     label3:
        return null;

     label4:
        b2 = 2;

        goto label7;

     label5:
        b2 = 0;

        goto label7;

     label6:
        b2 = 1;

     label7:
        $r6 = new com.android.server.location.gnss.GnssMeasurementsProvider$StatusChangedOperation;

        specialinvoke $r6.<com.android.server.location.gnss.GnssMeasurementsProvider$StatusChangedOperation: void <init>(int)>(b2);

        return $r6;
    }

    public boolean isAvailableInPlatform()
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative $r1;
        boolean $z0;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        $r1 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative mNative>;

        $z0 = virtualinvoke $r1.<com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative: boolean isMeasurementSupported()>();

        return $z0;
    }

    public void lambda$onMeasurementsAvailable$0$GnssMeasurementsProvider(android.location.GnssMeasurementsEvent, android.location.IGnssMeasurementsListener, com.android.server.location.CallerIdentity) throws android.os.RemoteException
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        android.location.GnssMeasurementsEvent r1;
        android.location.IGnssMeasurementsListener r2;
        com.android.server.location.CallerIdentity r3;
        android.content.Context $r4;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        r1 := @parameter0: android.location.GnssMeasurementsEvent;

        r2 := @parameter1: android.location.IGnssMeasurementsListener;

        r3 := @parameter2: com.android.server.location.CallerIdentity;

        $r4 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: android.content.Context mContext>;

        $z0 = virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean hasPermission(android.content.Context,com.android.server.location.CallerIdentity)>($r4, r3);

        if $z0 != 0 goto label1;

        $r5 = r3.<com.android.server.location.CallerIdentity: java.lang.String packageName>;

        virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void logPermissionDisabledEventNotReported(java.lang.String,java.lang.String,java.lang.String)>("GnssMeasProvider", $r5, "GNSS measurements");

        return;

     label1:
        interfaceinvoke r2.<android.location.IGnssMeasurementsListener: void onGnssMeasurementsReceived(android.location.GnssMeasurementsEvent)>(r1);

        return;
    }

    public void onCapabilitiesUpdated(boolean)
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        boolean z0;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void setSupported(boolean)>(z0);

        virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void updateResult()>();

        return;
    }

    public void onGpsEnabledChanged()
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void tryUpdateRegistrationWithService()>();

        virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void updateResult()>();

        return;
    }

    public void onMeasurementsAvailable(android.location.GnssMeasurementsEvent)
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        android.location.GnssMeasurementsEvent r1;
        com.android.server.location.gnss._$$Lambda$GnssMeasurementsProvider$MwKCr2bnxyNYMRRxCkNEyvhkEpg $r2;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        r1 := @parameter0: android.location.GnssMeasurementsEvent;

        $r2 = new com.android.server.location.gnss._$$Lambda$GnssMeasurementsProvider$MwKCr2bnxyNYMRRxCkNEyvhkEpg;

        specialinvoke $r2.<com.android.server.location.gnss._$$Lambda$GnssMeasurementsProvider$MwKCr2bnxyNYMRRxCkNEyvhkEpg: void <init>(com.android.server.location.gnss.GnssMeasurementsProvider,android.location.GnssMeasurementsEvent)>(r0, r1);

        virtualinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: void foreach(com.android.server.location.RemoteListenerHelper$ListenerOperation)>($r2);

        return;
    }

    protected int registerWithService()
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        boolean z0, $z1;
        com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        z0 = specialinvoke r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean getMergedFullTracking()>();

        $r1 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative mNative>;

        $z1 = virtualinvoke $r1.<com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative: boolean startMeasurementCollection(boolean)>(z0);

        if $z1 == 0 goto label1;

        r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean mStartedCollection> = 1;

        r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean mStartedFullTracking> = z0;

        return 0;

     label1:
        return 4;
    }

    void resumeIfStarted()
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        boolean $z0, $z1, $z2;
        com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative $r1;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        $z0 = <com.android.server.location.gnss.GnssMeasurementsProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GnssMeasProvider", "resumeIfStarted");

     label1:
        $z1 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean mStartedCollection>;

        if $z1 == 0 goto label2;

        $r1 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative mNative>;

        $z2 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean mStartedFullTracking>;

        virtualinvoke $r1.<com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative: boolean startMeasurementCollection(boolean)>($z2);

     label2:
        return;
    }

    protected void unregisterFromService()
    {
        com.android.server.location.gnss.GnssMeasurementsProvider r0;
        com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative $r1;
        boolean $z0;

        r0 := @this: com.android.server.location.gnss.GnssMeasurementsProvider;

        $r1 = r0.<com.android.server.location.gnss.GnssMeasurementsProvider: com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative mNative>;

        $z0 = virtualinvoke $r1.<com.android.server.location.gnss.GnssMeasurementsProvider$GnssMeasurementProviderNative: boolean stopMeasurementCollection()>();

        if $z0 == 0 goto label1;

        r0.<com.android.server.location.gnss.GnssMeasurementsProvider: boolean mStartedCollection> = 0;

     label1:
        return;
    }
}
