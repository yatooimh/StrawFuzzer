class com.android.server.locksettings.LockSettingsService$Injector extends java.lang.Object
{
    protected android.content.Context mContext;

    public void <init>(android.content.Context)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext> = r1;

        return;
    }

    public int binderGetCallingUid()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        int $i0;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i0;
    }

    public android.app.IActivityManager getActivityManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.app.IActivityManager $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        return $r1;
    }

    public android.content.Context getContext()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        return $r1;
    }

    public android.app.admin.DevicePolicyManager getDevicePolicyManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.admin.DevicePolicyManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r3 = (android.app.admin.DevicePolicyManager) $r2;

        return $r3;
    }

    public android.app.admin.DeviceStateCache getDeviceStateCache()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.app.admin.DeviceStateCache $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = staticinvoke <android.app.admin.DeviceStateCache: android.app.admin.DeviceStateCache getInstance()>();

        return $r1;
    }

    public android.hardware.face.FaceManager getFaceManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context $r1, $r3;
        android.content.pm.PackageManager $r2;
        boolean $z0;
        java.lang.Object $r4;
        android.hardware.face.FaceManager $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.biometrics.face");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("face");

        $r5 = (android.hardware.face.FaceManager) $r4;

        return $r5;

     label1:
        return null;
    }

    public android.hardware.fingerprint.FingerprintManager getFingerprintManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context $r1, $r3;
        android.content.pm.PackageManager $r2;
        boolean $z0;
        java.lang.Object $r4;
        android.hardware.fingerprint.FingerprintManager $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.fingerprint");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("fingerprint");

        $r5 = (android.hardware.fingerprint.FingerprintManager) $r4;

        return $r5;

     label1:
        return null;
    }

    public android.os.Handler getHandler(com.android.server.ServiceThread)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.ServiceThread r1;
        android.os.Handler $r2;
        android.os.Looper $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: com.android.server.ServiceThread;

        $r2 = new android.os.Handler;

        $r3 = virtualinvoke r1.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper)>($r3);

        return $r2;
    }

    public android.security.KeyStore getKeyStore()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.security.KeyStore $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        return $r1;
    }

    public com.android.server.locksettings.ManagedProfilePasswordCache getManagedProfilePasswordCache()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.locksettings.ManagedProfilePasswordCache $r1;
        android.os.UserManager $r2;
        java.lang.Exception $r3;
        java.lang.IllegalStateException $r4;
        java.security.KeyStore r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

     label1:
        r5 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r5.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r1 = new com.android.server.locksettings.ManagedProfilePasswordCache;

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService$Injector: android.os.UserManager getUserManager()>();

        specialinvoke $r1.<com.android.server.locksettings.ManagedProfilePasswordCache: void <init>(java.security.KeyStore,android.os.UserManager)>(r5, $r2);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Cannot load keystore", $r3);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public android.app.NotificationManager getNotificationManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.NotificationManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r3 = (android.app.NotificationManager) $r2;

        return $r3;
    }

    public com.android.server.locksettings.RebootEscrowManager getRebootEscrowManager(com.android.server.locksettings.RebootEscrowManager$Callbacks, com.android.server.locksettings.LockSettingsStorage)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.locksettings.RebootEscrowManager$Callbacks r1;
        com.android.server.locksettings.LockSettingsStorage r2;
        com.android.server.locksettings.RebootEscrowManager $r3;
        android.content.Context $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: com.android.server.locksettings.RebootEscrowManager$Callbacks;

        r2 := @parameter1: com.android.server.locksettings.LockSettingsStorage;

        $r3 = new com.android.server.locksettings.RebootEscrowManager;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        specialinvoke $r3.<com.android.server.locksettings.RebootEscrowManager: void <init>(android.content.Context,com.android.server.locksettings.RebootEscrowManager$Callbacks,com.android.server.locksettings.LockSettingsStorage)>($r4, r1, r2);

        return $r3;
    }

    public com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager getRecoverableKeyStoreManager(android.security.KeyStore)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.security.KeyStore r1;
        android.content.Context $r2;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: android.security.KeyStore;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager getInstance(android.content.Context,android.security.KeyStore)>($r2, r1);

        return $r3;
    }

    public com.android.server.ServiceThread getServiceThread()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.ServiceThread $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r2 = new com.android.server.ServiceThread;

        specialinvoke $r2.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("LockSettingsService", 10, 1);

        virtualinvoke $r2.<com.android.server.ServiceThread: void start()>();

        return $r2;
    }

    public com.android.server.locksettings.LockSettingsStorage getStorage()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.locksettings.LockSettingsStorage $r2;
        android.content.Context $r3;
        com.android.server.locksettings.LockSettingsService$Injector$1 $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r2 = new com.android.server.locksettings.LockSettingsStorage;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: void <init>(android.content.Context)>($r3);

        $r4 = new com.android.server.locksettings.LockSettingsService$Injector$1;

        specialinvoke $r4.<com.android.server.locksettings.LockSettingsService$Injector$1: void <init>(com.android.server.locksettings.LockSettingsService$Injector,com.android.server.locksettings.LockSettingsStorage)>(r0, $r2);

        virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: void setDatabaseOnCreateCallback(com.android.server.locksettings.LockSettingsStorage$Callback)>($r4);

        return $r2;
    }

    public android.os.storage.IStorageManager getStorageManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.os.IBinder r1;
        android.os.storage.IStorageManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r1 == null goto label1;

        $r2 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>(r1);

        return $r2;

     label1:
        return null;
    }

    public com.android.server.locksettings.LockSettingsStrongAuth getStrongAuth()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.locksettings.LockSettingsStrongAuth $r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = new com.android.server.locksettings.LockSettingsStrongAuth;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        specialinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth: void <init>(android.content.Context)>($r2);

        return $r1;
    }

    public com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker getStrongAuthTracker()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker $r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = new com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        specialinvoke $r1.<com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker: void <init>(android.content.Context)>($r2);

        return $r1;
    }

    public com.android.server.locksettings.SyntheticPasswordManager getSyntheticPasswordManager(com.android.server.locksettings.LockSettingsStorage)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        com.android.server.locksettings.LockSettingsStorage r1;
        com.android.server.locksettings.SyntheticPasswordManager $r2;
        android.content.Context $r3;
        android.os.UserManager $r4;
        com.android.server.locksettings.PasswordSlotManager $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: com.android.server.locksettings.LockSettingsStorage;

        $r2 = new com.android.server.locksettings.SyntheticPasswordManager;

        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context getContext()>();

        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService$Injector: android.os.UserManager getUserManager()>();

        $r5 = new com.android.server.locksettings.PasswordSlotManager;

        specialinvoke $r5.<com.android.server.locksettings.PasswordSlotManager: void <init>()>();

        specialinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: void <init>(android.content.Context,com.android.server.locksettings.LockSettingsStorage,android.os.UserManager,com.android.server.locksettings.PasswordSlotManager)>($r3, r1, $r4, $r5);

        return $r2;
    }

    public android.os.UserManager getUserManager()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.UserManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r3 = (android.os.UserManager) $r2;

        return $r3;
    }

    public android.os.UserManagerInternal getUserManagerInternal()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        java.lang.Object $r1;
        android.os.UserManagerInternal $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r2 = (android.os.UserManagerInternal) $r1;

        return $r2;
    }

    public boolean hasEnrolledBiometrics(int)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        int i0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.hardware.biometrics.BiometricManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/biometrics/BiometricManager;");

        $r3 = (android.hardware.biometrics.BiometricManager) $r2;

        $z0 = virtualinvoke $r3.<android.hardware.biometrics.BiometricManager: boolean hasEnrolledBiometrics(int)>(i0);

        return $z0;
    }

    public boolean isGsiRunning()
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        z0 = 0;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.gsid.image_running", 0);

        if $i0 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public int settingsGlobalGetInt(android.content.ContentResolver, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.ContentResolver r1;
        java.lang.String r2;
        int i0, $i1;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, r2, i0);

        return $i1;
    }

    public int settingsSecureGetInt(android.content.ContentResolver, java.lang.String, int, int)
    {
        com.android.server.locksettings.LockSettingsService$Injector r0;
        android.content.ContentResolver r1;
        java.lang.String r2;
        int i0, i1, $i2;

        r0 := @this: com.android.server.locksettings.LockSettingsService$Injector;

        r1 := @parameter0: android.content.ContentResolver;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, r2, i0, i1);

        return $i2;
    }
}
