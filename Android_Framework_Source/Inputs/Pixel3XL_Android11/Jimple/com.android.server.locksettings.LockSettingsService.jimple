public class com.android.server.locksettings.LockSettingsService extends com.android.internal.widget.ILockSettings$Stub
{
    private static final java.lang.String BIOMETRIC_PERMISSION;
    private static final int CHALLENGE_FROM_CALLER;
    private static final int CHALLENGE_INTERNAL;
    private static final int CHALLENGE_NONE;
    private static final boolean DEBUG;
    private static final java.lang.String GSI_RUNNING_PROP;
    private static final java.lang.String PERMISSION;
    private static final java.lang.String PREV_SYNTHETIC_PASSWORD_HANDLE_KEY;
    private static final int PROFILE_KEY_IV_SIZE;
    private static final java.lang.String[] READ_CONTACTS_PROTECTED_SETTINGS;
    private static final java.lang.String[] READ_PASSWORD_PROTECTED_SETTINGS;
    private static final java.lang.String SEPARATE_PROFILE_CHALLENGE_KEY;
    private static final java.lang.String SYNTHETIC_PASSWORD_UPDATE_TIME_KEY;
    private static final int[] SYSTEM_CREDENTIAL_UIDS;
    private static final java.lang.String TAG;
    private static final java.lang.String USER_SERIAL_NUMBER_KEY;
    private static final java.lang.String[] VALID_SETTINGS;
    private final android.app.IActivityManager mActivityManager;
    protected android.hardware.authsecret.V1_0.IAuthSecret mAuthSecretService;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private final android.content.Context mContext;
    private final com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver mDeviceProvisionedObserver;
    private boolean mFirstCallToVold;
    protected android.service.gatekeeper.IGateKeeperService mGateKeeperService;
    protected final android.os.Handler mHandler;
    protected boolean mHasSecureLockScreen;
    private final com.android.server.locksettings.LockSettingsService$Injector mInjector;
    private final android.security.KeyStore mKeyStore;
    private com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache;
    private final android.app.NotificationManager mNotificationManager;
    private final com.android.server.locksettings.RebootEscrowManager mRebootEscrowManager;
    private final com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager;
    private final java.lang.Object mSeparateChallengeLock;
    private final com.android.server.locksettings.SyntheticPasswordManager mSpManager;
    protected final com.android.server.locksettings.LockSettingsStorage mStorage;
    private final android.os.storage.IStorageManager mStorageManager;
    private final com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth;
    private final com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker mStrongAuthTracker;
    private final android.os.UserManager mUserManager;
    final android.util.SparseArray mUserPasswordMetrics;

    static void <clinit>()
    {
        int[] $r0;
        java.lang.String[] $r1, $r2, $r3;

        <com.android.server.locksettings.LockSettingsService: java.lang.String USER_SERIAL_NUMBER_KEY> = "serial-number";

        <com.android.server.locksettings.LockSettingsService: java.lang.String TAG> = "LockSettingsService";

        <com.android.server.locksettings.LockSettingsService: java.lang.String SYNTHETIC_PASSWORD_UPDATE_TIME_KEY> = "sp-handle-ts";

        <com.android.server.locksettings.LockSettingsService: java.lang.String SEPARATE_PROFILE_CHALLENGE_KEY> = "lockscreen.profilechallenge";

        <com.android.server.locksettings.LockSettingsService: int PROFILE_KEY_IV_SIZE> = 12;

        <com.android.server.locksettings.LockSettingsService: java.lang.String PREV_SYNTHETIC_PASSWORD_HANDLE_KEY> = "prev-sp-handle";

        <com.android.server.locksettings.LockSettingsService: java.lang.String PERMISSION> = "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE";

        <com.android.server.locksettings.LockSettingsService: java.lang.String GSI_RUNNING_PROP> = "ro.gsid.image_running";

        <com.android.server.locksettings.LockSettingsService: boolean DEBUG> = 0;

        <com.android.server.locksettings.LockSettingsService: int CHALLENGE_NONE> = 0;

        <com.android.server.locksettings.LockSettingsService: int CHALLENGE_INTERNAL> = 2;

        <com.android.server.locksettings.LockSettingsService: int CHALLENGE_FROM_CALLER> = 1;

        <com.android.server.locksettings.LockSettingsService: java.lang.String BIOMETRIC_PERMISSION> = "android.permission.MANAGE_BIOMETRIC";

        $r0 = newarray (int)[4];

        $r0[0] = 1010;

        $r0[1] = 1016;

        $r0[2] = 0;

        $r0[3] = 1000;

        <com.android.server.locksettings.LockSettingsService: int[] SYSTEM_CREDENTIAL_UIDS> = $r0;

        $r1 = newarray (java.lang.String)[15];

        $r1[0] = "lockscreen.lockedoutpermanently";

        $r1[1] = "lockscreen.patterneverchosen";

        $r1[2] = "lockscreen.password_type";

        $r1[3] = "lockscreen.password_type_alternate";

        $r1[4] = "lockscreen.password_salt";

        $r1[5] = "lockscreen.disabled";

        $r1[6] = "lockscreen.options";

        $r1[7] = "lockscreen.biometric_weak_fallback";

        $r1[8] = "lockscreen.biometricweakeverchosen";

        $r1[9] = "lockscreen.power_button_instantly_locks";

        $r1[10] = "lockscreen.passwordhistory";

        $r1[11] = "lock_pattern_autolock";

        $r1[12] = "lock_biometric_weak_flags";

        $r1[13] = "lock_pattern_visible_pattern";

        $r1[14] = "lock_pattern_tactile_feedback_enabled";

        <com.android.server.locksettings.LockSettingsService: java.lang.String[] VALID_SETTINGS> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "lock_screen_owner_info_enabled";

        $r2[1] = "lock_screen_owner_info";

        <com.android.server.locksettings.LockSettingsService: java.lang.String[] READ_CONTACTS_PROTECTED_SETTINGS> = $r2;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "lockscreen.password_salt";

        $r3[1] = "lockscreen.passwordhistory";

        $r3[2] = "lockscreen.password_type";

        $r3[3] = "lockscreen.profilechallenge";

        <com.android.server.locksettings.LockSettingsService: java.lang.String[] READ_PASSWORD_PROTECTED_SETTINGS> = $r3;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.Context r1;
        com.android.server.locksettings.LockSettingsService$Injector $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.locksettings.LockSettingsService$Injector;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsService$Injector: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void <init>(com.android.server.locksettings.LockSettingsService$Injector)>($r2);

        return;
    }

    protected void <init>(com.android.server.locksettings.LockSettingsService$Injector)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.LockSettingsService$Injector r1;
        java.lang.Object $r2;
        com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver $r3;
        android.util.SparseArray $r4;
        com.android.server.locksettings.LockSettingsService$2 $r5;
        android.content.Context $r6, $r13;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r7;
        com.android.server.ServiceThread $r8;
        android.os.Handler $r9;
        com.android.server.locksettings.LockSettingsStrongAuth $r10, $r21;
        android.app.IActivityManager $r11;
        android.content.IntentFilter $r12;
        android.os.UserHandle $r14;
        android.content.BroadcastReceiver $r15;
        com.android.server.locksettings.LockSettingsStorage $r17, $r22, $r26;
        android.app.NotificationManager $r18;
        android.os.UserManager $r19;
        android.os.storage.IStorageManager $r20;
        com.android.server.locksettings.SyntheticPasswordManager $r23;
        com.android.server.locksettings.ManagedProfilePasswordCache $r24;
        com.android.server.locksettings.LockSettingsService$RebootEscrowCallbacks $r25;
        com.android.server.locksettings.RebootEscrowManager $r27;
        com.android.server.locksettings.LockSettingsService$LocalService $r28;
        android.security.KeyStore r29;
        com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker r31;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: com.android.server.locksettings.LockSettingsService$Injector;

        specialinvoke r0.<com.android.internal.widget.ILockSettings$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsService: java.lang.Object mSeparateChallengeLock> = $r2;

        $r3 = new com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver;

        specialinvoke $r3.<com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver: void <init>(com.android.server.locksettings.LockSettingsService)>(r0);

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver mDeviceProvisionedObserver> = $r3;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.util.SparseArray mUserPasswordMetrics> = $r4;

        $r5 = new com.android.server.locksettings.LockSettingsService$2;

        specialinvoke $r5.<com.android.server.locksettings.LockSettingsService$2: void <init>(com.android.server.locksettings.LockSettingsService)>(r0);

        r0.<com.android.server.locksettings.LockSettingsService: android.content.BroadcastReceiver mBroadcastReceiver> = $r5;

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector> = r1;

        $r6 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context getContext()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext> = $r6;

        r29 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.security.KeyStore getKeyStore()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.security.KeyStore mKeyStore> = r29;

        $r7 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager getRecoverableKeyStoreManager(android.security.KeyStore)>(r29);

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager> = $r7;

        $r8 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.ServiceThread getServiceThread()>();

        $r9 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.os.Handler getHandler(com.android.server.ServiceThread)>($r8);

        r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler> = $r9;

        $r10 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.LockSettingsStrongAuth getStrongAuth()>();

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth> = $r10;

        $r11 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.app.IActivityManager getActivityManager()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.app.IActivityManager mActivityManager> = $r11;

        r0.<com.android.server.locksettings.LockSettingsService: boolean mFirstCallToVold> = 1;

        $r12 = new android.content.IntentFilter;

        specialinvoke $r12.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r12.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke $r12.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTING");

        virtualinvoke $r12.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r13 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.content.Context getContext()>();

        $r15 = r0.<com.android.server.locksettings.LockSettingsService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r13.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r15, $r14, $r12, null, null);

        $r17 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.LockSettingsStorage getStorage()>();

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage> = $r17;

        $r18 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.app.NotificationManager getNotificationManager()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.app.NotificationManager mNotificationManager> = $r18;

        $r19 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.os.UserManager getUserManager()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager> = $r19;

        $r20 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: android.os.storage.IStorageManager getStorageManager()>();

        r0.<com.android.server.locksettings.LockSettingsService: android.os.storage.IStorageManager mStorageManager> = $r20;

        r31 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker getStrongAuthTracker()>();

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker mStrongAuthTracker> = r31;

        $r21 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke r31.<com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker: void register(com.android.server.locksettings.LockSettingsStrongAuth)>($r21);

        $r22 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r23 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.SyntheticPasswordManager getSyntheticPasswordManager(com.android.server.locksettings.LockSettingsStorage)>($r22);

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager> = $r23;

        $r24 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.ManagedProfilePasswordCache getManagedProfilePasswordCache()>();

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache> = $r24;

        $r25 = new com.android.server.locksettings.LockSettingsService$RebootEscrowCallbacks;

        specialinvoke $r25.<com.android.server.locksettings.LockSettingsService$RebootEscrowCallbacks: void <init>(com.android.server.locksettings.LockSettingsService,com.android.server.locksettings.LockSettingsService$1)>(r0, null);

        $r26 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r27 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsService$Injector: com.android.server.locksettings.RebootEscrowManager getRebootEscrowManager(com.android.server.locksettings.RebootEscrowManager$Callbacks,com.android.server.locksettings.LockSettingsStorage)>($r25, $r26);

        r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.RebootEscrowManager mRebootEscrowManager> = $r27;

        $r28 = new com.android.server.locksettings.LockSettingsService$LocalService;

        specialinvoke $r28.<com.android.server.locksettings.LockSettingsService$LocalService: void <init>(com.android.server.locksettings.LockSettingsService,com.android.server.locksettings.LockSettingsService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/internal/widget/LockSettingsInternal;", $r28);

        return;
    }

    static void access$000(com.android.server.locksettings.LockSettingsService)
    {
        com.android.server.locksettings.LockSettingsService r0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void migrateOldDataAfterSystemReady()>();

        return;
    }

    static android.content.Context access$1100(com.android.server.locksettings.LockSettingsService)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        return $r1;
    }

    static long access$1200(com.android.server.locksettings.LockSettingsService, byte[], int, com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)
    {
        com.android.server.locksettings.LockSettingsService r0;
        byte[] r1;
        int i0;
        com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback r2;
        long $l1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        r2 := @parameter3: com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback;

        $l1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: long addEscrowToken(byte[],int,com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)>(r1, i0, r2);

        return $l1;
    }

    static boolean access$1300(com.android.server.locksettings.LockSettingsService, long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean removeEscrowToken(long,int)>(l0, i1);

        return $z0;
    }

    static boolean access$1400(com.android.server.locksettings.LockSettingsService, long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isEscrowTokenActive(long,int)>(l0, i1);

        return $z0;
    }

    static boolean access$1500(com.android.server.locksettings.LockSettingsService, com.android.internal.widget.LockscreenCredential, long, byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.internal.widget.LockscreenCredential r1;
        long l0;
        byte[] r2;
        int i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter1: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter2: long;

        r2 := @parameter3: byte[];

        i1 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialWithToken(com.android.internal.widget.LockscreenCredential,long,byte[],int)>(r1, l0, r2, i1);

        return $z0;
    }

    static boolean access$1600(com.android.server.locksettings.LockSettingsService, long, byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        byte[] r1;
        int i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter1: long;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean unlockUserWithToken(long,byte[],int)>(l0, r1, i1);

        return $z0;
    }

    static boolean access$1700(com.android.server.locksettings.LockSettingsService, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i0);

        return $z0;
    }

    static com.android.server.locksettings.RebootEscrowManager access$1800(com.android.server.locksettings.LockSettingsService)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.RebootEscrowManager $r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.RebootEscrowManager mRebootEscrowManager>;

        return $r1;
    }

    static com.android.server.locksettings.LockSettingsStrongAuth access$1900(com.android.server.locksettings.LockSettingsService)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.LockSettingsStrongAuth $r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        return $r1;
    }

    static android.app.admin.PasswordMetrics access$2000(com.android.server.locksettings.LockSettingsService, com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r1;
        int i0;
        android.app.admin.PasswordMetrics $r2;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter1: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: android.app.admin.PasswordMetrics loadPasswordMetrics(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>(r1, i0);

        return $r2;
    }

    static void access$2100(com.android.server.locksettings.LockSettingsService, com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken, int, long, java.util.ArrayList, android.app.admin.PasswordMetrics, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r1;
        int i0, i2;
        long l1;
        java.util.ArrayList r2;
        android.app.admin.PasswordMetrics r3;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter1: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        r2 := @parameter4: java.util.ArrayList;

        r3 := @parameter5: android.app.admin.PasswordMetrics;

        i2 := @parameter6: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onCredentialVerified(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int,long,java.util.ArrayList,android.app.admin.PasswordMetrics,int)>(r1, i0, l1, r2, r3, i2);

        return;
    }

    static void access$300(com.android.server.locksettings.LockSettingsService, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void cleanupDataForReusedUserIdIfNecessary(int)>(i0);

        return;
    }

    static void access$400(com.android.server.locksettings.LockSettingsService, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void ensureProfileKeystoreUnlocked(int)>(i0);

        return;
    }

    static void access$500(com.android.server.locksettings.LockSettingsService, android.os.UserHandle)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.os.UserHandle r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter1: android.os.UserHandle;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void hideEncryptionNotification(android.os.UserHandle)>(r1);

        return;
    }

    static android.os.UserManager access$600(com.android.server.locksettings.LockSettingsService)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.os.UserManager $r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        return $r1;
    }

    static boolean access$700(com.android.server.locksettings.LockSettingsService, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>(i0);

        return $z0;
    }

    static void access$800(com.android.server.locksettings.LockSettingsService, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void tryDeriveAuthTokenForUnsecuredPrimaryUser(int)>(i0);

        return;
    }

    static void access$900(com.android.server.locksettings.LockSettingsService, int, boolean)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeUser(int,boolean)>(i0, z0);

        return;
    }

    private void activateEscrowTokens(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r3, $r11;
        java.util.Iterator r2;
        long l1;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.Long $r6, $r8;
        java.lang.Object[] $r7;
        java.lang.Integer $r9;
        java.lang.String $r10;
        java.lang.Throwable $r12;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r13;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r13 := @parameter0: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void disableEscrowTokenOnNonManagedDevicesIfNeeded(int)>(i0);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: java.util.Set getPendingTokensForUser(int)>(i0);

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Long) $r5;

        l1 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("activateEscrowTokens: %x %d ", $r7);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r10);

        $r11 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r11.<com.android.server.locksettings.SyntheticPasswordManager: boolean activateTokenBasedSyntheticPassword(long,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>(l1, r13, i0);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private long addEscrowToken(byte[], int, com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback r1;
        com.android.server.locksettings.SyntheticPasswordManager r2, $r3, $r4, $r5, $r6;
        boolean $z0, $z2, $z3, $z4;
        android.service.gatekeeper.IGateKeeperService $r7;
        com.android.internal.widget.LockscreenCredential $r8, $r10;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult $r9;
        java.lang.Throwable $r11;
        byte[] r12;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r13;
        long l1, l2;
        java.lang.SecurityException r14;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r12 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback;

        r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r2;

        r13 = null;

     label01:
        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>(i0);

        if $z0 != 0 goto label04;

        $z3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean shouldMigrateToSyntheticPasswordLocked(int)>(i0);

        if $z3 == 0 goto label03;

        $r10 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        r13 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[],com.android.internal.widget.LockscreenCredential,int)>(null, $r10, i0);

     label02:
        goto label04;

     label03:
        l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r7 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        $r8 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        $r9 = virtualinvoke $r6.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>($r7, l1, $r8, i0, null);

        r13 = $r9.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

     label04:
        $z4 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

        if $z4 == 0 goto label07;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void disableEscrowTokenOnNonManagedDevicesIfNeeded(int)>(i0);

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $z2 = virtualinvoke $r5.<com.android.server.locksettings.SyntheticPasswordManager: boolean hasEscrowData(int)>(i0);

        if $z2 == 0 goto label06;

     label05:
        goto label07;

     label06:
        r14 = new java.lang.SecurityException;

        specialinvoke r14.<java.lang.SecurityException: void <init>(java.lang.String)>("Escrow token is disabled on the current user");

        throw r14;

     label07:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        l2 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: long createTokenBasedSyntheticPassword(byte[],int,com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)>(r12, i0, r1);

     label08:
        if r13 == null goto label10;

     label09:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r4.<com.android.server.locksettings.SyntheticPasswordManager: boolean activateTokenBasedSyntheticPassword(long,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>(l2, r13, i0);

     label10:
        exitmonitor r2;

     label11:
        return l2;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void addUserKeyAuth(int, byte[], byte[])
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i2;
        long l1;
        android.os.UserManager $r1;
        android.os.storage.IStorageManager $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.String $r7;
        byte[] r8, r9;
        android.content.pm.UserInfo r10;
        java.lang.IllegalStateException r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r8 := @parameter1: byte[];

        r9 := @parameter2: byte[];

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r10 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.storage.IStorageManager mStorageManager>;

        $i2 = r10.<android.content.pm.UserInfo: int serialNumber>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void addUserKeyAuth(int,int,byte[],byte[])>(i0, $i2, r8, r9);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        r13 = new java.lang.IllegalStateException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add new key to vold ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r4);

        throw r13;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private void callToAuthSecretIfNeeded(int, com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.util.ArrayList r1;
        android.hardware.authsecret.V1_0.IAuthSecret $r2, $r5;
        android.os.UserManager $r3;
        android.content.pm.UserInfo $r4;
        boolean $z0;
        int $i0, $i1, i4, i5;
        byte $b2;
        java.lang.Byte $r6;
        android.os.RemoteException $r7;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r8;
        byte[] r9;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i4 := @parameter0: int;

        r8 := @parameter1: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.hardware.authsecret.V1_0.IAuthSecret mAuthSecretService>;

        if $r2 == null goto label8;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i4);

        $z0 = virtualinvoke $r4.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z0 == 0 goto label8;

     label1:
        r9 = virtualinvoke r8.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveVendorAuthSecret()>();

        r1 = new java.util.ArrayList;

        $i0 = lengthof r9;

        specialinvoke r1.<java.util.ArrayList: void <init>(int)>($i0);

     label2:
        i5 = 0;

     label3:
        $i1 = lengthof r9;

        if i5 >= $i1 goto label5;

        $b2 = r9[i5];

        $r6 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        $r5 = r0.<com.android.server.locksettings.LockSettingsService: android.hardware.authsecret.V1_0.IAuthSecret mAuthSecretService>;

        interfaceinvoke $r5.<android.hardware.authsecret.V1_0.IAuthSecret: void primaryUserCredential(java.util.ArrayList)>(r1);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to pass primary user secret to AuthSecret HAL", $r7);

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private final void checkBiometricPermission()
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_BIOMETRIC", "LockSettingsBiometric");

        return;
    }

    private final void checkPasswordHavePermission(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i2;
        android.content.Context $r1, $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $i1 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE");

        if $i1 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "28251513";

        $i2 = staticinvoke <com.android.server.locksettings.LockSettingsService: int getCallingUid()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[1] = $r4;

        $r3[2] = "";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r3);

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsHave");

        return;
    }

    private final void checkPasswordReadPermission(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsRead");

        return;
    }

    private final void checkReadPermission(java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r2, $r14, $r15, $r27;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean $z0, $z1;
        android.content.Context $r3, $r16;
        java.lang.StringBuilder $r4, $r17;
        java.lang.SecurityException $r13, $r26;
        java.lang.String[] r28, r30;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i6 = 0;

     label1:
        r28 = <com.android.server.locksettings.LockSettingsService: java.lang.String[] READ_CONTACTS_PROTECTED_SETTINGS>;

        $i2 = lengthof r28;

        if i6 >= $i2 goto label4;

        $r15 = r28[i6];

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r16 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $i5 = virtualinvoke $r16.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_CONTACTS");

        if $i5 != 0 goto label2;

        goto label3;

     label2:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid=");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needs permission ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.READ_CONTACTS");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to read ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = new java.lang.SecurityException;

        $r27 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.SecurityException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        i7 = 0;

     label5:
        r30 = <com.android.server.locksettings.LockSettingsService: java.lang.String[] READ_PASSWORD_PROTECTED_SETTINGS>;

        $i3 = lengthof r30;

        if i7 >= $i3 goto label8;

        $r2 = r30[i7];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label7;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $i4 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE");

        if $i4 != 0 goto label6;

        goto label7;

     label6:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needs permission ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to read ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = new java.lang.SecurityException;

        $r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label7:
        i7 = i7 + 1;

        goto label5;

     label8:
        return;
    }

    private final void checkWritePermission(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.content.Context $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE", "LockSettingsWrite");

        return;
    }

    private void cleanupDataForReusedUserIdIfNecessary(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1, i2;
        android.os.UserManager $r1;
        com.android.server.locksettings.LockSettingsStorage $r2, $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        i1 = virtualinvoke $r1.<android.os.UserManager: int getUserSerialNumber(int)>(i0);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        i2 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: int getInt(java.lang.String,int,int)>("serial-number", -1, i0);

        if i2 == i1 goto label3;

        if i2 == -1 goto label2;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeUser(int,boolean)>(i0, 1);

     label2:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: void setInt(java.lang.String,int,int)>("serial-number", i1, i0);

     label3:
        return;
    }

    private void clearUserKeyProtection(int, byte[])
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i2;
        long l1;
        android.os.UserManager $r1;
        android.os.storage.IStorageManager $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.String $r7;
        byte[] r8;
        android.content.pm.UserInfo r9;
        java.lang.IllegalStateException r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r8 := @parameter1: byte[];

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r9 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.storage.IStorageManager mStorageManager>;

        $i2 = r9.<android.content.pm.UserInfo: int serialNumber>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void clearUserKeyAuth(int,int,byte[],byte[])>(i0, $i2, null, r8);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        goto label6;

     label4:
        $r4 := @caughtexception;

     label5:
        r12 = new java.lang.IllegalStateException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clearUserKeyAuth failed user=");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r12;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private com.android.internal.widget.VerifyCredentialResponse convertResponse(android.service.gatekeeper.GateKeeperResponse)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.service.gatekeeper.GateKeeperResponse r1;
        com.android.internal.widget.VerifyCredentialResponse $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.service.gatekeeper.GateKeeperResponse;

        $r2 = staticinvoke <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse fromGateKeeperResponse(android.service.gatekeeper.GateKeeperResponse)>(r1);

        return $r2;
    }

    private com.android.internal.widget.LockscreenCredential createPattern(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsService r0;
        byte[] r1;
        java.util.List $r2;
        java.lang.String r3;
        com.android.internal.widget.LockscreenCredential r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r3 := @parameter0: java.lang.String;

        r1 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>();

        $r2 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List byteArrayToPattern(byte[])>(r1);

        r4 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPattern(java.util.List)>($r2);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r1, 0);

        return r4;
    }

    private static java.lang.String credentialTypeToString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == -1 goto label4;

        if i0 == 1 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label1:
        return "Password";

     label2:
        return "Pin";

     label3:
        return "Pattern";

     label4:
        return "None";
    }

    private void disableEscrowTokenOnNonManagedDevicesIfNeeded(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.LockSettingsService$Injector $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.app.admin.DeviceStateCache $r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        com.android.server.locksettings.SyntheticPasswordManager $r10;
        android.os.UserManagerInternal r11;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        r11 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $z0 = virtualinvoke r11.<android.os.UserManagerInternal: boolean isUserManaged(int)>(i0);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Managed profile can have escrow token");

        return;

     label1:
        $z1 = virtualinvoke r11.<android.os.UserManagerInternal: boolean isDeviceManaged()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Corp-owned device can have escrow token");

        return;

     label2:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsService$Injector: android.app.admin.DeviceStateCache getDeviceStateCache()>();

        $z2 = virtualinvoke $r3.<android.app.admin.DeviceStateCache: boolean isDeviceProvisioned()>();

        if $z2 != 0 goto label3;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Postpone disabling escrow tokens until device is provisioned");

        return;

     label3:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z3 = virtualinvoke $r5.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.automotive");

        if $z3 == 0 goto label4;

        return;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disabling escrow token on user ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r9);

        $z4 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

        if $z4 == 0 goto label5;

        $r10 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r10.<com.android.server.locksettings.SyntheticPasswordManager: void destroyEscrowData(int)>(i0);

     label5:
        return;
    }

    private com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential, int, long, int, com.android.internal.widget.ICheckCredentialProgressCallback)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.internal.widget.LockscreenCredential r1;
        int i0, i2;
        long l1;
        com.android.internal.widget.ICheckCredentialProgressCallback r2;
        com.android.internal.widget.VerifyCredentialResponse $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        r2 := @parameter4: com.android.internal.widget.ICheckCredentialProgressCallback;

        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback,java.util.ArrayList)>(r1, i0, l1, i2, r2, null);

        return $r3;
    }

    private com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential, int, long, int, com.android.internal.widget.ICheckCredentialProgressCallback, java.util.ArrayList)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i9, $i10;
        long l1;
        java.lang.IllegalArgumentException $r1;
        boolean $z0, $z1;
        com.android.server.locksettings.LockSettingsStorage $r2;
        com.android.server.locksettings.LockSettingsStrongAuth $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r9;
        com.android.internal.widget.VerifyCredentialResponse $r10, $r11, $r15, r19, r22;
        android.content.Context $r12;
        com.android.server.locksettings.LockSettingsService$Injector $r13;
        android.content.ContentResolver $r14;
        com.android.internal.widget.LockscreenCredential r16;
        com.android.internal.widget.ICheckCredentialProgressCallback r17;
        java.util.ArrayList r18;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash r20;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r16 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        r17 := @parameter4: com.android.internal.widget.ICheckCredentialProgressCallback;

        r18 := @parameter5: java.util.ArrayList;

        if r16 == null goto label7;

        $z0 = virtualinvoke r16.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z0 != 0 goto label7;

        if i2 != -9999 goto label1;

        $r13 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        $r12 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r14 = virtualinvoke $r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i10 = virtualinvoke $r13.<com.android.server.locksettings.LockSettingsService$Injector: int settingsGlobalGetInt(android.content.ContentResolver,java.lang.String,int)>($r14, "device_provisioned", 0);

        if $i10 == 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", "FRP credential can only be verified prior to provisioning.");

        $r15 = <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse ERROR>;

        return $r15;

     label1:
        r19 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse spBasedDoVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback,java.util.ArrayList)>(r16, i0, l1, i2, r17, r18);

        if r19 == null goto label3;

        $i9 = virtualinvoke r19.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i9 != 0 goto label2;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void sendCredentialsOnUnlockIfRequired(com.android.internal.widget.LockscreenCredential,int)>(r16, i2);

     label2:
        return r19;

     label3:
        if i2 != -9999 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsService", "Unexpected FRP credential type, should be SP based.");

        $r11 = <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse ERROR>;

        return $r11;

     label4:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        r20 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$CredentialHash readCredentialHash(int)>(i2);

        $i3 = r20.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        $z1 = virtualinvoke r16.<com.android.internal.widget.LockscreenCredential: boolean checkAgainstStoredType(int)>($i3);

        if $z1 != 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doVerifyCredential type mismatch with stored credential?? stored: ");

        $i5 = r20.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passed in: ");

        $i6 = virtualinvoke r16.<com.android.internal.widget.LockscreenCredential: int getType()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsService", $r9);

        $r10 = <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse ERROR>;

        return $r10;

     label5:
        r22 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyCredential(int,com.android.server.locksettings.LockSettingsStorage$CredentialHash,com.android.internal.widget.LockscreenCredential,int,long,com.android.internal.widget.ICheckCredentialProgressCallback)>(i2, r20, r16, i0, l1, r17);

        $i4 = virtualinvoke r22.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i4 != 0 goto label6;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStrongAuth: void reportSuccessfulStrongAuthUnlock(int)>(i2);

     label6:
        return r22;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credential can\'t be null or empty");

        throw $r1;
    }

    private void enforceFrpResolved()
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.ContentResolver r1;
        com.android.server.locksettings.LockSettingsService$Injector r2, $r4;
        android.content.Context $r3;
        int $i0, $i1;
        java.lang.SecurityException $r5;
        boolean z0, z1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        z0 = 0;

        $i0 = virtualinvoke r2.<com.android.server.locksettings.LockSettingsService$Injector: int settingsSecureGetInt(android.content.ContentResolver,java.lang.String,int,int)>(r1, "user_setup_complete", 0, 0);

        if $i0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        $i1 = virtualinvoke $r4.<com.android.server.locksettings.LockSettingsService$Injector: int settingsSecureGetInt(android.content.ContentResolver,java.lang.String,int,int)>(r1, "secure_frp_mode", 0, 0);

        if $i1 != 1 goto label3;

        z0 = 1;

     label3:
        if z1 == 0 goto label5;

        if z0 != 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Cannot change credential in SUW while factory reset protection is not resolved yet");

        throw $r5;

     label5:
        return;
    }

    private void enforceShell()
    {
        com.android.server.locksettings.LockSettingsService r0;
        boolean $z0;
        java.lang.SecurityException $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isCallerShell()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must be shell");

        throw $r1;
    }

    private byte[] enrollCredential(byte[], byte[], byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        byte[] r1, r2, r5, r7;
        int i0;
        android.service.gatekeeper.IGateKeeperService $r3;
        android.os.RemoteException $r4;
        android.service.gatekeeper.GateKeeperResponse r6;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r5 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i0);

     label1:
        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r6 = interfaceinvoke $r3.<android.service.gatekeeper.IGateKeeperService: android.service.gatekeeper.GateKeeperResponse enroll(int,byte[],byte[],byte[])>(i0, r5, r1, r2);

     label2:
        if r6 != null goto label3;

        return null;

     label3:
        r7 = virtualinvoke r6.<android.service.gatekeeper.GateKeeperResponse: byte[] getPayload()>();

        if r7 == null goto label4;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeystorePassword(byte[],int)>(r2, i0);

        goto label5;

     label4:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", "Throttled while enrolling a password");

     label5:
        return r7;

     label6:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to enroll credential", $r4);

        return null;

        catch android.os.RemoteException from label1 to label2 with label6;
    }

    private void ensureProfileKeystoreUnlocked(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.security.KeyStore $r1;
        android.security.KeyStore$State $r2, $r3;
        android.os.UserManager $r4;
        android.content.pm.UserInfo $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        $r2 = virtualinvoke $r1.<android.security.KeyStore: android.security.KeyStore$State state(int)>(i0);

        $r3 = <android.security.KeyStore$State: android.security.KeyStore$State LOCKED>;

        if $r2 != $r3 goto label1;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean hasUnifiedChallenge(int)>(i0);

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Managed profile got unlocked, will unlock its keystore");

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockChildProfile(int,boolean,int,long,java.util.ArrayList)>(i0, 1, 0, 0L, null);

     label1:
        return;
    }

    private android.hardware.face.FaceManager$RemovalCallback faceManagerRemovalCallback(java.util.concurrent.CountDownLatch)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.util.concurrent.CountDownLatch r1;
        com.android.server.locksettings.LockSettingsService$5 $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        $r2 = new com.android.server.locksettings.LockSettingsService$5;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsService$5: void <init>(com.android.server.locksettings.LockSettingsService,java.util.concurrent.CountDownLatch)>(r0, r1);

        return $r2;
    }

    private android.hardware.fingerprint.FingerprintManager$RemovalCallback fingerprintManagerRemovalCallback(java.util.concurrent.CountDownLatch)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.util.concurrent.CountDownLatch r1;
        com.android.server.locksettings.LockSettingsService$4 $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        $r2 = new com.android.server.locksettings.LockSettingsService$4;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsService$4: void <init>(com.android.server.locksettings.LockSettingsService,java.util.concurrent.CountDownLatch)>(r0, r1);

        return $r2;
    }

    private void fixateNewestUserKeyAuth(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        long l1;
        android.os.storage.IStorageManager $r1;
        android.os.RemoteException $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.storage.IStorageManager mStorageManager>;

        interfaceinvoke $r1.<android.os.storage.IStorageManager: void fixateNewestUserKeyAuth(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label7;

     label3:
        $r3 := @caughtexception;

        goto label8;

     label4:
        $r2 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "fixateNewestUserKeyAuth failed", $r2);

     label6:
        goto label2;

     label7:
        return;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    private void gateKeeperClearSecureUserId(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.service.gatekeeper.IGateKeeperService $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        interfaceinvoke $r2.<android.service.gatekeeper.IGateKeeperService: void clearSecureUserId(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to clear SID", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.internal.widget.LockscreenCredential generateRandomProfilePassword()
    {
        com.android.server.locksettings.LockSettingsService r0;
        char[] r1;
        byte[] r2, r7;
        com.android.internal.widget.LockscreenCredential r3;
        java.security.SecureRandom $r4;
        int $i0, $i1, i5;
        char $c2;
        byte $b3, $b4;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

     label1:
        $r4 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        r7 = virtualinvoke $r4.<java.security.SecureRandom: byte[] generateSeed(int)>(40);

        r1 = staticinvoke <libcore.util.HexEncoding: char[] encode(byte[])>(r7);

        $i0 = lengthof r1;

        r2 = newarray (byte)[$i0];

     label2:
        i5 = 0;

     label3:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label5;

     label4:
        $c2 = r1[i5];

        $b3 = (byte) $c2;

        $b4 = (byte) $b3;

        r2[i5] = $b4;

        i5 = i5 + 1;

        goto label3;

     label5:
        r3 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createManagedPassword(byte[])>(r2);

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r1, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r2, 0);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r7, 0);

     label6:
        return r3;

     label7:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Fail to generate profile password", $r5);

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label7;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label7;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label7;
    }

    private void getAuthSecretHal()
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.hardware.authsecret.V1_0.IAuthSecret $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

     label1:
        $r1 = staticinvoke <android.hardware.authsecret.V1_0.IAuthSecret: android.hardware.authsecret.V1_0.IAuthSecret getService(boolean)>(1);

        r0.<com.android.server.locksettings.LockSettingsService: android.hardware.authsecret.V1_0.IAuthSecret mAuthSecretService> = $r1;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to get AuthSecret HAL", $r3);

        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Device doesn\'t implement AuthSecret HAL");

     label5:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.util.Map getDecryptedPasswordsForAllTiedProfiles(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.util.List r2;
        int i0, i1, i3, i4;
        android.os.UserManager $r4, $r7;
        android.content.pm.UserInfo $r5, r17;
        boolean $z0, $z1, $z2;
        android.util.ArrayMap $r6;
        java.lang.Object $r8;
        java.lang.Integer $r9;
        com.android.internal.widget.LockscreenCredential $r10;
        java.lang.Throwable $r12;
        java.lang.StringBuilder $r13;
        java.lang.String $r16;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i3 := @parameter0: int;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i3);

        $z0 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r7.<android.os.UserManager: java.util.List getProfiles(int)>(i3);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label8;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        r17 = (android.content.pm.UserInfo) $r8;

        $z1 = virtualinvoke r17.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 != 0 goto label3;

        goto label7;

     label3:
        i1 = r17.<android.content.pm.UserInfo: int id>;

        $z2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i1);

        if $z2 == 0 goto label4;

        goto label7;

     label4:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r10 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>(i1);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label5:
        goto label7;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getDecryptedPasswordsForAllTiedProfiles failed for user ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", $r16, $r12);

     label7:
        i4 = i4 + 1;

        goto label2;

     label8:
        return $r6;

        catch java.security.KeyStoreException from label4 to label5 with label6;
        catch java.security.UnrecoverableKeyException from label4 to label5 with label6;
        catch java.security.NoSuchAlgorithmException from label4 to label5 with label6;
        catch javax.crypto.NoSuchPaddingException from label4 to label5 with label6;
        catch java.security.InvalidKeyException from label4 to label5 with label6;
        catch java.security.InvalidAlgorithmParameterException from label4 to label5 with label6;
        catch javax.crypto.IllegalBlockSizeException from label4 to label5 with label6;
        catch javax.crypto.BadPaddingException from label4 to label5 with label6;
        catch java.security.cert.CertificateException from label4 to label5 with label6;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private int getFrpCredentialType()
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.LockSettingsStorage$PersistentData r1;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.locksettings.LockSettingsStorage $r2;
        byte[] $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$PersistentData readPersistentDataBlock()>();

        $i1 = r1.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int type>;

        if $i1 == 1 goto label1;

        $i4 = r1.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int type>;

        if $i4 == 2 goto label1;

        return -1;

     label1:
        $r3 = r1.<com.android.server.locksettings.LockSettingsStorage$PersistentData: byte[] payload>;

        i0 = staticinvoke <com.android.server.locksettings.SyntheticPasswordManager: int getFrpCredentialType(byte[])>($r3);

        if i0 == 2 goto label2;

        return i0;

     label2:
        $i2 = r1.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int qualityForUi>;

        $i3 = staticinvoke <com.android.server.locksettings.LockSettingsService: int pinOrPasswordQualityToCredentialType(int)>($i2);

        return $i3;
    }

    private int getKeyguardStoredQuality(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i2;
        com.android.server.locksettings.LockSettingsStorage $r1;
        long $l1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $l1 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: long getLong(java.lang.String,long,int)>("lockscreen.password_type", 0L, i0);

        $i2 = (int) $l1;

        return $i2;
    }

    private java.util.Set getProfilesWithSameLockScreen(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.util.Iterator r2;
        android.content.pm.UserInfo r3;
        android.util.ArraySet $r4;
        android.os.UserManager $r5;
        java.util.List $r6;
        boolean $z0, $z2;
        java.lang.Object $r7;
        java.lang.Integer $r8;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r6 = virtualinvoke $r5.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r7;

        $i1 = r3.<android.content.pm.UserInfo: int id>;

        if $i1 == i0 goto label2;

        $i3 = r3.<android.content.pm.UserInfo: int profileGroupId>;

        if $i3 != i0 goto label3;

        $i4 = r3.<android.content.pm.UserInfo: int id>;

        $z2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>($i4);

        if $z2 == 0 goto label3;

     label2:
        $i2 = r3.<android.content.pm.UserInfo: int id>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label3:
        goto label1;

     label4:
        return $r4;
    }

    private boolean getSeparateProfileChallengeEnabledInternal(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        java.lang.Object r1;
        boolean z0;
        com.android.server.locksettings.LockSettingsStorage $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: java.lang.Object mSeparateChallengeLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        z0 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.profilechallenge", 0, i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean hasUnifiedChallenge(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean $z0, $z1, z2;
        com.android.server.locksettings.LockSettingsStorage $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i0);

        if $z0 != 0 goto label1;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $z1 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: boolean hasChildProfileLock(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void hideEncryptionNotification(android.os.UserHandle)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.os.UserHandle r1;
        android.app.NotificationManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.os.UserHandle;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.app.NotificationManager mNotificationManager>;

        virtualinvoke $r2.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, 9, r1);

        return;
    }

    private boolean isCallerShell()
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 2000 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isEscrowTokenActive(long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r3;
        boolean z0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        z0 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: boolean existsHandle(long,int)>(l0, i1);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean isManagedProfileWithSeparatedLock(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.os.UserManager $r1;
        android.content.pm.UserInfo $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r2 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isManagedProfileWithUnifiedLock(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.os.UserManager $r1;
        android.content.pm.UserInfo $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r2 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i0);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isSyntheticPasswordBasedCredentialLocked(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long $l0;
        byte $b1;
        com.android.server.locksettings.LockSettingsStorage $r1;
        com.android.server.locksettings.LockSettingsStorage$PersistentData $r2;
        int i2, i3;
        boolean z1, z2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i2 := @parameter0: int;

        z1 = 0;

        if i2 != -9999 goto label3;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$PersistentData readPersistentDataBlock()>();

        i3 = $r2.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int type>;

        if i3 == 1 goto label1;

        if i3 != 2 goto label2;

     label1:
        z1 = 1;

     label2:
        return z1;

     label3:
        z2 = 0;

        $l0 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i2);

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label4;

        z2 = 1;

     label4:
        return z2;
    }

    private boolean isUserKeyUnlocked(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0;
        android.os.storage.IStorageManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.storage.IStorageManager mStorageManager>;

        z0 = interfaceinvoke $r2.<android.os.storage.IStorageManager: boolean isUserKeyUnlocked(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "failed to check user key locked state", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isUserSecure(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: int getCredentialTypeInternal(int)>(i0);

        if $i1 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static void lambda$notifySeparateProfileChallengeChanged$0(int)
    {
        int i0;
        android.app.admin.DevicePolicyManagerInternal r0;
        java.lang.Object $r1;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        r0 = (android.app.admin.DevicePolicyManagerInternal) $r1;

        if r0 == null goto label1;

        virtualinvoke r0.<android.app.admin.DevicePolicyManagerInternal: void reportSeparateProfileChallengeChanged(int)>(i0);

     label1:
        return;
    }

    static void lambda$scheduleGc$4()
    {
        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        staticinvoke <java.lang.System: void gc()>();

        return;
    }

    private android.app.admin.PasswordMetrics loadPasswordMetrics(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r2;
        long $l1;
        java.lang.Throwable $r3;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r4;
        android.app.admin.PasswordMetrics r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r4 := @parameter0: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        r5 = virtualinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: android.app.admin.PasswordMetrics getPasswordMetrics(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,long,int)>(r4, $l1, i0);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void maybeShowEncryptionNotificationForUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.os.UserHandle r1, $r6;
        android.os.UserManager $r2, $r3, $r4, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.content.pm.UserInfo r8, r9;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r8 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke r8.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserKeyUnlocked(int)>(i0);

        if $z1 == 0 goto label2;

        return;

     label2:
        r1 = virtualinvoke r8.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>(i0);

        if $z2 == 0 goto label3;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $z3 = virtualinvoke $r3.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(android.os.UserHandle)>(r1);

        if $z3 != 0 goto label3;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r9 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r9 == null goto label3;

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r6 = virtualinvoke r9.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $z4 = virtualinvoke $r5.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(android.os.UserHandle)>($r6);

        if $z4 == 0 goto label3;

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $z5 = virtualinvoke $r7.<android.os.UserManager: boolean isQuietModeEnabled(android.os.UserHandle)>(r1);

        if $z5 != 0 goto label3;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void showEncryptionNotificationForProfile(android.os.UserHandle)>(r1);

     label3:
        return;
    }

    private void migrateFrpCredential()
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i2, $i3, $i5, $i7;
        com.android.server.locksettings.LockSettingsStorage $r1;
        com.android.server.locksettings.LockSettingsStorage$PersistentData $r2, $r3;
        android.os.UserManager $r4;
        java.util.List $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r6;
        android.content.Context $r7;
        long $l4, $l6;
        com.android.server.locksettings.SyntheticPasswordManager $r8, r12;
        java.lang.Throwable $r9;
        java.util.Iterator r10;
        android.content.pm.UserInfo r11;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$PersistentData readPersistentDataBlock()>();

        $r3 = <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE>;

        if $r2 == $r3 goto label01;

        return;

     label01:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r5 = virtualinvoke $r4.<android.os.UserManager: java.util.List getUsers()>();

        r10 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r6 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (android.content.pm.UserInfo) $r6;

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $z1 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean userOwnsFrpCredential(android.content.Context,android.content.pm.UserInfo)>($r7, r11);

        if $z1 == 0 goto label09;

        $i1 = r11.<android.content.pm.UserInfo: int id>;

        $z2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>($i1);

        if $z2 == 0 goto label09;

        r12 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r12;

     label03:
        $i2 = r11.<android.content.pm.UserInfo: int id>;

        $z3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>($i2);

        if $z3 == 0 goto label04;

        $i3 = r11.<android.content.pm.UserInfo: int id>;

        $l4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>("lockscreen.password_type", 0L, $i3);

        i0 = (int) $l4;

        $r8 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $i5 = r11.<android.content.pm.UserInfo: int id>;

        $l6 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>($i5);

        $i7 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: int redactActualQualityToMostLenientEquivalentQuality(int)>(i0);

        virtualinvoke $r8.<com.android.server.locksettings.SyntheticPasswordManager: void migrateFrpPasswordLocked(long,android.content.pm.UserInfo,int)>($l6, r11, $i7);

     label04:
        exitmonitor r12;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

     label07:
        exitmonitor r12;

     label08:
        throw $r9;

     label09:
        goto label02;

     label10:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    private void migrateOldData()
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0, l16, l20;
        int i1, $i3, $i5, $i8, $i10, i12, i13, i14, i15, i18, i19, i21, i22, i23, i24, i25, i26, i27;
        java.lang.String $r1, $r2, $r3, $r4, $r5, r25, r26, r29;
        android.os.UserManager $r6, $r9, $r14, $r18;
        java.lang.Object $r7, $r10, $r12, $r15, $r19;
        android.content.pm.UserInfo $r8, $r11, $r13, $r16, $r20;
        boolean $z0, $z1, $z2, $z5, z6, $z7;
        byte $b7;
        android.content.Context $r17, $r21, $r33;
        android.provider.Settings$SettingNotFoundException $r22;
        android.content.ContentResolver r23, r27;
        java.lang.String[] r24;
        java.util.List r28, r31, r32, r35;
        android.content.pm.PackageManager $r34;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated", null, 0);

        if $r1 != null goto label04;

        $r21 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        r23 = virtualinvoke $r21.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r24 = <com.android.server.locksettings.LockSettingsService: java.lang.String[] VALID_SETTINGS>;

        i12 = lengthof r24;

        i13 = 0;

     label01:
        if i13 >= i12 goto label03;

        r25 = r24[i13];

        r26 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r23, r25);

        if r26 == null goto label02;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>(r25, r26, 0);

     label02:
        i13 = i13 + 1;

        goto label01;

     label03:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated lock settings to new location");

     label04:
        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_user_specific", null, 0);

        if $r2 != null goto label16;

        $r17 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        r27 = virtualinvoke $r17.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r18 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r28 = virtualinvoke $r18.<android.os.UserManager: java.util.List getUsers()>();

        i14 = 0;

     label05:
        $i8 = interfaceinvoke r28.<java.util.List: int size()>();

        if i14 >= $i8 goto label15;

        $r19 = interfaceinvoke r28.<java.util.List: java.lang.Object get(int)>(i14);

        $r20 = (android.content.pm.UserInfo) $r19;

        i15 = $r20.<android.content.pm.UserInfo: int id>;

        r29 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>(r27, "lock_screen_owner_info", i15);

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r29);

        if $z2 != 0 goto label06;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", r29, i15);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r27, "lock_screen_owner_info", "", i15);

     label06:
        $i10 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int)>(r27, "lock_screen_owner_info_enabled", i15);

        if $i10 == 0 goto label08;

     label07:
        z6 = 1;

        goto label09;

     label08:
        z6 = 0;

     label09:
        if z6 == 0 goto label10;

        l16 = 1L;

        goto label11;

     label10:
        l16 = 0L;

     label11:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", l16, i15);

     label12:
        goto label14;

     label13:
        $r22 := @caughtexception;

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r29);

        if $z5 != 0 goto label14;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("lock_screen_owner_info_enabled", 1L, i15);

     label14:
        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r27, "lock_screen_owner_info_enabled", 0, i15);

        i14 = i14 + 1;

        goto label05;

     label15:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_user_specific", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated per-user lock settings to new location");

        goto label16;

     label16:
        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_biometric_weak", null, 0);

        if $r3 != null goto label20;

        $r14 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r31 = virtualinvoke $r14.<android.os.UserManager: java.util.List getUsers()>();

        i18 = 0;

     label17:
        $i5 = interfaceinvoke r31.<java.util.List: int size()>();

        if i18 >= $i5 goto label19;

        $r15 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i18);

        $r16 = (android.content.pm.UserInfo) $r15;

        i19 = $r16.<android.content.pm.UserInfo: int id>;

        l20 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>("lockscreen.password_type", 0L, i19);

        l0 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>("lockscreen.password_type_alternate", 0L, i19);

        $b7 = l20 cmp 32768L;

        if $b7 != 0 goto label18;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("lockscreen.password_type", l0, i19);

     label18:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("lockscreen.password_type_alternate", 0L, i19);

        i18 = i18 + 1;

        goto label17;

     label19:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_biometric_weak", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated biometric weak to use the fallback instead");

        goto label20;

     label20:
        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_lockscreen_disabled", null, 0);

        if $r4 != null goto label27;

        $r9 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r32 = virtualinvoke $r9.<android.os.UserManager: java.util.List getUsers()>();

        i1 = interfaceinvoke r32.<java.util.List: int size()>();

        i21 = 0;

        i22 = 0;

     label21:
        if i22 >= i1 goto label23;

        i23 = i21;

        $r12 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(i22);

        $r13 = (android.content.pm.UserInfo) $r12;

        $z1 = virtualinvoke $r13.<android.content.pm.UserInfo: boolean supportsSwitchTo()>();

        if $z1 == 0 goto label22;

        i23 = i21 + 1;

     label22:
        i22 = i22 + 1;

        i21 = i23;

        goto label21;

     label23:
        if i21 <= 1 goto label26;

        i24 = 0;

     label24:
        if i24 >= i1 goto label26;

        $r10 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(i24);

        $r11 = (android.content.pm.UserInfo) $r10;

        i25 = $r11.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.disabled", 0, i25);

        if $z0 == 0 goto label25;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>("lockscreen.disabled", 0, i25);

     label25:
        i24 = i24 + 1;

        goto label24;

     label26:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_lockscreen_disabled", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated lockscreen disabled flag");

     label27:
        $r33 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r34 = virtualinvoke $r33.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z7 = virtualinvoke $r34.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        if $z7 == 0 goto label30;

        $r5 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>("migrated_wear_lockscreen_disabled", null, 0);

        if $r5 != null goto label30;

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r35 = virtualinvoke $r6.<android.os.UserManager: java.util.List getUsers()>();

        i26 = interfaceinvoke r35.<java.util.List: int size()>();

        i27 = 0;

     label28:
        if i27 >= i26 goto label29;

        $r7 = interfaceinvoke r35.<java.util.List: java.lang.Object get(int)>(i27);

        $r8 = (android.content.pm.UserInfo) $r7;

        $i3 = $r8.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>("lockscreen.disabled", 0, $i3);

        i27 = i27 + 1;

        goto label28;

     label29:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>("migrated_wear_lockscreen_disabled", "true", 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated lockscreen_disabled for Wear devices");

     label30:
        return;

        catch android.provider.Settings$SettingNotFoundException from label06 to label07 with label13;
        catch android.provider.Settings$SettingNotFoundException from label11 to label12 with label13;
    }

    private void migrateOldDataAfterSystemReady()
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.Context $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r1);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>("migrated_frp", 0, 0);

        if $z1 != 0 goto label1;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void migrateFrpCredential()>();

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>("migrated_frp", 1, 0);

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Migrated migrated_frp.");

     label1:
        return;
    }

    private void notifyPasswordChanged(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings._$$Lambda$LockSettingsService$uLUdo5pAFhnR0hn_L5FUgWTjl70 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler>;

        $r1 = new com.android.server.locksettings._$$Lambda$LockSettingsService$uLUdo5pAFhnR0hn_L5FUgWTjl70;

        specialinvoke $r1.<com.android.server.locksettings._$$Lambda$LockSettingsService$uLUdo5pAFhnR0hn_L5FUgWTjl70: void <init>(com.android.server.locksettings.LockSettingsService,int)>(r0, i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void notifySeparateProfileChallengeChanged(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings._$$Lambda$LockSettingsService$6ZJNEvi0AXsP3F_UD8F01RaIg3M $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler>;

        $r1 = new com.android.server.locksettings._$$Lambda$LockSettingsService$6ZJNEvi0AXsP3F_UD8F01RaIg3M;

        specialinvoke $r1.<com.android.server.locksettings._$$Lambda$LockSettingsService$6ZJNEvi0AXsP3F_UD8F01RaIg3M: void <init>(int)>(i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void onAuthTokenKnownForUser(int, com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r1;
        com.android.server.locksettings.LockSettingsService$Injector $r2;
        boolean $z0;
        com.android.server.locksettings.RebootEscrowManager $r3;
        byte $b1;
        byte[] $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        $z0 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsService$Injector: boolean isGsiRunning()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Running in GSI; skipping calls to AuthSecret and RebootEscrow");

        return;

     label1:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.RebootEscrowManager mRebootEscrowManager>;

        $b1 = virtualinvoke r1.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte getVersion()>();

        $r4 = virtualinvoke r1.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] getSyntheticPassword()>();

        virtualinvoke $r3.<com.android.server.locksettings.RebootEscrowManager: void callToRebootEscrowIfNeeded(int,byte,byte[])>(i0, $b1, $r4);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void callToAuthSecretIfNeeded(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>(i0, r1);

        return;
    }

    private void onCredentialVerified(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken, int, long, java.util.ArrayList, android.app.admin.PasswordMetrics, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i2;
        long l1;
        java.util.ArrayList r1;
        byte[] $r2, r9;
        boolean $z0;
        com.android.server.locksettings.LockSettingsStrongAuth $r3;
        android.util.SparseArray $r4;
        java.lang.Throwable $r5;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r6;
        android.app.admin.PasswordMetrics r7;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r6 := @parameter0: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 := @parameter3: java.util.ArrayList;

        r7 := @parameter4: android.app.admin.PasswordMetrics;

        i2 := @parameter5: int;

        if r7 == null goto label6;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.util.SparseArray mUserPasswordMetrics>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r7);

        exitmonitor r0;

     label2:
        goto label7;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsService", "Null metrics after credential verification");

     label7:
        $r2 = virtualinvoke r6.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveKeyStorePassword()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockKeystore(byte[],int)>($r2, i2);

        r9 = virtualinvoke r6.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveDiskEncryptionKey()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockUser(int,byte[],byte[],int,long,java.util.ArrayList)>(i2, null, r9, i0, l1, r1);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r9, 0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void activateEscrowTokens(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>(r6, i2);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithSeparatedLock(int)>(i2);

        if $z0 == 0 goto label8;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setDeviceUnlockedForUser(int)>(i2);

     label8:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStrongAuth: void reportSuccessfulStrongAuthUnlock(int)>(i2);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onAuthTokenKnownForUser(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>(i2, r6);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static int pinOrPasswordQualityToCredentialType(int)
    {
        int i0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isQualityAlphabeticPassword(int)>(i0);

        if $z0 == 0 goto label1;

        return 4;

     label1:
        $z1 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isQualityNumericPin(int)>(i0);

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Quality is neither Pin nor password: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private int redactActualQualityToMostLenientEquivalentQuality(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        if i0 == 131072 goto label2;

        if i0 == 196608 goto label2;

        if i0 == 262144 goto label1;

        if i0 == 327680 goto label1;

        if i0 == 393216 goto label1;

        return i0;

     label1:
        return 262144;

     label2:
        return 131072;
    }

    private void removeAllFaceForUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.hardware.face.FaceManager r1;
        com.android.server.locksettings.LockSettingsService$Injector $r2;
        boolean $z0, $z1;
        java.util.concurrent.CountDownLatch $r3;
        android.hardware.face.Face $r4;
        android.hardware.face.FaceManager$RemovalCallback $r5;
        java.util.concurrent.TimeUnit $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsService$Injector: android.hardware.face.FaceManager getFaceManager()>();

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<android.hardware.face.FaceManager: boolean isHardwareDetected()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r1.<android.hardware.face.FaceManager: boolean hasEnrolledTemplates(int)>(i0);

        if $z1 == 0 goto label4;

        virtualinvoke r1.<android.hardware.face.FaceManager: void setActiveUser(int)>(i0);

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r4 = new android.hardware.face.Face;

        specialinvoke $r4.<android.hardware.face.Face: void <init>(java.lang.CharSequence,int,long)>(null, 0, 0L);

        $r5 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: android.hardware.face.FaceManager$RemovalCallback faceManagerRemovalCallback(java.util.concurrent.CountDownLatch)>($r3);

        virtualinvoke r1.<android.hardware.face.FaceManager: void remove(android.hardware.face.Face,int,android.hardware.face.FaceManager$RemovalCallback)>($r4, i0, $r5);

     label1:
        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10000L, $r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Latch interrupted when removing face", $r7);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void removeAllFingerprintForUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.hardware.fingerprint.FingerprintManager r1;
        com.android.server.locksettings.LockSettingsService$Injector $r3;
        boolean $z0, $z1;
        java.util.concurrent.CountDownLatch $r4;
        android.hardware.fingerprint.Fingerprint $r5;
        android.hardware.fingerprint.FingerprintManager$RemovalCallback $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsService$Injector: android.hardware.fingerprint.FingerprintManager getFingerprintManager()>();

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints(int)>(i0);

        if $z1 == 0 goto label4;

        virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager: void setActiveUser(int)>(i0);

        $r4 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r5 = new android.hardware.fingerprint.Fingerprint;

        specialinvoke $r5.<android.hardware.fingerprint.Fingerprint: void <init>(java.lang.CharSequence,int,int,long)>(null, i0, 0, 0L);

        $r6 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: android.hardware.fingerprint.FingerprintManager$RemovalCallback fingerprintManagerRemovalCallback(java.util.concurrent.CountDownLatch)>($r4);

        virtualinvoke r1.<android.hardware.fingerprint.FingerprintManager: void remove(android.hardware.fingerprint.Fingerprint,int,android.hardware.fingerprint.FingerprintManager$RemovalCallback)>($r5, i0, $r6);

     label1:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r4.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(10000L, $r7);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Latch interrupted when removing fingerprint", $r8);

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void removeBiometricsForUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeAllFingerprintForUser(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeAllFaceForUser(int)>(i0);

        return;
    }

    private boolean removeEscrowToken(long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0, $l2;
        int i1;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r3, $r4, $r5;
        byte $b3;
        boolean $z0, $z1;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label01:
        $l2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i1);

        $b3 = l0 cmp $l2;

        if $b3 != 0 goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Cannot remove password handle");

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $z0 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: boolean removePendingToken(long,int)>(l0, i1);

        if $z0 == 0 goto label05;

        exitmonitor r1;

     label04:
        return 1;

     label05:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $z1 = virtualinvoke $r4.<com.android.server.locksettings.SyntheticPasswordManager: boolean existsHandle(long,int)>(l0, i1);

        if $z1 == 0 goto label07;

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r5.<com.android.server.locksettings.SyntheticPasswordManager: void destroyTokenBasedSyntheticPassword(long,int)>(l0, i1);

        exitmonitor r1;

     label06:
        return 1;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void removeKeystoreProfileKey(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        java.lang.StringBuilder $r1, $r12, r18, r19;
        java.lang.String $r4, $r7, $r10, $r15;
        java.lang.Throwable $r11;
        java.security.KeyStore r17;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remove keystore profile key for user: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r4);

     label1:
        r17 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r17.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_encrypt_");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r17.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r7);

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_decrypt_");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r17.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r10);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to remove keystore profile key for user:");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", $r15, $r11);

     label4:
        return;

        catch java.security.KeyStoreException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    private void removeUser(int, boolean)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.android.server.locksettings.SyntheticPasswordManager $r6;
        com.android.server.locksettings.LockSettingsStrongAuth $r7;
        android.security.KeyStore $r8;
        com.android.server.locksettings.ManagedProfilePasswordCache $r9;
        android.os.UserManager $r10;
        android.content.pm.UserInfo $r11;
        com.android.server.locksettings.LockSettingsStorage $r12;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoveUser: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r5);

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r6.<com.android.server.locksettings.SyntheticPasswordManager: void removeUser(int)>(i0);

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r7.<com.android.server.locksettings.LockSettingsStrongAuth: void removeUser(int)>(i0);

        $r8 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        virtualinvoke $r8.<android.security.KeyStore: void onUserRemoved(int)>(i0);

        $r9 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache>;

        virtualinvoke $r9.<com.android.server.locksettings.ManagedProfilePasswordCache: void removePassword(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void gateKeeperClearSecureUserId(int)>(i0);

        if z0 != 0 goto label1;

        $r10 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r11 = virtualinvoke $r10.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z1 = virtualinvoke $r11.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label2;

     label1:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeKeystoreProfileKey(int)>(i0);

     label2:
        $r12 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r12.<com.android.server.locksettings.LockSettingsStorage: void removeUser(int)>(i0);

        return;
    }

    private void scheduleGc()
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.'-$$Lambda$LockSettingsService$RYXk-pEQUEGQzg20DHY1hVBg6R8' $r1;
        android.os.Handler $r2;
        java.lang.Runnable r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler>;

        $r1 = <com.android.server.locksettings._$$Lambda$LockSettingsService$RYXk_pEQUEGQzg20DHY1hVBg6R8: com.android.server.locksettings.'-$$Lambda$LockSettingsService$RYXk-pEQUEGQzg20DHY1hVBg6R8' INSTANCE>;

        r3 = (java.lang.Runnable) $r1;

        virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r3, 2000L);

        return;
    }

    private static byte[] secretFromCredential(com.android.internal.widget.LockscreenCredential)
    {
        java.security.MessageDigest r0;
        java.lang.String $r1;
        byte[] $r2, $r3, $r4, r8;
        java.lang.Throwable $r5;
        java.lang.IllegalStateException $r6;
        com.android.internal.widget.LockscreenCredential r7;

        r7 := @parameter0: com.android.internal.widget.LockscreenCredential;

     label1:
        r0 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-512");

        $r1 = "Android FBE credential hash";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $r3 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, 128);

        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r3);

        $r4 = virtualinvoke r7.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        virtualinvoke r0.<java.security.MessageDigest: void update(byte[])>($r4);

        r8 = virtualinvoke r0.<java.security.MessageDigest: byte[] digest()>();

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NoSuchAlgorithmException for SHA-512");

        throw $r6;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private void sendCredentialsOnChangeIfRequired(com.android.internal.widget.LockscreenCredential, int, boolean)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.internal.widget.LockscreenCredential r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.util.Set $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r6;
        int $i0, i1, i2;
        byte[] r7;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z1 == 0 goto label2;

        r7 = null;

        goto label3;

     label2:
        r7 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

     label3:
        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: java.util.Set getProfilesWithSameLockScreen(int)>(i1);

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $i0 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: int getType()>();

        virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void lockScreenSecretChanged(int,byte[],int)>($i0, r7, i2);

        goto label4;

     label5:
        return;
    }

    private void sendCredentialsOnUnlockIfRequired(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.internal.widget.LockscreenCredential r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.util.Set $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r6;
        int $i0, i1, i2;
        byte[] r7;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i1 := @parameter1: int;

        if i1 != -9999 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $z1 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z1 == 0 goto label3;

        r7 = null;

        goto label4;

     label3:
        r7 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

     label4:
        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: java.util.Set getProfilesWithSameLockScreen(int)>(i1);

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $i0 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: int getType()>();

        virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void lockScreenSecretAvailable(int,byte[],int)>($i0, r7, i2);

        goto label5;

     label6:
        return;
    }

    private void setAuthlessUserKeyProtection(int, byte[])
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        byte[] r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void addUserKeyAuth(int,byte[],byte[])>(i0, null, r1);

        return;
    }

    private void setDeviceUnlockedForUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.trust.TrustManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/trust/TrustManager;");

        $r3 = (android.app.trust.TrustManager) $r2;

        virtualinvoke $r3.<android.app.trust.TrustManager: void setDeviceLockedForUser(int,boolean)>(i0, 0);

        return;
    }

    private void setKeyguardStoredQuality(int, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1;
        long $l2;
        com.android.server.locksettings.LockSettingsStorage $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $l2 = (long) i0;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: void setLong(java.lang.String,long,int)>("lockscreen.password_type", $l2, i1);

        return;
    }

    private void setKeystorePassword(byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.security.KeyStore r1;
        java.lang.String $r2, r4;
        byte[] r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r3);

        r4 = $r2;

     label2:
        virtualinvoke r1.<android.security.KeyStore: boolean onUserPasswordChanged(int,java.lang.String)>(i0, r4);

        return;
    }

    private boolean setLockCredentialInternal(com.android.internal.widget.LockscreenCredential, com.android.internal.widget.LockscreenCredential, int, boolean)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, $z8, z9;
        com.android.server.locksettings.LockSettingsStorage $r3, $r8, $r15;
        byte[] $r4, $r5, $r6, $r7, $r13, r33, r37, r38;
        com.android.internal.widget.VerifyCredentialResponse $r9;
        java.lang.Object[] $r11;
        java.lang.String $r12, r34;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash $r16, r28, r35;
        com.android.internal.widget.LockscreenCredential $r17, r25, r26, r29;
        java.lang.Throwable $r18, $r22, $r23, $r24;
        android.os.RemoteException $r19, $r21, r40;
        java.lang.IllegalStateException $r20;
        com.android.server.locksettings.SyntheticPasswordManager r27, r32;
        android.service.gatekeeper.IGateKeeperService r36;
        android.service.gatekeeper.GateKeeperResponse r39;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r25 := @parameter0: com.android.internal.widget.LockscreenCredential;

        r26 := @parameter1: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter2: int;

        z6 := @parameter3: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r25);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r26);

        r27 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r27;

     label01:
        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

        if $z0 == 0 goto label03;

        z7 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean spBasedSetLockCredentialInternalLocked(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>(r25, r26, i0, z6);

        exitmonitor r27;

     label02:
        return z7;

     label03:
        exitmonitor r27;

     label04:
        $z1 = virtualinvoke r25.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z1 == 0 goto label05;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void clearUserKeyProtection(int,byte[])>(i0, null);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void gateKeeperClearSecureUserId(int)>(i0);

        $r15 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r16 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$CredentialHash: com.android.server.locksettings.LockSettingsStorage$CredentialHash createEmptyHash()>();

        virtualinvoke $r15.<com.android.server.locksettings.LockSettingsStorage: void writeCredentialHash(com.android.server.locksettings.LockSettingsStorage$CredentialHash,int)>($r16, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeyguardStoredQuality(int,int)>(0, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeystorePassword(byte[],int)>(null, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void fixateNewestUserKeyAuth(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void synchronizeUnifiedWorkChallengeForProfiles(int,java.util.Map)>(i0, null);

        $r17 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setUserPasswordMetrics(com.android.internal.widget.LockscreenCredential,int)>($r17, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void sendCredentialsOnChangeIfRequired(com.android.internal.widget.LockscreenCredential,int,boolean)>(r25, i0, z6);

        return 1;

     label05:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        r28 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$CredentialHash readCredentialHash(int)>(i0);

        $z2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i0);

        if $z2 == 0 goto label11;

        $z5 = virtualinvoke r26.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z5 == 0 goto label13;

     label06:
        r29 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>(i0);

     label07:
        r26 = r29;

        goto label13;

     label08:
        $r23 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to decrypt child profile key", $r23);

        goto label10;

     label09:
        $r22 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Child profile key not found");

     label10:
        goto label13;

     label11:
        $r4 = r28.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        if $r4 != null goto label13;

        $z4 = virtualinvoke r26.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z4 != 0 goto label12;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Saved credential provided, but none stored");

     label12:
        virtualinvoke r26.<com.android.internal.widget.LockscreenCredential: void close()>();

        r26 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        goto label13;

     label13:
        r32 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r32;

     label14:
        $z8 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean shouldMigrateToSyntheticPasswordLocked(int)>(i0);

        if $z8 == 0 goto label16;

        $r13 = r28.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[],com.android.internal.widget.LockscreenCredential,int)>($r13, r26, i0);

        z9 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean spBasedSetLockCredentialInternalLocked(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>(r25, r26, i0, z6);

        exitmonitor r32;

     label15:
        return z9;

     label16:
        exitmonitor r32;

     label17:
        $r5 = r28.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        $r6 = virtualinvoke r26.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        $r7 = virtualinvoke r25.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        r33 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: byte[] enrollCredential(byte[],byte[],byte[],int)>($r5, $r6, $r7, i0);

        if r33 != null goto label20;

        $z3 = virtualinvoke r25.<com.android.internal.widget.LockscreenCredential: boolean isPattern()>();

        if $z3 == 0 goto label18;

        r34 = "pattern";

        goto label19;

     label18:
        r34 = "password";

     label19:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r34;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to enroll %s: incorrect credential", $r11);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", $r12);

        return 0;

     label20:
        $i1 = virtualinvoke r25.<com.android.internal.widget.LockscreenCredential: int getType()>();

        r35 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$CredentialHash: com.android.server.locksettings.LockSettingsStorage$CredentialHash create(byte[],int)>(r33, $i1);

        $r8 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r8.<com.android.server.locksettings.LockSettingsStorage: void writeCredentialHash(com.android.server.locksettings.LockSettingsStorage$CredentialHash,int)>(r35, i0);

        $i2 = virtualinvoke r25.<com.android.internal.widget.LockscreenCredential: int getType()>();

        $i3 = staticinvoke <com.android.internal.widget.LockPatternUtils: int credentialTypeToPasswordQuality(int)>($i2);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeyguardStoredQuality(int,int)>($i3, i0);

     label21:
        r36 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r37 = r35.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        r38 = virtualinvoke r25.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

     label22:
        r39 = interfaceinvoke r36.<android.service.gatekeeper.IGateKeeperService: android.service.gatekeeper.GateKeeperResponse verifyChallenge(int,long,byte[],byte[])>(i0, 0L, r37, r38);

     label23:
        $r9 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse convertResponse(android.service.gatekeeper.GateKeeperResponse)>(r39);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setUserKeyProtection(int,com.android.internal.widget.LockscreenCredential,com.android.internal.widget.VerifyCredentialResponse)>(i0, r25, $r9);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void fixateNewestUserKeyAuth(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r25, 1, 0L, i0, null);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void synchronizeUnifiedWorkChallengeForProfiles(int,java.util.Map)>(i0, null);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void sendCredentialsOnChangeIfRequired(com.android.internal.widget.LockscreenCredential,int,boolean)>(r25, i0, z6);

        return 1;

     label24:
        $r19 := @caughtexception;

        r40 = $r19;

        goto label26;

     label25:
        $r21 := @caughtexception;

        r40 = $r21;

     label26:
        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to verify current credential", r40);

        throw $r20;

     label27:
        $r24 := @caughtexception;

     label28:
        exitmonitor r32;

     label29:
        throw $r24;

     label30:
        $r18 := @caughtexception;

     label31:
        exitmonitor r27;

     label32:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.io.FileNotFoundException from label06 to label07 with label09;
        catch java.security.UnrecoverableKeyException from label06 to label07 with label08;
        catch java.security.InvalidKeyException from label06 to label07 with label08;
        catch java.security.KeyStoreException from label06 to label07 with label08;
        catch java.security.NoSuchAlgorithmException from label06 to label07 with label08;
        catch javax.crypto.NoSuchPaddingException from label06 to label07 with label08;
        catch java.security.InvalidAlgorithmParameterException from label06 to label07 with label08;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label08;
        catch javax.crypto.BadPaddingException from label06 to label07 with label08;
        catch java.security.cert.CertificateException from label06 to label07 with label08;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch android.os.RemoteException from label21 to label22 with label25;
        catch android.os.RemoteException from label22 to label23 with label24;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label31 to label32 with label30;
    }

    private long setLockCredentialWithAuthTokenLocked(com.android.internal.widget.LockscreenCredential, com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        long l1;
        com.android.server.locksettings.SyntheticPasswordManager $r1, $r3, $r12, $r13, $r15, $r19;
        android.service.gatekeeper.IGateKeeperService $r2, $r14, $r16, $r20;
        boolean $z0, $z1, $z2;
        byte[] $r4, $r5, $r6, $r17, $r18;
        java.util.Set $r7;
        java.lang.Object $r8, $r10;
        java.util.Map$Entry $r9;
        com.android.internal.widget.LockscreenCredential $r11, r21;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r22;
        java.util.Map r23, r24;
        com.android.server.locksettings.ManagedProfilePasswordCache $r25;
        java.util.Iterator r26;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r21 := @parameter0: com.android.internal.widget.LockscreenCredential;

        r22 := @parameter1: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken;

        i0 := @parameter2: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        l1 = virtualinvoke $r1.<com.android.server.locksettings.SyntheticPasswordManager: long createPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,com.android.internal.widget.LockscreenCredential,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>($r2, r21, r22, i0);

        $z0 = virtualinvoke r21.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z0 != 0 goto label2;

        $r12 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $z2 = virtualinvoke $r12.<com.android.server.locksettings.SyntheticPasswordManager: boolean hasSidForUser(int)>(i0);

        if $z2 == 0 goto label1;

        $r19 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r20 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        virtualinvoke $r19.<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyChallenge(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,long,int)>($r20, r22, 0L, i0);

        r23 = null;

        goto label3;

     label1:
        $r13 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r14 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        virtualinvoke $r13.<com.android.server.locksettings.SyntheticPasswordManager: void newSidForUser(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>($r14, r22, i0);

        $r15 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r16 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        virtualinvoke $r15.<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyChallenge(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,long,int)>($r16, r22, 0L, i0);

        $r17 = virtualinvoke r22.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveDiskEncryptionKey()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setAuthlessUserKeyProtection(int,byte[])>(i0, $r17);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void fixateNewestUserKeyAuth(int)>(i0);

        $r18 = virtualinvoke r22.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveKeyStorePassword()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeystorePassword(byte[],int)>($r18, i0);

        r23 = null;

        goto label3;

     label2:
        r24 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: java.util.Map getDecryptedPasswordsForAllTiedProfiles(int)>(i0);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: void clearSidForUser(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void gateKeeperClearSecureUserId(int)>(i0);

        $r4 = virtualinvoke r22.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveDiskEncryptionKey()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockUserKey(int,byte[],byte[])>(i0, null, $r4);

        $r5 = virtualinvoke r22.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveDiskEncryptionKey()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void clearUserKeyProtection(int,byte[])>(i0, $r5);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void fixateNewestUserKeyAuth(int)>(i0);

        $r6 = virtualinvoke r22.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveKeyStorePassword()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockKeystore(byte[],int)>($r6, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeystorePassword(byte[],int)>(null, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeBiometricsForUser(int)>(i0);

        r23 = r24;

     label3:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setSyntheticPasswordHandleLocked(long,int)>(l1, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void synchronizeUnifiedWorkChallengeForProfiles(int,java.util.Map)>(i0, r23);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setUserPasswordMetrics(com.android.internal.widget.LockscreenCredential,int)>(r21, i0);

        $r25 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache>;

        virtualinvoke $r25.<com.android.server.locksettings.ManagedProfilePasswordCache: void removePassword(int)>(i0);

        if r23 == null goto label5;

        $r7 = interfaceinvoke r23.<java.util.Map: java.util.Set entrySet()>();

        r26 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke $r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.android.internal.widget.LockscreenCredential) $r10;

        virtualinvoke $r11.<com.android.internal.widget.LockscreenCredential: void zeroize()>();

        goto label4;

     label5:
        return l1;
    }

    private boolean setLockCredentialWithToken(com.android.internal.widget.LockscreenCredential, long, byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r2;
        boolean z0, $z1, $z2;
        com.android.server.locksettings._$$Lambda$LockSettingsService$3iCV7W6YQrxOv5dDGr5Cx3toXr0 $r3;
        android.os.Handler $r4;
        java.lang.Throwable $r5, $r6;
        com.android.internal.widget.LockscreenCredential r7;
        byte[] r8;
        java.lang.Object r9;
        java.lang.SecurityException r11;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r7 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter1: long;

        r8 := @parameter2: byte[];

        i1 := @parameter3: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $z1 = virtualinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: boolean hasEscrowData(int)>(i1);

        if $z1 == 0 goto label10;

        z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialWithTokenInternalLocked(com.android.internal.widget.LockscreenCredential,long,byte[],int)>(r7, l0, r8, i1);

        exitmonitor r1;

     label02:
        if z0 == 0 goto label09;

        r9 = r0.<com.android.server.locksettings.LockSettingsService: java.lang.Object mSeparateChallengeLock>;

        entermonitor r9;

     label03:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setSeparateProfileChallengeEnabledLocked(int,boolean,com.android.internal.widget.LockscreenCredential)>(i1, 1, null);

        exitmonitor r9;

     label04:
        $z2 = virtualinvoke r7.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z2 == 0 goto label05;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler>;

        $r3 = new com.android.server.locksettings._$$Lambda$LockSettingsService$3iCV7W6YQrxOv5dDGr5Cx3toXr0;

        specialinvoke $r3.<com.android.server.locksettings._$$Lambda$LockSettingsService$3iCV7W6YQrxOv5dDGr5Cx3toXr0: void <init>(com.android.server.locksettings.LockSettingsService,int)>(r0, i1);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

     label05:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void notifyPasswordChanged(int)>(i1);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void notifySeparateProfileChallengeChanged(int)>(i1);

        goto label09;

     label06:
        $r6 := @caughtexception;

     label07:
        exitmonitor r9;

     label08:
        throw $r6;

     label09:
        return z0;

     label10:
        r11 = new java.lang.SecurityException;

        specialinvoke r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Escrow token is disabled on the current user");

        throw r11;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private boolean setLockCredentialWithTokenInternalLocked(com.android.internal.widget.LockscreenCredential, long, byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.internal.widget.LockscreenCredential r1;
        int i0, $i1;
        com.android.server.locksettings.SyntheticPasswordManager $r2, $r8;
        android.service.gatekeeper.IGateKeeperService $r3;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken $r4, $r6, $r7;
        com.android.internal.widget.VerifyCredentialResponse $r5;
        long l5, l6;
        byte[] r9;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult r10;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l5 := @parameter1: long;

        r9 := @parameter2: byte[];

        i0 := @parameter3: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r10 = virtualinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,byte[],int)>($r3, l5, r9, i0);

        $r4 = r10.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        if $r4 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Invalid escrow token supplied");

        return 0;

     label1:
        $r5 = r10.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.internal.widget.VerifyCredentialResponse gkResponse>;

        $i1 = virtualinvoke $r5.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i1 == 0 goto label2;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", "Obsolete token: synthetic password derived but it fails GK verification.");

        return 0;

     label2:
        $r6 = r10.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onAuthTokenKnownForUser(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>(i0, $r6);

        l6 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r7 = r10.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: long setLockCredentialWithAuthTokenLocked(com.android.internal.widget.LockscreenCredential,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>(r1, $r7, i0);

        $r8 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r8.<com.android.server.locksettings.SyntheticPasswordManager: void destroyPasswordBasedSyntheticPassword(long,int)>(l6, i0);

        return 1;
    }

    private void setSeparateProfileChallengeEnabledLocked(int, boolean, com.android.internal.widget.LockscreenCredential)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0, z1;
        com.android.server.locksettings.LockSettingsStorage $r1;
        java.lang.Throwable $r2;
        com.android.internal.widget.LockscreenCredential r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r3 := @parameter2: com.android.internal.widget.LockscreenCredential;

        z1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.profilechallenge", 0, i0);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>("lockscreen.profilechallenge", z0, i0);

        if z0 == 0 goto label3;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: void removeChildProfileLock(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeKeystoreProfileKey(int)>(i0);

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void tieManagedProfileLockIfNecessary(int,com.android.internal.widget.LockscreenCredential)>(i0, r3);

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>("lockscreen.profilechallenge", z1, i0);

        throw $r2;

        catch java.lang.IllegalStateException from label1 to label2 with label5;
        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    private void setSyntheticPasswordHandleLocked(long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0, l2, $l3;
        int i1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        l2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i1);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("sp-handle", l0, i1);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("prev-sp-handle", l2, i1);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void setLong(java.lang.String,long,int)>("sp-handle-ts", $l3, i1);

        return;
    }

    private void setUserKeyProtection(int, com.android.internal.widget.LockscreenCredential, com.android.internal.widget.VerifyCredentialResponse)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1, $r5, $r7;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        byte[] $r8, r11;
        com.android.internal.widget.LockscreenCredential r9;
        com.android.internal.widget.VerifyCredentialResponse r10;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r9 := @parameter1: com.android.internal.widget.LockscreenCredential;

        r10 := @parameter2: com.android.internal.widget.VerifyCredentialResponse;

        if r10 == null goto label3;

        $i1 = virtualinvoke r10.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i1 != 0 goto label2;

        r11 = virtualinvoke r10.<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()>();

        if r11 == null goto label1;

        $r8 = staticinvoke <com.android.server.locksettings.LockSettingsService: byte[] secretFromCredential(com.android.internal.widget.LockscreenCredential)>(r9);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void addUserKeyAuth(int,byte[],byte[])>(i0, r11, $r8);

        return;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty payload verifying a credential we just set");

        throw $r7;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-OK response verifying a credential we just set ");

        $i2 = virtualinvoke r10.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null response verifying a credential we just set");

        throw $r1;
    }

    private void setUserPasswordMetrics(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        android.util.SparseArray $r1;
        android.app.admin.PasswordMetrics $r2;
        java.lang.Throwable $r3;
        com.android.internal.widget.LockscreenCredential r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r4 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.util.SparseArray mUserPasswordMetrics>;

        $r2 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics computeForCredential(com.android.internal.widget.LockscreenCredential)>(r4);

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r2);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void showEncryptionNotification(android.os.UserHandle, java.lang.CharSequence, java.lang.CharSequence, java.lang.CharSequence, android.app.PendingIntent)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.os.UserHandle r1;
        java.lang.CharSequence r2, r3, r20;
        android.app.PendingIntent r4;
        boolean $z0;
        android.app.Notification$Builder $r5, $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16, $r17, $r18;
        java.lang.String $r6;
        android.content.Context $r7, $r12;
        int $i0;
        android.app.NotificationManager $r19;
        android.app.Notification r21;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.os.UserHandle;

        r20 := @parameter1: java.lang.CharSequence;

        r2 := @parameter2: java.lang.CharSequence;

        r3 := @parameter3: java.lang.CharSequence;

        r4 := @parameter4: android.app.PendingIntent;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = new android.app.Notification$Builder;

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r6 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVICE_ADMIN>;

        specialinvoke $r5.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r7, $r6);

        $r8 = virtualinvoke $r5.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302856);

        $r9 = virtualinvoke $r8.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r10 = virtualinvoke $r9.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        $r11 = virtualinvoke $r10.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r20);

        $r12 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $i0 = virtualinvoke $r12.<android.content.Context: int getColor(int)>(17170460);

        $r13 = virtualinvoke $r11.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i0);

        $r14 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r20);

        $r15 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r2);

        $r16 = virtualinvoke $r15.<android.app.Notification$Builder: android.app.Notification$Builder setSubText(java.lang.CharSequence)>(r3);

        $r17 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>(1);

        $r18 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r4);

        r21 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification build()>();

        $r19 = r0.<com.android.server.locksettings.LockSettingsService: android.app.NotificationManager mNotificationManager>;

        virtualinvoke $r19.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, 9, r21, r1);

        return;
    }

    private void showEncryptionNotificationForProfile(android.os.UserHandle)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.os.UserHandle r1;
        java.lang.CharSequence r2, r3, r11;
        android.content.Context $r4, $r5, $r8;
        java.lang.Object $r6;
        int $i0;
        android.app.PendingIntent $r9;
        android.content.res.Resources r10;
        android.app.KeyguardManager r12;
        android.content.Intent r13;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.os.UserHandle;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        r10 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke r10.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17041091);

        r3 = virtualinvoke r10.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17041090);

        r11 = virtualinvoke r10.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17041089);

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("keyguard");

        r12 = (android.app.KeyguardManager) $r6;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r13 = virtualinvoke r12.<android.app.KeyguardManager: android.content.Intent createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence,int)>(null, null, $i0);

        if r13 != null goto label1;

        return;

     label1:
        virtualinvoke r13.<android.content.Intent: android.content.Intent setFlags(int)>(276824064);

        $r8 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r9 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r8, 0, r13, 134217728);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void showEncryptionNotification(android.os.UserHandle,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>(r1, r2, r3, r11, $r9);

        return;
    }

    private com.android.internal.widget.VerifyCredentialResponse spBasedDoVerifyCredential(com.android.internal.widget.LockscreenCredential, int, long, int, com.android.internal.widget.ICheckCredentialProgressCallback, java.util.ArrayList)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i2, $i4, $i5, $i6, $i7, i9;
        boolean z0, z1, $z3;
        com.android.server.locksettings.SyntheticPasswordManager r1, r3, $r14, r37;
        long l1, l10;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult r2;
        com.android.server.locksettings.LockSettingsService$Injector $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r12;
        android.content.Context $r13, $r21;
        android.service.gatekeeper.IGateKeeperService $r15, r38, r41;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken $r16, r42;
        android.app.admin.PasswordMetrics $r17;
        com.android.server.locksettings.LockSettingsService$PendingResetLockout $r18;
        byte[] $r19;
        java.util.ArrayList $r20, r33, r44;
        java.lang.Object $r22;
        android.hardware.face.FaceManager $r23;
        java.lang.Throwable $r24, $r25, $r26, $r27, $r28, $r29, $r30, r36;
        com.android.internal.widget.LockscreenCredential r31;
        com.android.internal.widget.ICheckCredentialProgressCallback r32;
        android.content.pm.PackageManager r35;
        com.android.internal.widget.VerifyCredentialResponse r39, r40, r43;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r31 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i9 := @parameter1: int;

        l10 := @parameter2: long;

        i0 := @parameter3: int;

        r32 := @parameter4: com.android.internal.widget.ICheckCredentialProgressCallback;

        r33 := @parameter5: java.util.ArrayList;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        z0 = virtualinvoke $r4.<com.android.server.locksettings.LockSettingsService$Injector: boolean hasEnrolledBiometrics(int)>(i0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spBasedDoVerifyCredential: user=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" challengeType=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hasEnrolledBiometrics=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("LockSettingsService", $r12);

        $r13 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        r35 = virtualinvoke $r13.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        if i9 != 0 goto label01;

        $z3 = virtualinvoke r35.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.biometrics.face");

        if $z3 == 0 goto label01;

        if z0 == 0 goto label01;

        $r21 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r22 = virtualinvoke $r21.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/face/FaceManager;");

        $r23 = (android.hardware.face.FaceManager) $r22;

        l10 = virtualinvoke $r23.<android.hardware.face.FaceManager: long generateChallenge()>();

        i9 = 2;

        goto label01;

     label01:
        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label02:
        z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

     label03:
        if z1 != 0 goto label08;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        $r29 := @caughtexception;

        r36 = $r29;

     label07:
        goto label31;

     label08:
        if i0 != -9999 goto label13;

     label09:
        r37 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        r38 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

     label10:
        r39 = virtualinvoke r37.<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyFrpCredential(android.service.gatekeeper.IGateKeeperService,com.android.internal.widget.LockscreenCredential,com.android.internal.widget.ICheckCredentialProgressCallback)>(r38, r31, r32);

        exitmonitor r1;

     label11:
        return r39;

     label12:
        $r24 := @caughtexception;

        r36 = $r24;

        goto label07;

     label13:
        l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r14 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r15 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r2 = virtualinvoke $r14.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>($r15, l1, r31, i0, r32);

        r40 = r2.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.internal.widget.VerifyCredentialResponse gkResponse>;

        i2 = virtualinvoke r40.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

     label14:
        if i2 != 0 goto label21;

     label15:
        r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        r41 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r42 = r2.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

     label16:
        r40 = virtualinvoke r3.<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyChallenge(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,long,int)>(r41, r42, l10, i0);

        $i7 = virtualinvoke r40.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i7 == 0 goto label18;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsService", "verifyChallenge with SP failed.");

        r43 = <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse ERROR>;

        exitmonitor r1;

     label17:
        return r43;

     label18:
        goto label21;

     label19:
        $r30 := @caughtexception;

        r36 = $r30;

        goto label31;

     label20:
        $r27 := @caughtexception;

        r36 = $r27;

        goto label31;

     label21:
        exitmonitor r1;

     label22:
        $i4 = virtualinvoke r40.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i4 != 0 goto label27;

        if z0 == 0 goto label25;

        if r33 != null goto label23;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r44 = $r20;

        goto label24;

     label23:
        r44 = r33;

     label24:
        $r18 = new com.android.server.locksettings.LockSettingsService$PendingResetLockout;

        $r19 = virtualinvoke r40.<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()>();

        specialinvoke $r18.<com.android.server.locksettings.LockSettingsService$PendingResetLockout: void <init>(com.android.server.locksettings.LockSettingsService,int,byte[])>(r0, i0, $r19);

        virtualinvoke r44.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        goto label26;

     label25:
        r44 = r33;

     label26:
        $r16 = r2.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        $r17 = staticinvoke <android.app.admin.PasswordMetrics: android.app.admin.PasswordMetrics computeForCredential(com.android.internal.widget.LockscreenCredential)>(r31);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onCredentialVerified(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int,long,java.util.ArrayList,android.app.admin.PasswordMetrics,int)>($r16, i9, l10, r44, $r17, i0);

        goto label28;

     label27:
        $i5 = virtualinvoke r40.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i5 != 1 goto label28;

        $i6 = virtualinvoke r40.<com.android.internal.widget.VerifyCredentialResponse: int getTimeout()>();

        if $i6 <= 0 goto label28;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void requireStrongAuth(int,int)>(8, i0);

     label28:
        return r40;

     label29:
        $r28 := @caughtexception;

        r36 = $r28;

        goto label31;

     label30:
        $r25 := @caughtexception;

        r36 = $r25;

     label31:
        exitmonitor r1;

     label32:
        throw r36;

     label33:
        $r26 := @caughtexception;

        r36 = $r26;

        goto label31;

        catch java.lang.Throwable from label02 to label03 with label30;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label06;
        catch java.lang.Throwable from label13 to label14 with label30;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label21 to label22 with label29;
        catch java.lang.Throwable from label31 to label32 with label33;
    }

    private boolean spBasedSetLockCredentialInternalLocked(com.android.internal.widget.LockscreenCredential, com.android.internal.widget.LockscreenCredential, int, boolean)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.internal.widget.LockscreenCredential r1, r6, r7;
        int i0, $i4, $i5;
        boolean z0, $z1, $z2;
        long l1;
        com.android.server.locksettings.SyntheticPasswordManager $r2, $r10;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4, $r5;
        android.service.gatekeeper.IGateKeeperService $r11;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult r12;
        com.android.internal.widget.VerifyCredentialResponse r13;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r14;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        r6 := @parameter1: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $z1 = virtualinvoke r6.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z1 == 0 goto label5;

        $z2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i0);

        if $z2 == 0 goto label5;

     label1:
        r7 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>(i0);

     label2:
        r6 = r7;

        goto label5;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to decrypt child profile key", $r5);

        goto label5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Child profile key not found");

     label5:
        l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r10 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r11 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r12 = virtualinvoke $r10.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>($r11, l1, r6, i0, null);

        r13 = r12.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.internal.widget.VerifyCredentialResponse gkResponse>;

        r14 = r12.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        if r14 != null goto label9;

        if r13 == null goto label8;

        $i4 = virtualinvoke r13.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i4 != -1 goto label6;

        goto label8;

     label6:
        $i5 = virtualinvoke r13.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i5 != 1 goto label7;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Failed to enroll: rate limit exceeded.");

        return 0;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("password change failed");

        throw $r3;

     label8:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Failed to enroll: incorrect credential.");

        return 0;

     label9:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onAuthTokenKnownForUser(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>(i0, r14);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: long setLockCredentialWithAuthTokenLocked(com.android.internal.widget.LockscreenCredential,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>(r1, r14, i0);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: void destroyPasswordBasedSyntheticPassword(long,int)>(l1, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void sendCredentialsOnChangeIfRequired(com.android.internal.widget.LockscreenCredential,int,boolean)>(r1, i0, z0);

        return 1;

        catch java.io.FileNotFoundException from label1 to label2 with label4;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    private void synchronizeUnifiedWorkChallengeForProfiles(int, java.util.Map)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.util.Map r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.List r2;
        int i0, i1, i3, i4;
        android.content.pm.UserInfo r3, $r5;
        android.os.UserManager $r4, $r6;
        java.lang.Object $r7, $r11;
        java.lang.Integer $r8, $r10;
        com.android.internal.widget.LockscreenCredential $r9, $r12, $r14;
        com.android.server.locksettings.LockSettingsStorage $r13;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i3 := @parameter0: int;

        r1 := @parameter1: java.util.Map;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i3);

        $z1 = virtualinvoke $r5.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>(i3);

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r6.<android.os.UserManager: java.util.List getProfiles(int)>(i3);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label7;

        $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i4);

        r3 = (android.content.pm.UserInfo) $r7;

        $z2 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z2 == 0 goto label6;

        i1 = r3.<android.content.pm.UserInfo: int id>;

        $z3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i1);

        if $z3 == 0 goto label3;

        goto label6;

     label3:
        if z0 == 0 goto label4;

        $r14 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void tieManagedProfileLockIfNecessary(int,com.android.internal.widget.LockscreenCredential)>(i1, $r14);

        goto label6;

     label4:
        if r1 == null goto label5;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z4 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r8);

        if $z4 == 0 goto label5;

        $r9 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (com.android.internal.widget.LockscreenCredential) $r11;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialInternal(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>($r9, $r12, i1, 1);

        $r13 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r13.<com.android.server.locksettings.LockSettingsStorage: void removeChildProfileLock(int)>(i1);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void removeKeystoreProfileKey(int)>(i1);

        goto label6;

     label5:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsService", "Attempt to clear tied challenge, but no password supplied.");

     label6:
        i4 = i4 + 1;

        goto label2;

     label7:
        return;
    }

    static java.lang.String timestampToString(long)
    {
        long l0;
        java.text.SimpleDateFormat $r0;
        java.util.Date $r1;
        java.lang.String $r2;

        l0 := @parameter0: long;

        $r0 = new java.text.SimpleDateFormat;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>(long)>(l0);

        $r2 = virtualinvoke $r0.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r1);

        return $r2;
    }

    private void tryDeriveAuthTokenForUnsecuredPrimaryUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r3;
        long l1;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult r2;
        boolean $z0;
        android.service.gatekeeper.IGateKeeperService $r4;
        com.android.internal.widget.LockscreenCredential $r5;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken $r6, $r13;
        java.lang.String $r9, $r12;
        java.lang.Throwable $r14;
        java.lang.StringBuilder r15, r16;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label01:
        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

        if $z0 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        $r5 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        r2 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>($r4, l1, $r5, i0, null);

        $r6 = r2.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        if $r6 == null goto label05;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Retrieved auth token for user ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r12);

        $r13 = r2.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onAuthTokenKnownForUser(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>(i0, $r13);

     label04:
        goto label06;

     label05:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Auth token not available for user ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r9);

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r14 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void unlockChildProfile(int, boolean, int, long, java.util.ArrayList)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1;
        boolean z0, $z1, $z2;
        long l2;
        com.android.internal.widget.LockscreenCredential $r1;
        java.lang.Throwable $r3;
        java.util.ArrayList r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r4 := @parameter4: java.util.ArrayList;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback,java.util.ArrayList)>($r1, i1, l2, i0, null, r4);

     label2:
        goto label6;

     label3:
        $r3 := @caughtexception;

        $z1 = $r3 instanceof java.io.FileNotFoundException;

        if $z1 == 0 goto label4;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Child profile key not found");

        goto label6;

     label4:
        if z0 == 0 goto label5;

        $z2 = $r3 instanceof android.security.keystore.UserNotAuthenticatedException;

        if $z2 == 0 goto label5;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", "Parent keystore seems locked, ignoring");

        goto label6;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to decrypt child profile key", $r3);

     label6:
        return;

        catch java.security.UnrecoverableKeyException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.KeyStoreException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    private void unlockKeystore(byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        java.lang.String $r1, r4;
        android.security.KeyStore $r2;
        byte[] r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r3 := @parameter0: byte[];

        i0 := @parameter1: int;

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>(r3);

        r4 = $r1;

     label2:
        $r2 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        virtualinvoke $r2.<android.security.KeyStore: boolean unlock(int,java.lang.String)>(i0, r4);

        return;
    }

    private void unlockUser(int, byte[], byte[])
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        byte[] r1, r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockUser(int,byte[],byte[],int,long,java.util.ArrayList)>(i0, r1, r2, 0, 0L, null);

        return;
    }

    private void unlockUser(int, byte[], byte[], int, long, java.util.ArrayList)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10, i12;
        long l2, l3;
        java.util.ArrayList r1;
        boolean z0, $z3, $z4, $z6, $z7, $z8, $z9;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;
        android.os.UserManager $r9, $r14, $r16, $r21;
        java.util.concurrent.CountDownLatch $r10;
        com.android.server.locksettings.LockSettingsService$3 $r11;
        android.app.IActivityManager $r12;
        java.util.concurrent.TimeUnit $r13;
        android.content.pm.UserInfo $r15, r35;
        java.util.List $r17;
        com.android.server.locksettings._$$Lambda$LockSettingsService$25VQEBWGuGqdc4Xjn9m8HXt9ZTI $r18;
        android.os.Handler $r19;
        java.lang.Object $r20;
        java.lang.Throwable $r23, $r24, $r27;
        android.os.RemoteException $r25;
        java.lang.RuntimeException $r26;
        java.lang.Thread $r28;
        byte[] r29, r30;
        java.util.Iterator r34;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r29 := @parameter1: byte[];

        r30 := @parameter2: byte[];

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        r1 := @parameter5: java.util.ArrayList;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unlocking user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with secret only, length ");

        if r30 == null goto label01;

        i12 = lengthof r30;

        goto label02;

     label01:
        i12 = 0;

     label02:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r8);

        $r9 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        z0 = virtualinvoke $r9.<android.os.UserManager: boolean isUserUnlockingOrUnlocked(int)>(i0);

        $r10 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r10.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r11 = new com.android.server.locksettings.LockSettingsService$3;

        specialinvoke $r11.<com.android.server.locksettings.LockSettingsService$3: void <init>(com.android.server.locksettings.LockSettingsService,java.util.concurrent.CountDownLatch)>(r0, $r10);

     label03:
        $r12 = r0.<com.android.server.locksettings.LockSettingsService: android.app.IActivityManager mActivityManager>;

        interfaceinvoke $r12.<android.app.IActivityManager: boolean unlockUser(int,byte[],byte[],android.os.IProgressListener)>(i0, r29, r30, $r11);

     label04:
        $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r10.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(15L, $r13);

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

        $r28 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r28.<java.lang.Thread: void interrupt()>();

     label07:
        $r14 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r15 = virtualinvoke $r14.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z3 = virtualinvoke $r15.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z3 == 0 goto label08;

        return;

     label08:
        $r16 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r17 = virtualinvoke $r16.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r34 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z9 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label20;

        $r20 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (android.content.pm.UserInfo) $r20;

        $i5 = r35.<android.content.pm.UserInfo: int id>;

        if $i5 != i0 goto label10;

        goto label09;

     label10:
        $z6 = virtualinvoke r35.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z6 != 0 goto label11;

        goto label09;

     label11:
        $i6 = r35.<android.content.pm.UserInfo: int id>;

        $z7 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean hasUnifiedChallenge(int)>($i6);

        if $z7 == 0 goto label15;

        $r21 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $i8 = r35.<android.content.pm.UserInfo: int id>;

        $z8 = virtualinvoke $r21.<android.os.UserManager: boolean isUserRunning(int)>($i8);

        if $z8 == 0 goto label12;

        $i10 = r35.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockChildProfile(int,boolean,int,long,java.util.ArrayList)>($i10, 0, i1, l2, r1);

        goto label15;

     label12:
        $i9 = r35.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>($i9);

     label13:
        goto label15;

     label14:
        $r24 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Cache work profile password failed", $r24);

        goto label15;

     label15:
        if z0 != 0 goto label19;

        l3 = staticinvoke <com.android.server.locksettings.LockSettingsService: long clearCallingIdentity()>();

     label16:
        $i7 = r35.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void maybeShowEncryptionNotificationForUser(int)>($i7);

     label17:
        staticinvoke <com.android.server.locksettings.LockSettingsService: void restoreCallingIdentity(long)>(l3);

        goto label19;

     label18:
        $r23 := @caughtexception;

        staticinvoke <com.android.server.locksettings.LockSettingsService: void restoreCallingIdentity(long)>(l3);

        throw $r23;

     label19:
        goto label09;

     label20:
        if r1 == null goto label21;

        $z4 = virtualinvoke r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z4 != 0 goto label21;

        $r19 = r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler>;

        $r18 = new com.android.server.locksettings._$$Lambda$LockSettingsService$25VQEBWGuGqdc4Xjn9m8HXt9ZTI;

        specialinvoke $r18.<com.android.server.locksettings._$$Lambda$LockSettingsService$25VQEBWGuGqdc4Xjn9m8HXt9ZTI: void <init>(com.android.server.locksettings.LockSettingsService,java.util.ArrayList,int)>(r0, r1, i1);

        virtualinvoke $r19.<android.os.Handler: boolean post(java.lang.Runnable)>($r18);

        goto label21;

     label21:
        return;

     label22:
        $r25 := @caughtexception;

        $r26 = virtualinvoke $r25.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

        throw $r26;

        catch android.os.RemoteException from label03 to label04 with label22;
        catch java.lang.InterruptedException from label04 to label05 with label06;
        catch java.security.GeneralSecurityException from label12 to label13 with label14;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private void unlockUserKey(int, byte[], byte[])
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;
        android.content.pm.UserInfo r1;
        android.os.UserManager $r2;
        android.os.storage.IStorageManager $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9;
        byte[] r10, r11;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r10 := @parameter1: byte[];

        r11 := @parameter2: byte[];

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label1:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.os.storage.IStorageManager mStorageManager>;

        $i1 = r1.<android.content.pm.UserInfo: int serialNumber>;

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void unlockUserKey(int,int,byte[],byte[])>(i0, $i1, r10, r11);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unlock user key ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean unlockUserWithToken(long, byte[], int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r2, $r3;
        boolean $z0;
        android.service.gatekeeper.IGateKeeperService $r4;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken $r5, $r6, $r7;
        android.app.admin.PasswordMetrics $r8;
        java.lang.Throwable $r9;
        byte[] r10;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult r11;
        java.lang.SecurityException r12;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        l0 := @parameter0: long;

        r10 := @parameter1: byte[];

        i1 := @parameter2: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $z0 = virtualinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: boolean hasEscrowData(int)>(i1);

        if $z0 == 0 goto label5;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r11 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapTokenBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,byte[],int)>($r4, l0, r10, i1);

        $r5 = r11.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        if $r5 != null goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Invalid escrow token supplied");

        exitmonitor r1;

     label2:
        return 0;

     label3:
        exitmonitor r1;

     label4:
        $r7 = r11.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        $r6 = r11.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        $r8 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: android.app.admin.PasswordMetrics loadPasswordMetrics(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>($r6, i1);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onCredentialVerified(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int,long,java.util.ArrayList,android.app.admin.PasswordMetrics,int)>($r7, 0, 0L, null, $r8, i1);

        return 1;

     label5:
        r12 = new java.lang.SecurityException;

        specialinvoke r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Escrow token is disabled on the current user");

        throw r12;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private com.android.internal.widget.VerifyCredentialResponse verifyCredential(int, com.android.server.locksettings.LockSettingsStorage$CredentialHash, com.android.internal.widget.LockscreenCredential, int, long, com.android.internal.widget.ICheckCredentialProgressCallback)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i8, $i11;
        com.android.internal.widget.LockscreenCredential r1;
        long l2;
        com.android.internal.widget.VerifyCredentialResponse r2, $r13, $r32;
        boolean z0, $z1, $z2, $z3, $z5;
        byte[] $r3, $r5, $r6, $r11, $r14, $r23, $r26, $r28, $r29;
        android.service.gatekeeper.IGateKeeperService $r4;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken $r12;
        android.os.RemoteException $r15, $r17;
        java.lang.Throwable $r16;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash r18;
        com.android.internal.widget.ICheckCredentialProgressCallback r19;
        android.service.gatekeeper.GateKeeperResponse r20;
        java.lang.StringBuilder $r24;
        java.lang.String $r27;
        com.android.server.locksettings.SyntheticPasswordManager r30;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r18 := @parameter1: com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        r1 := @parameter2: com.android.internal.widget.LockscreenCredential;

        i1 := @parameter3: int;

        l2 := @parameter4: long;

        r19 := @parameter5: com.android.internal.widget.ICheckCredentialProgressCallback;

        if r18 == null goto label01;

        $r14 = r18.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        $i8 = lengthof $r14;

        if $i8 != 0 goto label02;

     label01:
        $z1 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z1 == 0 goto label02;

        $r13 = <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse OK>;

        return $r13;

     label02:
        if r18 == null goto label22;

        $r3 = r18.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        $i3 = lengthof $r3;

        if $i3 == 0 goto label22;

        $z2 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z2 == 0 goto label03;

        goto label22;

     label03:
        staticinvoke <android.os.StrictMode: void noteDiskRead()>();

     label04:
        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        $r5 = r18.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        $r6 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        r20 = interfaceinvoke $r4.<android.service.gatekeeper.IGateKeeperService: android.service.gatekeeper.GateKeeperResponse verifyChallenge(int,long,byte[],byte[])>(i0, l2, $r5, $r6);

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "gatekeeper verify failed", $r15);

        r20 = <android.service.gatekeeper.GateKeeperResponse: android.service.gatekeeper.GateKeeperResponse ERROR>;

     label07:
        r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse convertResponse(android.service.gatekeeper.GateKeeperResponse)>(r20);

        z0 = virtualinvoke r20.<android.service.gatekeeper.GateKeeperResponse: boolean getShouldReEnroll()>();

        $i4 = virtualinvoke r2.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i4 != 0 goto label20;

        if r19 == null goto label11;

     label08:
        interfaceinvoke r19.<com.android.internal.widget.ICheckCredentialProgressCallback: void onCredentialVerified()>();

     label09:
        goto label11;

     label10:
        $r17 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "progressCallback throws exception", $r17);

     label11:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setUserPasswordMetrics(com.android.internal.widget.LockscreenCredential,int)>(r1, i0);

        $r23 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockKeystore(byte[],int)>($r23, i0);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unlocking user ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with token length ");

        $r26 = virtualinvoke r2.<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()>();

        $i11 = lengthof $r26;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r27);

        $r28 = virtualinvoke r2.<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()>();

        $r29 = staticinvoke <com.android.server.locksettings.LockSettingsService: byte[] secretFromCredential(com.android.internal.widget.LockscreenCredential)>(r1);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockUser(int,byte[],byte[])>(i0, $r28, $r29);

        $z5 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithSeparatedLock(int)>(i0);

        if $z5 == 0 goto label12;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setDeviceUnlockedForUser(int)>(i0);

     label12:
        if z0 == 0 goto label13;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialInternal(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>(r1, r1, i0, 0);

        goto label16;

     label13:
        r30 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r30;

     label14:
        $z3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean shouldMigrateToSyntheticPasswordLocked(int)>(i0);

        if $z3 == 0 goto label15;

        $r11 = r18.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        $r12 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[],com.android.internal.widget.LockscreenCredential,int)>($r11, r1, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void activateEscrowTokens(com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>($r12, i0);

     label15:
        exitmonitor r30;

     label16:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void sendCredentialsOnUnlockIfRequired(com.android.internal.widget.LockscreenCredential,int)>(r1, i0);

        goto label21;

     label17:
        $r16 := @caughtexception;

     label18:
        exitmonitor r30;

     label19:
        throw $r16;

     label20:
        $i5 = virtualinvoke r2.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i5 != 1 goto label21;

        $i6 = virtualinvoke r2.<com.android.internal.widget.VerifyCredentialResponse: int getTimeout()>();

        if $i6 <= 0 goto label21;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void requireStrongAuth(int,int)>(8, i0);

     label21:
        return r2;

     label22:
        $r32 = <com.android.internal.widget.VerifyCredentialResponse: com.android.internal.widget.VerifyCredentialResponse ERROR>;

        return $r32;

        catch android.os.RemoteException from label04 to label05 with label06;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential, int, com.android.internal.widget.ICheckCredentialProgressCallback)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.internal.widget.ICheckCredentialProgressCallback r1;
        java.lang.Throwable $r2;
        com.android.internal.widget.LockscreenCredential r3;
        com.android.internal.widget.VerifyCredentialResponse r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r3 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.internal.widget.ICheckCredentialProgressCallback;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

     label1:
        r4 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r3, 0, 0L, i0, r1);

     label2:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return r4;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean checkVoldPassword(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        java.lang.String r1;
        int i1, i5, i6;
        boolean $z0, $z1;
        com.android.server.locksettings.LockSettingsService$Injector $r2;
        com.android.internal.widget.VerifyCredentialResponse $r3;
        java.lang.Exception $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        android.os.storage.IStorageManager r7;
        com.android.internal.widget.LockscreenCredential r8;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i5 := @parameter0: int;

        $z0 = r0.<com.android.server.locksettings.LockSettingsService: boolean mFirstCallToVold>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r0.<com.android.server.locksettings.LockSettingsService: boolean mFirstCallToVold> = 0;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i5);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        r7 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsService$Injector: android.os.storage.IStorageManager getStorageManager()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r1 = interfaceinvoke r7.<android.os.storage.IStorageManager: java.lang.String getPassword()>();

        interfaceinvoke r7.<android.os.storage.IStorageManager: void clearPassword()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label04;

        return 0;

     label04:
        i1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: int getCredentialTypeInternal(int)>(i5);

     label05:
        if i1 == 1 goto label12;

        if i1 == 3 goto label10;

        if i1 == 4 goto label08;

        r8 = null;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", "Unknown credential type");

     label07:
        goto label13;

     label08:
        r8 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPassword(java.lang.CharSequence)>(r1);

     label09:
        goto label13;

     label10:
        r8 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createPin(java.lang.CharSequence)>(r1);

     label11:
        goto label13;

     label12:
        r8 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential createPattern(java.lang.String)>(r1);

     label13:
        if r8 == null goto label16;

     label14:
        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r8, i5, null);

        i6 = virtualinvoke $r3.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

     label15:
        if i6 != 0 goto label16;

        return 1;

     label16:
        goto label18;

     label17:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "checkVoldPassword failed: ", $r4);

     label18:
        return 0;

     label19:
        $r5 := @caughtexception;

        goto label23;

     label20:
        $r6 := @caughtexception;

     label21:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "vold getPassword() failed", $r6);

     label22:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch android.os.RemoteException from label02 to label03 with label20;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Exception from label04 to label05 with label17;
        catch java.lang.Exception from label06 to label07 with label17;
        catch java.lang.Exception from label08 to label09 with label17;
        catch java.lang.Exception from label10 to label11 with label17;
        catch java.lang.Exception from label12 to label13 with label17;
        catch java.lang.Exception from label14 to label15 with label17;
        catch java.lang.Throwable from label21 to label22 with label19;
    }

    public void closeSession(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void closeSession(java.lang.String)>(r1);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i6, $i7, i8;
        android.content.Context $r1;
        boolean $z0, $z1;
        com.android.internal.util.IndentingPrintWriter $r2;
        android.os.UserManager $r4;
        com.android.server.locksettings.LockSettingsStorage $r7;
        com.android.server.locksettings.LockSettingsStrongAuth $r10;
        com.android.server.locksettings.RebootEscrowManager $r13;
        java.lang.Object $r15;
        android.content.pm.UserInfo $r16;
        java.lang.StringBuilder $r17, $r33, $r37, $r42;
        java.lang.String $r20, $r24, $r26, $r28, $r32, $r36, $r39, $r41, $r45, $r48, r63;
        java.lang.Object[] $r22, $r25, $r29, $r47;
        long $l2, $l3, $l4, $l5;
        java.lang.Long $r23, $r27, $r31;
        android.service.gatekeeper.IGateKeeperService $r30;
        android.app.admin.PasswordMetrics $r46;
        java.lang.Throwable $r50;
        android.os.RemoteException $r51;
        java.io.FileDescriptor r52;
        java.io.PrintWriter r53;
        java.lang.String[] r54;
        java.util.List r56;
        com.android.server.locksettings.SyntheticPasswordManager r58;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r52 := @parameter0: java.io.FileDescriptor;

        r53 := @parameter1: java.io.PrintWriter;

        r54 := @parameter2: java.lang.String[];

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r1, "LockSettingsService", r53);

        if $z0 != 0 goto label01;

        return;

     label01:
        $r2 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r53, "  ");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current lock settings service state:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("User State:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r56 = virtualinvoke $r4.<android.os.UserManager: java.util.List getUsers()>();

        i8 = 0;

     label02:
        $i1 = interfaceinvoke r56.<java.util.List: int size()>();

        if i8 >= $i1 goto label13;

        $r15 = interfaceinvoke r56.<java.util.List: java.lang.Object get(int)>(i8);

        $r16 = (android.content.pm.UserInfo) $r15;

        i0 = $r16.<android.content.pm.UserInfo: int id>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r20);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r58 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r58;

     label03:
        $r22 = newarray (java.lang.Object)[1];

        $l2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r22[0] = $r23;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SP Handle: %x", $r22);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

        $r25 = newarray (java.lang.Object)[2];

        $l3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>("sp-handle-ts", 0L, i0);

        $r26 = staticinvoke <com.android.server.locksettings.LockSettingsService: java.lang.String timestampToString(long)>($l3);

        $r25[0] = $r26;

        $l4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>("prev-sp-handle", 0L, i0);

        $r27 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r25[1] = $r27;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Last changed: %s (%x)", $r25);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r28);

        exitmonitor r58;

     label04:
        $r29 = newarray (java.lang.Object)[1];

        $r30 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        $l5 = interfaceinvoke $r30.<android.service.gatekeeper.IGateKeeperService: long getSecureUserId(int)>(i0);

        $r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r29[0] = $r31;

        $r32 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("SID: %x", $r29);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r32);

     label05:
        goto label07;

     label06:
        $r51 := @caughtexception;

     label07:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Quality: ");

        $i6 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: int getKeyguardStoredQuality(int)>(i0);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CredentialType: ");

        $i7 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: int getCredentialTypeInternal(int)>(i0);

        $r39 = staticinvoke <com.android.server.locksettings.LockSettingsService: java.lang.String credentialTypeToString(int)>($i7);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SeparateChallenge: ");

        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i0);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r45 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r45);

        $r46 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.app.admin.PasswordMetrics getUserPasswordMetrics(int)>(i0);

        if $r46 == null goto label08;

        r63 = "known";

        goto label09;

     label08:
        r63 = "unknown";

     label09:
        $r47 = newarray (java.lang.Object)[1];

        $r47[0] = r63;

        $r48 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Metrics: %s", $r47);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r48);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        i8 = i8 + 1;

        goto label02;

     label10:
        $r50 := @caughtexception;

     label11:
        exitmonitor r58;

     label12:
        throw $r50;

     label13:
        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Storage:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r7.<com.android.server.locksettings.LockSettingsStorage: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("StrongAuth:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r10 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r10.<com.android.server.locksettings.LockSettingsStrongAuth: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("RebootEscrow:");

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r13 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.RebootEscrowManager mRebootEscrowManager>;

        virtualinvoke $r13.<com.android.server.locksettings.RebootEscrowManager: void dump(com.android.internal.util.IndentingPrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r2.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.lang.String generateKey(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r3;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r3 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String generateKey(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String generateKeyWithMetadata(java.lang.String, byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r4;
        byte[] r2;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>(r1, r2);

        return $r4;
    }

    public boolean getBoolean(java.lang.String, boolean, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1, z2, z3;
        com.android.server.locksettings.LockSettingsStorage $r3;
        int i0, i1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        z2 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i0);

        $r2 = "lock_pattern_autolock";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        i1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: int getCredentialTypeInternal(int)>(i0);

        z3 = 1;

        if i1 != 1 goto label1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;

     label3:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $z1 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: boolean getBoolean(java.lang.String,boolean,int)>(r1, z2, i0);

        return $z1;
    }

    public int getCredentialType(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordHavePermission(int)>(i0);

        $i1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: int getCredentialTypeInternal(int)>(i0);

        return $i1;
    }

    public int getCredentialTypeInternal(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r5;
        long l0;
        boolean $z0, $z1, $z2;
        com.android.server.locksettings.LockSettingsStorage $r3, $r4;
        int $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i4 := @parameter0: int;

        if i4 != -9999 goto label01;

        $i3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: int getFrpCredentialType()>();

        return $i3;

     label01:
        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label02:
        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i4);

        if $z0 == 0 goto label08;

        l0 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i4);

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        i5 = virtualinvoke $r5.<com.android.server.locksettings.SyntheticPasswordManager: int getCredentialType(long,int)>(l0, i4);

     label03:
        if i5 == 2 goto label06;

     label04:
        exitmonitor r1;

     label05:
        return i5;

     label06:
        $i2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: int getKeyguardStoredQuality(int)>(i4);

        i6 = staticinvoke <com.android.server.locksettings.LockSettingsService: int pinOrPasswordQualityToCredentialType(int)>($i2);

        exitmonitor r1;

     label07:
        return i6;

     label08:
        exitmonitor r1;

     label09:
        i7 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: int getKeyguardStoredQuality(int)>(i4);

        if i7 != 65536 goto label10;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $z2 = virtualinvoke $r4.<com.android.server.locksettings.LockSettingsStorage: boolean hasPattern(int)>(i4);

        if $z2 == 0 goto label10;

        return 1;

     label10:
        if i7 < 131072 goto label11;

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $z1 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: boolean hasPassword(int)>(i4);

        if $z1 == 0 goto label11;

        $i1 = staticinvoke <com.android.server.locksettings.LockSettingsService: int pinOrPasswordQualityToCredentialType(int)>(i7);

        return $i1;

     label11:
        return -1;

     label12:
        $r6 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    protected com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int) throws java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, java.security.cert.CertificateException, java.io.IOException
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;
        com.android.server.locksettings.LockSettingsStorage $r1;
        java.io.FileNotFoundException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        java.security.Key $r7;
        javax.crypto.spec.GCMParameterSpec $r8;
        com.android.server.locksettings.ManagedProfilePasswordCache $r9;
        byte[] r10, r11, r12, r17;
        java.security.KeyStore r13;
        javax.crypto.SecretKey r15;
        javax.crypto.Cipher r16;
        com.android.internal.widget.LockscreenCredential r18;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        r10 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage: byte[] readChildProfileLock(int)>(i0);

        if r10 == null goto label1;

        r11 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r10, 0, 12);

        $i1 = lengthof r10;

        r12 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r10, 12, $i1);

        r13 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r13.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_decrypt_");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r13.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r6, null);

        r15 = (javax.crypto.SecretKey) $r7;

        r16 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r8 = new javax.crypto.spec.GCMParameterSpec;

        specialinvoke $r8.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, r11);

        virtualinvoke r16.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r15, $r8);

        r17 = virtualinvoke r16.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r12);

        r18 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createManagedPassword(byte[])>(r17);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r17, 0);

        $r9 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache>;

        virtualinvoke $r9.<com.android.server.locksettings.ManagedProfilePasswordCache: void storePassword(int,com.android.internal.widget.LockscreenCredential)>(i0, r18);

        return r18;

     label1:
        $r2 = new java.io.FileNotFoundException;

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>("Child profile lock file not found");

        throw $r2;
    }

    protected android.service.gatekeeper.IGateKeeperService getGateKeeperService()
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.service.gatekeeper.IGateKeeperService $r1, r4, r8;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        android.os.IBinder r5;
        com.android.server.locksettings.LockSettingsService$GateKeeperDiedRecipient r6;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService mGateKeeperService>;

        if $r1 == null goto label03;

        r4 = r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService mGateKeeperService>;

     label02:
        exitmonitor r0;

        return r4;

     label03:
        r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("android.service.gatekeeper.IGateKeeperService");

     label04:
        if r5 == null goto label11;

     label05:
        r6 = new com.android.server.locksettings.LockSettingsService$GateKeeperDiedRecipient;

        specialinvoke r6.<com.android.server.locksettings.LockSettingsService$GateKeeperDiedRecipient: void <init>(com.android.server.locksettings.LockSettingsService,com.android.server.locksettings.LockSettingsService$1)>(r0, null);

        interfaceinvoke r5.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0);

     label06:
        goto label09;

     label07:
        $r3 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", " Unable to register death recipient", $r3);

     label09:
        r8 = staticinvoke <android.service.gatekeeper.IGateKeeperService$Stub: android.service.gatekeeper.IGateKeeperService asInterface(android.os.IBinder)>(r5);

        r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService mGateKeeperService> = r8;

     label10:
        exitmonitor r0;

        return r8;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", "Unable to acquire GateKeeperService");

     label12:
        exitmonitor r0;

        return null;

     label13:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    public byte[] getHashFactor(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0, $z1;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r2;
        long l1;
        android.service.gatekeeper.IGateKeeperService $r3;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken $r4, $r5;
        java.lang.Throwable $r6, $r8;
        java.lang.Exception $r7;
        com.android.internal.widget.LockscreenCredential r9;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult r11;
        byte[] r12;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r9 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

     label01:
        z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i0);

     label02:
        if z0 == 0 goto label08;

     label03:
        r9 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>(i0);

     label04:
        goto label08;

     label05:
        $r7 := @caughtexception;

     label06:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to get work profile credential", $r7);

     label07:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return null;

     label08:
        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label09:
        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

        if $z1 != 0 goto label11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Synthetic password not enabled");

        exitmonitor r1;

     label10:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return null;

     label11:
        l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getSyntheticPasswordHandleLocked(int)>(i0);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r11 = virtualinvoke $r2.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult unwrapPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,long,com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>($r3, l1, r9, i0, null);

        $r4 = r11.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        if $r4 != null goto label13;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "Current credential is incorrect");

        exitmonitor r1;

     label12:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return null;

     label13:
        $r5 = r11.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationResult: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken authToken>;

        r12 = virtualinvoke $r5.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] derivePasswordHashFactor()>();

        exitmonitor r1;

     label14:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return r12;

     label15:
        $r6 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r6;

     label18:
        $r8 := @caughtexception;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label18 with label18;
    }

    public java.lang.String getKey(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r3;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r3 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String getKey(java.lang.String)>(r1);

        return $r3;
    }

    public android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot() throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r1;
        android.security.keystore.recovery.KeyChainSnapshot $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()>();

        return $r2;
    }

    public long getLong(java.lang.String, long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        long l0, $l2;
        int i1;
        com.android.server.locksettings.LockSettingsStorage $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i1);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $l2 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: long getLong(java.lang.String,long,int)>(r1, l0, i1);

        return $l2;
    }

    public int[] getRecoverySecretTypes() throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r1;
        int[] $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: int[] getRecoverySecretTypes()>();

        return $r2;
    }

    public java.util.Map getRecoveryStatus() throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r1;
        java.util.Map $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map getRecoveryStatus()>();

        return $r2;
    }

    public boolean getSeparateProfileChallengeEnabled(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkReadPermission(java.lang.String,int)>("lockscreen.profilechallenge", i0);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i0);

        return $z0;
    }

    public java.lang.String getString(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, r2, $r4;
        int i0;
        com.android.server.locksettings.LockSettingsStorage $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkReadPermission(java.lang.String,int)>(r1, i0);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $r4;
    }

    public int getStrongAuthForUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;
        com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker mStrongAuthTracker>;

        $i1 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsService$SynchronizedStrongAuthTracker: int getStrongAuthForUser(int)>(i0);

        return $i1;
    }

    long getSyntheticPasswordHandleLocked(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        long $l1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: long getLong(java.lang.String,long,int)>("sp-handle", 0L, i0);

        return $l1;
    }

    android.app.admin.PasswordMetrics getUserPasswordMetrics(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean $z0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        android.app.admin.PasswordMetrics $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>(i0);

        if $z0 != 0 goto label1;

        $r3 = new android.app.admin.PasswordMetrics;

        specialinvoke $r3.<android.app.admin.PasswordMetrics: void <init>(int)>(-1);

        return $r3;

     label1:
        entermonitor r0;

     label2:
        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.util.SparseArray mUserPasswordMetrics>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (android.app.admin.PasswordMetrics) $r2;

        exitmonitor r0;

     label3:
        return r5;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean hasPendingEscrowToken(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.SyntheticPasswordManager r1, $r3;
        java.util.Set $r4;
        boolean $z0, z1;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i0);

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.SyntheticPasswordManager: java.util.Set getPendingTokensForUser(int)>(i0);

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label3;

     label2:
        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean hasSecureLockScreen()
    {
        com.android.server.locksettings.LockSettingsService r0;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $z0 = r0.<com.android.server.locksettings.LockSettingsService: boolean mHasSecureLockScreen>;

        return $z0;
    }

    public java.lang.String importKey(java.lang.String, byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r4;
        byte[] r2;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String importKey(java.lang.String,byte[])>(r1, r2);

        return $r4;
    }

    public java.lang.String importKeyWithMetadata(java.lang.String, byte[], byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, $r5;
        byte[] r2, r3;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r5 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>(r1, r2, r3);

        return $r5;
    }

    public void initRecoveryServiceWithSigFile(java.lang.String, byte[], byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        byte[] r2, r3;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void initRecoveryServiceWithSigFile(java.lang.String,byte[],byte[])>(r1, r2, r3);

        return;
    }

    protected com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken initializeSyntheticPasswordLocked(byte[], com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        byte[] r1, $r14, $r15;
        com.android.internal.widget.LockscreenCredential r2;
        int i0;
        long l1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        com.android.server.locksettings.SyntheticPasswordManager $r7, $r9, $r11, $r16;
        android.service.gatekeeper.IGateKeeperService $r8, $r10, $r12, $r17;
        boolean $z0;
        com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken r19;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: byte[];

        r2 := @parameter1: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter2: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initialize SyntheticPassword for user: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("LockSettingsService", $r6);

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r8 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        r19 = virtualinvoke $r7.<com.android.server.locksettings.SyntheticPasswordManager: com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken newSyntheticPasswordAndSid(android.service.gatekeeper.IGateKeeperService,byte[],com.android.internal.widget.LockscreenCredential,int)>($r8, r1, r2, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void onAuthTokenKnownForUser(int,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken)>(i0, r19);

        if r19 != null goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsService", "initializeSyntheticPasswordLocked returns null auth token");

        return null;

     label1:
        $r9 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r10 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        l1 = virtualinvoke $r9.<com.android.server.locksettings.SyntheticPasswordManager: long createPasswordBasedSyntheticPassword(android.service.gatekeeper.IGateKeeperService,com.android.internal.widget.LockscreenCredential,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>($r10, r2, r19, i0);

        $z0 = virtualinvoke r2.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z0 != 0 goto label3;

        if r1 != null goto label2;

        $r16 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r17 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        virtualinvoke $r16.<com.android.server.locksettings.SyntheticPasswordManager: void newSidForUser(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,int)>($r17, r19, i0);

     label2:
        $r11 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        $r12 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        virtualinvoke $r11.<com.android.server.locksettings.SyntheticPasswordManager: com.android.internal.widget.VerifyCredentialResponse verifyChallenge(android.service.gatekeeper.IGateKeeperService,com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken,long,int)>($r12, r19, 0L, i0);

        $r14 = virtualinvoke r19.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveDiskEncryptionKey()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setAuthlessUserKeyProtection(int,byte[])>(i0, $r14);

        $r15 = virtualinvoke r19.<com.android.server.locksettings.SyntheticPasswordManager$AuthenticationToken: byte[] deriveKeyStorePassword()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeystorePassword(byte[],int)>($r15, i0);

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void clearUserKeyProtection(int,byte[])>(i0, null);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setKeystorePassword(byte[],int)>(null, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void gateKeeperClearSecureUserId(int)>(i0);

     label4:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void fixateNewestUserKeyAuth(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setSyntheticPasswordHandleLocked(long,int)>(l1, i0);

        return r19;
    }

    boolean isSyntheticPasswordBasedCredential(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.SyntheticPasswordManager r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        entermonitor r1;

     label1:
        z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isSyntheticPasswordBasedCredentialLocked(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$notifyPasswordChanged$2$LockSettingsService(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.LockSettingsService$Injector $r1;
        android.app.admin.DevicePolicyManager $r2;
        java.lang.Object $r3;
        com.android.server.wm.WindowManagerInternal $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsService$Injector: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        virtualinvoke $r2.<android.app.admin.DevicePolicyManager: void reportPasswordChanged(int)>(i0);

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r4 = (com.android.server.wm.WindowManagerInternal) $r3;

        virtualinvoke $r4.<com.android.server.wm.WindowManagerInternal: void reportPasswordChanged(int)>(i0);

        return;
    }

    public void lambda$setLockCredentialWithToken$3$LockSettingsService(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void unlockUser(int,byte[],byte[])>(i0, null, null);

        return;
    }

    public void lambda$unlockUser$1$LockSettingsService(java.util.ArrayList, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.util.ArrayList r1;
        int i0, $i1, $i3, i4;
        android.hardware.biometrics.BiometricManager r2;
        android.content.pm.PackageManager r3;
        android.content.Context $r4, $r6, $r7;
        java.lang.Object $r5, $r8, $r10, $r12;
        boolean $z0;
        android.hardware.face.FaceManager $r9;
        com.android.server.locksettings.LockSettingsService$PendingResetLockout $r11, $r13;
        byte[] $r14;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/biometrics/BiometricManager;");

        r2 = (android.hardware.biometrics.BiometricManager) $r5;

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        r3 = virtualinvoke $r6.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i4 = 0;

     label1:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i4 >= $i1 goto label2;

        $r10 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r11 = (com.android.server.locksettings.LockSettingsService$PendingResetLockout) $r10;

        $i3 = $r11.<com.android.server.locksettings.LockSettingsService$PendingResetLockout: int mUserId>;

        virtualinvoke r2.<android.hardware.biometrics.BiometricManager: void setActiveUser(int)>($i3);

        $r12 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r13 = (com.android.server.locksettings.LockSettingsService$PendingResetLockout) $r12;

        $r14 = $r13.<com.android.server.locksettings.LockSettingsService$PendingResetLockout: byte[] mHAT>;

        virtualinvoke r2.<android.hardware.biometrics.BiometricManager: void resetLockout(byte[])>($r14);

        i4 = i4 + 1;

        goto label1;

     label2:
        if i0 != 2 goto label3;

        $z0 = virtualinvoke r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.biometrics.face");

        if $z0 == 0 goto label3;

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/face/FaceManager;");

        $r9 = (android.hardware.face.FaceManager) $r8;

        virtualinvoke $r9.<android.hardware.face.FaceManager: int revokeChallenge()>();

     label3:
        return;
    }

    public void onCleanupUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;
        android.os.UserHandle $r2;
        android.content.Context $r3;
        android.util.SparseArray $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = new android.os.UserHandle;

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void hideEncryptionNotification(android.os.UserHandle)>($r2);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $i1 = staticinvoke <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getDefaultFlags(android.content.Context)>($r3);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void requireStrongAuth(int,int)>($i1, i0);

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.util.SparseArray mUserPasswordMetrics>;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.io.FileDescriptor r1, r2, r11;
        java.lang.String[] r3;
        android.os.ShellCallback r4;
        android.os.ResultReceiver r5;
        long l0;
        com.android.server.locksettings.LockSettingsShellCommand r6;
        com.android.internal.widget.LockPatternUtils r7;
        android.content.Context $r8;
        java.lang.Throwable $r9, $r10, r12;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r11 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.io.FileDescriptor;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: android.os.ShellCallback;

        r5 := @parameter5: android.os.ResultReceiver;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void enforceShell()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r6 = new com.android.server.locksettings.LockSettingsShellCommand;

        r7 = new com.android.internal.widget.LockPatternUtils;

     label2:
        $r8 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        specialinvoke r7.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r8);

        specialinvoke r6.<com.android.server.locksettings.LockSettingsShellCommand: void <init>(com.android.internal.widget.LockPatternUtils)>(r7);

        virtualinvoke r6.<com.android.server.locksettings.LockSettingsShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r11, r1, r2, r3, r4, r5);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r9 := @caughtexception;

        r12 = $r9;

        goto label6;

     label5:
        $r10 := @caughtexception;

        r12 = $r10;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r12;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void onStartUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void maybeShowEncryptionNotificationForUser(int)>(i0);

        return;
    }

    public void onUnlockUser(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.LockSettingsService$1 $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.Handler mHandler>;

        $r1 = new com.android.server.locksettings.LockSettingsService$1;

        specialinvoke $r1.<com.android.server.locksettings.LockSettingsService$1: void <init>(com.android.server.locksettings.LockSettingsService,int)>(r0, i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public java.util.Map recoverKeyChainSnapshot(java.lang.String, byte[], java.util.List) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        byte[] r2;
        java.util.List r3;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r4;
        java.util.Map $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 := @parameter2: java.util.List;

        $r4 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r5 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map recoverKeyChainSnapshot(java.lang.String,byte[],java.util.List)>(r1, r2, r3);

        return $r5;
    }

    public void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.app.trust.IStrongAuthTracker r1;
        com.android.server.locksettings.LockSettingsStrongAuth $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.app.trust.IStrongAuthTracker;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(-1);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStrongAuth: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>(r1);

        return;
    }

    public void removeCachedUnifiedChallenge(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.ManagedProfilePasswordCache $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache>;

        virtualinvoke $r1.<com.android.server.locksettings.ManagedProfilePasswordCache: void removePassword(int)>(i0);

        return;
    }

    public void removeKey(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void removeKey(java.lang.String)>(r1);

        return;
    }

    public void reportSuccessfulBiometricUnlock(boolean, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        boolean z0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkBiometricPermission()>();

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth: void reportSuccessfulBiometricUnlock(boolean,int)>(z0, i0);

        return;
    }

    public void requireStrongAuth(int, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1;
        com.android.server.locksettings.LockSettingsStrongAuth $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i1);

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth: void requireStrongAuth(int,int)>(i0, i1);

        return;
    }

    public void resetKeyStore(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.pm.UserInfo r1;
        java.lang.StringBuilder r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, i11, i12, i13, i14, i15, i16;
        android.os.UserManager $r3, $r5;
        java.util.List $r4;
        boolean $z0, $z2, $z3, $z4;
        android.security.KeyStore $r6;
        java.lang.Object $r7;
        com.android.server.locksettings.LockSettingsStorage $r8;
        java.lang.String $r13;
        java.lang.Throwable $r14, $r15;
        java.util.Iterator r16;
        com.android.internal.widget.LockscreenCredential r17, r18;
        int[] r20, r21;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i11 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i11);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: java.util.List getProfiles(int)>(i11);

        r16 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        r17 = null;

        i12 = -1;

     label01:
        $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

        $r7 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.content.pm.UserInfo) $r7;

        i13 = i12;

        r18 = r17;

        $z2 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z2 == 0 goto label23;

        i13 = i12;

        r18 = r17;

        $i5 = r1.<android.content.pm.UserInfo: int id>;

        $z3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>($i5);

        if $z3 != 0 goto label23;

        i13 = i12;

        r18 = r17;

        $r8 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $i6 = r1.<android.content.pm.UserInfo: int id>;

        $z4 = virtualinvoke $r8.<com.android.server.locksettings.LockSettingsStorage: boolean hasChildProfileLock(int)>($i6);

        if $z4 == 0 goto label23;

        if i12 != -1 goto label07;

        r18 = r17;

     label02:
        $i9 = r1.<android.content.pm.UserInfo: int id>;

        r17 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>($i9);

     label03:
        r18 = r17;

     label04:
        i14 = r1.<android.content.pm.UserInfo: int id>;

     label05:
        i12 = i14;

        goto label21;

     label06:
        $r15 := @caughtexception;

        goto label22;

     label07:
        r18 = r17;

     label08:
        r2 = new java.lang.StringBuilder;

     label09:
        r18 = r17;

     label10:
        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

     label11:
        r18 = r17;

     label12:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one managed profile, uid1:");

     label13:
        r18 = r17;

     label14:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

     label15:
        r18 = r17;

     label16:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid2:");

     label17:
        r18 = r17;

     label18:
        $i7 = r1.<android.content.pm.UserInfo: int id>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

     label19:
        r18 = r17;

     label20:
        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsService", $r13);

     label21:
        i13 = i12;

        r18 = r17;

        goto label23;

     label22:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to decrypt child profile key", $r15);

        i13 = i12;

     label23:
        i12 = i13;

        r17 = r18;

        goto label01;

     label24:
        $r5 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        r20 = virtualinvoke $r5.<android.os.UserManager: int[] getProfileIdsWithDisabled(int)>(i11);

        i0 = lengthof r20;

     label25:
        i15 = 0;

     label26:
        if i15 >= i0 goto label33;

        i1 = r20[i15];

     label27:
        r21 = <com.android.server.locksettings.LockSettingsService: int[] SYSTEM_CREDENTIAL_UIDS>;

        i2 = lengthof r21;

     label28:
        i16 = 0;

     label29:
        if i16 >= i2 goto label32;

        i3 = r21[i16];

     label30:
        $r6 = r0.<com.android.server.locksettings.LockSettingsService: android.security.KeyStore mKeyStore>;

        $i4 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i1, i3);

        virtualinvoke $r6.<android.security.KeyStore: boolean clearUid(int)>($i4);

     label31:
        i16 = i16 + 1;

        goto label29;

     label32:
        i15 = i15 + 1;

        goto label26;

     label33:
        if i12 == -1 goto label34;

        if r17 == null goto label34;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void tieProfileLockToParent(int,com.android.internal.widget.LockscreenCredential)>(i12, r17);

     label34:
        if r17 == null goto label35;

        virtualinvoke r17.<com.android.internal.widget.LockscreenCredential: void zeroize()>();

     label35:
        return;

     label36:
        $r14 := @caughtexception;

        if i12 == -1 goto label37;

        if r17 == null goto label37;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void tieProfileLockToParent(int,com.android.internal.widget.LockscreenCredential)>(i12, r17);

     label37:
        throw $r14;

        catch java.security.UnrecoverableKeyException from label02 to label03 with label06;
        catch java.security.InvalidKeyException from label02 to label03 with label06;
        catch java.security.KeyStoreException from label02 to label03 with label06;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label06;
        catch javax.crypto.NoSuchPaddingException from label02 to label03 with label06;
        catch java.security.InvalidAlgorithmParameterException from label02 to label03 with label06;
        catch javax.crypto.IllegalBlockSizeException from label02 to label03 with label06;
        catch javax.crypto.BadPaddingException from label02 to label03 with label06;
        catch java.security.cert.CertificateException from label02 to label03 with label06;
        catch java.io.IOException from label02 to label03 with label06;
        catch java.security.UnrecoverableKeyException from label04 to label05 with label06;
        catch java.security.InvalidKeyException from label04 to label05 with label06;
        catch java.security.KeyStoreException from label04 to label05 with label06;
        catch java.security.NoSuchAlgorithmException from label04 to label05 with label06;
        catch javax.crypto.NoSuchPaddingException from label04 to label05 with label06;
        catch java.security.InvalidAlgorithmParameterException from label04 to label05 with label06;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label06;
        catch javax.crypto.BadPaddingException from label04 to label05 with label06;
        catch java.security.cert.CertificateException from label04 to label05 with label06;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.security.UnrecoverableKeyException from label08 to label09 with label06;
        catch java.security.InvalidKeyException from label08 to label09 with label06;
        catch java.security.KeyStoreException from label08 to label09 with label06;
        catch java.security.NoSuchAlgorithmException from label08 to label09 with label06;
        catch javax.crypto.NoSuchPaddingException from label08 to label09 with label06;
        catch java.security.InvalidAlgorithmParameterException from label08 to label09 with label06;
        catch javax.crypto.IllegalBlockSizeException from label08 to label09 with label06;
        catch javax.crypto.BadPaddingException from label08 to label09 with label06;
        catch java.security.cert.CertificateException from label08 to label09 with label06;
        catch java.io.IOException from label08 to label09 with label06;
        catch java.security.UnrecoverableKeyException from label10 to label11 with label06;
        catch java.security.InvalidKeyException from label10 to label11 with label06;
        catch java.security.KeyStoreException from label10 to label11 with label06;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label06;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label06;
        catch java.security.InvalidAlgorithmParameterException from label10 to label11 with label06;
        catch javax.crypto.IllegalBlockSizeException from label10 to label11 with label06;
        catch javax.crypto.BadPaddingException from label10 to label11 with label06;
        catch java.security.cert.CertificateException from label10 to label11 with label06;
        catch java.io.IOException from label10 to label11 with label06;
        catch java.security.UnrecoverableKeyException from label12 to label13 with label06;
        catch java.security.InvalidKeyException from label12 to label13 with label06;
        catch java.security.KeyStoreException from label12 to label13 with label06;
        catch java.security.NoSuchAlgorithmException from label12 to label13 with label06;
        catch javax.crypto.NoSuchPaddingException from label12 to label13 with label06;
        catch java.security.InvalidAlgorithmParameterException from label12 to label13 with label06;
        catch javax.crypto.IllegalBlockSizeException from label12 to label13 with label06;
        catch javax.crypto.BadPaddingException from label12 to label13 with label06;
        catch java.security.cert.CertificateException from label12 to label13 with label06;
        catch java.io.IOException from label12 to label13 with label06;
        catch java.security.UnrecoverableKeyException from label14 to label15 with label06;
        catch java.security.InvalidKeyException from label14 to label15 with label06;
        catch java.security.KeyStoreException from label14 to label15 with label06;
        catch java.security.NoSuchAlgorithmException from label14 to label15 with label06;
        catch javax.crypto.NoSuchPaddingException from label14 to label15 with label06;
        catch java.security.InvalidAlgorithmParameterException from label14 to label15 with label06;
        catch javax.crypto.IllegalBlockSizeException from label14 to label15 with label06;
        catch javax.crypto.BadPaddingException from label14 to label15 with label06;
        catch java.security.cert.CertificateException from label14 to label15 with label06;
        catch java.io.IOException from label14 to label15 with label06;
        catch java.security.UnrecoverableKeyException from label16 to label17 with label06;
        catch java.security.InvalidKeyException from label16 to label17 with label06;
        catch java.security.KeyStoreException from label16 to label17 with label06;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label06;
        catch javax.crypto.NoSuchPaddingException from label16 to label17 with label06;
        catch java.security.InvalidAlgorithmParameterException from label16 to label17 with label06;
        catch javax.crypto.IllegalBlockSizeException from label16 to label17 with label06;
        catch javax.crypto.BadPaddingException from label16 to label17 with label06;
        catch java.security.cert.CertificateException from label16 to label17 with label06;
        catch java.io.IOException from label16 to label17 with label06;
        catch java.security.UnrecoverableKeyException from label18 to label19 with label06;
        catch java.security.InvalidKeyException from label18 to label19 with label06;
        catch java.security.KeyStoreException from label18 to label19 with label06;
        catch java.security.NoSuchAlgorithmException from label18 to label19 with label06;
        catch javax.crypto.NoSuchPaddingException from label18 to label19 with label06;
        catch java.security.InvalidAlgorithmParameterException from label18 to label19 with label06;
        catch javax.crypto.IllegalBlockSizeException from label18 to label19 with label06;
        catch javax.crypto.BadPaddingException from label18 to label19 with label06;
        catch java.security.cert.CertificateException from label18 to label19 with label06;
        catch java.io.IOException from label18 to label19 with label06;
        catch java.security.UnrecoverableKeyException from label20 to label21 with label06;
        catch java.security.InvalidKeyException from label20 to label21 with label06;
        catch java.security.KeyStoreException from label20 to label21 with label06;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label06;
        catch javax.crypto.NoSuchPaddingException from label20 to label21 with label06;
        catch java.security.InvalidAlgorithmParameterException from label20 to label21 with label06;
        catch javax.crypto.IllegalBlockSizeException from label20 to label21 with label06;
        catch javax.crypto.BadPaddingException from label20 to label21 with label06;
        catch java.security.cert.CertificateException from label20 to label21 with label06;
        catch java.io.IOException from label20 to label21 with label06;
        catch java.lang.Throwable from label24 to label25 with label36;
        catch java.lang.Throwable from label27 to label28 with label36;
        catch java.lang.Throwable from label30 to label31 with label36;
    }

    public void scheduleNonStrongBiometricIdleTimeout(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkBiometricPermission()>();

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth: void scheduleNonStrongBiometricIdleTimeout(int)>(i0);

        return;
    }

    public void setBoolean(java.lang.String, boolean, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        boolean z0;
        int i0;
        com.android.server.locksettings.LockSettingsStorage $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i0);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: void setBoolean(java.lang.String,boolean,int)>(r1, z0, i0);

        return;
    }

    public boolean setLockCredential(com.android.internal.widget.LockscreenCredential, com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.UnsupportedOperationException $r2;
        android.os.UserManager $r3, $r5;
        android.content.pm.UserInfo $r4, $r6;
        java.lang.Throwable $r8;
        com.android.internal.widget.LockscreenCredential r9, r10;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r9 := @parameter0: com.android.internal.widget.LockscreenCredential;

        r10 := @parameter1: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.locksettings.LockSettingsService: boolean mHasSecureLockScreen>;

        if $z0 == 0 goto label10;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void enforceFrpResolved()>();

        $z1 = virtualinvoke r10.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z1 != 0 goto label01;

        $z3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i0);

        if $z3 == 0 goto label01;

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r6 = virtualinvoke $r5.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        $i1 = $r6.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential,long,int)>(r10, 0L, $i1);

        virtualinvoke r10.<com.android.internal.widget.LockscreenCredential: void zeroize()>();

        r10 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        goto label01;

     label01:
        r1 = r0.<com.android.server.locksettings.LockSettingsService: java.lang.Object mSeparateChallengeLock>;

        entermonitor r1;

     label02:
        $z4 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialInternal(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>(r9, r10, i0, 0);

        if $z4 != 0 goto label04;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        exitmonitor r1;

     label03:
        return 0;

     label04:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setSeparateProfileChallengeEnabledLocked(int,boolean,com.android.internal.widget.LockscreenCredential)>(i0, 1, null);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void notifyPasswordChanged(int)>(i0);

        exitmonitor r1;

     label05:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z2 = virtualinvoke $r4.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z2 == 0 goto label06;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setDeviceUnlockedForUser(int)>(i0);

     label06:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void notifySeparateProfileChallengeChanged(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return 1;

     label07:
        $r8 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r8;

     label10:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation requires secure lock screen feature");

        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void setLong(java.lang.String, long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        long l0;
        int i1;
        com.android.server.locksettings.LockSettingsStorage $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i1);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage: void setLong(java.lang.String,long,int)>(r1, l0, i1);

        return;
    }

    public void setRecoverySecretTypes(int[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        int[] r1;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: int[];

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setRecoverySecretTypes(int[])>(r1);

        return;
    }

    public void setRecoveryStatus(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1;
        int i0;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setRecoveryStatus(java.lang.String,int)>(r1, i0);

        return;
    }

    public void setSeparateProfileChallengeEnabled(int, boolean, com.android.internal.widget.LockscreenCredential)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Throwable $r3;
        com.android.internal.widget.LockscreenCredential r4;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r4 := @parameter2: com.android.internal.widget.LockscreenCredential;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i0);

        $z1 = r0.<com.android.server.locksettings.LockSettingsService: boolean mHasSecureLockScreen>;

        if $z1 == 0 goto label7;

        r1 = r0.<com.android.server.locksettings.LockSettingsService: java.lang.Object mSeparateChallengeLock>;

        entermonitor r1;

        if r4 == null goto label1;

        goto label2;

     label1:
        r4 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

     label2:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void setSeparateProfileChallengeEnabledLocked(int,boolean,com.android.internal.widget.LockscreenCredential)>(i0, z0, r4);

        exitmonitor r1;

     label3:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void notifySeparateProfileChallengeChanged(int)>(i0);

        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

     label7:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation requires secure lock screen feature.");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setServerParams(byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        byte[] r1;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setServerParams(byte[])>(r1);

        return;
    }

    public void setSnapshotCreatedPendingIntent(android.app.PendingIntent) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.app.PendingIntent r1;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.app.PendingIntent;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void setSnapshotCreatedPendingIntent(android.app.PendingIntent)>(r1);

        return;
    }

    public void setString(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.locksettings.LockSettingsStorage $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i0);

        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: void setString(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    protected boolean shouldMigrateToSyntheticPasswordLocked(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        return 1;
    }

    public byte[] startRecoverySessionWithCertPath(java.lang.String, java.lang.String, android.security.keystore.recovery.RecoveryCertPath, byte[], byte[], java.util.List) throws android.os.RemoteException
    {
        com.android.server.locksettings.LockSettingsService r0;
        java.lang.String r1, r2;
        android.security.keystore.recovery.RecoveryCertPath r3;
        byte[] r4, r5, $r8;
        java.util.List r6;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r7;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.security.keystore.recovery.RecoveryCertPath;

        r4 := @parameter3: byte[];

        r5 := @parameter4: byte[];

        r6 := @parameter5: java.util.List;

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mRecoverableKeyStoreManager>;

        $r8 = virtualinvoke $r7.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySessionWithCertPath(java.lang.String,java.lang.String,android.security.keystore.recovery.RecoveryCertPath,byte[],byte[],java.util.List)>(r1, r2, r3, r4, r5, r6);

        return $r8;
    }

    public void systemReady()
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.content.Context $r1, $r2;
        int $i0, $i1;
        android.content.pm.PackageManager $r3;
        boolean $z0;
        com.android.server.locksettings.SyntheticPasswordManager $r5;
        com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver $r6;
        com.android.server.locksettings.RebootEscrowManager $r7;
        com.android.server.locksettings.LockSettingsStorage $r8;
        java.lang.Object[] $r9;
        java.lang.Integer $r10;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_KEYGUARD_SECURE_STORAGE");

        if $i0 == 0 goto label1;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = "28251513";

        $i1 = staticinvoke <com.android.server.locksettings.LockSettingsService: int getCallingUid()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r9[1] = $r10;

        $r9[2] = "";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r9);

     label1:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(0);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.secure_lock_screen");

        r0.<com.android.server.locksettings.LockSettingsService: boolean mHasSecureLockScreen> = $z0;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void migrateOldData()>();

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        $r5 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.SyntheticPasswordManager mSpManager>;

        virtualinvoke $r5.<com.android.server.locksettings.SyntheticPasswordManager: void initWeaverService()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void getAuthSecretHal()>();

        $r6 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver mDeviceProvisionedObserver>;

        virtualinvoke $r6.<com.android.server.locksettings.LockSettingsService$DeviceProvisionedObserver: void onSystemReady()>();

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.RebootEscrowManager mRebootEscrowManager>;

        virtualinvoke $r7.<com.android.server.locksettings.RebootEscrowManager: void loadRebootEscrowDataIfAvailable()>();

        $r8 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        virtualinvoke $r8.<com.android.server.locksettings.LockSettingsStorage: void prefetchUser(int)>(0);

        return;
    }

    public void tieManagedProfileLockIfNecessary(int, com.android.internal.widget.LockscreenCredential)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, i1;
        long l2;
        android.os.UserManager $r1, $r4;
        android.content.pm.UserInfo $r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z5;
        com.android.server.locksettings.LockSettingsStorage $r3;
        android.service.gatekeeper.IGateKeeperService $r6;
        byte $b3;
        com.android.server.locksettings.ManagedProfilePasswordCache $r7;
        com.android.internal.widget.LockscreenCredential $r8, r12, r13;
        java.lang.Throwable $r9, $r11;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r12 := @parameter1: com.android.internal.widget.LockscreenCredential;

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r2 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean getSeparateProfileChallengeEnabledInternal(int)>(i0);

        if $z1 == 0 goto label02;

        return;

     label02:
        $r3 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $z2 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage: boolean hasChildProfileLock(int)>(i0);

        if $z2 == 0 goto label03;

        return;

     label03:
        $r4 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r5 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        i1 = $r5.<android.content.pm.UserInfo: int id>;

        $z3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isUserSecure(int)>(i1);

        if $z3 != 0 goto label04;

        $z5 = virtualinvoke r12.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z5 != 0 goto label04;

        $r8 = staticinvoke <com.android.internal.widget.LockscreenCredential: com.android.internal.widget.LockscreenCredential createNone()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialInternal(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>($r8, r12, i0, 1);

        return;

     label04:
        $r6 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        l2 = interfaceinvoke $r6.<android.service.gatekeeper.IGateKeeperService: long getSecureUserId(int)>(i1);

     label05:
        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label06;

        return;

     label06:
        r13 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential generateRandomProfilePassword()>();

     label07:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean setLockCredentialInternal(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int,boolean)>(r13, r12, i0, 1);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: void tieProfileLockToParent(int,com.android.internal.widget.LockscreenCredential)>(i0, r13);

        $r7 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache>;

        virtualinvoke $r7.<com.android.server.locksettings.ManagedProfilePasswordCache: void storePassword(int,com.android.internal.widget.LockscreenCredential)>(i0, r13);

     label08:
        if r13 == null goto label09;

        virtualinvoke r13.<com.android.internal.widget.LockscreenCredential: void close()>();

     label09:
        return;

     label10:
        $r9 := @caughtexception;

        if r13 == null goto label14;

     label11:
        virtualinvoke r13.<com.android.internal.widget.LockscreenCredential: void close()>();

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label14:
        throw $r9;

     label15:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to talk to GateKeeper service", $r10);

        return;

        catch android.os.RemoteException from label04 to label05 with label15;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    protected void tieProfileLockToParent(int, com.android.internal.widget.LockscreenCredential)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0, $i1, $i2;
        android.security.keystore.KeyProtection$Builder r1, $r5, $r7, $r12, $r14, $r15, $r16, $r17, r52;
        java.lang.String[] $r4, $r6, $r11, $r13;
        android.security.keystore.KeyProtection $r8, $r18;
        java.lang.String $r21, $r26, $r30, $r38, r47, r50;
        java.security.Key $r22;
        byte[] $r23, $r32, r56, r57;
        java.io.ByteArrayOutputStream $r27;
        com.android.server.locksettings.LockSettingsStorage $r31;
        java.lang.Throwable $r33, $r35, $r39;
        java.lang.IllegalStateException $r34, $r40;
        com.android.internal.widget.LockscreenCredential r41;
        javax.crypto.KeyGenerator r42;
        java.security.SecureRandom r43;
        javax.crypto.SecretKey r44, r54;
        java.security.KeyStore r45;
        java.lang.StringBuilder r46, r49, r53, r58, r61, r64;
        java.security.KeyStore$SecretKeyEntry r48, r51;
        javax.crypto.Cipher r55;
        java.lang.IllegalArgumentException r60;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        r41 := @parameter1: com.android.internal.widget.LockscreenCredential;

     label01:
        r42 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        r43 = new java.security.SecureRandom;

        specialinvoke r43.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r42.<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)>(r43);

        r44 = virtualinvoke r42.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        r45 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

        virtualinvoke r45.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

     label02:
        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_encrypt_");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r47 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        r48 = new java.security.KeyStore$SecretKeyEntry;

        specialinvoke r48.<java.security.KeyStore$SecretKeyEntry: void <init>(javax.crypto.SecretKey)>(r44);

        r1 = new android.security.keystore.KeyProtection$Builder;

        specialinvoke r1.<android.security.keystore.KeyProtection$Builder: void <init>(int)>(1);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "GCM";

        $r5 = virtualinvoke r1.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[])>($r4);

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "NoPadding";

        $r7 = virtualinvoke $r5.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])>($r6);

        $r8 = virtualinvoke $r7.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection build()>();

        virtualinvoke r45.<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)>(r47, r48, $r8);

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_decrypt_");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r50 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        r51 = new java.security.KeyStore$SecretKeyEntry;

        specialinvoke r51.<java.security.KeyStore$SecretKeyEntry: void <init>(javax.crypto.SecretKey)>(r44);

        r52 = new android.security.keystore.KeyProtection$Builder;

        specialinvoke r52.<android.security.keystore.KeyProtection$Builder: void <init>(int)>(2);

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "GCM";

        $r12 = virtualinvoke r52.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[])>($r11);

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "NoPadding";

        $r14 = virtualinvoke $r12.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])>($r13);

        $r15 = virtualinvoke $r14.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationRequired(boolean)>(1);

        $r16 = virtualinvoke $r15.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationValidityDurationSeconds(int)>(30);

        $r17 = virtualinvoke $r16.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setCriticalToDeviceEncryption(boolean)>(1);

        $r18 = virtualinvoke $r17.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection build()>();

        virtualinvoke r45.<java.security.KeyStore: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)>(r50, r51, $r18);

        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_encrypt_");

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke r45.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>($r21, null);

        r54 = (javax.crypto.SecretKey) $r22;

        r55 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        virtualinvoke r55.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r54);

        $r23 = virtualinvoke r41.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        r56 = virtualinvoke r55.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r23);

        r57 = virtualinvoke r55.<javax.crypto.Cipher: byte[] getIV()>();

     label03:
        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_encrypt_");

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r45.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r26);

     label04:
        $r27 = new java.io.ByteArrayOutputStream;

        specialinvoke $r27.<java.io.ByteArrayOutputStream: void <init>()>();

     label05:
        $i1 = lengthof r57;

        if $i1 != 12 goto label07;

        virtualinvoke $r27.<java.io.ByteArrayOutputStream: void write(byte[])>(r57);

        virtualinvoke $r27.<java.io.ByteArrayOutputStream: void write(byte[])>(r56);

     label06:
        $r31 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStorage mStorage>;

        $r32 = virtualinvoke $r27.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r31.<com.android.server.locksettings.LockSettingsStorage: void writeChildProfileLock(int,byte[])>(i0, $r32);

        return;

     label07:
        r60 = new java.lang.IllegalArgumentException;

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid iv length: ");

        $i2 = lengthof r57;

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r30 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r60.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw r60;

     label08:
        $r33 := @caughtexception;

        $r34 = new java.lang.IllegalStateException;

        specialinvoke $r34.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to concatenate byte arrays", $r33);

        throw $r34;

     label09:
        $r35 := @caughtexception;

     label10:
        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("profile_key_name_encrypt_");

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r38 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r45.<java.security.KeyStore: void deleteEntry(java.lang.String)>($r38);

     label11:
        throw $r35;

     label12:
        $r39 := @caughtexception;

        $r40 = new java.lang.IllegalStateException;

        specialinvoke $r40.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to encrypt key", $r39);

        throw $r40;

        catch java.security.cert.CertificateException from label01 to label02 with label12;
        catch java.security.UnrecoverableKeyException from label01 to label02 with label12;
        catch java.io.IOException from label01 to label02 with label12;
        catch javax.crypto.BadPaddingException from label01 to label02 with label12;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label12;
        catch java.security.KeyStoreException from label01 to label02 with label12;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label12;
        catch java.security.NoSuchAlgorithmException from label01 to label02 with label12;
        catch java.security.InvalidKeyException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.security.cert.CertificateException from label03 to label04 with label12;
        catch java.security.UnrecoverableKeyException from label03 to label04 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch javax.crypto.BadPaddingException from label03 to label04 with label12;
        catch javax.crypto.IllegalBlockSizeException from label03 to label04 with label12;
        catch java.security.KeyStoreException from label03 to label04 with label12;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label12;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label12;
        catch java.security.InvalidKeyException from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label08;
        catch java.io.IOException from label07 to label08 with label08;
        catch java.security.cert.CertificateException from label10 to label11 with label12;
        catch java.security.UnrecoverableKeyException from label10 to label11 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch javax.crypto.BadPaddingException from label10 to label11 with label12;
        catch javax.crypto.IllegalBlockSizeException from label10 to label11 with label12;
        catch java.security.KeyStoreException from label10 to label11 with label12;
        catch javax.crypto.NoSuchPaddingException from label10 to label11 with label12;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label12;
        catch java.security.InvalidKeyException from label10 to label11 with label12;
        catch java.security.cert.CertificateException from label11 to label12 with label12;
        catch java.security.UnrecoverableKeyException from label11 to label12 with label12;
        catch java.io.IOException from label11 to label12 with label12;
        catch javax.crypto.BadPaddingException from label11 to label12 with label12;
        catch javax.crypto.IllegalBlockSizeException from label11 to label12 with label12;
        catch java.security.KeyStoreException from label11 to label12 with label12;
        catch javax.crypto.NoSuchPaddingException from label11 to label12 with label12;
        catch java.security.NoSuchAlgorithmException from label11 to label12 with label12;
        catch java.security.InvalidKeyException from label11 to label12 with label12;
    }

    public boolean tryUnlockWithCachedUnifiedChallenge(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        com.android.server.locksettings.ManagedProfilePasswordCache $r2;
        com.android.internal.widget.VerifyCredentialResponse $r3;
        java.lang.Throwable $r4, $r5;
        int i0, i1;
        com.android.internal.widget.LockscreenCredential r6;
        boolean z0;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.ManagedProfilePasswordCache mManagedProfilePasswordCache>;

        r6 = virtualinvoke $r2.<com.android.server.locksettings.ManagedProfilePasswordCache: com.android.internal.widget.LockscreenCredential retrievePassword(int)>(i0);

        z0 = 0;

        if r6 != null goto label02;

        if r6 == null goto label01;

        virtualinvoke r6.<com.android.internal.widget.LockscreenCredential: void close()>();

     label01:
        return 0;

     label02:
        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r6, 0, 0L, i0, null);

        i1 = virtualinvoke $r3.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

     label03:
        if i1 != 0 goto label04;

        z0 = 1;

     label04:
        if r6 == null goto label05;

        virtualinvoke r6.<com.android.internal.widget.LockscreenCredential: void close()>();

     label05:
        return z0;

     label06:
        $r4 := @caughtexception;

        if r6 == null goto label10;

     label07:
        virtualinvoke r6.<com.android.internal.widget.LockscreenCredential: void close()>();

     label08:
        goto label10;

     label09:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label10:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
    }

    public void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsService r0;
        android.app.trust.IStrongAuthTracker r1;
        com.android.server.locksettings.LockSettingsStrongAuth $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r1 := @parameter0: android.app.trust.IStrongAuthTracker;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(-1);

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStrongAuth: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>(r1);

        return;
    }

    public void userPresent(int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkWritePermission(int)>(i0);

        $r1 = r0.<com.android.server.locksettings.LockSettingsService: com.android.server.locksettings.LockSettingsStrongAuth mStrongAuth>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth: void reportUnlock(int)>(i0);

        return;
    }

    public com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential, long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1;
        byte $b2, b4;
        java.lang.Throwable $r1;
        com.android.internal.widget.LockscreenCredential r2;
        com.android.internal.widget.VerifyCredentialResponse r3;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r2 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i1);

        b4 = 1;

        $b2 = l0 cmp 0L;

        if $b2 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsService", "VerifyCredential called with challenge=0");

        b4 = 0;

     label1:
        r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r2, b4, l0, i1, null);

     label2:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return r3;

     label3:
        $r1 := @caughtexception;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential, long, int)
    {
        com.android.server.locksettings.LockSettingsService r0;
        long l0;
        int i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;
        android.os.UserManager $r2;
        android.content.pm.UserInfo $r3;
        com.android.internal.widget.LockscreenCredential $r4, r7;
        java.lang.Throwable $r5, $r6;
        com.android.internal.widget.VerifyCredentialResponse r8, r9;
        java.lang.IllegalStateException r12;

        r0 := @this: com.android.server.locksettings.LockSettingsService;

        r7 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void checkPasswordReadPermission(int)>(i1);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: boolean isManagedProfileWithUnifiedLock(int)>(i1);

        if $z0 == 0 goto label7;

        $r2 = r0.<com.android.server.locksettings.LockSettingsService: android.os.UserManager mUserManager>;

        $r3 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i1);

        $i2 = $r3.<android.content.pm.UserInfo: int id>;

        r8 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r7, 1, l0, $i2, null);

        $i3 = virtualinvoke r8.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i3 == 0 goto label1;

        return r8;

     label1:
        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.LockscreenCredential getDecryptedPasswordForTiedProfile(int)>(i1);

        r9 = specialinvoke r0.<com.android.server.locksettings.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse doVerifyCredential(com.android.internal.widget.LockscreenCredential,int,long,int,com.android.internal.widget.ICheckCredentialProgressCallback)>($r4, 1, l0, i1, null);

     label2:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        return r9;

     label3:
        $r6 := @caughtexception;

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsService", "Failed to decrypt child profile key", $r5);

        r12 = new java.lang.IllegalStateException;

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to get tied profile token");

        throw r12;

     label6:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsService: void scheduleGc()>();

        throw $r6;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("User id must be managed profile with unified lock");

        throw $r1;

        catch java.security.UnrecoverableKeyException from label1 to label2 with label4;
        catch java.security.InvalidKeyException from label1 to label2 with label4;
        catch java.security.KeyStoreException from label1 to label2 with label4;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label4;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label4;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label4;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label4;
        catch javax.crypto.BadPaddingException from label1 to label2 with label4;
        catch java.security.cert.CertificateException from label1 to label2 with label4;
        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }
}
