class com.android.server.locksettings.LockSettingsStorage$Cache extends java.lang.Object
{
    private final android.util.ArrayMap mCache;
    private final com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey mCacheKey;
    private int mVersion;

    private void <init>()
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        android.util.ArrayMap $r1;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache> = $r1;

        $r2 = new com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: void <init>(com.android.server.locksettings.LockSettingsStorage$1)>(null);

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey mCacheKey> = $r2;

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion> = 0;

        return;
    }

    void <init>(com.android.server.locksettings.LockSettingsStorage$1)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        com.android.server.locksettings.LockSettingsStorage$1 r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: com.android.server.locksettings.LockSettingsStorage$1;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void <init>()>();

        return;
    }

    static int access$100(com.android.server.locksettings.LockSettingsStorage$Cache)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int $i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStorage$Cache;

        $i0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int getVersion()>();

        return $i0;
    }

    private boolean contains(int, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0, i1;
        boolean z0;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey $r1, $r3;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey mCacheKey>;

        $r3 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey set(int,java.lang.String,int)>(i0, r5, i1);

        z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r3);

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private byte[] copyOf(byte[])
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int $i0;
        byte[] r1, r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i0);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    private int getVersion()
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private java.lang.Object peek(int, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0, i1;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey $r1, $r3;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey mCacheKey>;

        $r3 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey set(int,java.lang.String,int)>(i0, r5, i1);

        r6 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

     label2:
        exitmonitor r0;

        return r6;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void put(int, java.lang.String, java.lang.Object, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        android.util.ArrayMap r2;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey r3, $r4;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        r7 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        r3 = new com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey;

        specialinvoke r3.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: void <init>(com.android.server.locksettings.LockSettingsStorage$1)>(null);

        $r4 = virtualinvoke r3.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey set(int,java.lang.String,int)>(i0, r7, i1);

        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1);

        $i2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion>;

        $i3 = $i2 + 1;

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion> = $i3;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void putIfUnchanged(int, java.lang.String, java.lang.Object, int, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        entermonitor r0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean contains(int,java.lang.String,int)>(i0, r3, i1);

        if $z0 != 0 goto label2;

        $i3 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion>;

        if $i3 != i2 goto label2;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void put(int,java.lang.String,java.lang.Object,int)>(i0, r3, r1, i1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void remove(int, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0, i1;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey $r1, $r3;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey mCacheKey>;

        $r3 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey set(int,java.lang.String,int)>(i0, r6, i1);

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r3);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void clear()
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        android.util.ArrayMap $r2;
        int $i0, $i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        virtualinvoke $r2.<android.util.ArrayMap: void clear()>();

        $i0 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion>;

        $i1 = $i0 + 1;

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion> = $i1;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    boolean hasFile(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean contains(int,java.lang.String,int)>(1, r1, -1);

        return $z0;
    }

    boolean hasKeyValue(java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean contains(int,java.lang.String,int)>(0, r1, i0);

        return $z0;
    }

    boolean isFetched(int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean contains(int,java.lang.String,int)>(2, "", i0);

        return $z0;
    }

    byte[] peekFile(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        java.lang.Object $r2;
        byte[] $r3, $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: java.lang.Object peek(int,java.lang.String,int)>(1, r1, -1);

        $r3 = (byte[]) $r2;

        $r4 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: byte[] copyOf(byte[])>($r3);

        return $r4;
    }

    java.lang.String peekKeyValue(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0;
        java.lang.Object $r1, r4;
        java.lang.String r2, r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r4 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: java.lang.Object peek(int,java.lang.String,int)>(0, r2, i0);

        $r1 = staticinvoke <com.android.server.locksettings.LockSettingsStorage: java.lang.Object access$400()>();

        if r4 != $r1 goto label1;

        goto label2;

     label1:
        r3 = (java.lang.String) r4;

     label2:
        return r3;
    }

    void purgePath(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey r1;
        android.util.ArrayMap $r2, $r3, $r6;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4;
        java.lang.String $r5, r9;
        boolean $z0;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r9 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        i4 = $i0 - 1;

     label2:
        if i4 < 0 goto label5;

     label3:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        r1 = (com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey) $r4;

        $i3 = r1.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: int type>;

        if $i3 != 1 goto label4;

        $r5 = r1.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: java.lang.String key>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>(r9);

        if $z0 == 0 goto label4;

        $r6 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i4);

     label4:
        i4 = i4 + -1;

        goto label2;

     label5:
        $i1 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion>;

        $i2 = $i1 + 1;

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion> = $i2;

     label6:
        exitmonitor r0;

        return;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    void putFile(java.lang.String, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        byte[] r2, $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: byte[] copyOf(byte[])>(r2);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void put(int,java.lang.String,java.lang.Object,int)>(1, r1, $r3, -1);

        return;
    }

    void putFileIfUnchanged(java.lang.String, byte[], int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        byte[] r2, $r3;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: byte[] copyOf(byte[])>(r2);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void putIfUnchanged(int,java.lang.String,java.lang.Object,int,int)>(1, r1, $r3, -1, i0);

        return;
    }

    void putKeyValue(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void put(int,java.lang.String,java.lang.Object,int)>(0, r1, r2, i0);

        return;
    }

    void putKeyValueIfUnchanged(java.lang.String, java.lang.Object, int, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        java.lang.Object r2;
        int i0, i1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void putIfUnchanged(int,java.lang.String,java.lang.Object,int,int)>(0, r1, r2, i0, i1);

        return;
    }

    void removeKey(java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void remove(int,java.lang.String,int)>(0, r1, i0);

        return;
    }

    void removeUser(int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.util.ArrayMap $r2, $r3, $r6;
        java.lang.Object $r4;
        com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey $r5;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        i5 = $i1 - 1;

     label2:
        if i5 < 0 goto label5;

     label3:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        $r5 = (com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey) $r4;

        $i4 = $r5.<com.android.server.locksettings.LockSettingsStorage$Cache$CacheKey: int userId>;

        if $i4 != i0 goto label4;

        $r6 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: android.util.ArrayMap mCache>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i5);

     label4:
        i5 = i5 + -1;

        goto label2;

     label5:
        $i2 = r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion>;

        $i3 = $i2 + 1;

        r0.<com.android.server.locksettings.LockSettingsStorage$Cache: int mVersion> = $i3;

     label6:
        exitmonitor r0;

        return;

     label7:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    void setFetched(int)
    {
        com.android.server.locksettings.LockSettingsStorage$Cache r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$Cache;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$Cache: void put(int,java.lang.String,java.lang.Object,int)>(2, "isFetched", "true", i0);

        return;
    }
}
