public class com.android.server.locksettings.LockSettingsStorage$CredentialHash extends java.lang.Object
{
    byte[] hash;
    int type;

    private void <init>(byte[], int)
    {
        com.android.server.locksettings.LockSettingsStorage$CredentialHash r0;
        byte[] r1;
        int i0;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 == -1 goto label2;

        if r1 == null goto label1;

        goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty hash for CredentialHash");

        throw $r3;

     label2:
        if r1 != null goto label4;

     label3:
        r0.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash> = r1;

        r0.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type> = i0;

        return;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("None type CredentialHash should not have hash");

        throw $r2;
    }

    void <init>(byte[], int, com.android.server.locksettings.LockSettingsStorage$1)
    {
        com.android.server.locksettings.LockSettingsStorage$CredentialHash r0;
        byte[] r1;
        int i0;
        com.android.server.locksettings.LockSettingsStorage$1 r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.server.locksettings.LockSettingsStorage$1;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: void <init>(byte[],int)>(r1, i0);

        return;
    }

    static com.android.server.locksettings.LockSettingsStorage$CredentialHash create(byte[], int)
    {
        byte[] r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 == -1 goto label1;

        $r2 = new com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: void <init>(byte[],int)>(r0, i0);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad type for CredentialHash");

        throw $r1;
    }

    static com.android.server.locksettings.LockSettingsStorage$CredentialHash createEmptyHash()
    {
        com.android.server.locksettings.LockSettingsStorage$CredentialHash $r0;

        $r0 = new com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        specialinvoke $r0.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: void <init>(byte[],int)>(null, -1);

        return $r0;
    }
}
