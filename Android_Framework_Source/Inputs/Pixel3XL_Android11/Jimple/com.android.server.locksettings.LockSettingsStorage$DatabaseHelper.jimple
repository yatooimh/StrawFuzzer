class com.android.server.locksettings.LockSettingsStorage$DatabaseHelper extends android.database.sqlite.SQLiteOpenHelper
{
    private static final java.lang.String DATABASE_NAME;
    private static final int DATABASE_VERSION;
    private static final int IDLE_CONNECTION_TIMEOUT_MS;
    private static final java.lang.String TAG;
    private com.android.server.locksettings.LockSettingsStorage$Callback mCallback;

    public void <init>(android.content.Context)
    {
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper r0;
        android.content.Context r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, "locksettings.db", null, 2);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: void setWriteAheadLoggingEnabled(boolean)>(1);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: void setIdleConnectionTimeout(long)>(30000L);

        return;
    }

    private void createTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE locksettings (_id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT,user INTEGER,value TEXT);");

        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.LockSettingsStorage$Callback r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: void createTable(android.database.sqlite.SQLiteDatabase)>(r1);

        r2 = r0.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: com.android.server.locksettings.LockSettingsStorage$Callback mCallback>;

        if r2 == null goto label1;

        interfaceinvoke r2.<com.android.server.locksettings.LockSettingsStorage$Callback: void initialize(android.database.sqlite.SQLiteDatabase)>(r1);

     label1:
        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i1, i2, i4;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i4 = i1;

        if i1 != 1 goto label1;

        i4 = 2;

     label1:
        if i4 == 2 goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LockSettingsDB", "Failed to upgrade database!");

     label2:
        return;
    }

    public void setCallback(com.android.server.locksettings.LockSettingsStorage$Callback)
    {
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper r0;
        com.android.server.locksettings.LockSettingsStorage$Callback r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper;

        r1 := @parameter0: com.android.server.locksettings.LockSettingsStorage$Callback;

        r0.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: com.android.server.locksettings.LockSettingsStorage$Callback mCallback> = r1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: java.lang.String TAG> = "LockSettingsDB";

        <com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: int IDLE_CONNECTION_TIMEOUT_MS> = 30000;

        <com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: int DATABASE_VERSION> = 2;

        <com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: java.lang.String DATABASE_NAME> = "locksettings.db";

        return;
    }
}
