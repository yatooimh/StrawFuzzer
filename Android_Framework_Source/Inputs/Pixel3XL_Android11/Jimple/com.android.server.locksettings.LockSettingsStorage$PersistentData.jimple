public class com.android.server.locksettings.LockSettingsStorage$PersistentData extends java.lang.Object
{
    public static final com.android.server.locksettings.LockSettingsStorage$PersistentData NONE;
    public static final int TYPE_NONE;
    public static final int TYPE_SP;
    public static final int TYPE_SP_WEAVER;
    static final byte VERSION_1;
    static final int VERSION_1_HEADER_SIZE;
    final byte[] payload;
    final int qualityForUi;
    final int type;
    final int userId;

    static void <clinit>()
    {
        com.android.server.locksettings.LockSettingsStorage$PersistentData $r0;

        <com.android.server.locksettings.LockSettingsStorage$PersistentData: int VERSION_1_HEADER_SIZE> = 10;

        <com.android.server.locksettings.LockSettingsStorage$PersistentData: byte VERSION_1> = 1;

        <com.android.server.locksettings.LockSettingsStorage$PersistentData: int TYPE_SP_WEAVER> = 2;

        <com.android.server.locksettings.LockSettingsStorage$PersistentData: int TYPE_SP> = 1;

        <com.android.server.locksettings.LockSettingsStorage$PersistentData: int TYPE_NONE> = 0;

        $r0 = new com.android.server.locksettings.LockSettingsStorage$PersistentData;

        specialinvoke $r0.<com.android.server.locksettings.LockSettingsStorage$PersistentData: void <init>(int,int,int,byte[])>(0, -10000, 0, null);

        <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE> = $r0;

        return;
    }

    private void <init>(int, int, int, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage$PersistentData r0;
        int i0, i1, i2;
        byte[] r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage$PersistentData;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int type> = i0;

        r0.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int userId> = i1;

        r0.<com.android.server.locksettings.LockSettingsStorage$PersistentData: int qualityForUi> = i2;

        r0.<com.android.server.locksettings.LockSettingsStorage$PersistentData: byte[] payload> = r1;

        return;
    }

    public static com.android.server.locksettings.LockSettingsStorage$PersistentData fromBytes(byte[])
    {
        byte b0, b9;
        int i1, $i2, $i4, $i5, $i6, i10;
        com.android.server.locksettings.LockSettingsStorage$PersistentData $r0, $r6, $r8, r13;
        java.io.DataInputStream $r1;
        java.io.ByteArrayInputStream $r2;
        java.lang.String $r5;
        short $s7;
        java.lang.Throwable $r7;
        byte[] r9, r11;
        java.lang.StringBuilder r12;

        r9 := @parameter0: byte[];

        if r9 == null goto label8;

        $i2 = lengthof r9;

        if $i2 != 0 goto label1;

        goto label8;

     label1:
        $r1 = new java.io.DataInputStream;

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r9);

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r2);

     label2:
        b9 = virtualinvoke $r1.<java.io.DataInputStream: byte readByte()>();

     label3:
        if b9 != 1 goto label5;

     label4:
        b0 = virtualinvoke $r1.<java.io.DataInputStream: byte readByte()>();

        i1 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        i10 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        $i4 = lengthof r9;

        $i5 = $i4 - 10;

        r11 = newarray (byte)[$i5];

        $i6 = lengthof r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 10, r11, 0, $i6);

        $r6 = new com.android.server.locksettings.LockSettingsStorage$PersistentData;

        $s7 = b0 & 255;

        specialinvoke $r6.<com.android.server.locksettings.LockSettingsStorage$PersistentData: void <init>(int,int,int,byte[])>($s7, i1, i10, r11);

        return $r6;

     label5:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown PersistentData version code: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b9);

        $r5 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("LockSettingsStorage", $r5);

        r13 = <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE>;

     label6:
        return r13;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsStorage", "Could not parse PersistentData", $r7);

        $r8 = <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE>;

        return $r8;

     label8:
        $r0 = <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE>;

        return $r0;

        catch java.io.IOException from label2 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public static byte[] toBytes(int, int, int, byte[])
    {
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException $r3;
        byte[] r4, $r7;
        boolean z1, z2;
        java.io.ByteArrayOutputStream $r5;
        java.io.DataOutputStream $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r4 := @parameter3: byte[];

        z1 = 0;

        if i0 != 0 goto label2;

        if r4 != null goto label1;

        z1 = 1;

     label1:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "TYPE_NONE must have empty payload");

        return null;

     label2:
        z2 = 0;

        if r4 == null goto label3;

        z2 = 0;

        $i3 = lengthof r4;

        if $i3 <= 0 goto label3;

        z2 = 1;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z2, "empty payload must only be used with TYPE_NONE");

        $r5 = new java.io.ByteArrayOutputStream;

        $i4 = lengthof r4;

        $i5 = $i4 + 10;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>(int)>($i5);

        $r6 = new java.io.DataOutputStream;

        specialinvoke $r6.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

     label4:
        virtualinvoke $r6.<java.io.DataOutputStream: void writeByte(int)>(1);

        virtualinvoke $r6.<java.io.DataOutputStream: void writeByte(int)>(i0);

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>(i1);

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>(i2);

        virtualinvoke $r6.<java.io.DataOutputStream: void write(byte[])>(r4);

     label5:
        $r7 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r7;

     label6:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ByteArrayOutputStream cannot throw IOException");

        throw $r3;

        catch java.io.IOException from label4 to label5 with label6;
    }
}
