class com.android.server.locksettings.LockSettingsStorage extends java.lang.Object
{
    private static final java.lang.String CHILD_PROFILE_LOCK_FILE;
    private static final java.lang.String[] COLUMNS_FOR_PREFETCH;
    private static final java.lang.String[] COLUMNS_FOR_QUERY;
    private static final java.lang.String COLUMN_KEY;
    private static final java.lang.String COLUMN_USERID;
    private static final java.lang.String COLUMN_VALUE;
    private static final boolean DEBUG;
    private static final java.lang.Object DEFAULT;
    private static final java.lang.String LOCK_PASSWORD_FILE;
    private static final java.lang.String LOCK_PATTERN_FILE;
    private static final java.lang.String REBOOT_ESCROW_FILE;
    private static final java.lang.String[] SETTINGS_TO_BACKUP;
    private static final java.lang.String SYNTHETIC_PASSWORD_DIRECTORY;
    private static final java.lang.String SYSTEM_DIRECTORY;
    private static final java.lang.String TABLE;
    private static final java.lang.String TAG;
    private final com.android.server.locksettings.LockSettingsStorage$Cache mCache;
    private final android.content.Context mContext;
    private final java.lang.Object mFileWriteLock;
    private final com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper;
    private com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r3;
        java.lang.Object $r2;

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String TAG> = "LockSettingsStorage";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String TABLE> = "locksettings";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String SYSTEM_DIRECTORY> = "/system/";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String SYNTHETIC_PASSWORD_DIRECTORY> = "spblob/";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String REBOOT_ESCROW_FILE> = "reboot.escrow.key";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String LOCK_PATTERN_FILE> = "gatekeeper.pattern.key";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String LOCK_PASSWORD_FILE> = "gatekeeper.password.key";

        <com.android.server.locksettings.LockSettingsStorage: boolean DEBUG> = 0;

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String COLUMN_VALUE> = "value";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String COLUMN_USERID> = "user";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String COLUMN_KEY> = "name";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String CHILD_PROFILE_LOCK_FILE> = "gatekeeper.profile.key";

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "value";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String[] COLUMNS_FOR_QUERY> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "name";

        $r1[1] = "value";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String[] COLUMNS_FOR_PREFETCH> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <com.android.server.locksettings.LockSettingsStorage: java.lang.Object DEFAULT> = $r2;

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "lock_screen_owner_info_enabled";

        $r3[1] = "lock_screen_owner_info";

        $r3[2] = "lock_pattern_visible_pattern";

        $r3[3] = "lockscreen.power_button_instantly_locks";

        <com.android.server.locksettings.LockSettingsStorage: java.lang.String[] SETTINGS_TO_BACKUP> = $r3;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        android.content.Context r1;
        com.android.server.locksettings.LockSettingsStorage$Cache $r2;
        java.lang.Object $r3;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.server.locksettings.LockSettingsStorage$Cache;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$Cache: void <init>(com.android.server.locksettings.LockSettingsStorage$1)>(null);

        r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.Object mFileWriteLock> = $r3;

        r0.<com.android.server.locksettings.LockSettingsStorage: android.content.Context mContext> = r1;

        $r4 = new com.android.server.locksettings.LockSettingsStorage$DatabaseHelper;

        specialinvoke $r4.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: void <init>(android.content.Context)>(r1);

        r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper> = $r4;

        return;
    }

    static java.lang.Object access$400()
    {
        java.lang.Object $r0;

        $r0 = <com.android.server.locksettings.LockSettingsStorage: java.lang.Object DEFAULT>;

        return $r0;
    }

    private void deleteFile(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.Object r1;
        java.io.File r2;
        boolean $z0;
        com.android.server.locksettings.LockSettingsStorage$Cache $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.Object mFileWriteLock>;

        entermonitor r1;

     label1:
        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>(r5);

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.io.File: boolean delete()>();

        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$Cache: void putFile(java.lang.String,byte[])>(r5, null);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private transient void deleteFilesAndRemoveCache(java.lang.String[])
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;
        java.io.File $r4;
        boolean $z0;
        com.android.server.locksettings.LockSettingsStorage$Cache $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r2);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r5 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r5.<com.android.server.locksettings.LockSettingsStorage$Cache: void putFile(java.lang.String,byte[])>(r2, null);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void ensureSyntheticPasswordDirectoryForUser(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.io.File r1;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.io.File getSyntheticPasswordDirectoryForUser(int)>(i0);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<java.io.File: boolean mkdir()>();

     label1:
        return;
    }

    private void fsyncDirectory(java.io.File)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.io.File r1;
        java.nio.file.Path $r2;
        java.lang.Object[] $r3;
        java.nio.file.StandardOpenOption $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.String $r11;
        java.nio.channels.FileChannel r12;
        java.lang.StringBuilder r17;
        java.nio.file.OpenOption[] r18;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.io.File;

     label01:
        $r2 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        $r3 = newarray (java.nio.file.OpenOption)[1];

        $r4 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;

        $r3[0] = $r4;

        r18 = (java.nio.file.OpenOption[]) $r3;

        r12 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>($r2, r18);

     label02:
        virtualinvoke r12.<java.nio.channels.FileChannel: void force(boolean)>(1);

     label03:
        if r12 == null goto label05;

     label04:
        virtualinvoke r12.<java.nio.channels.FileChannel: void close()>();

     label05:
        goto label13;

     label06:
        $r6 := @caughtexception;

        if r12 == null goto label11;

     label07:
        virtualinvoke r12.<java.nio.channels.FileChannel: void close()>();

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

     label10:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label11:
        throw $r6;

     label12:
        $r7 := @caughtexception;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error syncing directory: ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsStorage", $r11, $r7);

     label13:
        return;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    private java.lang.String getLockCredentialFilePathForUser(int, java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String r1, $r5, $r10, $r14, r16;
        java.lang.StringBuilder $r3, $r11;
        java.io.File $r4, $r8, $r9;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/");

        r16 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        if i0 != 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label1:
        $r8 = new java.io.File;

        $r9 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, r1);

        $r10 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r10;
    }

    private boolean hasFile(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int $i0;
        java.lang.String r1;
        byte[] r2;
        boolean z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: byte[] readFile(java.lang.String)>(r1);

        if r2 == null goto label1;

        $i0 = lengthof r2;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private byte[] readFile(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0, $i2, $i3;
        java.io.RandomAccessFile r1;
        com.android.server.locksettings.LockSettingsStorage$Cache $r2, $r3, $r4, r13, $r23;
        boolean $z0;
        long $l1;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11, r12;
        byte[] r14, r15, r16, r17, r18;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r12 := @parameter0: java.lang.String;

        r13 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        entermonitor r13;

     label01:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        $z0 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean hasFile(java.lang.String)>(r12);

        if $z0 == 0 goto label03;

        $r4 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        r14 = virtualinvoke $r4.<com.android.server.locksettings.LockSettingsStorage$Cache: byte[] peekFile(java.lang.String)>(r12);

        exitmonitor r13;

     label02:
        return r14;

     label03:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        i0 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$Cache: int access$100(com.android.server.locksettings.LockSettingsStorage$Cache)>($r3);

        exitmonitor r13;

     label04:
        r15 = null;

        r16 = null;

        r17 = null;

     label05:
        r1 = new java.io.RandomAccessFile;

     label06:
        r16 = null;

        r17 = null;

     label07:
        specialinvoke r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r12, "r");

     label08:
        $l1 = virtualinvoke r1.<java.io.RandomAccessFile: long length()>();

        $i2 = (int) $l1;

        r18 = newarray (byte)[$i2];

     label09:
        r15 = r18;

     label10:
        $i3 = lengthof r18;

        virtualinvoke r1.<java.io.RandomAccessFile: void readFully(byte[],int,int)>(r18, 0, $i3);

     label11:
        r15 = r18;

     label12:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label13:
        r16 = r18;

        r17 = r18;

     label14:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label15:
        r17 = r18;

        goto label25;

     label16:
        $r6 := @caughtexception;

     label17:
        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

     label18:
        goto label21;

     label19:
        $r8 := @caughtexception;

        r16 = r15;

        r17 = r15;

     label20:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label21:
        r16 = r15;

        r17 = r15;

     label22:
        throw $r6;

     label23:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read file ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsStorage", $r11);

        goto label26;

     label24:
        $r7 := @caughtexception;

     label25:
        r16 = r17;

     label26:
        $r23 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r23.<com.android.server.locksettings.LockSettingsStorage$Cache: void putFileIfUnchanged(java.lang.String,byte[],int)>(r12, r16, i0);

        return r16;

     label27:
        $r5 := @caughtexception;

     label28:
        exitmonitor r13;

     label29:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label27;
        catch java.lang.Throwable from label03 to label04 with label27;
        catch java.io.FileNotFoundException from label05 to label06 with label24;
        catch java.io.IOException from label05 to label06 with label23;
        catch java.io.FileNotFoundException from label07 to label08 with label24;
        catch java.io.IOException from label07 to label08 with label23;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.io.FileNotFoundException from label14 to label15 with label24;
        catch java.io.IOException from label14 to label15 with label23;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.io.FileNotFoundException from label20 to label21 with label24;
        catch java.io.IOException from label20 to label21 with label23;
        catch java.io.FileNotFoundException from label22 to label23 with label24;
        catch java.io.IOException from label22 to label23 with label23;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    private com.android.server.locksettings.LockSettingsStorage$CredentialHash readPasswordHashIfExists(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        byte[] r1;
        java.lang.String $r2;
        boolean $z0;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPasswordFilename(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: byte[] readFile(java.lang.String)>($r2);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(byte[])>(r1);

        if $z0 != 0 goto label1;

        $r3 = new com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        specialinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: void <init>(byte[],int,com.android.server.locksettings.LockSettingsStorage$1)>(r1, 2, null);

        return $r3;

     label1:
        return null;
    }

    private com.android.server.locksettings.LockSettingsStorage$CredentialHash readPatternHashIfExists(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        byte[] r1;
        java.lang.String $r2;
        boolean $z0;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPatternFilename(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: byte[] readFile(java.lang.String)>($r2);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(byte[])>(r1);

        if $z0 != 0 goto label1;

        $r3 = new com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        specialinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: void <init>(byte[],int,com.android.server.locksettings.LockSettingsStorage$1)>(r1, 1, null);

        return $r3;

     label1:
        return null;
    }

    private void removeKey(android.database.sqlite.SQLiteDatabase, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0;
        android.content.ContentValues $r3;
        java.lang.Integer $r4;
        java.lang.String[] $r5;
        java.lang.String $r6, r9;
        com.android.server.locksettings.LockSettingsStorage$Cache $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r9 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r9);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user", $r4);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r9;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5[1] = $r6;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", "name=? AND user=?", $r5);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r7 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r7.<com.android.server.locksettings.LockSettingsStorage$Cache: void removeKey(java.lang.String,int)>(r9, i0);

     label2:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void writeFile(java.lang.String, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Throwable $r2, $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r3, $r9, r10, r21;
        byte[] r11;
        java.io.RandomAccessFile r12, r13, r14;
        java.io.File r16, $r17, $r18;
        java.lang.StringBuilder r20, r24, r26, r29;
        com.android.server.locksettings.LockSettingsStorage$Cache $r27;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: byte[];

        r1 = r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.Object mFileWriteLock>;

        entermonitor r1;

        r12 = null;

        r13 = null;

     label01:
        r14 = new java.io.RandomAccessFile;

     label02:
        r12 = null;

        r13 = null;

     label03:
        specialinvoke r14.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r10, "rws");

     label04:
        if r11 == null goto label10;

        r12 = r14;

        r13 = r14;

     label05:
        $i0 = lengthof r11;

        if $i0 != 0 goto label07;

     label06:
        goto label10;

     label07:
        r12 = r14;

        r13 = r14;

     label08:
        $i1 = lengthof r11;

        virtualinvoke r14.<java.io.RandomAccessFile: void write(byte[],int,int)>(r11, 0, $i1);

     label09:
        goto label12;

     label10:
        r12 = r14;

        r13 = r14;

     label11:
        virtualinvoke r14.<java.io.RandomAccessFile: void setLength(long)>(0L);

     label12:
        r12 = r14;

        r13 = r14;

     label13:
        virtualinvoke r14.<java.io.RandomAccessFile: void close()>();

     label14:
        r12 = r14;

        r13 = r14;

     label15:
        r16 = new java.io.File;

     label16:
        r12 = r14;

        r13 = r14;

     label17:
        specialinvoke r16.<java.io.File: void <init>(java.lang.String)>(r10);

     label18:
        r12 = r14;

        r13 = r14;

     label19:
        $r17 = virtualinvoke r16.<java.io.File: java.io.File getAbsoluteFile()>();

        $r18 = virtualinvoke $r17.<java.io.File: java.io.File getParentFile()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void fsyncDirectory(java.io.File)>($r18);

     label20:
        virtualinvoke r14.<java.io.RandomAccessFile: void close()>();

     label21:
        goto label43;

     label22:
        $r4 := @caughtexception;

     label23:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing file ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label24:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsStorage", r21);

     label25:
        goto label43;

     label26:
        $r5 := @caughtexception;

        goto label45;

     label27:
        $r8 := @caughtexception;

        r12 = r13;

     label28:
        r24 = new java.lang.StringBuilder;

     label29:
        r12 = r13;

     label30:
        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

     label31:
        r12 = r13;

     label32:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing to file ");

     label33:
        r12 = r13;

     label34:
        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

     label35:
        r12 = r13;

     label36:
        $r9 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsStorage", $r9);

     label37:
        if r13 == null goto label43;

     label38:
        virtualinvoke r13.<java.io.RandomAccessFile: void close()>();

     label39:
        goto label21;

     label40:
        $r7 := @caughtexception;

     label41:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing file ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        r21 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label42:
        goto label24;

     label43:
        $r27 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r27.<com.android.server.locksettings.LockSettingsStorage$Cache: void putFile(java.lang.String,byte[])>(r10, r11);

        exitmonitor r1;

     label44:
        return;

     label45:
        if r12 == null goto label50;

     label46:
        virtualinvoke r12.<java.io.RandomAccessFile: void close()>();

     label47:
        goto label50;

     label48:
        $r2 := @caughtexception;

     label49:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error closing file ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsStorage", $r3);

     label50:
        throw $r5;

     label51:
        $r6 := @caughtexception;

     label52:
        exitmonitor r1;

     label53:
        throw $r6;

        catch java.io.IOException from label01 to label02 with label27;
        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.io.IOException from label03 to label04 with label27;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.io.IOException from label05 to label06 with label27;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.io.IOException from label08 to label09 with label27;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.io.IOException from label11 to label12 with label27;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.io.IOException from label13 to label14 with label27;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.io.IOException from label15 to label16 with label27;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.io.IOException from label17 to label18 with label27;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.io.IOException from label19 to label20 with label27;
        catch java.lang.Throwable from label19 to label20 with label26;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label20 to label21 with label51;
        catch java.lang.Throwable from label23 to label24 with label51;
        catch java.lang.Throwable from label24 to label25 with label51;
        catch java.lang.Throwable from label28 to label29 with label26;
        catch java.lang.Throwable from label30 to label31 with label26;
        catch java.lang.Throwable from label32 to label33 with label26;
        catch java.lang.Throwable from label34 to label35 with label26;
        catch java.lang.Throwable from label36 to label37 with label26;
        catch java.io.IOException from label38 to label39 with label40;
        catch java.lang.Throwable from label38 to label39 with label51;
        catch java.lang.Throwable from label41 to label42 with label51;
        catch java.lang.Throwable from label43 to label44 with label51;
        catch java.io.IOException from label46 to label47 with label48;
        catch java.lang.Throwable from label46 to label47 with label51;
        catch java.lang.Throwable from label49 to label50 with label51;
        catch java.lang.Throwable from label50 to label51 with label51;
        catch java.lang.Throwable from label52 to label53 with label51;
    }

    void clearCache()
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        com.android.server.locksettings.LockSettingsStorage$Cache $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage$Cache: void clear()>();

        return;
    }

    void closeDatabase()
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: void close()>();

        return;
    }

    public void deleteSyntheticPasswordState(int, long, java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0, $i3;
        long l1, $l2;
        java.io.File $r1;
        boolean $z0;
        byte[] $r2;
        com.android.server.locksettings.LockSettingsStorage$Cache $r3;
        java.lang.Throwable $r4, $r9, $r10;
        java.lang.Exception $r5;
        java.lang.String $r8, r11, r12;
        java.io.RandomAccessFile r14;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r11 := @parameter2: java.lang.String;

        r12 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getSynthenticPasswordStateFilePathForUser(int,long,java.lang.String)>(i0, l1, r11);

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r12);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label17;

     label01:
        r14 = new java.io.RandomAccessFile;

        specialinvoke r14.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r12, "rws");

     label02:
        $l2 = virtualinvoke r14.<java.io.RandomAccessFile: long length()>();

        $i3 = (int) $l2;

        $r2 = newarray (byte)[$i3];

        virtualinvoke r14.<java.io.RandomAccessFile: void write(byte[])>($r2);

     label03:
        virtualinvoke r14.<java.io.RandomAccessFile: void close()>();

     label04:
        virtualinvoke $r1.<java.io.File: boolean delete()>();

        goto label15;

     label05:
        $r9 := @caughtexception;

     label06:
        virtualinvoke r14.<java.io.RandomAccessFile: void close()>();

     label07:
        goto label10;

     label08:
        $r4 := @caughtexception;

     label09:
        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label10:
        throw $r9;

     label11:
        $r10 := @caughtexception;

        goto label16;

     label12:
        $r5 := @caughtexception;

     label13:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to zeroize ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsStorage", $r8, $r5);

     label14:
        goto label04;

     label15:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$Cache: void putFile(java.lang.String,byte[])>(r12, null);

        goto label17;

     label16:
        virtualinvoke $r1.<java.io.File: boolean delete()>();

        throw $r10;

     label17:
        return;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Exception from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.util.Iterator r2;
        int i0, $i1, $i2, i5;
        android.content.Context $r3;
        android.os.UserManager $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.Object[] $r7, $r13;
        java.lang.Integer $r8;
        java.lang.String $r9, $r10, $r15, $r16, $r17;
        long $l3, $l4;
        java.lang.Long $r14;
        android.content.pm.UserInfo r18;
        java.io.File r19, r21;
        java.io.File[] r20;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        $r5 = virtualinvoke $r4.<android.os.UserManager: java.util.List getUsers(boolean)>(0);

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (android.content.pm.UserInfo) $r6;

        $i1 = r18.<android.content.pm.UserInfo: int id>;

        r19 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.io.File getSyntheticPasswordDirectoryForUser(int)>($i1);

        $r7 = newarray (java.lang.Object)[2];

        $i2 = r18.<android.content.pm.UserInfo: int id>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r7[0] = $r8;

        $r9 = virtualinvoke r19.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("User %d [%s]:", $r7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r10);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r20 = virtualinvoke r19.<java.io.File: java.io.File[] listFiles()>();

        if r20 == null goto label3;

        i0 = lengthof r20;

        i5 = 0;

     label2:
        if i5 >= i0 goto label4;

        r21 = r20[i5];

        $r13 = newarray (java.lang.Object)[3];

        $l3 = virtualinvoke r21.<java.io.File: long length()>();

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r13[0] = $r14;

        $l4 = virtualinvoke r21.<java.io.File: long lastModified()>();

        $r15 = staticinvoke <com.android.server.locksettings.LockSettingsService: java.lang.String timestampToString(long)>($l4);

        $r13[1] = $r15;

        $r16 = virtualinvoke r21.<java.io.File: java.lang.String getName()>();

        $r13[2] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%4d %s %s", $r13);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r17);

        i5 = i5 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("[Not found]");

     label4:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label1;

     label5:
        return;
    }

    public boolean getBoolean(java.lang.String, boolean, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        boolean $z0, $z1, $z2, z3;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        z3 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, null, i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        goto label4;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

        goto label4;

     label3:
        z3 = 1;

     label4:
        return z3;
    }

    java.lang.String getChildProfileLockFile(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockCredentialFilePathForUser(int,java.lang.String)>(i0, "gatekeeper.profile.key");

        return $r1;
    }

    public int getInt(java.lang.String, int, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0, i1;
        boolean $z0;
        java.lang.String r1, r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, null, i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        return i1;
    }

    java.lang.String getLockPasswordFilename(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockCredentialFilePathForUser(int,java.lang.String)>(i0, "gatekeeper.password.key");

        return $r1;
    }

    java.lang.String getLockPatternFilename(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockCredentialFilePathForUser(int,java.lang.String)>(i0, "gatekeeper.pattern.key");

        return $r1;
    }

    public long getLong(java.lang.String, long, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        boolean $z0;
        java.lang.String r1, r2;
        long l1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        l1 := @parameter1: long;

        i0 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getString(java.lang.String,java.lang.String,int)>(r1, null, i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label2:
        return l1;
    }

    com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlockManager()
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        com.android.server.PersistentDataBlockManagerInternal $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/PersistentDataBlockManagerInternal;");

        $r4 = (com.android.server.PersistentDataBlockManagerInternal) $r3;

        r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal> = $r4;

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.PersistentDataBlockManagerInternal mPersistentDataBlockManagerInternal>;

        return $r2;
    }

    java.lang.String getRebootEscrowFile(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockCredentialFilePathForUser(int,java.lang.String)>(i0, "reboot.escrow.key");

        return $r1;
    }

    public java.lang.String getString(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, r2, $r3, $r4, r5;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 != -9999 goto label1;

        return null;

     label1:
        r5 = r1;

        $r3 = "legacy_lock_pattern_enabled";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        r5 = "lock_pattern_autolock";

     label2:
        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String readKeyValue(java.lang.String,java.lang.String,int)>(r5, r2, i0);

        return $r4;
    }

    protected java.lang.String getSynthenticPasswordStateFilePathForUser(int, long, java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        long l1;
        java.lang.String r1, $r6, $r7;
        java.io.File $r2, $r3;
        java.lang.Object[] $r4;
        java.lang.Long $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.lang.String;

        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.io.File getSyntheticPasswordDirectoryForUser(int)>(i0);

        $r4 = newarray (java.lang.Object)[2];

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r4[0] = $r5;

        $r4[1] = r1;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%016x.%s", $r4);

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r6);

        $r7 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r7;
    }

    protected java.io.File getSyntheticPasswordDirectoryForUser(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataSystemDeDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "spblob/");

        return $r1;
    }

    public boolean hasChildProfileLock(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getChildProfileLockFile(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: boolean hasFile(java.lang.String)>($r1);

        return $z0;
    }

    public boolean hasPassword(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPasswordFilename(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: boolean hasFile(java.lang.String)>($r1);

        return $z0;
    }

    public boolean hasPattern(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPatternFilename(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: boolean hasFile(java.lang.String)>($r1);

        return $z0;
    }

    public boolean hasRebootEscrow(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getRebootEscrowFile(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: boolean hasFile(java.lang.String)>($r1);

        return $z0;
    }

    public java.util.Map listSyntheticPasswordHandlesForAllUsers(java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        android.util.ArrayMap $r5;
        android.content.Context $r6;
        android.os.UserManager $r7;
        java.util.List $r8, $r11;
        boolean $z0;
        java.lang.Object $r9;
        int $i0, $i1;
        java.lang.Integer $r10;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        $r6 = r0.<com.android.server.locksettings.LockSettingsStorage: android.content.Context mContext>;

        $r7 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r6);

        $r8 = virtualinvoke $r7.<android.os.UserManager: java.util.List getUsers(boolean)>(0);

        r3 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r9;

        $i0 = r4.<android.content.pm.UserInfo: int id>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $i1 = r4.<android.content.pm.UserInfo: int id>;

        $r11 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.util.List listSyntheticPasswordHandlesForUser(java.lang.String,int)>(r1, $i1);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        goto label1;

     label2:
        return $r5;
    }

    public java.util.List listSyntheticPasswordHandlesForUser(java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, $r6, $r7, $r8, $r13, $r15;
        int i0, $i1, i4, i5;
        java.lang.String[] r3;
        java.util.ArrayList $r4;
        java.io.File $r5, r16;
        boolean $z0;
        long $l2;
        java.lang.Long $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder $r11;
        java.io.File[] r17;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        r16 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.io.File getSyntheticPasswordDirectoryForUser(int)>(i4);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r17 = virtualinvoke r16.<java.io.File: java.io.File[] listFiles()>();

        if r17 != null goto label1;

        return $r4;

     label1:
        i0 = lengthof r17;

        i5 = 0;

     label2:
        if i5 >= i0 goto label7;

        $r5 = r17[i5];

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getName()>();

        r3 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i1 = lengthof r3;

        if $i1 != 2 goto label6;

        $r7 = r3[1];

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

     label3:
        $r8 = r3[0];

        $l2 = staticinvoke <java.lang.Long: long parseUnsignedLong(java.lang.String,int)>($r8, 16);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse handle ");

        $r13 = r3[0];

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("LockSettingsStorage", $r15);

     label6:
        i5 = i5 + 1;

        goto label2;

     label7:
        return $r4;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public void prefetchUser(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0, i1;
        java.lang.String r1, $r9, r15;
        com.android.server.locksettings.LockSettingsStorage$Cache $r2, $r3, $r4, $r11, r13;
        boolean $z0, $z1;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.String[] $r7, $r8;
        java.lang.Throwable $r12;
        android.database.Cursor r14;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        r13 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        entermonitor r13;

     label01:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        $z0 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean isFetched(int)>(i0);

        if $z0 == 0 goto label03;

        exitmonitor r13;

     label02:
        return;

     label03:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$Cache: void setFetched(int)>(i0);

        $r4 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        i1 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$Cache: int access$100(com.android.server.locksettings.LockSettingsStorage$Cache)>($r4);

        exitmonitor r13;

     label04:
        $r5 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        $r6 = virtualinvoke $r5.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r8 = <com.android.server.locksettings.LockSettingsStorage: java.lang.String[] COLUMNS_FOR_PREFETCH>;

        $r7 = newarray (java.lang.String)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r7[0] = $r9;

        r14 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("locksettings", $r8, "user=?", $r7, null, null, null);

        if r14 == null goto label07;

     label05:
        $z1 = interfaceinvoke r14.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label06;

        r1 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>(0);

        r15 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r11 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r11.<com.android.server.locksettings.LockSettingsStorage$Cache: void putKeyValueIfUnchanged(java.lang.String,java.lang.Object,int,int)>(r1, r15, i0, i1);

        goto label05;

     label06:
        interfaceinvoke r14.<android.database.Cursor: void close()>();

     label07:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$CredentialHash readCredentialHash(int)>(i0);

        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r13;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public byte[] readChildProfileLock(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getChildProfileLockFile(int)>(i0);

        $r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: byte[] readFile(java.lang.String)>($r1);

        return $r2;
    }

    public com.android.server.locksettings.LockSettingsStorage$CredentialHash readCredentialHash(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash $r1, r2, r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$CredentialHash readPasswordHashIfExists(int)>(i0);

        if r2 == null goto label1;

        return r2;

     label1:
        r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$CredentialHash readPatternHashIfExists(int)>(i0);

        if r3 == null goto label2;

        return r3;

     label2:
        $r1 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$CredentialHash: com.android.server.locksettings.LockSettingsStorage$CredentialHash createEmptyHash()>();

        return $r1;
    }

    public java.lang.String readKeyValue(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, $r9, r12, r14, r19;
        int i0, i1;
        android.database.Cursor r2;
        com.android.server.locksettings.LockSettingsStorage$Cache $r3, $r4, $r10, r13, $r17;
        boolean $z0, $z1;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.String[] $r7, $r8;
        java.lang.Throwable $r11;
        java.lang.Object r15, r16, $r18;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r13 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        entermonitor r13;

     label01:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        $z0 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$Cache: boolean hasKeyValue(java.lang.String,int)>(r12, i0);

        if $z0 == 0 goto label03;

        $r10 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        r14 = virtualinvoke $r10.<com.android.server.locksettings.LockSettingsStorage$Cache: java.lang.String peekKeyValue(java.lang.String,java.lang.String,int)>(r12, r1, i0);

        exitmonitor r13;

     label02:
        return r14;

     label03:
        $r4 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        i1 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$Cache: int access$100(com.android.server.locksettings.LockSettingsStorage$Cache)>($r4);

        exitmonitor r13;

     label04:
        r15 = <com.android.server.locksettings.LockSettingsStorage: java.lang.Object DEFAULT>;

        $r5 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        $r6 = virtualinvoke $r5.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r8 = <com.android.server.locksettings.LockSettingsStorage: java.lang.String[] COLUMNS_FOR_QUERY>;

        $r7 = newarray (java.lang.String)[2];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r7[0] = $r9;

        $r7[1] = r12;

        r2 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("locksettings", $r8, "user=? AND name=?", $r7, null, null, null);

        r16 = r15;

        if r2 == null goto label06;

        $z1 = interfaceinvoke r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z1 == 0 goto label05;

        r15 = interfaceinvoke r2.<android.database.Cursor: java.lang.String getString(int)>(0);

     label05:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        r16 = r15;

     label06:
        $r17 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r17.<com.android.server.locksettings.LockSettingsStorage$Cache: void putKeyValueIfUnchanged(java.lang.String,java.lang.Object,int,int)>(r12, r16, i0, i1);

        $r18 = <com.android.server.locksettings.LockSettingsStorage: java.lang.Object DEFAULT>;

        if r16 != $r18 goto label07;

        r19 = r1;

        goto label08;

     label07:
        r19 = (java.lang.String) r16;

     label08:
        return r19;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r13;

     label11:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public com.android.server.locksettings.LockSettingsStorage$PersistentData readPersistentDataBlock()
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        byte[] $r1;
        com.android.server.locksettings.LockSettingsStorage$PersistentData $r2, $r4, r6;
        java.lang.Throwable $r3;
        com.android.server.PersistentDataBlockManagerInternal r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r5 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlockManager()>();

        if r5 != null goto label1;

        $r2 = <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE>;

        return $r2;

     label1:
        $r1 = interfaceinvoke r5.<com.android.server.PersistentDataBlockManagerInternal: byte[] getFrpCredentialHandle()>();

        r6 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData fromBytes(byte[])>($r1);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettingsStorage", "Error reading persistent data block", $r3);

        $r4 = <com.android.server.locksettings.LockSettingsStorage$PersistentData: com.android.server.locksettings.LockSettingsStorage$PersistentData NONE>;

        return $r4;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public byte[] readRebootEscrow(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;
        byte[] $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getRebootEscrowFile(int)>(i0);

        $r2 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: byte[] readFile(java.lang.String)>($r1);

        return $r2;
    }

    public byte[] readSyntheticPasswordState(int, long, java.lang.String)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        long l1;
        java.lang.String r1, $r2;
        byte[] $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getSynthenticPasswordStateFilePathForUser(int,long,java.lang.String)>(i0, l1, r1);

        $r3 = specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: byte[] readFile(java.lang.String)>($r2);

        return $r3;
    }

    public void removeChildProfileLock(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r2;
        java.lang.Exception $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getChildProfileLockFile(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void deleteFile(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void removeKey(java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1;
        int i0;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        $r3 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void removeKey(android.database.sqlite.SQLiteDatabase,java.lang.String,int)>($r3, r1, i0);

        return;
    }

    public void removeRebootEscrow(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getRebootEscrowFile(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void deleteFile(java.lang.String)>($r1);

        return;
    }

    public void removeUser(int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        java.lang.StringBuilder r1;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r2;
        android.content.Context $r3;
        java.lang.Object $r4, r21;
        android.os.UserManager $r5;
        android.content.pm.UserInfo $r6;
        java.lang.String $r10, $r13, $r15, $r16, $r17;
        com.android.server.locksettings.LockSettingsStorage$Cache $r11, $r12;
        java.lang.String[] $r14;
        java.lang.Throwable $r18, $r19;
        android.database.sqlite.SQLiteDatabase r20;
        java.io.File r23;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        r20 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r5 = (android.os.UserManager) $r4;

        $r6 = virtualinvoke $r5.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if $r6 != null goto label06;

        r21 = r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.Object mFileWriteLock>;

        entermonitor r21;

     label01:
        $r14 = newarray (java.lang.String)[3];

        $r15 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPasswordFilename(int)>(i0);

        $r14[0] = $r15;

        $r16 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPatternFilename(int)>(i0);

        $r14[1] = $r16;

        $r17 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getRebootEscrowFile(int)>(i0);

        $r14[2] = $r17;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void deleteFilesAndRemoveCache(java.lang.String[])>($r14);

        exitmonitor r21;

     label02:
        goto label07;

     label03:
        $r19 := @caughtexception;

     label04:
        exitmonitor r21;

     label05:
        throw $r19;

     label06:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void removeChildProfileLock(int)>(i0);

     label07:
        r23 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.io.File getSyntheticPasswordDirectoryForUser(int)>(i0);

     label08:
        virtualinvoke r20.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user=\'");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r20.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", $r10, null);

        virtualinvoke r20.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r11 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r11.<com.android.server.locksettings.LockSettingsStorage$Cache: void removeUser(int)>(i0);

        $r12 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        $r13 = virtualinvoke r23.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r12.<com.android.server.locksettings.LockSettingsStorage$Cache: void purgePath(java.lang.String)>($r13);

     label09:
        virtualinvoke r20.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label10:
        $r18 := @caughtexception;

        virtualinvoke r20.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void setBoolean(java.lang.String, boolean, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, r2;
        boolean z0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 == 0 goto label1;

        r2 = "1";

        goto label2;

     label1:
        r2 = "0";

     label2:
        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void setString(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    public void setDatabaseOnCreateCallback(com.android.server.locksettings.LockSettingsStorage$Callback)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        com.android.server.locksettings.LockSettingsStorage$Callback r1;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: com.android.server.locksettings.LockSettingsStorage$Callback;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: void setCallback(com.android.server.locksettings.LockSettingsStorage$Callback)>(r1);

        return;
    }

    public void setInt(java.lang.String, int, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, $r2;
        int i0, i1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void setString(java.lang.String,java.lang.String,int)>(r1, $r2, i1);

        return;
    }

    public void setLong(java.lang.String, long, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, $r2;
        long l0;
        int i1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void setString(java.lang.String,java.lang.String,int)>(r1, $r2, i1);

        return;
    }

    public void setString(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, r2;
        int i0;
        java.lang.String[] $r3;
        boolean $z0, z1;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 == -9999 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z1, "cannot store lock settings for FRP user");

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        $r3 = <com.android.server.locksettings.LockSettingsStorage: java.lang.String[] SETTINGS_TO_BACKUP>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r3, r1);

        if $z0 == 0 goto label3;

        staticinvoke <android.app.backup.BackupManager: void dataChanged(java.lang.String)>("com.android.providers.settings");

     label3:
        return;
    }

    public void writeChildProfileLock(int, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getChildProfileLockFile(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeFile(java.lang.String,byte[])>($r2, r1);

        return;
    }

    public void writeCredentialHash(com.android.server.locksettings.LockSettingsStorage$CredentialHash, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.locksettings.LockSettingsStorage$CredentialHash r1;
        byte[] r2, r3;
        boolean z0;
        java.lang.String $r4, $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: com.android.server.locksettings.LockSettingsStorage$CredentialHash;

        i0 := @parameter1: int;

        r2 = null;

        $i2 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        if $i2 == 2 goto label5;

        $i3 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        if $i3 == 4 goto label5;

        $i4 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        if $i4 != 3 goto label1;

        goto label5;

     label1:
        i1 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        z0 = 1;

        if i1 != 1 goto label2;

        r3 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        goto label6;

     label2:
        $i5 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: int type>;

        if $i5 != -1 goto label3;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z0, "Unknown credential type");

        r3 = null;

        goto label6;

     label5:
        r2 = r1.<com.android.server.locksettings.LockSettingsStorage$CredentialHash: byte[] hash>;

        r3 = null;

     label6:
        $r4 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPasswordFilename(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeFile(java.lang.String,byte[])>($r4, r2);

        $r5 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getLockPatternFilename(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeFile(java.lang.String,byte[])>($r5, r3);

        return;
    }

    public void writeKeyValue(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, $r7, r10;
        int i0;
        android.content.ContentValues $r4;
        java.lang.Integer $r5;
        java.lang.String[] $r6;
        com.android.server.locksettings.LockSettingsStorage$Cache $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r10 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", r10);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user", $r5);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", r2);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        $r6 = newarray (java.lang.String)[2];

        $r6[0] = r10;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r6[1] = $r7;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("locksettings", "name=? AND user=?", $r6);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("locksettings", null, $r4);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r8 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$Cache mCache>;

        virtualinvoke $r8.<com.android.server.locksettings.LockSettingsStorage$Cache: void putKeyValue(java.lang.String,java.lang.String,int)>(r10, r2, i0);

     label2:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label3:
        $r9 := @caughtexception;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void writeKeyValue(java.lang.String, java.lang.String, int)
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.locksettings.LockSettingsStorage$DatabaseHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.locksettings.LockSettingsStorage$DatabaseHelper mOpenHelper>;

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.LockSettingsStorage$DatabaseHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeKeyValue(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,int)>($r4, r1, r2, i0);

        return;
    }

    public void writePersistentDataBlock(int, int, int, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0, i1, i2;
        byte[] r1, $r3;
        com.android.server.PersistentDataBlockManagerInternal r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: byte[];

        r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: com.android.server.PersistentDataBlockManagerInternal getPersistentDataBlockManager()>();

        if r2 != null goto label1;

        return;

     label1:
        $r3 = staticinvoke <com.android.server.locksettings.LockSettingsStorage$PersistentData: byte[] toBytes(int,int,int,byte[])>(i0, i1, i2, r1);

        interfaceinvoke r2.<com.android.server.PersistentDataBlockManagerInternal: void setFrpCredentialHandle(byte[])>($r3);

        return;
    }

    public void writeRebootEscrow(int, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        byte[] r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getRebootEscrowFile(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeFile(java.lang.String,byte[])>($r2, r1);

        return;
    }

    public void writeSyntheticPasswordState(int, long, java.lang.String, byte[])
    {
        com.android.server.locksettings.LockSettingsStorage r0;
        int i0;
        long l1;
        java.lang.String r1, $r3;
        byte[] r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStorage;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: byte[];

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void ensureSyntheticPasswordDirectoryForUser(int)>(i0);

        $r3 = virtualinvoke r0.<com.android.server.locksettings.LockSettingsStorage: java.lang.String getSynthenticPasswordStateFilePathForUser(int,long,java.lang.String)>(i0, l1, r1);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStorage: void writeFile(java.lang.String,byte[])>($r3, r2);

        return;
    }
}
