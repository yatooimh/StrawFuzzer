public class com.android.server.locksettings.LockSettingsStrongAuth extends java.lang.Object
{
    private static final boolean DEBUG;
    public static final long DEFAULT_NON_STRONG_BIOMETRIC_IDLE_TIMEOUT_MS;
    public static final long DEFAULT_NON_STRONG_BIOMETRIC_TIMEOUT_MS;
    private static final int MSG_NO_LONGER_REQUIRE_STRONG_AUTH;
    private static final int MSG_REFRESH_STRONG_AUTH_TIMEOUT;
    private static final int MSG_REGISTER_TRACKER;
    private static final int MSG_REMOVE_USER;
    private static final int MSG_REQUIRE_STRONG_AUTH;
    private static final int MSG_SCHEDULE_NON_STRONG_BIOMETRIC_IDLE_TIMEOUT;
    private static final int MSG_SCHEDULE_NON_STRONG_BIOMETRIC_TIMEOUT;
    private static final int MSG_SCHEDULE_STRONG_AUTH_TIMEOUT;
    private static final int MSG_STRONG_BIOMETRIC_UNLOCK;
    private static final int MSG_UNREGISTER_TRACKER;
    protected static final java.lang.String NON_STRONG_BIOMETRIC_IDLE_TIMEOUT_ALARM_TAG;
    protected static final java.lang.String NON_STRONG_BIOMETRIC_TIMEOUT_ALARM_TAG;
    protected static final java.lang.String STRONG_AUTH_TIMEOUT_ALARM_TAG;
    private static final java.lang.String TAG;
    private final android.app.AlarmManager mAlarmManager;
    private final android.content.Context mContext;
    private final boolean mDefaultIsNonStrongBiometricAllowed;
    private final int mDefaultStrongAuthFlags;
    protected final android.os.Handler mHandler;
    private final com.android.server.locksettings.LockSettingsStrongAuth$Injector mInjector;
    protected final android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser;
    protected final android.util.ArrayMap mNonStrongBiometricIdleTimeoutAlarmListener;
    protected final android.util.ArrayMap mNonStrongBiometricTimeoutAlarmListener;
    protected final android.util.SparseIntArray mStrongAuthForUser;
    protected final android.util.ArrayMap mStrongAuthTimeoutAlarmListenerForUser;
    private final android.os.RemoteCallbackList mTrackers;

    public void <init>(android.content.Context)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.content.Context r1;
        com.android.server.locksettings.LockSettingsStrongAuth$Injector $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.locksettings.LockSettingsStrongAuth$Injector;

        specialinvoke $r2.<com.android.server.locksettings.LockSettingsStrongAuth$Injector: void <init>()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void <init>(android.content.Context,com.android.server.locksettings.LockSettingsStrongAuth$Injector)>(r1, $r2);

        return;
    }

    protected void <init>(android.content.Context, com.android.server.locksettings.LockSettingsStrongAuth$Injector)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.content.Context r1;
        com.android.server.locksettings.LockSettingsStrongAuth$Injector r2, $r11;
        android.os.RemoteCallbackList $r3;
        android.util.SparseIntArray $r4;
        android.util.SparseBooleanArray $r5;
        android.util.ArrayMap $r6, $r7, $r8;
        com.android.server.locksettings.LockSettingsStrongAuth$1 $r9;
        android.os.Looper $r10;
        int $i0;
        android.app.AlarmManager $r12;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.locksettings.LockSettingsStrongAuth$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.os.RemoteCallbackList;

        specialinvoke $r3.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser> = $r4;

        $r5 = new android.util.SparseBooleanArray;

        specialinvoke $r5.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mStrongAuthTimeoutAlarmListenerForUser> = $r6;

        $r7 = new android.util.ArrayMap;

        specialinvoke $r7.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricTimeoutAlarmListener> = $r7;

        $r8 = new android.util.ArrayMap;

        specialinvoke $r8.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricIdleTimeoutAlarmListener> = $r8;

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: boolean mDefaultIsNonStrongBiometricAllowed> = 1;

        $r9 = new com.android.server.locksettings.LockSettingsStrongAuth$1;

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r9.<com.android.server.locksettings.LockSettingsStrongAuth$1: void <init>(com.android.server.locksettings.LockSettingsStrongAuth,android.os.Looper)>(r0, $r10);

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler> = $r9;

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.content.Context mContext> = r1;

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: com.android.server.locksettings.LockSettingsStrongAuth$Injector mInjector> = r2;

        $i0 = virtualinvoke r2.<com.android.server.locksettings.LockSettingsStrongAuth$Injector: int getDefaultStrongAuthFlags(android.content.Context)>(r1);

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: int mDefaultStrongAuthFlags> = $i0;

        $r11 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: com.android.server.locksettings.LockSettingsStrongAuth$Injector mInjector>;

        $r12 = virtualinvoke $r11.<com.android.server.locksettings.LockSettingsStrongAuth$Injector: android.app.AlarmManager getAlarmManager(android.content.Context)>(r1);

        r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager> = $r12;

        return;
    }

    static void access$000(com.android.server.locksettings.LockSettingsStrongAuth, android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.app.trust.IStrongAuthTracker r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter1: android.app.trust.IStrongAuthTracker;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleAddStrongAuthTracker(android.app.trust.IStrongAuthTracker)>(r1);

        return;
    }

    static void access$100(com.android.server.locksettings.LockSettingsStrongAuth, android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.app.trust.IStrongAuthTracker r1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter1: android.app.trust.IStrongAuthTracker;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleRemoveStrongAuthTracker(android.app.trust.IStrongAuthTracker)>(r1);

        return;
    }

    static void access$200(com.android.server.locksettings.LockSettingsStrongAuth, int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleRequireStrongAuth(int,int)>(i0, i1);

        return;
    }

    static void access$300(com.android.server.locksettings.LockSettingsStrongAuth, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleRemoveUser(int)>(i0);

        return;
    }

    static void access$400(com.android.server.locksettings.LockSettingsStrongAuth, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleScheduleStrongAuthTimeout(int)>(i0);

        return;
    }

    static void access$500(com.android.server.locksettings.LockSettingsStrongAuth, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleRefreshStrongAuthTimeout(int)>(i0);

        return;
    }

    static void access$600(com.android.server.locksettings.LockSettingsStrongAuth, int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleNoLongerRequireStrongAuth(int,int)>(i0, i1);

        return;
    }

    static void access$700(com.android.server.locksettings.LockSettingsStrongAuth, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleScheduleNonStrongBiometricTimeout(int)>(i0);

        return;
    }

    static void access$800(com.android.server.locksettings.LockSettingsStrongAuth, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleStrongBiometricUnlock(int)>(i0);

        return;
    }

    static void access$900(com.android.server.locksettings.LockSettingsStrongAuth, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @parameter0: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleScheduleNonStrongBiometricIdleTimeout(int)>(i0);

        return;
    }

    private void cancelNonStrongBiometricAlarmListener(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricTimeoutAlarmListener r1;
        android.util.ArrayMap $r2, $r6;
        java.lang.Integer $r3, $r7;
        java.lang.Object $r4;
        android.app.AlarmManager $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricTimeoutAlarmListener>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricTimeoutAlarmListener) $r4;

        if r1 == null goto label1;

        $r5 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r5.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>(r1);

        $r6 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricTimeoutAlarmListener>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r7);

     label1:
        return;
    }

    private void cancelNonStrongBiometricIdleAlarmListener(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricIdleTimeoutAlarmListener r1;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        android.app.AlarmManager $r5;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricIdleTimeoutAlarmListener>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricIdleTimeoutAlarmListener) $r4;

        if r1 == null goto label1;

        $r5 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r5.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>(r1);

     label1:
        return;
    }

    private void handleAddStrongAuthTracker(android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.app.trust.IStrongAuthTracker r1;
        int i0, $i1, $i2, i5, i6, i7, i8;
        boolean z0;
        android.os.RemoteCallbackList $r2;
        android.util.SparseIntArray $r3, $r7, $r8;
        android.util.SparseBooleanArray $r4, $r5, $r6;
        android.os.RemoteException $r9, $r10;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: android.app.trust.IStrongAuthTracker;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        i5 = 0;

     label01:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i1 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        if i5 >= $i1 goto label06;

        $r7 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        i6 = virtualinvoke $r7.<android.util.SparseIntArray: int keyAt(int)>(i5);

        $r8 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        i0 = virtualinvoke $r8.<android.util.SparseIntArray: int valueAt(int)>(i5);

     label02:
        interfaceinvoke r1.<android.app.trust.IStrongAuthTracker: void onStrongAuthRequiredChanged(int,int)>(i0, i6);

     label03:
        goto label05;

     label04:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettings", "Exception while adding StrongAuthTracker.", $r10);

     label05:
        i5 = i5 + 1;

        goto label01;

     label06:
        i7 = 0;

     label07:
        $r4 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        $i2 = virtualinvoke $r4.<android.util.SparseBooleanArray: int size()>();

        if i7 >= $i2 goto label12;

        $r5 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        i8 = virtualinvoke $r5.<android.util.SparseBooleanArray: int keyAt(int)>(i7);

        $r6 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        z0 = virtualinvoke $r6.<android.util.SparseBooleanArray: boolean valueAt(int)>(i7);

     label08:
        interfaceinvoke r1.<android.app.trust.IStrongAuthTracker: void onIsNonStrongBiometricAllowedChanged(boolean,int)>(z0, i8);

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettings", "Exception while adding StrongAuthTracker: IsNonStrongBiometricAllowedChanged.", $r9);

     label11:
        i7 = i7 + 1;

        goto label07;

     label12:
        return;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    private void handleNoLongerRequireStrongAuth(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, $i1, $i2, i3, i4;
        android.util.SparseIntArray $r1, $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        if i3 != -1 goto label3;

        i4 = 0;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int size()>();

        if i4 >= $i1 goto label2;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i2 = virtualinvoke $r2.<android.util.SparseIntArray: int keyAt(int)>(i4);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleNoLongerRequireStrongAuthOneUser(int,int)>(i0, $i2);

        i4 = i4 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleNoLongerRequireStrongAuthOneUser(int,int)>(i0, i3);

     label4:
        return;
    }

    private void handleNoLongerRequireStrongAuthOneUser(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1, $i2, i3, i4;
        android.util.SparseIntArray $r1, $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: int mDefaultStrongAuthFlags>;

        i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, $i2);

        i4 = i3 & i1;

        if i1 == i4 goto label1;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, i4);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void notifyStrongAuthTrackers(int,int)>(i4, i0);

     label1:
        return;
    }

    private void handleRefreshStrongAuthTimeout(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener r1;
        android.util.ArrayMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        long $l1;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mStrongAuthTimeoutAlarmListenerForUser>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener) $r4;

        if r1 == null goto label1;

        $l1 = virtualinvoke r1.<com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener: long getLatestStrongAuthTime()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void rescheduleStrongAuthTimeoutAlarm(long,int)>($l1, i0);

     label1:
        return;
    }

    private void handleRemoveStrongAuthTracker(android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.app.trust.IStrongAuthTracker r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: android.app.trust.IStrongAuthTracker;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    private void handleRemoveUser(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, $i1, i2, i3;
        android.util.SparseIntArray $r1, $r4;
        android.util.SparseBooleanArray $r2, $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        i2 = virtualinvoke $r1.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if i2 < 0 goto label1;

        $r4 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        virtualinvoke $r4.<android.util.SparseIntArray: void removeAt(int)>(i2);

        $i1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: int mDefaultStrongAuthFlags>;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void notifyStrongAuthTrackers(int,int)>($i1, i0);

     label1:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        i3 = virtualinvoke $r2.<android.util.SparseBooleanArray: int indexOfKey(int)>(i0);

        if i3 < 0 goto label2;

        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void removeAt(int)>(i3);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void notifyStrongAuthTrackersForIsNonStrongBiometricAllowed(boolean,int)>(1, i0);

     label2:
        return;
    }

    private void handleRequireStrongAuth(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, $i1, $i2, i3, i4;
        android.util.SparseIntArray $r1, $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        if i3 != -1 goto label3;

        i4 = 0;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int size()>();

        if i4 >= $i1 goto label2;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i2 = virtualinvoke $r2.<android.util.SparseIntArray: int keyAt(int)>(i4);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleRequireStrongAuthOneUser(int,int)>(i0, $i2);

        i4 = i4 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void handleRequireStrongAuthOneUser(int,int)>(i0, i3);

     label4:
        return;
    }

    private void handleRequireStrongAuthOneUser(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1, $i2, i3, i4;
        android.util.SparseIntArray $r1, $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: int mDefaultStrongAuthFlags>;

        i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, $i2);

        if i3 != 0 goto label1;

        i4 = 0;

        goto label2;

     label1:
        i4 = i1 | i3;

     label2:
        if i1 == i4 goto label3;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, i4);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void notifyStrongAuthTrackers(int,int)>(i4, i0);

     label3:
        return;
    }

    private void handleScheduleNonStrongBiometricIdleTimeout(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        long l1;
        com.android.server.locksettings.LockSettingsStrongAuth$Injector $r1;
        android.util.ArrayMap $r2, $r6;
        java.lang.Integer $r3, $r7;
        java.lang.Object $r4;
        com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricIdleTimeoutAlarmListener $r5, r12;
        android.os.Handler $r9;
        android.app.AlarmManager $r10, $r11;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: com.android.server.locksettings.LockSettingsStrongAuth$Injector mInjector>;

        l1 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth$Injector: long getNextAlarmTimeMs(long)>(14400000L);

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricIdleTimeoutAlarmListener>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r12 = (com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricIdleTimeoutAlarmListener) $r4;

        if r12 == null goto label1;

        $r11 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r11.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>(r12);

        goto label2;

     label1:
        $r5 = new com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricIdleTimeoutAlarmListener;

        specialinvoke $r5.<com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricIdleTimeoutAlarmListener: void <init>(com.android.server.locksettings.LockSettingsStrongAuth,int)>(r0, i0);

        r12 = $r5;

        $r6 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricIdleTimeoutAlarmListener>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r5);

     label2:
        $r10 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        $r9 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        virtualinvoke $r10.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(3, l1, "LockSettingsPrimaryAuth.nonStrongBiometricIdleTimeoutForUser", r12, $r9);

        return;
    }

    private void handleScheduleNonStrongBiometricTimeout(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        long l1;
        com.android.server.locksettings.LockSettingsStrongAuth$Injector $r2;
        android.util.ArrayMap $r3, $r8;
        java.lang.Integer $r4, $r9;
        java.lang.Object $r5;
        com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricTimeoutAlarmListener $r6, $r7;
        android.os.Handler $r11;
        android.app.AlarmManager $r12;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: com.android.server.locksettings.LockSettingsStrongAuth$Injector mInjector>;

        l1 = virtualinvoke $r2.<com.android.server.locksettings.LockSettingsStrongAuth$Injector: long getNextAlarmTimeMs(long)>(86400000L);

        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricTimeoutAlarmListener>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricTimeoutAlarmListener) $r5;

        if $r6 == null goto label1;

        goto label2;

     label1:
        $r7 = new com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricTimeoutAlarmListener;

        specialinvoke $r7.<com.android.server.locksettings.LockSettingsStrongAuth$NonStrongBiometricTimeoutAlarmListener: void <init>(com.android.server.locksettings.LockSettingsStrongAuth,int)>(r0, i0);

        $r8 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mNonStrongBiometricTimeoutAlarmListener>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

        $r12 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        $r11 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        virtualinvoke $r12.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(3, l1, "LockSettingsPrimaryAuth.nonStrongBiometricTimeoutForUser", $r7, $r11);

     label2:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void cancelNonStrongBiometricIdleAlarmListener(int)>(i0);

        return;
    }

    private void handleScheduleStrongAuthTimeout(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        com.android.server.locksettings.LockSettingsStrongAuth$Injector $r1;
        long $l1;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: com.android.server.locksettings.LockSettingsStrongAuth$Injector mInjector>;

        $l1 = virtualinvoke $r1.<com.android.server.locksettings.LockSettingsStrongAuth$Injector: long getElapsedRealtimeMs()>();

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void rescheduleStrongAuthTimeoutAlarm(long,int)>($l1, i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void cancelNonStrongBiometricAlarmListener(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void cancelNonStrongBiometricIdleAlarmListener(int)>(i0);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void setIsNonStrongBiometricAllowed(boolean,int)>(1, i0);

        return;
    }

    private void handleStrongBiometricUnlock(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void cancelNonStrongBiometricAlarmListener(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void cancelNonStrongBiometricIdleAlarmListener(int)>(i0);

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void setIsNonStrongBiometricAllowed(boolean,int)>(1, i0);

        return;
    }

    private void notifyStrongAuthTrackers(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1, i3;
        android.os.RemoteCallbackList $r1, $r2, $r3, $r8;
        android.os.IInterface $r4;
        android.app.trust.IStrongAuthTracker $r5;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        i3 = virtualinvoke $r1.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label1:
        if i3 <= 0 goto label9;

        i3 = i3 + -1;

     label2:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        $r4 = virtualinvoke $r3.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i3);

        $r5 = (android.app.trust.IStrongAuthTracker) $r4;

        interfaceinvoke $r5.<android.app.trust.IStrongAuthTracker: void onStrongAuthRequiredChanged(int,int)>(i0, i1);

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettings", "Exception while notifying StrongAuthTracker.", $r6);

     label7:
        goto label1;

     label8:
        $r8 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        virtualinvoke $r8.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw $r7;

     label9:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: void finishBroadcast()>();

        return;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    private void notifyStrongAuthTrackersForIsNonStrongBiometricAllowed(boolean, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        boolean z0;
        int i0, i2;
        android.os.RemoteCallbackList $r1, $r2, $r3, $r7;
        android.os.IInterface $r4;
        android.app.trust.IStrongAuthTracker $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        i2 = virtualinvoke $r1.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label1:
        if i2 <= 0 goto label9;

        i2 = i2 + -1;

     label2:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        $r4 = virtualinvoke $r3.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i2);

        $r5 = (android.app.trust.IStrongAuthTracker) $r4;

        interfaceinvoke $r5.<android.app.trust.IStrongAuthTracker: void onIsNonStrongBiometricAllowedChanged(boolean,int)>(z0, i0);

     label3:
        goto label1;

     label4:
        $r6 := @caughtexception;

        goto label8;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockSettings", "Exception while notifying StrongAuthTracker: IsNonStrongBiometricAllowedChanged.", $r8);

     label7:
        goto label1;

     label8:
        $r7 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        virtualinvoke $r7.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw $r6;

     label9:
        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.RemoteCallbackList mTrackers>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: void finishBroadcast()>();

        return;

        catch android.os.RemoteException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    private void rescheduleStrongAuthTimeoutAlarm(long, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        long l0, l2, $l3;
        int i1;
        android.app.admin.DevicePolicyManager r1;
        android.content.Context $r2;
        java.lang.Object $r3, $r6;
        android.util.ArrayMap $r4, $r8;
        java.lang.Integer $r5, $r9;
        com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener $r7, r14;
        android.os.Handler $r11;
        android.app.AlarmManager $r12, $r13;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        r1 = (android.app.admin.DevicePolicyManager) $r3;

        $r4 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mStrongAuthTimeoutAlarmListenerForUser>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r14 = (com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener) $r6;

        if r14 == null goto label1;

        $r13 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r13.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>(r14);

        virtualinvoke r14.<com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener: void setLatestStrongAuthTime(long)>(l0);

        goto label2;

     label1:
        $r7 = new com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener;

        specialinvoke $r7.<com.android.server.locksettings.LockSettingsStrongAuth$StrongAuthTimeoutAlarmListener: void <init>(com.android.server.locksettings.LockSettingsStrongAuth,long,int)>(r0, l0, i1);

        r14 = $r7;

        $r8 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.ArrayMap mStrongAuthTimeoutAlarmListenerForUser>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

     label2:
        l2 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: long getRequiredStrongAuthTimeout(android.content.ComponentName,int)>(null, i1);

        $r12 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.app.AlarmManager mAlarmManager>;

        $l3 = l2 + l0;

        $r11 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        virtualinvoke $r12.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(3, $l3, "LockSettingsStrongAuth.timeoutForUser", r14, $r11);

        return;
    }

    private void setIsNonStrongBiometricAllowedOneUser(boolean, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        boolean z0, $z1;
        int i0;
        android.util.SparseBooleanArray $r1, $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        $z1 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 1);

        if z0 == $z1 goto label1;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        virtualinvoke $r2.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void notifyStrongAuthTrackersForIsNonStrongBiometricAllowed(boolean,int)>(z0, i0);

     label1:
        return;
    }

    public void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        com.android.internal.util.IndentingPrintWriter r1;
        int i0, $i1, $i2, i3, i4, i5, i6;
        boolean z0;
        android.util.SparseIntArray $r3, $r16, $r17;
        android.util.SparseBooleanArray $r6, $r8, $r9;
        java.lang.StringBuilder $r10, $r18;
        java.lang.String $r15, $r22, $r24;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("PrimaryAuthFlags state:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i3 = 0;

     label1:
        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        $i1 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        if i3 >= $i1 goto label2;

        $r16 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        i0 = virtualinvoke $r16.<android.util.SparseIntArray: int keyAt(int)>(i3);

        $r17 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseIntArray mStrongAuthForUser>;

        i4 = virtualinvoke $r17.<android.util.SparseIntArray: int valueAt(int)>(i3);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userId=");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", primaryAuthFlags=");

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i4);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("NonStrongBiometricAllowed state:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i5 = 0;

     label3:
        $r6 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        $i2 = virtualinvoke $r6.<android.util.SparseBooleanArray: int size()>();

        if i5 >= $i2 goto label4;

        $r8 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        i6 = virtualinvoke $r8.<android.util.SparseBooleanArray: int keyAt(int)>(i5);

        $r9 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        z0 = virtualinvoke $r9.<android.util.SparseBooleanArray: boolean valueAt(int)>(i5);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("userId=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", allowed=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        i5 = i5 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    void noLongerRequireStrongAuth(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1;
        android.os.Handler $r1;
        android.os.Message $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == -1 goto label2;

        if i1 < 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("userId must be an explicit user id or USER_ALL");

        throw $r3;

     label2:
        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(6, i0, i1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void refreshStrongAuthTimeout(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(10, i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.app.trust.IStrongAuthTracker r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: android.app.trust.IStrongAuthTracker;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void removeUser(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(4, i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void reportSuccessfulBiometricUnlock(boolean, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        boolean z0;
        int i0;
        android.os.Handler $r1, $r3;
        android.os.Message $r2, $r4;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 == 0 goto label1;

        $r3 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(8, i0, 0);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        goto label2;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(7, i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    public void reportSuccessfulStrongAuthUnlock(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(5, i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void reportUnlock(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void requireStrongAuth(int,int)>(0, i0);

        return;
    }

    public void requireStrongAuth(int, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0, i1;
        android.os.Handler $r1;
        android.os.Message $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == -1 goto label2;

        if i1 < 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("userId must be an explicit user id or USER_ALL");

        throw $r3;

     label2:
        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, i1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void scheduleNonStrongBiometricIdleTimeout(int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        int i0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(9, i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    protected void setIsNonStrongBiometricAllowed(boolean, int)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        boolean z0;
        android.util.SparseBooleanArray $r1, $r2;
        int $i0, $i1, i2, i3;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        z0 := @parameter0: boolean;

        i2 := @parameter1: int;

        if i2 != -1 goto label3;

        i3 = 0;

     label1:
        $r1 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        $i0 = virtualinvoke $r1.<android.util.SparseBooleanArray: int size()>();

        if i3 >= $i0 goto label2;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        $i1 = virtualinvoke $r2.<android.util.SparseBooleanArray: int keyAt(int)>(i3);

        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void setIsNonStrongBiometricAllowedOneUser(boolean,int)>(z0, $i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        specialinvoke r0.<com.android.server.locksettings.LockSettingsStrongAuth: void setIsNonStrongBiometricAllowedOneUser(boolean,int)>(z0, i2);

     label4:
        return;
    }

    public void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)
    {
        com.android.server.locksettings.LockSettingsStrongAuth r0;
        android.app.trust.IStrongAuthTracker r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.locksettings.LockSettingsStrongAuth;

        r1 := @parameter0: android.app.trust.IStrongAuthTracker;

        $r2 = r0.<com.android.server.locksettings.LockSettingsStrongAuth: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.LockSettingsStrongAuth: java.lang.String TAG> = "LockSettings";

        <com.android.server.locksettings.LockSettingsStrongAuth: java.lang.String STRONG_AUTH_TIMEOUT_ALARM_TAG> = "LockSettingsStrongAuth.timeoutForUser";

        <com.android.server.locksettings.LockSettingsStrongAuth: java.lang.String NON_STRONG_BIOMETRIC_TIMEOUT_ALARM_TAG> = "LockSettingsPrimaryAuth.nonStrongBiometricTimeoutForUser";

        <com.android.server.locksettings.LockSettingsStrongAuth: java.lang.String NON_STRONG_BIOMETRIC_IDLE_TIMEOUT_ALARM_TAG> = "LockSettingsPrimaryAuth.nonStrongBiometricIdleTimeoutForUser";

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_UNREGISTER_TRACKER> = 3;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_STRONG_BIOMETRIC_UNLOCK> = 8;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_SCHEDULE_STRONG_AUTH_TIMEOUT> = 5;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_SCHEDULE_NON_STRONG_BIOMETRIC_TIMEOUT> = 7;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_SCHEDULE_NON_STRONG_BIOMETRIC_IDLE_TIMEOUT> = 9;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_REQUIRE_STRONG_AUTH> = 1;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_REMOVE_USER> = 4;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_REGISTER_TRACKER> = 2;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_REFRESH_STRONG_AUTH_TIMEOUT> = 10;

        <com.android.server.locksettings.LockSettingsStrongAuth: int MSG_NO_LONGER_REQUIRE_STRONG_AUTH> = 6;

        <com.android.server.locksettings.LockSettingsStrongAuth: long DEFAULT_NON_STRONG_BIOMETRIC_TIMEOUT_MS> = 86400000L;

        <com.android.server.locksettings.LockSettingsStrongAuth: long DEFAULT_NON_STRONG_BIOMETRIC_IDLE_TIMEOUT_MS> = 14400000L;

        <com.android.server.locksettings.LockSettingsStrongAuth: boolean DEBUG> = 0;

        return;
    }
}
