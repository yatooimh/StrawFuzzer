class com.android.server.locksettings.RebootEscrowData extends java.lang.Object
{
    private static final java.lang.String CIPHER_ALGO;
    private static final int CURRENT_VERSION;
    private final byte[] mBlob;
    private final byte[] mIv;
    private final com.android.server.locksettings.RebootEscrowKey mKey;
    private final byte mSpVersion;
    private final byte[] mSyntheticPassword;

    private void <init>(byte, byte[], byte[], byte[], com.android.server.locksettings.RebootEscrowKey)
    {
        com.android.server.locksettings.RebootEscrowData r0;
        byte b0, $b1;
        byte[] r1, r2, r3;
        com.android.server.locksettings.RebootEscrowKey r4;

        r0 := @this: com.android.server.locksettings.RebootEscrowData;

        b0 := @parameter0: byte;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: com.android.server.locksettings.RebootEscrowKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $b1 = (byte) b0;

        r0.<com.android.server.locksettings.RebootEscrowData: byte mSpVersion> = $b1;

        r0.<com.android.server.locksettings.RebootEscrowData: byte[] mIv> = r1;

        r0.<com.android.server.locksettings.RebootEscrowData: byte[] mSyntheticPassword> = r2;

        r0.<com.android.server.locksettings.RebootEscrowData: byte[] mBlob> = r3;

        r0.<com.android.server.locksettings.RebootEscrowData: com.android.server.locksettings.RebootEscrowKey mKey> = r4;

        return;
    }

    static com.android.server.locksettings.RebootEscrowData fromEncryptedData(com.android.server.locksettings.RebootEscrowKey, byte[]) throws java.io.IOException
    {
        byte[] r0, r1, r28, r30;
        byte b0;
        javax.crypto.Cipher r2;
        javax.crypto.spec.IvParameterSpec r3;
        java.io.DataInputStream $r6;
        java.io.ByteArrayInputStream $r7;
        java.lang.StringBuilder $r8, $r13, $r18;
        java.io.IOException $r11, $r16, $r21, $r25;
        java.lang.String $r12, $r17, $r22;
        com.android.server.locksettings.RebootEscrowData $r23;
        java.lang.Throwable $r24;
        com.android.server.locksettings.RebootEscrowKey r26;
        int i1, i2, i3;
        javax.crypto.SecretKey r29;

        r26 := @parameter0: com.android.server.locksettings.RebootEscrowKey;

        r0 := @parameter1: byte[];

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r26);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r6 = new java.io.DataInputStream;

        $r7 = new java.io.ByteArrayInputStream;

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        specialinvoke $r6.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

        i1 = virtualinvoke $r6.<java.io.DataInputStream: int readInt()>();

        if i1 != 1 goto label6;

        b0 = virtualinvoke $r6.<java.io.DataInputStream: byte readByte()>();

        i2 = virtualinvoke $r6.<java.io.DataInputStream: int readInt()>();

        if i2 < 0 goto label5;

        if i2 > 32 goto label5;

        r1 = newarray (byte)[i2];

        virtualinvoke $r6.<java.io.DataInputStream: void readFully(byte[])>(r1);

        i3 = virtualinvoke $r6.<java.io.DataInputStream: int readInt()>();

        if i3 < 0 goto label4;

        r28 = newarray (byte)[i3];

        virtualinvoke $r6.<java.io.DataInputStream: void readFully(byte[])>(r28);

     label1:
        r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        r29 = virtualinvoke r26.<com.android.server.locksettings.RebootEscrowKey: javax.crypto.SecretKey getKey()>();

        r3 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke r3.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r1);

        virtualinvoke r2.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r29, r3);

        r30 = virtualinvoke r2.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r28);

     label2:
        $r23 = new com.android.server.locksettings.RebootEscrowData;

        specialinvoke $r23.<com.android.server.locksettings.RebootEscrowData: void <init>(byte,byte[],byte[],byte[],com.android.server.locksettings.RebootEscrowKey)>(b0, r1, r30, r0, r26);

        return $r23;

     label3:
        $r24 := @caughtexception;

        $r25 = new java.io.IOException;

        specialinvoke $r25.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Could not decrypt ciphertext", $r24);

        throw $r25;

     label4:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid cipher text size: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r21 = new java.io.IOException;

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label5:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IV out of range: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = new java.io.IOException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported version ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = new java.io.IOException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    static com.android.server.locksettings.RebootEscrowData fromSyntheticPassword(com.android.server.locksettings.RebootEscrowKey, byte, byte[]) throws java.io.IOException
    {
        byte b0;
        byte[] r0, r3, $r9, r14;
        java.io.ByteArrayOutputStream $r5;
        java.io.DataOutputStream $r6;
        javax.crypto.SecretKey $r7;
        int $i1, $i2;
        com.android.server.locksettings.RebootEscrowData $r8;
        java.lang.Throwable $r10;
        java.io.IOException $r11;
        com.android.server.locksettings.RebootEscrowKey r12;
        javax.crypto.Cipher r13;

        r12 := @parameter0: com.android.server.locksettings.RebootEscrowKey;

        b0 := @parameter1: byte;

        r0 := @parameter2: byte[];

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = new java.io.DataOutputStream;

        specialinvoke $r6.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r5);

     label1:
        r13 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        $r7 = virtualinvoke r12.<com.android.server.locksettings.RebootEscrowKey: javax.crypto.SecretKey getKey()>();

        virtualinvoke r13.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, $r7);

        r3 = virtualinvoke r13.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r0);

        r14 = virtualinvoke r13.<javax.crypto.Cipher: byte[] getIV()>();

     label2:
        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>(1);

        virtualinvoke $r6.<java.io.DataOutputStream: void writeByte(int)>(b0);

        $i1 = lengthof r14;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>($i1);

        virtualinvoke $r6.<java.io.DataOutputStream: void write(byte[])>(r14);

        $i2 = lengthof r3;

        virtualinvoke $r6.<java.io.DataOutputStream: void writeInt(int)>($i2);

        virtualinvoke $r6.<java.io.DataOutputStream: void write(byte[])>(r3);

        $r8 = new com.android.server.locksettings.RebootEscrowData;

        $r9 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r8.<com.android.server.locksettings.RebootEscrowData: void <init>(byte,byte[],byte[],byte[],com.android.server.locksettings.RebootEscrowKey)>(b0, r14, r0, $r9, r12);

        return $r8;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Could not encrypt reboot escrow data", $r10);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch javax.crypto.BadPaddingException from label1 to label2 with label3;
        catch javax.crypto.IllegalBlockSizeException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
    }

    public byte[] getBlob()
    {
        com.android.server.locksettings.RebootEscrowData r0;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowData;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowData: byte[] mBlob>;

        return $r1;
    }

    public byte[] getIv()
    {
        com.android.server.locksettings.RebootEscrowData r0;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowData;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowData: byte[] mIv>;

        return $r1;
    }

    public com.android.server.locksettings.RebootEscrowKey getKey()
    {
        com.android.server.locksettings.RebootEscrowData r0;
        com.android.server.locksettings.RebootEscrowKey $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowData;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowData: com.android.server.locksettings.RebootEscrowKey mKey>;

        return $r1;
    }

    public byte getSpVersion()
    {
        com.android.server.locksettings.RebootEscrowData r0;
        byte $b0;

        r0 := @this: com.android.server.locksettings.RebootEscrowData;

        $b0 = r0.<com.android.server.locksettings.RebootEscrowData: byte mSpVersion>;

        return $b0;
    }

    public byte[] getSyntheticPassword()
    {
        com.android.server.locksettings.RebootEscrowData r0;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowData;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowData: byte[] mSyntheticPassword>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.RebootEscrowData: int CURRENT_VERSION> = 1;

        <com.android.server.locksettings.RebootEscrowData: java.lang.String CIPHER_ALGO> = "AES/GCM/NoPadding";

        return;
    }
}
