class com.android.server.locksettings.RebootEscrowKey extends java.lang.Object
{
    private static final java.lang.String KEY_ALGO;
    private static final int KEY_SIZE_BITS;
    private final javax.crypto.SecretKey mKey;

    private void <init>(javax.crypto.SecretKey)
    {
        com.android.server.locksettings.RebootEscrowKey r0;
        javax.crypto.SecretKey r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowKey;

        r1 := @parameter0: javax.crypto.SecretKey;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.RebootEscrowKey: javax.crypto.SecretKey mKey> = r1;

        return;
    }

    static com.android.server.locksettings.RebootEscrowKey fromKeyBytes(byte[])
    {
        byte[] r0;
        com.android.server.locksettings.RebootEscrowKey $r1;
        javax.crypto.spec.SecretKeySpec $r2;

        r0 := @parameter0: byte[];

        $r1 = new com.android.server.locksettings.RebootEscrowKey;

        $r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r0, "AES");

        specialinvoke $r1.<com.android.server.locksettings.RebootEscrowKey: void <init>(javax.crypto.SecretKey)>($r2);

        return $r1;
    }

    static com.android.server.locksettings.RebootEscrowKey generate() throws java.io.IOException
    {
        java.security.SecureRandom r0;
        com.android.server.locksettings.RebootEscrowKey $r1;
        java.lang.Throwable $r2;
        java.io.IOException $r3;
        javax.crypto.KeyGenerator r4;
        javax.crypto.SecretKey r5;

     label1:
        r4 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        r0 = new java.security.SecureRandom;

        specialinvoke r0.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r4.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(256, r0);

        r5 = virtualinvoke r4.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

     label2:
        $r1 = new com.android.server.locksettings.RebootEscrowKey;

        specialinvoke $r1.<com.android.server.locksettings.RebootEscrowKey: void <init>(javax.crypto.SecretKey)>(r5);

        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Could not generate new secret key", $r2);

        throw $r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    javax.crypto.SecretKey getKey()
    {
        com.android.server.locksettings.RebootEscrowKey r0;
        javax.crypto.SecretKey $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowKey;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowKey: javax.crypto.SecretKey mKey>;

        return $r1;
    }

    byte[] getKeyBytes()
    {
        com.android.server.locksettings.RebootEscrowKey r0;
        javax.crypto.SecretKey $r1;
        byte[] $r2;

        r0 := @this: com.android.server.locksettings.RebootEscrowKey;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowKey: javax.crypto.SecretKey mKey>;

        $r2 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.RebootEscrowKey: int KEY_SIZE_BITS> = 256;

        <com.android.server.locksettings.RebootEscrowKey: java.lang.String KEY_ALGO> = "AES";

        return;
    }
}
