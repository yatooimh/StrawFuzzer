class com.android.server.locksettings.RebootEscrowManager$Injector extends java.lang.Object
{
    protected android.content.Context mContext;

    void <init>(android.content.Context)
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.RebootEscrowManager$Injector: android.content.Context mContext> = r1;

        return;
    }

    public int getBootCount()
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowManager$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "boot_count", 0);

        return $i0;
    }

    public android.content.Context getContext()
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowManager$Injector: android.content.Context mContext>;

        return $r1;
    }

    public com.android.server.locksettings.RebootEscrowManager$RebootEscrowEventLog getEventLog()
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        com.android.server.locksettings.RebootEscrowManager$RebootEscrowEventLog $r1;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

        $r1 = new com.android.server.locksettings.RebootEscrowManager$RebootEscrowEventLog;

        specialinvoke $r1.<com.android.server.locksettings.RebootEscrowManager$RebootEscrowEventLog: void <init>()>();

        return $r1;
    }

    public android.hardware.rebootescrow.IRebootEscrow getRebootEscrow()
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        android.os.IBinder $r1;
        java.lang.Throwable $r2;
        android.hardware.rebootescrow.IRebootEscrow r3;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

     label1:
        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("android.hardware.rebootescrow.IRebootEscrow/default");

        r3 = staticinvoke <android.hardware.rebootescrow.IRebootEscrow$Stub: android.hardware.rebootescrow.IRebootEscrow asInterface(android.os.IBinder)>($r1);

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("RebootEscrowManager", "Device doesn\'t implement RebootEscrow HAL");

        return null;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public android.os.UserManager getUserManager()
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.UserManager $r3;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

        $r1 = r0.<com.android.server.locksettings.RebootEscrowManager$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r3 = (android.os.UserManager) $r2;

        return $r3;
    }

    public void reportMetric(boolean)
    {
        com.android.server.locksettings.RebootEscrowManager$Injector r0;
        boolean z0;

        r0 := @this: com.android.server.locksettings.RebootEscrowManager$Injector;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,boolean)>(238, z0);

        return;
    }
}
