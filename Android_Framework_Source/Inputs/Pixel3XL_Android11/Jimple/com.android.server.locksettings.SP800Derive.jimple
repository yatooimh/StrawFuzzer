class com.android.server.locksettings.SP800Derive extends java.lang.Object
{
    private final byte[] mKeyBytes;

    void <init>(byte[])
    {
        com.android.server.locksettings.SP800Derive r0;
        byte[] r1;

        r0 := @this: com.android.server.locksettings.SP800Derive;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.SP800Derive: byte[] mKeyBytes> = r1;

        return;
    }

    private javax.crypto.Mac getMac()
    {
        com.android.server.locksettings.SP800Derive r0;
        javax.crypto.Mac r1;
        byte[] $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.lang.RuntimeException $r5;
        javax.crypto.spec.SecretKeySpec r6;

        r0 := @this: com.android.server.locksettings.SP800Derive;

     label1:
        r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256");

        r6 = new javax.crypto.spec.SecretKeySpec;

        $r2 = r0.<com.android.server.locksettings.SP800Derive: byte[] mKeyBytes>;

        $r3 = virtualinvoke r1.<javax.crypto.Mac: java.lang.String getAlgorithm()>();

        specialinvoke r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r3);

        virtualinvoke r1.<javax.crypto.Mac: void init(java.security.Key)>(r6);

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static void update32(javax.crypto.Mac, int)
    {
        javax.crypto.Mac r0;
        int i0;
        java.nio.ByteBuffer $r1, $r2;
        byte[] $r3;

        r0 := @parameter0: javax.crypto.Mac;

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(4);

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r0.<javax.crypto.Mac: void update(byte[])>($r3);

        return;
    }

    public byte[] fixedInput(byte[])
    {
        com.android.server.locksettings.SP800Derive r0;
        byte[] r1, $r3;
        javax.crypto.Mac r2;

        r0 := @this: com.android.server.locksettings.SP800Derive;

        r1 := @parameter0: byte[];

        r2 = specialinvoke r0.<com.android.server.locksettings.SP800Derive: javax.crypto.Mac getMac()>();

        staticinvoke <com.android.server.locksettings.SP800Derive: void update32(javax.crypto.Mac,int)>(r2, 1);

        virtualinvoke r2.<javax.crypto.Mac: void update(byte[])>(r1);

        $r3 = virtualinvoke r2.<javax.crypto.Mac: byte[] doFinal()>();

        return $r3;
    }

    public byte[] withContext(byte[], byte[])
    {
        com.android.server.locksettings.SP800Derive r0;
        byte[] r1, r2, $r4;
        javax.crypto.Mac r3;
        int $i0, $i1;

        r0 := @this: com.android.server.locksettings.SP800Derive;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r3 = specialinvoke r0.<com.android.server.locksettings.SP800Derive: javax.crypto.Mac getMac()>();

        staticinvoke <com.android.server.locksettings.SP800Derive: void update32(javax.crypto.Mac,int)>(r3, 1);

        virtualinvoke r3.<javax.crypto.Mac: void update(byte[])>(r1);

        virtualinvoke r3.<javax.crypto.Mac: void update(byte)>(0);

        virtualinvoke r3.<javax.crypto.Mac: void update(byte[])>(r2);

        $i0 = lengthof r2;

        $i1 = $i0 * 8;

        staticinvoke <com.android.server.locksettings.SP800Derive: void update32(javax.crypto.Mac,int)>(r3, $i1);

        staticinvoke <com.android.server.locksettings.SP800Derive: void update32(javax.crypto.Mac,int)>(r3, 256);

        $r4 = virtualinvoke r3.<javax.crypto.Mac: byte[] doFinal()>();

        return $r4;
    }
}
