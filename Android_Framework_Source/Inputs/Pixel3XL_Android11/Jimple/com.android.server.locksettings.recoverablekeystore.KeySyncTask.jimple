public class com.android.server.locksettings.recoverablekeystore.KeySyncTask extends java.lang.Object implements java.lang.Runnable
{
    private static final int LENGTH_PREFIX_BYTES;
    private static final java.lang.String LOCK_SCREEN_HASH_ALGORITHM;
    private static final java.lang.String RECOVERY_KEY_ALGORITHM;
    private static final int RECOVERY_KEY_SIZE_BITS;
    private static final int SALT_LENGTH_BYTES;
    static final int SCRYPT_PARAM_N;
    static final int SCRYPT_PARAM_OUTLEN_BYTES;
    static final int SCRYPT_PARAM_P;
    static final int SCRYPT_PARAM_R;
    private static final java.lang.String TAG;
    private static final int TRUSTED_HARDWARE_MAX_ATTEMPTS;
    private final byte[] mCredential;
    private final int mCredentialType;
    private final boolean mCredentialUpdated;
    private final com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mRecoverySnapshotStorage;
    private final android.security.Scrypt mScrypt;
    private final com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mSnapshotListenersStorage;
    private final com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper;
    private final int mUserId;

    void <init>(com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb, com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage, com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage, int, int, byte[], boolean, com.android.server.locksettings.recoverablekeystore.PlatformKeyManager, com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper, android.security.Scrypt)
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage r2;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage r3;
        int i0, i1;
        byte[] r4;
        boolean z0;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r5;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r6;
        android.security.Scrypt r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        r1 := @parameter0: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        r2 := @parameter1: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage;

        r3 := @parameter2: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r4 := @parameter5: byte[];

        z0 := @parameter6: boolean;

        r5 := @parameter7: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        r6 := @parameter8: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r7 := @parameter9: android.security.Scrypt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mSnapshotListenersStorage> = r3;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb> = r1;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId> = i0;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType> = i1;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] mCredential> = r4;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: boolean mCredentialUpdated> = z0;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager> = r5;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mRecoverySnapshotStorage> = r2;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper> = r6;

        r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: android.security.Scrypt mScrypt> = r7;

        return;
    }

    private static java.util.List createApplicationKeyEntries(java.util.Map, java.util.Map)
    {
        java.util.Map r0, r1;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.ArrayList $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r10, $r13, $r15;
        android.security.keystore.recovery.WrappedApplicationKey$Builder $r8, $r9, $r12, $r17;
        byte[] $r11, $r16;
        android.util.Pair $r14;
        android.security.keystore.recovery.WrappedApplicationKey $r18;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.util.Map;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        $r8 = new android.security.keystore.recovery.WrappedApplicationKey$Builder;

        specialinvoke $r8.<android.security.keystore.recovery.WrappedApplicationKey$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<android.security.keystore.recovery.WrappedApplicationKey$Builder: android.security.keystore.recovery.WrappedApplicationKey$Builder setAlias(java.lang.String)>(r4);

        $r10 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r11 = (byte[]) $r10;

        $r12 = virtualinvoke $r9.<android.security.keystore.recovery.WrappedApplicationKey$Builder: android.security.keystore.recovery.WrappedApplicationKey$Builder setEncryptedKeyMaterial(byte[])>($r11);

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r14 = (android.util.Pair) $r13;

        $r15 = $r14.<android.util.Pair: java.lang.Object second>;

        $r16 = (byte[]) $r15;

        $r17 = virtualinvoke $r12.<android.security.keystore.recovery.WrappedApplicationKey$Builder: android.security.keystore.recovery.WrappedApplicationKey$Builder setMetadata(byte[])>($r16);

        $r18 = virtualinvoke $r17.<android.security.keystore.recovery.WrappedApplicationKey$Builder: android.security.keystore.recovery.WrappedApplicationKey build()>();

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

        goto label1;

     label2:
        return $r5;
    }

    private long generateAndStoreCounterId(int) throws java.io.IOException
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0, $i2;
        long l1, $l3;
        java.security.SecureRandom $r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r2;
        byte $b4;
        java.io.IOException $r3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 := @parameter0: int;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        l1 = virtualinvoke $r1.<java.security.SecureRandom: long nextLong()>();

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $l3 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setCounterId(int,int,long)>($i2, i0, l1);

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        return l1;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeySyncTask", "Failed to set the snapshot version in the local DB.");

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Failed to set counterId in the local DB.");

        throw $r3;
    }

    private static javax.crypto.SecretKey generateRecoveryKey() throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.KeyGenerator r0;
        javax.crypto.SecretKey $r1;

        r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int)>(256);

        $r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        return $r1;
    }

    private static byte[] generateSalt()
    {
        byte[] r0;
        java.security.SecureRandom $r1;

        r0 = newarray (byte)[16];

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>(r0);

        return r0;
    }

    private java.util.Map getKeysToSync(int) throws com.android.server.locksettings.recoverablekeystore.InsecureUserException, java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0, $i1, $i2, $i3;
        com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey r1;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager $r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r3;
        java.util.Map $r4, $r5;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager>;

        $i1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKey(int)>($i1);

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $i3 = virtualinvoke r1.<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: int getGenerationId()>();

        $r4 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.Map getAllKeys(int,int,int)>($i2, i0, $i3);

        $r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.WrappedKey: java.util.Map unwrapKeys(com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey,java.util.Map)>(r1, $r4);

        return $r5;
    }

    static int getUiFormat(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 != 1 goto label1;

        return 3;

     label1:
        if i0 != 3 goto label2;

        return 1;

     label2:
        return 2;
    }

    static byte[] hashCredentialsBySaltedSha256(byte[], byte[])
    {
        java.nio.ByteBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.nio.ByteOrder $r1;
        java.security.MessageDigest $r7;
        java.lang.Throwable $r8;
        java.lang.RuntimeException $r9;
        byte[] r10, r11, r12, r13;

        r10 := @parameter0: byte[];

        r11 := @parameter1: byte[];

        $i1 = lengthof r10;

        $i0 = lengthof r11;

        $i2 = $i1 + $i0;

        $i3 = $i2 + 8;

        r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        $i4 = lengthof r10;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i4);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r10);

        $i5 = lengthof r11;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i5);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r11);

        r12 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

     label1:
        $r7 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r13 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest(byte[])>(r12);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r12, 0);

     label2:
        return r13;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private byte[] hashCredentialsByScrypt(byte[], byte[])
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        byte[] r1, r2, $r4;
        android.security.Scrypt $r3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: android.security.Scrypt mScrypt>;

        $r4 = virtualinvoke $r3.<android.security.Scrypt: byte[] scrypt(byte[],byte[],int,int,int,int)>(r2, r1, 4096, 8, 1, 32);

        return $r4;
    }

    private boolean isCustomLockScreen()
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType>;

        z0 = 1;

        if i0 == -1 goto label1;

        if i0 == 1 goto label1;

        if i0 == 3 goto label1;

        if i0 == 4 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static com.android.server.locksettings.recoverablekeystore.KeySyncTask newInstance(android.content.Context, com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb, com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage, com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage, int, int, byte[], boolean) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, com.android.server.locksettings.recoverablekeystore.InsecureUserException
    {
        android.content.Context r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage r2;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage r3;
        int i0, i1;
        byte[] r4;
        boolean z0;
        com.android.server.locksettings.recoverablekeystore.KeySyncTask $r5;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager $r6;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r7;
        android.security.Scrypt $r8;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        r2 := @parameter2: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage;

        r3 := @parameter3: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r4 := @parameter6: byte[];

        z0 := @parameter7: boolean;

        $r5 = new com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        $r6 = staticinvoke <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager getInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)>(r0, r1);

        $r7 = new com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        specialinvoke $r7.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: void <init>()>();

        $r8 = new android.security.Scrypt;

        specialinvoke $r8.<android.security.Scrypt: void <init>()>();

        specialinvoke $r5.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: void <init>(com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage,int,int,byte[],boolean,com.android.server.locksettings.recoverablekeystore.PlatformKeyManager,com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper,android.security.Scrypt)>(r1, r2, r3, i0, i1, r4, z0, $r6, $r7, $r8);

        return $r5;
    }

    private boolean shouldCreateSnapshot(int)
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1, $r3, $r4, $r6;
        int[] $r2;
        boolean $z0, $z1, $z2;
        java.lang.Long $r5;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int[] getRecoverySecretTypes(int,int)>($i1, i0);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r2, 100);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: boolean mCredentialUpdated>;

        if $z1 == 0 goto label2;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i3 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $r5 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>($i3, i0);

        if $r5 == null goto label2;

        $r6 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i4 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>($i4, i0, 1);

        return 1;

     label2:
        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $z2 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean getShouldCreateSnapshot(int,int)>($i2, i0);

        return $z2;
    }

    private boolean shouldUseScryptToHashCredential()
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType>;

        if i0 == 4 goto label2;

        if i0 != 3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private void syncKeys() throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        java.util.Iterator r1;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i10, $i12, $i13, $i14, $i16, $i17, i19, i20;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager $r4, $r5, $r28;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r6, $r23;
        java.lang.StringBuilder $r7, $r13, $r17, $r24, $r30;
        java.lang.String $r10, $r16, $r22, $r27, $r33;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        java.lang.Throwable $r29;
        java.util.List r37;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager>;

        $i0 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        i19 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int getGenerationId(int)>($i0);

        $i1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType>;

        if $i1 != -1 goto label03;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Credentials are not set for user ");

        $i14 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r27);

        if i19 < 1000000 goto label01;

        $i17 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        if $i17 == 0 goto label02;

     label01:
        $r28 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager>;

        $i16 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r28.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void invalidatePlatformKey(int,int)>($i16, i19);

     label02:
        return;

     label03:
        $z0 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: boolean isCustomLockScreen()>();

        if $z0 == 0 goto label06;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported credential type ");

        $i9 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $i10 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r22);

        if i19 < 1000000 goto label04;

        $i13 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        if $i13 == 0 goto label05;

     label04:
        $r23 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i12 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r23.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void invalidateKeysForUserIdOnCustomScreenLock(int)>($i12);

     label05:
        return;

     label06:
        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager>;

        $i2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $z1 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: boolean isDeviceLocked(int)>($i2);

        if $z1 == 0 goto label07;

        $i6 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        if $i6 != 0 goto label07;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t sync keys for locked user ");

        $i7 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r16);

        return;

     label07:
        $r6 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i3 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r37 = virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.List getRecoveryAgents(int)>($i3);

        r1 = interfaceinvoke r37.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Integer) $r11;

        i20 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

     label09:
        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: void syncKeysForAgent(int)>(i20);

     label10:
        goto label12;

     label11:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException during sync for agent ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", $r33, $r29);

     label12:
        goto label08;

     label13:
        $z2 = interfaceinvoke r37.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label14;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No recovery agent initialized for user ");

        $i4 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r10);

     label14:
        return;

        catch java.io.IOException from label09 to label10 with label11;
    }

    private void syncKeysForAgent(int) throws java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i16, $i19, $i23;
        java.security.cert.CertPath r1;
        byte[] r2, r5, $r12, $r19, $r36, $r41, r79, r80, r83;
        boolean z0, $z1, $z2, $z3, $z4, $z6, z7;
        javax.crypto.SecretKey r3;
        java.util.Map r4, r81;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r6, $r8, $r9, $r10, $r14, $r34, $r59;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r7, $r11, $r13, $r35, $r42;
        android.security.keystore.recovery.KeyChainProtectionParams$Builder $r15, $r16, $r17, $r18, $r20;
        java.util.ArrayList $r21;
        android.security.keystore.recovery.KeyChainSnapshot$Builder $r22, $r23, $r24, $r25, $r26, $r27, $r29, r87;
        long $l10, $l13, $l14, $l35;
        java.util.List $r28, $r56;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage $r31, $r61;
        android.security.keystore.recovery.KeyChainSnapshot $r32, $r62;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage $r33;
        java.lang.StringBuilder $r37, $r43, $r48, $r52;
        java.lang.String $r40, $r47, $r51, $r55, r72, r73;
        java.lang.Object $r57;
        java.security.cert.Certificate $r58;
        java.lang.Long $r60, r82;
        java.lang.Throwable $r63, $r65, $r66, $r67, $r68, $r69, $r70;
        com.android.server.locksettings.recoverablekeystore.InsecureUserException $r64;
        com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException $r71;
        java.security.PublicKey r74;
        android.security.keystore.recovery.KeyDerivationParams r84;
        android.security.keystore.recovery.KeyChainProtectionParams r85;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 := @parameter0: int;

        $z1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: boolean shouldCreateSnapshot(int)>(i0);

        if $z1 != 0 goto label04;

        $r59 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i23 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $r60 = virtualinvoke $r59.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>($i23, i0);

        if $r60 == null goto label01;

        $r61 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mRecoverySnapshotStorage>;

        $r62 = virtualinvoke $r61.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: android.security.keystore.recovery.KeyChainSnapshot get(int)>(i0);

        if $r62 != null goto label01;

        z7 = 1;

        goto label02;

     label01:
        z7 = 0;

     label02:
        if z7 == 0 goto label03;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeySyncTask", "Recreating most recent snapshot");

        goto label05;

     label03:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeySyncTask", "Key sync not needed.");

        return;

     label04:
        z7 = 0;

     label05:
        $r6 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r72 = virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.String getActiveRootOfTrust(int,int)>($i1, i0);

        $r7 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        r73 = virtualinvoke $r7.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r72);

        $r8 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i2 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r1 = virtualinvoke $r8.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.security.cert.CertPath getRecoveryServiceCertPath(int,int,java.lang.String)>($i2, i0, r73);

        if r1 == null goto label06;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeySyncTask", "Using the public key in stored CertPath for syncing");

        $r56 = virtualinvoke r1.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r57 = interfaceinvoke $r56.<java.util.List: java.lang.Object get(int)>(0);

        $r58 = (java.security.cert.Certificate) $r57;

        r74 = virtualinvoke $r58.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        goto label07;

     label06:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeySyncTask", "Using the stored raw public key for syncing");

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i4 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r74 = virtualinvoke $r9.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.security.PublicKey getRecoveryServicePublicKey(int,int)>($i4, i0);

     label07:
        if r74 != null goto label08;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", "Not initialized for KeySync: no public key set. Cancelling task.");

        return;

     label08:
        $r10 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i5 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r2 = virtualinvoke $r10.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: byte[] getServerParams(int,int)>($i5, i0);

        if r2 != null goto label09;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No device ID set for user ");

        $i19 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r55);

        return;

     label09:
        $r11 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        $z2 = virtualinvoke $r11.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isTestOnlyCertificateAlias(java.lang.String)>(r73);

        if $z2 == 0 goto label11;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Insecure root certificate is used by recovery agent ");

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r40);

        $r42 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        $i16 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType>;

        $r41 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] mCredential>;

        $z6 = virtualinvoke $r42.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean doesCredentialSupportInsecureMode(int,byte[])>($i16, $r41);

        if $z6 == 0 goto label10;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Whitelisted credential is used to generate snapshot by recovery agent ");

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r51);

        goto label11;

     label10:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non whitelisted credential is used to generate recovery snapshot by ");

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ignore attempt.");

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeySyncTask", $r47);

        return;

     label11:
        z0 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: boolean shouldUseScryptToHashCredential()>();

        r79 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] generateSalt()>();

        if z0 == 0 goto label12;

        $r36 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] mCredential>;

        r80 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] hashCredentialsByScrypt(byte[],byte[])>(r79, $r36);

        goto label13;

     label12:
        $r12 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] mCredential>;

        r80 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: byte[] hashCredentialsBySaltedSha256(byte[],byte[])>(r79, $r12);

     label13:
        r81 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: java.util.Map getKeysToSync(int)>(i0);

     label14:
        $r13 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        $z3 = virtualinvoke $r13.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isTestOnlyCertificateAlias(java.lang.String)>(r73);

        if $z3 == 0 goto label15;

        $r35 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        r81 = virtualinvoke $r35.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.util.Map keepOnlyWhitelistedInsecureKeys(java.util.Map)>(r81);

        goto label15;

     label15:
        r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: javax.crypto.SecretKey generateRecoveryKey()>();

     label16:
        r4 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: java.util.Map encryptKeysWithRecoveryKey(javax.crypto.SecretKey,java.util.Map)>(r3, r81);

     label17:
        $z4 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: boolean mCredentialUpdated>;

        if $z4 == 0 goto label18;

        $l14 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: long generateAndStoreCounterId(int)>(i0);

        r82 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l14);

        goto label19;

     label18:
        $r14 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i6 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r82 = virtualinvoke $r14.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getCounterId(int,int)>($i6, i0);

        if r82 != null goto label19;

        $l13 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: long generateAndStoreCounterId(int)>(i0);

        r82 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        goto label19;

     label19:
        $l35 = virtualinvoke r82.<java.lang.Long: long longValue()>();

        r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] packVaultParams(java.security.PublicKey,long,int,byte[])>(r74, $l35, 10, r2);

     label20:
        r83 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] thmEncryptRecoveryKey(java.security.PublicKey,byte[],byte[],javax.crypto.SecretKey)>(r74, r80, r5, r3);

     label21:
        if z0 == 0 goto label22;

        r84 = staticinvoke <android.security.keystore.recovery.KeyDerivationParams: android.security.keystore.recovery.KeyDerivationParams createScryptParams(byte[],int)>(r79, 4096);

        goto label23;

     label22:
        r84 = staticinvoke <android.security.keystore.recovery.KeyDerivationParams: android.security.keystore.recovery.KeyDerivationParams createSha256Params(byte[])>(r79);

     label23:
        $r15 = new android.security.keystore.recovery.KeyChainProtectionParams$Builder;

        specialinvoke $r15.<android.security.keystore.recovery.KeyChainProtectionParams$Builder: void <init>()>();

        $r16 = virtualinvoke $r15.<android.security.keystore.recovery.KeyChainProtectionParams$Builder: android.security.keystore.recovery.KeyChainProtectionParams$Builder setUserSecretType(int)>(100);

        $i7 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mCredentialType>;

        $i8 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int getUiFormat(int)>($i7);

        $r17 = virtualinvoke $r16.<android.security.keystore.recovery.KeyChainProtectionParams$Builder: android.security.keystore.recovery.KeyChainProtectionParams$Builder setLockScreenUiFormat(int)>($i8);

        $r18 = virtualinvoke $r17.<android.security.keystore.recovery.KeyChainProtectionParams$Builder: android.security.keystore.recovery.KeyChainProtectionParams$Builder setKeyDerivationParams(android.security.keystore.recovery.KeyDerivationParams)>(r84);

        $r19 = newarray (byte)[0];

        $r20 = virtualinvoke $r18.<android.security.keystore.recovery.KeyChainProtectionParams$Builder: android.security.keystore.recovery.KeyChainProtectionParams$Builder setSecret(byte[])>($r19);

        r85 = virtualinvoke $r20.<android.security.keystore.recovery.KeyChainProtectionParams$Builder: android.security.keystore.recovery.KeyChainProtectionParams build()>();

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r85);

        $r22 = new android.security.keystore.recovery.KeyChainSnapshot$Builder;

        specialinvoke $r22.<android.security.keystore.recovery.KeyChainSnapshot$Builder: void <init>()>();

        $i9 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int getSnapshotVersion(int,boolean)>(i0, z7);

        $r23 = virtualinvoke $r22.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setSnapshotVersion(int)>($i9);

        $r24 = virtualinvoke $r23.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setMaxAttempts(int)>(10);

        $l10 = virtualinvoke r82.<java.lang.Long: long longValue()>();

        $r25 = virtualinvoke $r24.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setCounterId(long)>($l10);

        $r26 = virtualinvoke $r25.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setServerParams(byte[])>(r2);

        $r27 = virtualinvoke $r26.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setKeyChainProtectionParams(java.util.List)>($r21);

        $r28 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: java.util.List createApplicationKeyEntries(java.util.Map,java.util.Map)>(r4, r81);

        $r29 = virtualinvoke $r27.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setWrappedApplicationKeys(java.util.List)>($r28);

        r87 = virtualinvoke $r29.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setEncryptedRecoveryKeyBlob(byte[])>(r83);

     label24:
        virtualinvoke r87.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot$Builder setTrustedHardwareCertPath(java.security.cert.CertPath)>(r1);

     label25:
        $r31 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mRecoverySnapshotStorage>;

        $r32 = virtualinvoke r87.<android.security.keystore.recovery.KeyChainSnapshot$Builder: android.security.keystore.recovery.KeyChainSnapshot build()>();

        virtualinvoke $r31.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: void put(int,android.security.keystore.recovery.KeyChainSnapshot)>(i0, $r32);

        $r33 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mSnapshotListenersStorage>;

        virtualinvoke $r33.<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: void recoverySnapshotAvailable(int)>(i0);

        $r34 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i11 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        virtualinvoke $r34.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>($i11, i0, 0);

        return;

     label26:
        $r66 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Cannot serialize CertPath when calling setTrustedHardwareCertPath", $r66);

        return;

     label27:
        $r69 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Could not encrypt with recovery key", $r69);

        return;

     label28:
        $r63 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "SecureBox encrypt algorithms unavailable", $r63);

        return;

     label29:
        $r67 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Should be impossible: could not encrypt application keys with random key", $r67);

        return;

     label30:
        $r70 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("AES should never be unavailable", $r70);

        return;

     label31:
        $r68 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Local database error.", $r68);

        return;

     label32:
        $r71 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Loaded keys for same generation ID as platform key, so BadPlatformKeyException should be impossible.", $r71);

        return;

     label33:
        $r64 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "A screen unlock triggered the key sync flow, so user must have lock screen. This should be impossible.", $r64);

        return;

     label34:
        $r65 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Failed to load recoverable keys for sync", $r65);

        return;

        catch java.security.GeneralSecurityException from label13 to label14 with label34;
        catch com.android.server.locksettings.recoverablekeystore.InsecureUserException from label13 to label14 with label33;
        catch com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException from label13 to label14 with label32;
        catch java.io.IOException from label13 to label14 with label31;
        catch java.security.NoSuchAlgorithmException from label15 to label16 with label30;
        catch java.security.InvalidKeyException from label16 to label17 with label29;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label29;
        catch java.security.NoSuchAlgorithmException from label20 to label21 with label28;
        catch java.security.InvalidKeyException from label20 to label21 with label27;
        catch java.security.cert.CertificateException from label24 to label25 with label26;
    }

    int getSnapshotVersion(int, boolean) throws java.io.IOException
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        int i0, $i1, $i4, $i6;
        boolean z0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1, $r5;
        long $l2, l5, $l7, $l8;
        java.io.IOException $r2;
        java.lang.Long r3, r4;
        byte $b9;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i1 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        r3 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>($i1, i0);

        l5 = 1L;

        if z0 == 0 goto label3;

        if r3 != null goto label1;

        goto label2;

     label1:
        l5 = virtualinvoke r3.<java.lang.Long: long longValue()>();

     label2:
        r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

        goto label6;

     label3:
        if r3 != null goto label4;

        goto label5;

     label4:
        $l2 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        l5 = 1L + $l2;

     label5:
        r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l5);

     label6:
        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mRecoverableKeyStoreDb>;

        $i6 = r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: int mUserId>;

        $l7 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        $l8 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setSnapshotVersion(int,int,long)>($i6, i0, $l7);

        $b9 = $l8 cmp 0L;

        if $b9 < 0 goto label7;

        $i4 = virtualinvoke r4.<java.lang.Long: int intValue()>();

        return $i4;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("KeySyncTask", "Failed to set the snapshot version in the local DB.");

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Failed to set the snapshot version in the local DB.");

        throw $r2;
    }

    public void run()
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncTask r0;
        java.lang.Exception $r1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncTask;

     label1:
        entermonitor class "Lcom/android/server/locksettings/recoverablekeystore/KeySyncTask;";

     label2:
        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.KeySyncTask: void syncKeys()>();

        exitmonitor class "Lcom/android/server/locksettings/recoverablekeystore/KeySyncTask;";

     label3:
        goto label8;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor class "Lcom/android/server/locksettings/recoverablekeystore/KeySyncTask;";

     label6:
        throw $r2;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KeySyncTask", "Unexpected exception thrown during KeySyncTask", $r1);

     label8:
        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Exception from label6 to label7 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int TRUSTED_HARDWARE_MAX_ATTEMPTS> = 10;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: java.lang.String TAG> = "KeySyncTask";

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int SCRYPT_PARAM_R> = 8;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int SCRYPT_PARAM_P> = 1;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int SCRYPT_PARAM_OUTLEN_BYTES> = 32;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int SCRYPT_PARAM_N> = 4096;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int SALT_LENGTH_BYTES> = 16;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int RECOVERY_KEY_SIZE_BITS> = 256;

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: java.lang.String RECOVERY_KEY_ALGORITHM> = "AES";

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: java.lang.String LOCK_SCREEN_HASH_ALGORITHM> = "SHA-256";

        <com.android.server.locksettings.recoverablekeystore.KeySyncTask: int LENGTH_PREFIX_BYTES> = 4;

        return;
    }
}
