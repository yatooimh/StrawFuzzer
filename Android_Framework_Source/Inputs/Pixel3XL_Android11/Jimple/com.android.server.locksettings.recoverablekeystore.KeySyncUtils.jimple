public class com.android.server.locksettings.recoverablekeystore.KeySyncUtils extends java.lang.Object
{
    private static final byte[] ENCRYPTED_APPLICATION_KEY_HEADER;
    private static final int KEY_CLAIMANT_LENGTH_BYTES;
    private static final byte[] LOCALLY_ENCRYPTED_RECOVERY_KEY_HEADER;
    private static final java.lang.String PUBLIC_KEY_FACTORY_ALGORITHM;
    private static final byte[] RECOVERY_CLAIM_HEADER;
    private static final java.lang.String RECOVERY_KEY_ALGORITHM;
    private static final int RECOVERY_KEY_SIZE_BITS;
    private static final byte[] RECOVERY_RESPONSE_HEADER;
    private static final byte[] THM_ENCRYPTED_RECOVERY_KEY_HEADER;
    private static final byte[] THM_KF_HASH_PREFIX;

    static void <clinit>()
    {
        java.nio.charset.Charset $r0, $r3, $r6, $r9, $r12, $r15;
        java.lang.String $r1, $r4, $r7, $r10, $r13, $r16;
        byte[] $r2, $r5, $r8, $r11, $r14, $r17;

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: int RECOVERY_KEY_SIZE_BITS> = 256;

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: java.lang.String RECOVERY_KEY_ALGORITHM> = "AES";

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: java.lang.String PUBLIC_KEY_FACTORY_ALGORITHM> = "EC";

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: int KEY_CLAIMANT_LENGTH_BYTES> = 16;

        $r1 = "V1 THM_encrypted_recovery_key";

        $r0 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r0);

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] THM_ENCRYPTED_RECOVERY_KEY_HEADER> = $r2;

        $r4 = "V1 locally_encrypted_recovery_key";

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] LOCALLY_ENCRYPTED_RECOVERY_KEY_HEADER> = $r5;

        $r7 = "V1 encrypted_application_key";

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] ENCRYPTED_APPLICATION_KEY_HEADER> = $r8;

        $r10 = "V1 KF_claim";

        $r9 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9);

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] RECOVERY_CLAIM_HEADER> = $r11;

        $r13 = "V1 reencrypted_recovery_key";

        $r12 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r14 = virtualinvoke $r13.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r12);

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] RECOVERY_RESPONSE_HEADER> = $r14;

        $r16 = "THM_KF_hash";

        $r15 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r17 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r15);

        <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] THM_KF_HASH_PREFIX> = $r17;

        return;
    }

    private void <init>()
    {
        com.android.server.locksettings.recoverablekeystore.KeySyncUtils r0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.KeySyncUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] calculateThmKfHash(byte[]) throws java.security.NoSuchAlgorithmException
    {
        byte[] r0, $r2, $r3;
        java.security.MessageDigest r1;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        $r2 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] THM_KF_HASH_PREFIX>;

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>($r2);

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>(r0);

        $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        return $r3;
    }

    static transient byte[] concat(byte[][])
    {
        byte[][] r0;
        byte[] r1, r2, $r3;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;

        r0 := @parameter0: byte[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        $r3 = r0[i5];

        $i2 = lengthof $r3;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r1 = newarray (byte)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label4;

        r2 = r0[i8];

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i6, $i0);

        $i1 = lengthof r2;

        i6 = i6 + $i1;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r1;
    }

    public static byte[] decryptApplicationKey(byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.AEADBadTagException
    {
        byte[] r0, r1, $r3, $r4, r5, r6;
        byte[][] $r2;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r5 := @parameter2: byte[];

        if r5 != null goto label1;

        r6 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] ENCRYPTED_APPLICATION_KEY_HEADER>;

        goto label2;

     label1:
        $r2 = newarray (byte[])[2];

        $r3 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] ENCRYPTED_APPLICATION_KEY_HEADER>;

        $r2[0] = $r3;

        $r2[1] = r5;

        r6 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>($r2);

     label2:
        $r4 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] decrypt(java.security.PrivateKey,byte[],byte[],byte[])>(null, r0, r6, r1);

        return $r4;
    }

    public static byte[] decryptRecoveryClaimResponse(byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.AEADBadTagException
    {
        byte[] r0, r1, r2, $r4, $r5, $r6;
        byte[][] $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        $r3 = newarray (byte[])[2];

        $r4 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] RECOVERY_RESPONSE_HEADER>;

        $r3[0] = $r4;

        $r3[1] = r1;

        $r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>($r3);

        $r6 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] decrypt(java.security.PrivateKey,byte[],byte[],byte[])>(null, r0, $r5, r2);

        return $r6;
    }

    public static byte[] decryptRecoveryKey(byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.AEADBadTagException
    {
        byte[] r0, r1, $r2, $r3;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $r2 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] LOCALLY_ENCRYPTED_RECOVERY_KEY_HEADER>;

        $r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] decrypt(java.security.PrivateKey,byte[],byte[],byte[])>(null, r0, $r2, r1);

        return $r3;
    }

    public static java.security.PublicKey deserializePublicKey(byte[]) throws java.security.spec.InvalidKeySpecException
    {
        java.security.KeyFactory r0;
        java.security.spec.X509EncodedKeySpec $r1;
        java.security.PublicKey $r2;
        java.lang.Throwable $r3;
        java.lang.RuntimeException $r4;
        byte[] r5;

        r5 := @parameter0: byte[];

     label1:
        r0 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("EC");

     label2:
        $r1 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r1.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r5);

        $r2 = virtualinvoke r0.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r1);

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.util.Map encryptKeysWithRecoveryKey(javax.crypto.SecretKey, java.util.Map) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.SecretKey r0, r5;
        java.util.Map r1;
        java.util.Iterator r3;
        java.lang.String r4;
        java.util.HashMap $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r9, $r11, $r12, $r14;
        android.util.Pair $r10, $r13;
        byte[][] $r15;
        byte[] $r16, $r17, $r18, $r19, r21, r22;

        r0 := @parameter0: javax.crypto.SecretKey;

        r1 := @parameter1: java.util.Map;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r10 = (android.util.Pair) $r9;

        $r11 = $r10.<android.util.Pair: java.lang.Object first>;

        r5 = (javax.crypto.SecretKey) $r11;

        $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r13 = (android.util.Pair) $r12;

        $r14 = $r13.<android.util.Pair: java.lang.Object second>;

        r21 = (byte[]) $r14;

        if r21 != null goto label2;

        r22 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] ENCRYPTED_APPLICATION_KEY_HEADER>;

        goto label3;

     label2:
        $r15 = newarray (byte[])[2];

        $r16 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] ENCRYPTED_APPLICATION_KEY_HEADER>;

        $r15[0] = $r16;

        $r15[1] = r21;

        r22 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>($r15);

     label3:
        $r17 = interfaceinvoke r0.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r18 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r19 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encrypt(java.security.PublicKey,byte[],byte[],byte[])>(null, $r17, r22, $r18);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r19);

        goto label1;

     label4:
        return $r6;
    }

    public static byte[] encryptRecoveryClaim(java.security.PublicKey, byte[], byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        java.security.PublicKey r0;
        byte[] r1, r2, r3, r4, $r6, $r7, $r9, $r10;
        byte[][] $r5, $r8;

        r0 := @parameter0: java.security.PublicKey;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        r4 := @parameter4: byte[];

        $r5 = newarray (byte[])[3];

        $r6 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] RECOVERY_CLAIM_HEADER>;

        $r5[0] = $r6;

        $r5[1] = r1;

        $r5[2] = r2;

        $r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>($r5);

        $r8 = newarray (byte[])[2];

        $r8[0] = r3;

        $r8[1] = r4;

        $r9 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>($r8);

        $r10 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encrypt(java.security.PublicKey,byte[],byte[],byte[])>(r0, null, $r7, $r9);

        return $r10;
    }

    public static byte[] generateKeyClaimant()
    {
        byte[] r1;
        java.security.SecureRandom $r2;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        r1 = newarray (byte)[16];

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        return r1;
    }

    public static javax.crypto.SecretKey generateRecoveryKey() throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.KeyGenerator r0;
        java.security.SecureRandom $r1;
        javax.crypto.SecretKey $r2;

        r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)>(256, $r1);

        $r2 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        return $r2;
    }

    static byte[] locallyEncryptRecoveryKey(byte[], javax.crypto.SecretKey) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        byte[] r0, $r2, $r3, $r4;
        javax.crypto.SecretKey r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: javax.crypto.SecretKey;

        $r2 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] LOCALLY_ENCRYPTED_RECOVERY_KEY_HEADER>;

        $r3 = interfaceinvoke r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r4 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encrypt(java.security.PublicKey,byte[],byte[],byte[])>(null, r0, $r2, $r3);

        return $r4;
    }

    public static byte[] packVaultParams(java.security.PublicKey, long, int, byte[])
    {
        java.security.PublicKey r0;
        long l0;
        int i1, $i2, $i3;
        byte[] r1, $r5, $r10;
        java.nio.ByteBuffer $r2, $r4, $r6, $r7, $r8, $r9;
        java.nio.ByteOrder $r3;

        r0 := @parameter0: java.security.PublicKey;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        $i2 = lengthof r1;

        $i3 = $i2 + 77;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encodePublicKey(java.security.PublicKey)>(r0);

        $r6 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r5);

        $r7 = virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        $r8 = virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i1);

        $r9 = virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        $r10 = virtualinvoke $r9.<java.nio.ByteBuffer: byte[] array()>();

        return $r10;
    }

    public static byte[] thmEncryptRecoveryKey(java.security.PublicKey, byte[], byte[], javax.crypto.SecretKey) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        java.security.PublicKey r0;
        byte[] r1, r2, $r3, $r5, $r6, $r7, r9;
        byte[][] $r4;
        javax.crypto.SecretKey r8;

        r0 := @parameter0: java.security.PublicKey;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r8 := @parameter3: javax.crypto.SecretKey;

        r9 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] locallyEncryptRecoveryKey(byte[],javax.crypto.SecretKey)>(r1, r8);

        $r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] calculateThmKfHash(byte[])>(r1);

        $r4 = newarray (byte[])[2];

        $r5 = <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] THM_ENCRYPTED_RECOVERY_KEY_HEADER>;

        $r4[0] = $r5;

        $r4[1] = r2;

        $r6 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] concat(byte[][])>($r4);

        $r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encrypt(java.security.PublicKey,byte[],byte[],byte[])>(r0, $r3, $r6, r9);

        return $r7;
    }
}
