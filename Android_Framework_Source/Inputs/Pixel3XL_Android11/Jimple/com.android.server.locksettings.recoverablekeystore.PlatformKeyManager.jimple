public class com.android.server.locksettings.recoverablekeystore.PlatformKeyManager extends java.lang.Object
{
    private static final java.lang.String ANDROID_KEY_STORE_PROVIDER;
    private static final java.lang.String DECRYPT_KEY_ALIAS_SUFFIX;
    private static final java.lang.String ENCRYPT_KEY_ALIAS_SUFFIX;
    private static final byte[] GCM_INSECURE_NONCE_BYTES;
    private static final int GCM_TAG_LENGTH_BITS;
    private static final java.lang.String KEY_ALGORITHM;
    private static final java.lang.String KEY_ALIAS_PREFIX;
    private static final int KEY_SIZE_BITS;
    private static final java.lang.String KEY_WRAP_CIPHER_ALGORITHM;
    static final int MIN_GENERATION_ID_FOR_UNLOCKED_DEVICE_REQUIRED;
    private static final java.lang.String TAG;
    private static final int USER_AUTHENTICATION_VALIDITY_DURATION_SECONDS;
    private final android.content.Context mContext;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase;
    private final com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore;

    static void <clinit>()
    {
        byte[] $r0;

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int USER_AUTHENTICATION_VALIDITY_DURATION_SECONDS> = 15;

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String TAG> = "PlatformKeyManager";

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int MIN_GENERATION_ID_FOR_UNLOCKED_DEVICE_REQUIRED> = 1000000;

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String KEY_WRAP_CIPHER_ALGORITHM> = "AES/GCM/NoPadding";

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int KEY_SIZE_BITS> = 256;

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String KEY_ALIAS_PREFIX> = "com.android.server.locksettings.recoverablekeystore/platform/";

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String KEY_ALGORITHM> = "AES";

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int GCM_TAG_LENGTH_BITS> = 128;

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String ENCRYPT_KEY_ALIAS_SUFFIX> = "encrypt";

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String DECRYPT_KEY_ALIAS_SUFFIX> = "decrypt";

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String ANDROID_KEY_STORE_PROVIDER> = "AndroidKeyStore";

        $r0 = newarray (byte)[12];

        <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: byte[] GCM_INSECURE_NONCE_BYTES> = $r0;

        return;
    }

    void <init>(android.content.Context, com.android.server.locksettings.recoverablekeystore.KeyStoreProxy, com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        android.content.Context r1;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxy r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy;

        r3 := @parameter2: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore> = r2;

        r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: android.content.Context mContext> = r1;

        r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase> = r3;

        return;
    }

    private void ensureDecryptionKeyIsValid(int, com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey) throws java.security.UnrecoverableKeyException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0;
        javax.crypto.Cipher r1;
        android.security.keystore.AndroidKeyStoreSecretKey r2;
        byte[] $r3;
        android.security.keystore.KeyPermanentlyInvalidatedException $r4;
        java.lang.Object[] $r5;
        java.util.Locale $r6;
        java.lang.Integer $r7;
        java.lang.String $r8, $r10;
        java.security.UnrecoverableKeyException $r9;
        java.lang.Throwable $r11;
        com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey r12;
        javax.crypto.spec.GCMParameterSpec r13;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        r12 := @parameter1: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey;

     label1:
        r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        r2 = virtualinvoke r12.<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: android.security.keystore.AndroidKeyStoreSecretKey getKey()>();

        r13 = new javax.crypto.spec.GCMParameterSpec;

        $r3 = <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: byte[] GCM_INSECURE_NONCE_BYTES>;

        specialinvoke r13.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, $r3);

        virtualinvoke r1.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(4, r2, r13);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "The platform key for user %d became invalid.", $r5);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PlatformKeyManager", $r8);

        $r9 = new java.security.UnrecoverableKeyException;

        $r10 = virtualinvoke $r4.<android.security.keystore.KeyPermanentlyInvalidatedException: java.lang.String getMessage()>();

        specialinvoke $r9.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch android.security.keystore.KeyPermanentlyInvalidatedException from label1 to label2 with label5;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.InvalidKeyException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label3;
    }

    private static javax.crypto.SecretKey generateAesKey() throws java.security.NoSuchAlgorithmException
    {
        javax.crypto.KeyGenerator r0;
        javax.crypto.SecretKey $r1;

        r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES");

        virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int)>(256);

        $r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>();

        return $r1;
    }

    private void generateAndLoadKey(int, int) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        java.lang.String r1, r2, $r27;
        javax.crypto.SecretKey r3;
        long l2;
        android.security.keystore.KeyProtection$Builder $r4, $r6, $r11, $r18, $r20, $r22, r29;
        java.lang.String[] $r5, $r7, $r19, $r21;
        android.service.gatekeeper.IGateKeeperService $r10;
        byte $b3;
        java.security.KeyStore$SecretKeyEntry $r13, $r16;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxy $r14, $r17;
        android.security.keystore.KeyProtection $r15, $r23;
        java.lang.StringBuilder $r24;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getEncryptAlias(int,int)>(i0, i1);

        r2 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getDecryptAlias(int,int)>(i0, i1);

        r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: javax.crypto.SecretKey generateAesKey()>();

        $r4 = new android.security.keystore.KeyProtection$Builder;

        specialinvoke $r4.<android.security.keystore.KeyProtection$Builder: void <init>(int)>(2);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "GCM";

        $r6 = virtualinvoke $r4.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[])>($r5);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "NoPadding";

        r29 = virtualinvoke $r6.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])>($r7);

        if i0 != 0 goto label1;

        virtualinvoke r29.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUnlockedDeviceRequired(boolean)>(1);

        goto label3;

     label1:
        virtualinvoke r29.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationRequired(boolean)>(1);

        virtualinvoke r29.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setUserAuthenticationValidityDurationSeconds(int)>(15);

        $r10 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: android.service.gatekeeper.IGateKeeperService getGateKeeperService()>();

        l2 = interfaceinvoke $r10.<android.service.gatekeeper.IGateKeeperService: long getSecureUserId(int)>(i0);

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label2;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No SID available for user ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PlatformKeyManager", $r27);

        return;

     label2:
        $r11 = virtualinvoke r29.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setBoundToSpecificSecureUserId(long)>(l2);

        virtualinvoke $r11.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setCriticalToDeviceEncryption(boolean)>(1);

     label3:
        $r14 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r13 = new java.security.KeyStore$SecretKeyEntry;

        specialinvoke $r13.<java.security.KeyStore$SecretKeyEntry: void <init>(javax.crypto.SecretKey)>(r3);

        $r15 = virtualinvoke r29.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection build()>();

        interfaceinvoke $r14.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)>(r2, $r13, $r15);

        $r17 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r16 = new java.security.KeyStore$SecretKeyEntry;

        specialinvoke $r16.<java.security.KeyStore$SecretKeyEntry: void <init>(javax.crypto.SecretKey)>(r3);

        $r18 = new android.security.keystore.KeyProtection$Builder;

        specialinvoke $r18.<android.security.keystore.KeyProtection$Builder: void <init>(int)>(1);

        $r19 = newarray (java.lang.String)[1];

        $r19[0] = "GCM";

        $r20 = virtualinvoke $r18.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setBlockModes(java.lang.String[])>($r19);

        $r21 = newarray (java.lang.String)[1];

        $r21[0] = "NoPadding";

        $r22 = virtualinvoke $r20.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection$Builder setEncryptionPaddings(java.lang.String[])>($r21);

        $r23 = virtualinvoke $r22.<android.security.keystore.KeyProtection$Builder: android.security.keystore.KeyProtection build()>();

        interfaceinvoke $r17.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: void setEntry(java.lang.String,java.security.KeyStore$Entry,java.security.KeyStore$ProtectionParameter)>(r1, $r16, $r23);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void setGenerationId(int,int)>(i0, i1);

        return;
    }

    private static java.security.KeyStore getAndLoadAndroidKeyStore() throws java.security.KeyStoreException
    {
        java.lang.Throwable $r0;
        java.security.KeyStoreException $r1;
        java.security.KeyStore r2;

        r2 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>("AndroidKeyStore");

     label1:
        virtualinvoke r2.<java.security.KeyStore: void load(java.security.KeyStore$LoadStoreParameter)>(null);

     label2:
        return r2;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.security.KeyStoreException;

        specialinvoke $r1.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to load keystore.", $r0);

        throw $r1;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private java.lang.String getDecryptAlias(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r9;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.server.locksettings.recoverablekeystore/platform/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decrypt");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKeyInternal(int) throws java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.security.UnrecoverableKeyException $r6;
        com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey $r8;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxy $r9;
        java.security.Key $r10;
        android.security.keystore.AndroidKeyStoreSecretKey $r11;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int getGenerationId(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getDecryptAlias(int,int)>(i0, i1);

        $z0 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: boolean isKeyLoaded(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        $r8 = new com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey;

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r10 = interfaceinvoke $r9.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: java.security.Key getKey(java.lang.String,char[])>(r1, null);

        $r11 = (android.security.keystore.AndroidKeyStoreSecretKey) $r10;

        specialinvoke $r8.<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: void <init>(int,android.security.keystore.AndroidKeyStoreSecretKey)>(i1, $r11);

        return $r8;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeyStore doesn\'t contain key ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.security.UnrecoverableKeyException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private java.lang.String getEncryptAlias(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r9;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.android.server.locksettings.recoverablekeystore/platform/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encrypt");

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKeyInternal(int) throws java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.security.UnrecoverableKeyException $r6;
        com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey $r8;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxy $r9;
        java.security.Key $r10;
        android.security.keystore.AndroidKeyStoreSecretKey $r11;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int getGenerationId(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getEncryptAlias(int,int)>(i0, i1);

        $z0 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: boolean isKeyLoaded(int,int)>(i0, i1);

        if $z0 == 0 goto label1;

        $r8 = new com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey;

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r10 = interfaceinvoke $r9.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: java.security.Key getKey(java.lang.String,char[])>(r1, null);

        $r11 = (android.security.keystore.AndroidKeyStoreSecretKey) $r10;

        specialinvoke $r8.<com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey: void <init>(int,android.security.keystore.AndroidKeyStoreSecretKey)>(i1, $r11);

        return $r8;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeyStore doesn\'t contain key ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.security.UnrecoverableKeyException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.UnrecoverableKeyException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public static com.android.server.locksettings.recoverablekeystore.PlatformKeyManager getInstance(android.content.Context, com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException
    {
        android.content.Context r0, $r3;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r1;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager $r2;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl $r4;
        java.security.KeyStore $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        $r2 = new com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        $r3 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        $r4 = new com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl;

        $r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.security.KeyStore getAndLoadAndroidKeyStore()>();

        specialinvoke $r4.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxyImpl: void <init>(java.security.KeyStore)>($r5);

        specialinvoke $r2.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void <init>(android.content.Context,com.android.server.locksettings.recoverablekeystore.KeyStoreProxy,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)>($r3, $r4, r1);

        return $r2;
    }

    private boolean isKeyLoaded(int, int) throws java.security.KeyStoreException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxy $r1, $r3;
        java.lang.String $r2, $r4;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r2 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getEncryptAlias(int,int)>(i0, i1);

        $z0 = interfaceinvoke $r1.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: boolean containsAlias(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r4 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getDecryptAlias(int,int)>(i0, i1);

        $z1 = interfaceinvoke $r3.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: boolean containsAlias(java.lang.String)>($r4);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private void setGenerationId(int, int) throws java.io.IOException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setPlatformKeyGenerationId(int,int)>(i0, i1);

        return;
    }

    public com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKey(int) throws java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException, java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;
        com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey $r6, r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void init(int)>(i0);

     label1:
        r7 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKeyInternal(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void ensureDecryptionKeyIsValid(int,com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey)>(i0, r7);

     label2:
        return r7;

     label3:
        $r1 := @caughtexception;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "Regenerating permanently invalid Platform key for user %d.", $r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PlatformKeyManager", $r5);

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void regenerate(int)>(i0);

        $r6 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKeyInternal(int)>(i0);

        return $r6;

        catch java.security.UnrecoverableKeyException from label1 to label2 with label3;
    }

    public com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKey(int) throws java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.NoSuchAlgorithmException, java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0;
        java.lang.Throwable $r2;
        java.lang.Object[] $r3;
        java.util.Locale $r4;
        java.lang.Integer $r5;
        java.lang.String $r6;
        com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey $r7, r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void init(int)>(i0);

     label1:
        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey getDecryptKeyInternal(int)>(i0);

        r8 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKeyInternal(int)>(i0);

     label2:
        return r8;

     label3:
        $r2 := @caughtexception;

        $r4 = <java.util.Locale: java.util.Locale US>;

        $r3 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r4, "Regenerating permanently invalid Platform key for user %d.", $r3);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PlatformKeyManager", $r6);

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void regenerate(int)>(i0);

        $r7 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKeyInternal(int)>(i0);

        return $r7;

        catch java.security.UnrecoverableKeyException from label1 to label2 with label3;
    }

    android.service.gatekeeper.IGateKeeperService getGateKeeperService()
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        android.service.gatekeeper.IGateKeeperService $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        $r1 = staticinvoke <android.security.GateKeeper: android.service.gatekeeper.IGateKeeperService getService()>();

        return $r1;
    }

    public int getGenerationId(int)
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, $i1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $i1 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int getPlatformKeyGenerationId(int)>(i0);

        return $i1;
    }

    void init(int) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, $i2, i5, i6;
        boolean $z0;
        java.lang.Object[] $r1, $r5;
        java.util.Locale $r2, $r6;
        java.lang.Integer $r3, $r7;
        java.lang.String $r4, $r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i5 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int getGenerationId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: boolean isKeyLoaded(int,int)>(i0, i5);

        if $z0 == 0 goto label1;

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "Platform key generation %d exists already.", $r5);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PlatformKeyManager", $r8);

        return;

     label1:
        if i5 != -1 goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PlatformKeyManager", "Generating initial platform key generation ID.");

        i6 = 1;

        goto label3;

     label2:
        $r2 = <java.util.Locale: java.util.Locale US>;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r1[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r2, "Platform generation ID was %d but no entry was present in AndroidKeyStore. Generating fresh key.", $r1);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PlatformKeyManager", $r4);

        i6 = i5 + 1;

     label3:
        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i6, 1000000);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void generateAndLoadKey(int,int)>(i0, $i2);

        return;
    }

    public void invalidatePlatformKey(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.KeyStoreProxy $r2, $r4;
        java.lang.String $r3, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == -1 goto label4;

     label1:
        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r3 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getEncryptAlias(int,int)>(i0, i1);

        interfaceinvoke $r2.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: void deleteEntry(java.lang.String)>($r3);

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.KeyStoreProxy mKeyStore>;

        $r5 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: java.lang.String getDecryptAlias(int,int)>(i0, i1);

        interfaceinvoke $r4.<com.android.server.locksettings.recoverablekeystore.KeyStoreProxy: void deleteEntry(java.lang.String)>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.security.KeyStoreException from label1 to label2 with label3;
    }

    public boolean isDeviceLocked(int)
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.KeyguardManager $r3;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/KeyguardManager;");

        $r3 = (android.app.KeyguardManager) $r2;

        $z0 = virtualinvoke $r3.<android.app.KeyguardManager: boolean isDeviceLocked(int)>(i0);

        return $z0;
    }

    void regenerate(int) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.io.IOException, android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r0;
        int i0, i1, i3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: int getGenerationId(int)>(i0);

        if i1 != -1 goto label1;

        i3 = 1;

        goto label2;

     label1:
        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void invalidatePlatformKey(int,int)>(i0, i1);

        i3 = i1 + 1;

     label2:
        staticinvoke <java.lang.Math: int max(int,int)>(i1, 1000000);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: void generateAndLoadKey(int,int)>(i0, i3);

        return;
    }
}
