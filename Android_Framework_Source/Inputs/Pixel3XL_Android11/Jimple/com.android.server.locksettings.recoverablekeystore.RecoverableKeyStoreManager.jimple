public class com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager extends java.lang.Object
{
    private static final long SYNC_DELAY_MILLIS;
    private static final java.lang.String TAG;
    private static com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mInstance;
    private final com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage;
    private final com.android.server.locksettings.recoverablekeystore.storage.CleanupManager mCleanupManager;
    private final android.content.Context mContext;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase;
    private final java.util.concurrent.ScheduledExecutorService mExecutorService;
    private final com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mListenersStorage;
    private final com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager;
    private final com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator mRecoverableKeyGenerator;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mSnapshotStorage;
    private final com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper;

    void <init>(android.content.Context, com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb, com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage, java.util.concurrent.ScheduledExecutorService, com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage, com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage, com.android.server.locksettings.recoverablekeystore.PlatformKeyManager, com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage, com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper, com.android.server.locksettings.recoverablekeystore.storage.CleanupManager)
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r1, $r10;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage r2;
        java.util.concurrent.ScheduledExecutorService r3;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage r4;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage r5;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r6;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage r7;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r8;
        com.android.server.locksettings.recoverablekeystore.storage.CleanupManager r9;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator $r11;
        java.lang.Throwable $r12;
        java.lang.String $r14;
        android.content.Context r15;
        android.os.ServiceSpecificException r17;
        java.security.NoSuchAlgorithmException r18;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r15 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        r2 := @parameter2: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage;

        r3 := @parameter3: java.util.concurrent.ScheduledExecutorService;

        r4 := @parameter4: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage;

        r5 := @parameter5: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage;

        r6 := @parameter6: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager;

        r7 := @parameter7: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage;

        r8 := @parameter8: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r9 := @parameter9: com.android.server.locksettings.recoverablekeystore.storage.CleanupManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: android.content.Context mContext> = r15;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase> = r1;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage> = r2;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.concurrent.ScheduledExecutorService mExecutorService> = r3;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mListenersStorage> = r5;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mSnapshotStorage> = r4;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager> = r6;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage> = r7;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper> = r8;

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.CleanupManager mCleanupManager> = r9;

        virtualinvoke r9.<com.android.server.locksettings.recoverablekeystore.storage.CleanupManager: void verifyKnownUsers()>();

     label1:
        $r10 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $r11 = staticinvoke <com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator: com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator newInstance(com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)>($r10);

        r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator mRecoverableKeyGenerator> = $r11;

     label2:
        return;

     label3:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "AES keygen algorithm not available. AOSP must support this.", $r12);

        r17 = new android.os.ServiceSpecificException;

        r18 = (java.security.NoSuchAlgorithmException) $r12;

        $r14 = virtualinvoke r18.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke r17.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r14);

        throw r17;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private void checkRecoverKeyStorePermission()
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        android.content.Context r1;
        int i0, i1, $i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        com.android.server.locksettings.recoverablekeystore.storage.CleanupManager $r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: android.content.Context mContext>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller ");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t have RecoverKeyStore permission.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.RECOVER_KEYSTORE", $r7);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.CleanupManager mCleanupManager>;

        virtualinvoke $r8.<com.android.server.locksettings.recoverablekeystore.storage.CleanupManager: void registerRecoveryAgent(int,int)>(i0, i1);

        return;
    }

    private byte[] decryptRecoveryKey(com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry, byte[]) throws android.os.RemoteException, android.os.ServiceSpecificException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] $r1, $r2, $r3, r39, r40, r41;
        java.lang.Throwable $r4, $r11, $r18, $r25, $r32, $r35;
        java.lang.String $r7, $r10, $r14, $r17, $r21, $r24, $r28, $r31, $r34, $r37;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry r38;
        android.os.ServiceSpecificException r52, r54, r56, r57, r59, r61;
        java.lang.StringBuilder r53, r55, r58, r60;
        java.security.NoSuchAlgorithmException r62, r65;
        javax.crypto.AEADBadTagException r63, r66;
        java.security.InvalidKeyException r64, r67;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r38 := @parameter0: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry;

        r39 := @parameter1: byte[];

     label1:
        $r1 = virtualinvoke r38.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry: byte[] getKeyClaimant()>();

        $r2 = virtualinvoke r38.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry: byte[] getVaultParams()>();

        r40 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] decryptRecoveryClaimResponse(byte[],byte[],byte[])>($r1, $r2, r39);

     label2:
        $r3 = virtualinvoke r38.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry: byte[] getLskfHash()>();

        r41 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] decryptRecoveryKey(byte[],byte[])>($r3, r40);

     label3:
        return r41;

     label4:
        $r32 := @caughtexception;

        r52 = new android.os.ServiceSpecificException;

        r62 = (java.security.NoSuchAlgorithmException) $r32;

        $r34 = virtualinvoke r62.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke r52.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r34);

        throw r52;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Got AEADBadTagException during decrypting recovery key", $r4);

        r53 = new java.lang.StringBuilder;

        specialinvoke r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decrypt recovery key ");

        r63 = (javax.crypto.AEADBadTagException) $r4;

        $r7 = virtualinvoke r63.<javax.crypto.AEADBadTagException: java.lang.String getMessage()>();

        virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r54 = new android.os.ServiceSpecificException;

        $r10 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r54.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(26, $r10);

        throw r54;

     label6:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Got InvalidKeyException during decrypting recovery key", $r11);

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decrypt recovery key ");

        r64 = (java.security.InvalidKeyException) $r11;

        $r14 = virtualinvoke r64.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        r56 = new android.os.ServiceSpecificException;

        $r17 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r56.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(26, $r17);

        throw r56;

     label7:
        $r35 := @caughtexception;

        r57 = new android.os.ServiceSpecificException;

        r65 = (java.security.NoSuchAlgorithmException) $r35;

        $r37 = virtualinvoke r65.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke r57.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r37);

        throw r57;

     label8:
        $r18 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Got AEADBadTagException during decrypting recovery claim response", $r18);

        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decrypt recovery key ");

        r66 = (javax.crypto.AEADBadTagException) $r18;

        $r21 = virtualinvoke r66.<javax.crypto.AEADBadTagException: java.lang.String getMessage()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r59 = new android.os.ServiceSpecificException;

        $r24 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r59.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(26, $r24);

        throw r59;

     label9:
        $r25 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Got InvalidKeyException during decrypting recovery claim response", $r25);

        r60 = new java.lang.StringBuilder;

        specialinvoke r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decrypt recovery key ");

        r67 = (java.security.InvalidKeyException) $r25;

        $r28 = virtualinvoke r67.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        virtualinvoke r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r61 = new android.os.ServiceSpecificException;

        $r31 = virtualinvoke r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r61.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(26, $r31);

        throw r61;

        catch java.security.InvalidKeyException from label1 to label2 with label9;
        catch javax.crypto.AEADBadTagException from label1 to label2 with label8;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label7;
        catch java.security.InvalidKeyException from label2 to label3 with label6;
        catch javax.crypto.AEADBadTagException from label2 to label3 with label5;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    private java.lang.String getAlias(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0, i1;
        java.lang.String r1, $r3;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage>;

        $r3 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: java.lang.String getGrantAlias(int,int,java.lang.String)>(i0, i1, r1);

        return $r3;
    }

    public static com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager getInstance(android.content.Context, android.security.KeyStore)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager r1;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage r3;
        android.content.Context r5, $r10, r15;
        java.util.concurrent.ScheduledExecutorService r6;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager $r9, r23, r28;
        java.lang.Throwable $r11, $r12, $r13;
        java.lang.String $r14;
        android.security.KeyStore r16;
        com.android.server.locksettings.recoverablekeystore.storage.CleanupManager r17;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage r25;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage r26;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r27;
        android.os.ServiceSpecificException r29;
        java.lang.RuntimeException r30;
        java.security.KeyStoreException r31;

        r15 := @parameter0: android.content.Context;

        r16 := @parameter1: android.security.KeyStore;

        entermonitor class "Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;";

     label01:
        $r9 = <com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mInstance>;

        if $r9 != null goto label10;

        r0 = staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb newInstance(android.content.Context)>(r15);

     label02:
        r1 = staticinvoke <com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager getInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb)>(r15, r0);

        r2 = staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage getInstance(android.security.KeyStore)>(r16);

     label03:
        r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage newInstance()>();

     label04:
        $r10 = virtualinvoke r15.<android.content.Context: android.content.Context getApplicationContext()>();

        r17 = staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.CleanupManager: com.android.server.locksettings.recoverablekeystore.storage.CleanupManager getInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage)>($r10, r3, r0, r2);

        r28 = new com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r5 = virtualinvoke r15.<android.content.Context: android.content.Context getApplicationContext()>();

        r25 = new com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage;

        specialinvoke r25.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void <init>()>();

        r6 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(1);

        r26 = new com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage;

        specialinvoke r26.<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: void <init>()>();

        r27 = new com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        specialinvoke r27.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: void <init>()>();

        specialinvoke r28.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void <init>(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage,java.util.concurrent.ScheduledExecutorService,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage,com.android.server.locksettings.recoverablekeystore.PlatformKeyManager,com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage,com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper,com.android.server.locksettings.recoverablekeystore.storage.CleanupManager)>(r5, r0, r25, r6, r3, r26, r1, r2, r27, r17);

        <com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mInstance> = r28;

     label05:
        goto label10;

     label06:
        $r13 := @caughtexception;

     label07:
        r29 = new android.os.ServiceSpecificException;

        r31 = (java.security.KeyStoreException) $r13;

        $r14 = virtualinvoke r31.<java.security.KeyStoreException: java.lang.String getMessage()>();

        specialinvoke r29.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r14);

        throw r29;

     label08:
        $r12 := @caughtexception;

     label09:
        r30 = new java.lang.RuntimeException;

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw r30;

     label10:
        r23 = <com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager mInstance>;

     label11:
        exitmonitor class "Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;";

        return r23;

     label12:
        $r11 := @caughtexception;

        exitmonitor class "Lcom/android/server/locksettings/recoverablekeystore/RecoverableKeyStoreManager;";

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.security.NoSuchAlgorithmException from label02 to label03 with label08;
        catch java.security.KeyStoreException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private java.util.Map importKeyMaterials(int, int, java.util.Map) throws java.security.KeyStoreException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0, i1, $i2;
        java.util.Map r1;
        java.util.Iterator r3;
        java.lang.String r4, r5, $r14;
        android.util.ArrayMap $r6;
        java.util.Set $r7;
        boolean $z0;
        java.lang.Object $r8, $r10;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage $r9;
        byte[] $r11;
        java.lang.Object[] $r12;
        java.util.Locale $r13;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Map;

        $r6 = new android.util.ArrayMap;

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r6.<android.util.ArrayMap: void <init>(int)>($i2);

        $r7 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r8;

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage>;

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r11 = (byte[]) $r10;

        virtualinvoke $r9.<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: void setSymmetricKeyEntry(int,int,java.lang.String,byte[])>(i0, i1, r4, $r11);

        r5 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String getAlias(int,int,java.lang.String)>(i0, i1, r4);

        $r13 = <java.util.Locale: java.util.Locale US>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = r4;

        $r12[1] = r5;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r13, "Import %s -> %s", $r12);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r14);

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        goto label1;

     label2:
        return $r6;
    }

    private boolean publicKeysMatch(java.security.PublicKey, byte[])
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] r1, $r2, r4;
        int $i0;
        boolean $z0;
        java.security.PublicKey r3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r3 := @parameter0: java.security.PublicKey;

        r1 := @parameter1: byte[];

        r4 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encodePublicKey(java.security.PublicKey)>(r3);

        $i0 = lengthof r4;

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i0);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r4, $r2);

        return $z0;
    }

    private java.util.Map recoverApplicationKeys(byte[], java.util.List) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.util.Iterator r2;
        java.lang.String r3, $r13, $r18, $r21, $r24, $r29;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        byte[] $r7, r30, r33, r34;
        java.lang.Throwable $r9, $r22, $r25;
        java.util.List r31;
        android.security.keystore.recovery.WrappedApplicationKey r32;
        java.util.HashMap r41;
        java.lang.StringBuilder r42, r43, r44;
        android.os.ServiceSpecificException r45, r46, r47;
        java.security.InvalidKeyException r48;
        java.security.NoSuchAlgorithmException r49;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r30 := @parameter0: byte[];

        r31 := @parameter1: java.util.List;

        r41 = new java.util.HashMap;

        specialinvoke r41.<java.util.HashMap: void <init>()>();

        r2 = interfaceinvoke r31.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r32 = (android.security.keystore.recovery.WrappedApplicationKey) $r6;

        r3 = virtualinvoke r32.<android.security.keystore.recovery.WrappedApplicationKey: java.lang.String getAlias()>();

        r33 = virtualinvoke r32.<android.security.keystore.recovery.WrappedApplicationKey: byte[] getEncryptedKeyMaterial()>();

        r34 = virtualinvoke r32.<android.security.keystore.recovery.WrappedApplicationKey: byte[] getMetadata()>();

     label02:
        $r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] decryptApplicationKey(byte[],byte[],byte[])>(r30, r33, r34);

        virtualinvoke r41.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7);

     label03:
        goto label05;

     label04:
        $r25 := @caughtexception;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got AEADBadTagException during decrypting application key with alias: ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r29 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", $r29, $r25);

     label05:
        goto label01;

     label06:
        $r9 := @caughtexception;

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got InvalidKeyException during decrypting application key with alias: ");

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", $r13, $r9);

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to recover key with alias \'");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        r48 = (java.security.InvalidKeyException) $r9;

        $r18 = virtualinvoke r48.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        r45 = new android.os.ServiceSpecificException;

        $r21 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r45.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(26, $r21);

        throw r45;

     label07:
        $r22 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Missing SecureBox algorithm. AOSP required to support this.", $r22);

        r46 = new android.os.ServiceSpecificException;

        r49 = (java.security.NoSuchAlgorithmException) $r22;

        $r24 = virtualinvoke r49.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke r46.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r24);

        throw r46;

     label08:
        $z1 = interfaceinvoke r31.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        $z2 = virtualinvoke r41.<java.util.HashMap: boolean isEmpty()>();

        if $z2 != 0 goto label09;

        goto label10;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Failed to recover any of the application keys.");

        r47 = new android.os.ServiceSpecificException;

        specialinvoke r47.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(26, "Failed to recover any of the application keys.");

        throw r47;

     label10:
        return r41;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label07;
        catch java.security.InvalidKeyException from label02 to label03 with label06;
        catch javax.crypto.AEADBadTagException from label02 to label03 with label04;
    }

    public void closeSession(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.lang.String r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage $r3;
        int $i0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "invalid session");

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void remove(int,java.lang.String)>($i0, r1);

        return;
    }

    public java.lang.String generateKey(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String generateKeyWithMetadata(java.lang.String,byte[])>(r1, null);

        return $r2;
    }

    public java.lang.String generateKeyWithMetadata(java.lang.String, byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey r1;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager $r3;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator $r4;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage $r5;
        java.lang.Throwable $r6, $r9, $r11;
        java.lang.String $r8, $r13, r14, r17;
        byte[] r15, r16;
        android.os.ServiceSpecificException r21, r22;
        java.lang.RuntimeException r23;
        java.lang.Exception r24, r25;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r14 := @parameter0: java.lang.String;

        r15 := @parameter1: byte[];

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r14, "alias is null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label1:
        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKey(int)>(i1);

     label2:
        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator mRecoverableKeyGenerator>;

        r16 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator: byte[] generateAndStoreKey(com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey,int,int,java.lang.String,byte[])>(r1, i1, i0, r14, r15);

        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage>;

        virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: void setSymmetricKeyEntry(int,int,java.lang.String,byte[])>(i1, i0, r14, r16);

        r17 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String getAlias(int,int,java.lang.String)>(i1, i0, r14);

     label3:
        return r17;

     label4:
        $r11 := @caughtexception;

        r21 = new android.os.ServiceSpecificException;

        r24 = (java.lang.Exception) $r11;

        $r13 = virtualinvoke r24.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r21.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r13);

        throw r21;

     label5:
        $r6 := @caughtexception;

        r22 = new android.os.ServiceSpecificException;

        r25 = (java.lang.Exception) $r6;

        $r8 = virtualinvoke r25.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r22.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r8);

        throw r22;

     label6:
        $r9 := @caughtexception;

        r23 = new java.lang.RuntimeException;

        specialinvoke r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw r23;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.KeyStoreException from label1 to label2 with label5;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label5;
        catch java.io.IOException from label1 to label2 with label5;
        catch java.security.KeyStoreException from label2 to label3 with label4;
        catch java.security.InvalidKeyException from label2 to label3 with label4;
        catch com.android.server.locksettings.recoverablekeystore.RecoverableKeyStorageException from label2 to label3 with label4;
    }

    public java.lang.String getKey(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.lang.String r1, $r3;
        int i0, $i1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "alias is null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String getAlias(int,int,java.lang.String)>($i1, i0, r1);

        return $r3;
    }

    public android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot() throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0;
        android.security.keystore.recovery.KeyChainSnapshot r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage $r2;
        android.os.ServiceSpecificException $r3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mSnapshotStorage>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage: android.security.keystore.recovery.KeyChainSnapshot get(int)>(i0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new android.os.ServiceSpecificException;

        specialinvoke $r3.<android.os.ServiceSpecificException: void <init>(int)>(21);

        throw $r3;
    }

    public int[] getRecoverySecretTypes() throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1;
        int $i0, $i1;
        int[] $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int[] getRecoverySecretTypes(int,int)>($i0, $i1);

        return $r2;
    }

    public java.util.Map getRecoveryStatus() throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1;
        int $i0;
        java.util.Map $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.util.Map getStatusForAllKeys(int)>($i0);

        return $r2;
    }

    public java.lang.String importKey(java.lang.String, byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.lang.String r1, $r3;
        byte[] r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String importKeyWithMetadata(java.lang.String,byte[],byte[])>(r1, r2, null);

        return $r3;
    }

    public java.lang.String importKeyWithMetadata(java.lang.String, byte[], byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] r1, r2;
        int i0, i1, $i2;
        com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey r3;
        com.android.server.locksettings.recoverablekeystore.PlatformKeyManager $r7;
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator $r8;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage $r9;
        java.lang.Throwable $r10, $r12, $r15;
        java.lang.String $r14, $r17, r18, r19;
        android.os.ServiceSpecificException r23, r24, r26;
        java.lang.RuntimeException r25;
        java.lang.Exception r27, r28;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r18 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r18, "alias is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "keyBytes is null");

        $i2 = lengthof r1;

        if $i2 != 32 goto label7;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label1:
        $r7 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.PlatformKeyManager mPlatformKeyManager>;

        r3 = virtualinvoke $r7.<com.android.server.locksettings.recoverablekeystore.PlatformKeyManager: com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey getEncryptKey(int)>(i1);

     label2:
        $r8 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator mRecoverableKeyGenerator>;

        virtualinvoke $r8.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyGenerator: void importKey(com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey,int,int,java.lang.String,byte[],byte[])>(r3, i1, i0, r18, r1, r2);

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage>;

        virtualinvoke $r9.<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: void setSymmetricKeyEntry(int,int,java.lang.String,byte[])>(i1, i0, r18, r1);

        r19 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String getAlias(int,int,java.lang.String)>(i1, i0, r18);

     label3:
        return r19;

     label4:
        $r12 := @caughtexception;

        r23 = new android.os.ServiceSpecificException;

        r27 = (java.lang.Exception) $r12;

        $r14 = virtualinvoke r27.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r23.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r14);

        throw r23;

     label5:
        $r15 := @caughtexception;

        r24 = new android.os.ServiceSpecificException;

        r28 = (java.lang.Exception) $r15;

        $r17 = virtualinvoke r28.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke r24.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r17);

        throw r24;

     label6:
        $r10 := @caughtexception;

        r25 = new java.lang.RuntimeException;

        specialinvoke r25.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r10);

        throw r25;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "The given key for import doesn\'t have the required length 256");

        r26 = new android.os.ServiceSpecificException;

        specialinvoke r26.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(27, "The given key does not contain 256 bits.");

        throw r26;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.KeyStoreException from label1 to label2 with label5;
        catch java.security.UnrecoverableKeyException from label1 to label2 with label5;
        catch java.io.IOException from label1 to label2 with label5;
        catch java.security.KeyStoreException from label2 to label3 with label4;
        catch java.security.InvalidKeyException from label2 to label3 with label4;
        catch com.android.server.locksettings.recoverablekeystore.RecoverableKeyStorageException from label2 to label3 with label4;
    }

    void initRecoveryService(java.lang.String, byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0, i1;
        long l2, l3, $l8, $l11, $l12, $l17, $l19, $l28;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r2, $r3, $r13, $r55;
        boolean $z0, $z1, $z2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r5, $r7, $r10, $r12, $r49, $r58, r59, r60;
        byte $b7, $b9, $b13, $b18, $b20, $b29, $b30;
        java.lang.Long $r11, r51;
        java.lang.String $r22, $r28, $r31, $r34, $r39, $r41, $r43, r44, r46, r47, $r54;
        java.lang.Throwable $r29, $r35, r64;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException $r32;
        com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException $r36;
        byte[] r45;
        com.android.server.locksettings.recoverablekeystore.certificate.CertXml r50;
        java.security.cert.X509Certificate r56;
        java.security.cert.CertPath r57;
        java.lang.StringBuilder r68, r69, r71, r77;
        android.os.ServiceSpecificException r70, r73, r74, r75, r76, r78, r79, r80;
        java.security.SecureRandom r72;
        java.security.cert.CertificateEncodingException r81;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r44 := @parameter0: java.lang.String;

        r45 := @parameter1: byte[];

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        r46 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r44);

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        $z0 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isValidRootCertificateAlias(java.lang.String)>(r46);

        if $z0 == 0 goto label26;

        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        r47 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.String getActiveRootOfTrust(int,int)>(i0, i1);

        if r47 != null goto label01;

        r68 = new java.lang.StringBuilder;

        specialinvoke r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Root of trust for recovery agent + ");

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is assigned for the first time to ");

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        $r28 = virtualinvoke r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r28);

        goto label02;

     label01:
        $z1 = virtualinvoke r47.<java.lang.String: boolean equals(java.lang.Object)>(r46);

        if $z1 != 0 goto label02;

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Root of trust for recovery agent ");

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is changed to ");

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from  ");

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        $r22 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r22);

     label02:
        $r49 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $l28 = virtualinvoke $r49.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setActiveRootOfTrust(int,int,java.lang.String)>(i0, i1, r46);

        $b29 = $l28 cmp 0L;

        if $b29 < 0 goto label25;

     label03:
        r50 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertXml: com.android.server.locksettings.recoverablekeystore.certificate.CertXml parse(byte[])>(r45);

     label04:
        l2 = virtualinvoke r50.<com.android.server.locksettings.recoverablekeystore.certificate.CertXml: long getSerial()>();

        $r7 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        r51 = virtualinvoke $r7.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getRecoveryServiceCertSerial(int,int,java.lang.String)>(i0, i1, r46);

        if r51 == null goto label06;

        $l17 = virtualinvoke r51.<java.lang.Long: long longValue()>();

        $b18 = $l17 cmp l2;

        if $b18 < 0 goto label06;

        $r13 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        $z2 = virtualinvoke $r13.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isTestOnlyCertificateAlias(java.lang.String)>(r46);

        if $z2 != 0 goto label06;

        $l19 = virtualinvoke r51.<java.lang.Long: long longValue()>();

        $b20 = $l19 cmp l2;

        if $b20 != 0 goto label05;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "The cert file serial number is the same, so skip updating.");

        return;

     label05:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "The cert file serial number is older than the one in database.");

        r70 = new android.os.ServiceSpecificException;

        specialinvoke r70.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(29, "The cert file serial number is older than the one in database.");

        throw r70;

     label06:
        r71 = new java.lang.StringBuilder;

        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating the certificate with the new serial number ");

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r54 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r54);

        $r55 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        r56 = virtualinvoke $r55.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.security.cert.X509Certificate getRootCertificate(java.lang.String)>(r46);

     label07:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Getting and validating a random endpoint certificate");

        r57 = virtualinvoke r50.<com.android.server.locksettings.recoverablekeystore.certificate.CertXml: java.security.cert.CertPath getRandomEndpointCert(java.security.cert.X509Certificate)>(r56);

     label08:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Saving the randomly chosen endpoint certificate to database");

        $r58 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        l3 = virtualinvoke $r58.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoveryServiceCertPath(int,int,java.lang.String,java.security.cert.CertPath)>(i0, i1, r46, r57);

     label09:
        $b30 = l3 cmp 0L;

        if $b30 <= 0 goto label17;

     label10:
        r59 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

     label11:
        $l8 = virtualinvoke r59.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoveryServiceCertSerial(int,int,java.lang.String,long)>(i0, i1, r46, l2);

        $b9 = $l8 cmp 0L;

        if $b9 < 0 goto label16;

        $r10 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $r11 = virtualinvoke $r10.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>(i0, i1);

        if $r11 == null goto label13;

        $r12 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        virtualinvoke $r12.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>(i0, i1, 1);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "This is a certificate change. Snapshot must be updated");

     label12:
        goto label14;

     label13:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "This is a certificate change. Snapshot didn\'t exist");

     label14:
        r60 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        r72 = new java.security.SecureRandom;

        specialinvoke r72.<java.security.SecureRandom: void <init>()>();

        $l11 = virtualinvoke r72.<java.security.SecureRandom: long nextLong()>();

        $l12 = virtualinvoke r60.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setCounterId(int,int,long)>(i0, i1, $l11);

        $b13 = $l12 cmp 0L;

        if $b13 >= 0 goto label18;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Failed to set the counter id in the local DB.");

     label15:
        goto label18;

     label16:
        r73 = new android.os.ServiceSpecificException;

        specialinvoke r73.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, "Failed to set the certificate serial number in the local DB.");

        throw r73;

     label17:
        $b7 = l3 cmp 0L;

        if $b7 < 0 goto label19;

     label18:
        return;

     label19:
        r74 = new android.os.ServiceSpecificException;

        specialinvoke r74.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, "Failed to set the certificate path in the local DB.");

        throw r74;

     label20:
        $r29 := @caughtexception;

        r64 = $r29;

        goto label22;

     label21:
        $r35 := @caughtexception;

        r64 = $r35;

     label22:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Failed to encode CertPath", r64);

        r75 = new android.os.ServiceSpecificException;

        r81 = (java.security.cert.CertificateEncodingException) r64;

        $r31 = virtualinvoke r81.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>();

        specialinvoke r75.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, $r31);

        throw r75;

     label23:
        $r32 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Invalid endpoint cert", $r32);

        r76 = new android.os.ServiceSpecificException;

        $r34 = virtualinvoke $r32.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: java.lang.String getMessage()>();

        specialinvoke r76.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(28, $r34);

        throw r76;

     label24:
        $r36 := @caughtexception;

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse the input as a cert file: ");

        $r39 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r45);

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r41);

        r78 = new android.os.ServiceSpecificException;

        $r43 = virtualinvoke $r36.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: java.lang.String getMessage()>();

        specialinvoke r78.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, $r43);

        throw r78;

     label25:
        r79 = new android.os.ServiceSpecificException;

        specialinvoke r79.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, "Failed to set the root of trust in the local DB.");

        throw r79;

     label26:
        r80 = new android.os.ServiceSpecificException;

        specialinvoke r80.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(28, "Invalid root certificate alias");

        throw r80;

        catch com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException from label03 to label04 with label24;
        catch com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException from label07 to label08 with label23;
        catch java.security.cert.CertificateEncodingException from label08 to label09 with label21;
        catch java.security.cert.CertificateEncodingException from label10 to label11 with label21;
        catch java.security.cert.CertificateEncodingException from label11 to label12 with label20;
        catch java.security.cert.CertificateEncodingException from label13 to label14 with label20;
        catch java.security.cert.CertificateEncodingException from label14 to label15 with label20;
        catch java.security.cert.CertificateEncodingException from label16 to label17 with label20;
        catch java.security.cert.CertificateEncodingException from label19 to label20 with label20;
    }

    public void initRecoveryServiceWithSigFile(java.lang.String, byte[], byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] r1, r27;
        java.security.cert.X509Certificate r2;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r3, $r6;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException $r7;
        java.lang.StringBuilder $r8, $r19;
        java.lang.String $r10, $r13, $r15, $r17, $r21, $r23, $r25, r26, r28;
        android.os.ServiceSpecificException $r16, $r24;
        com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException $r18;
        com.android.server.locksettings.recoverablekeystore.certificate.SigXml r29;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r26 := @parameter0: java.lang.String;

        r27 := @parameter1: byte[];

        r1 := @parameter2: byte[];

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        r28 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r26);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r27, "recoveryServiceCertFile is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "recoveryServiceSigFile is null");

     label1:
        r29 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.SigXml: com.android.server.locksettings.recoverablekeystore.certificate.SigXml parse(byte[])>(r1);

     label2:
        $r6 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        r2 = virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.security.cert.X509Certificate getRootCertificate(java.lang.String)>(r28);

     label3:
        virtualinvoke r29.<com.android.server.locksettings.recoverablekeystore.certificate.SigXml: void verifyFileSignature(java.security.cert.X509Certificate,byte[])>(r2, r27);

     label4:
        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void initRecoveryService(java.lang.String,byte[])>(r28, r27);

        return;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The signature over the cert file is invalid. Cert: ");

        $r10 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r27);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Sig: ");

        $r13 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r15);

        $r16 = new android.os.ServiceSpecificException;

        $r17 = virtualinvoke $r7.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: java.lang.String getMessage()>();

        specialinvoke $r16.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(28, $r17);

        throw $r16;

     label6:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse the sig file: ");

        $r21 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r23);

        $r24 = new android.os.ServiceSpecificException;

        $r25 = virtualinvoke $r18.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: java.lang.String getMessage()>();

        specialinvoke $r24.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, $r25);

        throw $r24;

        catch com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException from label1 to label2 with label6;
        catch com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException from label3 to label4 with label5;
    }

    public void lockScreenSecretAvailable(int, byte[], int)
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage $r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage $r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r3;
        android.content.Context $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        com.android.server.locksettings.recoverablekeystore.KeySyncTask $r6;
        java.util.concurrent.TimeUnit $r7;
        com.android.server.locksettings.recoverablekeystore.InsecureUserException $r9;
        java.lang.Throwable $r10, $r11;
        byte[] r12;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        i0 := @parameter0: int;

        r12 := @parameter1: byte[];

        i1 := @parameter2: int;

     label1:
        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: android.content.Context mContext>;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mSnapshotStorage>;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mListenersStorage>;

        $r6 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.KeySyncTask newInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage,int,int,byte[],boolean)>($r4, $r3, $r2, $r1, i1, i0, r12, 0);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r6, 2000L, $r7);

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Impossible - insecure user, but user just entered lock screen", $r9);

        goto label6;

     label4:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Key store error encountered during recoverable key sync", $r11);

        goto label6;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Should never happen - algorithm unavailable for KeySync", $r10);

     label6:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.KeyStoreException from label1 to label2 with label4;
        catch com.android.server.locksettings.recoverablekeystore.InsecureUserException from label1 to label2 with label3;
    }

    public void lockScreenSecretChanged(int, byte[], int)
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage $r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage $r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r3;
        android.content.Context $r4;
        java.util.concurrent.ScheduledExecutorService $r5;
        com.android.server.locksettings.recoverablekeystore.KeySyncTask $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Throwable $r9, $r11;
        com.android.server.locksettings.recoverablekeystore.InsecureUserException $r10;
        byte[] r12;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        i0 := @parameter0: int;

        r12 := @parameter1: byte[];

        i1 := @parameter2: int;

     label1:
        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.concurrent.ScheduledExecutorService mExecutorService>;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: android.content.Context mContext>;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage mSnapshotStorage>;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mListenersStorage>;

        $r6 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncTask: com.android.server.locksettings.recoverablekeystore.KeySyncTask newInstance(android.content.Context,com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb,com.android.server.locksettings.recoverablekeystore.storage.RecoverySnapshotStorage,com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage,int,int,byte[],boolean)>($r4, $r3, $r2, $r1, i1, i0, r12, 1);

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r5.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r6, 2000L, $r7);

     label2:
        goto label6;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "InsecureUserException during lock screen secret update", $r10);

        goto label6;

     label4:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Key store error encountered during recoverable key sync", $r11);

        goto label6;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Should never happen - algorithm unavailable for KeySync", $r9);

     label6:
        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.KeyStoreException from label1 to label2 with label4;
        catch com.android.server.locksettings.recoverablekeystore.InsecureUserException from label1 to label2 with label3;
    }

    public java.util.Map recoverKeyChainSnapshot(java.lang.String, byte[], java.util.List) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.util.List r1;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage $r3, $r11, $r15;
        java.lang.Object[] $r5;
        java.util.Locale $r6;
        java.lang.Integer $r7;
        java.lang.String $r8, $r13, r16;
        byte[] $r9, r17;
        java.util.Map $r10, r18;
        java.lang.Throwable $r12, $r14;
        android.os.ServiceSpecificException r22, r23;
        java.security.KeyStoreException r24;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: byte[];

        r1 := @parameter2: java.util.List;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage>;

        r2 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry get(int,java.lang.String)>(i1, r16);

        if r2 == null goto label7;

     label1:
        $r9 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] decryptRecoveryKey(com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry,byte[])>(r2, r17);

        $r10 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map recoverApplicationKeys(byte[],java.util.List)>($r9, r1);

        r18 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.util.Map importKeyMaterials(int,int,java.util.Map)>(i0, i1, $r10);

     label2:
        virtualinvoke r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry: void destroy()>();

        $r11 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage>;

        virtualinvoke $r11.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void remove(int)>(i1);

        return r18;

     label3:
        $r14 := @caughtexception;

        goto label6;

     label4:
        $r12 := @caughtexception;

     label5:
        r22 = new android.os.ServiceSpecificException;

        r24 = (java.security.KeyStoreException) $r12;

        $r13 = virtualinvoke r24.<java.security.KeyStoreException: java.lang.String getMessage()>();

        specialinvoke r22.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r13);

        throw r22;

     label6:
        virtualinvoke r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry: void destroy()>();

        $r15 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage>;

        virtualinvoke $r15.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void remove(int)>(i1);

        throw $r14;

     label7:
        r23 = new android.os.ServiceSpecificException;

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[2];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[0] = $r7;

        $r5[1] = r16;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "Application uid=%d does not have pending session \'%s\'", $r5);

        specialinvoke r23.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(24, $r8);

        throw r23;

        catch java.security.KeyStoreException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void removeKey(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r3, $r4;
        boolean $z0;
        com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage $r5;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "alias is null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $z0 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean removeKey(int,java.lang.String)>(i0, r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>(i1, i0, 1);

        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage mApplicationKeyStorage>;

        virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.ApplicationKeyStorage: void deleteEntry(int,int,java.lang.String)>(i1, i0, r1);

     label1:
        return;
    }

    public void setRecoverySecretTypes(int[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        int[] r1, r2;
        int i0, i1, $i4;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r4, $r5, $r7, $r9;
        boolean $z0;
        long $l2;
        byte $b3;
        android.os.ServiceSpecificException $r6;
        java.lang.Long $r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: int[];

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "secretTypes is null");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        r2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int[] getRecoverySecretTypes(int,int)>(i0, i1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r1, r2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Not updating secret types - same as old value.");

        return;

     label1:
        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $l2 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setRecoverySecretTypes(int,int,int[])>(i0, i1, r1);

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label5;

        $i4 = lengthof r2;

        if $i4 != 0 goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Initialized secret types.");

        return;

     label2:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Updated secret types. Snapshot pending.");

        $r7 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $r8 = virtualinvoke $r7.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>(i0, i1);

        if $r8 == null goto label3;

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        virtualinvoke $r9.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>(i0, i1, 1);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Updated secret types. Snapshot must be updated");

        goto label4;

     label3:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Updated secret types. Snapshot didn\'t exist");

     label4:
        return;

     label5:
        $r6 = new android.os.ServiceSpecificException;

        specialinvoke $r6.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, "Database error trying to set secret types.");

        throw $r6;
    }

    public void setRecoveryStatus(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r3;
        long $l3;
        byte $b4;
        android.os.ServiceSpecificException $r4;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "alias is null");

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int setRecoveryStatus(int,java.lang.String,int)>($i1, r1, i0);

        $l3 = (long) $i2;

        $b4 = $l3 cmp 0L;

        if $b4 < 0 goto label1;

        return;

     label1:
        $r4 = new android.os.ServiceSpecificException;

        specialinvoke $r4.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, "Failed to set the key recovery status in the local DB.");

        throw $r4;
    }

    public void setServerParams(byte[]) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] r1, r2;
        int i0, i1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r3, $r4, $r6, $r8;
        boolean $z0;
        long $l2;
        byte $b3;
        android.os.ServiceSpecificException $r5;
        java.lang.Long $r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        r2 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: byte[] getServerParams(int,int)>(i0, i1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Not updating server params - same as old value.");

        return;

     label1:
        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $l2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setServerParams(int,int,byte[])>(i0, i1, r1);

        $b3 = $l2 cmp 0L;

        if $b3 < 0 goto label5;

        if r2 != null goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Initialized server params.");

        return;

     label2:
        $r6 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        $r7 = virtualinvoke $r6.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getSnapshotVersion(int,int)>(i0, i1);

        if $r7 == null goto label3;

        $r8 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb mDatabase>;

        virtualinvoke $r8.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setShouldCreateSnapshot(int,int,boolean)>(i0, i1, 1);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Updated server params. Snapshot must be updated");

        goto label4;

     label3:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Updated server params. Snapshot didn\'t exist");

     label4:
        return;

     label5:
        $r5 = new android.os.ServiceSpecificException;

        specialinvoke $r5.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, "Database failure trying to set server params.");

        throw $r5;
    }

    public void setSnapshotCreatedPendingIntent(android.app.PendingIntent) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        android.app.PendingIntent r1;
        int i0;
        com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r1 := @parameter0: android.app.PendingIntent;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage mListenersStorage>;

        virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.RecoverySnapshotListenersStorage: void setSnapshotListener(int,android.app.PendingIntent)>(i0, r1);

        return;
    }

    byte[] startRecoverySession(java.lang.String, byte[], byte[], byte[], java.util.List) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] r1, r2, $r15, r26, r28, r29, r31;
        int i0, $i1;
        java.security.PublicKey r3;
        boolean $z0;
        java.lang.Object $r6;
        android.security.keystore.recovery.KeyChainProtectionParams $r7;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage $r9;
        java.lang.String $r12, $r14, $r18, $r21, $r24, r25;
        java.lang.Throwable $r16, $r19, $r22;
        java.util.List r27;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry r35;
        java.lang.StringBuilder r36;
        android.os.ServiceSpecificException r37, r38, r39, r40;
        java.lang.UnsupportedOperationException r41;
        java.security.InvalidKeyException r42;
        java.security.NoSuchAlgorithmException r43;
        java.security.spec.InvalidKeySpecException r44;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r25 := @parameter0: java.lang.String;

        r26 := @parameter1: byte[];

        r1 := @parameter2: byte[];

        r2 := @parameter3: byte[];

        r27 := @parameter4: java.util.List;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = interfaceinvoke r27.<java.util.List: int size()>();

        if $i1 != 1 goto label9;

     label1:
        r3 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: java.security.PublicKey deserializePublicKey(byte[])>(r26);

     label2:
        $z0 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: boolean publicKeysMatch(java.security.PublicKey,byte[])>(r3, r1);

        if $z0 == 0 goto label7;

        r28 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] generateKeyClaimant()>();

        $r6 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (android.security.keystore.recovery.KeyChainProtectionParams) $r6;

        r29 = virtualinvoke $r7.<android.security.keystore.recovery.KeyChainProtectionParams: byte[] getSecret()>();

        $r9 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage mRecoverySessionStorage>;

        r35 = new com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry;

        specialinvoke r35.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry: void <init>(java.lang.String,byte[],byte[],byte[])>(r25, r29, r28, r1);

        virtualinvoke $r9.<com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage: void add(int,com.android.server.locksettings.recoverablekeystore.storage.RecoverySessionStorage$Entry)>(i0, r35);

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received VaultParams for recovery: ");

        $r12 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r1);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", $r14);

     label3:
        $r15 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] calculateThmKfHash(byte[])>(r29);

        r31 = staticinvoke <com.android.server.locksettings.recoverablekeystore.KeySyncUtils: byte[] encryptRecoveryClaim(java.security.PublicKey,byte[],byte[],byte[],byte[])>(r3, r1, r2, $r15, r28);

     label4:
        return r31;

     label5:
        $r16 := @caughtexception;

        r37 = new android.os.ServiceSpecificException;

        r42 = (java.security.InvalidKeyException) $r16;

        $r18 = virtualinvoke r42.<java.security.InvalidKeyException: java.lang.String getMessage()>();

        specialinvoke r37.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, $r18);

        throw r37;

     label6:
        $r19 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "SecureBox algorithm missing. AOSP must support this.", $r19);

        r38 = new android.os.ServiceSpecificException;

        r43 = (java.security.NoSuchAlgorithmException) $r19;

        $r21 = virtualinvoke r43.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke r38.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(22, $r21);

        throw r38;

     label7:
        r39 = new android.os.ServiceSpecificException;

        specialinvoke r39.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(28, "The public keys given in verifierPublicKey and vaultParams do not match.");

        throw r39;

     label8:
        $r22 := @caughtexception;

        r40 = new android.os.ServiceSpecificException;

        r44 = (java.security.spec.InvalidKeySpecException) $r22;

        $r24 = virtualinvoke r44.<java.security.spec.InvalidKeySpecException: java.lang.String getMessage()>();

        specialinvoke r40.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, $r24);

        throw r40;

     label9:
        r41 = new java.lang.UnsupportedOperationException;

        specialinvoke r41.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Only a single KeyChainProtectionParams is supported");

        throw r41;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label8;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label6;
        catch java.security.InvalidKeyException from label3 to label4 with label5;
    }

    public byte[] startRecoverySessionWithCertPath(java.lang.String, java.lang.String, android.security.keystore.recovery.RecoveryCertPath, byte[], byte[], java.util.List) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager r0;
        byte[] r1, r2, $r17, r29;
        java.util.List r3, $r12;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r4, $r10;
        java.security.cert.X509Certificate $r11;
        java.lang.Object $r13;
        java.security.cert.Certificate $r14;
        java.security.PublicKey $r15;
        java.lang.Throwable $r18;
        java.lang.String $r20, $r23, r24, r25, r27;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException $r21;
        android.security.keystore.recovery.RecoveryCertPath r26;
        java.security.cert.CertPath r28;
        android.os.ServiceSpecificException r32, r33, r34;
        java.security.cert.CertificateException r35;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager;

        r24 := @parameter0: java.lang.String;

        r25 := @parameter1: java.lang.String;

        r26 := @parameter2: android.security.keystore.recovery.RecoveryCertPath;

        r1 := @parameter3: byte[];

        r2 := @parameter4: byte[];

        r3 := @parameter5: java.util.List;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: void checkRecoverKeyStorePermission()>();

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        r27 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r25);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r24, "invalid session");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r26, "verifierCertPath is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "vaultParams is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "vaultChallenge is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "secrets is null");

     label1:
        r28 = virtualinvoke r26.<android.security.keystore.recovery.RecoveryCertPath: java.security.cert.CertPath getCertPath()>();

     label2:
        $r10 = r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestCertHelper>;

        $r11 = virtualinvoke $r10.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.security.cert.X509Certificate getRootCertificate(java.lang.String)>(r27);

        staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: void validateCertPath(java.security.cert.X509Certificate,java.security.cert.CertPath)>($r11, r28);

     label3:
        $r12 = virtualinvoke r28.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (java.security.cert.Certificate) $r13;

        $r15 = virtualinvoke $r14.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        r29 = interfaceinvoke $r15.<java.security.PublicKey: byte[] getEncoded()>();

        if r29 == null goto label4;

        $r17 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: byte[] startRecoverySession(java.lang.String,byte[],byte[],byte[],java.util.List)>(r24, r29, r1, r2, r3);

        return $r17;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreMgr", "Failed to encode verifierPublicKey");

        r32 = new android.os.ServiceSpecificException;

        specialinvoke r32.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, "Failed to encode verifierPublicKey");

        throw r32;

     label5:
        $r21 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreMgr", "Failed to validate the given cert path", $r21);

        r33 = new android.os.ServiceSpecificException;

        $r23 = virtualinvoke $r21.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: java.lang.String getMessage()>();

        specialinvoke r33.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(28, $r23);

        throw r33;

     label6:
        $r18 := @caughtexception;

        r34 = new android.os.ServiceSpecificException;

        r35 = (java.security.cert.CertificateException) $r18;

        $r20 = virtualinvoke r35.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke r34.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(25, $r20);

        throw r34;

        catch java.security.cert.CertificateException from label1 to label2 with label6;
        catch com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException from label2 to label3 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: java.lang.String TAG> = "RecoverableKeyStoreMgr";

        <com.android.server.locksettings.recoverablekeystore.RecoverableKeyStoreManager: long SYNC_DELAY_MILLIS> = 2000L;

        return;
    }
}
