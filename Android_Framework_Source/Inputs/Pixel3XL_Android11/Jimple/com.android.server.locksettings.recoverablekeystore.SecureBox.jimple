public class com.android.server.locksettings.recoverablekeystore.SecureBox extends java.lang.Object
{
    private static final java.math.BigInteger BIG_INT_02;
    private static final java.lang.String CIPHER_ALG;
    private static final byte[] CONSTANT_01;
    private static final java.lang.String EC_ALG;
    private static final int EC_COORDINATE_LEN_BYTES;
    private static final java.lang.String EC_P256_COMMON_NAME;
    private static final java.lang.String EC_P256_OPENSSL_NAME;
    private static final java.math.BigInteger EC_PARAM_A;
    private static final java.math.BigInteger EC_PARAM_B;
    private static final java.math.BigInteger EC_PARAM_P;
    static final java.security.spec.ECParameterSpec EC_PARAM_SPEC;
    private static final int EC_PUBLIC_KEY_LEN_BYTES;
    private static final byte EC_PUBLIC_KEY_PREFIX;
    private static final byte[] EMPTY_BYTE_ARRAY;
    private static final java.lang.String ENC_ALG;
    private static final int GCM_KEY_LEN_BYTES;
    private static final int GCM_NONCE_LEN_BYTES;
    private static final int GCM_TAG_LEN_BYTES;
    private static final byte[] HKDF_INFO_WITHOUT_PUBLIC_KEY;
    private static final byte[] HKDF_INFO_WITH_PUBLIC_KEY;
    private static final byte[] HKDF_SALT;
    private static final java.lang.String KA_ALG;
    private static final java.lang.String MAC_ALG;
    private static final byte[] VERSION;

    static void <clinit>()
    {
        byte[] $r1, $r5, $r6, $r7, $r10, $r13, $r14, $r15;
        byte[][] $r2;
        java.nio.charset.Charset $r3, $r8, $r11;
        java.lang.String $r4, $r9, $r12;
        java.math.BigInteger $r16, $r17, $r18, $r19, $r20, $r24, $r25, $r26, $r28, $r29, $r30;
        java.security.spec.ECParameterSpec $r21;
        java.security.spec.EllipticCurve $r22;
        java.security.spec.ECFieldFp $r23;
        java.security.spec.ECPoint $r27;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String MAC_ALG> = "HmacSHA256";

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String KA_ALG> = "ECDH";

        <com.android.server.locksettings.recoverablekeystore.SecureBox: int GCM_TAG_LEN_BYTES> = 16;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: int GCM_NONCE_LEN_BYTES> = 12;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: int GCM_KEY_LEN_BYTES> = 16;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String ENC_ALG> = "AES/GCM/NoPadding";

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte EC_PUBLIC_KEY_PREFIX> = 4;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: int EC_PUBLIC_KEY_LEN_BYTES> = 65;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String EC_P256_OPENSSL_NAME> = "prime256v1";

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String EC_P256_COMMON_NAME> = "secp256r1";

        <com.android.server.locksettings.recoverablekeystore.SecureBox: int EC_COORDINATE_LEN_BYTES> = 32;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String EC_ALG> = "EC";

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.lang.String CIPHER_ALG> = "AES";

        $r1 = newarray (byte)[2];

        $r1[0] = 2;

        $r1[1] = 0;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] VERSION> = $r1;

        $r2 = newarray (byte[])[2];

        $r4 = "SECUREBOX";

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $r2[0] = $r5;

        $r6 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] VERSION>;

        $r2[1] = $r6;

        $r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] concat(byte[][])>($r2);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_SALT> = $r7;

        $r9 = "P256 HKDF-SHA-256 AES-128-GCM";

        $r8 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_INFO_WITH_PUBLIC_KEY> = $r10;

        $r12 = "SHARED HKDF-SHA-256 AES-128-GCM";

        $r11 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r13 = virtualinvoke $r12.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_INFO_WITHOUT_PUBLIC_KEY> = $r13;

        $r14 = newarray (byte)[1];

        $r14[0] = 1;

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] CONSTANT_01> = $r14;

        $r15 = newarray (byte)[0];

        <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] EMPTY_BYTE_ARRAY> = $r15;

        $r16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger BIG_INT_02> = $r16;

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(java.lang.String,int)>("ffffffff00000001000000000000000000000000ffffffffffffffffffffffff", 16);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P> = $r17;

        $r18 = new java.math.BigInteger;

        specialinvoke $r18.<java.math.BigInteger: void <init>(java.lang.String)>("3");

        $r19 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r18);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_A> = $r19;

        $r20 = new java.math.BigInteger;

        specialinvoke $r20.<java.math.BigInteger: void <init>(java.lang.String,int)>("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b", 16);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_B> = $r20;

        $r21 = new java.security.spec.ECParameterSpec;

        $r22 = new java.security.spec.EllipticCurve;

        $r23 = new java.security.spec.ECFieldFp;

        $r24 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        specialinvoke $r23.<java.security.spec.ECFieldFp: void <init>(java.math.BigInteger)>($r24);

        $r26 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_A>;

        $r25 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_B>;

        specialinvoke $r22.<java.security.spec.EllipticCurve: void <init>(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger)>($r23, $r26, $r25);

        $r27 = new java.security.spec.ECPoint;

        $r28 = new java.math.BigInteger;

        specialinvoke $r28.<java.math.BigInteger: void <init>(java.lang.String,int)>("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", 16);

        $r29 = new java.math.BigInteger;

        specialinvoke $r29.<java.math.BigInteger: void <init>(java.lang.String,int)>("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5", 16);

        specialinvoke $r27.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r28, $r29);

        $r30 = new java.math.BigInteger;

        specialinvoke $r30.<java.math.BigInteger: void <init>(java.lang.String,int)>("ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551", 16);

        specialinvoke $r21.<java.security.spec.ECParameterSpec: void <init>(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)>($r22, $r27, $r30, 1);

        <com.android.server.locksettings.recoverablekeystore.SecureBox: java.security.spec.ECParameterSpec EC_PARAM_SPEC> = $r21;

        return;
    }

    private void <init>()
    {
        com.android.server.locksettings.recoverablekeystore.SecureBox r0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.SecureBox;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static byte[] aesGcmDecrypt(javax.crypto.SecretKey, byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.AEADBadTagException
    {
        javax.crypto.SecretKey r0;
        byte[] r1, r2, r3, $r5;
        com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation $r4;

        r0 := @parameter0: javax.crypto.SecretKey;

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        r3 := @parameter3: byte[];

        $r4 = <com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation: com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation DECRYPT>;

        $r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] aesGcmInternal(com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation,javax.crypto.SecretKey,byte[],byte[],byte[])>($r4, r0, r1, r2, r3);

        return $r5;
    }

    private static byte[] aesGcmEncrypt(javax.crypto.SecretKey, byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        byte[] r0, r1, r2, r7;
        com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation $r3;
        java.lang.Throwable $r4;
        java.lang.RuntimeException $r5;
        javax.crypto.SecretKey r6;

        r6 := @parameter0: javax.crypto.SecretKey;

        r0 := @parameter1: byte[];

        r1 := @parameter2: byte[];

        r2 := @parameter3: byte[];

     label1:
        $r3 = <com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation: com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation ENCRYPT>;

        r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] aesGcmInternal(com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation,javax.crypto.SecretKey,byte[],byte[],byte[])>($r3, r6, r0, r1, r2);

     label2:
        return r7;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch javax.crypto.AEADBadTagException from label1 to label2 with label3;
    }

    private static byte[] aesGcmInternal(com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation, javax.crypto.SecretKey, byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.AEADBadTagException
    {
        javax.crypto.SecretKey r0;
        byte[] r1, r2, r14, r16;
        javax.crypto.Cipher r3;
        javax.crypto.spec.GCMParameterSpec $r4;
        com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation $r5, r13;
        java.lang.Throwable $r6, $r8, $r10, $r11;
        java.lang.RuntimeException $r7, $r9, $r12;

        r13 := @parameter0: com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation;

        r0 := @parameter1: javax.crypto.SecretKey;

        r14 := @parameter2: byte[];

        r1 := @parameter3: byte[];

        r2 := @parameter4: byte[];

     label01:
        r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

     label02:
        $r4 = new javax.crypto.spec.GCMParameterSpec;

        specialinvoke $r4.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, r14);

     label03:
        $r5 = <com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation: com.android.server.locksettings.recoverablekeystore.SecureBox$AesGcmOperation DECRYPT>;

        if r13 != $r5 goto label05;

        virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, r0, $r4);

     label04:
        goto label06;

     label05:
        virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r0, $r4);

     label06:
        virtualinvoke r3.<javax.crypto.Cipher: void updateAAD(byte[])>(r2);

        r16 = virtualinvoke r3.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1);

     label07:
        return r16;

     label08:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label09:
        $r10 := @caughtexception;

        throw $r10;

     label10:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label11:
        $r8 := @caughtexception;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label11;
        catch java.security.InvalidAlgorithmParameterException from label03 to label04 with label10;
        catch java.security.InvalidAlgorithmParameterException from label05 to label06 with label10;
        catch javax.crypto.AEADBadTagException from label06 to label07 with label09;
        catch javax.crypto.IllegalBlockSizeException from label06 to label07 with label08;
        catch javax.crypto.BadPaddingException from label06 to label07 with label08;
    }

    static transient byte[] concat(byte[][])
    {
        byte[][] r0;
        byte[] r1, r2, $r3, $r4, $r5;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;

        r0 := @parameter0: byte[][];

        i5 = 0;

        i6 = 0;

     label1:
        $i1 = lengthof r0;

        if i6 >= $i1 goto label3;

        $r3 = r0[i6];

        if $r3 != null goto label2;

        $r5 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] EMPTY_BYTE_ARRAY>;

        r0[i6] = $r5;

     label2:
        $r4 = r0[i6];

        $i4 = lengthof $r4;

        i5 = i5 + $i4;

        i6 = i6 + 1;

        goto label1;

     label3:
        r1 = newarray (byte)[i5];

        i7 = 0;

        i0 = lengthof r0;

        i8 = 0;

     label4:
        if i8 >= i0 goto label5;

        r2 = r0[i8];

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, i7, $i2);

        $i3 = lengthof r2;

        i7 = i7 + $i3;

        i8 = i8 + 1;

        goto label4;

     label5:
        return r1;
    }

    static java.security.PublicKey decodePublicKey(byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        java.security.KeyFactory r1;
        java.security.spec.ECPublicKeySpec r2;
        java.security.spec.ECPoint r3;
        java.math.BigInteger $r4, $r6;
        byte[] $r5, $r7, r11;
        java.security.spec.ECParameterSpec $r8;
        java.lang.Throwable $r9;
        java.lang.RuntimeException $r10;
        java.security.PublicKey r13;

        r11 := @parameter0: byte[];

        $r4 = new java.math.BigInteger;

        $r5 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r11, 1, 33);

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,byte[])>(1, $r5);

        $r6 = new java.math.BigInteger;

        $r7 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r11, 33, 65);

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,byte[])>(1, $r7);

        staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: void validateEcPoint(java.math.BigInteger,java.math.BigInteger)>($r4, $r6);

        r1 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("EC");

     label1:
        r2 = new java.security.spec.ECPublicKeySpec;

        r3 = new java.security.spec.ECPoint;

        specialinvoke r3.<java.security.spec.ECPoint: void <init>(java.math.BigInteger,java.math.BigInteger)>($r4, $r6);

        $r8 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.security.spec.ECParameterSpec EC_PARAM_SPEC>;

        specialinvoke r2.<java.security.spec.ECPublicKeySpec: void <init>(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)>(r3, $r8);

        r13 = virtualinvoke r1.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r2);

     label2:
        return r13;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label3;
    }

    public static byte[] decrypt(java.security.PrivateKey, byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, javax.crypto.AEADBadTagException
    {
        byte[] r0, r1, $r3, $r4, $r5, $r7, $r10, $r11, $r13, r16, r17, r18, r19, r21, r22, r23;
        java.lang.NullPointerException $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        javax.crypto.AEADBadTagException $r6;
        java.security.PublicKey $r8;
        byte[][] $r9;
        javax.crypto.SecretKey $r12;
        java.lang.IllegalArgumentException $r14;
        java.security.PrivateKey r15;
        java.nio.ByteBuffer r20;

        r15 := @parameter0: java.security.PrivateKey;

        r16 := @parameter1: byte[];

        r17 := @parameter2: byte[];

        r18 := @parameter3: byte[];

        r0 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] emptyByteArrayIfNull(byte[])>(r16);

        if r15 != null goto label2;

        $i2 = lengthof r0;

        if $i2 == 0 goto label1;

        goto label2;

     label1:
        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both the private key and shared secret are empty");

        throw $r14;

     label2:
        r19 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] emptyByteArrayIfNull(byte[])>(r17);

        if r18 == null goto label6;

        r20 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r18);

        $r3 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] VERSION>;

        $i0 = lengthof $r3;

        $r4 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] readEncryptedPayload(java.nio.ByteBuffer,int)>(r20, $i0);

        $r5 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] VERSION>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5);

        if $z0 == 0 goto label5;

        if r15 != null goto label3;

        r21 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] EMPTY_BYTE_ARRAY>;

        r22 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_INFO_WITHOUT_PUBLIC_KEY>;

        goto label4;

     label3:
        $r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] readEncryptedPayload(java.nio.ByteBuffer,int)>(r20, 65);

        $r8 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: java.security.PublicKey decodePublicKey(byte[])>($r7);

        r21 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] dhComputeSecret(java.security.PrivateKey,java.security.PublicKey)>(r15, $r8);

        r22 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_INFO_WITH_PUBLIC_KEY>;

     label4:
        r1 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] readEncryptedPayload(java.nio.ByteBuffer,int)>(r20, 12);

        $i1 = virtualinvoke r20.<java.nio.ByteBuffer: int remaining()>();

        r23 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] readEncryptedPayload(java.nio.ByteBuffer,int)>(r20, $i1);

        $r9 = newarray (byte[])[2];

        $r9[0] = r21;

        $r9[1] = r0;

        $r10 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] concat(byte[][])>($r9);

        $r11 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_SALT>;

        $r12 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: javax.crypto.SecretKey hkdfDeriveKey(byte[],byte[],byte[])>($r10, $r11, r22);

        $r13 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] aesGcmDecrypt(javax.crypto.SecretKey,byte[],byte[],byte[])>($r12, r1, r23, r19);

        return $r13;

     label5:
        $r6 = new javax.crypto.AEADBadTagException;

        specialinvoke $r6.<javax.crypto.AEADBadTagException: void <init>(java.lang.String)>("The payload was not encrypted by SecureBox v2");

        throw $r6;

     label6:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("Encrypted payload must not be null.");

        throw $r2;
    }

    private static byte[] dhComputeSecret(java.security.PrivateKey, java.security.PublicKey) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        java.security.PublicKey r0;
        javax.crypto.KeyAgreement r1;
        byte[] $r3;
        java.lang.RuntimeException $r4;
        java.security.InvalidKeyException $r5;
        java.security.PrivateKey r6;

        r6 := @parameter0: java.security.PrivateKey;

        r0 := @parameter1: java.security.PublicKey;

        r1 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)>("ECDH");

     label1:
        virtualinvoke r1.<javax.crypto.KeyAgreement: void init(java.security.Key)>(r6);

     label2:
        virtualinvoke r1.<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)>(r0, 1);

        $r3 = virtualinvoke r1.<javax.crypto.KeyAgreement: byte[] generateSecret()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private static byte[] emptyByteArrayIfNull(byte[])
    {
        byte[] r0;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        r0 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] EMPTY_BYTE_ARRAY>;

        goto label1;

     label1:
        return r0;
    }

    static byte[] encodePublicKey(java.security.PublicKey)
    {
        byte[] r0, r6, r7;
        java.security.interfaces.ECPublicKey $r1;
        java.math.BigInteger $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte $b6;
        java.security.PublicKey r4;
        java.security.spec.ECPoint r5;

        r4 := @parameter0: java.security.PublicKey;

        $r1 = (java.security.interfaces.ECPublicKey) r4;

        r5 = interfaceinvoke $r1.<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()>();

        $r2 = virtualinvoke r5.<java.security.spec.ECPoint: java.math.BigInteger getAffineX()>();

        r6 = virtualinvoke $r2.<java.math.BigInteger: byte[] toByteArray()>();

        $r3 = virtualinvoke r5.<java.security.spec.ECPoint: java.math.BigInteger getAffineY()>();

        r0 = virtualinvoke $r3.<java.math.BigInteger: byte[] toByteArray()>();

        r7 = newarray (byte)[65];

        $i0 = lengthof r0;

        $i2 = 65 - $i0;

        $i1 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r7, $i2, $i1);

        $i3 = lengthof r6;

        $i5 = 33 - $i3;

        $i4 = lengthof r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r7, $i5, $i4);

        $b6 = (byte) 4;

        r7[0] = $b6;

        return r7;
    }

    public static byte[] encrypt(java.security.PublicKey, byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        byte[] r0, r1, r2, $r5, $r6, $r9, $r11, $r12, $r14, $r15, r18, r19, r20, r22, r23, r25, r26;
        java.security.PrivateKey $r3;
        byte[][] $r4, $r8, $r13;
        javax.crypto.SecretKey $r7;
        java.security.PublicKey $r10, r17;
        int $i0;
        java.lang.IllegalArgumentException $r16;
        java.security.KeyPair r21, r24;

        r17 := @parameter0: java.security.PublicKey;

        r18 := @parameter1: byte[];

        r19 := @parameter2: byte[];

        r20 := @parameter3: byte[];

        r0 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] emptyByteArrayIfNull(byte[])>(r18);

        if r17 != null goto label2;

        $i0 = lengthof r0;

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Both the public key and shared secret are empty");

        throw $r16;

     label2:
        r1 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] emptyByteArrayIfNull(byte[])>(r19);

        r2 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] emptyByteArrayIfNull(byte[])>(r20);

        if r17 != null goto label3;

        r21 = null;

        r22 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] EMPTY_BYTE_ARRAY>;

        r23 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_INFO_WITHOUT_PUBLIC_KEY>;

        goto label4;

     label3:
        r24 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: java.security.KeyPair genKeyPair()>();

        $r3 = virtualinvoke r24.<java.security.KeyPair: java.security.PrivateKey getPrivate()>();

        r22 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] dhComputeSecret(java.security.PrivateKey,java.security.PublicKey)>($r3, r17);

        r23 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_INFO_WITH_PUBLIC_KEY>;

        r21 = r24;

     label4:
        r25 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] genRandomNonce()>();

        $r4 = newarray (byte[])[2];

        $r4[0] = r22;

        $r4[1] = r0;

        $r5 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] concat(byte[][])>($r4);

        $r6 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] HKDF_SALT>;

        $r7 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: javax.crypto.SecretKey hkdfDeriveKey(byte[],byte[],byte[])>($r5, $r6, r23);

        r26 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] aesGcmEncrypt(javax.crypto.SecretKey,byte[],byte[],byte[])>($r7, r25, r2, r1);

        if r21 != null goto label5;

        $r13 = newarray (byte[])[3];

        $r14 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] VERSION>;

        $r13[0] = $r14;

        $r13[1] = r25;

        $r13[2] = r26;

        $r15 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] concat(byte[][])>($r13);

        return $r15;

     label5:
        $r8 = newarray (byte[])[4];

        $r9 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] VERSION>;

        $r8[0] = $r9;

        $r10 = virtualinvoke r21.<java.security.KeyPair: java.security.PublicKey getPublic()>();

        $r11 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] encodePublicKey(java.security.PublicKey)>($r10);

        $r8[1] = $r11;

        $r8[2] = r25;

        $r8[3] = r26;

        $r12 = staticinvoke <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] concat(byte[][])>($r8);

        return $r12;
    }

    public static java.security.KeyPair genKeyPair() throws java.security.NoSuchAlgorithmException
    {
        java.lang.Throwable $r0, $r2;
        java.security.NoSuchAlgorithmException $r1;
        java.security.KeyPairGenerator r3;
        java.security.spec.ECGenParameterSpec r4, r7;
        java.security.KeyPair r5, r8;

        r3 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)>("EC");

     label1:
        r4 = new java.security.spec.ECGenParameterSpec;

        specialinvoke r4.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("prime256v1");

        virtualinvoke r3.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r4);

        r5 = virtualinvoke r3.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

     label4:
        r7 = new java.security.spec.ECGenParameterSpec;

        specialinvoke r7.<java.security.spec.ECGenParameterSpec: void <init>(java.lang.String)>("secp256r1");

        virtualinvoke r3.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)>(r7);

        r8 = virtualinvoke r3.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

     label5:
        return r8;

     label6:
        $r0 := @caughtexception;

        $r1 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r1.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to find the NIST P-256 curve", $r0);

        throw $r1;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
        catch java.security.InvalidAlgorithmParameterException from label4 to label5 with label6;
    }

    private static byte[] genRandomNonce() throws java.security.NoSuchAlgorithmException
    {
        byte[] r0;
        java.security.SecureRandom $r1;

        r0 = newarray (byte)[12];

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>(r0);

        return r0;
    }

    private static javax.crypto.SecretKey hkdfDeriveKey(byte[], byte[], byte[]) throws java.security.NoSuchAlgorithmException
    {
        byte[] r0, $r4, $r5, $r6, r11, r12, r13;
        javax.crypto.Mac r1;
        javax.crypto.spec.SecretKeySpec r2, $r3, r14;
        java.lang.Throwable $r7, $r9;
        java.lang.RuntimeException $r8, $r10;

        r11 := @parameter0: byte[];

        r12 := @parameter1: byte[];

        r0 := @parameter2: byte[];

        r1 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA256");

     label1:
        r2 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r2.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r12, "HmacSHA256");

        virtualinvoke r1.<javax.crypto.Mac: void init(java.security.Key)>(r2);

     label2:
        r13 = virtualinvoke r1.<javax.crypto.Mac: byte[] doFinal(byte[])>(r11);

     label3:
        r14 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r14.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r13, "HmacSHA256");

        virtualinvoke r1.<javax.crypto.Mac: void init(java.security.Key)>(r14);

     label4:
        virtualinvoke r1.<javax.crypto.Mac: void update(byte[])>(r0);

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = <com.android.server.locksettings.recoverablekeystore.SecureBox: byte[] CONSTANT_01>;

        $r5 = virtualinvoke r1.<javax.crypto.Mac: byte[] doFinal(byte[])>($r4);

        $r6 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r5, 16);

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r6, "AES");

        return $r3;

     label5:
        $r7 := @caughtexception;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label6:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch java.security.InvalidKeyException from label1 to label2 with label6;
        catch java.security.InvalidKeyException from label3 to label4 with label5;
    }

    private static byte[] readEncryptedPayload(java.nio.ByteBuffer, int) throws javax.crypto.AEADBadTagException
    {
        int i0;
        byte[] r0;
        java.lang.Throwable $r2;
        javax.crypto.AEADBadTagException $r3;
        java.nio.ByteBuffer r4;

        r4 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r0 = newarray (byte)[i0];

     label1:
        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r0);

     label2:
        return r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new javax.crypto.AEADBadTagException;

        specialinvoke $r3.<javax.crypto.AEADBadTagException: void <init>(java.lang.String)>("The encrypted payload is too short");

        throw $r3;

        catch java.nio.BufferUnderflowException from label1 to label2 with label3;
    }

    private static void validateEcPoint(java.math.BigInteger, java.math.BigInteger) throws java.security.InvalidKeyException
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.security.InvalidKeyException $r19, $r20;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $r2 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        $i0 = virtualinvoke r0.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 >= 0 goto label2;

        $r3 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        $i1 = virtualinvoke r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r3);

        if $i1 >= 0 goto label2;

        $i2 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        if $i2 == -1 goto label2;

        $i3 = virtualinvoke r1.<java.math.BigInteger: int signum()>();

        if $i3 == -1 goto label2;

        $r5 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger BIG_INT_02>;

        $r4 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        $r6 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r5, $r4);

        $r8 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger BIG_INT_02>;

        $r7 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        $r9 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r8, $r7);

        $r10 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_A>;

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r10);

        $r12 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        $r13 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r12);

        $r14 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r0);

        $r15 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_B>;

        $r16 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r15);

        $r17 = <com.android.server.locksettings.recoverablekeystore.SecureBox: java.math.BigInteger EC_PARAM_P>;

        $r18 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r17);

        $z0 = virtualinvoke $r6.<java.math.BigInteger: boolean equals(java.lang.Object)>($r18);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r19 = new java.security.InvalidKeyException;

        specialinvoke $r19.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Point lies outside of the expected curve");

        throw $r19;

     label2:
        $r20 = new java.security.InvalidKeyException;

        specialinvoke $r20.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Point lies outside of the expected curve");

        throw $r20;
    }
}
