public class com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper extends java.lang.Object
{
    private static final java.lang.String TAG;

    public void <init>()
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean doesCredentialSupportInsecureMode(int, byte[])
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;
        byte[] r1, r2;
        java.lang.String $r3;
        int $i0, $i1, $i2, i5, i6;
        byte $b3, $b4;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        i5 := @parameter0: int;

        r1 := @parameter1: byte[];

        if r1 != null goto label1;

        return 0;

     label1:
        if i5 == 4 goto label2;

        if i5 == 3 goto label2;

        return 0;

     label2:
        $r3 = "INSECURE_PSWD_";

        r2 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $i1 = lengthof r1;

        $i0 = lengthof r2;

        if $i1 >= $i0 goto label3;

        return 0;

     label3:
        i6 = 0;

     label4:
        $i2 = lengthof r2;

        if i6 >= $i2 goto label6;

        $b4 = r1[i6];

        $b3 = r2[i6];

        if $b4 == $b3 goto label5;

        return 0;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        return 1;
    }

    public java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        r2 = r1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("TestCertHelper", "rootCertificateAlias is null or empty - use secure default value");

        r2 = "GoogleCloudKeyVaultServiceV1";

     label2:
        return r2;
    }

    public java.security.cert.X509Certificate getRootCertificate(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;
        boolean $z0;
        android.os.ServiceSpecificException $r1;
        java.security.cert.X509Certificate $r2, r5;
        java.lang.String r3, r4;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r3 := @parameter0: java.lang.String;

        r4 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r3);

        $z0 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isTestOnlyCertificateAlias(java.lang.String)>(r4);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <android.security.keystore.recovery.TrustedRootCertificates: java.security.cert.X509Certificate getTestOnlyInsecureCertificate()>();

        return $r2;

     label1:
        r5 = staticinvoke <android.security.keystore.recovery.TrustedRootCertificates: java.security.cert.X509Certificate getRootCertificate(java.lang.String)>(r4);

        if r5 == null goto label2;

        return r5;

     label2:
        $r1 = new android.os.ServiceSpecificException;

        specialinvoke $r1.<android.os.ServiceSpecificException: void <init>(int,java.lang.String)>(28, "The provided root certificate alias is invalid");

        throw $r1;
    }

    public boolean isTestOnlyCertificateAlias(java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = "TEST_ONLY_INSECURE_CERTIFICATE_ALIAS";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isValidRootCertificateAlias(java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;
        java.lang.String r1;
        java.util.Map $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.security.keystore.recovery.TrustedRootCertificates: java.util.Map getRootCertificates()>();

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: boolean isTestOnlyCertificateAlias(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public java.util.Map keepOnlyWhitelistedInsecureKeys(java.util.Map)
    {
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper r0;
        java.util.Iterator r2;
        java.util.HashMap $r3;
        java.util.Set $r4;
        boolean $z0, $z1;
        java.lang.Object $r5, $r6, $r7, $r9, $r11, $r13, $r15;
        java.lang.String $r8, $r23, r26;
        android.util.Pair $r10, $r14, $r17;
        javax.crypto.SecretKey $r12;
        byte[] $r16;
        java.lang.StringBuilder $r19;
        java.util.Map r24;
        java.util.Map$Entry r25;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        r24 := @parameter0: java.util.Map;

        if r24 != null goto label1;

        return null;

     label1:
        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r24.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r25 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        r26 = (java.lang.String) $r6;

        if r26 == null goto label3;

        $z1 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("INSECURE_KEY_ALIAS_KEY_MATERIAL_IS_NOT_PROTECTED_");

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (java.lang.String) $r7;

        $r9 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (android.util.Pair) $r9;

        $r11 = $r10.<android.util.Pair: java.lang.Object first>;

        $r12 = (javax.crypto.SecretKey) $r11;

        $r13 = interfaceinvoke r25.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (android.util.Pair) $r13;

        $r15 = $r14.<android.util.Pair: java.lang.Object second>;

        $r16 = (byte[]) $r15;

        $r17 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>($r12, $r16);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r17);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adding key with insecure alias ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to the recovery snapshot");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("TestCertHelper", $r23);

     label3:
        goto label2;

     label4:
        return $r3;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String TAG> = "TestCertHelper";

        return;
    }
}
