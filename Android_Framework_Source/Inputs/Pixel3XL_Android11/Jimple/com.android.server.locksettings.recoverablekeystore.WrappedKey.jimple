public class com.android.server.locksettings.recoverablekeystore.WrappedKey extends java.lang.Object
{
    private static final java.lang.String APPLICATION_KEY_ALGORITHM;
    private static final int GCM_TAG_LENGTH_BITS;
    private static final java.lang.String KEY_WRAP_CIPHER_ALGORITHM;
    private static final java.lang.String TAG;
    private final byte[] mKeyMaterial;
    private final byte[] mKeyMetadata;
    private final byte[] mNonce;
    private final int mPlatformKeyGenerationId;
    private final int mRecoveryStatus;

    public void <init>(byte[], byte[], byte[], int)
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        byte[] r1, r2, r3;
        int i0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: void <init>(byte[],byte[],byte[],int,int)>(r1, r2, r3, i0, 1);

        return;
    }

    public void <init>(byte[], byte[], byte[], int, int)
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        byte[] r1, r2, r3;
        int i0, i1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] mNonce> = r1;

        r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] mKeyMaterial> = r2;

        r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] mKeyMetadata> = r3;

        r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int mPlatformKeyGenerationId> = i0;

        r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int mRecoveryStatus> = i1;

        return;
    }

    public static com.android.server.locksettings.recoverablekeystore.WrappedKey fromSecretKey(com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey, javax.crypto.SecretKey, byte[]) throws java.security.InvalidKeyException, java.security.KeyStoreException
    {
        byte[] r0, $r2, $r6, r14;
        javax.crypto.Cipher r1;
        android.security.keystore.AndroidKeyStoreSecretKey $r4;
        int $i0;
        java.lang.Throwable $r7, $r10, r16;
        boolean $z0;
        java.security.KeyStoreException $r9;
        com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey r12;
        javax.crypto.SecretKey r13;
        com.android.server.locksettings.recoverablekeystore.WrappedKey r18;
        java.lang.RuntimeException r19, r20;
        java.security.InvalidKeyException r21;
        javax.crypto.IllegalBlockSizeException r22;

        r12 := @parameter0: com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey;

        r13 := @parameter1: javax.crypto.SecretKey;

        r0 := @parameter2: byte[];

        $r2 = interfaceinvoke r13.<javax.crypto.SecretKey: byte[] getEncoded()>();

        if $r2 == null goto label8;

     label1:
        r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

     label2:
        $r4 = virtualinvoke r12.<com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey: android.security.keystore.AndroidKeyStoreSecretKey getKey()>();

        virtualinvoke r1.<javax.crypto.Cipher: void init(int,java.security.Key)>(3, $r4);

     label3:
        r14 = virtualinvoke r1.<javax.crypto.Cipher: byte[] wrap(java.security.Key)>(r13);

     label4:
        r18 = new com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $r6 = virtualinvoke r1.<javax.crypto.Cipher: byte[] getIV()>();

        $i0 = virtualinvoke r12.<com.android.server.locksettings.recoverablekeystore.PlatformEncryptionKey: int getGenerationId()>();

        specialinvoke r18.<com.android.server.locksettings.recoverablekeystore.WrappedKey: void <init>(byte[],byte[],byte[],int,int)>($r6, r14, r0, $i0, 1);

        return r18;

     label5:
        $r7 := @caughtexception;

        r22 = (javax.crypto.IllegalBlockSizeException) $r7;

        r16 = virtualinvoke r22.<javax.crypto.IllegalBlockSizeException: java.lang.Throwable getCause()>();

        $z0 = r16 instanceof java.security.KeyStoreException;

        if $z0 == 0 goto label6;

        $r9 = (java.security.KeyStoreException) r16;

        throw $r9;

     label6:
        r19 = new java.lang.RuntimeException;

        specialinvoke r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("IllegalBlockSizeException should not be thrown by AES/GCM/NoPadding mode.", $r7);

        throw r19;

     label7:
        $r10 := @caughtexception;

        r20 = new java.lang.RuntimeException;

        specialinvoke r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("Android does not support AES/GCM/NoPadding. This should never happen.");

        throw r20;

     label8:
        r21 = new java.security.InvalidKeyException;

        specialinvoke r21.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key does not expose encoded material. It cannot be wrapped.");

        throw r21;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label7;
        catch javax.crypto.NoSuchPaddingException from label1 to label2 with label7;
        catch javax.crypto.IllegalBlockSizeException from label3 to label4 with label5;
    }

    public static java.util.Map unwrapKeys(com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey, java.util.Map) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException, com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException, java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey r0;
        java.util.Map r1;
        javax.crypto.Cipher r3;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r4;
        java.lang.String r5, $r16, $r28;
        javax.crypto.SecretKey r6;
        java.util.HashMap $r7;
        java.util.Set $r8;
        java.lang.Object $r9, $r10;
        com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException $r11;
        java.lang.Object[] $r12, $r26;
        java.util.Locale $r13, $r27;
        java.lang.Integer $r14, $r15;
        android.security.keystore.AndroidKeyStoreSecretKey $r17;
        javax.crypto.spec.GCMParameterSpec $r18;
        byte[] $r19, $r20, $r22;
        java.security.Key $r21;
        android.util.Pair $r23;
        java.lang.Throwable $r25;
        boolean $z0;
        com.android.server.locksettings.recoverablekeystore.WrappedKey r29;

        r0 := @parameter0: com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey;

        r1 := @parameter1: java.util.Map;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/GCM/NoPadding");

        i0 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: int getGenerationId()>();

        $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r9;

        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r29 = (com.android.server.locksettings.recoverablekeystore.WrappedKey) $r10;

        $i1 = virtualinvoke r29.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int getPlatformKeyGenerationId()>();

        if $i1 != i0 goto label5;

        $r17 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: android.security.keystore.AndroidKeyStoreSecretKey getKey()>();

        $r18 = new javax.crypto.spec.GCMParameterSpec;

        $r19 = virtualinvoke r29.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getNonce()>();

        specialinvoke $r18.<javax.crypto.spec.GCMParameterSpec: void <init>(int,byte[])>(128, $r19);

        virtualinvoke r3.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(4, $r17, $r18);

     label2:
        $r20 = virtualinvoke r29.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getKeyMaterial()>();

        $r21 = virtualinvoke r3.<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)>($r20, "AES", 3);

        r6 = (javax.crypto.SecretKey) $r21;

     label3:
        $r22 = virtualinvoke r29.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getKeyMetadata()>();

        $r23 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r6, $r22);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r23);

        goto label1;

     label4:
        $r25 := @caughtexception;

        $r27 = <java.util.Locale: java.util.Locale US>;

        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = r5;

        $r28 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r27, "Error unwrapping recoverable key with alias \'%s\'", $r26);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WrappedKey", $r28, $r25);

        goto label1;

     label5:
        $r11 = new com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException;

        $r13 = <java.util.Locale: java.util.Locale US>;

        $r12 = newarray (java.lang.Object)[3];

        $r12[0] = r5;

        $i2 = virtualinvoke r29.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int getPlatformKeyGenerationId()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r12[1] = $r14;

        $i3 = virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.PlatformDecryptionKey: int getGenerationId()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r12[2] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r13, "WrappedKey with alias \'%s\' was wrapped with platform key %d, not platform key %d", $r12);

        specialinvoke $r11.<com.android.server.locksettings.recoverablekeystore.BadPlatformKeyException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label6:
        return $r7;

        catch java.security.InvalidKeyException from label2 to label3 with label4;
        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    public byte[] getKeyMaterial()
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] mKeyMaterial>;

        return $r1;
    }

    public byte[] getKeyMetadata()
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] mKeyMetadata>;

        return $r1;
    }

    public byte[] getNonce()
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] mNonce>;

        return $r1;
    }

    public int getPlatformKeyGenerationId()
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        int $i0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $i0 = r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int mPlatformKeyGenerationId>;

        return $i0;
    }

    public int getRecoveryStatus()
    {
        com.android.server.locksettings.recoverablekeystore.WrappedKey r0;
        int $i0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $i0 = r0.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int mRecoveryStatus>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.WrappedKey: java.lang.String TAG> = "WrappedKey";

        <com.android.server.locksettings.recoverablekeystore.WrappedKey: java.lang.String KEY_WRAP_CIPHER_ALGORITHM> = "AES/GCM/NoPadding";

        <com.android.server.locksettings.recoverablekeystore.WrappedKey: int GCM_TAG_LENGTH_BITS> = 128;

        <com.android.server.locksettings.recoverablekeystore.WrappedKey: java.lang.String APPLICATION_KEY_ALGORITHM> = "AES";

        return;
    }
}
