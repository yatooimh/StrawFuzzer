public final class com.android.server.locksettings.recoverablekeystore.certificate.CertUtils extends java.lang.Object
{
    private static final java.lang.String CERT_FORMAT;
    private static final java.lang.String CERT_PATH_ALG;
    private static final java.lang.String CERT_STORE_ALG;
    static final int MUST_EXIST_AT_LEAST_ONE;
    static final int MUST_EXIST_EXACTLY_ONE;
    static final int MUST_EXIST_UNENFORCED;
    private static final java.lang.String SIGNATURE_ALG;

    private void <init>()
    {
        com.android.server.locksettings.recoverablekeystore.certificate.CertUtils r0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.certificate.CertUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.security.cert.CertPath buildCertPath(java.security.cert.PKIXParameters) throws com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException
    {
        java.security.cert.CertPathBuilder r0;
        java.security.cert.CertPathBuilderResult $r1;
        java.lang.Throwable $r2, $r4;
        java.security.cert.PKIXParameters r6;
        java.security.cert.CertPath r7;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException r10;
        java.lang.RuntimeException r11;
        java.lang.Exception r12;

        r6 := @parameter0: java.security.cert.PKIXParameters;

     label1:
        r0 = staticinvoke <java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)>("PKIX");

     label2:
        $r1 = virtualinvoke r0.<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)>(r6);

        r7 = interfaceinvoke $r1.<java.security.cert.CertPathBuilderResult: java.security.cert.CertPath getCertPath()>();

     label3:
        return r7;

     label4:
        $r2 := @caughtexception;

        r10 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        r12 = (java.lang.Exception) $r2;

        specialinvoke r10.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.Exception)>(r12);

        throw r10;

     label5:
        $r4 := @caughtexception;

        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw r11;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.cert.CertPathBuilderException from label2 to label3 with label4;
        catch java.security.InvalidAlgorithmParameterException from label2 to label3 with label4;
    }

    static java.security.cert.PKIXParameters buildPkixParams(java.util.Date, java.security.cert.X509Certificate, java.util.List, java.security.cert.X509Certificate) throws com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException
    {
        java.security.cert.X509Certificate r0, r14;
        java.lang.Throwable $r7, $r9, $r11;
        java.util.Date r13;
        java.util.List r15;
        java.security.cert.CertStore r18;
        java.util.HashSet r24;
        java.security.cert.TrustAnchor r25;
        java.util.ArrayList r26;
        java.security.cert.CollectionCertStoreParameters r27;
        java.security.cert.X509CertSelector r28;
        java.security.cert.PKIXBuilderParameters r29;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException r30, r31;
        java.lang.RuntimeException r32;
        java.lang.Exception r33, r34;

        r13 := @parameter0: java.util.Date;

        r14 := @parameter1: java.security.cert.X509Certificate;

        r15 := @parameter2: java.util.List;

        r0 := @parameter3: java.security.cert.X509Certificate;

        r24 = new java.util.HashSet;

        specialinvoke r24.<java.util.HashSet: void <init>()>();

        r25 = new java.security.cert.TrustAnchor;

        specialinvoke r25.<java.security.cert.TrustAnchor: void <init>(java.security.cert.X509Certificate,byte[])>(r14, null);

        interfaceinvoke r24.<java.util.Set: boolean add(java.lang.Object)>(r25);

        r26 = new java.util.ArrayList;

        specialinvoke r26.<java.util.ArrayList: void <init>(java.util.Collection)>(r15);

        interfaceinvoke r26.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        r27 = new java.security.cert.CollectionCertStoreParameters;

        specialinvoke r27.<java.security.cert.CollectionCertStoreParameters: void <init>(java.util.Collection)>(r26);

        r18 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)>("Collection", r27);

     label2:
        r28 = new java.security.cert.X509CertSelector;

        specialinvoke r28.<java.security.cert.X509CertSelector: void <init>()>();

        virtualinvoke r28.<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)>(r0);

     label3:
        r29 = new java.security.cert.PKIXBuilderParameters;

        specialinvoke r29.<java.security.cert.PKIXBuilderParameters: void <init>(java.util.Set,java.security.cert.CertSelector)>(r24, r28);

     label4:
        virtualinvoke r29.<java.security.cert.PKIXBuilderParameters: void addCertStore(java.security.cert.CertStore)>(r18);

        virtualinvoke r29.<java.security.cert.PKIXBuilderParameters: void setDate(java.util.Date)>(r13);

        virtualinvoke r29.<java.security.cert.PKIXBuilderParameters: void setRevocationEnabled(boolean)>(0);

        return r29;

     label5:
        $r7 := @caughtexception;

        r30 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        r33 = (java.lang.Exception) $r7;

        specialinvoke r30.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.Exception)>(r33);

        throw r30;

     label6:
        $r11 := @caughtexception;

        r31 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        r34 = (java.lang.Exception) $r11;

        specialinvoke r31.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.Exception)>(r34);

        throw r31;

     label7:
        $r9 := @caughtexception;

        r32 = new java.lang.RuntimeException;

        specialinvoke r32.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw r32;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label7;
        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label6;
        catch java.security.InvalidAlgorithmParameterException from label3 to label4 with label5;
    }

    public static byte[] decodeBase64(java.lang.String) throws com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException
    {
        java.util.Base64$Decoder $r0;
        java.lang.Throwable $r1;
        java.lang.String r3;
        byte[] r4;
        com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException r6;
        java.lang.Exception r7;

        r3 := @parameter0: java.lang.String;

     label1:
        $r0 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();

        r4 = virtualinvoke $r0.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r3);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        r6 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        r7 = (java.lang.Exception) $r1;

        specialinvoke r6.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.Exception)>(r7);

        throw r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    static java.security.cert.X509Certificate decodeCert(java.io.InputStream) throws com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.Certificate $r1;
        java.lang.Throwable $r2, $r4;
        java.io.InputStream r6;
        java.security.cert.X509Certificate r7;
        com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException r10;
        java.lang.RuntimeException r11;
        java.lang.Exception r12;

        r6 := @parameter0: java.io.InputStream;

     label1:
        r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label2:
        $r1 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r6);

        r7 = (java.security.cert.X509Certificate) $r1;

     label3:
        return r7;

     label4:
        $r4 := @caughtexception;

        r10 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        r12 = (java.lang.Exception) $r4;

        specialinvoke r10.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.Exception)>(r12);

        throw r10;

     label5:
        $r2 := @caughtexception;

        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw r11;

        catch java.security.cert.CertificateException from label1 to label2 with label5;
        catch java.security.cert.CertificateException from label2 to label3 with label4;
    }

    static java.security.cert.X509Certificate decodeCert(byte[]) throws com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r1;
        java.security.cert.X509Certificate $r2;

        r0 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r2 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.security.cert.X509Certificate decodeCert(java.io.InputStream)>($r1);

        return $r2;
    }

    private static java.util.List getXmlDirectChildren(org.w3c.dom.Element, java.lang.String)
    {
        java.lang.String r0, $r4;
        org.w3c.dom.NodeList r2;
        java.util.ArrayList $r3;
        int $i0, i2;
        short $s1;
        boolean $z0;
        org.w3c.dom.Element $r5, r6;
        org.w3c.dom.Node r7;

        r6 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = interfaceinvoke r6.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        if i2 >= $i0 goto label3;

        r7 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $s1 = interfaceinvoke r7.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 1 goto label2;

        $r4 = interfaceinvoke r7.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r5 = (org.w3c.dom.Element) r7;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r3;
    }

    static transient java.util.List getXmlNodeContents(int, org.w3c.dom.Element, java.lang.String[]) throws com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException $r0, $r11, $r17, $r22;
        java.lang.String $r1, $r5, $r6, $r9, $r12, $r15, $r18, $r23, r28;
        java.util.ArrayList $r2, $r25;
        java.lang.Object $r3, $r24;
        org.w3c.dom.Element $r4, r26;
        java.lang.StringBuilder $r7, $r13, $r19;
        java.lang.String[] r27;
        java.util.List r29, r31;
        java.util.Iterator r35;
        boolean $z1;

        i0 := @parameter0: int;

        r26 := @parameter1: org.w3c.dom.Element;

        r27 := @parameter2: java.lang.String[];

        $i1 = lengthof r27;

        if $i1 == 0 goto label12;

        i11 = 0;

     label01:
        $i2 = lengthof r27;

        $i3 = $i2 - 1;

        if i11 >= $i3 goto label05;

        r28 = r27[i11];

        r29 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.util.List getXmlDirectChildren(org.w3c.dom.Element,java.lang.String)>(r26, r28);

        $i8 = interfaceinvoke r29.<java.util.List: int size()>();

        if $i8 != 0 goto label02;

        if i0 != 0 goto label04;

     label02:
        $i9 = interfaceinvoke r29.<java.util.List: int size()>();

        if $i9 > 1 goto label04;

        $i10 = interfaceinvoke r29.<java.util.List: int size()>();

        if $i10 != 0 goto label03;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        return $r25;

     label03:
        $r24 = interfaceinvoke r29.<java.util.List: java.lang.Object get(int)>(0);

        r26 = (org.w3c.dom.Element) $r24;

        i11 = i11 + 1;

        goto label01;

     label04:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The XML file must contain exactly one path with the tag ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r22 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label05:
        $i4 = lengthof r27;

        $i5 = $i4 - 1;

        $r1 = r27[$i5];

        r31 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.util.List getXmlDirectChildren(org.w3c.dom.Element,java.lang.String)>(r26, $r1);

        if i0 != 1 goto label07;

        $i7 = interfaceinvoke r31.<java.util.List: int size()>();

        if $i7 != 1 goto label06;

        goto label07;

     label06:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The XML file must contain exactly one node with the path ");

        $r15 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>("/", r27);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label07:
        if i0 != 2 goto label09;

        $i6 = interfaceinvoke r31.<java.util.List: int size()>();

        if $i6 == 0 goto label08;

        goto label09;

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The XML file must contain at least one node with the path ");

        $r9 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>("/", r27);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label09:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r35 = interfaceinvoke r31.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r3 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.w3c.dom.Element) $r3;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Element: java.lang.String getTextContent()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s", "");

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label10;

     label11:
        return $r2;

     label12:
        $r0 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        specialinvoke $r0.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.String)>("The tag list must not be empty");

        throw $r0;
    }

    static org.w3c.dom.Element getXmlRootNode(byte[]) throws com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException
    {
        javax.xml.parsers.DocumentBuilder r0;
        javax.xml.parsers.DocumentBuilderFactory $r2;
        org.w3c.dom.Element $r3, r8;
        java.lang.Throwable $r4;
        byte[] r6;
        org.w3c.dom.Document r7;
        java.io.ByteArrayInputStream r10;
        com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException r11;
        java.lang.Exception r12;

        r6 := @parameter0: byte[];

     label1:
        $r2 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        r0 = virtualinvoke $r2.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        r10 = new java.io.ByteArrayInputStream;

        specialinvoke r10.<java.io.ByteArrayInputStream: void <init>(byte[])>(r6);

        r7 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>(r10);

        $r3 = interfaceinvoke r7.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        interfaceinvoke $r3.<org.w3c.dom.Element: void normalize()>();

        r8 = interfaceinvoke r7.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

     label2:
        return r8;

     label3:
        $r4 := @caughtexception;

        r11 = new com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException;

        r12 = (java.lang.Exception) $r4;

        specialinvoke r11.<com.android.server.locksettings.recoverablekeystore.certificate.CertParsingException: void <init>(java.lang.Exception)>(r12);

        throw r11;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    static java.security.cert.CertPath validateCert(java.util.Date, java.security.cert.X509Certificate, java.util.List, java.security.cert.X509Certificate) throws com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException
    {
        java.security.cert.X509Certificate r0, r7;
        java.lang.Throwable $r2, $r4;
        java.util.Date r6;
        java.util.List r8;
        java.security.cert.PKIXParameters r9;
        java.security.cert.CertPath r10;
        java.security.cert.CertPathValidator r11;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException r14;
        java.lang.RuntimeException r15;
        java.lang.Exception r16;

        r6 := @parameter0: java.util.Date;

        r7 := @parameter1: java.security.cert.X509Certificate;

        r8 := @parameter2: java.util.List;

        r0 := @parameter3: java.security.cert.X509Certificate;

        r9 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.security.cert.PKIXParameters buildPkixParams(java.util.Date,java.security.cert.X509Certificate,java.util.List,java.security.cert.X509Certificate)>(r6, r7, r8, r0);

        r10 = staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.security.cert.CertPath buildCertPath(java.security.cert.PKIXParameters)>(r9);

     label1:
        r11 = staticinvoke <java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)>("PKIX");

     label2:
        virtualinvoke r11.<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>(r10, r9);

     label3:
        return r10;

     label4:
        $r2 := @caughtexception;

        r14 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        r16 = (java.lang.Exception) $r2;

        specialinvoke r14.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.Exception)>(r16);

        throw r14;

     label5:
        $r4 := @caughtexception;

        r15 = new java.lang.RuntimeException;

        specialinvoke r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw r15;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.security.cert.CertPathValidatorException from label2 to label3 with label4;
        catch java.security.InvalidAlgorithmParameterException from label2 to label3 with label4;
    }

    public static void validateCertPath(java.security.cert.X509Certificate, java.security.cert.CertPath) throws com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException
    {
        java.security.cert.X509Certificate r0;
        java.security.cert.CertPath r1;

        r0 := @parameter0: java.security.cert.X509Certificate;

        r1 := @parameter1: java.security.cert.CertPath;

        staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: void validateCertPath(java.util.Date,java.security.cert.X509Certificate,java.security.cert.CertPath)>(null, r0, r1);

        return;
    }

    static void validateCertPath(java.util.Date, java.security.cert.X509Certificate, java.security.cert.CertPath) throws com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException
    {
        java.util.Date r0;
        java.security.cert.X509Certificate r1, r2;
        java.util.List $r3, $r5, $r9, r12;
        boolean $z0, $z1;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException $r4, $r7;
        java.lang.Object $r6, $r8;
        int $i0;
        java.security.cert.CertPath r11;

        r0 := @parameter0: java.util.Date;

        r1 := @parameter1: java.security.cert.X509Certificate;

        r11 := @parameter2: java.security.cert.CertPath;

        $r3 = virtualinvoke r11.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r11.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0);

        $z1 = $r6 instanceof java.security.cert.X509Certificate;

        if $z1 == 0 goto label1;

        r12 = virtualinvoke r11.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $r8 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (java.security.cert.X509Certificate) $r8;

        $i0 = interfaceinvoke r12.<java.util.List: int size()>();

        $r9 = interfaceinvoke r12.<java.util.List: java.util.List subList(int,int)>(1, $i0);

        staticinvoke <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.security.cert.CertPath validateCert(java.util.Date,java.security.cert.X509Certificate,java.util.List,java.security.cert.X509Certificate)>(r0, r1, $r9, r2);

        return;

     label1:
        $r7 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        specialinvoke $r7.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.String)>("The given certificate path does not contain X509 certificates");

        throw $r7;

     label2:
        $r4 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        specialinvoke $r4.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.String)>("The given certificate path is empty");

        throw $r4;
    }

    static void verifyRsaSha256Signature(java.security.PublicKey, byte[], byte[]) throws com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException
    {
        byte[] r0, r1;
        java.security.Signature r2;
        boolean $z0;
        java.lang.Throwable $r3, $r5;
        java.security.PublicKey r7;
        com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException r11, r12;
        java.lang.RuntimeException r13;
        java.lang.Exception r14;

        r7 := @parameter0: java.security.PublicKey;

        r0 := @parameter1: byte[];

        r1 := @parameter2: byte[];

     label1:
        r2 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>("SHA256withRSA");

     label2:
        virtualinvoke r2.<java.security.Signature: void initVerify(java.security.PublicKey)>(r7);

        virtualinvoke r2.<java.security.Signature: void update(byte[])>(r1);

        $z0 = virtualinvoke r2.<java.security.Signature: boolean verify(byte[])>(r0);

        if $z0 == 0 goto label4;

     label3:
        return;

     label4:
        r11 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        specialinvoke r11.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.String)>("The signature is invalid");

        throw r11;

     label5:
        $r5 := @caughtexception;

        r12 = new com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException;

        r14 = (java.lang.Exception) $r5;

        specialinvoke r12.<com.android.server.locksettings.recoverablekeystore.certificate.CertValidationException: void <init>(java.lang.Exception)>(r14);

        throw r12;

     label6:
        $r3 := @caughtexception;

        r13 = new java.lang.RuntimeException;

        specialinvoke r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw r13;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.InvalidKeyException from label2 to label3 with label5;
        catch java.security.SignatureException from label2 to label3 with label5;
        catch java.security.InvalidKeyException from label4 to label5 with label5;
        catch java.security.SignatureException from label4 to label5 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.lang.String SIGNATURE_ALG> = "SHA256withRSA";

        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: int MUST_EXIST_UNENFORCED> = 0;

        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: int MUST_EXIST_EXACTLY_ONE> = 1;

        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: int MUST_EXIST_AT_LEAST_ONE> = 2;

        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.lang.String CERT_STORE_ALG> = "Collection";

        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.lang.String CERT_PATH_ALG> = "PKIX";

        <com.android.server.locksettings.recoverablekeystore.certificate.CertUtils: java.lang.String CERT_FORMAT> = "X.509";

        return;
    }
}
