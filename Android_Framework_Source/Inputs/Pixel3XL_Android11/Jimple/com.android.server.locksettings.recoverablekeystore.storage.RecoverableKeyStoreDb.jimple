public class com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb extends java.lang.Object
{
    private static final java.lang.String CERT_PATH_ENCODING;
    private static final int IDLE_TIMEOUT_SECONDS;
    private static final int LAST_SYNCED_AT_UNSYNCED;
    private static final java.lang.String TAG;
    private final com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper;
    private final com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper;

    private void <init>(com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r1;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        r1 := @parameter0: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper> = r1;

        $r2 = new com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper;

        specialinvoke $r2.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: void <init>()>();

        r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper> = $r2;

        return;
    }

    private static java.security.cert.CertPath decodeCertPath(byte[]) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.ByteArrayInputStream $r1;
        java.security.cert.CertPath $r2;
        java.lang.Throwable $r3;
        java.lang.RuntimeException $r4;
        byte[] r5;

        r5 := @parameter0: byte[];

     label1:
        r0 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

     label2:
        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r5);

        $r2 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream,java.lang.String)>($r1, "PkiPath");

        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    private static java.security.PublicKey decodeX509Key(byte[]) throws java.security.spec.InvalidKeySpecException
    {
        java.security.spec.X509EncodedKeySpec $r0;
        java.security.KeyFactory $r1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException $r3;
        byte[] r4;
        java.security.PublicKey r6;

        r4 := @parameter0: byte[];

        $r0 = new java.security.spec.X509EncodedKeySpec;

        specialinvoke $r0.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>(r4);

     label1:
        $r1 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("EC");

        r6 = virtualinvoke $r1.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r0);

     label2:
        return r6;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private void ensureRecoveryServiceMetadataEntryExists(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5, $r6;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user_id", $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("uid", $r6);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("recovery_service_metadata", null, $r4, 4);

        return;
    }

    private void ensureRootOfTrustEntryExists(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.String r1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        android.content.ContentValues $r5;
        java.lang.Integer $r6, $r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user_id", $r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("uid", $r7);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("root_alias", r1);

        virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("root_of_trust", null, $r5, 4);

        return;
    }

    private void ensureUserMetadataEntryExists(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user_id", $r5);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)>("user_metadata", null, $r4, 4);

        return;
    }

    private byte[] getBytes(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, i3, i4;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, $r11, r14, r15;
        boolean z0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        java.lang.String[] $r4, $r5;
        java.lang.Object[] $r6;
        java.util.Locale $r7;
        java.lang.Integer $r8, $r9, $r10;
        java.lang.Throwable $r12, $r13;
        android.database.Cursor r16;
        byte[] r17;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r14 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = "_id";

        $r4[1] = "user_id";

        $r4[2] = "uid";

        $r4[3] = r14;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r2;

        $r5[1] = r15;

        r16 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("recovery_service_metadata", $r4, "user_id = ? AND uid = ?", $r5, null, null, null);

     label01:
        i1 = interfaceinvoke r16.<android.database.Cursor: int getCount()>();

     label02:
        if i1 != 0 goto label04;

        if r16 == null goto label03;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        if i1 <= 1 goto label08;

     label05:
        $r7 = <java.util.Locale: java.util.Locale US>;

        $r6 = newarray (java.lang.Object)[3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[2] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, "%d entries found for userId=%d uid=%d. Should only ever be 0 or 1.", $r6);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r11);

     label06:
        if r16 == null goto label07;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label07:
        return null;

     label08:
        interfaceinvoke r16.<android.database.Cursor: boolean moveToFirst()>();

        i4 = interfaceinvoke r16.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>(r14);

        z0 = interfaceinvoke r16.<android.database.Cursor: boolean isNull(int)>(i4);

     label09:
        if z0 == 0 goto label11;

        if r16 == null goto label10;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label10:
        return null;

     label11:
        r17 = interfaceinvoke r16.<android.database.Cursor: byte[] getBlob(int)>(i4);

     label12:
        if r16 == null goto label13;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label13:
        return r17;

     label14:
        $r13 := @caughtexception;

        if r16 == null goto label18;

     label15:
        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label16:
        goto label18;

     label17:
        $r12 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label18:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private byte[] getBytes(int, int, java.lang.String, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, i3, i4;
        java.lang.String r1, r3, $r13, r16, r17, r18;
        android.database.sqlite.SQLiteDatabase r2;
        boolean z0;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r4;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r5;
        java.lang.String[] $r6, $r7;
        java.lang.Object[] $r8;
        java.util.Locale $r9;
        java.lang.Integer $r10, $r11, $r12;
        java.lang.Throwable $r14, $r15;
        android.database.Cursor r19;
        byte[] r20;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r16 := @parameter2: java.lang.String;

        r17 := @parameter3: java.lang.String;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        r1 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r16);

        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r6 = newarray (java.lang.String)[5];

        $r6[0] = "_id";

        $r6[1] = "user_id";

        $r6[2] = "uid";

        $r6[3] = "root_alias";

        $r6[4] = r17;

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = r18;

        $r7[1] = r3;

        $r7[2] = r1;

        r19 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("root_of_trust", $r6, "user_id = ? AND uid = ? AND root_alias = ?", $r7, null, null, null);

     label01:
        i1 = interfaceinvoke r19.<android.database.Cursor: int getCount()>();

     label02:
        if i1 != 0 goto label04;

        if r19 == null goto label03;

        interfaceinvoke r19.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        if i1 <= 1 goto label08;

     label05:
        $r9 = <java.util.Locale: java.util.Locale US>;

        $r8 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r8[1] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[2] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "%d entries found for userId=%d uid=%d. Should only ever be 0 or 1.", $r8);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r13);

     label06:
        if r19 == null goto label07;

        interfaceinvoke r19.<android.database.Cursor: void close()>();

     label07:
        return null;

     label08:
        interfaceinvoke r19.<android.database.Cursor: boolean moveToFirst()>();

        i4 = interfaceinvoke r19.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>(r17);

        z0 = interfaceinvoke r19.<android.database.Cursor: boolean isNull(int)>(i4);

     label09:
        if z0 == 0 goto label11;

        if r19 == null goto label10;

        interfaceinvoke r19.<android.database.Cursor: void close()>();

     label10:
        return null;

     label11:
        r20 = interfaceinvoke r19.<android.database.Cursor: byte[] getBlob(int)>(i4);

     label12:
        if r19 == null goto label13;

        interfaceinvoke r19.<android.database.Cursor: void close()>();

     label13:
        return r20;

     label14:
        $r14 := @caughtexception;

        if r19 == null goto label18;

     label15:
        interfaceinvoke r19.<android.database.Cursor: void close()>();

     label16:
        goto label18;

     label17:
        $r15 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

     label18:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private java.lang.Long getLong(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, i4, i5;
        java.lang.String r1, r2, $r12, r15;
        boolean z0;
        long l2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        java.lang.String[] $r4, $r5;
        java.lang.Long $r6;
        java.lang.Object[] $r7;
        java.util.Locale $r8;
        java.lang.Integer $r9, $r10, $r11;
        java.lang.Throwable $r13, $r14;
        android.database.sqlite.SQLiteDatabase r16;
        android.database.Cursor r17;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        r15 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r16 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i4);

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = "_id";

        $r4[1] = "user_id";

        $r4[2] = "uid";

        $r4[3] = r15;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r1;

        $r5[1] = r2;

        r17 = virtualinvoke r16.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("recovery_service_metadata", $r4, "user_id = ? AND uid = ?", $r5, null, null, null);

     label01:
        i1 = interfaceinvoke r17.<android.database.Cursor: int getCount()>();

     label02:
        if i1 != 0 goto label04;

        if r17 == null goto label03;

        interfaceinvoke r17.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        if i1 <= 1 goto label08;

     label05:
        $r8 = <java.util.Locale: java.util.Locale US>;

        $r7 = newarray (java.lang.Object)[3];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[0] = $r9;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r7[1] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[2] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r8, "%d entries found for userId=%d uid=%d. Should only ever be 0 or 1.", $r7);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r12);

     label06:
        if r17 == null goto label07;

        interfaceinvoke r17.<android.database.Cursor: void close()>();

     label07:
        return null;

     label08:
        interfaceinvoke r17.<android.database.Cursor: boolean moveToFirst()>();

        i5 = interfaceinvoke r17.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>(r15);

        z0 = interfaceinvoke r17.<android.database.Cursor: boolean isNull(int)>(i5);

     label09:
        if z0 == 0 goto label11;

        if r17 == null goto label10;

        interfaceinvoke r17.<android.database.Cursor: void close()>();

     label10:
        return null;

     label11:
        l2 = interfaceinvoke r17.<android.database.Cursor: long getLong(int)>(i5);

     label12:
        if r17 == null goto label13;

        interfaceinvoke r17.<android.database.Cursor: void close()>();

     label13:
        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        return $r6;

     label14:
        $r13 := @caughtexception;

        if r17 == null goto label18;

     label15:
        interfaceinvoke r17.<android.database.Cursor: void close()>();

     label16:
        goto label18;

     label17:
        $r14 := @caughtexception;

        virtualinvoke $r13.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label18:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private java.lang.Long getLong(int, int, java.lang.String, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, i4, i5;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, $r13, r16, r17, r18, r19;
        boolean z0;
        long l2;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r3;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        java.lang.String[] $r5, $r6;
        java.lang.Long $r7;
        java.lang.Object[] $r8;
        java.util.Locale $r9;
        java.lang.Integer $r10, $r11, $r12;
        java.lang.Throwable $r14, $r15;
        android.database.Cursor r20;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        r16 := @parameter2: java.lang.String;

        r17 := @parameter3: java.lang.String;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        r18 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r16);

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i4);

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5 = newarray (java.lang.String)[5];

        $r5[0] = "_id";

        $r5[1] = "user_id";

        $r5[2] = "uid";

        $r5[3] = "root_alias";

        $r5[4] = r17;

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = r19;

        $r6[1] = r2;

        $r6[2] = r18;

        r20 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("root_of_trust", $r5, "user_id = ? AND uid = ? AND root_alias = ?", $r6, null, null, null);

     label01:
        i1 = interfaceinvoke r20.<android.database.Cursor: int getCount()>();

     label02:
        if i1 != 0 goto label04;

        if r20 == null goto label03;

        interfaceinvoke r20.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        if i1 <= 1 goto label08;

     label05:
        $r9 = <java.util.Locale: java.util.Locale US>;

        $r8 = newarray (java.lang.Object)[3];

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[0] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r8[1] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[2] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r9, "%d entries found for userId=%d uid=%d. Should only ever be 0 or 1.", $r8);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r13);

     label06:
        if r20 == null goto label07;

        interfaceinvoke r20.<android.database.Cursor: void close()>();

     label07:
        return null;

     label08:
        interfaceinvoke r20.<android.database.Cursor: boolean moveToFirst()>();

        i5 = interfaceinvoke r20.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>(r17);

        z0 = interfaceinvoke r20.<android.database.Cursor: boolean isNull(int)>(i5);

     label09:
        if z0 == 0 goto label11;

        if r20 == null goto label10;

        interfaceinvoke r20.<android.database.Cursor: void close()>();

     label10:
        return null;

     label11:
        l2 = interfaceinvoke r20.<android.database.Cursor: long getLong(int)>(i5);

     label12:
        if r20 == null goto label13;

        interfaceinvoke r20.<android.database.Cursor: void close()>();

     label13:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        return $r7;

     label14:
        $r15 := @caughtexception;

        if r20 == null goto label18;

     label15:
        interfaceinvoke r20.<android.database.Cursor: void close()>();

     label16:
        goto label18;

     label17:
        $r14 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

     label18:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    static void lambda$setRecoverySecretTypes$0(java.util.StringJoiner, int)
    {
        java.util.StringJoiner r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.StringJoiner;

        i0 := @parameter1: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r1);

        return;
    }

    public static com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb newInstance(android.content.Context)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb $r1;
        android.content.Context r2;

        r2 := @parameter0: android.content.Context;

        $r0 = new com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        specialinvoke $r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void <init>(android.content.Context)>(r2);

        virtualinvoke $r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void setWriteAheadLoggingEnabled(boolean)>(1);

        virtualinvoke $r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void setIdleConnectionTimeout(long)>(30L);

        $r1 = new com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        specialinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void <init>(com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper)>($r0);

        return $r1;
    }

    private boolean removeUserFromKeysTable(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3[0] = $r4;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("keys", "user_id = ?", $r3);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean removeUserFromRecoveryServiceMetadataTable(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3[0] = $r4;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("recovery_service_metadata", "user_id = ?", $r3);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean removeUserFromRootOfTrustTable(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3[0] = $r4;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("root_of_trust", "user_id = ?", $r3);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean removeUserFromUserMetadataTable(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        z0 = 1;

        $r3 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3[0] = $r4;

        $i1 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("user_metadata", "user_id = ?", $r3);

        if $i1 <= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private long setBytes(int, int, java.lang.String, java.lang.String, byte[])
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r3;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        android.content.ContentValues $r5;
        java.lang.String[] $r6;
        long $l3;
        java.lang.String r7, r8, r10, r11, r12;
        byte[] r9;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        r8 := @parameter3: java.lang.String;

        r9 := @parameter4: byte[];

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        r10 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r7);

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,byte[])>(r8, r9);

        r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRootOfTrustEntryExists(int,int,java.lang.String)>(i0, i1, r10);

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = r11;

        $r6[1] = r12;

        $r6[2] = r10;

        $i2 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("root_of_trust", $r5, "user_id = ? AND uid = ? AND root_alias = ?", $r6);

        $l3 = (long) $i2;

        return $l3;
    }

    private long setBytes(int, int, java.lang.String, byte[])
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.String[] $r5;
        long $l3;
        java.lang.String r6, r8, r9;
        byte[] r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r7 := @parameter3: byte[];

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,byte[])>(r6, r7);

        r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRecoveryServiceMetadataEntryExists(int,int)>(i0, i1);

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r8;

        $r5[1] = r9;

        $i2 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("recovery_service_metadata", $r4, "user_id = ? AND uid = ?", $r5);

        $l3 = (long) $i2;

        return $l3;
    }

    private long setLong(int, int, java.lang.String, long)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i3;
        long l2, $l4;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r3, r8, r9;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        android.content.ContentValues $r5;
        java.lang.Long $r6;
        java.lang.String[] $r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r8 := @parameter2: java.lang.String;

        l2 := @parameter3: long;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>(r8, $r6);

        r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRecoveryServiceMetadataEntryExists(int,int)>(i0, i1);

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = r3;

        $r7[1] = r9;

        $i3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("recovery_service_metadata", $r5, "user_id = ? AND uid = ?", $r7);

        $l4 = (long) $i3;

        return $l4;
    }

    private long setLong(int, int, java.lang.String, java.lang.String, long)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i3;
        long l2, $l4;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r3, r9, r10, r11, r12;
        com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper $r4;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r5;
        android.content.ContentValues $r6;
        java.lang.Long $r7;
        java.lang.String[] $r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r9 := @parameter2: java.lang.String;

        r10 := @parameter3: java.lang.String;

        l2 := @parameter4: long;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper mTestOnlyInsecureCertificateHelper>;

        r11 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.TestOnlyInsecureCertificateHelper: java.lang.String getDefaultCertificateAliasIfEmpty(java.lang.String)>(r9);

        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>(r10, $r7);

        r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRootOfTrustEntryExists(int,int,java.lang.String)>(i0, i1, r11);

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = r12;

        $r8[1] = r3;

        $r8[2] = r11;

        $i3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("root_of_trust", $r6, "user_id = ? AND uid = ? AND root_alias = ?", $r8);

        $l4 = (long) $i3;

        return $l4;
    }

    public void close()
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void close()>();

        return;
    }

    public java.lang.String getActiveRootOfTrust(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, i3, i4;
        java.lang.String r1, $r10, r14, r16;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3, $r4;
        java.lang.Object[] $r5;
        java.util.Locale $r6;
        java.lang.Integer $r7, $r8, $r9;
        java.lang.Throwable $r11, $r12;
        android.database.sqlite.SQLiteDatabase r13;
        android.database.Cursor r15;
        boolean z1, z2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r13 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i3);

        r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3 = newarray (java.lang.String)[4];

        $r3[0] = "_id";

        $r3[1] = "user_id";

        $r3[2] = "uid";

        $r3[3] = "active_root_of_trust";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r1;

        $r4[1] = r14;

        r15 = virtualinvoke r13.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("recovery_service_metadata", $r3, "user_id = ? AND uid = ?", $r4, null, null, null);

     label01:
        i1 = interfaceinvoke r15.<android.database.Cursor: int getCount()>();

     label02:
        if i1 != 0 goto label04;

        if r15 == null goto label03;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        if i1 <= 1 goto label08;

     label05:
        $r6 = <java.util.Locale: java.util.Locale US>;

        $r5 = newarray (java.lang.Object)[3];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r5[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[2] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r6, "%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1.", $r5);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r10);

     label06:
        if r15 == null goto label07;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label07:
        return null;

     label08:
        interfaceinvoke r15.<android.database.Cursor: boolean moveToFirst()>();

        i4 = interfaceinvoke r15.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("active_root_of_trust");

        z1 = interfaceinvoke r15.<android.database.Cursor: boolean isNull(int)>(i4);

     label09:
        if z1 == 0 goto label11;

        if r15 == null goto label10;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label10:
        return null;

     label11:
        r16 = interfaceinvoke r15.<android.database.Cursor: java.lang.String getString(int)>(i4);

        z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r16);

     label12:
        if z2 == 0 goto label14;

        if r15 == null goto label13;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label13:
        return null;

     label14:
        if r15 == null goto label15;

        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label15:
        return r16;

     label16:
        $r11 := @caughtexception;

        if r15 == null goto label20;

     label17:
        interfaceinvoke r15.<android.database.Cursor: void close()>();

     label18:
        goto label20;

     label19:
        $r12 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label20:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label17 to label18 with label19;
    }

    public java.util.Map getAllKeys(int, int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        byte[] r1, r16, r17;
        java.lang.String r2, r11, r12, r13;
        com.android.server.locksettings.recoverablekeystore.WrappedKey r3;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        java.lang.String[] $r5, $r6;
        boolean $z0, $z1;
        java.lang.Throwable $r8, $r9;
        android.database.sqlite.SQLiteDatabase r10;
        android.database.Cursor r14;
        java.util.HashMap r15;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r10 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);

        r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i6);

        r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r5 = newarray (java.lang.String)[6];

        $r5[0] = "_id";

        $r5[1] = "nonce";

        $r5[2] = "wrapped_key";

        $r5[3] = "alias";

        $r5[4] = "recovery_status";

        $r5[5] = "key_metadata";

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = r11;

        $r6[1] = r12;

        $r6[2] = r13;

        r14 = virtualinvoke r10.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("keys", $r5, "user_id = ? AND uid = ? AND platform_key_generation_id = ?", $r6, null, null, null);

     label01:
        r15 = new java.util.HashMap;

        specialinvoke r15.<java.util.HashMap: void <init>()>();

     label02:
        $z0 = interfaceinvoke r14.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label07;

        $i1 = interfaceinvoke r14.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("nonce");

        r1 = interfaceinvoke r14.<android.database.Cursor: byte[] getBlob(int)>($i1);

        $i2 = interfaceinvoke r14.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("wrapped_key");

        r16 = interfaceinvoke r14.<android.database.Cursor: byte[] getBlob(int)>($i2);

        $i3 = interfaceinvoke r14.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("alias");

        r2 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>($i3);

        $i4 = interfaceinvoke r14.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("recovery_status");

        i7 = interfaceinvoke r14.<android.database.Cursor: int getInt(int)>($i4);

        i8 = interfaceinvoke r14.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("key_metadata");

        $z1 = interfaceinvoke r14.<android.database.Cursor: boolean isNull(int)>(i8);

        if $z1 == 0 goto label04;

     label03:
        r17 = null;

        goto label05;

     label04:
        r17 = interfaceinvoke r14.<android.database.Cursor: byte[] getBlob(int)>(i8);

     label05:
        r3 = new com.android.server.locksettings.recoverablekeystore.WrappedKey;

        specialinvoke r3.<com.android.server.locksettings.recoverablekeystore.WrappedKey: void <init>(byte[],byte[],byte[],int,int)>(r1, r16, r17, i0, i7);

        virtualinvoke r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label06:
        goto label02;

     label07:
        if r14 == null goto label08;

        interfaceinvoke r14.<android.database.Cursor: void close()>();

     label08:
        return r15;

     label09:
        $r9 := @caughtexception;

        if r14 == null goto label13;

     label10:
        interfaceinvoke r14.<android.database.Cursor: void close()>();

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label13:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    public java.lang.Long getCounterId(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.Long $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getLong(int,int,java.lang.String)>(i0, i1, "counter_id");

        return $r1;
    }

    public com.android.server.locksettings.recoverablekeystore.WrappedKey getKey(int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        byte[] r1, r17, r18;
        int i0, $i1, $i2, $i3, $i4, i6, i7, i8, i9;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3, $r4;
        boolean $z1;
        com.android.server.locksettings.recoverablekeystore.WrappedKey $r5;
        java.lang.Object[] $r6;
        java.util.Locale $r7;
        java.lang.Integer $r8, $r9;
        java.lang.String $r10, r13, r15;
        java.lang.Throwable $r11, $r12;
        android.database.sqlite.SQLiteDatabase r14;
        android.database.Cursor r16;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i6 := @parameter0: int;

        r13 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r14 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i6);

        $r3 = newarray (java.lang.String)[6];

        $r3[0] = "_id";

        $r3[1] = "nonce";

        $r3[2] = "wrapped_key";

        $r3[3] = "platform_key_generation_id";

        $r3[4] = "recovery_status";

        $r3[5] = "key_metadata";

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = r15;

        $r4[1] = r13;

        r16 = virtualinvoke r14.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("keys", $r3, "uid = ? AND alias = ?", $r4, null, null, null);

     label01:
        i7 = interfaceinvoke r16.<android.database.Cursor: int getCount()>();

     label02:
        if i7 != 0 goto label04;

        if r16 == null goto label03;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label03:
        return null;

     label04:
        if i7 <= 1 goto label08;

     label05:
        $r7 = <java.util.Locale: java.util.Locale US>;

        $r6 = newarray (java.lang.Object)[3];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r6[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r6[1] = $r9;

        $r6[2] = r13;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r7, "%d WrappedKey entries found for uid=%d alias=\'%s\'. Should only ever be 0 or 1.", $r6);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r10);

     label06:
        if r16 == null goto label07;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label07:
        return null;

     label08:
        interfaceinvoke r16.<android.database.Cursor: boolean moveToFirst()>();

        $i1 = interfaceinvoke r16.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("nonce");

        r17 = interfaceinvoke r16.<android.database.Cursor: byte[] getBlob(int)>($i1);

        $i2 = interfaceinvoke r16.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("wrapped_key");

        r1 = interfaceinvoke r16.<android.database.Cursor: byte[] getBlob(int)>($i2);

        $i3 = interfaceinvoke r16.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("platform_key_generation_id");

        i0 = interfaceinvoke r16.<android.database.Cursor: int getInt(int)>($i3);

        $i4 = interfaceinvoke r16.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("recovery_status");

        i8 = interfaceinvoke r16.<android.database.Cursor: int getInt(int)>($i4);

        i9 = interfaceinvoke r16.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("key_metadata");

        $z1 = interfaceinvoke r16.<android.database.Cursor: boolean isNull(int)>(i9);

        if $z1 == 0 goto label10;

     label09:
        r18 = null;

        goto label11;

     label10:
        r18 = interfaceinvoke r16.<android.database.Cursor: byte[] getBlob(int)>(i9);

     label11:
        $r5 = new com.android.server.locksettings.recoverablekeystore.WrappedKey;

        specialinvoke $r5.<com.android.server.locksettings.recoverablekeystore.WrappedKey: void <init>(byte[],byte[],byte[],int,int)>(r17, r1, r18, i0, i8);

     label12:
        if r16 == null goto label13;

        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label13:
        return $r5;

     label14:
        $r11 := @caughtexception;

        if r16 == null goto label18;

     label15:
        interfaceinvoke r16.<android.database.Cursor: void close()>();

     label16:
        goto label18;

     label17:
        $r12 := @caughtexception;

        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label18:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    public int getPlatformKeyGenerationId(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r1;
        java.lang.String[] $r2, $r3;
        int $i0, i1, i2, i3;
        java.lang.Throwable $r4, $r5;
        android.database.sqlite.SQLiteDatabase r6;
        java.lang.String r7;
        android.database.Cursor r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i1 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r6 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "platform_key_generation_id";

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r7;

        r8 = virtualinvoke r6.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("user_metadata", $r2, "user_id = ?", $r3, null, null, null);

     label01:
        i2 = interfaceinvoke r8.<android.database.Cursor: int getCount()>();

     label02:
        if i2 != 0 goto label04;

        if r8 == null goto label03;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label03:
        return -1;

     label04:
        interfaceinvoke r8.<android.database.Cursor: boolean moveToFirst()>();

     label05:
        $i0 = interfaceinvoke r8.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("platform_key_generation_id");

        i3 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>($i0);

     label06:
        if r8 == null goto label07;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label07:
        return i3;

     label08:
        $r4 := @caughtexception;

        if r8 == null goto label12;

     label09:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label10:
        goto label12;

     label11:
        $r5 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public java.util.List getRecoveryAgents(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r1;
        java.lang.String[] $r2, $r3;
        boolean $z0;
        int $i0, $i1, i2, i3;
        java.lang.Integer $r4;
        java.lang.Throwable $r5, $r6;
        android.database.sqlite.SQLiteDatabase r7;
        java.lang.String r8;
        android.database.Cursor r9;
        java.util.ArrayList r10;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i2 := @parameter0: int;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r7 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "uid";

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r8;

        r9 = virtualinvoke r7.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("recovery_service_metadata", $r2, "user_id = ?", $r3, null, null, null);

     label01:
        i3 = interfaceinvoke r9.<android.database.Cursor: int getCount()>();

        r10 = new java.util.ArrayList;

        specialinvoke r10.<java.util.ArrayList: void <init>(int)>(i3);

     label02:
        $z0 = interfaceinvoke r9.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label05;

     label03:
        $i0 = interfaceinvoke r9.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("uid");

        $i1 = interfaceinvoke r9.<android.database.Cursor: int getInt(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label04:
        goto label02;

     label05:
        if r9 == null goto label06;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label06:
        return r10;

     label07:
        $r6 := @caughtexception;

        if r9 == null goto label11;

     label08:
        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public int[] getRecoverySecretTypes(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1, $i2, i5, i6, i7, i8, i9;
        java.lang.String[] r1, $r4, $r5;
        int[] r2, $r7, $r8, $r15, $r16;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        boolean $z1, $z2;
        java.lang.String $r6, $r14, $r21, r24, r25, r27;
        java.lang.Object[] $r9;
        java.util.Locale $r10;
        java.lang.Integer $r11, $r12, $r13;
        java.lang.Throwable $r17, $r18, $r22;
        android.database.sqlite.SQLiteDatabase r23;
        android.database.Cursor r26;
        java.lang.StringBuilder r29;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r23 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r24 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i5);

        r25 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i6);

        $r4 = newarray (java.lang.String)[4];

        $r4[0] = "_id";

        $r4[1] = "user_id";

        $r4[2] = "uid";

        $r4[3] = "secret_types";

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r24;

        $r5[1] = r25;

        r26 = virtualinvoke r23.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("recovery_service_metadata", $r4, "user_id = ? AND uid = ?", $r5, null, null, null);

     label01:
        i0 = interfaceinvoke r26.<android.database.Cursor: int getCount()>();

     label02:
        if i0 != 0 goto label04;

        if r26 == null goto label03;

        interfaceinvoke r26.<android.database.Cursor: void close()>();

     label03:
        $r16 = newarray (int)[0];

        return $r16;

     label04:
        if i0 <= 1 goto label08;

     label05:
        $r10 = <java.util.Locale: java.util.Locale US>;

        $r9 = newarray (java.lang.Object)[3];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[0] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        $r9[1] = $r12;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $r9[2] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r10, "%d deviceId entries found for userId=%d uid=%d. Should only ever be 0 or 1.", $r9);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r14);

     label06:
        if r26 == null goto label07;

        interfaceinvoke r26.<android.database.Cursor: void close()>();

     label07:
        $r15 = newarray (int)[0];

        return $r15;

     label08:
        interfaceinvoke r26.<android.database.Cursor: boolean moveToFirst()>();

        i7 = interfaceinvoke r26.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("secret_types");

        $z1 = interfaceinvoke r26.<android.database.Cursor: boolean isNull(int)>(i7);

        if $z1 == 0 goto label11;

     label09:
        if r26 == null goto label10;

        interfaceinvoke r26.<android.database.Cursor: void close()>();

     label10:
        $r8 = newarray (int)[0];

        return $r8;

     label11:
        r27 = interfaceinvoke r26.<android.database.Cursor: java.lang.String getString(int)>(i7);

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r27);

        if $z2 == 0 goto label14;

     label12:
        if r26 == null goto label13;

        interfaceinvoke r26.<android.database.Cursor: void close()>();

     label13:
        $r7 = newarray (int)[0];

        return $r7;

     label14:
        r1 = virtualinvoke r27.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i1 = lengthof r1;

        r2 = newarray (int)[$i1];

     label15:
        i8 = 0;

     label16:
        i9 = lengthof r1;

     label17:
        if i8 >= i9 goto label23;

     label18:
        $r6 = r1[i8];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6);

        r2[i8] = $i2;

     label19:
        goto label22;

     label20:
        $r18 := @caughtexception;

     label21:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String format error ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r21 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r21);

     label22:
        i8 = i8 + 1;

        goto label16;

     label23:
        if r26 == null goto label24;

        interfaceinvoke r26.<android.database.Cursor: void close()>();

     label24:
        return r2;

     label25:
        $r22 := @caughtexception;

        if r26 == null goto label29;

     label26:
        interfaceinvoke r26.<android.database.Cursor: void close()>();

     label27:
        goto label29;

     label28:
        $r17 := @caughtexception;

        virtualinvoke $r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

     label29:
        throw $r22;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.NumberFormatException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    public java.security.cert.CertPath getRecoveryServiceCertPath(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        java.lang.Integer $r4, $r5;
        java.lang.String $r6, r7;
        byte[] r8;
        java.security.cert.CertPath r9;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: java.lang.String;

        r8 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: byte[] getBytes(int,int,java.lang.String,java.lang.String)>(i0, i1, r7, "cert_path");

        if r8 != null goto label1;

        return null;

     label1:
        r9 = staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.security.cert.CertPath decodeCertPath(byte[])>(r8);

     label2:
        return r9;

     label3:
        $r1 := @caughtexception;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "Recovery service CertPath entry cannot be decoded for userId=%d uid=%d.", $r2);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("RecoverableKeyStoreDb", $r6, $r1);

        return null;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    public java.lang.Long getRecoveryServiceCertSerial(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.String r1;
        java.lang.Long $r2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getLong(int,int,java.lang.String,java.lang.String)>(i0, i1, r1, "cert_serial");

        return $r2;
    }

    public java.security.PublicKey getRecoveryServicePublicKey(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.Throwable $r1;
        java.lang.Object[] $r2;
        java.util.Locale $r3;
        java.lang.Integer $r4, $r5;
        java.lang.String $r6;
        byte[] r7;
        java.security.PublicKey r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: byte[] getBytes(int,int,java.lang.String)>(i0, i1, "public_key");

        if r7 != null goto label1;

        return null;

     label1:
        r8 = staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.security.PublicKey decodeX509Key(byte[])>(r7);

     label2:
        return r8;

     label3:
        $r1 := @caughtexception;

        $r3 = <java.util.Locale: java.util.Locale US>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])>($r3, "Recovery service public key entry cannot be decoded for userId=%d uid=%d.", $r2);

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("RecoverableKeyStoreDb", $r6);

        return null;

        catch java.security.spec.InvalidKeySpecException from label1 to label2 with label3;
    }

    public byte[] getServerParams(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        byte[] $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: byte[] getBytes(int,int,java.lang.String)>(i0, i1, "server_params");

        return $r1;
    }

    public boolean getShouldCreateSnapshot(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.Long r1;
        long $l2;
        byte $b3;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getLong(int,int,java.lang.String)>(i0, i1, "should_create_snapshot");

        if r1 == null goto label1;

        $l2 = virtualinvoke r1.<java.lang.Long: long longValue()>();

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.Long getSnapshotVersion(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.Long $r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.Long getLong(int,int,java.lang.String)>(i0, i1, "snapshot_version");

        return $r1;
    }

    public java.util.Map getStatusForAllKeys(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1, $i2, $i3;
        java.util.HashMap r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        java.lang.Integer $r5;
        java.lang.Throwable $r7, $r8;
        android.database.sqlite.SQLiteDatabase r9;
        java.lang.String r10, r12;
        android.database.Cursor r11;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r9 = virtualinvoke $r2.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r3 = newarray (java.lang.String)[3];

        $r3[0] = "_id";

        $r3[1] = "alias";

        $r3[2] = "recovery_status";

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r10;

        r11 = virtualinvoke r9.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("keys", $r3, "uid = ?", $r4, null, null, null);

     label01:
        r1 = new java.util.HashMap;

        specialinvoke r1.<java.util.HashMap: void <init>()>();

     label02:
        $z0 = interfaceinvoke r11.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label06;

     label03:
        $i1 = interfaceinvoke r11.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("alias");

        r12 = interfaceinvoke r11.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label04:
        $i2 = interfaceinvoke r11.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("recovery_status");

        $i3 = interfaceinvoke r11.<android.database.Cursor: int getInt(int)>($i2);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r5);

     label05:
        goto label02;

     label06:
        if r11 == null goto label07;

        interfaceinvoke r11.<android.database.Cursor: void close()>();

     label07:
        return r1;

     label08:
        $r8 := @caughtexception;

        if r11 == null goto label12;

     label09:
        interfaceinvoke r11.<android.database.Cursor: void close()>();

     label10:
        goto label12;

     label11:
        $r7 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r7);

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public java.util.Map getUserSerialNumbers()
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0;
        int $i0, $i1, $i2;
        java.lang.Integer $r5;
        long $l3;
        java.lang.Long $r6;
        java.lang.Throwable $r8, $r9;
        android.database.Cursor r10;
        android.util.ArrayMap r11;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        $r1 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        $r2 = virtualinvoke $r1.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "user_id";

        $r3[1] = "user_serial_number";

        $r4 = newarray (java.lang.String)[0];

        r10 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("user_metadata", $r3, null, $r4, null, null, null);

     label01:
        r11 = new android.util.ArrayMap;

        specialinvoke r11.<android.util.ArrayMap: void <init>()>();

     label02:
        $z0 = interfaceinvoke r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label05;

     label03:
        $i0 = interfaceinvoke r10.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("user_id");

        $i1 = interfaceinvoke r10.<android.database.Cursor: int getInt(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i2 = interfaceinvoke r10.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("user_serial_number");

        $l3 = interfaceinvoke r10.<android.database.Cursor: long getLong(int)>($i2);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

     label04:
        goto label02;

     label05:
        if r10 == null goto label06;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label06:
        return r11;

     label07:
        $r8 := @caughtexception;

        if r10 == null goto label11;

     label08:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public long insertKey(int, int, java.lang.String, com.android.server.locksettings.recoverablekeystore.WrappedKey)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2, $i3;
        com.android.server.locksettings.recoverablekeystore.WrappedKey r1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        android.content.ContentValues $r5;
        java.lang.Integer $r6, $r7, $r10, $r11, $r12;
        byte[] $r8, $r9, r14;
        long $l4;
        java.lang.String r13;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r13 := @parameter2: java.lang.String;

        r1 := @parameter3: com.android.server.locksettings.recoverablekeystore.WrappedKey;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user_id", $r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("uid", $r7);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("alias", r13);

        $r8 = virtualinvoke r1.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getNonce()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,byte[])>("nonce", $r8);

        $r9 = virtualinvoke r1.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getKeyMaterial()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,byte[])>("wrapped_key", $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("last_synced_at", $r10);

        $i2 = virtualinvoke r1.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int getPlatformKeyGenerationId()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("platform_key_generation_id", $r11);

        $i3 = virtualinvoke r1.<com.android.server.locksettings.recoverablekeystore.WrappedKey: int getRecoveryStatus()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("recovery_status", $r12);

        r14 = virtualinvoke r1.<com.android.server.locksettings.recoverablekeystore.WrappedKey: byte[] getKeyMetadata()>();

        if r14 != null goto label1;

        virtualinvoke $r5.<android.content.ContentValues: void putNull(java.lang.String)>("key_metadata");

        goto label2;

     label1:
        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,byte[])>("key_metadata", r14);

     label2:
        $l4 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>("keys", null, $r5);

        return $l4;
    }

    public void invalidateKeysForUser(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5;
        java.lang.String[] $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("recovery_status", $r5);

        $r6 = newarray (java.lang.String)[1];

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r6[0] = $r7;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("keys", $r4, "user_id = ?", $r6);

        return;
    }

    public void invalidateKeysForUserIdOnCustomScreenLock(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5;
        java.lang.String[] $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("recovery_status", $r5);

        $r6 = newarray (java.lang.String)[1];

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r6[0] = $r7;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("keys", $r4, "user_id = ?", $r6);

        return;
    }

    public boolean removeKey(int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i1;
        java.lang.String r1, r3;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        java.lang.String[] $r5;
        boolean z0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        z0 = 0;

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = r3;

        $r5[1] = r1;

        $i1 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("keys", "uid = ? AND alias = ?", $r5);

        if $i1 <= 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public void removeUserFromAllTables(int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean removeUserFromKeysTable(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean removeUserFromUserMetadataTable(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean removeUserFromRecoveryServiceMetadataTable(int)>(i0);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: boolean removeUserFromRootOfTrustTable(int)>(i0);

        return;
    }

    public long setActiveRootOfTrust(int, int, java.lang.String)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        java.lang.String r1, $r7, $r8;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        android.content.ContentValues $r5;
        java.lang.String[] $r6;
        long $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("active_root_of_trust", r1);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRecoveryServiceMetadataEntryExists(int,int)>(i0, i1);

        $r6 = newarray (java.lang.String)[2];

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        $r6[1] = $r8;

        $i2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("recovery_service_metadata", $r5, "user_id = ? AND uid = ?", $r6);

        $l3 = (long) $i2;

        return $l3;
    }

    public long setCounterId(int, int, long)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        long l2, $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $l3 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setLong(int,int,java.lang.String,long)>(i0, i1, "counter_id", l2);

        return $l3;
    }

    public long setPlatformKeyGenerationId(int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5, $r6;
        java.lang.String[] $r7;
        java.lang.String $r8;
        long $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user_id", $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("platform_key_generation_id", $r6);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureUserMetadataEntryExists(int)>(i0);

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void invalidateKeysForUser(int)>(i0);

        $r7 = newarray (java.lang.String)[1];

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r7[0] = $r8;

        $i2 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("user_metadata", $r4, "user_id = ?", $r7);

        $l3 = (long) $i2;

        return $l3;
    }

    public long setRecoverySecretTypes(int, int, int[])
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        int[] r1;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r5;
        android.content.ContentValues $r6;
        java.util.StringJoiner $r7;
        java.util.stream.IntStream $r8;
        com.android.server.locksettings.recoverablekeystore.storage._$$Lambda$RecoverableKeyStoreDb$knfkhmVPS_11tGWkGt87bH4xjYg $r9;
        java.lang.String $r10, $r12, $r13;
        java.lang.String[] $r11;
        long $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $r5 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r5.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $r7 = new java.util.StringJoiner;

        specialinvoke $r7.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>(",");

        $r8 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r1);

        $r9 = new com.android.server.locksettings.recoverablekeystore.storage._$$Lambda$RecoverableKeyStoreDb$knfkhmVPS_11tGWkGt87bH4xjYg;

        specialinvoke $r9.<com.android.server.locksettings.recoverablekeystore.storage._$$Lambda$RecoverableKeyStoreDb$knfkhmVPS_11tGWkGt87bH4xjYg: void <init>(java.util.StringJoiner)>($r7);

        interfaceinvoke $r8.<java.util.stream.IntStream: void forEach(java.util.function.IntConsumer)>($r9);

        $r10 = virtualinvoke $r7.<java.util.StringJoiner: java.lang.String toString()>();

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("secret_types", $r10);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureRecoveryServiceMetadataEntryExists(int,int)>(i0, i1);

        $r11 = newarray (java.lang.String)[2];

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        $r11[1] = $r13;

        $i2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("recovery_service_metadata", $r6, "user_id = ? AND uid = ?", $r11);

        $l3 = (long) $i2;

        return $l3;
    }

    public long setRecoveryServiceCertPath(int, int, java.lang.String, java.security.cert.CertPath) throws java.security.cert.CertificateEncodingException
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        java.lang.String r1;
        java.security.cert.CertPath r2;
        java.util.List $r3;
        java.security.cert.CertificateEncodingException $r4;
        byte[] $r5;
        long $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.security.cert.CertPath;

        $r3 = virtualinvoke r2.<java.security.cert.CertPath: java.util.List getCertificates()>();

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i2 == 0 goto label1;

        $r5 = virtualinvoke r2.<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)>("PkiPath");

        $l3 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setBytes(int,int,java.lang.String,java.lang.String,byte[])>(i0, i1, r1, "cert_path", $r5);

        return $l3;

     label1:
        $r4 = new java.security.cert.CertificateEncodingException;

        specialinvoke $r4.<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>("No certificate contained in the cert path.");

        throw $r4;
    }

    public long setRecoveryServiceCertSerial(int, int, java.lang.String, long)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.lang.String r1;
        long l2, $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        l2 := @parameter3: long;

        $l3 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setLong(int,int,java.lang.String,java.lang.String,long)>(i0, i1, r1, "cert_serial", l2);

        return $l3;
    }

    public long setRecoveryServicePublicKey(int, int, java.security.PublicKey)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        java.security.PublicKey r1;
        byte[] $r2;
        long $l2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.security.PublicKey;

        $r2 = interfaceinvoke r1.<java.security.PublicKey: byte[] getEncoded()>();

        $l2 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setBytes(int,int,java.lang.String,byte[])>(i0, i1, "public_key", $r2);

        return $l2;
    }

    public int setRecoveryStatus(int, java.lang.String, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1, $i2;
        java.lang.String r1, $r8;
        android.database.sqlite.SQLiteDatabase r2;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r4;
        android.content.ContentValues $r5;
        java.lang.Integer $r6;
        java.lang.String[] $r7;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r4 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r2 = virtualinvoke $r4.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("recovery_status", $r6);

        $r7 = newarray (java.lang.String)[2];

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r7[0] = $r8;

        $r7[1] = r1;

        $i2 = virtualinvoke r2.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("keys", $r5, "uid = ? AND alias = ?", $r7);

        return $i2;
    }

    public long setServerParams(int, int, byte[])
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        byte[] r1;
        long $l2;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        $l2 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setBytes(int,int,java.lang.String,byte[])>(i0, i1, "server_params", r1);

        return $l2;
    }

    public long setShouldCreateSnapshot(int, int, boolean)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        boolean z0;
        long $l2, l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        l3 = 1L;

        goto label2;

     label1:
        l3 = 0L;

     label2:
        $l2 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setLong(int,int,java.lang.String,long)>(i0, i1, "should_create_snapshot", l3);

        return $l2;
    }

    public long setSnapshotVersion(int, int, long)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, i1;
        long l2, $l3;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $l3 = specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: long setLong(int,int,java.lang.String,long)>(i0, i1, "snapshot_version", l2);

        return $l3;
    }

    public long setUserSerialNumber(int, long)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb r0;
        int i0, $i2;
        long l1, $l3;
        android.database.sqlite.SQLiteDatabase r1;
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper $r3;
        android.content.ContentValues $r4;
        java.lang.Integer $r5;
        java.lang.Long $r6;
        java.lang.String[] $r7;
        java.lang.String $r8;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r3 = r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper mKeyStoreDbHelper>;

        r1 = virtualinvoke $r3.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("user_id", $r5);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("user_serial_number", $r6);

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: void ensureUserMetadataEntryExists(int)>(i0);

        $r7 = newarray (java.lang.String)[1];

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        $r7[0] = $r8;

        $i2 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("user_metadata", $r4, "user_id = ?", $r7);

        $l3 = (long) $i2;

        return $l3;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.String TAG> = "RecoverableKeyStoreDb";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int LAST_SYNCED_AT_UNSYNCED> = -1;

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: int IDLE_TIMEOUT_SECONDS> = 30;

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDb: java.lang.String CERT_PATH_ENCODING> = "PkiPath";

        return;
    }
}
