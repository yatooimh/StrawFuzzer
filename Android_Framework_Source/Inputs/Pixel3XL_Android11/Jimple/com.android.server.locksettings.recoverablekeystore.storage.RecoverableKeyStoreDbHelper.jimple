class com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper extends android.database.sqlite.SQLiteOpenHelper
{
    private static final java.lang.String DATABASE_NAME;
    static final int DATABASE_VERSION;
    private static final java.lang.String SQL_CREATE_KEYS_ENTRY;
    private static final java.lang.String SQL_CREATE_RECOVERY_SERVICE_METADATA_ENTRY;
    private static final java.lang.String SQL_CREATE_ROOT_OF_TRUST_ENTRY;
    private static final java.lang.String SQL_CREATE_USER_METADATA_ENTRY;
    private static final java.lang.String SQL_DELETE_KEYS_ENTRY;
    private static final java.lang.String SQL_DELETE_RECOVERY_SERVICE_METADATA_ENTRY;
    private static final java.lang.String SQL_DELETE_ROOT_OF_TRUST_ENTRY;
    private static final java.lang.String SQL_DELETE_USER_METADATA_ENTRY;
    private static final java.lang.String TAG;

    void <init>(android.content.Context)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.content.Context r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, "recoverablekeystore.db", null, 6);

        return;
    }

    private static void addColumnToTable(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, r2, $r9, r23, r24, r27, r28, $r32;
        java.lang.StringBuilder $r3, $r10, $r19, $r30;
        boolean $z0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r23 := @parameter1: java.lang.String;

        r24 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding column ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreDbHp", $r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ALTER TABLE ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ADD COLUMN ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r27 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r28 = r27;

        if r2 == null goto label1;

        r28 = r27;

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DEFAULT ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r28 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r32);

        return;
    }

    private void dropAllKnownTables(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS keys");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS user_metadata");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS recovery_service_metadata");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS root_of_trust");

        return;
    }

    private void upgradeDbForVersion3(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void addColumnToTable(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "recovery_service_metadata", "cert_path", "BLOB", null);

        staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void addColumnToTable(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "recovery_service_metadata", "cert_serial", "INTEGER", null);

        return;
    }

    private void upgradeDbForVersion4(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreDbHp", "Updating recoverable keystore database to version 4");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE root_of_trust (_id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,root_alias TEXT,cert_path BLOB,cert_serial INTEGER,UNIQUE(user_id,uid,root_alias))");

        staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void addColumnToTable(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "recovery_service_metadata", "active_root_of_trust", "TEXT", null);

        return;
    }

    private void upgradeDbForVersion5(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreDbHp", "Updating recoverable keystore database to version 5");

        staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void addColumnToTable(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "keys", "key_metadata", "BLOB", null);

        return;
    }

    private void upgradeDbForVersion6(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RecoverableKeyStoreDbHp", "Updating recoverable keystore database to version 6");

        staticinvoke <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void addColumnToTable(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, "user_metadata", "user_serial_number", "INTEGER DEFAULT -1", null);

        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE keys( _id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,alias TEXT,nonce BLOB,wrapped_key BLOB,platform_key_generation_id INTEGER,last_synced_at INTEGER,recovery_status INTEGER,key_metadata BLOB,UNIQUE(uid,alias))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE user_metadata( _id INTEGER PRIMARY KEY,user_id INTEGER UNIQUE,platform_key_generation_id INTEGER,user_serial_number INTEGER DEFAULT -1)");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE recovery_service_metadata (_id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,snapshot_version INTEGER,should_create_snapshot INTEGER,active_root_of_trust TEXT,public_key BLOB,cert_path BLOB,cert_serial INTEGER,secret_types TEXT,counter_id INTEGER,server_params BLOB,UNIQUE(user_id,uid))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE root_of_trust (_id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,root_alias TEXT,cert_path BLOB,cert_serial INTEGER,UNIQUE(user_id,uid,root_alias))");

        return;
    }

    public void onDowngrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreDbHp", "Recreating recoverablekeystore after unexpected version downgrade.");

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void dropAllKnownTables(android.database.sqlite.SQLiteDatabase)>(r1);

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i2, i3, i4, i5, i6;

        r0 := @this: com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i2 >= 2 goto label1;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void dropAllKnownTables(android.database.sqlite.SQLiteDatabase)>(r1);

        virtualinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>(r1);

        return;

     label1:
        i3 = i2;

        if i2 >= 3 goto label2;

        i3 = i2;

        if i0 < 3 goto label2;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void upgradeDbForVersion3(android.database.sqlite.SQLiteDatabase)>(r1);

        i3 = 3;

     label2:
        i4 = i3;

        if i3 >= 4 goto label3;

        i4 = i3;

        if i0 < 4 goto label3;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void upgradeDbForVersion4(android.database.sqlite.SQLiteDatabase)>(r1);

        i4 = 4;

     label3:
        i5 = i4;

        if i4 >= 5 goto label4;

        i5 = i4;

        if i0 < 5 goto label4;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void upgradeDbForVersion5(android.database.sqlite.SQLiteDatabase)>(r1);

        i5 = 5;

     label4:
        i6 = i5;

        if i5 >= 6 goto label5;

        i6 = i5;

        if i0 < 6 goto label5;

        specialinvoke r0.<com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: void upgradeDbForVersion6(android.database.sqlite.SQLiteDatabase)>(r1);

        i6 = 6;

     label5:
        if i6 == i0 goto label6;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RecoverableKeyStoreDbHp", "Failed to update recoverablekeystore database to the most recent version");

     label6:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String TAG> = "RecoverableKeyStoreDbHp";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_DELETE_USER_METADATA_ENTRY> = "DROP TABLE IF EXISTS user_metadata";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_DELETE_ROOT_OF_TRUST_ENTRY> = "DROP TABLE IF EXISTS root_of_trust";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_DELETE_RECOVERY_SERVICE_METADATA_ENTRY> = "DROP TABLE IF EXISTS recovery_service_metadata";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_DELETE_KEYS_ENTRY> = "DROP TABLE IF EXISTS keys";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_CREATE_USER_METADATA_ENTRY> = "CREATE TABLE user_metadata( _id INTEGER PRIMARY KEY,user_id INTEGER UNIQUE,platform_key_generation_id INTEGER,user_serial_number INTEGER DEFAULT -1)";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_CREATE_ROOT_OF_TRUST_ENTRY> = "CREATE TABLE root_of_trust (_id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,root_alias TEXT,cert_path BLOB,cert_serial INTEGER,UNIQUE(user_id,uid,root_alias))";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_CREATE_RECOVERY_SERVICE_METADATA_ENTRY> = "CREATE TABLE recovery_service_metadata (_id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,snapshot_version INTEGER,should_create_snapshot INTEGER,active_root_of_trust TEXT,public_key BLOB,cert_path BLOB,cert_serial INTEGER,secret_types TEXT,counter_id INTEGER,server_params BLOB,UNIQUE(user_id,uid))";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String SQL_CREATE_KEYS_ENTRY> = "CREATE TABLE keys( _id INTEGER PRIMARY KEY,user_id INTEGER,uid INTEGER,alias TEXT,nonce BLOB,wrapped_key BLOB,platform_key_generation_id INTEGER,last_synced_at INTEGER,recovery_status INTEGER,key_metadata BLOB,UNIQUE(uid,alias))";

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: int DATABASE_VERSION> = 6;

        <com.android.server.locksettings.recoverablekeystore.storage.RecoverableKeyStoreDbHelper: java.lang.String DATABASE_NAME> = "recoverablekeystore.db";

        return;
    }
}
