final class com.android.server.media.projection.MediaProjectionManagerService$BinderService extends android.media.projection.IMediaProjectionManager$Stub
{
    final com.android.server.media.projection.MediaProjectionManagerService this$0;

    private void <init>(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        com.android.server.media.projection.MediaProjectionManagerService r1;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0> = r1;

        specialinvoke r0.<android.media.projection.IMediaProjectionManager$Stub: void <init>()>();

        return;
    }

    void <init>(com.android.server.media.projection.MediaProjectionManagerService, com.android.server.media.projection.MediaProjectionManagerService$1)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        com.android.server.media.projection.MediaProjectionManagerService r1;
        com.android.server.media.projection.MediaProjectionManagerService$1 r2;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r2 := @parameter1: com.android.server.media.projection.MediaProjectionManagerService$1;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void <init>(com.android.server.media.projection.MediaProjectionManagerService)>(r1);

        return;
    }

    private boolean checkPermission(java.lang.String, java.lang.String)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        java.lang.String r1, r2;
        com.android.server.media.projection.MediaProjectionManagerService $r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = virtualinvoke $r5.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>(r2, r1);

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void addCallback(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        com.android.server.media.projection.MediaProjectionManagerService $r1, $r4;
        android.content.Context $r2;
        int $i1;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionWatcherCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r6 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r2 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r1);

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: void access$1000(com.android.server.media.projection.MediaProjectionManagerService,android.media.projection.IMediaProjectionWatcherCallback)>($r4, r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label4:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to add projection callbacks");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.media.projection.IMediaProjection createProjection(int, java.lang.String, int, boolean)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        int i0, i1, $i3, $i4, $i5;
        boolean z0, $z1, $z2;
        long l2;
        com.android.server.media.projection.MediaProjectionManagerService $r1, $r5, $r7, $r8;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        java.lang.IllegalArgumentException $r4, r22;
        android.content.pm.PackageManager $r6;
        android.app.AppOpsManager $r9;
        java.lang.String $r10, $r15, r16;
        java.lang.Throwable $r11;
        android.content.pm.PackageManager$NameNotFoundException $r12;
        android.os.UserHandle r17;
        android.content.pm.ApplicationInfo r18;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r19;
        java.lang.StringBuilder r23;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        i0 := @parameter0: int;

        r16 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r2 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r1);

        $i3 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i3 != 0 goto label11;

        if r16 == null goto label10;

        $z1 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        r17 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r6 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.pm.PackageManager access$600(com.android.server.media.projection.MediaProjectionManagerService)>($r5);

        r18 = virtualinvoke $r6.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)>(r16, 0, r17);

     label02:
        r19 = new com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        $r7 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $i4 = r18.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        $z2 = virtualinvoke r18.<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>();

        specialinvoke r19.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void <init>(com.android.server.media.projection.MediaProjectionManagerService,int,int,java.lang.String,int,boolean)>($r7, i1, i0, r16, $i4, $z2);

     label03:
        if z0 == 0 goto label05;

     label04:
        $r8 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r9 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.app.AppOpsManager access$400(com.android.server.media.projection.MediaProjectionManagerService)>($r8);

        $i5 = r19.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: int uid>;

        $r10 = r19.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: java.lang.String packageName>;

        virtualinvoke $r9.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(46, $i5, $r10, 0);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r19;

     label06:
        $r11 := @caughtexception;

        goto label09;

     label07:
        $r12 := @caughtexception;

     label08:
        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No package matching :");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r15 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r22;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("package name must not be empty");

        throw $r4;

     label11:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to grant projection permission");

        throw $r3;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        long l0;
        com.android.server.media.projection.MediaProjectionManagerService $r3, $r5;
        android.content.Context $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.io.FileDescriptor r7;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r7 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "MediaProjectionManagerService", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: void access$1100(com.android.server.media.projection.MediaProjectionManagerService,java.io.PrintWriter)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public android.media.projection.MediaProjectionInfo getActiveProjectionInfo()
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        com.android.server.media.projection.MediaProjectionManagerService $r1, $r4;
        android.content.Context $r2;
        int $i1;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r5;
        android.media.projection.MediaProjectionInfo r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r2 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r1);

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        r6 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.media.projection.MediaProjectionInfo access$800(com.android.server.media.projection.MediaProjectionManagerService)>($r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r6;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label4:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to add projection callbacks");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean hasProjectionPermission(int, java.lang.String)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        boolean $z0, z1, $z2;
        com.android.server.media.projection.MediaProjectionManagerService $r1;
        android.app.AppOpsManager $r2;
        java.lang.Throwable $r3;
        int i1, i2;
        java.lang.String r4;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        i1 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $z0 = specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean checkPermission(java.lang.String,java.lang.String)>(r4, "android.permission.CAPTURE_VIDEO_OUTPUT");

        if $z0 != 0 goto label4;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r2 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.app.AppOpsManager access$400(com.android.server.media.projection.MediaProjectionManagerService)>($r1);

        i2 = virtualinvoke $r2.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(46, i1, r4);

     label2:
        if i2 != 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

        goto label5;

     label4:
        z1 = 1;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $z2 = 0 | z1;

        return $z2;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    public boolean isValidMediaProjection(android.media.projection.IMediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        android.media.projection.IMediaProjection r1;
        com.android.server.media.projection.MediaProjectionManagerService $r2;
        android.os.IBinder $r3;
        boolean $z0;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjection;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r3 = interfaceinvoke r1.<android.media.projection.IMediaProjection: android.os.IBinder asBinder()>();

        $z0 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: boolean access$700(com.android.server.media.projection.MediaProjectionManagerService,android.os.IBinder)>($r2, $r3);

        return $z0;
    }

    public void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        com.android.server.media.projection.MediaProjectionManagerService $r1, $r4;
        android.content.Context $r2;
        int $i1;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionWatcherCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r6 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r2 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r1);

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: void access$300(com.android.server.media.projection.MediaProjectionManagerService,android.media.projection.IMediaProjectionWatcherCallback)>($r4, r6);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

     label4:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to remove projection callbacks");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void stopActiveProjection()
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        com.android.server.media.projection.MediaProjectionManagerService $r2, $r5, $r7;
        android.content.Context $r3;
        int $i1;
        java.lang.SecurityException $r4;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r6, $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r3 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r2);

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 != 0 goto label4;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r6 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection access$900(com.android.server.media.projection.MediaProjectionManagerService)>($r5);

        if $r6 == null goto label2;

        $r7 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r8 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection access$900(com.android.server.media.projection.MediaProjectionManagerService)>($r7);

        virtualinvoke $r8.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void stop()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r9;

     label4:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to add projection callbacks");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
