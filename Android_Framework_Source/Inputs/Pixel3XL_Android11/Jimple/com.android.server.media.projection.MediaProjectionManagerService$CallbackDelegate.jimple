class com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate extends java.lang.Object
{
    private java.util.Map mClientCallbacks;
    private android.os.Handler mHandler;
    private java.lang.Object mLock;
    private java.util.Map mWatcherCallbacks;

    public void <init>()
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object $r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        android.util.ArrayMap $r4, $r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock> = $r1;

        $r2 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback,boolean)>($r3, null, 1);

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler> = $r2;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks> = $r5;

        return;
    }

    public void add(android.media.projection.IMediaProjectionCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object r1;
        java.util.Map $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r6 := @parameter0: android.media.projection.IMediaProjectionCallback;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks>;

        $r3 = interfaceinvoke r6.<android.media.projection.IMediaProjectionCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r6);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void add(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object r1;
        java.util.Map $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionWatcherCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r6 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r3 = interfaceinvoke r6.<android.media.projection.IMediaProjectionWatcherCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r6);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void dispatchStart(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object r1, $r9;
        java.util.Iterator r2;
        android.media.projection.IMediaProjectionWatcherCallback r3;
        android.media.projection.MediaProjectionInfo r4;
        android.os.Handler r5;
        com.android.server.media.projection.MediaProjectionManagerService$WatcherStartCallback r6;
        java.util.Map $r7;
        java.util.Collection $r8;
        boolean $z0;
        java.lang.Throwable $r10;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r11;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r11 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        if r11 != null goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MediaProjectionManagerService", "Tried to dispatch start notification for a null media projection. Ignoring!");

        return;

     label1:
        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r7 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.media.projection.IMediaProjectionWatcherCallback) $r9;

        r4 = virtualinvoke r11.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.media.projection.MediaProjectionInfo getProjectionInfo()>();

        r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler>;

        r6 = new com.android.server.media.projection.MediaProjectionManagerService$WatcherStartCallback;

        specialinvoke r6.<com.android.server.media.projection.MediaProjectionManagerService$WatcherStartCallback: void <init>(android.media.projection.MediaProjectionInfo,android.media.projection.IMediaProjectionWatcherCallback)>(r4, r3);

        virtualinvoke r5.<android.os.Handler: boolean post(java.lang.Runnable)>(r6);

     label4:
        goto label3;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void dispatchStop(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object r1, $r7, $r8;
        android.media.projection.IMediaProjectionWatcherCallback r2;
        java.util.Map $r3, $r5;
        java.util.Collection $r4, $r6;
        boolean $z0, $z1;
        java.lang.Throwable $r9;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r10;
        java.util.Iterator r11, r15;
        android.media.projection.IMediaProjectionCallback r12;
        android.os.Handler r13, r17;
        com.android.server.media.projection.MediaProjectionManagerService$ClientStopCallback r14;
        android.media.projection.MediaProjectionInfo r16;
        com.android.server.media.projection.MediaProjectionManagerService$WatcherStopCallback r18;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r10 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        if r10 != null goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MediaProjectionManagerService", "Tried to dispatch stop notification for a null media projection. Ignoring!");

        return;

     label01:
        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        r11 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r8 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r12 = (android.media.projection.IMediaProjectionCallback) $r8;

        r13 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler>;

        r14 = new com.android.server.media.projection.MediaProjectionManagerService$ClientStopCallback;

        specialinvoke r14.<com.android.server.media.projection.MediaProjectionManagerService$ClientStopCallback: void <init>(android.media.projection.IMediaProjectionCallback)>(r12);

        virtualinvoke r13.<android.os.Handler: boolean post(java.lang.Runnable)>(r14);

     label04:
        goto label03;

     label05:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r15 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.media.projection.IMediaProjectionWatcherCallback) $r7;

        r16 = virtualinvoke r10.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.media.projection.MediaProjectionInfo getProjectionInfo()>();

        r17 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler>;

        r18 = new com.android.server.media.projection.MediaProjectionManagerService$WatcherStopCallback;

        specialinvoke r18.<com.android.server.media.projection.MediaProjectionManagerService$WatcherStopCallback: void <init>(android.media.projection.MediaProjectionInfo,android.media.projection.IMediaProjectionWatcherCallback)>(r16, r2);

        virtualinvoke r17.<android.os.Handler: boolean post(java.lang.Runnable)>(r18);

     label07:
        goto label06;

     label08:
        exitmonitor r1;

     label09:
        return;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void remove(android.media.projection.IMediaProjectionCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object r1;
        java.util.Map $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r6 := @parameter0: android.media.projection.IMediaProjectionCallback;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks>;

        $r3 = interfaceinvoke r6.<android.media.projection.IMediaProjectionCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void remove(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object r1;
        java.util.Map $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionWatcherCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r6 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r3 = interfaceinvoke r6.<android.media.projection.IMediaProjectionWatcherCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
