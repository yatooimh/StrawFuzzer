public final class com.android.server.media.projection.MediaProjectionManagerService extends com.android.server.SystemService implements com.android.server.Watchdog$Monitor
{
    private static final boolean REQUIRE_FG_SERVICE_FOR_PROJECTION;
    private static final java.lang.String TAG;
    private final android.app.ActivityManagerInternal mActivityManagerInternal;
    private final android.app.AppOpsManager mAppOps;
    private final com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate;
    private final android.content.Context mContext;
    private final java.util.Map mDeathEaters;
    private final java.lang.Object mLock;
    private android.media.MediaRouter$RouteInfo mMediaRouteInfo;
    private final android.media.MediaRouter mMediaRouter;
    private final com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback mMediaRouterCallback;
    private final android.content.pm.PackageManager mPackageManager;
    private com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant;
    private android.os.IBinder mProjectionToken;

    public void <init>(android.content.Context)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.content.Context r1, $r5, $r10, $r12;
        java.lang.Object $r2, $r6, $r8, $r13;
        android.util.ArrayMap $r3;
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate $r4;
        android.app.AppOpsManager $r7;
        android.app.ActivityManagerInternal $r9;
        android.content.pm.PackageManager $r11;
        android.media.MediaRouter $r14;
        com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback $r15;
        com.android.server.Watchdog $r16;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock> = $r2;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.Context mContext> = r1;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService: java.util.Map mDeathEaters> = $r3;

        $r4 = new com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        specialinvoke $r4.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate> = $r4;

        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r7 = (android.app.AppOpsManager) $r6;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.app.AppOpsManager mAppOps> = $r7;

        $r8 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r9 = (android.app.ActivityManagerInternal) $r8;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.app.ActivityManagerInternal mActivityManagerInternal> = $r9;

        $r10 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.pm.PackageManager mPackageManager> = $r11;

        $r12 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("media_router");

        $r14 = (android.media.MediaRouter) $r13;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter mMediaRouter> = $r14;

        $r15 = new com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback;

        specialinvoke $r15.<com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback: void <init>(com.android.server.media.projection.MediaProjectionManagerService,com.android.server.media.projection.MediaProjectionManagerService$1)>(r0, null);

        r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback mMediaRouterCallback> = $r15;

        $r16 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r16.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        return;
    }

    static void access$1000(com.android.server.media.projection.MediaProjectionManagerService, android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.media.projection.IMediaProjectionWatcherCallback r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: android.media.projection.IMediaProjectionWatcherCallback;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>(r1);

        return;
    }

    static void access$1100(com.android.server.media.projection.MediaProjectionManagerService, java.io.PrintWriter)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.io.PrintWriter r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void dump(java.io.PrintWriter)>(r1);

        return;
    }

    static java.lang.Object access$1200(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static android.app.ActivityManagerInternal access$1300(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.app.ActivityManagerInternal $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        return $r1;
    }

    static com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate access$1400(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate>;

        return $r1;
    }

    static void access$1500(com.android.server.media.projection.MediaProjectionManagerService, com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void startProjectionLocked(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)>(r1);

        return;
    }

    static void access$1600(com.android.server.media.projection.MediaProjectionManagerService, com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void stopProjectionLocked(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)>(r1);

        return;
    }

    static java.lang.String access$1700(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: java.lang.String typeToString(int)>(i0);

        return $r0;
    }

    static android.media.MediaRouter$RouteInfo access$1800(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.media.MediaRouter$RouteInfo $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter$RouteInfo mMediaRouteInfo>;

        return $r1;
    }

    static android.media.MediaRouter$RouteInfo access$1802(com.android.server.media.projection.MediaProjectionManagerService, android.media.MediaRouter$RouteInfo)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.media.MediaRouter$RouteInfo r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: android.media.MediaRouter$RouteInfo;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter$RouteInfo mMediaRouteInfo> = r1;

        return r1;
    }

    static void access$200(com.android.server.media.projection.MediaProjectionManagerService, int, int, int)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void handleForegroundServicesChanged(int,int,int)>(i0, i1, i2);

        return;
    }

    static void access$300(com.android.server.media.projection.MediaProjectionManagerService, android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.media.projection.IMediaProjectionWatcherCallback r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: android.media.projection.IMediaProjectionWatcherCallback;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>(r1);

        return;
    }

    static android.app.AppOpsManager access$400(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.app.AppOpsManager $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.app.AppOpsManager mAppOps>;

        return $r1;
    }

    static android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.Context mContext>;

        return $r1;
    }

    static android.content.pm.PackageManager access$600(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.content.pm.PackageManager $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.content.pm.PackageManager mPackageManager>;

        return $r1;
    }

    static boolean access$700(com.android.server.media.projection.MediaProjectionManagerService, android.os.IBinder)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.os.IBinder r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter1: android.os.IBinder;

        $z0 = specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: boolean isValidMediaProjection(android.os.IBinder)>(r1);

        return $z0;
    }

    static android.media.projection.MediaProjectionInfo access$800(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.media.projection.MediaProjectionInfo $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>();

        return $r1;
    }

    static com.android.server.media.projection.MediaProjectionManagerService$MediaProjection access$900(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r1;

        r0 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        return $r1;
    }

    private void addCallback(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object r2;
        com.android.server.media.projection.MediaProjectionManagerService$2 $r3;
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate $r4;
        java.lang.Throwable $r5;
        android.media.projection.IMediaProjectionWatcherCallback r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r6 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r3 = new com.android.server.media.projection.MediaProjectionManagerService$2;

        specialinvoke $r3.<com.android.server.media.projection.MediaProjectionManagerService$2: void <init>(com.android.server.media.projection.MediaProjectionManagerService,android.media.projection.IMediaProjectionWatcherCallback)>(r0, r6);

        r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate>;

        virtualinvoke $r4.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: void add(android.media.projection.IMediaProjectionWatcherCallback)>(r6);

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void linkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback,android.os.IBinder$DeathRecipient)>(r6, $r3);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void dispatchStart(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate $r2;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate>;

        virtualinvoke $r2.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: void dispatchStart(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)>(r1);

        return;
    }

    private void dispatchStop(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate $r2;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate>;

        virtualinvoke $r2.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: void dispatchStop(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)>(r1);

        return;
    }

    private void dump(java.io.PrintWriter)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object r1;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r2, $r3;
        java.lang.Throwable $r4;
        java.io.PrintWriter r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r5 := @parameter0: java.io.PrintWriter;

        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>("MEDIA PROJECTION MANAGER (dumpsys media_projection)");

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>("Media Projection: ");

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        virtualinvoke $r3.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void dump(java.io.PrintWriter)>(r5);

     label2:
        goto label4;

     label3:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>("null");

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.media.projection.MediaProjectionInfo getActiveProjectionInfo()
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object r1;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r2, $r3;
        java.lang.Throwable $r4;
        android.media.projection.MediaProjectionInfo r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        if $r2 != null goto label3;

        exitmonitor r1;

     label2:
        return null;

     label3:
        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        r5 = virtualinvoke $r3.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.media.projection.MediaProjectionInfo getProjectionInfo()>();

        exitmonitor r1;

     label4:
        return r5;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void handleForegroundServicesChanged(int, int, int)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r1;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r3, $r4, $r5, $r6;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        if $r3 == null goto label10;

        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        $i3 = $r4.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: int uid>;

        if $i3 == i1 goto label03;

     label02:
        goto label10;

     label03:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        $z0 = virtualinvoke $r5.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: boolean requiresForegroundService()>();

        if $z0 != 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        $i4 = i2 & 32;

        if $i4 == 0 goto label08;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        virtualinvoke $r6.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void stop()>();

        exitmonitor r1;

     label09:
        return;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private boolean isValidMediaProjection(android.os.IBinder)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object r1;
        boolean z0;
        android.os.IBinder $r2, $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.os.IBinder mProjectionToken>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.os.IBinder mProjectionToken>;

        z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void linkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback, android.os.IBinder$DeathRecipient)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.os.IBinder$DeathRecipient r1;
        java.util.Map $r2;
        android.os.RemoteException $r4;
        android.media.projection.IMediaProjectionWatcherCallback r5;
        android.os.IBinder r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r5 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        r1 := @parameter1: android.os.IBinder$DeathRecipient;

     label1:
        r6 = interfaceinvoke r5.<android.media.projection.IMediaProjectionWatcherCallback: android.os.IBinder asBinder()>();

        interfaceinvoke r6.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.util.Map mDeathEaters>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaProjectionManagerService", "Unable to link to death for media projection monitoring callback", $r4);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object r1;
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate $r2;
        java.lang.Throwable $r3;
        android.media.projection.IMediaProjectionWatcherCallback r4;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r4 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void unlinkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback)>(r4);

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate mCallbackDelegate>;

        virtualinvoke $r2.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: void remove(android.media.projection.IMediaProjectionWatcherCallback)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void startProjectionLocked(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1, r2;
        android.media.MediaRouter$RouteInfo $r3, $r6;
        android.os.IBinder $r4;
        android.media.MediaRouter $r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void stop()>();

     label1:
        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter$RouteInfo mMediaRouteInfo>;

        if $r3 == null goto label2;

        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter mMediaRouter>;

        $r6 = virtualinvoke $r5.<android.media.MediaRouter: android.media.MediaRouter$RouteInfo getFallbackRoute()>();

        virtualinvoke $r6.<android.media.MediaRouter$RouteInfo: void select()>();

     label2:
        $r4 = virtualinvoke r1.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.os.IBinder asBinder()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.os.IBinder mProjectionToken> = $r4;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant> = r1;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void dispatchStart(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)>(r1);

        return;
    }

    private void stopProjectionLocked(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: android.os.IBinder mProjectionToken> = null;

        r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant> = null;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void dispatchStop(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)>(r1);

        return;
    }

    private static java.lang.String typeToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "TYPE_PRESENTATION";

     label2:
        return "TYPE_MIRRORING";

     label3:
        return "TYPE_SCREEN_CAPTURE";
    }

    private void unlinkDeathRecipientLocked(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        android.os.IBinder$DeathRecipient r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        android.media.projection.IMediaProjectionWatcherCallback r4;
        android.os.IBinder r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r4 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        r5 = interfaceinvoke r4.<android.media.projection.IMediaProjectionWatcherCallback: android.os.IBinder asBinder()>();

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.util.Map mDeathEaters>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        r1 = (android.os.IBinder$DeathRecipient) $r3;

        if r1 == null goto label1;

        interfaceinvoke r5.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r1, 0);

     label1:
        return;
    }

    public void monitor()
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void onStart()
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        com.android.server.media.projection.MediaProjectionManagerService$BinderService $r1;
        com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback $r2;
        android.media.MediaRouter $r3;
        com.android.server.media.projection.MediaProjectionManagerService$1 $r4;
        android.app.ActivityManagerInternal $r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        $r1 = new com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        specialinvoke $r1.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void <init>(com.android.server.media.projection.MediaProjectionManagerService,com.android.server.media.projection.MediaProjectionManagerService$1)>(r0, null);

        virtualinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService: void publishBinderService(java.lang.String,android.os.IBinder,boolean)>("media_projection", $r1, 0);

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter mMediaRouter>;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaRouterCallback mMediaRouterCallback>;

        virtualinvoke $r3.<android.media.MediaRouter: void addCallback(int,android.media.MediaRouter$Callback,int)>(4, $r2, 8);

        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        $r4 = new com.android.server.media.projection.MediaProjectionManagerService$1;

        specialinvoke $r4.<com.android.server.media.projection.MediaProjectionManagerService$1: void <init>(com.android.server.media.projection.MediaProjectionManagerService)>(r0);

        virtualinvoke $r5.<android.app.ActivityManagerInternal: void registerProcessObserver(android.app.IProcessObserver)>($r4);

        return;
    }

    public void onSwitchUser(int)
    {
        com.android.server.media.projection.MediaProjectionManagerService r0;
        int i0;
        java.lang.Object r1;
        android.media.MediaRouter $r3;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r4, $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService: android.media.MediaRouter mMediaRouter>;

        virtualinvoke $r3.<android.media.MediaRouter: void rebindAsUser(int)>(i0);

        r1 = r0.<com.android.server.media.projection.MediaProjectionManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        if $r4 == null goto label2;

        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection mProjectionGrant>;

        virtualinvoke $r5.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void stop()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void <clinit>()
    {
        <com.android.server.media.projection.MediaProjectionManagerService: java.lang.String TAG> = "MediaProjectionManagerService";

        <com.android.server.media.projection.MediaProjectionManagerService: boolean REQUIRE_FG_SERVICE_FOR_PROJECTION> = 1;

        return;
    }
}
