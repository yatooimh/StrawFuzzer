class com.android.server.net.DnsServerRepository extends java.lang.Object
{
    public static final int NUM_CURRENT_SERVERS;
    public static final int NUM_SERVERS;
    public static final java.lang.String TAG;
    private java.util.ArrayList mAllServers;
    private java.util.Set mCurrentServers;
    private java.util.HashMap mIndex;

    public void <init>()
    {
        com.android.server.net.DnsServerRepository r0;
        java.util.HashSet $r1;
        java.util.ArrayList $r2;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.net.DnsServerRepository;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.net.DnsServerRepository: java.util.Set mCurrentServers> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(12);

        r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(12);

        r0.<com.android.server.net.DnsServerRepository: java.util.HashMap mIndex> = $r3;

        return;
    }

    private boolean updateCurrentServers()
    {
        com.android.server.net.DnsServerRepository r0;
        long l0, $l3;
        com.android.server.net.DnsServerEntry r1, $r17, r19;
        boolean z0, $z1, z2, $z3;
        java.util.ArrayList $r2, $r3, $r8, $r15;
        int $i1, $i2, i5;
        java.lang.Object $r4, $r9, $r16;
        java.util.Set $r5, $r7, $r14;
        java.net.InetAddress $r6, $r10, $r13;
        java.util.HashMap $r11;
        byte $b4;
        java.lang.Throwable $r18;
        java.util.Iterator r20;

        r0 := @this: com.android.server.net.DnsServerRepository;

        entermonitor r0;

     label01:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label02:
        z2 = 0;

     label03:
        $r2 = r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i5 = $i1 - 1;

     label04:
        if i5 < 0 goto label08;

        if i5 >= 12 goto label06;

     label05:
        $r15 = r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r17 = (com.android.server.net.DnsServerEntry) $r16;

        $l3 = $r17.<com.android.server.net.DnsServerEntry: long expiry>;

        $b4 = $l3 cmp l0;

        if $b4 >= 0 goto label08;

     label06:
        $r8 = r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object remove(int)>(i5);

        r19 = (com.android.server.net.DnsServerEntry) $r9;

        $r11 = r0.<com.android.server.net.DnsServerRepository: java.util.HashMap mIndex>;

        $r10 = r19.<com.android.server.net.DnsServerEntry: java.net.InetAddress address>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r10);

        $r14 = r0.<com.android.server.net.DnsServerRepository: java.util.Set mCurrentServers>;

        $r13 = r19.<com.android.server.net.DnsServerEntry: java.net.InetAddress address>;

        $z1 = interfaceinvoke $r14.<java.util.Set: boolean remove(java.lang.Object)>($r13);

        z2 = z2 | $z1;

     label07:
        i5 = i5 + -1;

        goto label04;

     label08:
        $r3 = r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers>;

        r20 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label09:
        $z3 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r4 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.net.DnsServerEntry) $r4;

        $r5 = r0.<com.android.server.net.DnsServerRepository: java.util.Set mCurrentServers>;

        $i2 = interfaceinvoke $r5.<java.util.Set: int size()>();

        if $i2 >= 3 goto label11;

        $r7 = r0.<com.android.server.net.DnsServerRepository: java.util.Set mCurrentServers>;

        $r6 = r1.<com.android.server.net.DnsServerEntry: java.net.InetAddress address>;

        z0 = interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label10:
        z2 = z2 | z0;

        goto label09;

     label11:
        exitmonitor r0;

        return z2;

     label12:
        $r18 := @caughtexception;

        exitmonitor r0;

        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
    }

    private boolean updateExistingEntry(java.net.InetAddress, long)
    {
        com.android.server.net.DnsServerRepository r0;
        long l0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.net.InetAddress r4;
        com.android.server.net.DnsServerEntry r5;

        r0 := @this: com.android.server.net.DnsServerRepository;

        r4 := @parameter0: java.net.InetAddress;

        l0 := @parameter1: long;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.net.DnsServerRepository: java.util.HashMap mIndex>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.net.DnsServerEntry) $r2;

     label2:
        if r5 == null goto label5;

     label3:
        r5.<com.android.server.net.DnsServerEntry: long expiry> = l0;

     label4:
        exitmonitor r0;

        return 1;

     label5:
        exitmonitor r0;

        return 0;

     label6:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public boolean addServers(long, java.lang.String[])
    {
        com.android.server.net.DnsServerRepository r0;
        long l0, $l2, l4, l5;
        int i1, i6;
        java.net.InetAddress r1;
        boolean z0, $z1;
        java.util.ArrayList $r2, $r3;
        byte $b3;
        java.util.HashMap $r4;
        java.lang.Throwable $r6, $r7;
        java.lang.String[] r8;
        java.lang.String r9;
        com.android.server.net.DnsServerEntry r10;

        r0 := @this: com.android.server.net.DnsServerRepository;

        l4 := @parameter0: long;

        r8 := @parameter1: java.lang.String[];

        entermonitor r0;

     label01:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label02:
        $l2 = 1000L * l4;

        l5 = $l2 + l0;

     label03:
        i1 = lengthof r8;

     label04:
        i6 = 0;

     label05:
        if i6 >= i1 goto label13;

        r9 = r8[i6];

     label06:
        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)>(r9);

     label07:
        $z1 = specialinvoke r0.<com.android.server.net.DnsServerRepository: boolean updateExistingEntry(java.net.InetAddress,long)>(r1, l5);

        if $z1 != 0 goto label12;

     label08:
        $b3 = l5 cmp l0;

        if $b3 <= 0 goto label12;

     label09:
        r10 = new com.android.server.net.DnsServerEntry;

        specialinvoke r10.<com.android.server.net.DnsServerEntry: void <init>(java.net.InetAddress,long)>(r1, l5);

        $r3 = r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

        $r4 = r0.<com.android.server.net.DnsServerRepository: java.util.HashMap mIndex>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10);

     label10:
        goto label12;

     label11:
        $r6 := @caughtexception;

     label12:
        i6 = i6 + 1;

        goto label05;

     label13:
        $r2 = r0.<com.android.server.net.DnsServerRepository: java.util.ArrayList mAllServers>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r2);

        z0 = specialinvoke r0.<com.android.server.net.DnsServerRepository: boolean updateCurrentServers()>();

     label14:
        exitmonitor r0;

        return z0;

     label15:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.IllegalArgumentException from label06 to label07 with label11;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public void setDnsServersOn(android.net.LinkProperties)
    {
        com.android.server.net.DnsServerRepository r0;
        java.util.Set $r1;
        java.lang.Throwable $r2;
        android.net.LinkProperties r3;

        r0 := @this: com.android.server.net.DnsServerRepository;

        r3 := @parameter0: android.net.LinkProperties;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.net.DnsServerRepository: java.util.Set mCurrentServers>;

        virtualinvoke r3.<android.net.LinkProperties: void setDnsServers(java.util.Collection)>($r1);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.net.DnsServerRepository: java.lang.String TAG> = "DnsServerRepository";

        <com.android.server.net.DnsServerRepository: int NUM_SERVERS> = 12;

        <com.android.server.net.DnsServerRepository: int NUM_CURRENT_SERVERS> = 3;

        return;
    }
}
