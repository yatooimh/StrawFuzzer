public class com.android.server.net.NetlinkTracker extends com.android.server.net.BaseNetworkObserver
{
    private static final boolean DBG;
    private final java.lang.String TAG;
    private final com.android.server.net.NetlinkTracker$Callback mCallback;
    private com.android.server.net.DnsServerRepository mDnsServerRepository;
    private final java.lang.String mInterfaceName;
    private final android.net.LinkProperties mLinkProperties;

    public void <init>(java.lang.String, com.android.server.net.NetlinkTracker$Callback)
    {
        com.android.server.net.NetlinkTracker r0;
        com.android.server.net.NetlinkTracker$Callback r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r8, r10;
        android.net.LinkProperties $r7;
        com.android.server.net.DnsServerRepository $r9;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.net.NetlinkTracker$Callback;

        specialinvoke r0.<com.android.server.net.BaseNetworkObserver: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NetlinkTracker/");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.server.net.NetlinkTracker: java.lang.String TAG> = $r6;

        r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName> = r10;

        r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback> = r1;

        $r7 = new android.net.LinkProperties;

        specialinvoke $r7.<android.net.LinkProperties: void <init>()>();

        r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties> = $r7;

        $r8 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        virtualinvoke $r7.<android.net.LinkProperties: void setInterfaceName(java.lang.String)>($r8);

        $r9 = new com.android.server.net.DnsServerRepository;

        specialinvoke $r9.<com.android.server.net.DnsServerRepository: void <init>()>();

        r0.<com.android.server.net.NetlinkTracker: com.android.server.net.DnsServerRepository mDnsServerRepository> = $r9;

        return;
    }

    private void maybeLog(java.lang.String, java.lang.Object)
    {
        com.android.server.net.NetlinkTracker r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    private void maybeLog(java.lang.String, java.lang.String, android.net.LinkAddress)
    {
        com.android.server.net.NetlinkTracker r0;
        java.lang.String r1, r2;
        android.net.LinkAddress r3;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.LinkAddress;

        return;
    }

    public void addressRemoved(java.lang.String, android.net.LinkAddress)
    {
        com.android.server.net.NetlinkTracker r0;
        android.net.LinkAddress r1;
        boolean z0, $z1;
        java.lang.String $r2, r6;
        android.net.LinkProperties $r3;
        com.android.server.net.NetlinkTracker$Callback $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkAddress;

        $r2 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetlinkTracker: void maybeLog(java.lang.String,java.lang.String,android.net.LinkAddress)>("addressRemoved", r6, r1);

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        z0 = virtualinvoke $r3.<android.net.LinkProperties: boolean removeLinkAddress(android.net.LinkAddress)>(r1);

        exitmonitor r0;

     label2:
        if z0 == 0 goto label6;

        $r4 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback>;

        interfaceinvoke $r4.<com.android.server.net.NetlinkTracker$Callback: void update()>();

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addressUpdated(java.lang.String, android.net.LinkAddress)
    {
        com.android.server.net.NetlinkTracker r0;
        android.net.LinkAddress r1;
        boolean z0, $z1;
        java.lang.String $r2, r6;
        android.net.LinkProperties $r3;
        com.android.server.net.NetlinkTracker$Callback $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.LinkAddress;

        $r2 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetlinkTracker: void maybeLog(java.lang.String,java.lang.String,android.net.LinkAddress)>("addressUpdated", r6, r1);

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        z0 = virtualinvoke $r3.<android.net.LinkProperties: boolean addLinkAddress(android.net.LinkAddress)>(r1);

        exitmonitor r0;

     label2:
        if z0 == 0 goto label6;

        $r4 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback>;

        interfaceinvoke $r4.<com.android.server.net.NetlinkTracker$Callback: void update()>();

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void clearLinkProperties()
    {
        com.android.server.net.NetlinkTracker r0;
        android.net.LinkProperties $r1, $r3;
        java.lang.String $r2;
        java.lang.Throwable $r4;
        com.android.server.net.DnsServerRepository r5;

        r0 := @this: com.android.server.net.NetlinkTracker;

        entermonitor r0;

     label1:
        r5 = new com.android.server.net.DnsServerRepository;

        specialinvoke r5.<com.android.server.net.DnsServerRepository: void <init>()>();

        r0.<com.android.server.net.NetlinkTracker: com.android.server.net.DnsServerRepository mDnsServerRepository> = r5;

        $r1 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r1.<android.net.LinkProperties: void clear()>();

        $r3 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        $r2 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        virtualinvoke $r3.<android.net.LinkProperties: void setInterfaceName(java.lang.String)>($r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.LinkProperties getLinkProperties()
    {
        com.android.server.net.NetlinkTracker r0;
        android.net.LinkProperties $r1, $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.net.NetlinkTracker;

        entermonitor r0;

     label1:
        $r1 = new android.net.LinkProperties;

        $r2 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        specialinvoke $r1.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r2);

     label2:
        exitmonitor r0;

        return $r1;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void interfaceDnsServerInfo(java.lang.String, long, java.lang.String[])
    {
        com.android.server.net.NetlinkTracker r0;
        long l0;
        java.lang.String[] r1;
        java.lang.String $r2, $r3, r9;
        boolean $z0, $z1;
        com.android.server.net.DnsServerRepository $r4, $r6;
        android.net.LinkProperties $r5;
        com.android.server.net.NetlinkTracker$Callback $r7;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r9 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r1 := @parameter2: java.lang.String[];

        $r2 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label6;

        $r3 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        specialinvoke r0.<com.android.server.net.NetlinkTracker: void maybeLog(java.lang.String,java.lang.Object)>("interfaceDnsServerInfo", $r3);

        $r4 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.DnsServerRepository mDnsServerRepository>;

        $z1 = virtualinvoke $r4.<com.android.server.net.DnsServerRepository: boolean addServers(long,java.lang.String[])>(l0, r1);

        if $z1 == 0 goto label6;

        entermonitor r0;

     label1:
        $r6 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.DnsServerRepository mDnsServerRepository>;

        $r5 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        virtualinvoke $r6.<com.android.server.net.DnsServerRepository: void setDnsServersOn(android.net.LinkProperties)>($r5);

        exitmonitor r0;

     label2:
        $r7 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback>;

        interfaceinvoke $r7.<com.android.server.net.NetlinkTracker$Callback: void update()>();

        goto label6;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void interfaceRemoved(java.lang.String)
    {
        com.android.server.net.NetlinkTracker r0;
        java.lang.String r1, $r2;
        boolean $z0;
        com.android.server.net.NetlinkTracker$Callback $r3;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.net.NetlinkTracker: void maybeLog(java.lang.String,java.lang.Object)>("interfaceRemoved", r1);

        $r2 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.net.NetlinkTracker: void clearLinkProperties()>();

        $r3 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback>;

        interfaceinvoke $r3.<com.android.server.net.NetlinkTracker$Callback: void update()>();

     label1:
        return;
    }

    public void routeRemoved(android.net.RouteInfo)
    {
        com.android.server.net.NetlinkTracker r0;
        boolean z0, $z1;
        java.lang.String $r1, $r2;
        android.net.LinkProperties $r3;
        com.android.server.net.NetlinkTracker$Callback $r4;
        java.lang.Throwable $r5;
        android.net.RouteInfo r6;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r6 := @parameter0: android.net.RouteInfo;

        $r1 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        $r2 = virtualinvoke r6.<android.net.RouteInfo: java.lang.String getInterface()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetlinkTracker: void maybeLog(java.lang.String,java.lang.Object)>("routeRemoved", r6);

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        z0 = virtualinvoke $r3.<android.net.LinkProperties: boolean removeRoute(android.net.RouteInfo)>(r6);

        exitmonitor r0;

     label2:
        if z0 == 0 goto label6;

        $r4 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback>;

        interfaceinvoke $r4.<com.android.server.net.NetlinkTracker$Callback: void update()>();

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void routeUpdated(android.net.RouteInfo)
    {
        com.android.server.net.NetlinkTracker r0;
        boolean z0, $z1;
        java.lang.String $r1, $r2;
        android.net.LinkProperties $r3;
        com.android.server.net.NetlinkTracker$Callback $r4;
        java.lang.Throwable $r5;
        android.net.RouteInfo r6;

        r0 := @this: com.android.server.net.NetlinkTracker;

        r6 := @parameter0: android.net.RouteInfo;

        $r1 = r0.<com.android.server.net.NetlinkTracker: java.lang.String mInterfaceName>;

        $r2 = virtualinvoke r6.<android.net.RouteInfo: java.lang.String getInterface()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetlinkTracker: void maybeLog(java.lang.String,java.lang.Object)>("routeUpdated", r6);

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.net.NetlinkTracker: android.net.LinkProperties mLinkProperties>;

        z0 = virtualinvoke $r3.<android.net.LinkProperties: boolean addRoute(android.net.RouteInfo)>(r6);

        exitmonitor r0;

     label2:
        if z0 == 0 goto label6;

        $r4 = r0.<com.android.server.net.NetlinkTracker: com.android.server.net.NetlinkTracker$Callback mCallback>;

        interfaceinvoke $r4.<com.android.server.net.NetlinkTracker$Callback: void update()>();

        goto label6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.net.NetlinkTracker: boolean DBG> = 0;

        return;
    }
}
