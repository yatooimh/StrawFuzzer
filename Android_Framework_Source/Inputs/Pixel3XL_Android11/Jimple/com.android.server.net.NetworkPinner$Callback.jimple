class com.android.server.net.NetworkPinner$Callback extends android.net.ConnectivityManager$NetworkCallback
{

    private void <init>()
    {
        com.android.server.net.NetworkPinner$Callback r0;

        r0 := @this: com.android.server.net.NetworkPinner$Callback;

        specialinvoke r0.<android.net.ConnectivityManager$NetworkCallback: void <init>()>();

        return;
    }

    void <init>(com.android.server.net.NetworkPinner$1)
    {
        com.android.server.net.NetworkPinner$Callback r0;
        com.android.server.net.NetworkPinner$1 r1;

        r0 := @this: com.android.server.net.NetworkPinner$Callback;

        r1 := @parameter0: com.android.server.net.NetworkPinner$1;

        specialinvoke r0.<com.android.server.net.NetworkPinner$Callback: void <init>()>();

        return;
    }

    public void onAvailable(android.net.Network)
    {
        com.android.server.net.NetworkPinner$Callback r0, $r4;
        java.lang.Object r1, $r14;
        java.lang.String r2, $r11;
        java.lang.StringBuilder r3;
        android.net.ConnectivityManager $r5, $r8;
        android.net.Network $r6, $r7, r13;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.net.NetworkPinner$Callback;

        r13 := @parameter0: android.net.Network;

        r1 = <com.android.server.net.NetworkPinner: java.lang.Object sLock>;

        entermonitor r1;

     label1:
        $r4 = staticinvoke <com.android.server.net.NetworkPinner: com.android.server.net.NetworkPinner$Callback access$000()>();

        if r0 == $r4 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 = staticinvoke <com.android.server.net.NetworkPinner: android.net.ConnectivityManager access$100()>();

        $r6 = virtualinvoke $r5.<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()>();

        if $r6 != null goto label4;

        $r7 = <com.android.server.net.NetworkPinner: android.net.Network sNetwork>;

        if $r7 != null goto label4;

        $r8 = staticinvoke <com.android.server.net.NetworkPinner: android.net.ConnectivityManager access$100()>();

        virtualinvoke $r8.<android.net.ConnectivityManager: boolean bindProcessToNetwork(android.net.Network)>(r13);

        <com.android.server.net.NetworkPinner: android.net.Network sNetwork> = r13;

        r2 = staticinvoke <com.android.server.net.NetworkPinner: java.lang.String access$200()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wifi alternate reality enabled on network ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r2, $r11);

     label4:
        $r14 = <com.android.server.net.NetworkPinner: java.lang.Object sLock>;

        virtualinvoke $r14.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void onLost(android.net.Network)
    {
        com.android.server.net.NetworkPinner$Callback r0, $r4;
        java.lang.Object r1, $r13;
        java.lang.String r2, $r10;
        java.lang.StringBuilder r3;
        android.net.Network $r5, $r7, r12;
        boolean $z0, $z1;
        android.net.ConnectivityManager $r6;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.net.NetworkPinner$Callback;

        r12 := @parameter0: android.net.Network;

        r1 = <com.android.server.net.NetworkPinner: java.lang.Object sLock>;

        entermonitor r1;

     label1:
        $r4 = staticinvoke <com.android.server.net.NetworkPinner: com.android.server.net.NetworkPinner$Callback access$000()>();

        if r0 == $r4 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 = <com.android.server.net.NetworkPinner: android.net.Network sNetwork>;

        $z0 = virtualinvoke r12.<android.net.Network: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        $r6 = staticinvoke <com.android.server.net.NetworkPinner: android.net.ConnectivityManager access$100()>();

        $r7 = virtualinvoke $r6.<android.net.ConnectivityManager: android.net.Network getBoundNetworkForProcess()>();

        $z1 = virtualinvoke r12.<android.net.Network: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label4;

        staticinvoke <com.android.server.net.NetworkPinner: void unpin()>();

        r2 = staticinvoke <com.android.server.net.NetworkPinner: java.lang.String access$200()>();

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wifi alternate reality disabled on network ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r10 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r2, $r10);

     label4:
        $r13 = <com.android.server.net.NetworkPinner: java.lang.Object sLock>;

        virtualinvoke $r13.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
