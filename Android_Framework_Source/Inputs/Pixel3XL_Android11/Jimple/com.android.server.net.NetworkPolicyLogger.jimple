public class com.android.server.net.NetworkPolicyLogger extends java.lang.Object
{
    private static final int EVENT_APP_IDLE_STATE_CHANGED;
    private static final int EVENT_APP_IDLE_WL_CHANGED;
    private static final int EVENT_DEVICE_IDLE_MODE_ENABLED;
    private static final int EVENT_FIREWALL_CHAIN_ENABLED;
    private static final int EVENT_METEREDNESS_CHANGED;
    private static final int EVENT_NETWORK_BLOCKED;
    private static final int EVENT_PAROLE_STATE_CHANGED;
    private static final int EVENT_POLICIES_CHANGED;
    private static final int EVENT_RESTRICT_BG_CHANGED;
    private static final int EVENT_TEMP_POWER_SAVE_WL_CHANGED;
    private static final int EVENT_TYPE_GENERIC;
    private static final int EVENT_UID_FIREWALL_RULE_CHANGED;
    private static final int EVENT_UID_STATE_CHANGED;
    private static final int EVENT_UPDATE_METERED_RESTRICTED_PKGS;
    private static final int EVENT_USER_STATE_REMOVED;
    static final boolean LOGD;
    static final boolean LOGV;
    private static final int MAX_LOG_SIZE;
    private static final int MAX_NETWORK_BLOCKED_LOG_SIZE;
    static final int NTWK_ALLOWED_DEFAULT;
    static final int NTWK_ALLOWED_NON_METERED;
    static final int NTWK_ALLOWED_SYSTEM;
    static final int NTWK_ALLOWED_TMP_WHITELIST;
    static final int NTWK_ALLOWED_WHITELIST;
    static final int NTWK_BLOCKED_BG_RESTRICT;
    static final int NTWK_BLOCKED_BLACKLIST;
    static final int NTWK_BLOCKED_POWER;
    static final java.lang.String TAG;
    private int mDebugUid;
    private final com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer;
    private final java.lang.Object mLock;
    private final com.android.server.net.NetworkPolicyLogger$LogBuffer mNetworkBlockedBuffer;
    private final com.android.server.net.NetworkPolicyLogger$LogBuffer mUidStateChangeBuffer;

    static void <clinit>()
    {
        boolean z0, $z1, $z2, $z3;
        short s1, s2;

        <com.android.server.net.NetworkPolicyLogger: java.lang.String TAG> = "NetworkPolicy";

        <com.android.server.net.NetworkPolicyLogger: int NTWK_BLOCKED_POWER> = 0;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_BLOCKED_BLACKLIST> = 2;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_BLOCKED_BG_RESTRICT> = 5;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_ALLOWED_WHITELIST> = 3;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_ALLOWED_TMP_WHITELIST> = 4;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_ALLOWED_SYSTEM> = 7;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_ALLOWED_NON_METERED> = 1;

        <com.android.server.net.NetworkPolicyLogger: int NTWK_ALLOWED_DEFAULT> = 6;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_USER_STATE_REMOVED> = 5;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_UPDATE_METERED_RESTRICTED_PKGS> = 13;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_UID_STATE_CHANGED> = 2;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_UID_FIREWALL_RULE_CHANGED> = 11;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_TYPE_GENERIC> = 0;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_TEMP_POWER_SAVE_WL_CHANGED> = 10;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_RESTRICT_BG_CHANGED> = 6;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_POLICIES_CHANGED> = 3;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_PAROLE_STATE_CHANGED> = 9;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_NETWORK_BLOCKED> = 1;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_METEREDNESS_CHANGED> = 4;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_FIREWALL_CHAIN_ENABLED> = 12;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_DEVICE_IDLE_MODE_ENABLED> = 7;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_APP_IDLE_WL_CHANGED> = 14;

        <com.android.server.net.NetworkPolicyLogger: int EVENT_APP_IDLE_STATE_CHANGED> = 8;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("NetworkPolicy", 3);

        <com.android.server.net.NetworkPolicyLogger: boolean LOGD> = $z1;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("NetworkPolicy", 2);

        <com.android.server.net.NetworkPolicyLogger: boolean LOGV> = $z2;

        z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if z0 == 0 goto label1;

        s1 = 100;

        goto label2;

     label1:
        s1 = 400;

     label2:
        <com.android.server.net.NetworkPolicyLogger: int MAX_LOG_SIZE> = s1;

        $z3 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z3 == 0 goto label3;

        s2 = 100;

        goto label4;

     label3:
        s2 = 400;

     label4:
        <com.android.server.net.NetworkPolicyLogger: int MAX_NETWORK_BLOCKED_LOG_SIZE> = s2;

        return;
    }

    public void <init>()
    {
        com.android.server.net.NetworkPolicyLogger r0;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r4;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.server.net.NetworkPolicyLogger$LogBuffer;

        $i0 = <com.android.server.net.NetworkPolicyLogger: int MAX_NETWORK_BLOCKED_LOG_SIZE>;

        specialinvoke $r1.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void <init>(int)>($i0);

        r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mNetworkBlockedBuffer> = $r1;

        $r2 = new com.android.server.net.NetworkPolicyLogger$LogBuffer;

        $i1 = <com.android.server.net.NetworkPolicyLogger: int MAX_LOG_SIZE>;

        specialinvoke $r2.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void <init>(int)>($i1);

        r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mUidStateChangeBuffer> = $r2;

        $r3 = new com.android.server.net.NetworkPolicyLogger$LogBuffer;

        $i2 = <com.android.server.net.NetworkPolicyLogger: int MAX_LOG_SIZE>;

        specialinvoke $r3.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void <init>(int)>($i2);

        r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer> = $r3;

        r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid> = -1;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock> = $r4;

        return;
    }

    static java.lang.String access$000(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getBlockedReason(int)>(i0);

        return $r0;
    }

    static java.lang.String access$100(int, int, int)
    {
        int i0, i1, i2;
        java.lang.String $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getPolicyChangedLog(int,int,int)>(i0, i1, i2);

        return $r0;
    }

    static java.lang.String access$1000(int, int, int)
    {
        int i0, i1, i2;
        java.lang.String $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getUidFirewallRuleChangedLog(int,int,int)>(i0, i1, i2);

        return $r0;
    }

    static java.lang.String access$1100(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getFirewallChainEnabledLog(int,boolean)>(i0, z0);

        return $r0;
    }

    static java.lang.String access$200(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getMeterednessChangedLog(int,boolean)>(i0, z0);

        return $r0;
    }

    static java.lang.String access$300(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getUserRemovedLog(int)>(i0);

        return $r0;
    }

    static java.lang.String access$400(boolean, boolean)
    {
        boolean z0, z1;
        java.lang.String $r0;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getRestrictBackgroundChangedLog(boolean,boolean)>(z0, z1);

        return $r0;
    }

    static java.lang.String access$500(boolean)
    {
        boolean z0;
        java.lang.String $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getDeviceIdleModeEnabled(boolean)>(z0);

        return $r0;
    }

    static java.lang.String access$600(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getAppIdleChangedLog(int,boolean)>(i0, z0);

        return $r0;
    }

    static java.lang.String access$700(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getAppIdleWlChangedLog(int,boolean)>(i0, z0);

        return $r0;
    }

    static java.lang.String access$800(boolean)
    {
        boolean z0;
        java.lang.String $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getParoleStateChanged(boolean)>(z0);

        return $r0;
    }

    static java.lang.String access$900(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getTempPowerSaveWlChangedLog(int,boolean)>(i0, z0);

        return $r0;
    }

    private static java.lang.String getAppIdleChangedLog(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("App idle state of uid ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String getAppIdleWlChangedLog(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("App idle whitelist state of uid ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String getBlockedReason(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label8;
            case 1: goto label7;
            case 2: goto label6;
            case 3: goto label5;
            case 4: goto label4;
            case 5: goto label3;
            case 6: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;

     label2:
        return "allowed by default";

     label3:
        return "blocked when background is restricted";

     label4:
        return "temporary whitelisted on metered network";

     label5:
        return "whitelisted on metered network";

     label6:
        return "blacklisted on metered network";

     label7:
        return "allowed on unmetered network";

     label8:
        return "blocked by power restrictions";
    }

    private static java.lang.String getDeviceIdleModeEnabled(boolean)
    {
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DeviceIdleMode enabled: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static java.lang.String getFirewallChainEnabledLog(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r7;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Firewall chain ");

        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getFirewallChainName(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static java.lang.String getFirewallChainName(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;

     label1:
        return "powersave";

     label2:
        return "standby";

     label3:
        return "dozable";
    }

    private static java.lang.String getFirewallRuleName(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        return $r0;

     label1:
        return "deny";

     label2:
        return "allow";

     label3:
        return "default";
    }

    private static java.lang.String getMeterednessChangedLog(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Meteredness of netId=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed to ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String getParoleStateChanged(boolean)
    {
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parole state: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static java.lang.String getPolicyChangedLog(int, int, int)
    {
        int i0, i1, i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r5, $r8, $r10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Policy for ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed from ");

        $r5 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidPoliciesToString(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r8 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidPoliciesToString(int)>(i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private static java.lang.String getRestrictBackgroundChangedLog(boolean, boolean)
    {
        boolean z0, z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Changed restrictBackground: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String getTempPowerSaveWlChangedLog(int, boolean)
    {
        int i0;
        boolean z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("temp-power-save whitelist for ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed to: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static java.lang.String getUidFirewallRuleChangedLog(int, int, int)
    {
        int i0, i1, i2;
        java.lang.Object[] $r0;
        java.lang.Integer $r1;
        java.lang.String $r2, $r3, $r4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $r0 = newarray (java.lang.Object)[3];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r0[0] = $r1;

        $r2 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getFirewallChainName(int)>(i0);

        $r0[1] = $r2;

        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getFirewallRuleName(int)>(i2);

        $r0[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Firewall rule changed: %d-%s-%s", $r0);

        return $r4;
    }

    private static java.lang.String getUserRemovedLog(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remove state for u");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    void appIdleStateChanged(int, boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z1 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if i0 != $i2 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getAppIdleChangedLog(int,boolean)>(i0, z0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void appIdleStateChanged(int,boolean)>(i0, z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void appIdleWlChanged(int, boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z1 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if i0 != $i2 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getAppIdleWlChangedLog(int,boolean)>(i0, z0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void appIdleWlChanged(int,boolean)>(i0, z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void deviceIdleModeEnabled(boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        int $i1;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z1 != 0 goto label2;

        $i1 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i1 == -1 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getDeviceIdleModeEnabled(boolean)>(z0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void deviceIdleModeEnabled(boolean)>(z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void dumpLogs(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        java.lang.Object r1;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r3, $r6, $r9;
        java.lang.Throwable $r11;
        com.android.internal.util.IndentingPrintWriter r12;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        r12 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mEventLogs (most recent first):");

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r3 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r3.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void reverseDump(com.android.internal.util.IndentingPrintWriter)>(r12);

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mNetworkBlockedLogs (most recent first):");

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r6 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mNetworkBlockedBuffer>;

        virtualinvoke $r6.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void reverseDump(com.android.internal.util.IndentingPrintWriter)>(r12);

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mUidStateChangeLogs (most recent first):");

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r9 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mUidStateChangeBuffer>;

        virtualinvoke $r9.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void reverseDump(com.android.internal.util.IndentingPrintWriter)>(r12);

        virtualinvoke r12.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void event(java.lang.String)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGV>;

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", r4);

     label2:
        $r2 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r2.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void event(java.lang.String)>(r4);

        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void firewallChainEnabled(int, boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z1 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i2 == -1 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getFirewallChainEnabledLog(int,boolean)>(i0, z0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void firewallChainEnabled(int,boolean)>(i0, z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void firewallRulesChanged(int, int[], int[])
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2;
        int[] r1, r14;
        java.lang.Object r2;
        java.lang.StringBuilder r3;
        java.lang.String $r5, $r8, $r11, r15;
        boolean $z0;
        java.lang.Throwable $r13;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r16;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        r14 := @parameter1: int[];

        r1 := @parameter2: int[];

        r2 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Firewall rules changed for ");

        $r5 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getFirewallChainName(int)>(i0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; uids=");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r14);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; rules=");

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z0 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i2 == -1 goto label3;

     label2:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", r15);

     label3:
        $r16 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r16.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void event(java.lang.String)>(r15);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r13 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void meteredRestrictedPkgsChanged(java.util.Set)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        boolean $z0;
        int $i1;
        java.lang.Throwable $r5;
        java.util.Set r6;
        java.lang.String r7;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r8;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        r6 := @parameter0: java.util.Set;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Metered restricted uids: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z0 != 0 goto label2;

        $i1 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i1 == -1 goto label3;

     label2:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", r7);

     label3:
        $r8 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r8.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void event(java.lang.String)>(r7);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void meterednessChanged(int, boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z1 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i2 == -1 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getMeterednessChangedLog(int,boolean)>(i0, z0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void meterednessChanged(int,boolean)>(i0, z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void networkBlocked(int, int)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, i1, $i3;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r4, $r6;
        java.lang.Throwable $r7;
        java.lang.StringBuilder r8;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r9;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z0 != 0 goto label2;

        $i3 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if i0 != $i3 goto label3;

     label2:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r4 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getBlockedReason(int)>(i1);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r6);

     label3:
        $r9 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mNetworkBlockedBuffer>;

        virtualinvoke $r9.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void networkBlocked(int,int)>(i0, i1);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void paroleStateChanged(boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        int $i1;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z1 != 0 goto label2;

        $i1 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i1 == -1 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getParoleStateChanged(boolean)>(z0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void paroleStateChanged(boolean)>(z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void removingUserState(int)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z0 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i2 == -1 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getUserRemovedLog(int)>(i0);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void userRemoved(int)>(i0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void restrictBackgroundChanged(boolean, boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        boolean z0, z1, $z2;
        java.lang.Object r1;
        java.lang.String $r3;
        int $i1;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z2 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        if $z2 != 0 goto label2;

        $i1 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if $i1 == -1 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getRestrictBackgroundChangedLog(boolean,boolean)>(z0, z1);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void restrictBackgroundChanged(boolean,boolean)>(z0, z1);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void setDebugUid(int)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid> = i0;

        return;
    }

    void tempPowerSaveWlChanged(int, boolean)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, $i2, $i3;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGV>;

        if $z1 != 0 goto label2;

        $i2 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        if i0 != $i3 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getTempPowerSaveWlChangedLog(int,boolean)>(i0, z0);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void tempPowerSaveWlChanged(int,boolean)>(i0, z0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void uidFirewallRuleChanged(int, int, int)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, i1, i2, $i4;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGV>;

        if $z0 != 0 goto label2;

        $i4 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if i1 != $i4 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getUidFirewallRuleChangedLog(int,int,int)>(i0, i1, i2);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void uidFirewallRuleChanged(int,int,int)>(i0, i1, i2);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void uidPolicyChanged(int, int, int)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, i1, i2, $i4;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r5;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGV>;

        if $z0 != 0 goto label2;

        $i4 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if i0 != $i4 goto label3;

     label2:
        $r3 = staticinvoke <com.android.server.net.NetworkPolicyLogger: java.lang.String getPolicyChangedLog(int,int,int)>(i0, i1, i2);

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r3);

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mEventsBuffer>;

        virtualinvoke $r5.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void uidPolicyChanged(int,int,int)>(i0, i1, i2);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void uidStateChanged(int, int, long)
    {
        com.android.server.net.NetworkPolicyLogger r0;
        int i0, i1, $i4;
        long l2;
        java.lang.Object r1;
        boolean $z0;
        java.lang.String $r4, $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r10;
        com.android.server.net.NetworkPolicyLogger$LogBuffer $r11;

        r0 := @this: com.android.server.net.NetworkPolicyLogger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 = r0.<com.android.server.net.NetworkPolicyLogger: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGV>;

        if $z0 != 0 goto label2;

        $i4 = r0.<com.android.server.net.NetworkPolicyLogger: int mDebugUid>;

        if i0 != $i4 goto label3;

     label2:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" state changed to ");

        $r4 = staticinvoke <com.android.server.am.ProcessList: java.lang.String makeProcStateString(int)>(i1);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with seq=");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r8 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r8);

     label3:
        $r11 = r0.<com.android.server.net.NetworkPolicyLogger: com.android.server.net.NetworkPolicyLogger$LogBuffer mUidStateChangeBuffer>;

        virtualinvoke $r11.<com.android.server.net.NetworkPolicyLogger$LogBuffer: void uidStateChanged(int,int,long)>(i0, i1, l2);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }
}
