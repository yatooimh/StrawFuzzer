public class com.android.server.net.NetworkPolicyManagerService extends android.net.INetworkPolicyManager$Stub
{
    private static final java.lang.String ACTION_ALLOW_BACKGROUND;
    private static final java.lang.String ACTION_SNOOZE_RAPID;
    private static final java.lang.String ACTION_SNOOZE_WARNING;
    private static final java.lang.String ATTR_APP_ID;
    private static final java.lang.String ATTR_CYCLE_DAY;
    private static final java.lang.String ATTR_CYCLE_END;
    private static final java.lang.String ATTR_CYCLE_PERIOD;
    private static final java.lang.String ATTR_CYCLE_START;
    private static final java.lang.String ATTR_CYCLE_TIMEZONE;
    private static final java.lang.String ATTR_INFERRED;
    private static final java.lang.String ATTR_LAST_LIMIT_SNOOZE;
    private static final java.lang.String ATTR_LAST_SNOOZE;
    private static final java.lang.String ATTR_LAST_WARNING_SNOOZE;
    private static final java.lang.String ATTR_LIMIT_BEHAVIOR;
    private static final java.lang.String ATTR_LIMIT_BYTES;
    private static final java.lang.String ATTR_METERED;
    private static final java.lang.String ATTR_NETWORK_ID;
    private static final java.lang.String ATTR_NETWORK_TEMPLATE;
    private static final java.lang.String ATTR_OWNER_PACKAGE;
    private static final java.lang.String ATTR_POLICY;
    private static final java.lang.String ATTR_RESTRICT_BACKGROUND;
    private static final java.lang.String ATTR_SUBSCRIBER_ID;
    private static final java.lang.String ATTR_SUB_ID;
    private static final java.lang.String ATTR_SUMMARY;
    private static final java.lang.String ATTR_TITLE;
    private static final java.lang.String ATTR_UID;
    private static final java.lang.String ATTR_USAGE_BYTES;
    private static final java.lang.String ATTR_USAGE_TIME;
    private static final java.lang.String ATTR_VERSION;
    private static final java.lang.String ATTR_WARNING_BYTES;
    private static final int CHAIN_TOGGLE_DISABLE;
    private static final int CHAIN_TOGGLE_ENABLE;
    private static final int CHAIN_TOGGLE_NONE;
    private static final boolean LOGD;
    private static final boolean LOGV;
    private static final int MSG_ADVISE_PERSIST_THRESHOLD;
    private static final int MSG_LIMIT_REACHED;
    private static final int MSG_METERED_IFACES_CHANGED;
    private static final int MSG_METERED_RESTRICTED_PACKAGES_CHANGED;
    private static final int MSG_POLICIES_CHANGED;
    private static final int MSG_REMOVE_INTERFACE_QUOTA;
    private static final int MSG_RESET_FIREWALL_RULES_BY_UID;
    private static final int MSG_RESTRICT_BACKGROUND_CHANGED;
    private static final int MSG_RULES_CHANGED;
    private static final int MSG_SET_NETWORK_TEMPLATE_ENABLED;
    private static final int MSG_STATS_PROVIDER_LIMIT_REACHED;
    private static final int MSG_SUBSCRIPTION_OVERRIDE;
    private static final int MSG_SUBSCRIPTION_PLANS_CHANGED;
    private static final int MSG_UPDATE_INTERFACE_QUOTA;
    public static final int OPPORTUNISTIC_QUOTA_UNKNOWN;
    private static final java.lang.String PROP_SUB_PLAN_OWNER;
    private static final float QUOTA_FRAC_JOBS_DEFAULT;
    private static final float QUOTA_FRAC_MULTIPATH_DEFAULT;
    private static final float QUOTA_LIMITED_DEFAULT;
    private static final long QUOTA_UNLIMITED_DEFAULT;
    static final java.lang.String TAG;
    private static final java.lang.String TAG_APP_POLICY;
    private static final java.lang.String TAG_NETWORK_POLICY;
    private static final java.lang.String TAG_POLICY_LIST;
    private static final java.lang.String TAG_RESTRICT_BACKGROUND;
    private static final java.lang.String TAG_REVOKED_RESTRICT_BACKGROUND;
    private static final java.lang.String TAG_SUBSCRIPTION_PLAN;
    private static final java.lang.String TAG_UID_POLICY;
    private static final java.lang.String TAG_WHITELIST;
    public static final int TYPE_LIMIT;
    public static final int TYPE_LIMIT_SNOOZED;
    public static final int TYPE_RAPID;
    private static final int TYPE_RESTRICT_BACKGROUND;
    private static final int TYPE_RESTRICT_POWER;
    public static final int TYPE_WARNING;
    private static final int UID_MSG_GONE;
    private static final int UID_MSG_STATE_CHANGED;
    private static final int VERSION_ADDED_CYCLE;
    private static final int VERSION_ADDED_INFERRED;
    private static final int VERSION_ADDED_METERED;
    private static final int VERSION_ADDED_NETWORK_ID;
    private static final int VERSION_ADDED_RESTRICT_BACKGROUND;
    private static final int VERSION_ADDED_SNOOZE;
    private static final int VERSION_ADDED_TIMEZONE;
    private static final int VERSION_INIT;
    private static final int VERSION_LATEST;
    private static final int VERSION_SPLIT_SNOOZE;
    private static final int VERSION_SWITCH_APP_ID;
    private static final int VERSION_SWITCH_UID;
    private static final long WAIT_FOR_ADMIN_DATA_TIMEOUT_MS;
    private final android.util.ArraySet mActiveNotifs;
    private final android.app.IActivityManager mActivityManager;
    private android.app.ActivityManagerInternal mActivityManagerInternal;
    private final java.util.concurrent.CountDownLatch mAdminDataAvailableLatch;
    private final android.net.INetworkManagementEventObserver mAlertObserver;
    private final android.content.BroadcastReceiver mAllowReceiver;
    private final android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds;
    private final android.app.AppOpsManager mAppOps;
    private com.android.server.usage.AppStandbyInternal mAppStandby;
    private final android.telephony.CarrierConfigManager mCarrierConfigManager;
    private android.content.BroadcastReceiver mCarrierConfigReceiver;
    private final java.time.Clock mClock;
    private android.net.IConnectivityManager mConnManager;
    private android.content.BroadcastReceiver mConnReceiver;
    private final android.content.Context mContext;
    private final android.util.SparseBooleanArray mDefaultRestrictBackgroundWhitelistUids;
    volatile boolean mDeviceIdleMode;
    final android.util.SparseBooleanArray mFirewallChainStates;
    final android.os.Handler mHandler;
    private final android.os.Handler$Callback mHandlerCallback;
    private final android.content.pm.IPackageManager mIPm;
    private final android.util.SparseBooleanArray mInternetPermissionMap;
    private final android.os.RemoteCallbackList mListeners;
    private boolean mLoadedRestrictBackground;
    private final com.android.server.net.NetworkPolicyLogger mLogger;
    private java.util.List mMergedSubscriberIds;
    private android.util.ArraySet mMeteredIfaces;
    private final android.util.SparseArray mMeteredRestrictedUids;
    private final android.util.SparseIntArray mNetIdToSubId;
    private final android.net.ConnectivityManager$NetworkCallback mNetworkCallback;
    private final android.os.INetworkManagementService mNetworkManager;
    private volatile boolean mNetworkManagerReady;
    private final android.util.SparseBooleanArray mNetworkMetered;
    final java.lang.Object mNetworkPoliciesSecondLock;
    final android.util.ArrayMap mNetworkPolicy;
    private final android.util.SparseBooleanArray mNetworkRoaming;
    private com.android.server.net.NetworkStatsManagerInternal mNetworkStats;
    private final android.util.ArraySet mOverLimitNotified;
    private final android.content.BroadcastReceiver mPackageReceiver;
    private final android.util.AtomicFile mPolicyFile;
    private android.os.PowerManagerInternal mPowerManagerInternal;
    private final android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistAppIds;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds;
    private final android.content.BroadcastReceiver mPowerSaveWhitelistReceiver;
    private android.os.PowerWhitelistManager mPowerWhitelistManager;
    volatile boolean mRestrictBackground;
    private boolean mRestrictBackgroundBeforeBsm;
    volatile boolean mRestrictBackgroundChangedInBsm;
    private boolean mRestrictBackgroundLowPowerMode;
    private final android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids;
    volatile boolean mRestrictPower;
    private final android.content.BroadcastReceiver mSnoozeReceiver;
    public final com.android.internal.util.StatLogger mStatLogger;
    private final android.content.BroadcastReceiver mStatsReceiver;
    private final android.util.SparseArray mSubIdToSubscriberId;
    final android.util.SparseLongArray mSubscriptionOpportunisticQuota;
    final android.util.SparseArray mSubscriptionPlans;
    final android.util.SparseArray mSubscriptionPlansOwner;
    private final boolean mSuppressDefaultPolicy;
    volatile boolean mSystemReady;
    final android.os.Handler mUidEventHandler;
    private final android.os.Handler$Callback mUidEventHandlerCallback;
    private final com.android.server.ServiceThread mUidEventThread;
    final android.util.SparseIntArray mUidFirewallDozableRules;
    final android.util.SparseIntArray mUidFirewallPowerSaveRules;
    final android.util.SparseIntArray mUidFirewallStandbyRules;
    private final android.app.IUidObserver mUidObserver;
    final android.util.SparseIntArray mUidPolicy;
    private final android.content.BroadcastReceiver mUidRemovedReceiver;
    final android.util.SparseIntArray mUidRules;
    final java.lang.Object mUidRulesFirstLock;
    final android.util.SparseIntArray mUidState;
    private android.app.usage.UsageStatsManagerInternal mUsageStats;
    private final android.os.UserManager mUserManager;
    private final android.content.BroadcastReceiver mUserReceiver;
    private final android.content.BroadcastReceiver mWifiReceiver;

    static void <clinit>()
    {
        boolean $z0, $z1;
        android.util.DataUnit $r0;
        long $l0;

        <com.android.server.net.NetworkPolicyManagerService: long WAIT_FOR_ADMIN_DATA_TIMEOUT_MS> = 10000L;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SWITCH_UID> = 10;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SWITCH_APP_ID> = 8;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_SPLIT_SNOOZE> = 5;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_LATEST> = 11;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_INIT> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_TIMEZONE> = 6;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_SNOOZE> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_RESTRICT_BACKGROUND> = 3;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_NETWORK_ID> = 9;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_METERED> = 4;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_INFERRED> = 7;

        <com.android.server.net.NetworkPolicyManagerService: int VERSION_ADDED_CYCLE> = 11;

        <com.android.server.net.NetworkPolicyManagerService: int UID_MSG_STATE_CHANGED> = 100;

        <com.android.server.net.NetworkPolicyManagerService: int UID_MSG_GONE> = 101;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_WARNING> = 34;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_RESTRICT_POWER> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_RESTRICT_BACKGROUND> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_RAPID> = 45;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_LIMIT_SNOOZED> = 36;

        <com.android.server.net.NetworkPolicyManagerService: int TYPE_LIMIT> = 35;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_WHITELIST> = "whitelist";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_UID_POLICY> = "uid-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_SUBSCRIPTION_PLAN> = "subscription-plan";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_REVOKED_RESTRICT_BACKGROUND> = "revoked-restrict-background";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_RESTRICT_BACKGROUND> = "restrict-background";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_POLICY_LIST> = "policy-list";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_NETWORK_POLICY> = "network-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG_APP_POLICY> = "app-policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String TAG> = "NetworkPolicy";

        <com.android.server.net.NetworkPolicyManagerService: float QUOTA_LIMITED_DEFAULT> = 0.1F;

        <com.android.server.net.NetworkPolicyManagerService: float QUOTA_FRAC_MULTIPATH_DEFAULT> = 0.5F;

        <com.android.server.net.NetworkPolicyManagerService: float QUOTA_FRAC_JOBS_DEFAULT> = 0.5F;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String PROP_SUB_PLAN_OWNER> = "persist.sys.sub_plan_owner";

        <com.android.server.net.NetworkPolicyManagerService: int OPPORTUNISTIC_QUOTA_UNKNOWN> = -1;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_UPDATE_INTERFACE_QUOTA> = 10;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_SUBSCRIPTION_PLANS_CHANGED> = 19;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_SUBSCRIPTION_OVERRIDE> = 16;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_STATS_PROVIDER_LIMIT_REACHED> = 20;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_SET_NETWORK_TEMPLATE_ENABLED> = 18;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RULES_CHANGED> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RESTRICT_BACKGROUND_CHANGED> = 6;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_RESET_FIREWALL_RULES_BY_UID> = 15;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_REMOVE_INTERFACE_QUOTA> = 11;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_POLICIES_CHANGED> = 13;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_METERED_RESTRICTED_PACKAGES_CHANGED> = 17;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_METERED_IFACES_CHANGED> = 2;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_LIMIT_REACHED> = 5;

        <com.android.server.net.NetworkPolicyManagerService: int MSG_ADVISE_PERSIST_THRESHOLD> = 7;

        <com.android.server.net.NetworkPolicyManagerService: int CHAIN_TOGGLE_NONE> = 0;

        <com.android.server.net.NetworkPolicyManagerService: int CHAIN_TOGGLE_ENABLE> = 1;

        <com.android.server.net.NetworkPolicyManagerService: int CHAIN_TOGGLE_DISABLE> = 2;

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_WARNING_BYTES> = "warningBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_VERSION> = "version";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_USAGE_TIME> = "usageTime";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_USAGE_BYTES> = "usageBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_UID> = "uid";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_TITLE> = "title";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_SUMMARY> = "summary";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_SUB_ID> = "subId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_SUBSCRIBER_ID> = "subscriberId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_RESTRICT_BACKGROUND> = "restrictBackground";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_POLICY> = "policy";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_OWNER_PACKAGE> = "ownerPackage";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_NETWORK_TEMPLATE> = "networkTemplate";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_NETWORK_ID> = "networkId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_METERED> = "metered";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LIMIT_BYTES> = "limitBytes";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LIMIT_BEHAVIOR> = "limitBehavior";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_WARNING_SNOOZE> = "lastWarningSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_SNOOZE> = "lastSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_LAST_LIMIT_SNOOZE> = "lastLimitSnooze";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_INFERRED> = "inferred";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_TIMEZONE> = "cycleTimezone";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_START> = "cycleStart";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_PERIOD> = "cyclePeriod";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_END> = "cycleEnd";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_CYCLE_DAY> = "cycleDay";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ATTR_APP_ID> = "appId";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_SNOOZE_WARNING> = "com.android.server.net.action.SNOOZE_WARNING";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_SNOOZE_RAPID> = "com.android.server.net.action.SNOOZE_RAPID";

        <com.android.server.net.NetworkPolicyManagerService: java.lang.String ACTION_ALLOW_BACKGROUND> = "com.android.server.net.action.ALLOW_BACKGROUND";

        $z0 = <com.android.server.net.NetworkPolicyLogger: boolean LOGD>;

        <com.android.server.net.NetworkPolicyManagerService: boolean LOGD> = $z0;

        $z1 = <com.android.server.net.NetworkPolicyLogger: boolean LOGV>;

        <com.android.server.net.NetworkPolicyManagerService: boolean LOGV> = $z1;

        $r0 = <android.util.DataUnit: android.util.DataUnit MEBIBYTES>;

        $l0 = virtualinvoke $r0.<android.util.DataUnit: long toBytes(long)>(20L);

        <com.android.server.net.NetworkPolicyManagerService: long QUOTA_UNLIMITED_DEFAULT> = $l0;

        return;
    }

    public void <init>(android.content.Context, android.app.IActivityManager, android.os.INetworkManagementService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context r1;
        android.app.IActivityManager r2;
        android.os.INetworkManagementService r3;
        android.content.pm.IPackageManager $r4;
        java.time.Clock $r5;
        java.io.File $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.app.IActivityManager;

        r3 := @parameter2: android.os.INetworkManagementService;

        $r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r5 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: java.time.Clock getDefaultClock()>();

        $r6 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: java.io.File getDefaultSystemDir()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void <init>(android.content.Context,android.app.IActivityManager,android.os.INetworkManagementService,android.content.pm.IPackageManager,java.time.Clock,java.io.File,boolean)>(r1, r2, r3, $r4, $r5, $r6, 0);

        return;
    }

    public void <init>(android.content.Context, android.app.IActivityManager, android.os.INetworkManagementService, android.content.pm.IPackageManager, java.time.Clock, java.io.File, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context r1, $r56, $r61, $r66, $r69;
        android.os.INetworkManagementService r2, $r60;
        android.content.pm.IPackageManager r3;
        java.time.Clock r4, $r65;
        java.io.File r5, $r82;
        boolean z0;
        java.lang.Object $r6, $r7, $r62, $r67, $r70, $r83;
        java.util.concurrent.CountDownLatch $r8;
        android.util.ArrayMap $r9;
        android.util.SparseArray $r10, $r11, $r32, $r34;
        android.util.SparseLongArray $r12;
        android.util.SparseIntArray $r13, $r14, $r15, $r16, $r17, $r28, $r31;
        android.util.SparseBooleanArray $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r29, $r30, $r37;
        android.util.ArraySet $r25, $r26, $r27;
        java.util.ArrayList $r33;
        android.os.RemoteCallbackList $r35;
        com.android.server.net.NetworkPolicyLogger $r36;
        com.android.internal.util.StatLogger $r38;
        java.lang.String[] $r39;
        com.android.server.net.NetworkPolicyManagerService$4 $r40;
        com.android.server.net.NetworkPolicyManagerService$5 $r41;
        com.android.server.net.NetworkPolicyManagerService$6 $r42;
        com.android.server.net.NetworkPolicyManagerService$7 $r43;
        com.android.server.net.NetworkPolicyManagerService$8 $r44;
        com.android.server.net.NetworkPolicyManagerService$9 $r45;
        com.android.server.net.NetworkPolicyManagerService$10 $r46;
        com.android.server.net.NetworkPolicyManagerService$11 $r47;
        com.android.server.net.NetworkPolicyManagerService$12 $r48;
        com.android.server.net.NetworkPolicyManagerService$13 $r49;
        com.android.server.net.NetworkPolicyManagerService$14 $r50;
        com.android.server.net.NetworkPolicyManagerService$15 $r51;
        com.android.server.net.NetworkPolicyManagerService$16 $r52;
        com.android.server.net.NetworkPolicyManagerService$17 $r53;
        com.android.server.net.NetworkPolicyManagerService$18 $r54;
        android.app.IActivityManager $r58, r86;
        android.os.PowerWhitelistManager $r63;
        android.os.UserManager $r68;
        android.telephony.CarrierConfigManager $r71;
        android.os.HandlerThread $r72;
        android.os.Handler $r73, $r77;
        android.os.Looper $r74, $r79;
        android.os.Handler$Callback $r75, $r80;
        com.android.server.ServiceThread $r76, $r78;
        android.util.AtomicFile $r81;
        android.app.AppOpsManager $r84;
        com.android.server.net.NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl $r85;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r86 := @parameter1: android.app.IActivityManager;

        r2 := @parameter2: android.os.INetworkManagementService;

        r3 := @parameter3: android.content.pm.IPackageManager;

        r4 := @parameter4: java.time.Clock;

        r5 := @parameter5: java.io.File;

        z0 := @parameter6: boolean;

        specialinvoke r0.<android.net.INetworkPolicyManager$Stub: void <init>()>();

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock> = $r7;

        $r8 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r8.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.concurrent.CountDownLatch mAdminDataAvailableLatch> = $r8;

        $r9 = new android.util.ArrayMap;

        specialinvoke $r9.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy> = $r9;

        $r10 = new android.util.SparseArray;

        specialinvoke $r10.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans> = $r10;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner> = $r11;

        $r12 = new android.util.SparseLongArray;

        specialinvoke $r12.<android.util.SparseLongArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseLongArray mSubscriptionOpportunisticQuota> = $r12;

        $r13 = new android.util.SparseIntArray;

        specialinvoke $r13.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy> = $r13;

        $r14 = new android.util.SparseIntArray;

        specialinvoke $r14.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules> = $r14;

        $r15 = new android.util.SparseIntArray;

        specialinvoke $r15.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules> = $r15;

        $r16 = new android.util.SparseIntArray;

        specialinvoke $r16.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallDozableRules> = $r16;

        $r17 = new android.util.SparseIntArray;

        specialinvoke $r17.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallPowerSaveRules> = $r17;

        $r18 = new android.util.SparseBooleanArray;

        specialinvoke $r18.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mFirewallChainStates> = $r18;

        $r19 = new android.util.SparseBooleanArray;

        specialinvoke $r19.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds> = $r19;

        $r20 = new android.util.SparseBooleanArray;

        specialinvoke $r20.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds> = $r20;

        $r21 = new android.util.SparseBooleanArray;

        specialinvoke $r21.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds> = $r21;

        $r22 = new android.util.SparseBooleanArray;

        specialinvoke $r22.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds> = $r22;

        $r23 = new android.util.SparseBooleanArray;

        specialinvoke $r23.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mDefaultRestrictBackgroundWhitelistUids> = $r23;

        $r24 = new android.util.SparseBooleanArray;

        specialinvoke $r24.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids> = $r24;

        $r25 = new android.util.ArraySet;

        specialinvoke $r25.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces> = $r25;

        $r26 = new android.util.ArraySet;

        specialinvoke $r26.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified> = $r26;

        $r27 = new android.util.ArraySet;

        specialinvoke $r27.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs> = $r27;

        $r28 = new android.util.SparseIntArray;

        specialinvoke $r28.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState> = $r28;

        $r29 = new android.util.SparseBooleanArray;

        specialinvoke $r29.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mNetworkMetered> = $r29;

        $r30 = new android.util.SparseBooleanArray;

        specialinvoke $r30.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mNetworkRoaming> = $r30;

        $r31 = new android.util.SparseIntArray;

        specialinvoke $r31.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mNetIdToSubId> = $r31;

        $r32 = new android.util.SparseArray;

        specialinvoke $r32.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId> = $r32;

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.List mMergedSubscriberIds> = $r33;

        $r34 = new android.util.SparseArray;

        specialinvoke $r34.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids> = $r34;

        $r35 = new android.os.RemoteCallbackList;

        specialinvoke $r35.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners> = $r35;

        $r36 = new com.android.server.net.NetworkPolicyLogger;

        specialinvoke $r36.<com.android.server.net.NetworkPolicyLogger: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger> = $r36;

        $r37 = new android.util.SparseBooleanArray;

        specialinvoke $r37.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mInternetPermissionMap> = $r37;

        $r38 = new com.android.internal.util.StatLogger;

        $r39 = newarray (java.lang.String)[2];

        $r39[0] = "updateNetworkEnabledNL()";

        $r39[1] = "isUidNetworkingBlocked()";

        specialinvoke $r38.<com.android.internal.util.StatLogger: void <init>(java.lang.String[])>($r39);

        r0.<com.android.server.net.NetworkPolicyManagerService: com.android.internal.util.StatLogger mStatLogger> = $r38;

        $r40 = new com.android.server.net.NetworkPolicyManagerService$4;

        specialinvoke $r40.<com.android.server.net.NetworkPolicyManagerService$4: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IUidObserver mUidObserver> = $r40;

        $r41 = new com.android.server.net.NetworkPolicyManagerService$5;

        specialinvoke $r41.<com.android.server.net.NetworkPolicyManagerService$5: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPowerSaveWhitelistReceiver> = $r41;

        $r42 = new com.android.server.net.NetworkPolicyManagerService$6;

        specialinvoke $r42.<com.android.server.net.NetworkPolicyManagerService$6: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPackageReceiver> = $r42;

        $r43 = new com.android.server.net.NetworkPolicyManagerService$7;

        specialinvoke $r43.<com.android.server.net.NetworkPolicyManagerService$7: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUidRemovedReceiver> = $r43;

        $r44 = new com.android.server.net.NetworkPolicyManagerService$8;

        specialinvoke $r44.<com.android.server.net.NetworkPolicyManagerService$8: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUserReceiver> = $r44;

        $r45 = new com.android.server.net.NetworkPolicyManagerService$9;

        specialinvoke $r45.<com.android.server.net.NetworkPolicyManagerService$9: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mStatsReceiver> = $r45;

        $r46 = new com.android.server.net.NetworkPolicyManagerService$10;

        specialinvoke $r46.<com.android.server.net.NetworkPolicyManagerService$10: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mAllowReceiver> = $r46;

        $r47 = new com.android.server.net.NetworkPolicyManagerService$11;

        specialinvoke $r47.<com.android.server.net.NetworkPolicyManagerService$11: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeReceiver> = $r47;

        $r48 = new com.android.server.net.NetworkPolicyManagerService$12;

        specialinvoke $r48.<com.android.server.net.NetworkPolicyManagerService$12: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiReceiver> = $r48;

        $r49 = new com.android.server.net.NetworkPolicyManagerService$13;

        specialinvoke $r49.<com.android.server.net.NetworkPolicyManagerService$13: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.ConnectivityManager$NetworkCallback mNetworkCallback> = $r49;

        $r50 = new com.android.server.net.NetworkPolicyManagerService$14;

        specialinvoke $r50.<com.android.server.net.NetworkPolicyManagerService$14: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkManagementEventObserver mAlertObserver> = $r50;

        $r51 = new com.android.server.net.NetworkPolicyManagerService$15;

        specialinvoke $r51.<com.android.server.net.NetworkPolicyManagerService$15: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mConnReceiver> = $r51;

        $r52 = new com.android.server.net.NetworkPolicyManagerService$16;

        specialinvoke $r52.<com.android.server.net.NetworkPolicyManagerService$16: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mCarrierConfigReceiver> = $r52;

        $r53 = new com.android.server.net.NetworkPolicyManagerService$17;

        specialinvoke $r53.<com.android.server.net.NetworkPolicyManagerService$17: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mHandlerCallback> = $r53;

        $r54 = new com.android.server.net.NetworkPolicyManagerService$18;

        specialinvoke $r54.<com.android.server.net.NetworkPolicyManagerService$18: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mUidEventHandlerCallback> = $r54;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing context");

        $r56 = (android.content.Context) r1;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext> = $r56;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r86, "missing activityManager");

        $r58 = (android.app.IActivityManager) r86;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IActivityManager mActivityManager> = $r58;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "missing networkManagement");

        $r60 = (android.os.INetworkManagementService) r2;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager> = $r60;

        $r61 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r62 = virtualinvoke $r61.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerWhitelistManager;");

        $r63 = (android.os.PowerWhitelistManager) $r62;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerWhitelistManager mPowerWhitelistManager> = $r63;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "missing Clock");

        $r65 = (java.time.Clock) r4;

        r0.<com.android.server.net.NetworkPolicyManagerService: java.time.Clock mClock> = $r65;

        $r66 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r67 = virtualinvoke $r66.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r68 = (android.os.UserManager) $r67;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager> = $r68;

        $r69 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r70 = virtualinvoke $r69.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/CarrierConfigManager;");

        $r71 = (android.telephony.CarrierConfigManager) $r70;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.CarrierConfigManager mCarrierConfigManager> = $r71;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.content.pm.IPackageManager mIPm> = r3;

        $r72 = new android.os.HandlerThread;

        specialinvoke $r72.<android.os.HandlerThread: void <init>(java.lang.String)>("NetworkPolicy");

        virtualinvoke $r72.<android.os.HandlerThread: void start()>();

        $r73 = new android.os.Handler;

        $r74 = virtualinvoke $r72.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r75 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mHandlerCallback>;

        specialinvoke $r73.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r74, $r75);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler> = $r73;

        $r76 = new com.android.server.ServiceThread;

        specialinvoke $r76.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("NetworkPolicy.uid", -2, 0);

        r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.ServiceThread mUidEventThread> = $r76;

        virtualinvoke $r76.<com.android.server.ServiceThread: void start()>();

        $r77 = new android.os.Handler;

        $r78 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.ServiceThread mUidEventThread>;

        $r79 = virtualinvoke $r78.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        $r80 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler$Callback mUidEventHandlerCallback>;

        specialinvoke $r77.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r79, $r80);

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mUidEventHandler> = $r77;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSuppressDefaultPolicy> = z0;

        $r81 = new android.util.AtomicFile;

        $r82 = new java.io.File;

        specialinvoke $r82.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, "netpolicy.xml");

        specialinvoke $r81.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r82, "net-policy");

        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile> = $r81;

        $r83 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r84 = (android.app.AppOpsManager) $r83;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.AppOpsManager mAppOps> = $r84;

        $r85 = new com.android.server.net.NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl;

        specialinvoke $r85.<com.android.server.net.NetworkPolicyManagerService$NetworkPolicyManagerInternalImpl: void <init>(com.android.server.net.NetworkPolicyManagerService,com.android.server.net.NetworkPolicyManagerService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;", $r85);

        return;
    }

    static boolean access$100()
    {
        boolean $z0;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        return $z0;
    }

    static android.util.SparseArray access$1000(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        return $r1;
    }

    static boolean access$1100(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean addDefaultRestrictBackgroundWhitelistUidsUL(int)>(i0);

        return $z0;
    }

    static void access$1200(com.android.server.net.NetworkPolicyManagerService, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForGlobalChangeAL(boolean)>(z0);

        return;
    }

    static void access$1300(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void upgradeWifiMeteredOverrideAL()>();

        return;
    }

    static android.content.Context access$1400(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        return $r1;
    }

    static android.util.SparseBooleanArray access$1500(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mNetworkMetered>;

        return $r1;
    }

    static boolean access$1600(android.util.SparseBooleanArray, boolean, android.net.Network)
    {
        android.util.SparseBooleanArray r0;
        boolean z0, $z1;
        android.net.Network r1;

        r0 := @parameter0: android.util.SparseBooleanArray;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.Network;

        $z1 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean updateCapabilityChange(android.util.SparseBooleanArray,boolean,android.net.Network)>(r0, z0, r1);

        return $z1;
    }

    static android.util.SparseBooleanArray access$1700(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mNetworkRoaming>;

        return $r1;
    }

    static com.android.server.net.NetworkPolicyLogger access$1800(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        com.android.server.net.NetworkPolicyLogger $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        return $r1;
    }

    static android.util.SparseArray access$1900(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        return $r1;
    }

    static void access$200(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictPowerUL()>();

        return;
    }

    static boolean access$2000(com.android.server.net.NetworkPolicyManagerService, int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean ensureActiveMobilePolicyAL(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    static boolean access$2100(com.android.server.net.NetworkPolicyManagerService, int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        java.lang.String r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean maybeUpdateMobilePolicyCycleAL(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    static void access$2200(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i0);

        return;
    }

    static void access$2300(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForAppIdleParoleUL()>();

        return;
    }

    static android.os.RemoteCallbackList access$2400(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.RemoteCallbackList $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        return $r1;
    }

    static void access$2500(com.android.server.net.NetworkPolicyManagerService, android.net.INetworkPolicyListener, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.INetworkPolicyListener;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void dispatchUidRulesChanged(android.net.INetworkPolicyListener,int,int)>(r1, i0, i1);

        return;
    }

    static void access$2600(com.android.server.net.NetworkPolicyManagerService, android.net.INetworkPolicyListener, java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        java.lang.String[] r2;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.INetworkPolicyListener;

        r2 := @parameter2: java.lang.String[];

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void dispatchMeteredIfacesChanged(android.net.INetworkPolicyListener,java.lang.String[])>(r1, r2);

        return;
    }

    static com.android.server.net.NetworkStatsManagerInternal access$2700(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        com.android.server.net.NetworkStatsManagerInternal $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkStatsManagerInternal mNetworkStats>;

        return $r1;
    }

    static android.util.ArraySet access$2800(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        return $r1;
    }

    static void access$2900(com.android.server.net.NetworkPolicyManagerService, android.net.INetworkPolicyListener, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        boolean z0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.INetworkPolicyListener;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void dispatchRestrictBackgroundChanged(android.net.INetworkPolicyListener,boolean)>(r1, z0);

        return;
    }

    static void access$3000(com.android.server.net.NetworkPolicyManagerService, android.net.INetworkPolicyListener, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        int i0, i1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.INetworkPolicyListener;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void dispatchUidPoliciesChanged(android.net.INetworkPolicyListener,int,int)>(r1, i0, i1);

        return;
    }

    static void access$3100(com.android.server.net.NetworkPolicyManagerService, int, java.lang.Boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        java.lang.Boolean r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Boolean;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void broadcastRestrictBackgroundChanged(int,java.lang.Boolean)>(i0, r1);

        return;
    }

    static void access$3200(com.android.server.net.NetworkPolicyManagerService, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuota(java.lang.String)>(r1);

        return;
    }

    static void access$3300(com.android.server.net.NetworkPolicyManagerService, java.lang.String, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        long l0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setInterfaceQuota(java.lang.String,long)>(r1, l0);

        return;
    }

    static void access$3400(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void resetUidFirewallRules(int)>(i0);

        return;
    }

    static void access$3500(com.android.server.net.NetworkPolicyManagerService, android.net.INetworkPolicyListener, int, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        int i0, i1, i2;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.INetworkPolicyListener;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void dispatchSubscriptionOverride(android.net.INetworkPolicyListener,int,int,int)>(r1, i0, i1, i2);

        return;
    }

    static void access$3600(com.android.server.net.NetworkPolicyManagerService, java.util.Set, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.Set r1;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: java.util.Set;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredRestrictedPackagesInternal(java.util.Set,int)>(r1, i0);

        return;
    }

    static void access$3700(com.android.server.net.NetworkPolicyManagerService, android.net.NetworkTemplate, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        boolean z0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.NetworkTemplate;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabledInner(android.net.NetworkTemplate,boolean)>(r1, z0);

        return;
    }

    static void access$3800(com.android.server.net.NetworkPolicyManagerService, android.net.INetworkPolicyListener, int, android.telephony.SubscriptionPlan[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        int i0;
        android.telephony.SubscriptionPlan[] r2;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.INetworkPolicyListener;

        i0 := @parameter2: int;

        r2 := @parameter3: android.telephony.SubscriptionPlan[];

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void dispatchSubscriptionPlansChanged(android.net.INetworkPolicyListener,int,android.telephony.SubscriptionPlan[])>(r1, i0, r2);

        return;
    }

    static boolean access$3900(int, int)
    {
        int i0, i1;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i0, i1);

        return $z0;
    }

    static void access$400(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworksInternal()>();

        return;
    }

    static android.util.SparseBooleanArray access$4000(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        return $r1;
    }

    static void access$4100(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForTempWhitelistChangeUL(int)>(i0);

        return;
    }

    static int access$4200(com.android.server.net.NetworkPolicyManagerService, android.net.Network)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.Network r1;
        int $i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.Network;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getSubIdLocked(android.net.Network)>(r1);

        return $i0;
    }

    static android.telephony.SubscriptionPlan access$4300(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        android.telephony.SubscriptionPlan $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.SubscriptionPlan getPrimarySubscriptionPlanLocked(int)>(i0);

        return $r1;
    }

    static int access$4400(com.android.server.net.NetworkPolicyManagerService, android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        int $i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter1: android.net.NetworkTemplate;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int findRelevantSubIdNL(android.net.NetworkTemplate)>(r1);

        return $i0;
    }

    static java.util.concurrent.CountDownLatch access$4500(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.concurrent.CountDownLatch mAdminDataAvailableLatch>;

        return $r1;
    }

    static void access$500(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updatePowerSaveWhitelistUL()>();

        return;
    }

    static boolean access$600()
    {
        boolean $z0;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        return $z0;
    }

    static android.util.SparseBooleanArray access$700(com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mInternetPermissionMap>;

        return $r1;
    }

    static void access$800(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRestrictionRulesForUidUL(int)>(i0);

        return;
    }

    static void access$900(com.android.server.net.NetworkPolicyManagerService, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void onUidDeletedUL(int)>(i0);

        return;
    }

    private static transient boolean addAll(android.util.ArraySet, int[])
    {
        android.util.ArraySet r0;
        int[] r1;
        int $i0, $i1, i2;
        java.lang.Integer $r2;
        boolean $z0, z1;

        r0 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: int[];

        z1 = 1;

        i2 = 0;

     label1:
        $i0 = lengthof r1;

        if i2 >= $i0 goto label2;

        $i1 = r1[i2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z0 = virtualinvoke r0.<android.util.ArraySet: boolean add(java.lang.Object)>($r2);

        z1 = z1 & $z0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return z1;
    }

    private boolean addDefaultRestrictBackgroundWhitelistUidsUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, $i2, $i3, i9;
        android.content.pm.PackageManager r1;
        android.util.ArraySet r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        android.util.SparseBooleanArray $r5, $r6, $r22;
        java.lang.StringBuilder $r7, $r16, $r25, $r29, $r36;
        java.lang.String $r15, $r24, $r28, $r34, $r39, r41;
        android.content.pm.PackageManager$NameNotFoundException $r35;
        com.android.server.SystemConfig r40;
        android.content.pm.ApplicationInfo r43;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r40 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke r40.<com.android.server.SystemConfig: android.util.ArraySet getAllowInDataUsageSave()>();

        z7 = 0;

        i9 = 0;

     label1:
        $i2 = virtualinvoke r2.<android.util.ArraySet: int size()>();

        if i9 >= $i2 goto label9;

        $r4 = virtualinvoke r2.<android.util.ArraySet: java.lang.Object valueAt(int)>(i9);

        r41 = (java.lang.String) $r4;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z0 == 0 goto label2;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checking restricted background whitelisting for package ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and user ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r34);

     label2:
        r43 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r41, 1048576, i0);

     label3:
        $z1 = virtualinvoke r43.<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>();

        if $z1 != 0 goto label4;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addDefaultRestrictBackgroundWhitelistUidsUL(): skipping non-privileged app  ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkPolicy", $r28);

        goto label8;

     label4:
        $i3 = r43.<android.content.pm.ApplicationInfo: int uid>;

        i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i3);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mDefaultRestrictBackgroundWhitelistUids>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void append(int,boolean)>(i1, 1);

        $z2 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z2 == 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding uid ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (user ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to default restricted background whitelist. Revoked status: ");

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        $z5 = virtualinvoke $r22.<android.util.SparseBooleanArray: boolean get(int)>(i1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r24 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r24);

     label5:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        $z3 = virtualinvoke $r6.<android.util.SparseBooleanArray: boolean get(int)>(i1);

        if $z3 != 0 goto label8;

        $z4 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z4 == 0 goto label6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("adding default package ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (uid ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") to restrict background whitelist");

        $r15 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r15);

     label6:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,boolean)>(i1, 4, 0);

        z7 = 1;

        goto label8;

     label7:
        $r35 := @caughtexception;

        $z6 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z6 == 0 goto label8;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ApplicationInfo for package ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r39);

     label8:
        i9 = i9 + 1;

        goto label1;

     label9:
        return z7;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label7;
    }

    private void broadcastRestrictBackgroundChanged(int, java.lang.Boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String[] r1;
        int i0, i1, i2, i3;
        java.lang.String r2;
        android.content.Context $r3, $r8;
        android.content.pm.PackageManager $r4;
        android.content.Intent $r5;
        android.os.UserHandle $r9;
        java.lang.Boolean r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i2 := @parameter0: int;

        r10 := @parameter1: java.lang.Boolean;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r1 = virtualinvoke $r4.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i2);

        if r1 == null goto label2;

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        i1 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        r2 = r1[i3];

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.RESTRICT_BACKGROUND_CHANGED");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r2);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r9 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r8.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r5, $r9);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private static android.content.Intent buildAllowBackgroundDataIntent()
    {
        android.content.Intent $r0;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.ALLOW_BACKGROUND");

        return $r0;
    }

    private static android.content.Intent buildNetworkOverLimitIntent(android.content.res.Resources, android.net.NetworkTemplate)
    {
        android.content.res.Resources r0;
        android.net.NetworkTemplate r1;
        android.content.Intent $r3;
        java.lang.String $r4;
        android.content.ComponentName $r5;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.net.NetworkTemplate;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        $r4 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getString(int)>(17039922);

        $r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r4);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r5);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r1);

        return $r3;
    }

    private static android.content.Intent buildSnoozeRapidIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent $r2;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_RAPID");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return $r2;
    }

    private static android.content.Intent buildSnoozeWarningIntent(android.net.NetworkTemplate)
    {
        android.net.NetworkTemplate r0;
        android.content.Intent $r2;

        r0 := @parameter0: android.net.NetworkTemplate;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_WARNING");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r0);

        return $r2;
    }

    private static android.content.Intent buildViewDataUsageIntent(android.content.res.Resources, android.net.NetworkTemplate)
    {
        android.content.res.Resources r0;
        android.net.NetworkTemplate r1;
        android.content.Intent $r3;
        java.lang.String $r4;
        android.content.ComponentName $r5;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.net.NetworkTemplate;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        $r4 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getString(int)>(17039852);

        $r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r4);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r5);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.NETWORK_TEMPLATE", r1);

        return $r3;
    }

    private void cancelNotification(com.android.server.net.NetworkPolicyManagerService$NotificationId)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        com.android.server.net.NetworkPolicyManagerService$NotificationId r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.NotificationManager $r4;
        java.lang.String $r5;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: com.android.server.net.NetworkPolicyManagerService$NotificationId;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/NotificationManager;");

        $r4 = (android.app.NotificationManager) $r3;

        $r5 = virtualinvoke r1.<com.android.server.net.NetworkPolicyManagerService$NotificationId: java.lang.String getTag()>();

        $i0 = virtualinvoke r1.<com.android.server.net.NetworkPolicyManagerService$NotificationId: int getId()>();

        virtualinvoke $r4.<android.app.NotificationManager: void cancel(java.lang.String,int)>($r5, $i0);

        return;
    }

    private transient boolean checkAnyPermissionOf(java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String[] r1;
        int i0, $i1, i2;
        java.lang.String r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r1[i2];

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r2);

        if $i1 != 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static void collectIfaces(android.util.ArraySet, android.net.NetworkState)
    {
        android.util.ArraySet r0;
        android.net.LinkProperties $r1, $r2, $r5;
        java.util.List $r3;
        java.lang.Object $r4;
        android.net.NetworkState r6;
        java.lang.String r7, r9;
        java.util.Iterator r8;
        boolean $z2;

        r0 := @parameter0: android.util.ArraySet;

        r6 := @parameter1: android.net.NetworkState;

        $r1 = r6.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r7 = virtualinvoke $r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r7 == null goto label1;

        virtualinvoke r0.<android.util.ArraySet: boolean add(java.lang.Object)>(r7);

     label1:
        $r2 = r6.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $r3 = virtualinvoke $r2.<android.net.LinkProperties: java.util.List getStackedLinks()>();

        r8 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label4;

        $r4 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.net.LinkProperties) $r4;

        r9 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r9 == null goto label3;

        virtualinvoke r0.<android.util.ArraySet: boolean add(java.lang.Object)>(r9);

     label3:
        goto label2;

     label4:
        return;
    }

    private static void collectKeys(android.util.SparseIntArray, android.util.SparseBooleanArray)
    {
        android.util.SparseIntArray r0;
        android.util.SparseBooleanArray r1;
        int i0, $i1, i2;

        r0 := @parameter0: android.util.SparseIntArray;

        r1 := @parameter1: android.util.SparseBooleanArray;

        i0 = virtualinvoke r0.<android.util.SparseIntArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = virtualinvoke r0.<android.util.SparseIntArray: int keyAt(int)>(i2);

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i1, 1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static android.net.NetworkState[] defeatNullable(android.net.NetworkState[])
    {
        android.net.NetworkState[] r0;

        r0 := @parameter0: android.net.NetworkState[];

        if r0 == null goto label1;

        goto label2;

     label1:
        r0 = newarray (android.net.NetworkState)[0];

     label2:
        return r0;
    }

    private void dispatchMeteredIfacesChanged(android.net.INetworkPolicyListener, java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String[] r1;
        android.os.RemoteException $r2;
        android.net.INetworkPolicyListener r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r3 := @parameter0: android.net.INetworkPolicyListener;

        r1 := @parameter1: java.lang.String[];

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.net.INetworkPolicyListener: void onMeteredIfacesChanged(java.lang.String[])>(r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchRestrictBackgroundChanged(android.net.INetworkPolicyListener, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0;
        android.os.RemoteException $r1;
        android.net.INetworkPolicyListener r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r2 := @parameter0: android.net.INetworkPolicyListener;

        z0 := @parameter1: boolean;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.net.INetworkPolicyListener: void onRestrictBackgroundChanged(boolean)>(z0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchSubscriptionOverride(android.net.INetworkPolicyListener, int, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        android.os.RemoteException $r1;
        android.net.INetworkPolicyListener r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r2 := @parameter0: android.net.INetworkPolicyListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.net.INetworkPolicyListener: void onSubscriptionOverride(int,int,int)>(i0, i1, i2);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchSubscriptionPlansChanged(android.net.INetworkPolicyListener, int, android.telephony.SubscriptionPlan[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        android.telephony.SubscriptionPlan[] r1;
        android.os.RemoteException $r2;
        android.net.INetworkPolicyListener r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r3 := @parameter0: android.net.INetworkPolicyListener;

        i0 := @parameter1: int;

        r1 := @parameter2: android.telephony.SubscriptionPlan[];

        if r3 == null goto label4;

     label1:
        interfaceinvoke r3.<android.net.INetworkPolicyListener: void onSubscriptionPlansChanged(int,android.telephony.SubscriptionPlan[])>(i0, r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchUidPoliciesChanged(android.net.INetworkPolicyListener, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        android.os.RemoteException $r1;
        android.net.INetworkPolicyListener r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r2 := @parameter0: android.net.INetworkPolicyListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.net.INetworkPolicyListener: void onUidPoliciesChanged(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void dispatchUidRulesChanged(android.net.INetworkPolicyListener, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        android.os.RemoteException $r1;
        android.net.INetworkPolicyListener r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r2 := @parameter0: android.net.INetworkPolicyListener;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<android.net.INetworkPolicyListener: void onUidRulesChanged(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void enableFirewallChainUL(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        boolean z0, $z1;
        android.util.SparseBooleanArray $r1, $r2, $r5;
        android.os.INetworkManagementService $r3;
        com.android.server.net.NetworkPolicyLogger $r4;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mFirewallChainStates>;

        $i1 = virtualinvoke $r1.<android.util.SparseBooleanArray: int indexOfKey(int)>(i0);

        if $i1 < 0 goto label1;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mFirewallChainStates>;

        $z1 = virtualinvoke $r5.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 != z0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mFirewallChainStates>;

        virtualinvoke $r2.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

     label2:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void setFirewallChainEnabled(int,boolean)>(i0, z0);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r4.<com.android.server.net.NetworkPolicyLogger: void firewallChainEnabled(int,boolean)>(i0, z0);

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        goto label6;

     label5:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem enable firewall chain", $r7);

     label6:
        return;

        catch java.lang.IllegalStateException from label2 to label3 with label5;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private transient void enforceAnyPermissionOf(java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String[] r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String[];

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean checkAnyPermissionOf(java.lang.String[])>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requires one of the following permissions: ");

        $r5 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(", ", r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void enforceSubscriptionPlanAccess(int, int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        long l2;
        android.telephony.SubscriptionManager r1;
        android.telephony.SubscriptionInfo r2;
        android.app.AppOpsManager $r3;
        android.content.Context $r4, $r15;
        java.lang.Object $r5;
        android.telephony.CarrierConfigManager $r6, $r20;
        java.lang.StringBuilder $r7, $r11;
        java.lang.String $r10, $r14, r17, r19, r21, r23, r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Throwable $r16;
        android.os.PersistableBundle r18;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r17 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r17);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/SubscriptionManager;");

        r1 = (android.telephony.SubscriptionManager) $r5;

        r2 = virtualinvoke r1.<android.telephony.SubscriptionManager: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int)>(i0);

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.CarrierConfigManager mCarrierConfigManager>;

        r18 = virtualinvoke $r6.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        if r2 == null goto label3;

        $z7 = virtualinvoke r2.<android.telephony.SubscriptionInfo: boolean isEmbedded()>();

        if $z7 == 0 goto label3;

        $z8 = virtualinvoke r1.<android.telephony.SubscriptionManager: boolean canManageSubscription(android.telephony.SubscriptionInfo,java.lang.String)>(r2, r17);

        if $z8 == 0 goto label3;

        return;

     label3:
        if r18 == null goto label4;

        r19 = virtualinvoke r18.<android.os.PersistableBundle: java.lang.String getString(java.lang.String,java.lang.String)>("config_plans_package_override_string", null);

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r19);

        if $z5 != 0 goto label4;

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r19, r17);

        if $z6 == 0 goto label4;

        return;

     label4:
        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.CarrierConfigManager mCarrierConfigManager>;

        r21 = virtualinvoke $r20.<android.telephony.CarrierConfigManager: java.lang.String getDefaultCarrierServicePackageName()>();

        $z9 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r21);

        if $z9 != 0 goto label5;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r21, r17);

        if $z4 == 0 goto label5;

        return;

     label5:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.sys.sub_plan_owner.");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>($r10, null);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r23);

        if $z0 != 0 goto label6;

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r23, r17);

        if $z3 == 0 goto label6;

        return;

     label6:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fw.sub_plan_owner.");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r25 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>($r14, null);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r25);

        if $z1 != 0 goto label7;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r25, r17);

        if $z2 == 0 goto label7;

        return;

     label7:
        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r15.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_SUBSCRIPTION_PLANS", "NetworkPolicy");

        return;

     label8:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label8;
    }

    private void enforceSubscriptionPlanValidity(android.telephony.SubscriptionPlan[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int[] r1, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10;
        android.util.ArraySet $r6, $r7, $r10;
        java.lang.IllegalArgumentException $r8, $r11, $r16, $r19;
        android.telephony.SubscriptionPlan $r9;
        boolean $z1, $z2, $z3, z4;
        java.lang.Integer $r12, $r18;
        java.lang.StringBuilder $r13;
        java.lang.String $r17;
        android.telephony.SubscriptionPlan[] r20;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r20 := @parameter0: android.telephony.SubscriptionPlan[];

        $i0 = lengthof r20;

        if $i0 != 0 goto label01;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("NetworkPolicy", "Received empty plans list. Clearing existing SubscriptionPlans.");

        return;

     label01:
        r1 = staticinvoke <android.telephony.TelephonyManager: int[] getAllNetworkTypes()>();

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean addAll(android.util.ArraySet,int[])>($r6, r1);

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        z4 = 0;

        i9 = 0;

     label02:
        $i1 = lengthof r20;

        if i9 >= $i1 goto label10;

        $r9 = r20[i9];

        r4 = virtualinvoke $r9.<android.telephony.SubscriptionPlan: int[] getNetworkTypes()>();

        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        i10 = 0;

     label03:
        $i2 = lengthof r4;

        if i10 >= $i2 goto label06;

        $i5 = r4[i10];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $z2 = virtualinvoke $r6.<android.util.ArraySet: boolean contains(java.lang.Object)>($r12);

        if $z2 == 0 goto label05;

        $i7 = r4[i10];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $z3 = virtualinvoke $r10.<android.util.ArraySet: boolean add(java.lang.Object)>($r18);

        if $z3 == 0 goto label04;

        i10 = i10 + 1;

        goto label03;

     label04:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Subscription plan contains duplicate network types.");

        throw $r19;

     label05:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid network type: ");

        $i6 = r4[i10];

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label06:
        $i4 = lengthof r4;

        $i3 = lengthof r1;

        if $i4 != $i3 goto label07;

        z4 = 1;

        goto label08;

     label07:
        $z1 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean addAll(android.util.ArraySet,int[])>($r7, r4);

        if $z1 == 0 goto label09;

     label08:
        i9 = i9 + 1;

        goto label02;

     label09:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Multiple subscription plans defined for a single network type.");

        throw $r11;

     label10:
        if z4 == 0 goto label11;

        return;

     label11:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No generic subscription plan that applies to all network types.");

        throw $r8;
    }

    private void enqueueNotification(android.net.NetworkPolicy, int, long, android.content.pm.ApplicationInfo)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, $l3;
        android.content.res.Resources r3;
        java.lang.String $r6, $r37, $r40, $r63, r80, r85, r89, $r97;
        android.content.Context $r7, $r10, $r12, $r15, $r19, $r27, $r31, $r36, $r43, $r47, $r54, $r58, $r62, $r66, $r70, $r74, $r94;
        int $i2, i4, i5, i6, $i7;
        android.net.NetworkTemplate $r14, $r18, $r34, $r42, $r50, $r53, $r65, $r69;
        android.app.PendingIntent $r16, $r20, $r28, $r44, $r48, $r55, $r59, $r67, $r71, $r75;
        boolean $z0, $z2, $z3, $z4;
        android.os.UserHandle $r26, $r46, $r57, $r73, $r99;
        java.lang.Object[] $r30, $r35, $r61;
        android.content.pm.PackageManager $r32;
        java.lang.CharSequence $r33, r79, r83, r88, r104, r105;
        android.net.NetworkPolicy r77;
        android.content.pm.ApplicationInfo r78;
        android.content.Intent r81, r84, r86, r87, r90, r91;
        java.lang.Object r82, $r95;
        android.app.Notification$BigTextStyle $r93, r103;
        android.app.NotificationManager $r96;
        android.app.Notification $r98;
        android.util.ArraySet $r100;
        com.android.server.net.NetworkPolicyManagerService$NotificationId r101;
        android.app.Notification$Builder r102;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r77 := @parameter0: android.net.NetworkPolicy;

        i4 := @parameter1: int;

        l0 := @parameter2: long;

        r78 := @parameter3: android.content.pm.ApplicationInfo;

        r101 = new com.android.server.net.NetworkPolicyManagerService$NotificationId;

        specialinvoke r101.<com.android.server.net.NetworkPolicyManagerService$NotificationId: void <init>(com.android.server.net.NetworkPolicyManagerService,android.net.NetworkPolicy,int)>(r0, r77, i4);

        r102 = new android.app.Notification$Builder;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r6 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String NETWORK_ALERTS>;

        specialinvoke r102.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>($r7, $r6);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>(1);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>(0L);

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r10.<android.content.Context: int getColor(int)>(17170460);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i2);

        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        if i4 == 45 goto label14;

        tableswitch(i4)
        {
            case 34: goto label12;
            case 35: goto label07;
            case 36: goto label02;
            default: goto label01;
        };

     label01:
        return;

     label02:
        $r34 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        i5 = virtualinvoke $r34.<android.net.NetworkTemplate: int getMatchRule()>();

        if i5 == 1 goto label04;

        if i5 == 4 goto label03;

        return;

     label03:
        r79 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040005);

        goto label05;

     label04:
        r79 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17039996);

     label05:
        l1 = r77.<android.net.NetworkPolicy: long limitBytes>;

        $r35 = newarray (java.lang.Object)[1];

        $r36 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $l3 = l0 - l1;

        $r37 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long,int)>($r36, $l3, 8);

        $r35[0] = $r37;

        r80 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17039995, $r35);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        $r40 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String NETWORK_STATUS>;

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setChannelId(java.lang.String)>($r40);

        $r42 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r81 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.content.res.Resources,android.net.NetworkTemplate)>(r3, $r42);

        $z2 = staticinvoke <android.os.UserManager: boolean isHeadlessSystemUserMode()>();

        if $z2 == 0 goto label06;

        $r47 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r46 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        $r48 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r47, 0, r81, 134217728, null, $r46);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r48);

        r82 = r80;

        goto label18;

     label06:
        $r43 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r44 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r43, 0, r81, 134217728);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r44);

        r82 = r80;

        goto label18;

     label07:
        $r50 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        i6 = virtualinvoke $r50.<android.net.NetworkTemplate: int getMatchRule()>();

        if i6 == 1 goto label09;

        if i6 == 4 goto label08;

        return;

     label08:
        r79 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040006);

        goto label10;

     label09:
        r79 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17039997);

     label10:
        r83 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17039994);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>(1);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17303537);

        $r53 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r84 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildNetworkOverLimitIntent(android.content.res.Resources,android.net.NetworkTemplate)>(r3, $r53);

        $z3 = staticinvoke <android.os.UserManager: boolean isHeadlessSystemUserMode()>();

        if $z3 == 0 goto label11;

        $r58 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r57 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        $r59 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r58, 0, r84, 134217728, null, $r57);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r59);

        r82 = r83;

        goto label18;

     label11:
        $r54 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r55 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r54, 0, r84, 134217728);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r55);

        r82 = r83;

        goto label18;

     label12:
        r79 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040004);

        $r61 = newarray (java.lang.Object)[1];

        $r62 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r63 = staticinvoke <android.text.format.Formatter: java.lang.String formatFileSize(android.content.Context,long,int)>($r62, l0, 8);

        $r61[0] = $r63;

        r85 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17040003, $r61);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        $r65 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r86 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildSnoozeWarningIntent(android.net.NetworkTemplate)>($r65);

        $r66 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r67 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r66, 0, r86, 134217728);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>($r67);

        $r69 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r87 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.content.res.Resources,android.net.NetworkTemplate)>(r3, $r69);

        $z4 = staticinvoke <android.os.UserManager: boolean isHeadlessSystemUserMode()>();

        if $z4 == 0 goto label13;

        $r74 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r73 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        $r75 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r74, 0, r87, 134217728, null, $r73);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r75);

        r82 = r85;

        goto label18;

     label13:
        $r70 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r71 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r70, 0, r87, 134217728);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r71);

        r82 = r85;

        goto label18;

     label14:
        r88 = virtualinvoke r3.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040000);

        if r78 == null goto label15;

        $r30 = newarray (java.lang.Object)[1];

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r32 = virtualinvoke $r31.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r33 = virtualinvoke r78.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>($r32);

        $r30[0] = $r33;

        r89 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17039998, $r30);

        goto label16;

     label15:
        r89 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getString(int)>(17039999);

     label16:
        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301624);

        $r14 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r90 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildSnoozeRapidIntent(android.net.NetworkTemplate)>($r14);

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r16 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r15, 0, r90, 134217728);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setDeleteIntent(android.app.PendingIntent)>($r16);

        $r18 = r77.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        r91 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildViewDataUsageIntent(android.content.res.Resources,android.net.NetworkTemplate)>(r3, $r18);

        $z0 = staticinvoke <android.os.UserManager: boolean isHeadlessSystemUserMode()>();

        if $z0 == 0 goto label17;

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r26 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        $r28 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r27, 0, r91, 134217728, null, $r26);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r28);

        r82 = r89;

        r79 = r88;

        goto label18;

     label17:
        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r20 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r19, 0, r91, 134217728);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>($r20);

        r79 = r88;

        r82 = r89;

     label18:
        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>(r79);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r79);

        r104 = (java.lang.CharSequence) r82;

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r104);

        r103 = new android.app.Notification$BigTextStyle;

        specialinvoke r103.<android.app.Notification$BigTextStyle: void <init>()>();

        r105 = (java.lang.CharSequence) r82;

        $r93 = virtualinvoke r103.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>(r105);

        virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r93);

        $r94 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r95 = virtualinvoke $r94.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/NotificationManager;");

        $r96 = (android.app.NotificationManager) $r95;

        $r97 = virtualinvoke r101.<com.android.server.net.NetworkPolicyManagerService$NotificationId: java.lang.String getTag()>();

        $i7 = virtualinvoke r101.<com.android.server.net.NetworkPolicyManagerService$NotificationId: int getId()>();

        $r98 = virtualinvoke r102.<android.app.Notification$Builder: android.app.Notification build()>();

        $r99 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r96.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>($r97, $i7, $r98, $r99);

        $r100 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        virtualinvoke $r100.<android.util.ArraySet: boolean add(java.lang.Object)>(r101);

        return;
    }

    private void ensureActiveMobilePolicyAL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean $z0, $z1;
        android.util.SparseArray $r1, $r2, $r3;
        int $i0, $i1, i3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "ensureActiveMobilePolicyAL()");

     label1:
        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSuppressDefaultPolicy>;

        if $z1 == 0 goto label2;

        return;

     label2:
        i3 = 0;

     label3:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if i3 >= $i0 goto label4;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int keyAt(int)>(i3);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r5 = (java.lang.String) $r4;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean ensureActiveMobilePolicyAL(int,java.lang.String)>($i1, $r5);

        i3 = i3 + 1;

        goto label3;

     label4:
        return;
    }

    private boolean ensureActiveMobilePolicyAL(int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1, i4;
        java.lang.String r1, $r6, $r9, $r17, $r19;
        android.net.NetworkIdentity $r2;
        android.util.ArrayMap $r3, $r11;
        java.lang.StringBuilder $r4, $r13;
        android.net.NetworkPolicy $r10;
        java.lang.Object $r12;
        boolean $z0, $z1;
        android.net.NetworkTemplate r21;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new android.net.NetworkIdentity;

        specialinvoke $r2.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean,boolean,boolean)>(0, 0, r1, null, 0, 1, 1);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i1 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        i4 = $i1 - 1;

     label1:
        if i4 < 0 goto label4;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        r21 = (android.net.NetworkTemplate) $r12;

        $z0 = virtualinvoke r21.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>($r2);

        if $z0 == 0 goto label3;

        $z1 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z1 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found template ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which matches subscriber ");

        $r17 = staticinvoke <android.net.NetworkIdentity: java.lang.String scrubSubscriberId(java.lang.String)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r19);

     label2:
        return 0;

     label3:
        i4 = i4 + -1;

        goto label1;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No policy for subscriber ");

        $r6 = staticinvoke <android.net.NetworkIdentity: java.lang.String scrubSubscriberId(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; generating default policy");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("NetworkPolicy", $r9);

        $r10 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy buildDefaultMobilePolicy(int,java.lang.String)>(i0, r1);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void addNetworkPolicyAL(android.net.NetworkPolicy)>($r10);

        return 1;
    }

    private android.content.pm.ApplicationInfo findRapidBlame(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkStats r1;
        long l0, $l3, $l6, $l7, l9, l10, l13, l14, l15;
        int $i1, $i5, i11, i12;
        byte $b2, $b4, $b8;
        android.content.Context $r2, $r4;
        android.content.pm.PackageManager $r3, $r5;
        java.lang.String $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        android.net.NetworkTemplate r8;
        android.net.NetworkStats$Entry r9;
        java.lang.String[] r10;
        android.content.pm.ApplicationInfo r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r8 := @parameter0: android.net.NetworkTemplate;

        l9 := @parameter1: long;

        l10 := @parameter2: long;

        r1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkStats getNetworkUidBytes(android.net.NetworkTemplate,long,long)>(r8, l9, l10);

        i11 = 0;

        i12 = 0;

        r9 = null;

        l13 = 0L;

        l14 = 0L;

     label1:
        $i1 = virtualinvoke r1.<android.net.NetworkStats: int size()>();

        if i12 >= $i1 goto label3;

        r9 = virtualinvoke r1.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i12, r9);

        $l7 = r9.<android.net.NetworkStats$Entry: long rxBytes>;

        $l6 = r9.<android.net.NetworkStats$Entry: long txBytes>;

        l0 = $l7 + $l6;

        l13 = l13 + l0;

        l15 = l14;

        $b8 = l0 cmp l14;

        if $b8 <= 0 goto label2;

        l15 = l0;

        i11 = r9.<android.net.NetworkStats$Entry: int uid>;

     label2:
        i12 = i12 + 1;

        l14 = l15;

        goto label1;

     label3:
        $b2 = l14 cmp 0L;

        if $b2 <= 0 goto label7;

        $l3 = l13 / 2L;

        $b4 = l14 cmp $l3;

        if $b4 <= 0 goto label7;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r10 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i11);

        if r10 == null goto label7;

        $i5 = lengthof r10;

        if $i5 != 1 goto label7;

     label4:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r6 = r10[0];

        r11 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r6, 4989440);

     label5:
        return r11;

     label6:
        $r7 := @caughtexception;

     label7:
        return null;

        catch android.content.pm.PackageManager$NameNotFoundException from label4 to label5 with label6;
    }

    private int findRelevantSubIdNL(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        int i0, $i1, i2;
        android.util.SparseArray $r2, $r3, $r5;
        android.net.NetworkIdentity $r4;
        java.lang.Object $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        i2 = 0;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label3;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int keyAt(int)>(i2);

        $r4 = new android.net.NetworkIdentity;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r7 = (java.lang.String) $r6;

        specialinvoke $r4.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean,boolean,boolean)>(0, 0, $r7, null, 0, 1, 1);

        $z0 = virtualinvoke r1.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>($r4);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return -1;
    }

    private static boolean getBooleanDefeatingNullable(android.os.PersistableBundle, java.lang.String, boolean)
    {
        android.os.PersistableBundle r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: android.os.PersistableBundle;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        z0 = virtualinvoke r0.<android.os.PersistableBundle: boolean getBoolean(java.lang.String,boolean)>(r1, z0);

        goto label1;

     label1:
        return z0;
    }

    private static java.time.Clock getDefaultClock()
    {
        android.os.BestClock $r0;
        java.time.Clock[] $r1;
        java.time.ZoneOffset $r2;
        java.time.Clock $r3, $r4;

        $r0 = new android.os.BestClock;

        $r2 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        $r1 = newarray (java.time.Clock)[2];

        $r3 = staticinvoke <android.os.SystemClock: java.time.Clock currentNetworkTimeClock()>();

        $r1[0] = $r3;

        $r4 = staticinvoke <java.time.Clock: java.time.Clock systemUTC()>();

        $r1[1] = $r4;

        specialinvoke $r0.<android.os.BestClock: void <init>(java.time.ZoneId,java.time.Clock[])>($r2, $r1);

        return $r0;
    }

    private static java.io.File getDefaultSystemDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    private long getNetworkTotalBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l2, l3;
        com.android.server.net.NetworkStatsManagerInternal $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.net.NetworkTemplate r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r8 := @parameter0: android.net.NetworkTemplate;

        l2 := @parameter1: long;

        l0 := @parameter2: long;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkStatsManagerInternal mNetworkStats>;

        l3 = virtualinvoke $r2.<com.android.server.net.NetworkStatsManagerInternal: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>(r8, l2, l0);

     label2:
        return l3;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read network stats: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r7);

        return 0L;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private android.net.NetworkStats getNetworkUidBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, $l3;
        com.android.server.net.NetworkStatsManagerInternal $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        android.net.NetworkStats $r8, r10;
        android.net.NetworkTemplate r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r9 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkStatsManagerInternal mNetworkStats>;

        r10 = virtualinvoke $r2.<com.android.server.net.NetworkStatsManagerInternal: android.net.NetworkStats getNetworkUidBytes(android.net.NetworkTemplate,long,long)>(r9, l0, l1);

     label2:
        return r10;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read network stats: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r7);

        $r8 = new android.net.NetworkStats;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r8.<android.net.NetworkStats: void <init>(long,int)>($l3, 0);

        return $r8;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private long getPlatformDefaultLimitBytes()
    {
        com.android.server.net.NetworkPolicyManagerService r0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        return -1L;
    }

    private long getPlatformDefaultWarningBytes()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        long $l1, $l3, $l4;
        byte $b2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694856);

        $l1 = (long) i0;

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        return -1L;

     label1:
        $l3 = (long) i0;

        $l4 = $l3 * 1048576L;

        return $l4;
    }

    private android.telephony.SubscriptionPlan getPrimarySubscriptionPlanLocked(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.telephony.SubscriptionPlan[] r1;
        int i0, i1, i2;
        android.telephony.SubscriptionPlan r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;
        android.util.RecurrenceRule $r5;
        java.util.Iterator $r6;
        java.time.Clock $r8;
        android.util.Range $r9;
        java.time.ZonedDateTime $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i1 := @parameter0: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (android.telephony.SubscriptionPlan[]) $r4;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z0 != 0 goto label4;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r2 = r1[i2];

        $r5 = virtualinvoke r2.<android.telephony.SubscriptionPlan: android.util.RecurrenceRule getCycleRule()>();

        $z1 = virtualinvoke $r5.<android.util.RecurrenceRule: boolean isRecurring()>();

        if $z1 == 0 goto label2;

        return r2;

     label2:
        $r6 = virtualinvoke r2.<android.telephony.SubscriptionPlan: java.util.Iterator cycleIterator()>();

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (android.util.Range) $r7;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: java.time.Clock mClock>;

        $r10 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>($r8);

        $z2 = virtualinvoke $r9.<android.util.Range: boolean contains(java.lang.Comparable)>($r10);

        if $z2 == 0 goto label3;

        return r2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return null;
    }

    private int getSubIdLocked(android.net.Network)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.Network r1;
        int $i0, $i1;
        android.util.SparseIntArray $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.Network;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mNetIdToSubId>;

        $i0 = r1.<android.net.Network: int netId>;

        $i1 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int,int)>($i0, -1);

        return $i1;
    }

    private long getTotalBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, $l2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

        return $l2;
    }

    private int getUidForPackage(java.lang.String, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;
        int i0, i1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i1 = virtualinvoke $r2.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int,int)>(r4, 4202496, i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void handleRestrictedPackagesChangeUL(java.util.Set, java.util.Set)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.Iterator r1, r12, r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r2, $r5, $r8;
        java.lang.Integer $r3, $r4, $r6, $r7, $r9;
        int $i0, i1, i2;
        java.util.Set r10, r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r10 := @parameter0: java.util.Set;

        r11 := @parameter1: java.util.Set;

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mNetworkManagerReady>;

        if $z0 != 0 goto label01;

        return;

     label01:
        if r10 != null goto label04;

        r12 = interfaceinvoke r11.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label03;

        $r8 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i0 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>($i0);

        goto label02;

     label03:
        return;

     label04:
        r1 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z4 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z4 != 0 goto label06;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>(i1);

     label06:
        goto label05;

     label07:
        r13 = interfaceinvoke r11.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r2 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.Integer) $r2;

        i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z3 = interfaceinvoke r10.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z3 != 0 goto label09;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>(i2);

     label09:
        goto label08;

     label10:
        return;
    }

    private boolean hasInternetPermissionUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, $i2, $i3;
        android.util.SparseBooleanArray $r2, $r3, $r5;
        android.content.pm.IPackageManager $r4;
        android.os.RemoteException $r6;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

     label1:
        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mInternetPermissionMap>;

        $i2 = virtualinvoke $r2.<android.util.SparseBooleanArray: int indexOfKey(int)>(i1);

        if $i2 >= 0 goto label6;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.pm.IPackageManager mIPm>;

        $i3 = interfaceinvoke $r4.<android.content.pm.IPackageManager: int checkUidPermission(java.lang.String,int)>("android.permission.INTERNET", i0);

        if $i3 != 0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mInternetPermissionMap>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i1, z0);

     label5:
        goto label7;

     label6:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mInternetPermissionMap>;

        z0 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i1);

     label7:
        return z0;

     label8:
        $r6 := @caughtexception;

        return 1;

        catch android.os.RemoteException from label1 to label2 with label8;
        catch android.os.RemoteException from label4 to label5 with label8;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    private static boolean hasRule(int, int)
    {
        int i0, i1, $i2;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & i1;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void initService(java.util.concurrent.CountDownLatch)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r1, $r3, $r5, $r7, $r12, $r57, $r61, r69, r70, r97;
        android.app.usage.UsageStatsManagerInternal $r2;
        com.android.server.usage.AppStandbyInternal $r4, r95;
        com.android.server.net.NetworkStatsManagerInternal $r6;
        android.os.PowerManagerInternal $r8, $r10, r71, r73;
        android.os.PowerSaveState $r9, $r11;
        android.app.ActivityManagerInternal $r13;
        android.app.IUidObserver $r14;
        android.app.IActivityManager $r15;
        android.net.INetworkManagementEventObserver $r16;
        android.os.INetworkManagementService $r17;
        android.os.Handler $r18, $r22, $r26, $r30, $r32, $r36, $r40, $r44, $r46, $r48, $r52, $r62;
        android.content.BroadcastReceiver $r19, $r23, $r27, $r33, $r37, $r41, $r49, $r53, r80, r86, r89;
        android.content.Context $r20, $r24, $r28, $r34, $r38, $r42, $r50, $r54, $r56, $r60, r79, r85, r88;
        android.net.NetworkRequest $r58;
        android.net.ConnectivityManager$NetworkCallback $r59;
        java.lang.Throwable $r63, $r64, $r65, $r66;
        android.os.RemoteException $r67;
        java.util.concurrent.CountDownLatch r68;
        com.android.server.net.NetworkPolicyManagerService$1 r72;
        com.android.server.net.NetworkPolicyManagerService$2 r74;
        android.content.IntentFilter r76, r77, r78, r81, r82, r83, r84, r87, r90, r91, r92;
        android.net.ConnectivityManager r93;
        android.net.NetworkRequest$Builder r94;
        com.android.server.net.NetworkPolicyManagerService$NetPolicyAppIdleStateChangeListener r96;
        android.telephony.SubscriptionManager r98;
        android.os.HandlerExecutor r99;
        com.android.server.net.NetworkPolicyManagerService$3 r100;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r68 := @parameter0: java.util.concurrent.CountDownLatch;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "systemReady");

        $i1 = staticinvoke <android.os.Process: int myTid()>();

        i0 = staticinvoke <android.os.Process: int getThreadPriority(int)>($i1);

     label01:
        staticinvoke <android.os.Process: void setThreadPriority(int)>(-2);

        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isBandwidthControlEnabled()>();

        if $z1 != 0 goto label03;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", "bandwidth controls disabled, unable to enforce policy");

     label02:
        staticinvoke <android.os.Process: void setThreadPriority(int)>(i0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label03:
        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        $r2 = (android.app.usage.UsageStatsManagerInternal) $r1;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStats> = $r2;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/usage/AppStandbyInternal;");

        $r4 = (com.android.server.usage.AppStandbyInternal) $r3;

        r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.usage.AppStandbyInternal mAppStandby> = $r4;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkStatsManagerInternal;");

        $r6 = (com.android.server.net.NetworkStatsManagerInternal) $r5;

        r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkStatsManagerInternal mNetworkStats> = $r6;

        r69 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r69;

     label04:
        r70 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r70;

     label05:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updatePowerSaveWhitelistUL()>();

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        r71 = (android.os.PowerManagerInternal) $r7;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal> = r71;

        r72 = new com.android.server.net.NetworkPolicyManagerService$1;

        specialinvoke r72.<com.android.server.net.NetworkPolicyManagerService$1: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        virtualinvoke r71.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(android.os.PowerManagerInternal$LowPowerModeListener)>(r72);

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r9 = virtualinvoke $r8.<android.os.PowerManagerInternal: android.os.PowerSaveState getLowPowerState(int)>(6);

        $z2 = $r9.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower> = $z2;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSystemReady> = 1;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void waitForAdminData()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void readPolicyAL()>();

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground>;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundBeforeBsm> = $z3;

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        $r11 = virtualinvoke $r10.<android.os.PowerManagerInternal: android.os.PowerSaveState getLowPowerState(int)>(10);

        z0 = $r11.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode> = z0;

     label06:
        if z0 == 0 goto label08;

     label07:
        $z5 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground>;

        if $z5 != 0 goto label08;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground> = 1;

     label08:
        r73 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerManagerInternal mPowerManagerInternal>;

        r74 = new com.android.server.net.NetworkPolicyManagerService$2;

        specialinvoke r74.<com.android.server.net.NetworkPolicyManagerService$2: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        virtualinvoke r73.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(android.os.PowerManagerInternal$LowPowerModeListener)>(r74);

        $z6 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean addDefaultRestrictBackgroundWhitelistUidsUL()>();

        if $z6 == 0 goto label09;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

     label09:
        $z4 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackgroundUL(boolean,java.lang.String)>($z4, "init_service");

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForGlobalChangeAL(boolean)>(0);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsNL()>();

        exitmonitor r70;

     label10:
        exitmonitor r69;

     label11:
        $r12 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r13 = (android.app.ActivityManagerInternal) $r12;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.app.ActivityManagerInternal mActivityManagerInternal> = $r13;

     label12:
        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IActivityManager mActivityManager>;

        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.IUidObserver mUidObserver>;

        interfaceinvoke $r15.<android.app.IActivityManager: void registerUidObserver(android.app.IUidObserver,int,int,java.lang.String)>($r14, 3, 5, "android");

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        $r16 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkManagementEventObserver mAlertObserver>;

        interfaceinvoke $r17.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r16);

     label13:
        goto label15;

     label14:
        $r67 := @caughtexception;

     label15:
        r76 = new android.content.IntentFilter;

        specialinvoke r76.<android.content.IntentFilter: void <init>(java.lang.String)>("android.os.action.POWER_SAVE_WHITELIST_CHANGED");

        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r19 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPowerSaveWhitelistReceiver>;

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r20.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r19, r76, null, $r18);

        r77 = new android.content.IntentFilter;

        specialinvoke r77.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mConnReceiver>;

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r24.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r23, r77, "android.permission.NETWORK_STACK", $r22);

        r78 = new android.content.IntentFilter;

        specialinvoke r78.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r78.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r78.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r28 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mPackageReceiver>;

        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r28.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r27, r78, null, $r26);

        r79 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r80 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUidRemovedReceiver>;

        r81 = new android.content.IntentFilter;

        specialinvoke r81.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.UID_REMOVED");

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r79.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r80, r81, null, $r30);

        r82 = new android.content.IntentFilter;

        specialinvoke r82.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r82.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r82.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r33 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mUserReceiver>;

        $r32 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r34.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r33, r82, null, $r32);

        r83 = new android.content.IntentFilter;

        specialinvoke r83.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_UPDATED");

        $r38 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r37 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mStatsReceiver>;

        $r36 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r38.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r37, r83, "android.permission.READ_NETWORK_USAGE_HISTORY", $r36);

        r84 = new android.content.IntentFilter;

        specialinvoke r84.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.ALLOW_BACKGROUND");

        $r42 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r41 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mAllowReceiver>;

        $r40 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r42.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r41, r84, "android.permission.MANAGE_NETWORK_POLICY", $r40);

        r85 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r86 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeReceiver>;

        r87 = new android.content.IntentFilter;

        specialinvoke r87.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_WARNING");

        $r44 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r85.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r86, r87, "android.permission.MANAGE_NETWORK_POLICY", $r44);

        r88 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r89 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mSnoozeReceiver>;

        r90 = new android.content.IntentFilter;

        specialinvoke r90.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.net.action.SNOOZE_RAPID");

        $r46 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r88.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r89, r90, "android.permission.MANAGE_NETWORK_POLICY", $r46);

        r91 = new android.content.IntentFilter;

        specialinvoke r91.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.wifi.CONFIGURED_NETWORKS_CHANGE");

        $r50 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r49 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mWifiReceiver>;

        $r48 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r50.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r49, r91, null, $r48);

        r92 = new android.content.IntentFilter;

        specialinvoke r92.<android.content.IntentFilter: void <init>(java.lang.String)>("android.telephony.action.CARRIER_CONFIG_CHANGED");

        $r54 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r53 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.BroadcastReceiver mCarrierConfigReceiver>;

        $r52 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r54.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r53, r92, null, $r52);

        $r56 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r57 = virtualinvoke $r56.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/ConnectivityManager;");

        r93 = (android.net.ConnectivityManager) $r57;

        r94 = new android.net.NetworkRequest$Builder;

        specialinvoke r94.<android.net.NetworkRequest$Builder: void <init>()>();

        $r58 = virtualinvoke r94.<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()>();

        $r59 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.ConnectivityManager$NetworkCallback mNetworkCallback>;

        virtualinvoke r93.<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>($r58, $r59);

        r95 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.usage.AppStandbyInternal mAppStandby>;

        r96 = new com.android.server.net.NetworkPolicyManagerService$NetPolicyAppIdleStateChangeListener;

        specialinvoke r96.<com.android.server.net.NetworkPolicyManagerService$NetPolicyAppIdleStateChangeListener: void <init>(com.android.server.net.NetworkPolicyManagerService,com.android.server.net.NetworkPolicyManagerService$1)>(r0, null);

        interfaceinvoke r95.<com.android.server.usage.AppStandbyInternal: void addListener(com.android.server.usage.AppStandbyInternal$AppIdleStateChangeListener)>(r96);

        r97 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r97;

     label16:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForAppIdleParoleUL()>();

        exitmonitor r97;

     label17:
        $r60 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r61 = virtualinvoke $r60.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/SubscriptionManager;");

        r98 = (android.telephony.SubscriptionManager) $r61;

        r99 = new android.os.HandlerExecutor;

        $r62 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        specialinvoke r99.<android.os.HandlerExecutor: void <init>(android.os.Handler)>($r62);

        r100 = new com.android.server.net.NetworkPolicyManagerService$3;

        specialinvoke r100.<com.android.server.net.NetworkPolicyManagerService$3: void <init>(com.android.server.net.NetworkPolicyManagerService)>(r0);

        virtualinvoke r98.<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(java.util.concurrent.Executor,android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>(r99, r100);

        virtualinvoke r68.<java.util.concurrent.CountDownLatch: void countDown()>();

     label18:
        staticinvoke <android.os.Process: void setThreadPriority(int)>(i0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label19:
        $r66 := @caughtexception;

     label20:
        exitmonitor r97;

     label21:
        throw $r66;

     label22:
        $r65 := @caughtexception;

     label23:
        exitmonitor r70;

     label24:
        throw $r65;

     label25:
        $r63 := @caughtexception;

     label26:
        exitmonitor r69;

     label27:
        throw $r63;

     label28:
        $r64 := @caughtexception;

        staticinvoke <android.os.Process: void setThreadPriority(int)>(i0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r64;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label04 to label05 with label25;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label15 to label16 with label28;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label21 to label22 with label28;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label27 to label28 with label28;
    }

    private boolean isBandwidthControlEnabled()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0;
        boolean z0;
        android.os.INetworkManagementService $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        z0 = interfaceinvoke $r1.<android.os.INetworkManagementService: boolean isBandwidthControlEnabled()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean isRestrictedByAdminUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        java.util.Set r1;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;
        boolean $z0, z1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r1 = (java.util.Set) $r3;

        if r1 == null goto label1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isSystem(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 >= 10000 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isUidForegroundOnRestrictBackgroundUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        android.util.SparseIntArray $r1;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 19);

        $z0 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileOnRestrictBackground(int)>($i1);

        return $z0;
    }

    private boolean isUidForegroundOnRestrictPowerUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        android.util.SparseIntArray $r1;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 19);

        $z0 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int)>($i1);

        return $z0;
    }

    static boolean isUidNetworkingBlockedInternal(int, int, boolean, boolean, com.android.server.net.NetworkPolicyLogger)
    {
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7;
        com.android.server.net.NetworkPolicyLogger r0;
        java.lang.IllegalArgumentException $r1;
        byte b2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z6 := @parameter2: boolean;

        z0 := @parameter3: boolean;

        r0 := @parameter4: com.android.server.net.NetworkPolicyLogger;

        $z1 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean isSystem(int)>(i0);

        if $z1 == 0 goto label01;

        b2 = 7;

        goto label08;

     label01:
        $z2 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i1, 64);

        if $z2 == 0 goto label02;

        b2 = 0;

        goto label08;

     label02:
        if z6 != 0 goto label03;

        b2 = 1;

        goto label08;

     label03:
        $z3 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i1, 4);

        if $z3 == 0 goto label04;

        b2 = 2;

        goto label08;

     label04:
        $z4 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i1, 1);

        if $z4 == 0 goto label05;

        b2 = 3;

        goto label08;

     label05:
        $z5 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i1, 2);

        if $z5 == 0 goto label06;

        b2 = 4;

        goto label08;

     label06:
        if z0 == 0 goto label07;

        b2 = 5;

        goto label08;

     label07:
        b2 = 6;

     label08:
        tableswitch(b2)
        {
            case 0: goto label11;
            case 1: goto label10;
            case 2: goto label11;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label10;
            case 7: goto label10;
            default: goto label09;
        };

     label09:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label10:
        z7 = 0;

        goto label12;

     label11:
        z7 = 1;

     label12:
        if r0 == null goto label13;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyLogger: void networkBlocked(int,int)>(i0, b2);

     label13:
        return z7;
    }

    private boolean isUidStateForeground(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        if i0 > 5 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isUidValidForBlacklistRulesUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        if i0 == 1013 goto label2;

        if i0 == 1019 goto label2;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForWhitelistRulesUL(int)>(i0);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean isUidValidForWhitelistRulesUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean hasInternetPermissionUL(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isWhitelistedFromPowerSaveUL(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseBooleanArray $r1, $r2, $r3;
        boolean $z1, $z2, z3, z4, z5, z6, z7;
        int i0, i1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z3 := @parameter1: boolean;

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        z4 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int)>(i1);

        if z4 != 0 goto label2;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $z2 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z5 = 0;

        goto label3;

     label2:
        z5 = 1;

     label3:
        z6 = z5;

        if z3 != 0 goto label6;

        if z5 != 0 goto label4;

        z7 = 0;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $z1 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i1);

        if $z1 == 0 goto label5;

     label4:
        z7 = 1;

     label5:
        z6 = z7;

     label6:
        return z6;
    }

    static void lambda$updateNetworks$1(java.util.concurrent.CountDownLatch)
    {
        java.util.concurrent.CountDownLatch r0;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        virtualinvoke r0.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    private boolean maybeUpdateMobilePolicyCycleAL(int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1, i3;
        boolean $z0, $z1, $z2, z3, z4;
        android.net.NetworkIdentity $r1;
        android.util.ArrayMap $r2, $r3, $r6;
        java.lang.Object $r4, $r7;
        android.net.NetworkTemplate $r5;
        android.net.NetworkPolicy $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r9 := @parameter1: java.lang.String;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "maybeUpdateMobilePolicyCycleAL()");

     label1:
        z3 = 0;

        $r1 = new android.net.NetworkIdentity;

        specialinvoke $r1.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean,boolean,boolean)>(0, 0, r9, null, 0, 1, 1);

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        i3 = $i1 - 1;

     label2:
        if i3 < 0 goto label4;

        z4 = z3;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        $r5 = (android.net.NetworkTemplate) $r4;

        $z1 = virtualinvoke $r5.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>($r1);

        if $z1 == 0 goto label3;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r8 = (android.net.NetworkPolicy) $r7;

        $z2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean updateDefaultMobilePolicyAL(int,android.net.NetworkPolicy)>(i0, $r8);

        z4 = z3 | $z2;

     label3:
        i3 = i3 + -1;

        z3 = z4;

        goto label2;

     label4:
        return z3;
    }

    private void normalizePoliciesNL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.net.NetworkPolicy[] $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getOpPackageName()>();

        $r3 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>($r2);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void normalizePoliciesNL(android.net.NetworkPolicy[])>($r3);

        return;
    }

    private void normalizePoliciesNL(android.net.NetworkPolicy[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy[] r1;
        int i0, $i2, i3;
        android.net.NetworkPolicy r2, r3;
        android.util.ArrayMap $r5, $r10, $r13;
        java.util.List $r6;
        android.net.NetworkTemplate $r7, $r8, $r9, $r12;
        java.lang.Object $r11;
        java.lang.StringBuilder $r15;
        java.lang.String $r20;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy[];

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        virtualinvoke $r5.<android.util.ArrayMap: void clear()>();

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        r2 = r1[i3];

        if r2 != null goto label2;

        goto label5;

     label2:
        $r7 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.List mMergedSubscriberIds>;

        $r8 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate normalize(android.net.NetworkTemplate,java.util.List)>($r7, $r6);

        r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template> = $r8;

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r9 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r9);

        r3 = (android.net.NetworkPolicy) $r11;

        if r3 == null goto label3;

        $i2 = virtualinvoke r3.<android.net.NetworkPolicy: int compareTo(android.net.NetworkPolicy)>(r2);

        if $i2 <= 0 goto label5;

     label3:
        if r3 == null goto label4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Normalization replaced ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r20);

     label4:
        $r13 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r12 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r2);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        return;
    }

    private void notifyOverLimitNL(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        android.content.Context r2;
        android.util.ArraySet $r3, $r6;
        boolean $z0;
        android.content.res.Resources $r4;
        android.content.Intent $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified>;

        $z0 = virtualinvoke $r3.<android.util.ArraySet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildNetworkOverLimitIntent(android.content.res.Resources,android.net.NetworkTemplate)>($r4, r1);

        virtualinvoke r2.<android.content.Context: void startActivity(android.content.Intent)>($r5);

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified>;

        virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void notifyUnderLimitNL(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        android.util.ArraySet $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mOverLimitNotified>;

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void onUidDeletedUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        android.util.SparseIntArray $r1, $r2, $r3, $r4, $r5;
        android.util.SparseBooleanArray $r6, $r7, $r8, $r9;
        android.os.Handler $r10;
        android.os.Message $r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r1.<android.util.SparseIntArray: void delete(int)>(i0);

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r2.<android.util.SparseIntArray: void delete(int)>(i0);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        virtualinvoke $r3.<android.util.SparseIntArray: void delete(int)>(i0);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallDozableRules>;

        virtualinvoke $r4.<android.util.SparseIntArray: void delete(int)>(i0);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallPowerSaveRules>;

        virtualinvoke $r5.<android.util.SparseIntArray: void delete(int)>(i0);

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        virtualinvoke $r6.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        virtualinvoke $r7.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        virtualinvoke $r8.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        virtualinvoke $r9.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(15, i0, 0);

        virtualinvoke $r11.<android.os.Message: void sendToTarget()>();

        return;
    }

    private int parseSubId(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkCapabilities $r1, $r2, $r3;
        boolean $z0, $z1;
        android.net.TelephonyNetworkSpecifier $r4;
        android.net.NetworkState r5;
        int i1;
        android.net.NetworkSpecifier r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r5 := @parameter0: android.net.NetworkState;

        i1 = -1;

        if r5 == null goto label1;

        i1 = -1;

        $r1 = r5.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        if $r1 == null goto label1;

        i1 = -1;

        $r2 = r5.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = virtualinvoke $r2.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 == 0 goto label1;

        $r3 = r5.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        r6 = virtualinvoke $r3.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        i1 = -1;

        $z1 = r6 instanceof android.net.TelephonyNetworkSpecifier;

        if $z1 == 0 goto label1;

        $r4 = (android.net.TelephonyNetworkSpecifier) r6;

        i1 = virtualinvoke $r4.<android.net.TelephonyNetworkSpecifier: int getSubscriptionId()>();

     label1:
        return i1;
    }

    private void readPolicyAL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r3, $r10, $r14, $r18, $r20, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r40, $r44, $r48, $r50, r75, r76, r77, r78, r80, r85, r86, r87, r96;
        long l0, l1, l17, l18, l19, l21, l22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z16, z17, z18, z19, z20;
        android.util.ArrayMap $r4, r82;
        android.util.SparseArray $r5, $r6, $r90, $r91, $r97;
        android.util.SparseIntArray $r7, $r11;
        android.util.AtomicFile $r8;
        java.nio.charset.Charset $r9;
        int $i2, $i6, i13, i14, i15, i16, i20, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35;
        android.util.SparseBooleanArray $r36, r74, r84;
        java.time.ZonedDateTime $r45, $r46, $r56, $r57;
        java.time.Period $r47, $r58;
        byte $b9, $b10, $b23;
        java.time.ZoneId $r54;
        java.lang.Throwable $r59, $r60, $r61, $r63, $r65, $r67, r104;
        java.lang.Exception $r62, $r64, $r66, r105;
        java.io.FileInputStream r68, r69, r70, r71, r72, r73;
        android.util.RecurrenceRule r79;
        android.net.NetworkTemplate r81;
        android.net.NetworkPolicy r83;
        android.telephony.SubscriptionPlan$Builder r88;
        android.telephony.SubscriptionPlan r89;
        java.lang.Object $r92;
        android.telephony.SubscriptionPlan[] $r93, $r95;
        java.lang.Object[] $r94;
        java.lang.StringBuilder r98, r99, r100, r101, r102;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z0 == 0 goto label001;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "readPolicyAL()");

     label001:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        virtualinvoke $r4.<android.util.ArrayMap: void clear()>();

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        virtualinvoke $r5.<android.util.SparseArray: void clear()>();

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner>;

        virtualinvoke $r6.<android.util.SparseArray: void clear()>();

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r7.<android.util.SparseIntArray: void clear()>();

        r68 = null;

        r69 = null;

        r70 = null;

     label002:
        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        r71 = virtualinvoke $r8.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label003:
        r70 = r71;

        r72 = r71;

        r73 = r71;

     label004:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label005:
        r70 = r71;

        r72 = r71;

        r73 = r71;

     label006:
        $r9 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r10 = virtualinvoke $r9.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r71, $r10);

     label007:
        r70 = r71;

        r72 = r71;

        r73 = r71;

     label008:
        r74 = new android.util.SparseBooleanArray;

     label009:
        r70 = r71;

        r72 = r71;

        r73 = r71;

     label010:
        specialinvoke r74.<android.util.SparseBooleanArray: void <init>()>();

     label011:
        i13 = 1;

        z13 = 0;

     label012:
        r70 = r71;

        r72 = r71;

        r73 = r71;

     label013:
        i14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

     label014:
        if i14 == 1 goto label106;

        r70 = r71;

        r72 = r71;

        r73 = r71;

     label015:
        r75 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label016:
        if i14 != 2 goto label101;

        r70 = r71;

        r72 = r71;

        r73 = r71;

     label017:
        $r28 = "policy-list";

        z14 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>(r75);

     label018:
        if z14 == 0 goto label028;

        r70 = r71;

        r68 = r71;

        r69 = r71;

     label019:
        r70 = r71;

        r68 = r71;

        r69 = r71;

     label020:
        i13 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "version");

     label021:
        if i13 < 3 goto label024;

        r70 = r71;

        r68 = r71;

        r69 = r71;

     label022:
        $z12 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "restrictBackground");

        if $z12 == 0 goto label024;

     label023:
        z16 = 1;

        goto label025;

     label024:
        z16 = 0;

     label025:
        r70 = r71;

        r68 = r71;

        r69 = r71;

     label026:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground> = z16;

     label027:
        goto label105;

     label028:
        r70 = r71;

        r72 = r71;

        r73 = r71;

     label029:
        $r29 = "network-policy";

        z17 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>(r75);

     label030:
        if z17 == 0 goto label070;

        r70 = r71;

        r72 = r71;

        r73 = r71;

     label031:
        i15 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "networkTemplate");

     label032:
        r76 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "subscriberId");

     label033:
        if i13 < 9 goto label036;

     label034:
        r77 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "networkId");

     label035:
        goto label037;

     label036:
        r77 = null;

     label037:
        if i13 < 11 goto label040;

     label038:
        r78 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cycleStart");

        r2 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cycleEnd");

        r3 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cyclePeriod");

        r79 = new android.util.RecurrenceRule;

        $r56 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>(r78);

        $r57 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>(r2);

        $r58 = staticinvoke <android.util.RecurrenceRule: java.time.Period convertPeriod(java.lang.String)>(r3);

        specialinvoke r79.<android.util.RecurrenceRule: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>($r56, $r57, $r58);

     label039:
        goto label046;

     label040:
        i16 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cycleDay");

     label041:
        if i13 < 6 goto label044;

     label042:
        r80 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "cycleTimezone");

     label043:
        goto label045;

     label044:
        r80 = "UTC";

     label045:
        $r54 = staticinvoke <java.time.ZoneId: java.time.ZoneId of(java.lang.String)>(r80);

        r79 = staticinvoke <android.net.NetworkPolicy: android.util.RecurrenceRule buildRule(int,java.time.ZoneId)>(i16, $r54);

     label046:
        l0 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "warningBytes");

        l1 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "limitBytes");

     label047:
        if i13 < 5 goto label050;

     label048:
        l17 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "lastLimitSnooze");

     label049:
        goto label054;

     label050:
        if i13 < 2 goto label053;

     label051:
        l17 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "lastSnooze");

     label052:
        goto label054;

     label053:
        l17 = -1L;

     label054:
        if i13 < 4 goto label057;

     label055:
        z18 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "metered");

     label056:
        goto label059;

     label057:
        if i15 == 1 goto label058;

        z18 = 0;

        goto label059;

     label058:
        z18 = 1;

     label059:
        if i13 < 5 goto label062;

     label060:
        l18 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "lastWarningSnooze");

     label061:
        goto label063;

     label062:
        l18 = -1L;

     label063:
        if i13 < 7 goto label066;

     label064:
        z19 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "inferred");

     label065:
        goto label067;

     label066:
        z19 = 0;

     label067:
        r81 = new android.net.NetworkTemplate;

        specialinvoke r81.<android.net.NetworkTemplate: void <init>(int,java.lang.String,java.lang.String)>(i15, r76, r77);

        $z11 = virtualinvoke r81.<android.net.NetworkTemplate: boolean isPersistable()>();

        if $z11 == 0 goto label069;

        r82 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        r83 = new android.net.NetworkPolicy;

        specialinvoke r83.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,boolean,boolean)>(r81, r79, l0, l1, l18, l17, z18, z19);

        virtualinvoke r82.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r81, r83);

     label068:
        goto label069;

     label069:
        r84 = r74;

        goto label104;

     label070:
        $r30 = "subscription-plan";

        $z4 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z4 == 0 goto label079;

        r85 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cycleStart");

        r86 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cycleEnd");

        r87 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "cyclePeriod");

        r88 = new android.telephony.SubscriptionPlan$Builder;

        $r45 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>(r85);

        $r46 = staticinvoke <android.util.RecurrenceRule: java.time.ZonedDateTime convertZonedDateTime(java.lang.String)>(r86);

        $r47 = staticinvoke <android.util.RecurrenceRule: java.time.Period convertPeriod(java.lang.String)>(r87);

        specialinvoke r88.<android.telephony.SubscriptionPlan$Builder: void <init>(java.time.ZonedDateTime,java.time.ZonedDateTime,java.time.Period)>($r45, $r46, $r47);

        $r48 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "title");

        virtualinvoke r88.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>($r48);

        $r50 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "summary");

        virtualinvoke r88.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setSummary(java.lang.CharSequence)>($r50);

        l19 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "limitBytes", -1L);

        i20 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "limitBehavior", -1);

     label071:
        $b9 = l19 cmp -1L;

        if $b9 == 0 goto label073;

        if i20 == -1 goto label073;

     label072:
        virtualinvoke r88.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(l19, i20);

     label073:
        l21 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "usageBytes", -1L);

        l22 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "usageTime", -1L);

     label074:
        $b23 = l21 cmp -1L;

        if $b23 == 0 goto label077;

        $b10 = l22 cmp -1L;

        if $b10 == 0 goto label077;

     label075:
        virtualinvoke r88.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(l21, l22);

     label076:
        goto label077;

     label077:
        i24 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "subId");

        r89 = virtualinvoke r88.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        $r90 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r91 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r92 = virtualinvoke $r91.<android.util.SparseArray: java.lang.Object get(int)>(i24);

        $r93 = (android.telephony.SubscriptionPlan[]) $r92;

        $r94 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] appendElement(java.lang.Class,java.lang.Object[],java.lang.Object)>(class "Landroid/telephony/SubscriptionPlan;", $r93, r89);

        $r95 = (android.telephony.SubscriptionPlan[]) $r94;

        virtualinvoke $r90.<android.util.SparseArray: void put(int,java.lang.Object)>(i24, $r95);

        r96 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "ownerPackage");

        $r97 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner>;

        virtualinvoke $r97.<android.util.SparseArray: void put(int,java.lang.Object)>(i24, r96);

     label078:
        r84 = r74;

        goto label104;

     label079:
        $r31 = "uid-policy";

        z20 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r75);

     label080:
        if z20 == 0 goto label085;

     label081:
        i25 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "uid");

        i26 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "policy");

        $z10 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i25);

        if $z10 == 0 goto label083;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,boolean)>(i25, i26, 0);

     label082:
        goto label084;

     label083:
        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to apply policy to UID ");

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i25);

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r44 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r44);

     label084:
        r84 = r74;

        goto label104;

     label085:
        $r32 = "app-policy";

        $z5 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z5 == 0 goto label089;

        i27 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "appId");

        i28 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "policy");

        i29 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(0, i27);

        $z9 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i29);

        if $z9 == 0 goto label087;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,boolean)>(i29, i28, 0);

     label086:
        goto label088;

     label087:
        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to apply policy to UID ");

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring");

        $r40 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r40);

     label088:
        r84 = r74;

        goto label104;

     label089:
        $r33 = "whitelist";

        $z6 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z6 == 0 goto label091;

     label090:
        z13 = 1;

        goto label105;

     label091:
        $r34 = "restrict-background";

        $z7 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z7 == 0 goto label095;

     label092:
        if z13 == 0 goto label095;

     label093:
        $i6 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "uid");

        virtualinvoke r74.<android.util.SparseBooleanArray: void append(int,boolean)>($i6, 1);

     label094:
        goto label100;

     label095:
        r84 = r74;

     label096:
        $r35 = "revoked-restrict-background";

        $z8 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z8 == 0 goto label100;

     label097:
        if z13 == 0 goto label100;

     label098:
        i30 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "uid");

        $r36 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        virtualinvoke $r36.<android.util.SparseBooleanArray: void put(int,boolean)>(i30, 1);

     label099:
        goto label104;

     label100:
        r84 = r74;

        goto label104;

     label101:
        r84 = r74;

        if i14 != 3 goto label104;

        r84 = r74;

     label102:
        $r27 = "whitelist";

        $z3 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z3 == 0 goto label104;

     label103:
        z13 = 0;

        goto label105;

     label104:
        r74 = r84;

     label105:
        goto label012;

     label106:
        i31 = virtualinvoke r74.<android.util.SparseBooleanArray: int size()>();

     label107:
        i32 = 0;

     label108:
        if i32 >= i31 goto label120;

     label109:
        i33 = virtualinvoke r74.<android.util.SparseBooleanArray: int keyAt(int)>(i32);

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i34 = virtualinvoke $r11.<android.util.SparseIntArray: int get(int,int)>(i33, 0);

     label110:
        $i2 = i34 & 1;

        if $i2 == 0 goto label113;

     label111:
        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ignoring restrict-background-whitelist for ");

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i33);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because its policy is ");

        $r24 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidPoliciesToString(int)>(i34);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r26);

     label112:
        goto label119;

     label113:
        $z1 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i33);

        if $z1 == 0 goto label118;

     label114:
        i35 = i34 | 4;

     label115:
        $z2 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z2 == 0 goto label116;

        r101 = new java.lang.StringBuilder;

        specialinvoke r101.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new policy for ");

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i33);

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r18 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidPoliciesToString(int)>(i35);

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke r101.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r20);

     label116:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,boolean)>(i33, i35, 0);

     label117:
        goto label119;

     label118:
        r102 = new java.lang.StringBuilder;

        specialinvoke r102.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to update policy on UID ");

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i33);

        $r14 = virtualinvoke r102.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r14);

     label119:
        i32 = i32 + 1;

        goto label108;

     label120:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r71);

        goto label136;

     label121:
        $r63 := @caughtexception;

        r70 = r71;

        r104 = $r63;

        goto label137;

     label122:
        $r62 := @caughtexception;

        r105 = $r62;

        goto label129;

     label123:
        $r59 := @caughtexception;

        goto label133;

     label124:
        $r60 := @caughtexception;

        r104 = $r60;

        goto label137;

     label125:
        $r66 := @caughtexception;

        r105 = $r66;

        r71 = r72;

        goto label129;

     label126:
        $r67 := @caughtexception;

        r71 = r73;

        goto label133;

     label127:
        $r61 := @caughtexception;

        r104 = $r61;

        goto label137;

     label128:
        $r64 := @caughtexception;

        r105 = $r64;

        r71 = r68;

     label129:
        r70 = r71;

     label130:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem reading network policy", r105);

     label131:
        goto label135;

     label132:
        $r65 := @caughtexception;

        r71 = r69;

     label133:
        r70 = r71;

     label134:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void upgradeDefaultBackgroundDataUL()>();

     label135:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r71);

     label136:
        return;

     label137:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r70);

        throw r104;

        catch java.io.FileNotFoundException from label002 to label003 with label132;
        catch java.lang.Exception from label002 to label003 with label128;
        catch java.lang.Throwable from label002 to label003 with label127;
        catch java.io.FileNotFoundException from label004 to label005 with label126;
        catch java.lang.Exception from label004 to label005 with label125;
        catch java.lang.Throwable from label004 to label005 with label124;
        catch java.io.FileNotFoundException from label006 to label007 with label126;
        catch java.lang.Exception from label006 to label007 with label125;
        catch java.lang.Throwable from label006 to label007 with label124;
        catch java.io.FileNotFoundException from label008 to label009 with label126;
        catch java.lang.Exception from label008 to label009 with label125;
        catch java.lang.Throwable from label008 to label009 with label124;
        catch java.io.FileNotFoundException from label010 to label011 with label126;
        catch java.lang.Exception from label010 to label011 with label125;
        catch java.lang.Throwable from label010 to label011 with label124;
        catch java.io.FileNotFoundException from label013 to label014 with label126;
        catch java.lang.Exception from label013 to label014 with label125;
        catch java.lang.Throwable from label013 to label014 with label124;
        catch java.io.FileNotFoundException from label015 to label016 with label126;
        catch java.lang.Exception from label015 to label016 with label125;
        catch java.lang.Throwable from label015 to label016 with label124;
        catch java.io.FileNotFoundException from label017 to label018 with label126;
        catch java.lang.Exception from label017 to label018 with label125;
        catch java.lang.Throwable from label017 to label018 with label124;
        catch java.io.FileNotFoundException from label019 to label019 with label132;
        catch java.lang.Exception from label019 to label019 with label128;
        catch java.lang.Throwable from label019 to label019 with label127;
        catch java.io.FileNotFoundException from label020 to label021 with label132;
        catch java.lang.Exception from label020 to label021 with label128;
        catch java.lang.Throwable from label020 to label021 with label127;
        catch java.io.FileNotFoundException from label022 to label023 with label132;
        catch java.lang.Exception from label022 to label023 with label128;
        catch java.lang.Throwable from label022 to label023 with label127;
        catch java.io.FileNotFoundException from label026 to label027 with label132;
        catch java.lang.Exception from label026 to label027 with label128;
        catch java.lang.Throwable from label026 to label027 with label127;
        catch java.io.FileNotFoundException from label029 to label030 with label126;
        catch java.lang.Exception from label029 to label030 with label125;
        catch java.lang.Throwable from label029 to label030 with label124;
        catch java.io.FileNotFoundException from label031 to label032 with label126;
        catch java.lang.Exception from label031 to label032 with label125;
        catch java.lang.Throwable from label031 to label032 with label124;
        catch java.io.FileNotFoundException from label032 to label033 with label123;
        catch java.lang.Exception from label032 to label033 with label122;
        catch java.lang.Throwable from label032 to label033 with label121;
        catch java.io.FileNotFoundException from label034 to label035 with label123;
        catch java.lang.Exception from label034 to label035 with label122;
        catch java.lang.Throwable from label034 to label035 with label121;
        catch java.io.FileNotFoundException from label038 to label039 with label123;
        catch java.lang.Exception from label038 to label039 with label122;
        catch java.lang.Throwable from label038 to label039 with label121;
        catch java.io.FileNotFoundException from label040 to label041 with label123;
        catch java.lang.Exception from label040 to label041 with label122;
        catch java.lang.Throwable from label040 to label041 with label121;
        catch java.io.FileNotFoundException from label042 to label043 with label123;
        catch java.lang.Exception from label042 to label043 with label122;
        catch java.lang.Throwable from label042 to label043 with label121;
        catch java.io.FileNotFoundException from label045 to label046 with label123;
        catch java.lang.Exception from label045 to label046 with label122;
        catch java.lang.Throwable from label045 to label046 with label121;
        catch java.io.FileNotFoundException from label046 to label047 with label123;
        catch java.lang.Exception from label046 to label047 with label122;
        catch java.lang.Throwable from label046 to label047 with label121;
        catch java.io.FileNotFoundException from label048 to label049 with label123;
        catch java.lang.Exception from label048 to label049 with label122;
        catch java.lang.Throwable from label048 to label049 with label121;
        catch java.io.FileNotFoundException from label051 to label052 with label123;
        catch java.lang.Exception from label051 to label052 with label122;
        catch java.lang.Throwable from label051 to label052 with label121;
        catch java.io.FileNotFoundException from label055 to label056 with label123;
        catch java.lang.Exception from label055 to label056 with label122;
        catch java.lang.Throwable from label055 to label056 with label121;
        catch java.io.FileNotFoundException from label060 to label061 with label123;
        catch java.lang.Exception from label060 to label061 with label122;
        catch java.lang.Throwable from label060 to label061 with label121;
        catch java.io.FileNotFoundException from label064 to label065 with label123;
        catch java.lang.Exception from label064 to label065 with label122;
        catch java.lang.Throwable from label064 to label065 with label121;
        catch java.io.FileNotFoundException from label067 to label068 with label123;
        catch java.lang.Exception from label067 to label068 with label122;
        catch java.lang.Throwable from label067 to label068 with label121;
        catch java.io.FileNotFoundException from label070 to label071 with label123;
        catch java.lang.Exception from label070 to label071 with label122;
        catch java.lang.Throwable from label070 to label071 with label121;
        catch java.io.FileNotFoundException from label072 to label073 with label123;
        catch java.lang.Exception from label072 to label073 with label122;
        catch java.lang.Throwable from label072 to label073 with label121;
        catch java.io.FileNotFoundException from label073 to label074 with label123;
        catch java.lang.Exception from label073 to label074 with label122;
        catch java.lang.Throwable from label073 to label074 with label121;
        catch java.io.FileNotFoundException from label075 to label076 with label123;
        catch java.lang.Exception from label075 to label076 with label122;
        catch java.lang.Throwable from label075 to label076 with label121;
        catch java.io.FileNotFoundException from label077 to label078 with label123;
        catch java.lang.Exception from label077 to label078 with label122;
        catch java.lang.Throwable from label077 to label078 with label121;
        catch java.io.FileNotFoundException from label079 to label080 with label123;
        catch java.lang.Exception from label079 to label080 with label122;
        catch java.lang.Throwable from label079 to label080 with label121;
        catch java.io.FileNotFoundException from label081 to label082 with label123;
        catch java.lang.Exception from label081 to label082 with label122;
        catch java.lang.Throwable from label081 to label082 with label121;
        catch java.io.FileNotFoundException from label083 to label084 with label123;
        catch java.lang.Exception from label083 to label084 with label122;
        catch java.lang.Throwable from label083 to label084 with label121;
        catch java.io.FileNotFoundException from label085 to label086 with label123;
        catch java.lang.Exception from label085 to label086 with label122;
        catch java.lang.Throwable from label085 to label086 with label121;
        catch java.io.FileNotFoundException from label087 to label088 with label123;
        catch java.lang.Exception from label087 to label088 with label122;
        catch java.lang.Throwable from label087 to label088 with label121;
        catch java.io.FileNotFoundException from label089 to label090 with label123;
        catch java.lang.Exception from label089 to label090 with label122;
        catch java.lang.Throwable from label089 to label090 with label121;
        catch java.io.FileNotFoundException from label091 to label092 with label123;
        catch java.lang.Exception from label091 to label092 with label122;
        catch java.lang.Throwable from label091 to label092 with label121;
        catch java.io.FileNotFoundException from label093 to label094 with label123;
        catch java.lang.Exception from label093 to label094 with label122;
        catch java.lang.Throwable from label093 to label094 with label121;
        catch java.io.FileNotFoundException from label096 to label097 with label123;
        catch java.lang.Exception from label096 to label097 with label122;
        catch java.lang.Throwable from label096 to label097 with label121;
        catch java.io.FileNotFoundException from label098 to label099 with label123;
        catch java.lang.Exception from label098 to label099 with label122;
        catch java.lang.Throwable from label098 to label099 with label121;
        catch java.io.FileNotFoundException from label102 to label103 with label123;
        catch java.lang.Exception from label102 to label103 with label122;
        catch java.lang.Throwable from label102 to label103 with label121;
        catch java.io.FileNotFoundException from label106 to label107 with label123;
        catch java.lang.Exception from label106 to label107 with label122;
        catch java.lang.Throwable from label106 to label107 with label121;
        catch java.io.FileNotFoundException from label109 to label110 with label123;
        catch java.lang.Exception from label109 to label110 with label122;
        catch java.lang.Throwable from label109 to label110 with label121;
        catch java.io.FileNotFoundException from label111 to label112 with label123;
        catch java.lang.Exception from label111 to label112 with label122;
        catch java.lang.Throwable from label111 to label112 with label121;
        catch java.io.FileNotFoundException from label113 to label114 with label123;
        catch java.lang.Exception from label113 to label114 with label122;
        catch java.lang.Throwable from label113 to label114 with label121;
        catch java.io.FileNotFoundException from label115 to label116 with label123;
        catch java.lang.Exception from label115 to label116 with label122;
        catch java.lang.Throwable from label115 to label116 with label121;
        catch java.io.FileNotFoundException from label116 to label117 with label123;
        catch java.lang.Exception from label116 to label117 with label122;
        catch java.lang.Throwable from label116 to label117 with label121;
        catch java.io.FileNotFoundException from label118 to label119 with label123;
        catch java.lang.Exception from label118 to label119 with label122;
        catch java.lang.Throwable from label118 to label119 with label121;
        catch java.lang.Throwable from label130 to label131 with label127;
        catch java.lang.Throwable from label134 to label135 with label127;
    }

    private void removeInterfaceQuota(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.INetworkManagementService $r1;
        android.os.RemoteException $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r1.<android.os.INetworkManagementService: void removeInterfaceQuota(java.lang.String)>(r4);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        goto label5;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem removing interface quota", $r3);

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void removeInterfaceQuotaAsync(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(11, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private boolean removeUidStateUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        android.util.SparseIntArray $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i1 = virtualinvoke $r1.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if i1 < 0 goto label3;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i2 = virtualinvoke $r2.<android.util.SparseIntArray: int valueAt(int)>(i1);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        virtualinvoke $r3.<android.util.SparseIntArray: void removeAt(int)>(i1);

        if i2 == 19 goto label3;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRestrictBackgroundRulesOnUidStatusChangedUL(int,int,int)>(i0, i2, 19);

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForDeviceIdleUL(int)>(i0);

     label1:
        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForRestrictPowerUL(int)>(i0);

     label2:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i0);

        return 1;

     label3:
        return 0;
    }

    private void resetUidFirewallRules(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        android.os.INetworkManagementService $r2, $r3, $r4, $r5, $r6;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r12;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setFirewallUidRule(int,int,int)>(1, i0, 0);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void setFirewallUidRule(int,int,int)>(2, i0, 0);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r4.<android.os.INetworkManagementService: void setFirewallUidRule(int,int,int)>(3, i0, 0);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r5.<android.os.INetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>(i0, 0);

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r6.<android.os.INetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>(i0, 0);

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem resetting firewall uid rules for ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", $r12, $r8);

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void sendRestrictBackgroundChangedMsg()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.Handler $r1, $r2;
        boolean $z0;
        android.os.Message $r3;
        int i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(6);

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        i0 = (int) $z0;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(6, i0, 0);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void setInterfaceQuota(java.lang.String, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0;
        android.os.INetworkManagementService $r1;
        java.lang.Throwable $r2;
        android.os.RemoteException $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r4 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

     label1:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r1.<android.os.INetworkManagementService: void setInterfaceQuota(java.lang.String,long)>(r4, l0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting interface quota", $r2);

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setInterfaceQuotaAsync(java.lang.String, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.String r1;
        long l0, $l1, $l2;
        int $i3, $i4;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $l1 = l0 >> 32;

        $i4 = (int) $l1;

        $l2 = -1L & l0;

        $i3 = (int) $l2;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(10, $i4, $i3, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void setMeteredNetworkBlacklist(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0, $z1;
        android.os.INetworkManagementService $r2;
        java.lang.StringBuilder $r3, $r11;
        java.lang.String $r8, $r16;
        android.os.RemoteException $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z1 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMeteredNetworkBlacklist ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r8);

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem setting blacklist (");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") rules for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", $r16, $r10);

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setMeteredNetworkWhitelist(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0, $z1;
        android.os.INetworkManagementService $r2;
        java.lang.StringBuilder $r3, $r11;
        java.lang.String $r8, $r16;
        android.os.RemoteException $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z1 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMeteredNetworkWhitelist ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r8);

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>(i0, z0);

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem setting whitelist (");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") rules for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", $r16, $r10);

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setMeteredRestrictedPackagesInternal(java.util.Set, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r4, $r7;
        android.util.ArraySet r2;
        boolean $z0;
        android.util.SparseArray $r3, $r5;
        com.android.server.net.NetworkPolicyLogger $r6;
        java.lang.String $r8;
        java.lang.Integer $r9;
        java.lang.Throwable $r10;
        java.util.Set r11, r13;
        java.util.Iterator r12;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r11 := @parameter0: java.util.Set;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        r2 = new android.util.ArraySet;

        specialinvoke r2.<android.util.ArraySet: void <init>()>();

        r12 = interfaceinvoke r11.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getUidForPackage(java.lang.String,int)>($r8, i0);

     label03:
        if i1 < 0 goto label05;

     label04:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label05:
        goto label02;

     label06:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r13 = (java.util.Set) $r4;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r2);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void handleRestrictedPackagesChangeUL(java.util.Set,java.util.Set)>(r13, r2);

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r6.<com.android.server.net.NetworkPolicyLogger: void meteredRestrictedPkgsChanged(java.util.Set)>(r2);

        exitmonitor r1;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void setNetworkTemplateEnabled(android.net.NetworkTemplate, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r1;
        boolean z0;
        android.os.Handler $r2;
        android.os.Message $r3;
        int i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkTemplate;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        i0 = (int) z0;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(18, i0, 0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void setNetworkTemplateEnabledInner(android.net.NetworkTemplate, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, $z1;
        java.lang.Object r2, $r8, $r12;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String r3;
        android.net.NetworkIdentity r4;
        android.util.IntArray $r5;
        android.util.SparseArray $r6, $r10, $r11;
        android.content.Context $r7;
        android.telephony.TelephonyManager $r9, r15;
        java.lang.Throwable $r13;
        android.net.NetworkTemplate r14;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r14 := @parameter0: android.net.NetworkTemplate;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r14.<android.net.NetworkTemplate: int getMatchRule()>();

        if $i1 != 1 goto label9;

        $r5 = new android.util.IntArray;

        specialinvoke $r5.<android.util.IntArray: void <init>()>();

        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r2;

        i5 = 0;

     label1:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $i2 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        if i5 >= $i2 goto label3;

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        i0 = virtualinvoke $r10.<android.util.SparseArray: int keyAt(int)>(i5);

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r3 = (java.lang.String) $r12;

        r4 = new android.net.NetworkIdentity;

        specialinvoke r4.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean,boolean,boolean)>(0, 0, r3, null, 0, 1, 1);

        $z1 = virtualinvoke r14.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>(r4);

        if $z1 == 0 goto label2;

        virtualinvoke $r5.<android.util.IntArray: void add(int)>(i0);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        exitmonitor r2;

     label4:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r15 = (android.telephony.TelephonyManager) $r8;

        i6 = 0;

     label5:
        $i3 = virtualinvoke $r5.<android.util.IntArray: int size()>();

        if i6 >= $i3 goto label9;

        $i4 = virtualinvoke $r5.<android.util.IntArray: int get(int)>(i6);

        $r9 = virtualinvoke r15.<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>($i4);

        virtualinvoke $r9.<android.telephony.TelephonyManager: void setPolicyDataEnabled(boolean)>(z0);

        i6 = i6 + 1;

        goto label5;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r13;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void setRestrictBackgroundUL(boolean, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r5, $r10, $r13, r17;
        android.os.INetworkManagementService $r6;
        com.android.server.net.NetworkPolicyLogger $r7;
        java.lang.Throwable $r14, $r15;
        android.os.RemoteException $r16;
        java.lang.StringBuilder r18, r19, r20;
        java.lang.Object r22;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        r17 := @parameter1: java.lang.String;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "setRestrictBackgroundUL");

     label01:
        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if z0 != $z2 goto label03;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setRestrictBackgroundUL: already ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r13);

     label02:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label03:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setRestrictBackgroundUL(): ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; reason: ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r5 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r5);

        z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = z0;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictBackgroundUL()>();

     label04:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        $z4 = interfaceinvoke $r6.<android.os.INetworkManagementService: boolean setDataSaverModeEnabled(boolean)>($z3);

        if $z4 != 0 goto label06;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not change Data Saver Mode on NMS to ");

        $z7 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r10 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkPolicy", $r10);

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground> = z1;

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label06:
        goto label08;

     label07:
        $r16 := @caughtexception;

     label08:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void sendRestrictBackgroundChangedMsg()>();

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        $z5 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        virtualinvoke $r7.<com.android.server.net.NetworkPolicyLogger: void restrictBackgroundChanged(boolean,boolean)>(z1, $z5);

        $z6 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode>;

        if $z6 == 0 goto label09;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundChangedInBsm> = 1;

     label09:
        r22 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r22;

     label10:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

        exitmonitor r22;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label12:
        $r15 := @caughtexception;

     label13:
        exitmonitor r22;

     label14:
        throw $r15;

     label15:
        $r14 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    private void setUidFirewallRule(int, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        boolean $z0;
        android.util.SparseIntArray $r1, $r2, $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r11;
        java.lang.Throwable $r12, $r14;
        android.os.RemoteException $r13;
        android.os.INetworkManagementService $r17;
        com.android.server.net.NetworkPolicyLogger $r18;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z0 == 0 goto label01;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setUidFirewallRule: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r11);

     label01:
        if i0 != 1 goto label05;

     label02:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallDozableRules>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i1, i2);

     label03:
        goto label10;

     label04:
        $r14 := @caughtexception;

        goto label16;

     label05:
        if i0 != 2 goto label08;

     label06:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i1, i2);

     label07:
        goto label10;

     label08:
        if i0 != 3 goto label10;

     label09:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallPowerSaveRules>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(i1, i2);

     label10:
        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r17.<android.os.INetworkManagementService: void setFirewallUidRule(int,int,int)>(i0, i1, i2);

        $r18 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r18.<com.android.server.net.NetworkPolicyLogger: void uidFirewallRuleChanged(int,int,int)>(i0, i1, i2);

     label11:
        goto label15;

     label12:
        $r13 := @caughtexception;

        goto label15;

     label13:
        $r12 := @caughtexception;

     label14:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting firewall uid rules", $r12);

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label16:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.IllegalStateException from label10 to label11 with label13;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
    }

    private void setUidFirewallRulesUL(int, android.util.SparseIntArray)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1, $i2, i4, i5;
        int[] r1, r2;
        android.os.INetworkManagementService $r3;
        com.android.server.net.NetworkPolicyLogger $r4;
        android.os.RemoteException $r5;
        java.lang.Throwable $r6;
        android.util.SparseIntArray r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r7 := @parameter1: android.util.SparseIntArray;

     label01:
        i4 = virtualinvoke r7.<android.util.SparseIntArray: int size()>();

        r1 = newarray (int)[i4];

        r2 = newarray (int)[i4];

     label02:
        i5 = i4 + -1;

     label03:
        if i5 < 0 goto label06;

     label04:
        $i1 = virtualinvoke r7.<android.util.SparseIntArray: int keyAt(int)>(i5);

        r1[i5] = $i1;

        $i2 = virtualinvoke r7.<android.util.SparseIntArray: int valueAt(int)>(i5);

        r2[i5] = $i2;

     label05:
        i5 = i5 + -1;

        goto label03;

     label06:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.INetworkManagementService mNetworkManager>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void setFirewallUidRules(int,int[],int[])>(i0, r1, r2);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r4.<com.android.server.net.NetworkPolicyLogger: void firewallRulesChanged(int,int[],int[])>(i0, r1, r2);

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

        goto label10;

     label09:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkPolicy", "problem setting firewall uid rules", $r6);

     label10:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label09;
        catch android.os.RemoteException from label01 to label02 with label08;
        catch java.lang.IllegalStateException from label04 to label05 with label09;
        catch android.os.RemoteException from label04 to label05 with label08;
        catch java.lang.IllegalStateException from label06 to label07 with label09;
        catch android.os.RemoteException from label06 to label07 with label08;
    }

    private void setUidFirewallRulesUL(int, android.util.SparseIntArray, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        android.util.SparseIntArray r1;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.util.SparseIntArray;

        i1 := @parameter2: int;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRulesUL(int,android.util.SparseIntArray)>(i0, r1);

     label1:
        if i1 == 0 goto label4;

        z0 = 1;

        if i1 != 1 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enableFirewallChainUL(int,boolean)>(i0, z0);

     label4:
        return;
    }

    private void setUidPolicyUncheckedUL(int, int, int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9, z10, z11, z12, z13;
        android.util.SparseBooleanArray $r2, $r3, $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.os.Handler $r12;
        java.lang.Boolean $r13;
        android.os.Message $r14;
        java.lang.Object r15;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z7 = 0;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,boolean)>(i0, i1, 0);

        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForWhitelistRulesUL(int)>(i0);

        if $z1 != 0 goto label01;

        z7 = 0;

        goto label19;

     label01:
        if i3 != 1 goto label02;

        z8 = 1;

        goto label03;

     label02:
        z8 = 0;

     label03:
        if i1 != 1 goto label04;

        z9 = 1;

        goto label05;

     label04:
        z9 = 0;

     label05:
        if i3 != 4 goto label06;

        z10 = 1;

        goto label07;

     label06:
        z10 = 0;

     label07:
        if i1 != 4 goto label08;

        z11 = 1;

        goto label09;

     label08:
        z11 = 0;

     label09:
        if z8 != 0 goto label11;

        $z6 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z6 == 0 goto label10;

        if z10 != 0 goto label10;

        goto label11;

     label10:
        z12 = 0;

        goto label12;

     label11:
        z12 = 1;

     label12:
        if z9 != 0 goto label14;

        $z5 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z5 == 0 goto label13;

        if z11 != 0 goto label13;

        goto label14;

     label13:
        z13 = 0;

        goto label15;

     label14:
        z13 = 1;

     label15:
        if z10 == 0 goto label18;

        if z11 == 0 goto label16;

        if z9 == 0 goto label18;

     label16:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mDefaultRestrictBackgroundWhitelistUids>;

        $z2 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z2 == 0 goto label18;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        $z3 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z3 != 0 goto label18;

        $z4 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z4 == 0 goto label17;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding uid ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to revoked restrict background whitelist");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r9);

     label17:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void append(int,boolean)>(i0, 1);

     label18:
        if z12 == z13 goto label19;

        z7 = 1;

     label19:
        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z7);

        $r14 = virtualinvoke $r12.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(13, i0, i1, $r13);

        virtualinvoke $r14.<android.os.Message: void sendToTarget()>();

        if z0 == 0 goto label25;

        r15 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r15;

     label20:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

        exitmonitor r15;

     label21:
        goto label25;

     label22:
        $r10 := @caughtexception;

     label23:
        exitmonitor r15;

     label24:
        throw $r10;

     label25:
        return;

        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void setUidPolicyUncheckedUL(int, int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        boolean z0;
        java.lang.Object r1;
        android.util.SparseIntArray $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i1 != 0 goto label1;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r4.<android.util.SparseIntArray: void delete(int)>(i0);

        goto label2;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

     label2:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>(i0);

        if z0 == 0 goto label8;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r1;

     label3:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

        exitmonitor r1;

     label4:
        goto label8;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static boolean updateCapabilityChange(android.util.SparseBooleanArray, boolean, android.net.Network)
    {
        android.util.SparseBooleanArray r0;
        boolean z0, $z1, z2;
        android.net.Network r1;
        int i0, $i1, $i2, $i3;

        r0 := @parameter0: android.util.SparseBooleanArray;

        z0 := @parameter1: boolean;

        r1 := @parameter2: android.net.Network;

        i0 = r1.<android.net.Network: int netId>;

        z2 = 0;

        $z1 = virtualinvoke r0.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

        if $z1 != z0 goto label1;

        $i2 = r1.<android.net.Network: int netId>;

        $i3 = virtualinvoke r0.<android.util.SparseBooleanArray: int indexOfKey(int)>($i2);

        if $i3 >= 0 goto label2;

     label1:
        z2 = 1;

     label2:
        if z2 == 0 goto label3;

        $i1 = r1.<android.net.Network: int netId>;

        virtualinvoke r0.<android.util.SparseBooleanArray: void put(int,boolean)>($i1, z0);

     label3:
        return z2;
    }

    private boolean updateDefaultMobilePolicyAL(int, android.net.NetworkPolicy)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1, $r2;
        long l0, $l1, $l2, $l3, $l4, $l6, $l7, $l8, $l9, $l13, $l14, $l15, $l16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.util.RecurrenceRule $r3, $r8, $r10, $r17, $r19;
        android.net.NetworkTemplate $r4;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        android.telephony.CarrierConfigManager $r7;
        int $i5, i18, i19, i20;
        java.time.ZoneId $r9;
        java.lang.StringBuilder $r11, $r20;
        java.lang.String $r16, $r23;
        java.time.ZonedDateTime $r18;
        byte $b11, $b12;
        android.telephony.SubscriptionPlan[] r26;
        android.telephony.SubscriptionPlan r27;
        android.os.PersistableBundle r28;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i18 := @parameter0: int;

        r1 := @parameter1: android.net.NetworkPolicy;

        $z0 = r1.<android.net.NetworkPolicy: boolean inferred>;

        if $z0 != 0 goto label02;

        $z5 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z5 == 0 goto label01;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring user-defined policy ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r23);

     label01:
        return 0;

     label02:
        $r2 = new android.net.NetworkPolicy;

        $r4 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r3 = r1.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $l4 = r1.<android.net.NetworkPolicy: long warningBytes>;

        $l3 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $l2 = r1.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $l1 = r1.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $z2 = r1.<android.net.NetworkPolicy: boolean metered>;

        $z1 = r1.<android.net.NetworkPolicy: boolean inferred>;

        specialinvoke $r2.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,boolean,boolean)>($r4, $r3, $l4, $l3, $l2, $l1, $z2, $z1);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i18);

        r26 = (android.telephony.SubscriptionPlan[]) $r6;

        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r26);

        if $z3 != 0 goto label07;

        r27 = r26[0];

        $r19 = virtualinvoke r27.<android.telephony.SubscriptionPlan: android.util.RecurrenceRule getCycleRule()>();

        r1.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule> = $r19;

        l0 = virtualinvoke r27.<android.telephony.SubscriptionPlan: long getDataLimitBytes()>();

        $b11 = l0 cmp -1L;

        if $b11 != 0 goto label03;

        $l15 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getPlatformDefaultWarningBytes()>();

        r1.<android.net.NetworkPolicy: long warningBytes> = $l15;

        $l16 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getPlatformDefaultLimitBytes()>();

        r1.<android.net.NetworkPolicy: long limitBytes> = $l16;

        goto label06;

     label03:
        $b12 = l0 cmp 9223372036854775807L;

        if $b12 != 0 goto label04;

        r1.<android.net.NetworkPolicy: long warningBytes> = -1L;

        r1.<android.net.NetworkPolicy: long limitBytes> = -1L;

        goto label06;

     label04:
        $l13 = 9L * l0;

        $l14 = $l13 / 10L;

        r1.<android.net.NetworkPolicy: long warningBytes> = $l14;

        i19 = virtualinvoke r27.<android.telephony.SubscriptionPlan: int getDataLimitBehavior()>();

        if i19 == 0 goto label05;

        if i19 == 1 goto label05;

        r1.<android.net.NetworkPolicy: long limitBytes> = -1L;

        goto label06;

     label05:
        r1.<android.net.NetworkPolicy: long limitBytes> = l0;

     label06:
        goto label10;

     label07:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.CarrierConfigManager mCarrierConfigManager>;

        r28 = virtualinvoke $r7.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>(i18);

        $r8 = r1.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $z4 = virtualinvoke $r8.<android.util.RecurrenceRule: boolean isMonthly()>();

        if $z4 == 0 goto label08;

        $r17 = r1.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r18 = $r17.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        i20 = virtualinvoke $r18.<java.time.ZonedDateTime: int getDayOfMonth()>();

        goto label09;

     label08:
        i20 = -1;

     label09:
        $i5 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getCycleDayFromCarrierConfig(android.os.PersistableBundle,int)>(r28, i20);

        $r9 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();

        $r10 = staticinvoke <android.net.NetworkPolicy: android.util.RecurrenceRule buildRule(int,java.time.ZoneId)>($i5, $r9);

        r1.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule> = $r10;

        $l6 = r1.<android.net.NetworkPolicy: long warningBytes>;

        $l7 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getWarningBytesFromCarrierConfig(android.os.PersistableBundle,long)>(r28, $l6);

        r1.<android.net.NetworkPolicy: long warningBytes> = $l7;

        $l8 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $l9 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getLimitBytesFromCarrierConfig(android.os.PersistableBundle,long)>(r28, $l8);

        r1.<android.net.NetworkPolicy: long limitBytes> = $l9;

     label10:
        $z6 = virtualinvoke r1.<android.net.NetworkPolicy: boolean equals(java.lang.Object)>($r2);

        if $z6 == 0 goto label11;

        return 0;

     label11:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r16);

        return 1;
    }

    private void updateNetworkStats(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r7, r9;
        java.lang.Throwable $r8;
        com.android.server.net.NetworkStatsManagerInternal $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z1 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateNetworkStats: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        if z0 == 0 goto label1;

        r9 = "F";

        goto label2;

     label1:
        r9 = "B";

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r7);

     label3:
        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkStatsManagerInternal mNetworkStats>;

        virtualinvoke $r10.<com.android.server.net.NetworkStatsManagerInternal: void setUidForeground(int,boolean)>(i0, z0);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r8;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void updateNetworksInternal()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1, r2;
        java.lang.Throwable $r3, $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateSubscriptions()>();

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r2;

     label02:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void ensureActiveMobilePolicyAL()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void normalizePoliciesNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsNL()>();

        exitmonitor r2;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r2;

     label07:
        throw $r4;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void updatePowerSaveWhitelistUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i2, i3, i4, i5, i6;
        android.util.SparseBooleanArray $r1, $r3, $r4, $r5;
        android.os.PowerWhitelistManager $r2, r6;
        int[] r7, r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerWhitelistManager mPowerWhitelistManager>;

        r7 = virtualinvoke r6.<android.os.PowerWhitelistManager: int[] getWhitelistedAppIds(boolean)>(0);

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        virtualinvoke $r1.<android.util.SparseBooleanArray: void clear()>();

        i2 = lengthof r7;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        i0 = r7[i3];

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.PowerWhitelistManager mPowerWhitelistManager>;

        r8 = virtualinvoke $r2.<android.os.PowerWhitelistManager: int[] getWhitelistedAppIds(boolean)>(1);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void clear()>();

        i4 = lengthof r8;

        i5 = 0;

     label3:
        if i5 >= i4 goto label4;

        i6 = r8[i5];

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void put(int,boolean)>(i6, 1);

        i5 = i5 + 1;

        goto label3;

     label4:
        return;
    }

    private void updateRestrictBackgroundRulesOnUidStatusChangedUL(int, int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        boolean z0, $z1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileOnRestrictBackground(int)>(i1);

        $z1 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileOnRestrictBackground(int)>(i2);

        if z0 == $z1 goto label1;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>(i0);

     label1:
        return;
    }

    private void updateRestrictionRulesForUidUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForDeviceIdleUL(int)>(i0);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForAppIdleUL(int)>(i0);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForRestrictPowerUL(int)>(i0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>(i0);

        return;
    }

    private void updateRulesForAllAppsUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3, $i4, $i5, i7, i8;
        android.content.pm.UserInfo r1;
        boolean $z0;
        android.content.Context $r2;
        android.os.UserManager $r3;
        java.lang.Object $r4, $r5;
        java.lang.String $r8, $r12;
        java.lang.StringBuilder $r9, r21;
        java.lang.Throwable $r13, $r14, $r15;
        android.content.pm.PackageManager r17;
        java.util.List r18, r19;
        android.content.pm.ApplicationInfo r20;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z0 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRulesForRestrictPowerUL-");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r12);

     label01:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r17 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "list-users");

     label02:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        r18 = virtualinvoke $r3.<android.os.UserManager: java.util.List getUsers()>();

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label04:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "list-uids");

     label05:
        r19 = virtualinvoke r17.<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>(4981248);

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label07:
        i1 = interfaceinvoke r18.<java.util.List: int size()>();

        i2 = interfaceinvoke r19.<java.util.List: int size()>();

     label08:
        i7 = 0;

     label09:
        if i7 >= i1 goto label22;

     label10:
        $r4 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i7);

        r1 = (android.content.pm.UserInfo) $r4;

     label11:
        i8 = 0;

     label12:
        if i8 >= i2 goto label21;

     label13:
        $r5 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(i8);

        r20 = (android.content.pm.ApplicationInfo) $r5;

        $i5 = r1.<android.content.pm.UserInfo: int id>;

        $i4 = r20.<android.content.pm.ApplicationInfo: int uid>;

        i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i5, $i4);

     label14:
        if i0 == 1 goto label19;

        if i0 == 2 goto label17;

     label15:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid type for updateRulesForAllApps: ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r8);

     label16:
        goto label20;

     label17:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i3);

     label18:
        goto label20;

     label19:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsUL(int)>(i3);

     label20:
        i8 = i8 + 1;

        goto label12;

     label21:
        i7 = i7 + 1;

        goto label09;

     label22:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label23:
        $r15 := @caughtexception;

     label24:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label25:
        throw $r15;

     label26:
        $r14 := @caughtexception;

     label27:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

     label28:
        throw $r14;

     label29:
        $r13 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label04 to label05 with label29;
        catch java.lang.Throwable from label05 to label06 with label23;
        catch java.lang.Throwable from label06 to label07 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label17 to label18 with label29;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label25 to label26 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label28 to label29 with label29;
    }

    private void updateRulesForAppIdleParoleUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, z6;
        int i0, i1, i2, $i3, $i4, i5, i7, i8, i9;
        com.android.server.usage.AppStandbyInternal $r2;
        android.util.SparseIntArray $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11;
        android.util.SparseBooleanArray $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.usage.AppStandbyInternal mAppStandby>;

        z0 = interfaceinvoke $r2.<com.android.server.usage.AppStandbyInternal: boolean isInParole()>();

        z1 = z0 ^ 1;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        i0 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        i5 = 0;

     label01:
        z6 = 1;

        if i5 >= i0 goto label11;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        i1 = virtualinvoke $r5.<android.util.SparseIntArray: int keyAt(int)>(i5);

        $z2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForBlacklistRulesUL(int)>(i1);

        if $z2 != 0 goto label02;

        goto label10;

     label02:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i2 = virtualinvoke $r6.<android.util.SparseIntArray: int get(int)>(i1);

        if z1 == 0 goto label03;

        i7 = i2 & 15;

        goto label04;

     label03:
        i7 = i2;

        $i3 = i2 & 240;

        if $i3 != 0 goto label04;

        goto label10;

     label04:
        if z0 != 0 goto label05;

        $z5 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidIdle(int)>(i1);

        if $z5 == 0 goto label05;

        goto label06;

     label05:
        z6 = 0;

     label06:
        if z6 == 0 goto label07;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        $z3 = virtualinvoke $r9.<android.util.SparseBooleanArray: boolean get(int)>($i4);

        if $z3 != 0 goto label07;

        $z4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundOnRestrictPowerUL(int)>(i1);

        if $z4 != 0 goto label07;

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        virtualinvoke $r10.<android.util.SparseIntArray: void put(int,int)>(i1, 2);

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(i1, 2);

        goto label08;

     label07:
        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        virtualinvoke $r11.<android.util.SparseIntArray: void put(int,int)>(i1, 0);

     label08:
        i8 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int updateRulesForPowerRestrictionsUL(int,int,boolean)>(i1, i7, z6);

        if i8 != 0 goto label09;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r8.<android.util.SparseIntArray: void delete(int)>(i1);

        goto label10;

     label09:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r7.<android.util.SparseIntArray: void put(int,int)>(i1, i8);

     label10:
        i5 = i5 + 1;

        goto label01;

     label11:
        if z1 == 0 goto label12;

        i9 = 1;

        goto label13;

     label12:
        i9 = 2;

     label13:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRulesUL(int,android.util.SparseIntArray,int)>(2, $r4, i9);

        return;
    }

    private void updateRulesForDataUsageRestrictionsUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRulesForDataUsageRestrictionsUL: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r4);

     label1:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDataUsageRestrictionsULInner(int)>(i0);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateRulesForDataUsageRestrictionsULInner(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i3, $i4, i8, $i11, i12;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, $z14, z15, $z16;
        android.util.SparseIntArray $r1, $r2, $r3, $r22;
        java.lang.StringBuilder $r4, $r23, $r47;
        java.lang.String $r16, $r19, $r21, $r35, $r38, $r41, $r44, $r46, $r50;
        byte b10;
        android.os.Handler $r54;
        android.os.Message $r55;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForWhitelistRulesUL(int)>(i0);

        if $z2 != 0 goto label02;

        $z11 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z11 == 0 goto label01;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no need to update restrict data rules for uid ");

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r50);

     label01:
        return;

     label02:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i8 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i1 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundOnRestrictBackgroundUL(int)>(i0);

        z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isRestrictedByAdminUL(int)>(i0);

        $i3 = i8 & 1;

        if $i3 == 0 goto label03;

        z12 = 1;

        goto label04;

     label03:
        z12 = 0;

     label04:
        $i4 = i8 & 4;

        if $i4 == 0 goto label05;

        z13 = 1;

        goto label06;

     label05:
        z13 = 0;

     label06:
        i2 = i1 & 15;

        if z1 == 0 goto label07;

        b10 = 4;

        goto label12;

     label07:
        if z0 == 0 goto label10;

        if z12 != 0 goto label09;

        $z10 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z10 == 0 goto label08;

        if z13 != 0 goto label08;

        goto label09;

     label08:
        b10 = 0;

        if z13 == 0 goto label12;

        b10 = 1;

        goto label12;

     label09:
        b10 = 2;

        goto label12;

     label10:
        if z12 == 0 goto label11;

        b10 = 4;

        goto label12;

     label11:
        b10 = 0;

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z3 == 0 goto label12;

        b10 = 0;

        if z13 == 0 goto label12;

        b10 = 1;

     label12:
        $i11 = i1 & 240;

        i12 = $i11 | b10;

        $z14 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z14 == 0 goto label13;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRuleForRestrictBackgroundUL(");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): isForeground=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isBlacklisted=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z12);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isWhitelisted=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z13);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isRestrictedByAdmin=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldRule=");

        $r35 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newRule=");

        $r38 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(b10);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newUidRules=");

        $r41 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i12);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldUidRules=");

        $r44 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i1);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r46);

        goto label13;

     label13:
        if i12 != 0 goto label14;

        $r22 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r22.<android.util.SparseIntArray: void delete(int)>(i0);

        goto label15;

     label14:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i0, i12);

     label15:
        if b10 == i2 goto label28;

        $z4 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(b10, 2);

        if $z4 == 0 goto label16;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkWhitelist(int,boolean)>(i0, 1);

        if z12 == 0 goto label27;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkBlacklist(int,boolean)>(i0, 0);

        goto label27;

     label16:
        $z5 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i2, 2);

        if $z5 == 0 goto label19;

        if z13 != 0 goto label17;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkWhitelist(int,boolean)>(i0, 0);

     label17:
        if z12 != 0 goto label18;

        if z1 == 0 goto label27;

     label18:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkBlacklist(int,boolean)>(i0, 1);

        goto label27;

     label19:
        $z6 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(b10, 4);

        if $z6 != 0 goto label23;

        $z7 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i2, 4);

        if $z7 == 0 goto label20;

        goto label23;

     label20:
        $z8 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(b10, 1);

        if $z8 != 0 goto label22;

        $z9 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i2, 1);

        if $z9 == 0 goto label21;

        goto label22;

     label21:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected change of metered UID state for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": foreground=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", whitelisted=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z13);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blacklisted=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isRestrictedByAdmin=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newRule=");

        $r16 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i12);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldRule=");

        $r19 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("NetworkPolicy", $r21);

        goto label27;

     label22:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkWhitelist(int,boolean)>(i0, z13);

        goto label27;

     label23:
        if z12 != 0 goto label25;

        if z1 == 0 goto label24;

        goto label25;

     label24:
        z15 = 0;

        goto label26;

     label25:
        z15 = 1;

     label26:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkBlacklist(int,boolean)>(i0, z15);

        $z16 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(i2, 4);

        if $z16 == 0 goto label27;

        if z13 == 0 goto label27;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setMeteredNetworkWhitelist(int,boolean)>(i0, z13);

     label27:
        $r54 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r55 = virtualinvoke $r54.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, i12);

        virtualinvoke $r55.<android.os.Message: void sendToTarget()>();

     label28:
        return;
    }

    private void updateRulesForGlobalChangeAL(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, r7;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z1 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRulesForGlobalChangeAL: ");

        if z0 == 0 goto label1;

        r7 = "R";

        goto label2;

     label1:
        r7 = "-";

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r5);

     label3:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForAppIdleUL()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictPowerUL()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictBackgroundUL()>();

     label4:
        if z0 == 0 goto label6;

     label5:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void normalizePoliciesNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesNL()>();

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private int updateRulesForPowerRestrictionsUL(int, int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r9, r11;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z1 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRulesForPowerRestrictionsUL: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        if z0 == 0 goto label1;

        r11 = "I";

        goto label2;

     label1:
        r11 = "-";

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r9);

     label3:
        i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int updateRulesForPowerRestrictionsULInner(int,int,boolean)>(i1, i0, z0);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return i2;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r10;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void updateRulesForPowerRestrictionsUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        android.util.SparseIntArray $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        $z0 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidIdle(int)>(i0);

        i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int updateRulesForPowerRestrictionsUL(int,int,boolean)>(i0, i1, $z0);

        if i2 != 0 goto label1;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r3.<android.util.SparseIntArray: void delete(int)>(i0);

        goto label2;

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, i2);

     label2:
        return;
    }

    private int updateRulesForPowerRestrictionsULInner(int, int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i9, i10;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, $z14, $z15;
        java.lang.StringBuilder $r1, $r5, $r19, $r23, $r49;
        java.lang.String $r4, $r13, $r16, $r18, $r22, $r37, $r40, $r43, $r46, $r48, $r52;
        byte b8;
        android.os.Handler $r58;
        android.os.Message $r59;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z11 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForBlacklistRulesUL(int)>(i0);

        z12 = 0;

        if z11 != 0 goto label02;

        $z10 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z10 == 0 goto label01;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no need to update restrict power rules for uid ");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r52);

     label01:
        return 0;

     label02:
        if z0 != 0 goto label03;

        $z8 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z8 != 0 goto label03;

        $z9 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        if $z9 == 0 goto label04;

     label03:
        z12 = 1;

     label04:
        z13 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundOnRestrictPowerUL(int)>(i0);

        $z14 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isWhitelistedFromPowerSaveUL(int,boolean)>(i0, $z14);

        i2 = i1 & 240;

        b8 = 0;

        if z13 == 0 goto label05;

        if z12 == 0 goto label07;

        b8 = 32;

        goto label07;

     label05:
        if z12 == 0 goto label07;

        if z1 == 0 goto label06;

        b8 = 32;

        goto label07;

     label06:
        b8 = 64;

     label07:
        $i9 = i1 & 15;

        i10 = $i9 | b8;

        $z15 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z15 == 0 goto label08;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRulesForPowerRestrictionsUL(");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), isIdle: ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRestrictPower: ");

        $z6 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mDeviceIdleMode: ");

        $z7 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isForeground=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z13);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isWhitelisted=");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldRule=");

        $r37 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newRule=");

        $r40 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(b8);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newUidRules=");

        $r43 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i10);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldUidRules=");

        $r46 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i1);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r48);

     label08:
        if b8 == i2 goto label13;

        if b8 == 0 goto label11;

        $z3 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(b8, 32);

        if $z3 == 0 goto label09;

        goto label11;

     label09:
        $z4 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean hasRule(int,int)>(b8, 64);

        if $z4 == 0 goto label10;

        $z5 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z5 == 0 goto label12;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rejecting non-metered access for UID ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r22);

        goto label12;

     label10:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected change of non-metered UID state for ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": foreground=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z13);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", whitelisted=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", newRule=");

        $r13 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i10);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", oldRule=");

        $r16 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("NetworkPolicy", $r18);

        goto label12;

     label11:
        $z2 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z2 == 0 goto label12;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Allowing non-metered access for UID ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("NetworkPolicy", $r4);

     label12:
        $r58 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r59 = virtualinvoke $r58.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, i10);

        virtualinvoke $r59.<android.os.Message: void sendToTarget()>();

     label13:
        return i10;
    }

    private void updateRulesForRestrictBackgroundUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateRulesForRestrictBackgroundUL");

     label1:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForAllAppsUL(int)>(1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateRulesForRestrictPowerUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateRulesForRestrictPowerUL");

     label1:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForDeviceIdleUL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerSaveUL()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForAllAppsUL(int)>(2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateRulesForTempWhitelistChangeUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i3, i4;
        java.util.List r1;
        android.os.UserManager $r2;
        java.lang.Object $r3;
        android.content.pm.UserInfo $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUsers()>();

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        $r4 = (android.content.pm.UserInfo) $r3;

        $i3 = $r4.<android.content.pm.UserInfo: int id>;

        i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i3, i0);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForAppIdleUL(int)>(i2);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForDeviceIdleUL(int)>(i2);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForRestrictPowerUL(int)>(i2);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i2);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void updateRulesForWhitelistedAppIds(android.util.SparseIntArray, android.util.SparseBooleanArray, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseIntArray r1;
        android.util.SparseBooleanArray r2;
        int i0, $i1, $i2, $i3, i4;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.util.SparseIntArray;

        r2 := @parameter1: android.util.SparseBooleanArray;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r2.<android.util.SparseBooleanArray: int size()>();

        i4 = $i1 - 1;

     label1:
        if i4 < 0 goto label3;

        $z0 = virtualinvoke r2.<android.util.SparseBooleanArray: boolean valueAt(int)>(i4);

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r2.<android.util.SparseBooleanArray: int keyAt(int)>(i4);

        $i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i2);

        virtualinvoke r1.<android.util.SparseIntArray: void put(int,int)>($i3, 1);

     label2:
        i4 = i4 + -1;

        goto label1;

     label3:
        return;
    }

    private void updateRulesForWhitelistedPowerSaveUL(int, boolean, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        i1 := @parameter2: int;

        if z2 == 0 goto label5;

        if i1 != 1 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isWhitelistedFromPowerSaveUL(int,boolean)>(i0, z3);

        if $z0 != 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundOnRestrictPowerUL(int)>(i0);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRule(int,int,int)>(i1, i0, 0);

        goto label5;

     label4:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRule(int,int,int)>(i1, i0, 1);

     label5:
        return;
    }

    private void updateRulesForWhitelistedPowerSaveUL(boolean, int, android.util.SparseIntArray)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        android.util.SparseIntArray r1, $r5, $r6, $r7;
        java.util.List r2;
        android.content.pm.UserInfo r3;
        android.os.UserManager $r4;
        java.lang.Object $r8;
        android.util.SparseBooleanArray $r9, $r10, $r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.util.SparseIntArray;

        if z0 == 0 goto label7;

        virtualinvoke r1.<android.util.SparseIntArray: void clear()>();

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r4.<android.os.UserManager: java.util.List getUsers()>();

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        i8 = $i1 - 1;

     label1:
        if i8 < 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i8);

        r3 = (android.content.pm.UserInfo) $r8;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        $i5 = r3.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedAppIds(android.util.SparseIntArray,android.util.SparseBooleanArray,int)>(r1, $r9, $i5);

        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $i6 = r3.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedAppIds(android.util.SparseIntArray,android.util.SparseBooleanArray,int)>(r1, $r10, $i6);

        if i0 != 3 goto label2;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $i7 = r3.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedAppIds(android.util.SparseIntArray,android.util.SparseBooleanArray,int)>(r1, $r11, $i7);

     label2:
        i8 = i8 + -1;

        goto label1;

     label3:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i2 = virtualinvoke $r5.<android.util.SparseIntArray: int size()>();

        i9 = $i2 - 1;

     label4:
        if i9 < 0 goto label6;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i3 = virtualinvoke $r6.<android.util.SparseIntArray: int valueAt(int)>(i9);

        $z1 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int)>($i3);

        if $z1 == 0 goto label5;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i4 = virtualinvoke $r7.<android.util.SparseIntArray: int keyAt(int)>(i9);

        virtualinvoke r1.<android.util.SparseIntArray: void put(int,int)>($i4, 1);

     label5:
        i9 = i9 + -1;

        goto label4;

     label6:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRulesUL(int,android.util.SparseIntArray,int)>(i0, r1, 1);

        goto label8;

     label7:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRulesUL(int,android.util.SparseIntArray,int)>(i0, null, 2);

     label8:
        return;
    }

    private boolean updateUidStateUL(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2;
        android.util.SparseIntArray $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateUidStateUL");

     label1:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i2 = virtualinvoke $r2.<android.util.SparseIntArray: int get(int,int)>(i0, 19);

     label2:
        if i2 == i1 goto label7;

     label3:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRestrictBackgroundRulesOnUidStatusChangedUL(int,int,int)>(i0, i2, i1);

        $z0 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int)>(i2);

        $z1 = staticinvoke <android.net.NetworkPolicyManager: boolean isProcStateAllowedWhileIdleOrPowerSaveMode(int)>(i1);

        if $z0 == $z1 goto label6;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForAppIdleUL(int)>(i0);

        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        if $z2 == 0 goto label4;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForDeviceIdleUL(int)>(i0);

     label4:
        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        if $z3 == 0 goto label5;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForRestrictPowerUL(int)>(i0);

     label5:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i0);

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return 1;

     label7:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return 0;

     label8:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    private void upgradeDefaultBackgroundDataUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "default_restrict_background_data", 0);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground> = z0;

        return;
    }

    private void upgradeWifiMeteredOverrideAL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.wifi.WifiManager r1;
        java.util.List r2;
        android.net.NetworkPolicy r3;
        java.lang.String r4, $r17, $r19, $r24;
        java.util.Iterator r5;
        android.net.wifi.WifiConfiguration r6;
        android.content.Context $r8;
        java.lang.Object $r9, $r12, $r18;
        android.util.ArrayMap $r10, $r11, $r14;
        int $i0, $i1, i4;
        android.net.NetworkTemplate $r13, $r16;
        boolean $z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r20;
        byte b5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z5 = 0;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/wifi/WifiManager;");

        r1 = (android.net.wifi.WifiManager) $r9;

        r2 = virtualinvoke r1.<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>();

        i4 = 0;

     label01:
        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i0 = virtualinvoke $r10.<android.util.ArrayMap: int size()>();

        if i4 >= $i0 goto label09;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        r3 = (android.net.NetworkPolicy) $r12;

        $r13 = r3.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $i1 = virtualinvoke $r13.<android.net.NetworkTemplate: int getMatchRule()>();

        if $i1 != 4 goto label07;

        $z1 = r3.<android.net.NetworkPolicy: boolean inferred>;

        if $z1 != 0 goto label07;

        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i4);

        $r16 = r3.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r17 = virtualinvoke $r16.<android.net.NetworkTemplate: java.lang.String getNetworkId()>();

        r4 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String resolveNetworkId(java.lang.String)>($r17);

        r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (android.net.wifi.WifiConfiguration) $r18;

        $r19 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String resolveNetworkId(android.net.wifi.WifiConfiguration)>(r6);

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r19, r4);

        if $z3 == 0 goto label05;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found network ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; upgrading metered hint");

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r24);

        $z4 = r3.<android.net.NetworkPolicy: boolean metered>;

        if $z4 == 0 goto label03;

        b5 = 1;

        goto label04;

     label03:
        b5 = 2;

     label04:
        r6.<android.net.wifi.WifiConfiguration: int meteredOverride> = b5;

        virtualinvoke r1.<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>(r6);

     label05:
        goto label02;

     label06:
        z5 = 1;

        goto label08;

     label07:
        i4 = i4 + 1;

     label08:
        goto label01;

     label09:
        if z5 == 0 goto label10;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

     label10:
        return;
    }

    private void waitForAdminData()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0;
        java.util.concurrent.CountDownLatch $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.device_admin");

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.concurrent.CountDownLatch mAdminDataAvailableLatch>;

        staticinvoke <com.android.internal.util.ConcurrentUtils: void waitForCountDownNoInterrupt(java.util.concurrent.CountDownLatch,long,java.lang.String)>($r3, 10000L, "Wait for admin data");

     label1:
        return;
    }

    boolean addDefaultRestrictBackgroundWhitelistUidsUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.List r1;
        int i0, $i1, i2;
        android.os.UserManager $r2;
        java.lang.Object $r3;
        android.content.pm.UserInfo $r4;
        boolean $z0, z1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUsers()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        z1 = 0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (android.content.pm.UserInfo) $r3;

        $i1 = $r4.<android.content.pm.UserInfo: int id>;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean addDefaultRestrictBackgroundWhitelistUidsUL(int)>($i1);

        if $z0 != 0 goto label3;

        if z1 == 0 goto label2;

        goto label3;

     label2:
        z1 = 0;

        goto label4;

     label3:
        z1 = 1;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return z1;
    }

    void addIdleHandler(android.os.MessageQueue$IdleHandler)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.MessageQueue$IdleHandler r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        android.os.MessageQueue $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.os.MessageQueue$IdleHandler;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        $r4 = virtualinvoke $r3.<android.os.Looper: android.os.MessageQueue getQueue()>();

        virtualinvoke $r4.<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>(r1);

        return;
    }

    void addNetworkPolicyAL(android.net.NetworkPolicy)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy r1;
        android.content.Context $r2;
        java.lang.String $r3;
        android.net.NetworkPolicy[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.NetworkPolicy;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>($r3);

        $r5 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] appendElement(java.lang.Class,java.lang.Object[],java.lang.Object)>(class "Landroid/net/NetworkPolicy;", $r4, r1);

        $r6 = (android.net.NetworkPolicy[]) $r5;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])>($r6);

        return;
    }

    public void addUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3;
        java.lang.Object r1;
        android.content.Context $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;
        android.util.SparseIntArray $r8;
        com.android.server.net.NetworkPolicyLogger $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 == 0 goto label9;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label1:
        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r8.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

     label2:
        i3 = i2 | i1;

        if i1 == i3 goto label4;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,int,boolean)>(i0, i1, i3, 1);

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r9.<com.android.server.net.NetworkPolicyLogger: void uidPolicyChanged(int,int,int)>(i0, i1, i3);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

     label9:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void bindConnectivityManager(android.net.IConnectivityManager)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.IConnectivityManager r1, $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.IConnectivityManager;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing IConnectivityManager");

        $r3 = (android.net.IConnectivityManager) r1;

        r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager> = $r3;

        return;
    }

    android.net.NetworkPolicy buildDefaultMobilePolicy(int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1, r12;
        android.net.NetworkPolicy $r2;
        android.net.NetworkTemplate $r3;
        java.time.ZonedDateTime $r4;
        java.time.ZoneId $r5;
        android.util.RecurrenceRule $r6;
        long $l2, $l3;
        java.lang.Throwable $r7, $r8, $r9, r14;
        java.lang.String r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        $r2 = new android.net.NetworkPolicy;

        $r3 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)>(r10);

        $r4 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $i1 = virtualinvoke $r4.<java.time.ZonedDateTime: int getDayOfMonth()>();

        $r5 = staticinvoke <java.time.ZoneId: java.time.ZoneId systemDefault()>();

        $r6 = staticinvoke <android.net.NetworkPolicy: android.util.RecurrenceRule buildRule(int,java.time.ZoneId)>($i1, $r5);

        $l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getPlatformDefaultWarningBytes()>();

        $l3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getPlatformDefaultLimitBytes()>();

        specialinvoke $r2.<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,android.util.RecurrenceRule,long,long,long,long,boolean,boolean)>($r3, $r6, $l2, $l3, -1L, -1L, 1, 1);

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        r12 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r12;

     label02:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean updateDefaultMobilePolicyAL(int,android.net.NetworkPolicy)>(i0, $r2);

        exitmonitor r12;

     label03:
        exitmonitor r1;

     label04:
        return $r2;

     label05:
        $r9 := @caughtexception;

     label06:
        exitmonitor r12;

     label07:
        throw $r9;

     label08:
        $r7 := @caughtexception;

        r14 = $r7;

     label09:
        exitmonitor r1;

     label10:
        throw r14;

     label11:
        $r8 := @caughtexception;

        r14 = $r8;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.StringBuilder r2, r122, r123, r124, r125, r126, r129, r136;
        android.content.Context $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        com.android.internal.util.IndentingPrintWriter $r4;
        android.util.ArraySet $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45;
        java.lang.String $r9, $r12, $r15, $r18, $r53, $r58, $r80, $r84, $r86, $r92, $r94, $r99, $r108, $r113, r128, r133, $r135;
        android.util.ArrayMap $r20, $r105, $r109, $r110;
        android.util.SparseArray $r23, $r26, $r45, $r50, $r54, $r87, $r88, $r95, $r101;
        java.util.List $r28;
        android.util.SparseIntArray $r30, $r37, $r38, $r42, $r56, $r57, $r59, $r78, $r79, $r134;
        android.util.SparseBooleanArray $r32, $r33, $r34, $r35, $r36, $r62, $r65, $r68, $r69, $r72, $r73, $r76, $r77, r132;
        com.android.internal.util.StatLogger $r47;
        com.android.server.net.NetworkPolicyLogger $r48;
        java.lang.Object $r55, $r81, $r89, $r102, $r106, $r111, r120, r121;
        java.lang.String[] $r83, r118, r131;
        android.telephony.SubscriptionPlan $r104;
        android.net.NetworkPolicy $r107, $r112;
        java.lang.Throwable $r114, $r115;
        java.io.FileDescriptor r116;
        java.io.PrintWriter r117;
        android.telephony.SubscriptionPlan[] r127;
        java.util.Iterator r130;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r116 := @parameter0: java.io.FileDescriptor;

        r117 := @parameter1: java.io.PrintWriter;

        r118 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, "NetworkPolicy", r117);

        if $z0 != 0 goto label001;

        return;

     label001:
        $r4 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r117, "  ");

        $r5 = new android.util.ArraySet;

        $i0 = lengthof r118;

        specialinvoke $r5.<android.util.ArraySet: void <init>(int)>($i0);

        i11 = lengthof r118;

        i12 = 0;

     label002:
        if i12 >= i11 goto label003;

        $r113 = r118[i12];

        virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>($r113);

        i12 = i12 + 1;

        goto label002;

     label003:
        r120 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r120;

     label004:
        r121 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r121;

     label005:
        $z1 = virtualinvoke $r5.<android.util.ArraySet: boolean contains(java.lang.Object)>("--unsnooze");

        if $z1 == 0 goto label012;

        $r109 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i10 = virtualinvoke $r109.<android.util.ArrayMap: int size()>();

        i13 = $i10 - 1;

     label006:
        if i13 < 0 goto label009;

     label007:
        $r110 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r111 = virtualinvoke $r110.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i13);

        $r112 = (android.net.NetworkPolicy) $r111;

        virtualinvoke $r112.<android.net.NetworkPolicy: void clearSnooze()>();

     label008:
        i13 = i13 + -1;

        goto label006;

     label009:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void handleNetworkPoliciesUpdateAL(boolean)>(1);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Cleared snooze timestamps");

        exitmonitor r121;

     label010:
        exitmonitor r120;

     label011:
        return;

     label012:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("System ready: ");

        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSystemReady>;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z2);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Restrict background: ");

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z3);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Restrict power: ");

        $z4 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z4);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Device idle: ");

        $z5 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z5);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Metered ifaces: ");

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r6);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r122 = new java.lang.StringBuilder;

        specialinvoke r122.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRestrictBackgroundLowPowerMode: ");

        $z6 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode>;

        virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r9 = virtualinvoke r122.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r9);

        r123 = new java.lang.StringBuilder;

        specialinvoke r123.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRestrictBackgroundBeforeBsm: ");

        $z7 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundBeforeBsm>;

        virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r12 = virtualinvoke r123.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r12);

        r124 = new java.lang.StringBuilder;

        specialinvoke r124.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLoadedRestrictBackground: ");

        $z8 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mLoadedRestrictBackground>;

        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r15 = virtualinvoke r124.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r15);

        r125 = new java.lang.StringBuilder;

        specialinvoke r125.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mRestrictBackgroundChangedInBsm: ");

        $z9 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundChangedInBsm>;

        virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r18 = virtualinvoke r125.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r18);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network policies:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label013:
        i14 = 0;

     label014:
        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i1 = virtualinvoke $r20.<android.util.ArrayMap: int size()>();

        if i14 >= $i1 goto label016;

        $r105 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r106 = virtualinvoke $r105.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i14);

        $r107 = (android.net.NetworkPolicy) $r106;

        $r108 = virtualinvoke $r107.<android.net.NetworkPolicy: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r108);

     label015:
        i14 = i14 + 1;

        goto label014;

     label016:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Subscription plans:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label017:
        i15 = 0;

     label018:
        $r23 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $i2 = virtualinvoke $r23.<android.util.SparseArray: int size()>();

        if i15 >= $i2 goto label025;

        $r95 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        i16 = virtualinvoke $r95.<android.util.SparseArray: int keyAt(int)>(i15);

        r126 = new java.lang.StringBuilder;

        specialinvoke r126.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subscriber ID ");

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r99 = virtualinvoke r126.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r99);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r101 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r102 = virtualinvoke $r101.<android.util.SparseArray: java.lang.Object valueAt(int)>(i15);

        r127 = (android.telephony.SubscriptionPlan[]) $r102;

        $z14 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r127);

        if $z14 != 0 goto label023;

        i17 = lengthof r127;

     label019:
        i18 = 0;

     label020:
        if i18 >= i17 goto label023;

     label021:
        $r104 = r127[i18];

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r104);

     label022:
        i18 = i18 + 1;

        goto label020;

     label023:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label024:
        i15 = i15 + 1;

        goto label018;

     label025:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active subscriptions:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label026:
        i19 = 0;

     label027:
        $r26 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $i3 = virtualinvoke $r26.<android.util.SparseArray: int size()>();

        if i19 >= $i3 goto label029;

        $r87 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        i20 = virtualinvoke $r87.<android.util.SparseArray: int keyAt(int)>(i19);

        $r88 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $r89 = virtualinvoke $r88.<android.util.SparseArray: java.lang.Object valueAt(int)>(i19);

        r128 = (java.lang.String) $r89;

        r129 = new java.lang.StringBuilder;

        specialinvoke r129.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i20);

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r92 = staticinvoke <android.net.NetworkIdentity: java.lang.String scrubSubscriberId(java.lang.String)>(r128);

        virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        $r94 = virtualinvoke r129.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r94);

     label028:
        i19 = i19 + 1;

        goto label027;

     label029:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r28 = r0.<com.android.server.net.NetworkPolicyManagerService: java.util.List mMergedSubscriberIds>;

        r130 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>();

     label030:
        $z10 = interfaceinvoke r130.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label032;

        $r81 = interfaceinvoke r130.<java.util.Iterator: java.lang.Object next()>();

        r131 = (java.lang.String[]) $r81;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Merged subscriptions: ");

        $r83 = staticinvoke <android.net.NetworkIdentity: java.lang.String[] scrubSubscriberId(java.lang.String[])>(r131);

        $r84 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r83);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        $r86 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r86);

     label031:
        goto label030;

     label032:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Policy for UIDs:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r30 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i21 = virtualinvoke $r30.<android.util.SparseIntArray: int size()>();

     label033:
        i22 = 0;

     label034:
        if i22 >= i21 goto label037;

     label035:
        $r78 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i23 = virtualinvoke $r78.<android.util.SparseIntArray: int keyAt(int)>(i22);

        $r79 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i24 = virtualinvoke $r79.<android.util.SparseIntArray: int valueAt(int)>(i22);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i23);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" policy=");

        $r80 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidPoliciesToString(int)>(i24);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r80);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label036:
        i22 = i22 + 1;

        goto label034;

     label037:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        $r32 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        i25 = virtualinvoke $r32.<android.util.SparseBooleanArray: int size()>();

     label038:
        if i25 <= 0 goto label045;

     label039:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Power save whitelist (except idle) app ids:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label040:
        i26 = 0;

     label041:
        if i26 >= i25 goto label044;

     label042:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        $r76 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $i9 = virtualinvoke $r76.<android.util.SparseBooleanArray: int keyAt(int)>(i26);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i9);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r77 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $z13 = virtualinvoke $r77.<android.util.SparseBooleanArray: boolean valueAt(int)>(i26);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z13);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label043:
        i26 = i26 + 1;

        goto label041;

     label044:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label045:
        $r33 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        i27 = virtualinvoke $r33.<android.util.SparseBooleanArray: int size()>();

     label046:
        if i27 <= 0 goto label053;

     label047:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Power save whitelist app ids:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label048:
        i28 = 0;

     label049:
        if i28 >= i27 goto label052;

     label050:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        $r72 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $i8 = virtualinvoke $r72.<android.util.SparseBooleanArray: int keyAt(int)>(i28);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i8);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r73 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveWhitelistAppIds>;

        $z12 = virtualinvoke $r73.<android.util.SparseBooleanArray: boolean valueAt(int)>(i28);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z12);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label051:
        i28 = i28 + 1;

        goto label049;

     label052:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label053:
        $r34 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        i29 = virtualinvoke $r34.<android.util.SparseBooleanArray: int size()>();

     label054:
        if i29 <= 0 goto label061;

     label055:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("App idle whitelist app ids:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label056:
        i30 = 0;

     label057:
        if i30 >= i29 goto label060;

     label058:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        $r68 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        $i7 = virtualinvoke $r68.<android.util.SparseBooleanArray: int keyAt(int)>(i30);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i7);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(": ");

        $r69 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        $z11 = virtualinvoke $r69.<android.util.SparseBooleanArray: boolean valueAt(int)>(i30);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(boolean)>($z11);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label059:
        i30 = i30 + 1;

        goto label057;

     label060:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label061:
        $r35 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mDefaultRestrictBackgroundWhitelistUids>;

        i31 = virtualinvoke $r35.<android.util.SparseBooleanArray: int size()>();

     label062:
        if i31 <= 0 goto label069;

     label063:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Default restrict background whitelist uids:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label064:
        i32 = 0;

     label065:
        if i32 >= i31 goto label068;

     label066:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        $r65 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mDefaultRestrictBackgroundWhitelistUids>;

        $i6 = virtualinvoke $r65.<android.util.SparseBooleanArray: int keyAt(int)>(i32);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i6);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label067:
        i32 = i32 + 1;

        goto label065;

     label068:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label069:
        $r36 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        i33 = virtualinvoke $r36.<android.util.SparseBooleanArray: int size()>();

     label070:
        if i33 <= 0 goto label077;

     label071:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Default restrict background whitelist uids revoked by users:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label072:
        i34 = 0;

     label073:
        if i34 >= i33 goto label076;

     label074:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        $r62 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        $i5 = virtualinvoke $r62.<android.util.SparseBooleanArray: int keyAt(int)>(i34);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>($i5);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label075:
        i34 = i34 + 1;

        goto label073;

     label076:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label077:
        r132 = new android.util.SparseBooleanArray;

        specialinvoke r132.<android.util.SparseBooleanArray: void <init>()>();

        $r37 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseIntArray,android.util.SparseBooleanArray)>($r37, r132);

        $r38 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseIntArray,android.util.SparseBooleanArray)>($r38, r132);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Status for all known UIDs:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i35 = virtualinvoke r132.<android.util.SparseBooleanArray: int size()>();

     label078:
        i36 = 0;

     label079:
        if i36 >= i35 goto label089;

     label080:
        i37 = virtualinvoke r132.<android.util.SparseBooleanArray: int keyAt(int)>(i36);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i37);

        $r59 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        i38 = virtualinvoke $r59.<android.util.SparseIntArray: int get(int,int)>(i37, 19);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" state=");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i38);

     label081:
        if i38 > 2 goto label084;

     label082:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" (fg)");

     label083:
        goto label087;

     label084:
        if i38 > 5 goto label085;

        r133 = " (fg svc)";

        goto label086;

     label085:
        r133 = " (bg)";

     label086:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(r133);

     label087:
        $r134 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i39 = virtualinvoke $r134.<android.util.SparseIntArray: int get(int,int)>(i37, 0);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" rules=");

        $r135 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i39);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r135);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label088:
        i36 = i36 + 1;

        goto label079;

     label089:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Status for just UIDs with rules:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r42 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i40 = virtualinvoke $r42.<android.util.SparseIntArray: int size()>();

     label090:
        i41 = 0;

     label091:
        if i41 >= i40 goto label094;

     label092:
        $r56 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i42 = virtualinvoke $r56.<android.util.SparseIntArray: int keyAt(int)>(i41);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("UID=");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i42);

        $r57 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i43 = virtualinvoke $r57.<android.util.SparseIntArray: int get(int,int)>(i42, 0);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>(" rules=");

        $r58 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i43);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r58);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label093:
        i41 = i41 + 1;

        goto label091;

     label094:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Admin restricted uids for metered data:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r45 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        i44 = virtualinvoke $r45.<android.util.SparseArray: int size()>();

     label095:
        i45 = 0;

     label096:
        if i45 >= i44 goto label099;

     label097:
        r136 = new java.lang.StringBuilder;

        specialinvoke r136.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("u");

        $r50 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        $i4 = virtualinvoke $r50.<android.util.SparseArray: int keyAt(int)>(i45);

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r53 = virtualinvoke r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r53);

        $r54 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mMeteredRestrictedUids>;

        $r55 = virtualinvoke $r54.<android.util.SparseArray: java.lang.Object valueAt(int)>(i45);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.Object)>($r55);

     label098:
        i45 = i45 + 1;

        goto label096;

     label099:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r47 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r47.<com.android.internal.util.StatLogger: void dump(com.android.internal.util.IndentingPrintWriter)>($r4);

        $r48 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r48.<com.android.server.net.NetworkPolicyLogger: void dumpLogs(com.android.internal.util.IndentingPrintWriter)>($r4);

        exitmonitor r121;

     label100:
        exitmonitor r120;

     label101:
        return;

     label102:
        $r115 := @caughtexception;

     label103:
        exitmonitor r121;

     label104:
        throw $r115;

     label105:
        $r114 := @caughtexception;

     label106:
        exitmonitor r120;

     label107:
        throw $r114;

        catch java.lang.Throwable from label004 to label005 with label105;
        catch java.lang.Throwable from label005 to label006 with label102;
        catch java.lang.Throwable from label007 to label008 with label102;
        catch java.lang.Throwable from label009 to label010 with label102;
        catch java.lang.Throwable from label010 to label011 with label105;
        catch java.lang.Throwable from label012 to label013 with label102;
        catch java.lang.Throwable from label014 to label015 with label102;
        catch java.lang.Throwable from label016 to label017 with label102;
        catch java.lang.Throwable from label018 to label019 with label102;
        catch java.lang.Throwable from label021 to label022 with label102;
        catch java.lang.Throwable from label023 to label024 with label102;
        catch java.lang.Throwable from label025 to label026 with label102;
        catch java.lang.Throwable from label027 to label028 with label102;
        catch java.lang.Throwable from label029 to label030 with label102;
        catch java.lang.Throwable from label030 to label031 with label102;
        catch java.lang.Throwable from label032 to label033 with label102;
        catch java.lang.Throwable from label035 to label036 with label102;
        catch java.lang.Throwable from label037 to label038 with label102;
        catch java.lang.Throwable from label039 to label040 with label102;
        catch java.lang.Throwable from label042 to label043 with label102;
        catch java.lang.Throwable from label044 to label045 with label102;
        catch java.lang.Throwable from label045 to label046 with label102;
        catch java.lang.Throwable from label047 to label048 with label102;
        catch java.lang.Throwable from label050 to label051 with label102;
        catch java.lang.Throwable from label052 to label053 with label102;
        catch java.lang.Throwable from label053 to label054 with label102;
        catch java.lang.Throwable from label055 to label056 with label102;
        catch java.lang.Throwable from label058 to label059 with label102;
        catch java.lang.Throwable from label060 to label061 with label102;
        catch java.lang.Throwable from label061 to label062 with label102;
        catch java.lang.Throwable from label063 to label064 with label102;
        catch java.lang.Throwable from label066 to label067 with label102;
        catch java.lang.Throwable from label068 to label069 with label102;
        catch java.lang.Throwable from label069 to label070 with label102;
        catch java.lang.Throwable from label071 to label072 with label102;
        catch java.lang.Throwable from label074 to label075 with label102;
        catch java.lang.Throwable from label076 to label077 with label102;
        catch java.lang.Throwable from label077 to label078 with label102;
        catch java.lang.Throwable from label080 to label081 with label102;
        catch java.lang.Throwable from label082 to label083 with label102;
        catch java.lang.Throwable from label086 to label087 with label102;
        catch java.lang.Throwable from label087 to label088 with label102;
        catch java.lang.Throwable from label089 to label090 with label102;
        catch java.lang.Throwable from label092 to label093 with label102;
        catch java.lang.Throwable from label094 to label095 with label102;
        catch java.lang.Throwable from label097 to label098 with label102;
        catch java.lang.Throwable from label099 to label100 with label102;
        catch java.lang.Throwable from label100 to label101 with label105;
        catch java.lang.Throwable from label103 to label104 with label102;
        catch java.lang.Throwable from label104 to label105 with label105;
        catch java.lang.Throwable from label106 to label107 with label105;
    }

    public void factoryReset(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkPolicy[] r1;
        android.net.NetworkPolicy r2;
        android.content.Context $r3, $r5;
        android.os.UserManager $r4, $r7;
        boolean $z0, $z1, $z2;
        java.lang.String $r6, r9;
        int $i0, i1, i2, i3, i4;
        android.net.NetworkTemplate $r8, r10;
        int[] r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r9 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.NETWORK_SETTINGS", "NetworkPolicy");

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r4.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_network_reset");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>($r6);

        r10 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)>(r9);

        i1 = lengthof r1;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r2 = r1[i2];

        $r8 = r2.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $z2 = virtualinvoke $r8.<android.net.NetworkTemplate: boolean equals(java.lang.Object)>(r10);

        if $z2 == 0 goto label3;

        r2.<android.net.NetworkPolicy: long limitBytes> = -1L;

        r2.<android.net.NetworkPolicy: boolean inferred> = 0;

        virtualinvoke r2.<android.net.NetworkPolicy: void clearSnooze()>();

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies(android.net.NetworkPolicy[])>(r1);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)>(0);

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        $z1 = virtualinvoke $r7.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_control_apps");

        if $z1 != 0 goto label6;

        r11 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>(1);

        i3 = lengthof r11;

        i4 = 0;

     label5:
        if i4 >= i3 goto label6;

        $i0 = r11[i4];

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>($i0, 0);

        i4 = i4 + 1;

        goto label5;

     label6:
        return;
    }

    int[] getAppIdleWhitelist()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        int i0, $i1, i2;
        android.content.Context $r2;
        android.util.SparseBooleanArray $r3, $r4;
        java.lang.Throwable $r5;
        int[] r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        i0 = virtualinvoke $r3.<android.util.SparseBooleanArray: int size()>();

        r6 = newarray (int)[i0];

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label06;

     label04:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        $i1 = virtualinvoke $r4.<android.util.SparseBooleanArray: int keyAt(int)>(i2);

        r6[i2] = $i1;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    int getCycleDayFromCarrierConfig(android.os.PersistableBundle, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, $i2, $i4;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.PersistableBundle r5;
        java.util.Calendar r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r5 := @parameter0: android.os.PersistableBundle;

        i0 := @parameter1: int;

        if r5 != null goto label1;

        return i0;

     label1:
        i1 = virtualinvoke r5.<android.os.PersistableBundle: int getInt(java.lang.String)>("monthly_data_cycle_day_int");

        if i1 != -1 goto label2;

        return i0;

     label2:
        r6 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i2 = virtualinvoke r6.<java.util.Calendar: int getMinimum(int)>(5);

        if i1 < $i2 goto label4;

        $i4 = virtualinvoke r6.<java.util.Calendar: int getMaximum(int)>(5);

        if i1 <= $i4 goto label3;

        goto label4;

     label3:
        return i1;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid date in CarrierConfigManager.KEY_MONTHLY_DATA_CYCLE_DAY_INT: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkPolicy", $r4);

        return i0;
    }

    android.os.Handler getHandlerForTesting()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        return $r1;
    }

    long getLimitBytesFromCarrierConfig(android.os.PersistableBundle, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, $l6;
        byte $b2, $b3, $b4;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.PersistableBundle r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r5 := @parameter0: android.os.PersistableBundle;

        l0 := @parameter1: long;

        if r5 != null goto label1;

        return l0;

     label1:
        l1 = virtualinvoke r5.<android.os.PersistableBundle: long getLong(java.lang.String)>("data_limit_threshold_bytes_long");

        $b2 = l1 cmp -2L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        $b3 = l1 cmp -1L;

        if $b3 != 0 goto label3;

        $l6 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getPlatformDefaultLimitBytes()>();

        return $l6;

     label3:
        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value in CarrierConfigManager.KEY_DATA_LIMIT_THRESHOLD_BYTES_LONG; expected a non-negative value but got: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkPolicy", $r4);

        return l0;

     label4:
        return l1;
    }

    public android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1, $i2, i3;
        android.content.Context $r1, $r2, $r8;
        android.util.ArrayMap $r3, $r4;
        java.lang.Object $r5, r14;
        android.net.NetworkPolicy $r6;
        java.lang.Throwable $r7, $r11;
        android.app.AppOpsManager $r9;
        android.net.NetworkPolicy[] $r10, r15;
        java.lang.String r12;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r12 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

     label01:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_PRIVILEGED_PHONE_STATE", "NetworkPolicy");

     label02:
        goto label04;

     label03:
        $r7 := @caughtexception;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_PHONE_STATE", "NetworkPolicy");

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.AppOpsManager mAppOps>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke $r9.<android.app.AppOpsManager: int noteOp(int,int,java.lang.String)>(51, $i1, r12);

        if $i2 == 0 goto label04;

        $r10 = newarray (android.net.NetworkPolicy)[0];

        return $r10;

     label04:
        r14 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r14;

     label05:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        r15 = newarray (android.net.NetworkPolicy)[i0];

     label06:
        i3 = 0;

     label07:
        if i3 >= i0 goto label10;

     label08:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r6 = (android.net.NetworkPolicy) $r5;

        r15[i3] = $r6;

     label09:
        i3 = i3 + 1;

        goto label07;

     label10:
        exitmonitor r14;

     label11:
        return r15;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r14;

     label14:
        throw $r11;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r5;
        android.net.NetworkQuotaInfo $r6;
        android.net.NetworkState r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r7 := @parameter0: android.net.NetworkState;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shame on UID ");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for calling the hidden API getNetworkQuotaInfo(). Shame!");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r5);

        $r6 = new android.net.NetworkQuotaInfo;

        specialinvoke $r6.<android.net.NetworkQuotaInfo: void <init>()>();

        return $r6;
    }

    public boolean getRestrictBackground()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        boolean z0;
        android.content.Context $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getRestrictBackgroundByCaller()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i2, $i3, $i4;
        java.lang.Object r1;
        long l1;
        android.content.Context $r2;
        boolean $z0;
        android.util.SparseIntArray $r3;
        java.lang.Throwable $r4, $r5;
        byte b5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "NetworkPolicy");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        i2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>(i0);

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label04:
        b5 = 3;

        if i2 != 1 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return 3;

     label07:
        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        if $z0 != 0 goto label09;

        exitmonitor r1;

     label08:
        return 1;

     label09:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i3 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int)>(i0);

        $i4 = $i3 & 4;

        if $i4 == 0 goto label11;

     label10:
        b5 = 2;

        goto label11;

     label11:
        exitmonitor r1;

     label12:
        return b5;

     label13:
        $r5 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label15:
        throw $r5;

     label16:
        $r4 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.telephony.SubscriptionPlan[] getSubscriptionPlans(int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1, $i2, $i18;
        java.lang.String r1, $r11, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r169, r170;
        java.lang.StringBuilder r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.util.SparseArray $r3, $r5;
        java.lang.Object $r4, $r6, r175;
        java.util.ArrayList $r12;
        java.time.ZonedDateTime $r20, $r21, $r22, $r23, $r27, $r28, $r32, $r33, $r34, $r35, $r39, $r40, $r44, $r45, $r46, $r47, $r52, $r53, $r57, $r58, $r59, $r60, $r65, $r66, $r70, $r71, $r72, $r73, $r77, $r78, $r82, $r86, $r90, $r91, $r95, $r99, $r100, $r104, $r108, $r109, $r113, $r118, $r119, $r123, $r127, $r128, $r132, $r136, $r137, $r141, $r145, $r146, $r150, $r154, $r155, $r159, $r163, $r164;
        android.telephony.SubscriptionPlan$Builder $r24, $r25, $r26, $r30, $r36, $r37, $r38, $r42, $r48, $r49, $r50, $r51, $r55, $r61, $r62, $r63, $r64, $r68, $r74, $r75, $r76, $r80, $r83, $r84, $r87, $r88, $r89, $r93, $r96, $r97, $r98, $r102, $r105, $r106, $r107, $r111, $r114, $r115, $r116, $r117, $r121, $r124, $r125, $r126, $r130, $r133, $r134, $r135, $r139, $r142, $r143, $r144, $r148, $r151, $r152, $r153, $r157, $r160, $r161, $r162, $r166;
        java.time.Instant $r29, $r41, $r54, $r67, $r79, $r92, $r101, $r110, $r120, $r129, $r138, $r147, $r156, $r165;
        long $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17;
        android.telephony.SubscriptionPlan $r31, $r43, $r56, $r69, $r81, $r85, $r94, $r103, $r112, $r122, $r131, $r140, $r149, $r158, $r167;
        java.lang.Throwable $r168;
        android.telephony.SubscriptionPlan[] $r172, $r174, r176;
        java.lang.Object[] $r173;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r169 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enforceSubscriptionPlanAccess(int,int,java.lang.String)>(i0, $i1, r169);

        r170 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("fw.fake_plan");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r170);

        if $z0 != 0 goto label08;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = "month_hard";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z2 == 0 goto label01;

        $r141 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2007-03-14T00:00:00.000Z");

        $r142 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r141);

        $r143 = virtualinvoke $r142.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile");

        $r144 = virtualinvoke $r143.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 1);

        $r145 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r146 = virtualinvoke $r145.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(36L);

        $r147 = virtualinvoke $r146.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l15 = virtualinvoke $r147.<java.time.Instant: long toEpochMilli()>();

        $r148 = virtualinvoke $r144.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(1073741824L, $l15);

        $r149 = virtualinvoke $r148.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r149);

        $r150 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2017-03-14T00:00:00.000Z");

        $r151 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r150);

        $r152 = virtualinvoke $r151.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile Happy");

        $r153 = virtualinvoke $r152.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(9223372036854775807L, 1);

        $r154 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r155 = virtualinvoke $r154.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(36L);

        $r156 = virtualinvoke $r155.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l16 = virtualinvoke $r156.<java.time.Instant: long toEpochMilli()>();

        $r157 = virtualinvoke $r153.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(5368709120L, $l16);

        $r158 = virtualinvoke $r157.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r158);

        $r159 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2017-03-14T00:00:00.000Z");

        $r160 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r159);

        $r161 = virtualinvoke $r160.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile, Charged after limit");

        $r162 = virtualinvoke $r161.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 1);

        $r163 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r164 = virtualinvoke $r163.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(36L);

        $r165 = virtualinvoke $r164.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l17 = virtualinvoke $r165.<java.time.Instant: long toEpochMilli()>();

        $r166 = virtualinvoke $r162.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(5368709120L, $l17);

        $r167 = virtualinvoke $r166.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r167);

        goto label07;

     label01:
        $r14 = "month_soft";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z3 == 0 goto label02;

        $r113 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2007-03-14T00:00:00.000Z");

        $r114 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r113);

        $r115 = virtualinvoke $r114.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile is the carriers name who this plan belongs to");

        $r116 = virtualinvoke $r115.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setSummary(java.lang.CharSequence)>("Crazy unlimited bandwidth plan with incredibly long title that should be cut off to prevent UI from looking terrible");

        $r117 = virtualinvoke $r116.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 2);

        $r118 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r119 = virtualinvoke $r118.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r120 = virtualinvoke $r119.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l12 = virtualinvoke $r120.<java.time.Instant: long toEpochMilli()>();

        $r121 = virtualinvoke $r117.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(1073741824L, $l12);

        $r122 = virtualinvoke $r121.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r122);

        $r123 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2017-03-14T00:00:00.000Z");

        $r124 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r123);

        $r125 = virtualinvoke $r124.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile, Throttled after limit");

        $r126 = virtualinvoke $r125.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 2);

        $r127 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r128 = virtualinvoke $r127.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r129 = virtualinvoke $r128.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l13 = virtualinvoke $r129.<java.time.Instant: long toEpochMilli()>();

        $r130 = virtualinvoke $r126.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(5368709120L, $l13);

        $r131 = virtualinvoke $r130.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r131);

        $r132 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2017-03-14T00:00:00.000Z");

        $r133 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r132);

        $r134 = virtualinvoke $r133.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile, No data connection after limit");

        $r135 = virtualinvoke $r134.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 0);

        $r136 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r137 = virtualinvoke $r136.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r138 = virtualinvoke $r137.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l14 = virtualinvoke $r138.<java.time.Instant: long toEpochMilli()>();

        $r139 = virtualinvoke $r135.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(5368709120L, $l14);

        $r140 = virtualinvoke $r139.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r140);

        goto label07;

     label02:
        $r15 = "month_over";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z4 == 0 goto label03;

        $r86 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2007-03-14T00:00:00.000Z");

        $r87 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r86);

        $r88 = virtualinvoke $r87.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile is the carriers name who this plan belongs to");

        $r89 = virtualinvoke $r88.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 2);

        $r90 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r91 = virtualinvoke $r90.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r92 = virtualinvoke $r91.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l9 = virtualinvoke $r92.<java.time.Instant: long toEpochMilli()>();

        $r93 = virtualinvoke $r89.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(6442450944L, $l9);

        $r94 = virtualinvoke $r93.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r94);

        $r95 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2017-03-14T00:00:00.000Z");

        $r96 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r95);

        $r97 = virtualinvoke $r96.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile, Throttled after limit");

        $r98 = virtualinvoke $r97.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 2);

        $r99 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r100 = virtualinvoke $r99.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r101 = virtualinvoke $r100.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l10 = virtualinvoke $r101.<java.time.Instant: long toEpochMilli()>();

        $r102 = virtualinvoke $r98.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(5368709120L, $l10);

        $r103 = virtualinvoke $r102.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r103);

        $r104 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2017-03-14T00:00:00.000Z");

        $r105 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r104);

        $r106 = virtualinvoke $r105.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile, No data connection after limit");

        $r107 = virtualinvoke $r106.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 0);

        $r108 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r109 = virtualinvoke $r108.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r110 = virtualinvoke $r109.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l11 = virtualinvoke $r110.<java.time.Instant: long toEpochMilli()>();

        $r111 = virtualinvoke $r107.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(5368709120L, $l11);

        $r112 = virtualinvoke $r111.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r112);

        goto label07;

     label03:
        $r16 = "month_none";

        $z5 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z5 == 0 goto label04;

        $r82 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>("2007-03-14T00:00:00.000Z");

        $r83 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createRecurringMonthly(java.time.ZonedDateTime)>($r82);

        $r84 = virtualinvoke $r83.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile");

        $r85 = virtualinvoke $r84.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r85);

        goto label07;

     label04:
        $r17 = "prepaid";

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z6 == 0 goto label05;

        $r70 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r71 = virtualinvoke $r70.<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>(20L);

        $r72 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r73 = virtualinvoke $r72.<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>(10L);

        $r74 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>($r71, $r73);

        $r75 = virtualinvoke $r74.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile");

        $r76 = virtualinvoke $r75.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(536870912L, 0);

        $r77 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r78 = virtualinvoke $r77.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(3L);

        $r79 = virtualinvoke $r78.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l8 = virtualinvoke $r79.<java.time.Instant: long toEpochMilli()>();

        $r80 = virtualinvoke $r76.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(104857600L, $l8);

        $r81 = virtualinvoke $r80.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r81);

        goto label07;

     label05:
        $r18 = "prepaid_crazy";

        $z7 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z7 == 0 goto label06;

        $r32 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r33 = virtualinvoke $r32.<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>(20L);

        $r34 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r35 = virtualinvoke $r34.<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>(10L);

        $r36 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>($r33, $r35);

        $r37 = virtualinvoke $r36.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile Anytime");

        $r38 = virtualinvoke $r37.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(536870912L, 0);

        $r39 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r40 = virtualinvoke $r39.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(3L);

        $r41 = virtualinvoke $r40.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l5 = virtualinvoke $r41.<java.time.Instant: long toEpochMilli()>();

        $r42 = virtualinvoke $r38.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(104857600L, $l5);

        $r43 = virtualinvoke $r42.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r43);

        $r44 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r45 = virtualinvoke $r44.<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>(10L);

        $r46 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r47 = virtualinvoke $r46.<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>(20L);

        $r48 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>($r45, $r47);

        $r49 = virtualinvoke $r48.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile Nickel Nights");

        $r50 = virtualinvoke $r49.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setSummary(java.lang.CharSequence)>("5\u00a2/GB between 1-5AM");

        $r51 = virtualinvoke $r50.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(5368709120L, 2);

        $r52 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r53 = virtualinvoke $r52.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(30L);

        $r54 = virtualinvoke $r53.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l6 = virtualinvoke $r54.<java.time.Instant: long toEpochMilli()>();

        $r55 = virtualinvoke $r51.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(15728640L, $l6);

        $r56 = virtualinvoke $r55.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r56);

        $r57 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r58 = virtualinvoke $r57.<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>(10L);

        $r59 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r60 = virtualinvoke $r59.<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>(20L);

        $r61 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>($r58, $r60);

        $r62 = virtualinvoke $r61.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile Bonus 3G");

        $r63 = virtualinvoke $r62.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setSummary(java.lang.CharSequence)>("Unlimited 3G data");

        $r64 = virtualinvoke $r63.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(1073741824L, 2);

        $r65 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r66 = virtualinvoke $r65.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(1L);

        $r67 = virtualinvoke $r66.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l7 = virtualinvoke $r67.<java.time.Instant: long toEpochMilli()>();

        $r68 = virtualinvoke $r64.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(314572800L, $l7);

        $r69 = virtualinvoke $r68.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r69);

        goto label07;

     label06:
        $r19 = "unlimited";

        $z8 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z8 == 0 goto label07;

        $r20 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r21 = virtualinvoke $r20.<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>(20L);

        $r22 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r23 = virtualinvoke $r22.<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>(10L);

        $r24 = staticinvoke <android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder createNonrecurring(java.time.ZonedDateTime,java.time.ZonedDateTime)>($r21, $r23);

        $r25 = virtualinvoke $r24.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setTitle(java.lang.CharSequence)>("G-Mobile Awesome");

        $r26 = virtualinvoke $r25.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataLimit(long,int)>(9223372036854775807L, 2);

        $r27 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime now()>();

        $r28 = virtualinvoke $r27.<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>(3L);

        $r29 = virtualinvoke $r28.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        $l4 = virtualinvoke $r29.<java.time.Instant: long toEpochMilli()>();

        $r30 = virtualinvoke $r26.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan$Builder setDataUsage(long,long)>(52428800L, $l4);

        $r31 = virtualinvoke $r30.<android.telephony.SubscriptionPlan$Builder: android.telephony.SubscriptionPlan build()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r31);

     label07:
        $i18 = interfaceinvoke $r12.<java.util.List: int size()>();

        $r172 = newarray (android.telephony.SubscriptionPlan)[$i18];

        $r173 = interfaceinvoke $r12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r172);

        $r174 = (android.telephony.SubscriptionPlan[]) $r173;

        return $r174;

     label08:
        r175 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r175;

     label09:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (java.lang.String) $r4;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, r169);

        if $z1 != 0 goto label13;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        if $i2 != 1000 goto label11;

     label10:
        goto label13;

     label11:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not returning plans because caller ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r169);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t match owner ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkPolicy", $r11);

        exitmonitor r175;

     label12:
        return null;

     label13:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r176 = (android.telephony.SubscriptionPlan[]) $r6;

        exitmonitor r175;

     label14:
        return r176;

     label15:
        $r168 := @caughtexception;

     label16:
        exitmonitor r175;

     label17:
        throw $r168;

        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public java.lang.String getSubscriptionPlansOwner(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r4;
        java.lang.SecurityException $r2;
        android.util.SparseArray $r3;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingAppId()>();

        if $i1 != 1000 goto label6;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (java.lang.String) $r4;

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

     label6:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getUidPolicy(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.lang.Object r1;
        android.content.Context $r3;
        android.util.SparseIntArray $r4;
        java.lang.Throwable $r5;
        int i0, i1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        exitmonitor r1;

     label2:
        return i1;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getUidsWithPolicy(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.Object r1;
        android.content.Context $r2;
        android.util.SparseIntArray $r3, $r4, $r5;
        java.lang.Throwable $r6;
        int[] r7, r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r7 = newarray (int)[0];

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

        i5 = 0;

     label01:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i3 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        if i5 >= $i3 goto label06;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r4.<android.util.SparseIntArray: int keyAt(int)>(i5);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int valueAt(int)>(i5);

     label02:
        if i0 != 0 goto label03;

        if i2 == 0 goto label04;

     label03:
        r8 = r7;

        $i4 = i2 & i0;

        if $i4 == 0 goto label05;

     label04:
        r8 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r7, i1);

     label05:
        i5 = i5 + 1;

        r7 = r8;

        goto label01;

     label06:
        exitmonitor r1;

     label07:
        return r7;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    long getWarningBytesFromCarrierConfig(android.os.PersistableBundle, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, $l6;
        byte $b2, $b3, $b4;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.PersistableBundle r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r5 := @parameter0: android.os.PersistableBundle;

        l0 := @parameter1: long;

        if r5 != null goto label1;

        return l0;

     label1:
        l1 = virtualinvoke r5.<android.os.PersistableBundle: long getLong(java.lang.String)>("data_warning_threshold_bytes_long");

        $b2 = l1 cmp -2L;

        if $b2 != 0 goto label2;

        return -1L;

     label2:
        $b3 = l1 cmp -1L;

        if $b3 != 0 goto label3;

        $l6 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getPlatformDefaultWarningBytes()>();

        return $l6;

     label3:
        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value in CarrierConfigManager.KEY_DATA_WARNING_THRESHOLD_BYTES_LONG; expected a non-negative value but got: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NetworkPolicy", $r4);

        return l0;

     label4:
        return l1;
    }

    void handleNetworkPoliciesUpdateAL(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void normalizePoliciesNL()>();

     label1:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkEnabledNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkRulesNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNotificationsNL()>();

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

        return;
    }

    void handleUidChanged(int, int, long)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        long l2;
        java.lang.Object r1;
        boolean z0, $z1;
        com.android.server.net.NetworkPolicyLogger $r2;
        android.app.ActivityManagerInternal $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "onUidStateChanged");

     label1:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label2:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r2.<com.android.server.net.NetworkPolicyLogger: void uidStateChanged(int,int,long)>(i0, i1, l2);

        z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean updateUidStateUL(int,int)>(i0, i1);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.ActivityManagerInternal mActivityManagerInternal>;

        virtualinvoke $r3.<android.app.ActivityManagerInternal: void notifyNetworkPolicyRulesUpdated(int,long)>(i0, l2);

        exitmonitor r1;

     label3:
        if z0 == 0 goto label5;

     label4:
        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidStateForeground(int)>(i1);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkStats(int,boolean)>(i0, $z1);

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

     label9:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    void handleUidGone(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0;
        java.lang.Throwable $r2, $r3;
        java.lang.Object r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "onUidGone");

     label1:
        r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r4;

     label2:
        z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean removeUidStateUL(int)>(i0);

        exitmonitor r4;

     label3:
        if z0 == 0 goto label5;

     label4:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworkStats(int,boolean)>(i0, 0);

     label5:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r4;

     label8:
        throw $r2;

     label9:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    boolean isUidForeground(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean z0;
        android.util.SparseIntArray $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidState>;

        $i1 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int,int)>(i0, 19);

        z0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidStateForeground(int)>($i1);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isUidIdle(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3;
        android.util.SparseBooleanArray $r1;
        boolean $z0, $z1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        android.app.usage.UsageStatsManagerInternal $r4;
        java.lang.Throwable $r5;
        java.lang.Object r6;
        java.lang.String[] r7;
        java.lang.String r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r6 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r6;

     label01:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z0 == 0 goto label03;

        exitmonitor r6;

     label02:
        return 0;

     label03:
        exitmonitor r6;

     label04:
        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r7 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>(i0);

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        if r7 == null goto label07;

        i2 = lengthof r7;

        i3 = 0;

     label05:
        if i3 >= i2 goto label07;

        r8 = r7[i3];

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStats>;

        $z1 = virtualinvoke $r4.<android.app.usage.UsageStatsManagerInternal: boolean isAppIdle(java.lang.String,int,int)>(r8, i0, i1);

        if $z1 != 0 goto label06;

        return 0;

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        return 1;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isUidNetworkingBlocked(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i2;
        long l1;
        java.lang.Object r1;
        boolean z0, z1, z2;
        com.android.internal.util.StatLogger $r3, $r7;
        android.content.Context $r4;
        android.util.SparseIntArray $r5;
        com.android.server.net.NetworkPolicyLogger $r6;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z1 := @parameter1: boolean;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        l1 = virtualinvoke $r3.<com.android.internal.util.StatLogger: long getTime()>();

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.OBSERVE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidRules>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        exitmonitor r1;

     label2:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        z2 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean isUidNetworkingBlockedInternal(int,int,boolean,boolean,com.android.server.net.NetworkPolicyLogger)>(i0, i2, z1, z0, $r6);

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r7.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(1, l1);

        return z2;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$networkScoreAndNetworkManagementServiceReady$0$NetworkPolicyManagerService(java.util.concurrent.CountDownLatch)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void initService(java.util.concurrent.CountDownLatch)>(r1);

        return;
    }

    public java.util.concurrent.CountDownLatch networkScoreAndNetworkManagementServiceReady()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.concurrent.CountDownLatch $r2;
        com.android.server.net._$$Lambda$NetworkPolicyManagerService$HDTUqowtgL_W_V0Kq6psXLWC9ws $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mNetworkManagerReady> = 1;

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r3 = new com.android.server.net._$$Lambda$NetworkPolicyManagerService$HDTUqowtgL_W_V0Kq6psXLWC9ws;

        specialinvoke $r3.<com.android.server.net._$$Lambda$NetworkPolicyManagerService$HDTUqowtgL_W_V0Kq6psXLWC9ws: void <init>(com.android.server.net.NetworkPolicyManagerService,java.util.concurrent.CountDownLatch)>(r0, $r2);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return $r2;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.net.NetworkPolicyManagerShellCommand $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.net.NetworkPolicyManagerShellCommand;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        specialinvoke $r7.<com.android.server.net.NetworkPolicyManagerShellCommand: void <init>(android.content.Context,com.android.server.net.NetworkPolicyManagerService)>($r8, r0);

        virtualinvoke $r7.<com.android.server.net.NetworkPolicyManagerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    void performSnooze(android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        long l1;
        java.lang.Object r1, r2, $r6;
        java.lang.StringBuilder r3;
        java.time.Clock $r4;
        android.util.ArrayMap $r5;
        java.lang.String $r9;
        java.lang.Throwable $r10, $r11;
        android.net.NetworkTemplate r12;
        android.net.NetworkPolicy r13;
        java.lang.IllegalArgumentException r14, r15;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r12 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: java.time.Clock mClock>;

        l1 = virtualinvoke $r4.<java.time.Clock: long millis()>();

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r2;

     label02:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (android.net.NetworkPolicy) $r6;

     label03:
        if r13 == null goto label13;

        if i0 == 34 goto label09;

        if i0 == 35 goto label07;

        if i0 != 45 goto label06;

     label04:
        r13.<android.net.NetworkPolicy: long lastRapidSnooze> = l1;

     label05:
        goto label10;

     label06:
        r14 = new java.lang.IllegalArgumentException;

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unexpected type");

        throw r14;

     label07:
        r13.<android.net.NetworkPolicy: long lastLimitSnooze> = l1;

     label08:
        goto label10;

     label09:
        r13.<android.net.NetworkPolicy: long lastWarningSnooze> = l1;

     label10:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void handleNetworkPoliciesUpdateAL(boolean)>(1);

        exitmonitor r2;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        r15 = new java.lang.IllegalArgumentException;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to find policy for ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r15;

     label14:
        $r11 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r11;

     label17:
        $r10 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public void registerListener(android.net.INetworkPolicyListener)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        java.lang.String[] $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "android.permission.CONNECTIVITY_INTERNAL";

        $r2[1] = "android.permission.OBSERVE_NETWORK_POLICY";

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enforceAnyPermissionOf(java.lang.String[])>($r2);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void removeUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, i3;
        java.lang.Object r1;
        android.content.Context $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7;
        android.util.SparseIntArray $r8;
        com.android.server.net.NetworkPolicyLogger $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 == 0 goto label9;

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label1:
        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i1 = virtualinvoke $r8.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

     label2:
        i3 = i1 & i2;

        if i1 == i3 goto label4;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,int,boolean)>(i0, i1, i3, 1);

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r9.<com.android.server.net.NetworkPolicyLogger: void uidPolicyChanged(int,int,int)>(i0, i1, i3);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

     label9:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean removeUserStateUL(int, boolean, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, z1, z2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i10, i11, i12, i13;
        com.android.server.net.NetworkPolicyLogger $r1;
        android.util.SparseBooleanArray $r2, $r6, $r7;
        android.util.SparseIntArray $r3, $r4, $r5;
        java.lang.Throwable $r8;
        int[] r9, r10;
        java.lang.Object r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i7 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r1.<com.android.server.net.NetworkPolicyLogger: void removingUserState(int)>(i7);

        z2 = 0;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        $i1 = virtualinvoke $r2.<android.util.SparseBooleanArray: int size()>();

        i8 = $i1 - 1;

     label01:
        if i8 < 0 goto label03;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        $i5 = virtualinvoke $r6.<android.util.SparseBooleanArray: int keyAt(int)>(i8);

        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i5);

        if $i6 != i7 goto label02;

        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        virtualinvoke $r7.<android.util.SparseBooleanArray: void removeAt(int)>(i8);

        z2 = 1;

     label02:
        i8 = i8 + -1;

        goto label01;

     label03:
        r9 = newarray (int)[0];

        i10 = 0;

     label04:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        $i2 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        if i10 >= $i2 goto label06;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i0 = virtualinvoke $r5.<android.util.SparseIntArray: int keyAt(int)>(i10);

        r10 = r9;

        $i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        if $i4 != i7 goto label05;

        r10 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r9, i0);

     label05:
        i10 = i10 + 1;

        r9 = r10;

        goto label04;

     label06:
        $i3 = lengthof r9;

        if $i3 <= 0 goto label09;

        i11 = lengthof r9;

        i12 = 0;

     label07:
        if i12 >= i11 goto label08;

        i13 = r9[i12];

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        virtualinvoke $r4.<android.util.SparseIntArray: void delete(int)>(i13);

        i12 = i12 + 1;

        goto label07;

     label08:
        z2 = 1;

     label09:
        r11 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r11;

        if z1 == 0 goto label13;

     label10:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForGlobalChangeAL(boolean)>(1);

     label11:
        goto label13;

     label12:
        $r8 := @caughtexception;

        goto label17;

     label13:
        if z0 == 0 goto label15;

        if z2 == 0 goto label15;

     label14:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void writePolicyAL()>();

     label15:
        exitmonitor r11;

     label16:
        return z2;

     label17:
        exitmonitor r11;

     label18:
        throw $r8;

        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label15 to label16 with label12;
        catch java.lang.Throwable from label17 to label18 with label12;
    }

    void setAppIdleWhitelist(int, boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object r1;
        long l1;
        android.content.Context $r2;
        android.util.SparseBooleanArray $r3, $r5, $r6;
        com.android.server.net.NetworkPolicyLogger $r4;
        java.lang.Throwable $r7, $r8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        $z1 = virtualinvoke $r3.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z1 != z0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r4.<com.android.server.net.NetworkPolicyLogger: void appIdleWlChanged(int,boolean)>(i0, z0);

     label05:
        if z0 == 0 goto label08;

     label06:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        virtualinvoke $r6.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

     label07:
        goto label09;

     label08:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mAppIdleTempWhitelistAppIds>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void delete(int)>(i0);

     label09:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRuleForAppIdleUL(int)>(i0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForPowerRestrictionsUL(int)>(i0);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        $r7 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label15:
        throw $r7;

     label16:
        $r8 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    void setDebugUid(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        com.android.server.net.NetworkPolicyLogger $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r1.<com.android.server.net.NetworkPolicyLogger: void setDebugUid(int)>(i0);

        return;
    }

    public void setDeviceIdleMode(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        android.content.Context $r2;
        com.android.server.net.NetworkPolicyLogger $r3;
        java.lang.Throwable $r4, $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "setDeviceIdleMode");

     label01:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label02:
        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        if $z1 != z0 goto label04;

        exitmonitor r1;

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label04:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode> = z0;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r3.<com.android.server.net.NetworkPolicyLogger: void deviceIdleModeEnabled(boolean)>(z0);

        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mSystemReady>;

        if $z2 == 0 goto label05;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForRestrictPowerUL()>();

     label05:
        exitmonitor r1;

     label06:
        if z0 == 0 goto label09;

     label07:
        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleOnPhase(java.lang.String)>("net");

     label08:
        goto label10;

     label09:
        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleOffPhase(java.lang.String)>("net");

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r4;

     label14:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    public void setNetworkPolicies(android.net.NetworkPolicy[])
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0;
        java.lang.Object r1, r2;
        android.content.Context $r3;
        java.lang.Throwable $r4, $r5, $r6;
        android.net.NetworkPolicy[] r7;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r7 := @parameter0: android.net.NetworkPolicy[];

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label02:
        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r2;

     label03:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void normalizePoliciesNL(android.net.NetworkPolicy[])>(r7);

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void handleNetworkPoliciesUpdateAL(boolean)>(0);

        exitmonitor r2;

     label04:
        exitmonitor r1;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label06:
        $r4 := @caughtexception;

     label07:
        exitmonitor r2;

     label08:
        throw $r4;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

     label12:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void setRestrictBackground(boolean)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        boolean z0;
        int i0;
        long l1;
        android.content.Context $r1;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.lang.Object r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        z0 := @parameter0: boolean;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "setRestrictBackground");

     label01:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r8 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r8;

     label03:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("uid:");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackgroundUL(boolean,java.lang.String)>(z0, $r4);

        exitmonitor r8;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label06:
        $r6 := @caughtexception;

     label07:
        exitmonitor r8;

     label08:
        throw $r6;

     label09:
        $r5 := @caughtexception;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label11:
        throw $r5;

     label12:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void setSubscriptionOverride(int, int, int, long, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i2, $i4, $i5, $i6;
        long l3;
        android.content.Context $r1;
        java.lang.Integer $r2, $r4;
        android.os.Message $r3, $r5;
        byte $b7;
        java.lang.Throwable $r6;
        java.lang.String r7;
        java.lang.Object r8;
        android.telephony.SubscriptionPlan r9;
        android.content.ContentResolver r10;
        boolean z2;
        android.os.Handler r11, r12;
        java.lang.IllegalStateException r13;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        l3 := @parameter3: long;

        r7 := @parameter4: java.lang.String;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enforceSubscriptionPlanAccess(int,int,java.lang.String)>(i0, $i4, r7);

        r8 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r8;

     label01:
        r9 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.SubscriptionPlan getPrimarySubscriptionPlanLocked(int)>(i0);

     label02:
        if r9 == null goto label09;

     label03:
        $i5 = virtualinvoke r9.<android.telephony.SubscriptionPlan: int getDataLimitBehavior()>();

        if $i5 == -1 goto label09;

        exitmonitor r8;

     label04:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r10 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z2 = 1;

        $i6 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r10, "netpolicy_override_enabled", 1);

        if $i6 == 0 goto label05;

        goto label06;

     label05:
        z2 = 0;

     label06:
        if z2 != 0 goto label07;

        if i2 != 0 goto label08;

     label07:
        r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = virtualinvoke r11.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(16, i1, i2, $r2);

        virtualinvoke r11.<android.os.Handler: boolean sendMessage(android.os.Message)>($r3);

        $b7 = l3 cmp 0L;

        if $b7 <= 0 goto label08;

        r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke r12.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(16, i1, 0, $r4);

        virtualinvoke r12.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r5, l3);

     label08:
        return;

     label09:
        r13 = new java.lang.IllegalStateException;

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must provide valid SubscriptionPlan to enable overriding");

        throw r13;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r8;

     label12:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setSubscriptionPlans(int, android.telephony.SubscriptionPlan[], java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, $i3, i5;
        long l2;
        java.lang.Object r1, r2, $r6;
        android.util.SparseArray $r3, $r4, $r5;
        java.lang.String $r9, r22, r23;
        android.content.Context $r12;
        android.os.Handler $r13, $r14;
        android.os.Message $r15;
        android.telephony.SubscriptionPlan $r16;
        java.lang.Throwable $r18, $r19, $r20;
        android.telephony.SubscriptionPlan[] r21;
        java.lang.StringBuilder r24;
        android.content.Intent r25;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r21 := @parameter1: android.telephony.SubscriptionPlan[];

        r22 := @parameter2: java.lang.String;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enforceSubscriptionPlanAccess(int,int,java.lang.String)>(i0, $i3, r22);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enforceSubscriptionPlanValidity(android.telephony.SubscriptionPlan[])>(r21);

        i1 = lengthof r21;

        i5 = 0;

     label01:
        if i5 >= i1 goto label02;

        $r16 = r21[i5];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r16);

        i5 = i5 + 1;

        goto label01;

     label02:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r1;

     label04:
        r2 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r2;

     label05:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r21);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r22);

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>(i0, null);

        r23 = (java.lang.String) $r6;

     label06:
        if r23 == null goto label09;

     label07:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean ensureActiveMobilePolicyAL(int,java.lang.String)>(i0, r23);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean maybeUpdateMobilePolicyCycleAL(int,java.lang.String)>(i0, r23);

     label08:
        goto label10;

     label09:
        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing subscriberId for subId ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("NetworkPolicy", $r9);

     label10:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void handleNetworkPoliciesUpdateAL(boolean)>(1);

        exitmonitor r2;

     label11:
        exitmonitor r1;

     label12:
        r25 = new android.content.Intent;

        specialinvoke r25.<android.content.Intent: void <init>(java.lang.String)>("android.telephony.action.SUBSCRIPTION_PLANS_CHANGED");

        virtualinvoke r25.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        virtualinvoke r25.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.telephony.extra.SUBSCRIPTION_INDEX", i0);

        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r12.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>(r25, "android.permission.MANAGE_SUBSCRIPTION_PLANS");

        $r14 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r13 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r15 = virtualinvoke $r13.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(19, i0, 0, r21);

        virtualinvoke $r14.<android.os.Handler: boolean sendMessage(android.os.Message)>($r15);

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label14:
        $r20 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r20;

     label17:
        $r18 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r18;

     label20:
        $r19 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r19;

        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    void setSubscriptionPlansOwner(int, java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        java.lang.String r1, $r7;
        android.content.Context $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.NETWORK_SETTINGS", "NetworkPolicy");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.sys.sub_plan_owner.");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    public void setUidPolicy(int, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1, i3;
        long l2;
        android.content.Context $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;
        android.util.SparseIntArray $r7;
        com.android.server.net.NetworkPolicyLogger $r8;
        java.lang.Throwable $r9, $r10;
        java.lang.Object r11;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        $z0 = staticinvoke <android.os.UserHandle: boolean isApp(int)>(i0);

        if $z0 == 0 goto label14;

        r11 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mUidRulesFirstLock>;

        entermonitor r11;

     label01:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r7 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i3 = virtualinvoke $r7.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

     label03:
        if i3 == i1 goto label05;

     label04:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicyUncheckedUL(int,int,int,boolean)>(i0, i3, i1, 1);

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.server.net.NetworkPolicyLogger mLogger>;

        virtualinvoke $r8.<com.android.server.net.NetworkPolicyLogger: void uidPolicyChanged(int,int,int)>(i0, i3, i1);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label06:
        exitmonitor r11;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label10:
        throw $r9;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r11;

     label13:
        throw $r10;

     label14:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot apply policy to UID ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setWifiMeteredOverride(java.lang.String, int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        long l1;
        android.net.wifi.WifiManager r1;
        java.util.Iterator r2;
        android.net.wifi.WifiConfiguration r3;
        android.content.Context $r4, $r5;
        java.lang.Object $r6, $r8;
        java.util.List $r7;
        boolean $z0, $z1;
        java.lang.String $r9, r11;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/wifi/WifiManager;");

        r1 = (android.net.wifi.WifiManager) $r6;

        $r7 = virtualinvoke r1.<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>();

        r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.wifi.WifiConfiguration) $r8;

        $r9 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String resolveNetworkId(android.net.wifi.WifiConfiguration)>(r3);

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r9, r11);

        if $z1 == 0 goto label3;

        r3.<android.net.wifi.WifiConfiguration: int meteredOverride> = i0;

        virtualinvoke r1.<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>(r3);

     label3:
        goto label2;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label5:
        $r10 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
    }

    public void snoozeLimit(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0;
        android.content.Context $r1;
        java.lang.Throwable $r2;
        android.net.NetworkTemplate r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r3 := @parameter0: android.net.NetworkTemplate;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_NETWORK_POLICY", "NetworkPolicy");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void performSnooze(android.net.NetworkTemplate,int)>(r3, 35);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void systemReady(java.util.concurrent.CountDownLatch)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.concurrent.TimeUnit $r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.Thread $r3;
        java.lang.IllegalStateException $r4, r6;
        java.util.concurrent.CountDownLatch r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r5 := @parameter0: java.util.concurrent.CountDownLatch;

     label1:
        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $z0 = virtualinvoke r5.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(30L, $r1);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        r6 = new java.lang.IllegalStateException;

        specialinvoke r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Service NetworkPolicy init timeout");

        throw r6;

     label4:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Service NetworkPolicy init interrupted", $r2);

        throw $r4;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.InterruptedException from label3 to label4 with label4;
    }

    public void unregisterListener(android.net.INetworkPolicyListener)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.INetworkPolicyListener r1;
        java.lang.String[] $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.net.INetworkPolicyListener;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "android.permission.CONNECTIVITY_INTERNAL";

        $r2[1] = "android.permission.OBSERVE_NETWORK_POLICY";

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enforceAnyPermissionOf(java.lang.String[])>($r2);

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList mListeners>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    void updateNetworkEnabledNL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, l2, $l5, $l7, $l8;
        android.net.NetworkPolicy r1;
        android.util.Pair r2;
        boolean $z0, $z1, $z2, z3, z4;
        com.android.internal.util.StatLogger $r3, $r5;
        android.util.ArrayMap $r4, $r6;
        int $i3, i11;
        java.lang.Object $r7, $r10, $r11, $r14;
        byte $b6, $b9;
        android.net.NetworkTemplate $r8, $r17, $r18;
        java.util.Iterator $r9;
        java.time.ZonedDateTime $r12, $r15;
        java.time.Instant $r13, $r16;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "updateNetworkEnabledNL()");

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateNetworkEnabledNL");

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        l0 = virtualinvoke $r3.<com.android.internal.util.StatLogger: long getTime()>();

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $i3 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        i11 = $i3 - 1;

     label2:
        z3 = 0;

        if i11 < 0 goto label9;

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i11);

        r1 = (android.net.NetworkPolicy) $r7;

        $l5 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $b6 = $l5 cmp -1L;

        if $b6 == 0 goto label7;

        $z1 = virtualinvoke r1.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z1 != 0 goto label3;

        goto label7;

     label3:
        $r9 = staticinvoke <android.net.NetworkPolicyManager: java.util.Iterator cycleIterator(android.net.NetworkPolicy)>(r1);

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.util.Pair) $r10;

        $r11 = r2.<android.util.Pair: java.lang.Object first>;

        $r12 = (java.time.ZonedDateTime) $r11;

        $r13 = virtualinvoke $r12.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l1 = virtualinvoke $r13.<java.time.Instant: long toEpochMilli()>();

        $r14 = r2.<android.util.Pair: java.lang.Object second>;

        $r15 = (java.time.ZonedDateTime) $r14;

        $r16 = virtualinvoke $r15.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l2 = virtualinvoke $r16.<java.time.Instant: long toEpochMilli()>();

        $r17 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $l7 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r17, l1, l2);

        $z2 = virtualinvoke r1.<android.net.NetworkPolicy: boolean isOverLimit(long)>($l7);

        if $z2 == 0 goto label4;

        $l8 = r1.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b9 = $l8 cmp l1;

        if $b9 >= 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        z4 = 0;

     label5:
        if z4 != 0 goto label6;

        z3 = 1;

     label6:
        $r18 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)>($r18, z3);

        goto label8;

     label7:
        $r8 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setNetworkTemplateEnabled(android.net.NetworkTemplate,boolean)>($r8, 1);

     label8:
        i11 = i11 + -1;

        goto label2;

     label9:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: com.android.internal.util.StatLogger mStatLogger>;

        virtualinvoke $r5.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(0, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;
    }

    void updateNetworkRulesNL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.net.NetworkTemplate r2, $r64, r96;
        long l0, l1, l2, $l5, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l20, $l22, $l25, $l27, $l30, $l32, $l33, l41, l44, l45, l46, l47, l50, l59, l60, l61, l62;
        float f0, $f1, $f2;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z10, $z11, $z12, $z13, z14, z15, z16;
        android.net.IConnectivityManager $r3;
        android.net.NetworkState[] $r4, r78;
        android.util.SparseIntArray $r5, $r76;
        android.util.ArrayMap $r6, $r9, $r47;
        android.util.ArraySet $r7, $r8, $r10, $r41, r98;
        int $i3, $i4, $i6, $i18, $i19, $i24, $i35, $i36, i38, i39, i40, i42, i43, $i48, i49, i51, i52, i54, i55, i56, i57, i58;
        android.content.Context $r11, $r72;
        android.util.SparseLongArray $r12, $r97;
        java.lang.String[] $r13, r99;
        java.lang.Object[] $r14;
        android.os.Handler $r15, $r17;
        android.os.Message $r16, $r19;
        java.lang.Long $r18;
        android.net.Network $r20, $r21, $r69, $r75;
        android.net.NetworkCapabilities $r22, $r45;
        byte $b7, $b8, $b21, $b23, $b26, $b28, $b31;
        java.util.Iterator $r23, $r50;
        java.lang.Object $r24, $r42, $r46, $r48, $r49, $r51, $r52, $r55, $r65, $r67;
        java.lang.Comparable $r25, $r28, $r32;
        java.time.ZonedDateTime $r26, $r29, $r33, $r35, $r37, $r53, $r56;
        java.time.Instant $r27, $r30, $r38, $r54, $r57, r95;
        java.time.Clock $r31;
        java.time.ZoneId $r34;
        java.time.temporal.ChronoUnit $r36;
        java.lang.String $r39, $r63, r86, r88, r89;
        java.util.concurrent.TimeUnit $r40;
        android.net.NetworkInfo $r43, $r44, $r70, $r71;
        java.lang.StringBuilder $r58;
        android.net.NetworkIdentity $r66, $r73;
        android.net.NetworkState $r68, r79, r87, r92;
        android.os.RemoteException $r77;
        android.net.NetworkPolicy r82;
        android.util.Pair r84;
        android.content.ContentResolver r90;
        android.telephony.SubscriptionPlan r93;
        android.util.Range r94;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z1 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z1 == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "updateNetworkRulesNL()");

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateNetworkRulesNL");

     label02:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.net.IConnectivityManager mConnManager>;

        $r4 = interfaceinvoke $r3.<android.net.IConnectivityManager: android.net.NetworkState[] getAllNetworkState()>();

        r78 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: android.net.NetworkState[] defeatNullable(android.net.NetworkState[])>($r4);

     label03:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mNetIdToSubId>;

        virtualinvoke $r5.<android.util.SparseIntArray: void clear()>();

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        i38 = lengthof r78;

        i39 = 0;

     label04:
        if i39 >= i38 goto label07;

        r79 = r78[i39];

        $r69 = r79.<android.net.NetworkState: android.net.Network network>;

        if $r69 == null goto label05;

        $r76 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mNetIdToSubId>;

        $r75 = r79.<android.net.NetworkState: android.net.Network network>;

        $i35 = $r75.<android.net.Network: int netId>;

        $i36 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int parseSubId(android.net.NetworkState)>(r79);

        virtualinvoke $r76.<android.util.SparseIntArray: void put(int,int)>($i35, $i36);

     label05:
        $r70 = r79.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r70 == null goto label06;

        $r71 = r79.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $z13 = virtualinvoke $r71.<android.net.NetworkInfo: boolean isConnected()>();

        if $z13 == 0 goto label06;

        $r72 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r73 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState,boolean,int)>($r72, r79, 1, 0);

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r79, $r73);

     label06:
        i39 = i39 + 1;

        goto label04;

     label07:
        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        $r8 = new android.util.ArraySet;

        specialinvoke $r8.<android.util.ArraySet: void <init>()>();

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        i40 = virtualinvoke $r9.<android.util.ArrayMap: int size()>();

        l41 = 9223372036854775807L;

        i42 = i40 + -1;

     label08:
        if i42 < 0 goto label28;

        $r47 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r48 = virtualinvoke $r47.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i42);

        r82 = (android.net.NetworkPolicy) $r48;

        virtualinvoke $r8.<android.util.ArraySet: void clear()>();

        $i19 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        i43 = $i19 - 1;

     label09:
        if i43 < 0 goto label11;

        $r64 = r82.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r65 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i43);

        $r66 = (android.net.NetworkIdentity) $r65;

        $z12 = virtualinvoke $r64.<android.net.NetworkTemplate: boolean matches(android.net.NetworkIdentity)>($r66);

        if $z12 == 0 goto label10;

        $r67 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i43);

        $r68 = (android.net.NetworkState) $r67;

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectIfaces(android.util.ArraySet,android.net.NetworkState)>($r8, $r68);

     label10:
        i43 = i43 + -1;

        goto label09;

     label11:
        $z8 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z8 == 0 goto label12;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Applying ");

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r82);

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ifaces ");

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r63 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r63);

     label12:
        $l20 = r82.<android.net.NetworkPolicy: long warningBytes>;

        $b21 = $l20 cmp -1L;

        if $b21 == 0 goto label13;

        z14 = 1;

        goto label14;

     label13:
        z14 = 0;

     label14:
        $l22 = r82.<android.net.NetworkPolicy: long limitBytes>;

        $b23 = $l22 cmp -1L;

        if $b23 == 0 goto label15;

        z15 = 1;

        goto label16;

     label15:
        z15 = 0;

     label16:
        if z15 != 0 goto label18;

        $z11 = r82.<android.net.NetworkPolicy: boolean metered>;

        if $z11 == 0 goto label17;

        goto label18;

     label17:
        goto label25;

     label18:
        if z15 == 0 goto label21;

        $z10 = virtualinvoke r82.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z10 == 0 goto label21;

        $r50 = staticinvoke <android.net.NetworkPolicyManager: java.util.Iterator cycleIterator(android.net.NetworkPolicy)>(r82);

        $r51 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r84 = (android.util.Pair) $r51;

        $r52 = r84.<android.util.Pair: java.lang.Object first>;

        $r53 = (java.time.ZonedDateTime) $r52;

        $r54 = virtualinvoke $r53.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l44 = virtualinvoke $r54.<java.time.Instant: long toEpochMilli()>();

        $r55 = r84.<android.util.Pair: java.lang.Object second>;

        $r56 = (java.time.ZonedDateTime) $r55;

        $r57 = virtualinvoke $r56.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l45 = virtualinvoke $r57.<java.time.Instant: long toEpochMilli()>();

        r2 = r82.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l46 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>(r2, l44, l45);

        $l30 = r82.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b31 = $l30 cmp l44;

        if $b31 < 0 goto label19;

        l47 = 9223372036854775807L;

        goto label20;

     label19:
        $l32 = r82.<android.net.NetworkPolicy: long limitBytes>;

        $l33 = $l32 - l46;

        l47 = staticinvoke <java.lang.Math: long max(long,long)>(1L, $l33);

     label20:
        goto label22;

     label21:
        l47 = 9223372036854775807L;

     label22:
        $i48 = virtualinvoke $r8.<android.util.ArraySet: int size()>();

        if $i48 <= 1 goto label23;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkPolicy", "shared quota unsupported; generating rule for each iface");

     label23:
        $i24 = virtualinvoke $r8.<android.util.ArraySet: int size()>();

        i49 = $i24 - 1;

     label24:
        if i49 < 0 goto label25;

        $r49 = virtualinvoke $r8.<android.util.ArraySet: java.lang.Object valueAt(int)>(i49);

        r86 = (java.lang.String) $r49;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setInterfaceQuotaAsync(java.lang.String,long)>(r86, l47);

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r86);

        i49 = i49 + -1;

        goto label24;

     label25:
        l50 = l41;

        if z14 == 0 goto label26;

        l50 = l41;

        $l27 = r82.<android.net.NetworkPolicy: long warningBytes>;

        $b28 = $l27 cmp l41;

        if $b28 >= 0 goto label26;

        l50 = r82.<android.net.NetworkPolicy: long warningBytes>;

     label26:
        l41 = l50;

        if z15 == 0 goto label27;

        l41 = l50;

        $l25 = r82.<android.net.NetworkPolicy: long limitBytes>;

        $b26 = $l25 cmp l50;

        if $b26 >= 0 goto label27;

        l41 = r82.<android.net.NetworkPolicy: long limitBytes>;

     label27:
        i42 = i42 + -1;

        goto label08;

     label28:
        i51 = lengthof r78;

        i52 = 0;

     label29:
        if i52 >= i51 goto label33;

        r87 = r78[i52];

        $r43 = r87.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r43 == null goto label32;

        $r44 = r87.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $z4 = virtualinvoke $r44.<android.net.NetworkInfo: boolean isConnected()>();

        if $z4 == 0 goto label32;

        $r45 = r87.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        $z5 = virtualinvoke $r45.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        if $z5 != 0 goto label32;

        virtualinvoke $r8.<android.util.ArraySet: void clear()>();

        staticinvoke <com.android.server.net.NetworkPolicyManagerService: void collectIfaces(android.util.ArraySet,android.net.NetworkState)>($r8, r87);

        $i18 = virtualinvoke $r8.<android.util.ArraySet: int size()>();

        i54 = $i18 - 1;

     label30:
        if i54 < 0 goto label32;

        $r46 = virtualinvoke $r8.<android.util.ArraySet: java.lang.Object valueAt(int)>(i54);

        r88 = (java.lang.String) $r46;

        $z6 = virtualinvoke $r7.<android.util.ArraySet: boolean contains(java.lang.Object)>(r88);

        if $z6 != 0 goto label31;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setInterfaceQuotaAsync(java.lang.String,long)>(r88, 9223372036854775807L);

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r88);

     label31:
        i54 = i54 + -1;

        goto label30;

     label32:
        i52 = i52 + 1;

        goto label29;

     label33:
        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $i3 = virtualinvoke $r10.<android.util.ArraySet: int size()>();

        i55 = $i3 - 1;

     label34:
        if i55 < 0 goto label36;

        $r41 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $r42 = virtualinvoke $r41.<android.util.ArraySet: java.lang.Object valueAt(int)>(i55);

        r89 = (java.lang.String) $r42;

        $z3 = virtualinvoke $r7.<android.util.ArraySet: boolean contains(java.lang.Object)>(r89);

        if $z3 != 0 goto label35;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void removeInterfaceQuotaAsync(java.lang.String)>(r89);

     label35:
        i55 = i55 + -1;

        goto label34;

     label36:
        r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces> = $r7;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        r90 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i4 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r90, "netpolicy_quota_enabled", 1);

        if $i4 == 0 goto label37;

        z16 = 1;

        goto label38;

     label37:
        z16 = 0;

     label38:
        $l5 = <com.android.server.net.NetworkPolicyManagerService: long QUOTA_UNLIMITED_DEFAULT>;

        l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>(r90, "netpolicy_quota_unlimited", $l5);

        f0 = staticinvoke <android.provider.Settings$Global: float getFloat(android.content.ContentResolver,java.lang.String,float)>(r90, "netpolicy_quota_limited", 0.1F);

        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseLongArray mSubscriptionOpportunisticQuota>;

        virtualinvoke $r12.<android.util.SparseLongArray: void clear()>();

        i56 = lengthof r78;

        i57 = 0;

     label39:
        if i57 >= i56 goto label48;

        r92 = r78[i57];

        if z16 != 0 goto label40;

        goto label47;

     label40:
        $r20 = r92.<android.net.NetworkState: android.net.Network network>;

        if $r20 != null goto label41;

        goto label47;

     label41:
        $r21 = r92.<android.net.NetworkState: android.net.Network network>;

        i58 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int getSubIdLocked(android.net.Network)>($r21);

        r93 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.SubscriptionPlan getPrimarySubscriptionPlanLocked(int)>(i58);

        if r93 != null goto label42;

        goto label47;

     label42:
        l59 = virtualinvoke r93.<android.telephony.SubscriptionPlan: long getDataLimitBytes()>();

        $r22 = r92.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        $z2 = virtualinvoke $r22.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        if $z2 != 0 goto label43;

        l60 = 0L;

        goto label46;

     label43:
        $b7 = l59 cmp -1L;

        if $b7 != 0 goto label44;

        l60 = -1L;

        goto label46;

     label44:
        $b8 = l59 cmp 9223372036854775807L;

        if $b8 != 0 goto label45;

        l60 = l0;

        goto label46;

     label45:
        $r23 = virtualinvoke r93.<android.telephony.SubscriptionPlan: java.util.Iterator cycleIterator()>();

        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r94 = (android.util.Range) $r24;

        $r25 = virtualinvoke r94.<android.util.Range: java.lang.Comparable getLower()>();

        $r26 = (java.time.ZonedDateTime) $r25;

        $r27 = virtualinvoke $r26.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l61 = virtualinvoke $r27.<java.time.Instant: long toEpochMilli()>();

        $r28 = virtualinvoke r94.<android.util.Range: java.lang.Comparable getUpper()>();

        $r29 = (java.time.ZonedDateTime) $r28;

        $r30 = virtualinvoke $r29.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l1 = virtualinvoke $r30.<java.time.Instant: long toEpochMilli()>();

        $r31 = r0.<com.android.server.net.NetworkPolicyManagerService: java.time.Clock mClock>;

        r95 = virtualinvoke $r31.<java.time.Clock: java.time.Instant instant()>();

        $r32 = virtualinvoke r94.<android.util.Range: java.lang.Comparable getLower()>();

        $r33 = (java.time.ZonedDateTime) $r32;

        $r34 = virtualinvoke $r33.<java.time.ZonedDateTime: java.time.ZoneId getZone()>();

        $r35 = staticinvoke <java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>(r95, $r34);

        $r36 = <java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit DAYS>;

        $r37 = virtualinvoke $r35.<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>($r36);

        $r38 = virtualinvoke $r37.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l2 = virtualinvoke $r38.<java.time.Instant: long toEpochMilli()>();

        $r39 = r92.<android.net.NetworkState: java.lang.String subscriberId>;

        r96 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)>($r39);

        l62 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>(r96, l61, l2);

        $l9 = l59 - l62;

        $l10 = virtualinvoke r95.<java.time.Instant: long toEpochMilli()>();

        $l11 = l1 - $l10;

        $l12 = $l11 - 1L;

        $r40 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        $l13 = virtualinvoke $r40.<java.util.concurrent.TimeUnit: long toMillis(long)>(1L);

        $l14 = $l12 / $l13;

        $l15 = $l14 + 1L;

        $l16 = $l9 / $l15;

        $f1 = (float) $l16;

        $f2 = $f1 * f0;

        $l17 = (long) $f2;

        l60 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l17);

     label46:
        $r97 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseLongArray mSubscriptionOpportunisticQuota>;

        virtualinvoke $r97.<android.util.SparseLongArray: void put(int,long)>(i58, l60);

     label47:
        i57 = i57 + 1;

        goto label39;

     label48:
        r98 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mMeteredIfaces>;

        $i6 = virtualinvoke r98.<android.util.ArraySet: int size()>();

        $r13 = newarray (java.lang.String)[$i6];

        $r14 = virtualinvoke r98.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        r99 = (java.lang.String[]) $r14;

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r16 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r99);

        virtualinvoke $r16.<android.os.Message: void sendToTarget()>();

        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r18 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l41);

        $r19 = virtualinvoke $r17.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(7, $r18);

        virtualinvoke $r19.<android.os.Message: void sendToTarget()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label49:
        $r77 := @caughtexception;

        return;

        catch android.os.RemoteException from label02 to label03 with label49;
    }

    void updateNetworks() throws java.lang.InterruptedException
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.concurrent.CountDownLatch $r2;
        com.android.server.net._$$Lambda$NetworkPolicyManagerService$lv2qqWetKVoJzbe7z3LT5idTu54 $r3;
        android.os.Handler $r4;
        java.util.concurrent.TimeUnit $r5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateNetworksInternal()>();

        $r2 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r2.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.Handler mHandler>;

        $r3 = new com.android.server.net._$$Lambda$NetworkPolicyManagerService$lv2qqWetKVoJzbe7z3LT5idTu54;

        specialinvoke $r3.<com.android.server.net._$$Lambda$NetworkPolicyManagerService$lv2qqWetKVoJzbe7z3LT5idTu54: void <init>(java.util.concurrent.CountDownLatch)>($r2);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(5L, $r5);

        return;
    }

    void updateNotificationsNL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        long l0, l1, l2, $l4, $l6, $l7, $l8, $l9, $l10, $l11, $l15, $l17, l24, l25, l26, l27, l28, l29;
        android.net.NetworkPolicy r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z12, z13, z14, z15;
        android.util.ArraySet $r2, $r3, $r4, $r8;
        java.time.Clock $r5;
        android.util.ArrayMap $r6, $r9;
        int $i3, i21, i22, i23, i30;
        java.lang.Object $r7, $r10, $r13, $r14, $r17;
        android.net.NetworkTemplate $r11, $r20, $r23, $r33, $r34, r42;
        java.util.Iterator $r12;
        java.time.ZonedDateTime $r15, $r18;
        java.time.Instant $r16, $r19;
        android.telephony.CarrierConfigManager $r21;
        byte $b5, $b12, $b13, $b16, $b18;
        java.util.concurrent.TimeUnit $r22;
        android.content.pm.ApplicationInfo $r24;
        java.lang.StringBuilder $r25;
        java.lang.String $r32;
        android.util.Pair r39;
        android.os.PersistableBundle r40;
        com.android.server.net.NetworkPolicyManagerService$NotificationId r43;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z2 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z2 == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "updateNotificationsNL()");

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateNotificationsNL");

        $r2 = new android.util.ArraySet;

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        specialinvoke $r2.<android.util.ArraySet: void <init>(android.util.ArraySet)>($r3);

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        virtualinvoke $r4.<android.util.ArraySet: void clear()>();

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: java.time.Clock mClock>;

        l0 = virtualinvoke $r5.<java.time.Clock: long millis()>();

        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        i21 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        i22 = i21 + -1;

     label02:
        if i22 < 0 goto label22;

        $r9 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i22);

        r1 = (android.net.NetworkPolicy) $r10;

        $r11 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        i23 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: int findRelevantSubIdNL(android.net.NetworkTemplate)>($r11);

        if i23 != -1 goto label03;

        goto label21;

     label03:
        $z4 = virtualinvoke r1.<android.net.NetworkPolicy: boolean hasCycle()>();

        if $z4 != 0 goto label04;

        goto label21;

     label04:
        $r12 = staticinvoke <android.net.NetworkPolicyManager: java.util.Iterator cycleIterator(android.net.NetworkPolicy)>(r1);

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r39 = (android.util.Pair) $r13;

        $r14 = r39.<android.util.Pair: java.lang.Object first>;

        $r15 = (java.time.ZonedDateTime) $r14;

        $r16 = virtualinvoke $r15.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l24 = virtualinvoke $r16.<java.time.Instant: long toEpochMilli()>();

        $r17 = r39.<android.util.Pair: java.lang.Object second>;

        $r18 = (java.time.ZonedDateTime) $r17;

        $r19 = virtualinvoke $r18.<java.time.ZonedDateTime: java.time.Instant toInstant()>();

        l25 = virtualinvoke $r19.<java.time.Instant: long toEpochMilli()>();

        $r20 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l26 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r20, l24, l25);

        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.telephony.CarrierConfigManager mCarrierConfigManager>;

        r40 = virtualinvoke $r21.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>(i23);

        $z5 = staticinvoke <android.telephony.CarrierConfigManager: boolean isConfigForIdentifiedCarrier(android.os.PersistableBundle)>(r40);

        if $z5 != 0 goto label06;

        $z10 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z10 == 0 goto label05;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "isConfigForIdentifiedCarrier returned false");

     label05:
        return;

     label06:
        z12 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean getBooleanDefeatingNullable(android.os.PersistableBundle,java.lang.String,boolean)>(r40, "data_warning_notification_bool", 1);

        z0 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean getBooleanDefeatingNullable(android.os.PersistableBundle,java.lang.String,boolean)>(r40, "data_limit_notification_bool", 1);

        z1 = staticinvoke <com.android.server.net.NetworkPolicyManagerService: boolean getBooleanDefeatingNullable(android.os.PersistableBundle,java.lang.String,boolean)>(r40, "data_rapid_notification_bool", 1);

        z13 = 0;

        if z12 == 0 goto label11;

        $z8 = virtualinvoke r1.<android.net.NetworkPolicy: boolean isOverWarning(long)>(l26);

        if $z8 == 0 goto label10;

        $z9 = virtualinvoke r1.<android.net.NetworkPolicy: boolean isOverLimit(long)>(l26);

        if $z9 != 0 goto label10;

        $l17 = r1.<android.net.NetworkPolicy: long lastWarningSnooze>;

        $b18 = $l17 cmp l24;

        if $b18 < 0 goto label07;

        z14 = 1;

        goto label08;

     label07:
        z14 = 0;

     label08:
        if z14 != 0 goto label09;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long,android.content.pm.ApplicationInfo)>(r1, 34, l26, null);

        goto label11;

     label09:
        goto label11;

     label10:
        goto label11;

     label11:
        if z0 == 0 goto label17;

        $z7 = virtualinvoke r1.<android.net.NetworkPolicy: boolean isOverLimit(long)>(l26);

        if $z7 == 0 goto label16;

        $l15 = r1.<android.net.NetworkPolicy: long lastLimitSnooze>;

        $b16 = $l15 cmp l24;

        if $b16 < 0 goto label12;

        z15 = 1;

        goto label13;

     label12:
        z15 = 0;

     label13:
        if z15 == 0 goto label14;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long,android.content.pm.ApplicationInfo)>(r1, 36, l26, null);

        goto label15;

     label14:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long,android.content.pm.ApplicationInfo)>(r1, 35, l26, null);

        $r34 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void notifyOverLimitNL(android.net.NetworkTemplate)>($r34);

     label15:
        goto label17;

     label16:
        $r33 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void notifyUnderLimitNL(android.net.NetworkTemplate)>($r33);

        goto label17;

     label17:
        if z1 == 0 goto label21;

        $l4 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $b5 = $l4 cmp -1L;

        if $b5 == 0 goto label21;

        $r22 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit DAYS>;

        l1 = virtualinvoke $r22.<java.util.concurrent.TimeUnit: long toMillis(long)>(4L);

        l27 = l0 - l1;

        $r23 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        l2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: long getTotalBytes(android.net.NetworkTemplate,long,long)>($r23, l27, l0);

        $l6 = l25 - l24;

        $l7 = l2 * $l6;

        l28 = $l7 / l1;

        $l8 = r1.<android.net.NetworkPolicy: long limitBytes>;

        $l9 = $l8 * 3L;

        l29 = $l9 / 2L;

        $z6 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z6 == 0 goto label18;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Rapid usage considering recent ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" projected ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l28);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" alert ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l29);

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r32);

        goto label18;

     label18:
        $l11 = r1.<android.net.NetworkPolicy: long lastRapidSnooze>;

        $l10 = l0 - 86400000L;

        $b12 = $l11 cmp $l10;

        if $b12 < 0 goto label19;

        z13 = 1;

     label19:
        $b13 = l28 cmp l29;

        if $b13 <= 0 goto label20;

        if z13 != 0 goto label20;

        r42 = r1.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        $r24 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: android.content.pm.ApplicationInfo findRapidBlame(android.net.NetworkTemplate,long,long)>(r42, l27, l0);

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void enqueueNotification(android.net.NetworkPolicy,int,long,android.content.pm.ApplicationInfo)>(r1, 45, 0L, $r24);

        goto label21;

     label20:
        goto label21;

     label21:
        i22 = i22 + -1;

        goto label02;

     label22:
        $i3 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        i30 = $i3 - 1;

     label23:
        if i30 < 0 goto label25;

        $r7 = virtualinvoke $r2.<android.util.ArraySet: java.lang.Object valueAt(int)>(i30);

        r43 = (com.android.server.net.NetworkPolicyManagerService$NotificationId) $r7;

        $r8 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArraySet mActiveNotifs>;

        $z3 = virtualinvoke $r8.<android.util.ArraySet: boolean contains(java.lang.Object)>(r43);

        if $z3 != 0 goto label24;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void cancelNotification(com.android.server.net.NetworkPolicyManagerService$NotificationId)>(r43);

     label24:
        i30 = i30 + -1;

        goto label23;

     label25:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;
    }

    void updateRestrictBackgroundByLowPowerModeUL(android.os.PowerSaveState)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.os.PowerSaveState r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        r1 := @parameter0: android.os.PowerSaveState;

        $z1 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode>;

        $z0 = r1.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        if $z1 != $z0 goto label1;

        return;

     label1:
        $z2 = r1.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode> = $z2;

        z7 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode>;

        z8 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundChangedInBsm>;

        $z3 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundLowPowerMode>;

        if $z3 == 0 goto label2;

        $z5 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        z9 = $z5 ^ 1;

        $z6 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundBeforeBsm> = $z6;

        z8 = 0;

        goto label3;

     label2:
        $z4 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundChangedInBsm>;

        z9 = $z4 ^ 1;

        z7 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundBeforeBsm>;

     label3:
        if z9 == 0 goto label4;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackgroundUL(boolean,java.lang.String)>(z7, "low_power");

     label4:
        r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackgroundChangedInBsm> = z8;

        return;
    }

    void updateRuleForAppIdleUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.util.SparseBooleanArray $r1;
        java.lang.String $r5, $r8, $r12;
        java.lang.StringBuilder $r9, r15, r16;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidValidForBlacklistRulesUL(int)>(i0);

        if $z1 != 0 goto label1;

        return;

     label1:
        $z2 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(2097152L);

        if $z2 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRuleForAppIdleUL: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, $r12);

     label2:
        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int)>(i1);

     label3:
        if z0 != 0 goto label6;

     label4:
        $z3 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidIdle(int)>(i0);

        if $z3 == 0 goto label6;

        $z4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean isUidForegroundOnRestrictPowerUL(int)>(i0);

        if $z4 != 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRule(int,int,int)>(2, i0, 2);

        $z5 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z5 == 0 goto label7;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRuleForAppIdleUL DENY ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r8);

     label5:
        goto label7;

     label6:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRule(int,int,int)>(2, i0, 0);

        $z6 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGD>;

        if $z6 == 0 goto label7;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRuleForAppIdleUL ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to DEFAULT");

        $r5 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("NetworkPolicy", $r5);

     label7:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label8:
        $r13 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    void updateRuleForDeviceIdleUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedPowerSaveUL(int,boolean,int)>(i0, $z0, 1);

        return;
    }

    void updateRuleForRestrictPowerUL(int)
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedPowerSaveUL(int,boolean,int)>(i0, $z0, 3);

        return;
    }

    void updateRulesForAppIdleUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseIntArray r1;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        android.os.UserManager $r2;
        java.lang.Object $r3;
        android.app.usage.UsageStatsManagerInternal $r4;
        android.util.SparseBooleanArray $r5;
        boolean $z0, $z1;
        java.lang.Throwable $r6;
        java.util.List r7;
        android.content.pm.UserInfo r8;
        int[] r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateRulesForAppIdleUL");

     label01:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallStandbyRules>;

        virtualinvoke r1.<android.util.SparseIntArray: void clear()>();

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.os.UserManager mUserManager>;

        r7 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUsers()>();

        $i2 = interfaceinvoke r7.<java.util.List: int size()>();

        i5 = $i2 - 1;

     label02:
        if i5 < 0 goto label09;

     label03:
        $r3 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i5);

        r8 = (android.content.pm.UserInfo) $r3;

        $r4 = r0.<com.android.server.net.NetworkPolicyManagerService: android.app.usage.UsageStatsManagerInternal mUsageStats>;

        $i3 = r8.<android.content.pm.UserInfo: int id>;

        r9 = virtualinvoke $r4.<android.app.usage.UsageStatsManagerInternal: int[] getIdleUidsForUser(int)>($i3);

        i0 = lengthof r9;

     label04:
        i6 = 0;

     label05:
        if i6 >= i0 goto label08;

        i1 = r9[i6];

     label06:
        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mPowerSaveTempWhitelistAppIds>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        $z0 = virtualinvoke $r5.<android.util.SparseBooleanArray: boolean get(int,boolean)>($i4, 0);

        if $z0 != 0 goto label07;

        $z1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: boolean hasInternetPermissionUL(int)>(i1);

        if $z1 == 0 goto label07;

        virtualinvoke r1.<android.util.SparseIntArray: void put(int,int)>(i1, 2);

     label07:
        i6 = i6 + 1;

        goto label05;

     label08:
        i5 = i5 + -1;

        goto label02;

     label09:
        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void setUidFirewallRulesUL(int,android.util.SparseIntArray,int)>(2, r1, 0);

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    void updateRulesForDeviceIdleUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseIntArray $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateRulesForDeviceIdleUL");

     label1:
        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mDeviceIdleMode>;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallDozableRules>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedPowerSaveUL(boolean,int,android.util.SparseIntArray)>($z0, 1, $r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void updateRulesForPowerSaveUL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        android.util.SparseIntArray $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateRulesForPowerSaveUL");

     label1:
        $z0 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictPower>;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidFirewallPowerSaveRules>;

        specialinvoke r0.<com.android.server.net.NetworkPolicyManagerService: void updateRulesForWhitelistedPowerSaveUL(boolean,int,android.util.SparseIntArray)>($z0, 3, $r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void updateSubscriptions()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        java.util.Iterator r2;
        boolean $z0, $z1, $z3;
        android.content.Context $r3, $r5;
        java.lang.Object $r4, $r6, $r12, $r14, r30;
        java.util.List $r7, r25;
        java.util.ArrayList $r8;
        android.util.SparseArray $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i6, i8;
        java.lang.String $r13, $r19, r28;
        android.telephony.SubscriptionInfo $r15;
        java.lang.StringBuilder $r16;
        java.lang.String[] $r20, $r21;
        java.lang.Throwable $r22;
        android.telephony.TelephonyManager r23, r27;
        android.telephony.SubscriptionManager r24;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z0 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "updateSubscriptions()");

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "updateSubscriptions");

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r23 = (android.telephony.TelephonyManager) $r4;

        $r5 = r0.<com.android.server.net.NetworkPolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/SubscriptionManager;");

        r24 = (android.telephony.SubscriptionManager) $r6;

        $r7 = virtualinvoke r24.<android.telephony.SubscriptionManager: java.util.List getActiveSubscriptionInfoList()>();

        r25 = staticinvoke <com.android.internal.util.CollectionUtils: java.util.List emptyIfNull(java.util.List)>($r7);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9 = new android.util.SparseArray;

        $i0 = interfaceinvoke r25.<java.util.List: int size()>();

        specialinvoke $r9.<android.util.SparseArray: void <init>(int)>($i0);

        r2 = interfaceinvoke r25.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (android.telephony.SubscriptionInfo) $r14;

        $i3 = virtualinvoke $r15.<android.telephony.SubscriptionInfo: int getSubscriptionId()>();

        r27 = virtualinvoke r23.<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>($i3);

        r28 = virtualinvoke r27.<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r28);

        if $z1 != 0 goto label03;

        $i6 = virtualinvoke r27.<android.telephony.TelephonyManager: int getSubscriptionId()>();

        virtualinvoke $r9.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r28);

        goto label04;

     label03:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing subscriberId for subId ");

        $i4 = virtualinvoke r27.<android.telephony.TelephonyManager: int getSubscriptionId()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("NetworkPolicy", $r19);

     label04:
        $r20 = virtualinvoke r27.<android.telephony.TelephonyManager: java.lang.String[] getMergedImsisFromGroup()>();

        $r21 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.String[] defeatNullable(java.lang.String[])>($r20);

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label02;

     label05:
        r30 = r0.<com.android.server.net.NetworkPolicyManagerService: java.lang.Object mNetworkPoliciesSecondLock>;

        entermonitor r30;

     label06:
        $r10 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        virtualinvoke $r10.<android.util.SparseArray: void clear()>();

     label07:
        i8 = 0;

     label08:
        $i1 = virtualinvoke $r9.<android.util.SparseArray: int size()>();

        if i8 >= $i1 goto label10;

        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubIdToSubscriberId>;

        $i2 = virtualinvoke $r9.<android.util.SparseArray: int keyAt(int)>(i8);

        $r12 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(i8);

        $r13 = (java.lang.String) $r12;

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r13);

     label09:
        i8 = i8 + 1;

        goto label08;

     label10:
        r0.<com.android.server.net.NetworkPolicyManagerService: java.util.List mMergedSubscriberIds> = $r8;

        exitmonitor r30;

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label12:
        $r22 := @caughtexception;

     label13:
        exitmonitor r30;

     label14:
        throw $r22;

        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void writePolicyAL()
    {
        com.android.server.net.NetworkPolicyManagerService r0;
        com.android.internal.util.FastXmlSerializer r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.telephony.SubscriptionPlan[] r3;
        int i0, $i2, $i5, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        android.telephony.SubscriptionPlan r4;
        android.util.RecurrenceRule r5, $r42, $r45, $r48;
        android.util.AtomicFile $r6, $r55, r83;
        java.nio.charset.Charset $r7;
        java.lang.String $r8, $r31, $r33, $r35, $r44, $r47, $r50, r66, r70, r71, r75, r76, r78, r79;
        java.lang.Boolean $r9;
        android.util.SparseArray $r11, $r24, $r25, $r27;
        android.util.SparseIntArray $r12, $r20, $r21;
        android.util.SparseBooleanArray $r15, $r17;
        java.lang.Object $r26, $r28, $r40;
        java.time.ZonedDateTime $r30, $r32, $r43, $r46;
        java.time.Period $r34, $r49;
        java.lang.CharSequence $r36, $r37;
        long $l1, $l3, $l4, $l6, $l7, $l8, $l9;
        android.util.ArrayMap $r39, $r65;
        java.lang.Throwable $r54, $r56, $r57, $r58, $r59, $r60;
        java.io.FileOutputStream r62, r63, r64;
        android.net.NetworkPolicy r68;
        android.net.NetworkTemplate r69;

        r0 := @this: com.android.server.net.NetworkPolicyManagerService;

        $z1 = <com.android.server.net.NetworkPolicyManagerService: boolean LOGV>;

        if $z1 == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkPolicy", "writePolicyAL()");

     label01:
        r62 = null;

     label02:
        $r6 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        r63 = virtualinvoke $r6.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label03:
        r62 = r63;

        r64 = r63;

     label04:
        r2 = new com.android.internal.util.FastXmlSerializer;

     label05:
        r64 = r63;

     label06:
        specialinvoke r2.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label07:
        r64 = r63;

     label08:
        $r7 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r63, $r8);

     label09:
        r64 = r63;

     label10:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

     label11:
        r64 = r63;

     label12:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policy-list");

     label13:
        r64 = r63;

     label14:
        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "version", 11);

     label15:
        r64 = r63;

     label16:
        $z2 = r0.<com.android.server.net.NetworkPolicyManagerService: boolean mRestrictBackground>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "restrictBackground", $z2);

     label17:
        i11 = 0;

     label18:
        r64 = r63;

     label19:
        $r65 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        i12 = virtualinvoke $r65.<android.util.ArrayMap: int size()>();

     label20:
        r66 = "limitBytes";

        if i11 >= i12 goto label34;

     label21:
        $r39 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.ArrayMap mNetworkPolicy>;

        $r40 = virtualinvoke $r39.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i11);

        r68 = (android.net.NetworkPolicy) $r40;

        r69 = r68.<android.net.NetworkPolicy: android.net.NetworkTemplate template>;

        z0 = virtualinvoke r69.<android.net.NetworkTemplate: boolean isPersistable()>();

     label22:
        if z0 != 0 goto label23;

        goto label32;

     label23:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "network-policy");

        $i5 = virtualinvoke r69.<android.net.NetworkTemplate: int getMatchRule()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "networkTemplate", $i5);

        r70 = virtualinvoke r69.<android.net.NetworkTemplate: java.lang.String getSubscriberId()>();

     label24:
        if r70 == null goto label27;

     label25:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "subscriberId", r70);

     label26:
        goto label27;

     label27:
        r71 = virtualinvoke r69.<android.net.NetworkTemplate: java.lang.String getNetworkId()>();

     label28:
        if r71 == null goto label31;

     label29:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "networkId", r71);

     label30:
        goto label31;

     label31:
        $r42 = r68.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r43 = $r42.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r44 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r43);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "cycleStart", $r44);

        $r45 = r68.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r46 = $r45.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $r47 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r46);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "cycleEnd", $r47);

        $r48 = r68.<android.net.NetworkPolicy: android.util.RecurrenceRule cycleRule>;

        $r49 = $r48.<android.util.RecurrenceRule: java.time.Period period>;

        $r50 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertPeriod(java.time.Period)>($r49);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "cyclePeriod", $r50);

        $l6 = r68.<android.net.NetworkPolicy: long warningBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "warningBytes", $l6);

        $l7 = r68.<android.net.NetworkPolicy: long limitBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "limitBytes", $l7);

        $l8 = r68.<android.net.NetworkPolicy: long lastWarningSnooze>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "lastWarningSnooze", $l8);

        $l9 = r68.<android.net.NetworkPolicy: long lastLimitSnooze>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "lastLimitSnooze", $l9);

        $z4 = r68.<android.net.NetworkPolicy: boolean metered>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "metered", $z4);

        $z5 = r68.<android.net.NetworkPolicy: boolean inferred>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "inferred", $z5);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "network-policy");

     label32:
        i11 = i11 + 1;

        goto label18;

     label33:
        $r60 := @caughtexception;

        goto label66;

     label34:
        i13 = 0;

        r75 = "cyclePeriod";

     label35:
        $r11 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        i14 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

     label36:
        if i13 >= i14 goto label47;

     label37:
        $r24 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        i15 = virtualinvoke $r24.<android.util.SparseArray: int keyAt(int)>(i13);

        $r25 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlansOwner>;

        $r26 = virtualinvoke $r25.<android.util.SparseArray: java.lang.Object get(int)>(i15);

        r76 = (java.lang.String) $r26;

        $r27 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray mSubscriptionPlans>;

        $r28 = virtualinvoke $r27.<android.util.SparseArray: java.lang.Object valueAt(int)>(i13);

        r3 = (android.telephony.SubscriptionPlan[]) $r28;

        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r3);

        if $z3 == 0 goto label39;

     label38:
        r78 = r75;

        r79 = r66;

        goto label45;

     label39:
        i0 = lengthof r3;

     label40:
        i16 = 0;

     label41:
        if i16 >= i0 goto label44;

        r4 = r3[i16];

     label42:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "subscription-plan");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "subId", i15);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "ownerPackage", r76);

        r5 = virtualinvoke r4.<android.telephony.SubscriptionPlan: android.util.RecurrenceRule getCycleRule()>();

        $r30 = r5.<android.util.RecurrenceRule: java.time.ZonedDateTime start>;

        $r31 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r30);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "cycleStart", $r31);

        $r32 = r5.<android.util.RecurrenceRule: java.time.ZonedDateTime end>;

        $r33 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertZonedDateTime(java.time.ZonedDateTime)>($r32);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "cycleEnd", $r33);

        $r34 = r5.<android.util.RecurrenceRule: java.time.Period period>;

        $r35 = staticinvoke <android.util.RecurrenceRule: java.lang.String convertPeriod(java.time.Period)>($r34);

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, r75, $r35);

        $r36 = virtualinvoke r4.<android.telephony.SubscriptionPlan: java.lang.CharSequence getTitle()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "title", $r36);

        $r37 = virtualinvoke r4.<android.telephony.SubscriptionPlan: java.lang.CharSequence getSummary()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "summary", $r37);

        $l1 = virtualinvoke r4.<android.telephony.SubscriptionPlan: long getDataLimitBytes()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, r66, $l1);

        $i2 = virtualinvoke r4.<android.telephony.SubscriptionPlan: int getDataLimitBehavior()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "limitBehavior", $i2);

        $l3 = virtualinvoke r4.<android.telephony.SubscriptionPlan: long getDataUsageBytes()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "usageBytes", $l3);

        $l4 = virtualinvoke r4.<android.telephony.SubscriptionPlan: long getDataUsageTime()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "usageTime", $l4);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "subscription-plan");

     label43:
        i16 = i16 + 1;

        goto label41;

     label44:
        r79 = r66;

        r78 = r75;

     label45:
        i13 = i13 + 1;

        r66 = r79;

        r75 = r78;

        goto label35;

     label46:
        $r56 := @caughtexception;

        goto label66;

     label47:
        i17 = 0;

     label48:
        $r12 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i18 = virtualinvoke $r12.<android.util.SparseIntArray: int size()>();

     label49:
        if i17 >= i18 goto label54;

     label50:
        $r20 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i19 = virtualinvoke $r20.<android.util.SparseIntArray: int keyAt(int)>(i17);

        $r21 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray mUidPolicy>;

        i20 = virtualinvoke $r21.<android.util.SparseIntArray: int valueAt(int)>(i17);

     label51:
        if i20 != 0 goto label52;

        goto label53;

     label52:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "uid-policy");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "uid", i19);

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "policy", i20);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "uid-policy");

     label53:
        i17 = i17 + 1;

        goto label48;

     label54:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policy-list");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "whitelist");

        $r15 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        i21 = virtualinvoke $r15.<android.util.SparseBooleanArray: int size()>();

     label55:
        i22 = 0;

     label56:
        if i22 >= i21 goto label59;

     label57:
        $r17 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.SparseBooleanArray mRestrictBackgroundWhitelistRevokedUids>;

        i23 = virtualinvoke $r17.<android.util.SparseBooleanArray: int keyAt(int)>(i22);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "revoked-restrict-background");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r2, "uid", i23);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "revoked-restrict-background");

     label58:
        i22 = i22 + 1;

        goto label56;

     label59:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "whitelist");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        r83 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

     label60:
        virtualinvoke r83.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r63);

     label61:
        goto label67;

     label62:
        $r54 := @caughtexception;

        r62 = r63;

        goto label66;

     label63:
        $r57 := @caughtexception;

        r62 = r63;

        goto label66;

     label64:
        $r58 := @caughtexception;

        r62 = r64;

        goto label66;

     label65:
        $r59 := @caughtexception;

     label66:
        if r62 == null goto label67;

        $r55 = r0.<com.android.server.net.NetworkPolicyManagerService: android.util.AtomicFile mPolicyFile>;

        virtualinvoke $r55.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r62);

     label67:
        return;

        catch java.io.IOException from label02 to label03 with label65;
        catch java.io.IOException from label04 to label05 with label64;
        catch java.io.IOException from label06 to label07 with label64;
        catch java.io.IOException from label08 to label09 with label64;
        catch java.io.IOException from label10 to label11 with label64;
        catch java.io.IOException from label12 to label13 with label64;
        catch java.io.IOException from label14 to label15 with label64;
        catch java.io.IOException from label16 to label17 with label64;
        catch java.io.IOException from label19 to label20 with label64;
        catch java.io.IOException from label21 to label22 with label33;
        catch java.io.IOException from label23 to label24 with label46;
        catch java.io.IOException from label25 to label26 with label46;
        catch java.io.IOException from label27 to label28 with label46;
        catch java.io.IOException from label29 to label30 with label46;
        catch java.io.IOException from label31 to label32 with label46;
        catch java.io.IOException from label35 to label36 with label63;
        catch java.io.IOException from label37 to label38 with label46;
        catch java.io.IOException from label39 to label40 with label46;
        catch java.io.IOException from label42 to label43 with label46;
        catch java.io.IOException from label48 to label49 with label63;
        catch java.io.IOException from label50 to label51 with label46;
        catch java.io.IOException from label52 to label53 with label46;
        catch java.io.IOException from label54 to label55 with label63;
        catch java.io.IOException from label57 to label58 with label46;
        catch java.io.IOException from label59 to label60 with label63;
        catch java.io.IOException from label60 to label61 with label62;
    }
}
