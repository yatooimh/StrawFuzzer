class com.android.server.net.NetworkPolicyManagerShellCommand extends android.os.ShellCommand
{
    private final com.android.server.net.NetworkPolicyManagerService mInterface;
    private final android.net.wifi.WifiManager mWifiManager;

    void <init>(android.content.Context, com.android.server.net.NetworkPolicyManagerService)
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        android.content.Context r1;
        com.android.server.net.NetworkPolicyManagerService r2;
        java.lang.Object $r3;
        android.net.wifi.WifiManager $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.net.NetworkPolicyManagerService;

        specialinvoke r0.<android.os.ShellCommand: void <init>()>();

        r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface> = r2;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r4 = (android.net.wifi.WifiManager) $r3;

        r0.<com.android.server.net.NetworkPolicyManagerShellCommand: android.net.wifi.WifiManager mWifiManager> = $r4;

        return;
    }

    private int addAppIdleWhitelist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setAppIdleWhitelist(boolean)>(1);

        return $i0;
    }

    private int addRestrictBackgroundBlacklist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setUidPolicy(int)>(1);

        return $i0;
    }

    private int addRestrictBackgroundWhitelist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setUidPolicy(int)>(4);

        return $i0;
    }

    private int getNextBooleanArg()
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        java.lang.Boolean $r3;
        boolean $z0;
        int i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify BOOLEAN");

        return -1;

     label1:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r2);

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        i0 = (int) $z0;

        return i0;
    }

    private int getRestrictBackground() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        com.android.server.net.NetworkPolicyManagerService $r2;
        boolean $z0;
        java.lang.String r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Restrict background status: ");

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        $z0 = virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>();

        if $z0 == 0 goto label1;

        r3 = "enabled";

        goto label2;

     label1:
        r3 = "disabled";

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r3);

        return 0;
    }

    private int getUidFromNextArg()
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        int i0;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify UID");

        return -1;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: UID (");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") should be a number");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -2;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private int listAppIdleWhitelist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        com.android.server.net.NetworkPolicyManagerService $r2;
        int[] $r3;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        $r3 = virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerService: int[] getAppIdleWhitelist()>();

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listUidList(java.lang.String,int[])>("App Idle whitelisted UIDs", $r3);

        return $i0;
    }

    private int listRestrictBackgroundBlacklist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listUidPolicies(java.lang.String,int)>("Restrict background blacklisted UIDs", 1);

        return $i0;
    }

    private int listRestrictBackgroundWhitelist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listUidPolicies(java.lang.String,int)>("Restrict background whitelisted UIDs", 4);

        return $i0;
    }

    private int listUidList(java.lang.String, int[])
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.lang.String r1;
        int[] r2;
        java.io.PrintWriter r3;
        int $i0, $i1, $i2, i3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        r3 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $i0 = lengthof r2;

        if $i0 != 0 goto label1;

        virtualinvoke r3.<java.io.PrintWriter: void println(java.lang.String)>("none");

        goto label3;

     label1:
        i3 = 0;

     label2:
        $i1 = lengthof r2;

        if i3 >= $i1 goto label3;

        $i2 = r2[i3];

        virtualinvoke r3.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r3.<java.io.PrintWriter: void print(char)>(32);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r3.<java.io.PrintWriter: void println()>();

        return 0;
    }

    private int listUidPolicies(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.server.net.NetworkPolicyManagerService $r2;
        int[] $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        $r3 = virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>(i0);

        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listUidList(java.lang.String,int[])>(r1, $r3);

        return $i1;
    }

    private int listWifiNetworks()
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r6, $r7;
        java.util.Iterator r3;
        android.net.wifi.WifiConfiguration r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        int $i0, $i1;
        byte b2;
        android.net.wifi.WifiManager $r8;
        java.util.List $r9;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label1;

        b2 = 0;

        goto label3;

     label1:
        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        b2 = 1;

        goto label3;

     label2:
        b2 = 2;

     label3:
        $r8 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: android.net.wifi.WifiManager mWifiManager>;

        $r9 = virtualinvoke $r8.<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>();

        r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.net.wifi.WifiConfiguration) $r5;

        if r2 == null goto label5;

        $i1 = r4.<android.net.wifi.WifiConfiguration: int meteredOverride>;

        if $i1 != b2 goto label6;

     label5:
        $r6 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String resolveNetworkId(android.net.wifi.WifiConfiguration)>(r4);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(59);

        $i0 = r4.<android.net.wifi.WifiConfiguration: int meteredOverride>;

        $r7 = staticinvoke <com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String overrideToString(int)>($i0);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

     label6:
        goto label4;

     label7:
        return 0;
    }

    private static java.lang.String overrideToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return "none";

     label1:
        return "false";

     label2:
        return "true";
    }

    private int removeAppIdleWhitelist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setAppIdleWhitelist(boolean)>(0);

        return $i0;
    }

    private int removeRestrictBackgroundBlacklist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int resetUidPolicy(java.lang.String,int)>("not blacklisted", 1);

        return $i0;
    }

    private int removeRestrictBackgroundWhitelist() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int resetUidPolicy(java.lang.String,int)>("not whitelisted", 4);

        return $i0;
    }

    private int resetUidPolicy(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.lang.String r1;
        int i0, i1, $i2;
        java.io.PrintWriter r2;
        com.android.server.net.NetworkPolicyManagerService $r3, $r4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int getUidFromNextArg()>();

        if i1 >= 0 goto label1;

        return i1;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        $i2 = virtualinvoke $r3.<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>(i1);

        if $i2 == i0 goto label2;

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Error: UID ");

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>(i1);

        virtualinvoke r2.<java.io.PrintWriter: void print(char)>(32);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(r1);

        return -1;

     label2:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        virtualinvoke $r4.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>(i1, 0);

        return 0;
    }

    private int runAdd() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r4;
        byte b4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify type of data to add");

        return -1;

     label01:
        i3 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        if i3 == -1683867974 goto label05;

        if i3 == -668534353 goto label04;

        if i3 == 639570137 goto label03;

     label02:
        goto label06;

     label03:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background-whitelist");

        if $z2 == 0 goto label02;

        b4 = 0;

        goto label07;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background-blacklist");

        if $z1 == 0 goto label02;

        b4 = 1;

        goto label07;

     label05:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("app-idle-whitelist");

        if $z0 == 0 goto label02;

        b4 = 2;

        goto label07;

     label06:
        b4 = -1;

     label07:
        if b4 == 0 goto label10;

        if b4 == 1 goto label09;

        if b4 == 2 goto label08;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown add type \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label08:
        $i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int addAppIdleWhitelist()>();

        return $i2;

     label09:
        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int addRestrictBackgroundBlacklist()>();

        return $i1;

     label10:
        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int addRestrictBackgroundWhitelist()>();

        return $i0;
    }

    private int runGet() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r4;
        byte b2;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify type of data to get");

        return -1;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        if $i0 == -747095841 goto label3;

     label2:
        goto label4;

     label3:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background");

        if $z0 == 0 goto label2;

        b2 = 0;

        goto label5;

     label4:
        b2 = -1;

     label5:
        if b2 == 0 goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown get type \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label6:
        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int getRestrictBackground()>();

        return $i1;
    }

    private int runList() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4;
        byte b5;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify type of data to list");

        return -1;

     label01:
        $i0 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1683867974: goto label06;
            case -668534353: goto label05;
            case -363534403: goto label04;
            case 639570137: goto label03;
            default: goto label02;
        };

     label02:
        goto label07;

     label03:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background-whitelist");

        if $z0 == 0 goto label02;

        b5 = 2;

        goto label08;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("wifi-networks");

        if $z1 == 0 goto label02;

        b5 = 1;

        goto label08;

     label05:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background-blacklist");

        if $z2 == 0 goto label02;

        b5 = 3;

        goto label08;

     label06:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("app-idle-whitelist");

        if $z3 == 0 goto label02;

        b5 = 0;

        goto label08;

     label07:
        b5 = -1;

     label08:
        if b5 == 0 goto label12;

        if b5 == 1 goto label11;

        if b5 == 2 goto label10;

        if b5 == 3 goto label09;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown list type \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label09:
        $i4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listRestrictBackgroundBlacklist()>();

        return $i4;

     label10:
        $i3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listRestrictBackgroundWhitelist()>();

        return $i3;

     label11:
        $i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listWifiNetworks()>();

        return $i2;

     label12:
        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int listAppIdleWhitelist()>();

        return $i1;
    }

    private int runRemove() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r4;
        byte b4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify type of data to remove");

        return -1;

     label01:
        i3 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        if i3 == -1683867974 goto label05;

        if i3 == -668534353 goto label04;

        if i3 == 639570137 goto label03;

     label02:
        goto label06;

     label03:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background-whitelist");

        if $z2 == 0 goto label02;

        b4 = 0;

        goto label07;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background-blacklist");

        if $z1 == 0 goto label02;

        b4 = 1;

        goto label07;

     label05:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("app-idle-whitelist");

        if $z0 == 0 goto label02;

        b4 = 2;

        goto label07;

     label06:
        b4 = -1;

     label07:
        if b4 == 0 goto label10;

        if b4 == 1 goto label09;

        if b4 == 2 goto label08;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown remove type \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label08:
        $i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int removeAppIdleWhitelist()>();

        return $i2;

     label09:
        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int removeRestrictBackgroundBlacklist()>();

        return $i1;

     label10:
        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int removeRestrictBackgroundWhitelist()>();

        return $i0;
    }

    private int runSet() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r8;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r4;
        byte b4;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label01;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify type of data to set");

        return -1;

     label01:
        i3 = virtualinvoke r2.<java.lang.String: int hashCode()>();

        if i3 == -983249079 goto label05;

        if i3 == -747095841 goto label04;

        if i3 == 1846940860 goto label03;

     label02:
        goto label06;

     label03:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("sub-plan-owner");

        if $z2 == 0 goto label02;

        b4 = 2;

        goto label07;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("restrict-background");

        if $z1 == 0 goto label02;

        b4 = 1;

        goto label07;

     label05:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("metered-network");

        if $z0 == 0 goto label02;

        b4 = 0;

        goto label07;

     label06:
        b4 = -1;

     label07:
        if b4 == 0 goto label10;

        if b4 == 1 goto label09;

        if b4 == 2 goto label08;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown set type \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        return -1;

     label08:
        $i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setSubPlanOwner()>();

        return $i2;

     label09:
        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setRestrictBackground()>();

        return $i1;

     label10:
        $i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int setMeteredWifiNetwork()>();

        return $i0;
    }

    private int runStartWatching()
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int i0;
        java.io.PrintWriter r1;
        java.lang.String $r2;
        com.android.server.net.NetworkPolicyManagerService $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if i0 >= 0 goto label1;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Invalid UID: ");

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>(i0);

        return -1;

     label1:
        $r3 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        virtualinvoke $r3.<com.android.server.net.NetworkPolicyManagerService: void setDebugUid(int)>(i0);

        return 0;
    }

    private int runStopWatching()
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        com.android.server.net.NetworkPolicyManagerService $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $r1 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        virtualinvoke $r1.<com.android.server.net.NetworkPolicyManagerService: void setDebugUid(int)>(-1);

        return 0;
    }

    private int setAppIdleWhitelist(boolean)
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        boolean z0;
        int i0;
        com.android.server.net.NetworkPolicyManagerService $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        z0 := @parameter0: boolean;

        i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int getUidFromNextArg()>();

        if i0 >= 0 goto label1;

        return i0;

     label1:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        virtualinvoke $r1.<com.android.server.net.NetworkPolicyManagerService: void setAppIdleWhitelist(int,boolean)>(i0, z0);

        return 0;
    }

    private int setMeteredWifiNetwork() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r3, $r5;
        com.android.server.net.NetworkPolicyManagerService $r4;
        int $i0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r2 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify networkId");

        return -1;

     label1:
        r3 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        if r3 != null goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Error: didn\'t specify meteredOverride");

        return -1;

     label2:
        $r4 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        $r5 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String resolveNetworkId(java.lang.String)>(r2);

        $i0 = staticinvoke <com.android.server.net.NetworkPolicyManagerShellCommand: int stringToOverride(java.lang.String)>(r3);

        virtualinvoke $r4.<com.android.server.net.NetworkPolicyManagerService: void setWifiMeteredOverride(java.lang.String,int)>($r5, $i0);

        return -1;
    }

    private int setRestrictBackground() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int i0;
        com.android.server.net.NetworkPolicyManagerService r1;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        i0 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int getNextBooleanArg()>();

        if i0 >= 0 goto label1;

        return i0;

     label1:
        r1 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        if i0 <= 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        virtualinvoke r1.<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)>(z0);

        return 0;
    }

    private int setSubPlanOwner() throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int i0;
        java.lang.String r1, $r2;
        com.android.server.net.NetworkPolicyManagerService $r3;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        $r2 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.lang.String getNextArg()>();

        $r3 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        virtualinvoke $r3.<com.android.server.net.NetworkPolicyManagerService: void setSubscriptionPlansOwner(int,java.lang.String)>(i0, r1);

        return 0;
    }

    private int setUidPolicy(int) throws android.os.RemoteException
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        int i0, i1;
        com.android.server.net.NetworkPolicyManagerService $r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        i0 := @parameter0: int;

        i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int getUidFromNextArg()>();

        if i1 >= 0 goto label1;

        return i1;

     label1:
        $r1 = r0.<com.android.server.net.NetworkPolicyManagerShellCommand: com.android.server.net.NetworkPolicyManagerService mInterface>;

        virtualinvoke $r1.<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>(i1, i0);

        return 0;
    }

    private static int stringToOverride(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;
        int i0;
        byte b1;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        if i0 == 3569038 goto label3;

        if i0 == 97196323 goto label2;

     label1:
        goto label4;

     label2:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 == 0 goto label1;

        b1 = 1;

        goto label5;

     label3:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label1;

        b1 = 0;

        goto label5;

     label4:
        b1 = -1;

     label5:
        if b1 == 0 goto label7;

        if b1 == 1 goto label6;

        return 0;

     label6:
        return 2;

     label7:
        return 1;
    }

    public int onCommand(java.lang.String)
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, r8;
        byte b8;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r8 := @parameter0: java.lang.String;

        if r8 != null goto label01;

        $i7 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int handleDefaultCommands(java.lang.String)>(r8);

        return $i7;

     label01:
        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

     label02:
        $i0 = virtualinvoke r8.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1544226370: goto label16;
            case -934610812: goto label14;
            case 96417: goto label12;
            case 102230: goto label10;
            case 113762: goto label08;
            case 3322014: goto label06;
            case 1093388830: goto label04;
            default: goto label03;
        };

     label03:
        goto label18;

     label04:
        $z0 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("stop-watching");

        if $z0 == 0 goto label03;

     label05:
        b8 = 6;

        goto label19;

     label06:
        $z1 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("list");

        if $z1 == 0 goto label03;

     label07:
        b8 = 2;

        goto label19;

     label08:
        $z2 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("set");

        if $z2 == 0 goto label03;

     label09:
        b8 = 1;

        goto label19;

     label10:
        $z3 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("get");

        if $z3 == 0 goto label03;

     label11:
        b8 = 0;

        goto label19;

     label12:
        $z4 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("add");

        if $z4 == 0 goto label03;

     label13:
        b8 = 3;

        goto label19;

     label14:
        $z5 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("remove");

        if $z5 == 0 goto label03;

     label15:
        b8 = 4;

        goto label19;

     label16:
        $z6 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("start-watching");

        if $z6 == 0 goto label03;

     label17:
        b8 = 5;

        goto label19;

     label18:
        b8 = -1;

     label19:
        tableswitch(b8)
        {
            case 0: goto label28;
            case 1: goto label27;
            case 2: goto label26;
            case 3: goto label25;
            case 4: goto label24;
            case 5: goto label23;
            case 6: goto label22;
            default: goto label20;
        };

     label20:
        i9 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int handleDefaultCommands(java.lang.String)>(r8);

     label21:
        goto label30;

     label22:
        $i1 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runStopWatching()>();

        return $i1;

     label23:
        $i2 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runStartWatching()>();

        return $i2;

     label24:
        $i3 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runRemove()>();

        return $i3;

     label25:
        $i4 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runAdd()>();

        return $i4;

     label26:
        $i5 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runList()>();

        return $i5;

     label27:
        $i6 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runSet()>();

        return $i6;

     label28:
        i10 = specialinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: int runGet()>();

     label29:
        return i10;

     label30:
        return i9;

     label31:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return -1;

        catch android.os.RemoteException from label02 to label03 with label31;
        catch android.os.RemoteException from label04 to label05 with label31;
        catch android.os.RemoteException from label06 to label07 with label31;
        catch android.os.RemoteException from label08 to label09 with label31;
        catch android.os.RemoteException from label10 to label11 with label31;
        catch android.os.RemoteException from label12 to label13 with label31;
        catch android.os.RemoteException from label14 to label15 with label31;
        catch android.os.RemoteException from label16 to label17 with label31;
        catch android.os.RemoteException from label20 to label21 with label31;
        catch android.os.RemoteException from label22 to label23 with label31;
        catch android.os.RemoteException from label23 to label24 with label31;
        catch android.os.RemoteException from label24 to label25 with label31;
        catch android.os.RemoteException from label25 to label26 with label31;
        catch android.os.RemoteException from label26 to label27 with label31;
        catch android.os.RemoteException from label27 to label28 with label31;
        catch android.os.RemoteException from label28 to label29 with label31;
    }

    public void onHelp()
    {
        com.android.server.net.NetworkPolicyManagerShellCommand r0;
        java.io.PrintWriter r1;

        r0 := @this: com.android.server.net.NetworkPolicyManagerShellCommand;

        r1 = virtualinvoke r0.<com.android.server.net.NetworkPolicyManagerShellCommand: java.io.PrintWriter getOutPrintWriter()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Network policy manager (netpolicy) commands:");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Print this help text.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  add restrict-background-whitelist UID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Adds a UID to the whitelist for restrict background usage.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  add restrict-background-blacklist UID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Adds a UID to the blacklist for restrict background usage.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  add app-idle-whitelist UID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Adds a UID to the temporary app idle whitelist.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  get restrict-background");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Gets the global restrict background usage status.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  list wifi-networks [true|false]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Lists all saved wifi networks and whether they are metered or not.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    If a boolean argument is passed, filters just the metered (or unmetered)");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    networks.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  list restrict-background-whitelist");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Lists UIDs that are whitelisted for restrict background usage.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  list restrict-background-blacklist");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Lists UIDs that are blacklisted for restrict background usage.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  remove restrict-background-whitelist UID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Removes a UID from the whitelist for restrict background usage.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  remove restrict-background-blacklist UID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Removes a UID from the blacklist for restrict background usage.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  remove app-idle-whitelist UID");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Removes a UID from the temporary app idle whitelist.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  set metered-network ID [undefined|true|false]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Toggles whether the given wi-fi network is metered.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  set restrict-background BOOLEAN");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Sets the global restrict background usage status.");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  set sub-plan-owner subId [packageName]");

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("    Sets the data plan owner package for subId.");

        return;
    }
}
