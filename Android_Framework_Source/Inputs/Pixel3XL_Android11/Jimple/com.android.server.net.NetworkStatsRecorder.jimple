public class com.android.server.net.NetworkStatsRecorder extends java.lang.Object
{
    private static final boolean DUMP_BEFORE_DELETE;
    private static final boolean LOGD;
    private static final boolean LOGV;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_NETSTATS_DUMP;
    private final long mBucketDuration;
    private java.lang.ref.WeakReference mComplete;
    private final java.lang.String mCookie;
    private final android.os.DropBoxManager mDropBox;
    private android.net.NetworkStats mLastSnapshot;
    private final android.net.NetworkStats$NonMonotonicObserver mObserver;
    private final boolean mOnlyTags;
    private final com.android.server.net.NetworkStatsCollection mPending;
    private final com.android.server.net.NetworkStatsRecorder$CombiningRewriter mPendingRewriter;
    private long mPersistThresholdBytes;
    private final com.android.internal.util.FileRotator mRotator;
    private final com.android.server.net.NetworkStatsCollection mSinceBoot;

    public void <init>()
    {
        com.android.server.net.NetworkStatsRecorder r0;
        com.android.server.net.NetworkStatsCollection $r1;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkStatsRecorder: long mPersistThresholdBytes> = 2097152L;

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator> = null;

        r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$NonMonotonicObserver mObserver> = null;

        r0.<com.android.server.net.NetworkStatsRecorder: android.os.DropBoxManager mDropBox> = null;

        r0.<com.android.server.net.NetworkStatsRecorder: java.lang.String mCookie> = null;

        r0.<com.android.server.net.NetworkStatsRecorder: long mBucketDuration> = 31449600000L;

        r0.<com.android.server.net.NetworkStatsRecorder: boolean mOnlyTags> = 0;

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending> = null;

        $r1 = new com.android.server.net.NetworkStatsCollection;

        specialinvoke $r1.<com.android.server.net.NetworkStatsCollection: void <init>(long)>(31449600000L);

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot> = $r1;

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsRecorder$CombiningRewriter mPendingRewriter> = null;

        return;
    }

    public void <init>(com.android.internal.util.FileRotator, android.net.NetworkStats$NonMonotonicObserver, android.os.DropBoxManager, java.lang.String, long, boolean)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        com.android.internal.util.FileRotator r1, $r6;
        android.net.NetworkStats$NonMonotonicObserver r2, $r8;
        android.os.DropBoxManager r3, $r10;
        java.lang.String r4;
        long l0;
        boolean z0;
        com.android.server.net.NetworkStatsCollection $r11, $r12, $r14;
        com.android.server.net.NetworkStatsRecorder$CombiningRewriter $r13;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: com.android.internal.util.FileRotator;

        r2 := @parameter1: android.net.NetworkStats$NonMonotonicObserver;

        r3 := @parameter2: android.os.DropBoxManager;

        r4 := @parameter3: java.lang.String;

        l0 := @parameter4: long;

        z0 := @parameter5: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkStatsRecorder: long mPersistThresholdBytes> = 2097152L;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing FileRotator");

        $r6 = (com.android.internal.util.FileRotator) r1;

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator> = $r6;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "missing NonMonotonicObserver");

        $r8 = (android.net.NetworkStats$NonMonotonicObserver) r2;

        r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$NonMonotonicObserver mObserver> = $r8;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "missing DropBoxManager");

        $r10 = (android.os.DropBoxManager) r3;

        r0.<com.android.server.net.NetworkStatsRecorder: android.os.DropBoxManager mDropBox> = $r10;

        r0.<com.android.server.net.NetworkStatsRecorder: java.lang.String mCookie> = r4;

        r0.<com.android.server.net.NetworkStatsRecorder: long mBucketDuration> = l0;

        r0.<com.android.server.net.NetworkStatsRecorder: boolean mOnlyTags> = z0;

        $r11 = new com.android.server.net.NetworkStatsCollection;

        specialinvoke $r11.<com.android.server.net.NetworkStatsCollection: void <init>(long)>(l0);

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending> = $r11;

        $r12 = new com.android.server.net.NetworkStatsCollection;

        specialinvoke $r12.<com.android.server.net.NetworkStatsCollection: void <init>(long)>(l0);

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot> = $r12;

        $r13 = new com.android.server.net.NetworkStatsRecorder$CombiningRewriter;

        $r14 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        specialinvoke $r13.<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void <init>(com.android.server.net.NetworkStatsCollection)>($r14);

        r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsRecorder$CombiningRewriter mPendingRewriter> = $r13;

        return;
    }

    private com.android.server.net.NetworkStatsCollection loadLocked(long, long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        long l0, l1, $l2;
        com.android.server.net.NetworkStatsCollection $r2, $r4;
        com.android.internal.util.FileRotator $r3;
        java.lang.OutOfMemoryError $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r2 = new com.android.server.net.NetworkStatsCollection;

        $l2 = r0.<com.android.server.net.NetworkStatsRecorder: long mBucketDuration>;

        specialinvoke $r2.<com.android.server.net.NetworkStatsCollection: void <init>(long)>($l2);

     label1:
        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r3.<com.android.internal.util.FileRotator: void readMatching(com.android.internal.util.FileRotator$Reader,long,long)>($r2, l0, l1);

        $r4 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        virtualinvoke $r2.<com.android.server.net.NetworkStatsCollection: void recordCollection(com.android.server.net.NetworkStatsCollection)>($r4);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStatsRecorder", "problem completely reading network stats", $r5);

        specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: void recoverFromWtf()>();

        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStatsRecorder", "problem completely reading network stats", $r6);

        specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: void recoverFromWtf()>();

     label5:
        return $r2;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    private void recoverFromWtf()
    {
        com.android.server.net.NetworkStatsRecorder r0;
        java.io.ByteArrayOutputStream $r2;
        com.android.internal.util.FileRotator $r3, $r6;
        android.os.DropBoxManager $r4;
        byte[] $r5;
        java.lang.Throwable $r7, $r8;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r3.<com.android.internal.util.FileRotator: void dumpAll(java.io.OutputStream)>($r2);

     label2:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        goto label7;

     label3:
        $r8 := @caughtexception;

        goto label8;

     label4:
        $r7 := @caughtexception;

     label5:
        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void reset()>();

     label6:
        goto label2;

     label7:
        $r4 = r0.<com.android.server.net.NetworkStatsRecorder: android.os.DropBoxManager mDropBox>;

        $r5 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r4.<android.os.DropBoxManager: void addData(java.lang.String,byte[],int)>("netstats_dump", $r5, 0);

        $r6 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r6.<com.android.internal.util.FileRotator: void deleteAll()>();

        return;

     label8:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public void dumpCheckin(java.io.PrintWriter, long, long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        java.io.PrintWriter r1;
        long l0, l1;
        com.android.server.net.NetworkStatsCollection $r2;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: java.io.PrintWriter;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = virtualinvoke r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadPartialLocked(long,long)>(l0, l1);

        virtualinvoke $r2.<com.android.server.net.NetworkStatsCollection: void dumpCheckin(java.io.PrintWriter,long,long)>(r1, l0, l1);

        return;
    }

    public void dumpDebugLocked(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        android.util.proto.ProtoOutputStream r1;
        com.android.server.net.NetworkStatsCollection r2, $r3;
        long $l0, l1, l2;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l1 := @parameter1: long;

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l1);

        r2 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        if r2 == null goto label1;

        $l0 = virtualinvoke r2.<com.android.server.net.NetworkStatsCollection: long getTotalBytes()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529665L, $l0);

     label1:
        $r3 = virtualinvoke r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>();

        virtualinvoke $r3.<com.android.server.net.NetworkStatsCollection: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r1, 1146756268034L);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        return;
    }

    public void dumpLocked(com.android.internal.util.IndentingPrintWriter, boolean)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        com.android.internal.util.IndentingPrintWriter r1;
        boolean z0;
        com.android.server.net.NetworkStatsCollection $r2, $r3, $r4, $r5;
        long $l0;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        if $r2 == null goto label1;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Pending bytes: ");

        $r5 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        $l0 = virtualinvoke $r5.<com.android.server.net.NetworkStatsCollection: long getTotalBytes()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(long)>($l0);

     label1:
        if z0 == 0 goto label2;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Complete history:");

        $r4 = virtualinvoke r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>();

        virtualinvoke $r4.<com.android.server.net.NetworkStatsCollection: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label3;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("History since boot:");

        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot>;

        virtualinvoke $r3.<com.android.server.net.NetworkStatsCollection: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

     label3:
        return;
    }

    public void forcePersistLocked(long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        long l0;
        com.android.internal.util.FileRotator $r1, $r5, $r6;
        com.android.server.net.NetworkStatsCollection $r3, $r7;
        boolean $z0;
        com.android.server.net.NetworkStatsRecorder$CombiningRewriter $r4;
        java.lang.OutOfMemoryError $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "missing FileRotator");

        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        $z0 = virtualinvoke $r3.<com.android.server.net.NetworkStatsCollection: boolean isDirty()>();

        if $z0 == 0 goto label5;

     label1:
        $r5 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        $r4 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsRecorder$CombiningRewriter mPendingRewriter>;

        virtualinvoke $r5.<com.android.internal.util.FileRotator: void rewriteActive(com.android.internal.util.FileRotator$Rewriter,long)>($r4, l0);

        $r6 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r6.<com.android.internal.util.FileRotator: void maybeRotate(long)>(l0);

        $r7 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        virtualinvoke $r7.<com.android.server.net.NetworkStatsCollection: void reset()>();

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStatsRecorder", "problem persisting pending stats", $r8);

        specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: void recoverFromWtf()>();

        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStatsRecorder", "problem persisting pending stats", $r9);

        specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: void recoverFromWtf()>();

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.OutOfMemoryError from label1 to label2 with label3;
    }

    public com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()
    {
        com.android.server.net.NetworkStatsRecorder r0;
        com.android.internal.util.FileRotator $r1;
        java.lang.ref.WeakReference $r3, r5;
        java.lang.Object $r4;
        com.android.server.net.NetworkStatsCollection r6, r7;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        $r1 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "missing FileRotator");

        r5 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.ref.WeakReference mComplete>;

        if r5 == null goto label1;

        $r4 = virtualinvoke r5.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r6 = (com.android.server.net.NetworkStatsCollection) $r4;

        goto label2;

     label1:
        r6 = null;

     label2:
        r7 = r6;

        if r6 != null goto label3;

        r7 = specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection loadLocked(long,long)>(-9223372036854775808L, 9223372036854775807L);

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r7);

        r0.<com.android.server.net.NetworkStatsRecorder: java.lang.ref.WeakReference mComplete> = $r3;

     label3:
        return r7;
    }

    public com.android.server.net.NetworkStatsCollection getOrLoadPartialLocked(long, long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        long l0, l1;
        com.android.internal.util.FileRotator $r1;
        java.lang.Object $r3;
        java.lang.ref.WeakReference r4;
        com.android.server.net.NetworkStatsCollection r5, r6;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "missing FileRotator");

        r4 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.ref.WeakReference mComplete>;

        if r4 == null goto label1;

        $r3 = virtualinvoke r4.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r5 = (com.android.server.net.NetworkStatsCollection) $r3;

        goto label2;

     label1:
        r5 = null;

     label2:
        r6 = r5;

        if r5 != null goto label3;

        r6 = specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection loadLocked(long,long)>(l0, l1);

     label3:
        return r6;
    }

    public com.android.server.net.NetworkStatsCollection getSinceBoot()
    {
        com.android.server.net.NetworkStatsRecorder r0;
        com.android.server.net.NetworkStatsCollection $r1;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        $r1 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot>;

        return $r1;
    }

    public android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        android.net.NetworkTemplate r1;
        com.android.server.net.NetworkStatsCollection $r2;
        int $i0;
        android.net.NetworkStats $r3;
        android.net.NetworkStats$Entry $r4;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: android.net.NetworkTemplate;

        $r2 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long,int,int)>(r1, -9223372036854775808L, 9223372036854775807L, 3, $i0);

        $r4 = virtualinvoke $r3.<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)>(null);

        return $r4;
    }

    public void importLegacyNetworkLocked(java.io.File) throws java.io.IOException
    {
        com.android.server.net.NetworkStatsRecorder r0;
        java.io.File r1;
        long l0, l1, $l2;
        com.android.internal.util.FileRotator $r3, $r5, $r8, $r9;
        com.android.server.net.NetworkStatsCollection $r6;
        boolean $z0;
        com.android.server.net.NetworkStatsRecorder$CombiningRewriter $r7;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: java.io.File;

        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r3, "missing FileRotator");

        $r5 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r5.<com.android.internal.util.FileRotator: void deleteAll()>();

        $r6 = new com.android.server.net.NetworkStatsCollection;

        $l2 = r0.<com.android.server.net.NetworkStatsRecorder: long mBucketDuration>;

        specialinvoke $r6.<com.android.server.net.NetworkStatsCollection: void <init>(long)>($l2);

        virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: void readLegacyNetwork(java.io.File)>(r1);

        l0 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: long getStartMillis()>();

        l1 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: long getEndMillis()>();

        $z0 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        $r7 = new com.android.server.net.NetworkStatsRecorder$CombiningRewriter;

        specialinvoke $r7.<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void <init>(com.android.server.net.NetworkStatsCollection)>($r6);

        virtualinvoke $r8.<com.android.internal.util.FileRotator: void rewriteActive(com.android.internal.util.FileRotator$Rewriter,long)>($r7, l0);

        $r9 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r9.<com.android.internal.util.FileRotator: void maybeRotate(long)>(l1);

     label1:
        return;
    }

    public void importLegacyUidLocked(java.io.File) throws java.io.IOException
    {
        com.android.server.net.NetworkStatsRecorder r0;
        java.io.File r1;
        long l0, l1, $l2;
        com.android.internal.util.FileRotator $r3, $r5, $r8, $r9;
        com.android.server.net.NetworkStatsCollection $r6;
        boolean $z0, $z1;
        com.android.server.net.NetworkStatsRecorder$CombiningRewriter $r7;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: java.io.File;

        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r3, "missing FileRotator");

        $r5 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r5.<com.android.internal.util.FileRotator: void deleteAll()>();

        $r6 = new com.android.server.net.NetworkStatsCollection;

        $l2 = r0.<com.android.server.net.NetworkStatsRecorder: long mBucketDuration>;

        specialinvoke $r6.<com.android.server.net.NetworkStatsCollection: void <init>(long)>($l2);

        $z0 = r0.<com.android.server.net.NetworkStatsRecorder: boolean mOnlyTags>;

        virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: void readLegacyUid(java.io.File,boolean)>(r1, $z0);

        l0 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: long getStartMillis()>();

        l1 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: long getEndMillis()>();

        $z1 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r8 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        $r7 = new com.android.server.net.NetworkStatsRecorder$CombiningRewriter;

        specialinvoke $r7.<com.android.server.net.NetworkStatsRecorder$CombiningRewriter: void <init>(com.android.server.net.NetworkStatsCollection)>($r6);

        virtualinvoke $r8.<com.android.internal.util.FileRotator: void rewriteActive(com.android.internal.util.FileRotator$Rewriter,long)>($r7, l0);

        $r9 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r9.<com.android.internal.util.FileRotator: void maybeRotate(long)>(l1);

     label1:
        return;
    }

    public void maybePersistLocked(long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        long l0, $l1, $l2;
        com.android.internal.util.FileRotator $r1, $r4;
        com.android.server.net.NetworkStatsCollection $r3;
        byte $b3;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r1, "missing FileRotator");

        $r3 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        $l1 = virtualinvoke $r3.<com.android.server.net.NetworkStatsCollection: long getTotalBytes()>();

        $l2 = r0.<com.android.server.net.NetworkStatsRecorder: long mPersistThresholdBytes>;

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label1;

        virtualinvoke r0.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        goto label2;

     label1:
        $r4 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        virtualinvoke $r4.<com.android.internal.util.FileRotator: void maybeRotate(long)>(l0);

     label2:
        return;
    }

    public void recordSnapshotLocked(android.net.NetworkStats, java.util.Map, long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        android.net.NetworkStats r1, r4, $r7, $r10;
        java.util.Map r2;
        long l0, l1, $l2, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22;
        java.util.HashSet r3;
        com.android.server.net.NetworkIdentitySet r5;
        com.android.server.net.NetworkStatsCollection r6, r15, r20;
        java.lang.String $r8, $r11, $r12, $r18;
        android.net.NetworkStats$NonMonotonicObserver $r9, r17;
        boolean $z0, $z1, $z2, z4;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i23, $i24;
        java.lang.Object $r13, $r19;
        java.lang.ref.WeakReference r14;
        android.net.NetworkStats$Entry r16, r21;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: android.net.NetworkStats;

        r2 := @parameter1: java.util.Map;

        l0 := @parameter2: long;

        r3 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        if r1 != null goto label01;

        return;

     label01:
        $r7 = r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats mLastSnapshot>;

        if $r7 != null goto label02;

        r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats mLastSnapshot> = r1;

        return;

     label02:
        r14 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.ref.WeakReference mComplete>;

        if r14 == null goto label03;

        $r13 = virtualinvoke r14.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r15 = (com.android.server.net.NetworkStatsCollection) $r13;

        goto label04;

     label03:
        r15 = null;

     label04:
        $r10 = r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats mLastSnapshot>;

        $r9 = r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$NonMonotonicObserver mObserver>;

        $r8 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.String mCookie>;

        r4 = staticinvoke <android.net.NetworkStats: android.net.NetworkStats subtract(android.net.NetworkStats,android.net.NetworkStats,android.net.NetworkStats$NonMonotonicObserver,java.lang.Object)>(r1, $r10, $r9, $r8);

        $l2 = virtualinvoke r4.<android.net.NetworkStats: long getElapsedRealtime()>();

        l1 = l0 - $l2;

        r16 = null;

        i23 = 0;

     label05:
        $i24 = virtualinvoke r4.<android.net.NetworkStats: int size()>();

        if i23 >= $i24 goto label15;

        r16 = virtualinvoke r4.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i23, r16);

        $z0 = virtualinvoke r16.<android.net.NetworkStats$Entry: boolean isNegative()>();

        if $z0 == 0 goto label07;

        r17 = r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$NonMonotonicObserver mObserver>;

        if r17 == null goto label06;

        $r12 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.String mCookie>;

        interfaceinvoke r17.<android.net.NetworkStats$NonMonotonicObserver: void foundNonMonotonic(android.net.NetworkStats,int,java.lang.Object)>(r4, i23, $r12);

     label06:
        $l13 = r16.<android.net.NetworkStats$Entry: long rxBytes>;

        $l14 = staticinvoke <java.lang.Math: long max(long,long)>($l13, 0L);

        r16.<android.net.NetworkStats$Entry: long rxBytes> = $l14;

        $l15 = r16.<android.net.NetworkStats$Entry: long rxPackets>;

        $l16 = staticinvoke <java.lang.Math: long max(long,long)>($l15, 0L);

        r16.<android.net.NetworkStats$Entry: long rxPackets> = $l16;

        $l17 = r16.<android.net.NetworkStats$Entry: long txBytes>;

        $l18 = staticinvoke <java.lang.Math: long max(long,long)>($l17, 0L);

        r16.<android.net.NetworkStats$Entry: long txBytes> = $l18;

        $l19 = r16.<android.net.NetworkStats$Entry: long txPackets>;

        $l20 = staticinvoke <java.lang.Math: long max(long,long)>($l19, 0L);

        r16.<android.net.NetworkStats$Entry: long txPackets> = $l20;

        $l21 = r16.<android.net.NetworkStats$Entry: long operations>;

        $l22 = staticinvoke <java.lang.Math: long max(long,long)>($l21, 0L);

        r16.<android.net.NetworkStats$Entry: long operations> = $l22;

     label07:
        $r18 = r16.<android.net.NetworkStats$Entry: java.lang.String iface>;

        $r19 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r5 = (com.android.server.net.NetworkIdentitySet) $r19;

        if r5 != null goto label08;

        $r11 = r16.<android.net.NetworkStats$Entry: java.lang.String iface>;

        virtualinvoke r3.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

        goto label14;

     label08:
        $z1 = virtualinvoke r16.<android.net.NetworkStats$Entry: boolean isEmpty()>();

        if $z1 == 0 goto label09;

        goto label14;

     label09:
        $i3 = r16.<android.net.NetworkStats$Entry: int tag>;

        if $i3 != 0 goto label10;

        z4 = 1;

        goto label11;

     label10:
        z4 = 0;

     label11:
        $z2 = r0.<com.android.server.net.NetworkStatsRecorder: boolean mOnlyTags>;

        if z4 == $z2 goto label14;

        r20 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        if r20 == null goto label12;

        $i12 = r16.<android.net.NetworkStats$Entry: int uid>;

        $i11 = r16.<android.net.NetworkStats$Entry: int set>;

        $i10 = r16.<android.net.NetworkStats$Entry: int tag>;

        virtualinvoke r20.<com.android.server.net.NetworkStatsCollection: void recordData(com.android.server.net.NetworkIdentitySet,int,int,int,long,long,android.net.NetworkStats$Entry)>(r5, $i12, $i11, $i10, l1, l0, r16);

        goto label12;

     label12:
        r21 = r16;

        r6 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot>;

        if r6 == null goto label13;

        $i9 = r16.<android.net.NetworkStats$Entry: int uid>;

        $i8 = r16.<android.net.NetworkStats$Entry: int set>;

        $i7 = r16.<android.net.NetworkStats$Entry: int tag>;

        virtualinvoke r6.<com.android.server.net.NetworkStatsCollection: void recordData(com.android.server.net.NetworkIdentitySet,int,int,int,long,long,android.net.NetworkStats$Entry)>(r5, $i9, $i8, $i7, l1, l0, r16);

     label13:
        if r15 == null goto label14;

        $i6 = r21.<android.net.NetworkStats$Entry: int uid>;

        $i5 = r21.<android.net.NetworkStats$Entry: int set>;

        $i4 = r21.<android.net.NetworkStats$Entry: int tag>;

        virtualinvoke r15.<com.android.server.net.NetworkStatsCollection: void recordData(com.android.server.net.NetworkIdentitySet,int,int,int,long,long,android.net.NetworkStats$Entry)>(r5, $i6, $i5, $i4, l1, l0, r21);

        goto label14;

     label14:
        i23 = i23 + 1;

        goto label05;

     label15:
        r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats mLastSnapshot> = r1;

        return;
    }

    public void removeUidsLocked(int[])
    {
        com.android.server.net.NetworkStatsRecorder r0;
        int[] r1;
        java.lang.Object $r2;
        long $l0;
        java.lang.Throwable $r3;
        java.lang.StringBuilder $r4, $r10;
        java.lang.String $r6, $r8, $r12, $r14;
        java.lang.OutOfMemoryError $r9;
        com.android.internal.util.FileRotator r15;
        com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter r16;
        com.android.server.net.NetworkStatsCollection r21, r22, r25;
        android.net.NetworkStats r23;
        java.lang.ref.WeakReference r24;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r1 := @parameter0: int[];

        r15 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.internal.util.FileRotator mRotator>;

        if r15 == null goto label05;

     label01:
        r16 = new com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter;

        $l0 = r0.<com.android.server.net.NetworkStatsRecorder: long mBucketDuration>;

        specialinvoke r16.<com.android.server.net.NetworkStatsRecorder$RemoveUidRewriter: void <init>(long,int[])>($l0, r1);

        virtualinvoke r15.<com.android.internal.util.FileRotator: void rewriteAll(com.android.internal.util.FileRotator$Rewriter)>(r16);

     label02:
        goto label05;

     label03:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem removing UIDs ");

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStatsRecorder", $r14, $r9);

        specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: void recoverFromWtf()>();

        goto label05;

     label04:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem removing UIDs ");

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStatsRecorder", $r8, $r3);

        specialinvoke r0.<com.android.server.net.NetworkStatsRecorder: void recoverFromWtf()>();

     label05:
        r21 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        if r21 == null goto label06;

        virtualinvoke r21.<com.android.server.net.NetworkStatsCollection: void removeUids(int[])>(r1);

     label06:
        r22 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot>;

        if r22 == null goto label07;

        virtualinvoke r22.<com.android.server.net.NetworkStatsCollection: void removeUids(int[])>(r1);

     label07:
        r23 = r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats mLastSnapshot>;

        if r23 == null goto label08;

        virtualinvoke r23.<android.net.NetworkStats: void removeUids(int[])>(r1);

     label08:
        r24 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.ref.WeakReference mComplete>;

        if r24 == null goto label09;

        $r2 = virtualinvoke r24.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r25 = (com.android.server.net.NetworkStatsCollection) $r2;

        goto label10;

     label09:
        r25 = null;

     label10:
        if r25 == null goto label11;

        virtualinvoke r25.<com.android.server.net.NetworkStatsCollection: void removeUids(int[])>(r1);

     label11:
        return;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.lang.OutOfMemoryError from label01 to label02 with label03;
    }

    public void resetLocked()
    {
        com.android.server.net.NetworkStatsRecorder r0;
        com.android.server.net.NetworkStatsCollection r1, r2;
        java.lang.ref.WeakReference r3;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        r0.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats mLastSnapshot> = null;

        r1 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mPending>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.server.net.NetworkStatsCollection: void reset()>();

     label1:
        r2 = r0.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection mSinceBoot>;

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.server.net.NetworkStatsCollection: void reset()>();

     label2:
        r3 = r0.<com.android.server.net.NetworkStatsRecorder: java.lang.ref.WeakReference mComplete>;

        if r3 == null goto label3;

        virtualinvoke r3.<java.lang.ref.WeakReference: void clear()>();

     label3:
        return;
    }

    public void setPersistThreshold(long)
    {
        com.android.server.net.NetworkStatsRecorder r0;
        long l0, $l1;

        r0 := @this: com.android.server.net.NetworkStatsRecorder;

        l0 := @parameter0: long;

        $l1 = staticinvoke <android.util.MathUtils: long constrain(long,long,long)>(l0, 1024L, 104857600L);

        r0.<com.android.server.net.NetworkStatsRecorder: long mPersistThresholdBytes> = $l1;

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.net.NetworkStatsRecorder: java.lang.String TAG_NETSTATS_DUMP> = "netstats_dump";

        <com.android.server.net.NetworkStatsRecorder: java.lang.String TAG> = "NetworkStatsRecorder";

        <com.android.server.net.NetworkStatsRecorder: boolean LOGV> = 0;

        <com.android.server.net.NetworkStatsRecorder: boolean LOGD> = 0;

        <com.android.server.net.NetworkStatsRecorder: boolean DUMP_BEFORE_DELETE> = 1;

        return;
    }
}
