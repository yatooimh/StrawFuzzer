public class com.android.server.net.NetworkStatsService extends android.net.INetworkStatsService$Stub
{
    public static final java.lang.String ACTION_NETWORK_STATS_POLL;
    public static final java.lang.String ACTION_NETWORK_STATS_UPDATED;
    private static final int DEFAULT_PERFORM_POLL_DELAY_MS;
    private static final int DUMP_STATS_SESSION_COUNT;
    private static final int FLAG_PERSIST_ALL;
    private static final int FLAG_PERSIST_FORCE;
    private static final int FLAG_PERSIST_NETWORK;
    private static final int FLAG_PERSIST_UID;
    static final boolean LOGD;
    static final boolean LOGV;
    private static final int MAX_STATS_PROVIDER_POLL_WAIT_TIME_MS;
    private static final int MSG_BROADCAST_NETWORK_STATS_UPDATED;
    private static final int MSG_PERFORM_POLL;
    private static final int MSG_PERFORM_POLL_REGISTER_ALERT;
    private static final int MSG_UPDATE_IFACES;
    private static final long POLL_RATE_LIMIT_MS;
    private static final java.lang.String PREFIX_DEV;
    private static final java.lang.String PREFIX_UID;
    private static final java.lang.String PREFIX_UID_TAG;
    private static final java.lang.String PREFIX_XT;
    static final java.lang.String TAG;
    private static final java.lang.String TAG_NETSTATS_ERROR;
    private static int TYPE_RX_BYTES;
    private static int TYPE_RX_PACKETS;
    private static int TYPE_TCP_RX_PACKETS;
    private static int TYPE_TCP_TX_PACKETS;
    private static int TYPE_TX_BYTES;
    private static int TYPE_TX_PACKETS;
    private java.lang.String mActiveIface;
    private final android.util.ArrayMap mActiveIfaces;
    private android.util.SparseIntArray mActiveUidCounterSet;
    private final android.util.ArrayMap mActiveUidIfaces;
    private final android.app.AlarmManager mAlarmManager;
    private final android.net.INetworkManagementEventObserver mAlertObserver;
    private final java.io.File mBaseDir;
    private final java.time.Clock mClock;
    private final android.content.Context mContext;
    private android.net.Network[] mDefaultNetworks;
    private final com.android.server.net.NetworkStatsService$Dependencies mDeps;
    private com.android.server.net.NetworkStatsRecorder mDevRecorder;
    private long mGlobalAlertBytes;
    private final android.os.Handler mHandler;
    private android.net.NetworkState[] mLastNetworkStates;
    private long mLastStatsSessionPoll;
    private java.lang.String[] mMobileIfaces;
    private final android.os.INetworkManagementService mNetworkManager;
    private final com.android.server.net.NetworkStatsSubscriptionsMonitor mNetworkStatsSubscriptionsMonitor;
    private final com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver mNonMonotonicObserver;
    private final android.util.SparseIntArray mOpenSessionCallsPerUid;
    private long mPersistThreshold;
    private android.app.PendingIntent mPollIntent;
    private android.content.BroadcastReceiver mPollReceiver;
    private android.content.BroadcastReceiver mRemovedReceiver;
    private final com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings;
    private android.content.BroadcastReceiver mShutdownReceiver;
    private final com.android.server.net.NetworkStatsFactory mStatsFactory;
    private final java.lang.Object mStatsLock;
    private final com.android.server.net.NetworkStatsObservers mStatsObservers;
    private final java.util.concurrent.CopyOnWriteArrayList mStatsProviderCbList;
    private final java.util.concurrent.Semaphore mStatsProviderSem;
    private final java.io.File mSystemDir;
    private volatile boolean mSystemReady;
    private android.content.BroadcastReceiver mTetherReceiver;
    private android.net.NetworkStats mUidOperations;
    private com.android.server.net.NetworkStatsRecorder mUidRecorder;
    private com.android.server.net.NetworkStatsRecorder mUidTagRecorder;
    private final boolean mUseBpfTrafficStats;
    private android.content.BroadcastReceiver mUserReceiver;
    private final android.os.PowerManager$WakeLock mWakeLock;
    private com.android.server.net.NetworkStatsRecorder mXtRecorder;
    private com.android.server.net.NetworkStatsCollection mXtStatsCached;

    static void <clinit>()
    {
        boolean $z0, $z1;

        <com.android.server.net.NetworkStatsService: java.lang.String TAG_NETSTATS_ERROR> = "netstats_error";

        <com.android.server.net.NetworkStatsService: java.lang.String TAG> = "NetworkStats";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_XT> = "xt";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_UID_TAG> = "uid_tag";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_UID> = "uid";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_DEV> = "dev";

        <com.android.server.net.NetworkStatsService: long POLL_RATE_LIMIT_MS> = 15000L;

        <com.android.server.net.NetworkStatsService: int MSG_UPDATE_IFACES> = 3;

        <com.android.server.net.NetworkStatsService: int MSG_PERFORM_POLL_REGISTER_ALERT> = 2;

        <com.android.server.net.NetworkStatsService: int MSG_PERFORM_POLL> = 1;

        <com.android.server.net.NetworkStatsService: int MSG_BROADCAST_NETWORK_STATS_UPDATED> = 4;

        <com.android.server.net.NetworkStatsService: int MAX_STATS_PROVIDER_POLL_WAIT_TIME_MS> = 100;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_UID> = 2;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_NETWORK> = 1;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_FORCE> = 256;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_ALL> = 3;

        <com.android.server.net.NetworkStatsService: int DUMP_STATS_SESSION_COUNT> = 20;

        <com.android.server.net.NetworkStatsService: int DEFAULT_PERFORM_POLL_DELAY_MS> = 1000;

        <com.android.server.net.NetworkStatsService: java.lang.String ACTION_NETWORK_STATS_UPDATED> = "com.android.server.action.NETWORK_STATS_UPDATED";

        <com.android.server.net.NetworkStatsService: java.lang.String ACTION_NETWORK_STATS_POLL> = "com.android.server.action.NETWORK_STATS_POLL";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("NetworkStats", 3);

        <com.android.server.net.NetworkStatsService: boolean LOGD> = $z0;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("NetworkStats", 2);

        <com.android.server.net.NetworkStatsService: boolean LOGV> = $z1;

        return;
    }

    void <init>(android.content.Context, android.os.INetworkManagementService, android.app.AlarmManager, android.os.PowerManager$WakeLock, java.time.Clock, com.android.server.net.NetworkStatsService$NetworkStatsSettings, com.android.server.net.NetworkStatsFactory, com.android.server.net.NetworkStatsObservers, java.io.File, java.io.File, com.android.server.net.NetworkStatsService$Dependencies)
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.INetworkManagementService r1, $r31;
        android.app.AlarmManager r2, $r33;
        android.os.PowerManager$WakeLock r3, $r39;
        java.time.Clock r4, $r35;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings r5, $r37;
        com.android.server.net.NetworkStatsFactory r6, $r41;
        com.android.server.net.NetworkStatsObservers r7, $r43;
        java.io.File r8, r9, $r45, $r47, $r48;
        com.android.server.net.NetworkStatsService$Dependencies r10, r57;
        java.lang.Object $r11;
        android.util.ArrayMap $r12, $r13;
        java.lang.String[] $r14;
        android.net.Network[] $r15;
        com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver $r16;
        java.util.concurrent.CopyOnWriteArrayList $r17;
        java.util.concurrent.Semaphore $r18;
        android.util.SparseIntArray $r19, $r21;
        android.net.NetworkStats $r20;
        com.android.server.net.NetworkStatsService$2 $r22;
        com.android.server.net.NetworkStatsService$3 $r23;
        com.android.server.net.NetworkStatsService$4 $r24;
        com.android.server.net.NetworkStatsService$5 $r25;
        com.android.server.net.NetworkStatsService$6 $r26;
        com.android.server.net.NetworkStatsService$7 $r27;
        android.content.Context $r29, $r54, r56;
        boolean $z0;
        com.android.server.net.NetworkStatsService$NetworkStatsHandler $r50;
        android.os.Looper $r51;
        android.os.HandlerExecutor $r52;
        android.os.Handler $r53;
        com.android.server.net.NetworkStatsSubscriptionsMonitor $r55;
        android.os.HandlerThread r58;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r56 := @parameter0: android.content.Context;

        r1 := @parameter1: android.os.INetworkManagementService;

        r2 := @parameter2: android.app.AlarmManager;

        r3 := @parameter3: android.os.PowerManager$WakeLock;

        r4 := @parameter4: java.time.Clock;

        r5 := @parameter5: com.android.server.net.NetworkStatsService$NetworkStatsSettings;

        r6 := @parameter6: com.android.server.net.NetworkStatsFactory;

        r7 := @parameter7: com.android.server.net.NetworkStatsObservers;

        r8 := @parameter8: java.io.File;

        r9 := @parameter9: java.io.File;

        r10 := @parameter10: com.android.server.net.NetworkStatsService$Dependencies;

        specialinvoke r0.<android.net.INetworkStatsService$Stub: void <init>()>();

        $r11 = new java.lang.Object;

        specialinvoke $r11.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock> = $r11;

        $r12 = new android.util.ArrayMap;

        specialinvoke $r12.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces> = $r12;

        $r13 = new android.util.ArrayMap;

        specialinvoke $r13.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces> = $r13;

        $r14 = newarray (java.lang.String)[0];

        r0.<com.android.server.net.NetworkStatsService: java.lang.String[] mMobileIfaces> = $r14;

        $r15 = newarray (android.net.Network)[0];

        r0.<com.android.server.net.NetworkStatsService: android.net.Network[] mDefaultNetworks> = $r15;

        r0.<com.android.server.net.NetworkStatsService: android.net.NetworkState[] mLastNetworkStates> = null;

        $r16 = new com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver;

        specialinvoke $r16.<com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver: void <init>(com.android.server.net.NetworkStatsService,com.android.server.net.NetworkStatsService$1)>(r0, null);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver mNonMonotonicObserver> = $r16;

        $r17 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r17.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.CopyOnWriteArrayList mStatsProviderCbList> = $r17;

        $r18 = new java.util.concurrent.Semaphore;

        specialinvoke $r18.<java.util.concurrent.Semaphore: void <init>(int,boolean)>(0, 1);

        r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.Semaphore mStatsProviderSem> = $r18;

        $r19 = new android.util.SparseIntArray;

        specialinvoke $r19.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet> = $r19;

        $r20 = new android.net.NetworkStats;

        specialinvoke $r20.<android.net.NetworkStats: void <init>(long,int)>(0L, 10);

        r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations> = $r20;

        r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold> = 2097152L;

        $r21 = new android.util.SparseIntArray;

        specialinvoke $r21.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mOpenSessionCallsPerUid> = $r21;

        $r22 = new com.android.server.net.NetworkStatsService$2;

        specialinvoke $r22.<com.android.server.net.NetworkStatsService$2: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mTetherReceiver> = $r22;

        $r23 = new com.android.server.net.NetworkStatsService$3;

        specialinvoke $r23.<com.android.server.net.NetworkStatsService$3: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mPollReceiver> = $r23;

        $r24 = new com.android.server.net.NetworkStatsService$4;

        specialinvoke $r24.<com.android.server.net.NetworkStatsService$4: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mRemovedReceiver> = $r24;

        $r25 = new com.android.server.net.NetworkStatsService$5;

        specialinvoke $r25.<com.android.server.net.NetworkStatsService$5: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mUserReceiver> = $r25;

        $r26 = new com.android.server.net.NetworkStatsService$6;

        specialinvoke $r26.<com.android.server.net.NetworkStatsService$6: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mShutdownReceiver> = $r26;

        $r27 = new com.android.server.net.NetworkStatsService$7;

        specialinvoke $r27.<com.android.server.net.NetworkStatsService$7: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.net.INetworkManagementEventObserver mAlertObserver> = $r27;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r56, "missing Context");

        $r29 = (android.content.Context) r56;

        r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext> = $r29;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "missing INetworkManagementService");

        $r31 = (android.os.INetworkManagementService) r1;

        r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager> = $r31;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "missing AlarmManager");

        $r33 = (android.app.AlarmManager) r2;

        r0.<com.android.server.net.NetworkStatsService: android.app.AlarmManager mAlarmManager> = $r33;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "missing Clock");

        $r35 = (java.time.Clock) r4;

        r0.<com.android.server.net.NetworkStatsService: java.time.Clock mClock> = $r35;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r5, "missing NetworkStatsSettings");

        $r37 = (com.android.server.net.NetworkStatsService$NetworkStatsSettings) r5;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings> = $r37;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r3, "missing WakeLock");

        $r39 = (android.os.PowerManager$WakeLock) r3;

        r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock> = $r39;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r6, "missing factory");

        $r41 = (com.android.server.net.NetworkStatsFactory) r6;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory> = $r41;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r7, "missing NetworkStatsObservers");

        $r43 = (com.android.server.net.NetworkStatsObservers) r7;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsObservers mStatsObservers> = $r43;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r8, "missing systemDir");

        $r45 = (java.io.File) r8;

        r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir> = $r45;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r9, "missing baseDir");

        $r47 = (java.io.File) r9;

        r0.<com.android.server.net.NetworkStatsService: java.io.File mBaseDir> = $r47;

        $r48 = new java.io.File;

        specialinvoke $r48.<java.io.File: void <init>(java.lang.String)>("/sys/fs/bpf/map_netd_app_uid_stats_map");

        $z0 = virtualinvoke $r48.<java.io.File: boolean exists()>();

        r0.<com.android.server.net.NetworkStatsService: boolean mUseBpfTrafficStats> = $z0;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r10, "missing Dependencies");

        r57 = (com.android.server.net.NetworkStatsService$Dependencies) r10;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$Dependencies mDeps> = r57;

        r58 = virtualinvoke r57.<com.android.server.net.NetworkStatsService$Dependencies: android.os.HandlerThread makeHandlerThread()>();

        virtualinvoke r58.<android.os.HandlerThread: void start()>();

        $r50 = new com.android.server.net.NetworkStatsService$NetworkStatsHandler;

        $r51 = virtualinvoke r58.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r50.<com.android.server.net.NetworkStatsService$NetworkStatsHandler: void <init>(com.android.server.net.NetworkStatsService,android.os.Looper)>(r0, $r51);

        r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler> = $r50;

        $r54 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r52 = new android.os.HandlerExecutor;

        $r53 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        specialinvoke $r52.<android.os.HandlerExecutor: void <init>(android.os.Handler)>($r53);

        $r55 = virtualinvoke r10.<com.android.server.net.NetworkStatsService$Dependencies: com.android.server.net.NetworkStatsSubscriptionsMonitor makeSubscriptionsMonitor(android.content.Context,java.util.concurrent.Executor,com.android.server.net.NetworkStatsService)>($r54, $r52, r0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsSubscriptionsMonitor mNetworkStatsSubscriptionsMonitor> = $r55;

        return;
    }

    static void access$100(com.android.server.net.NetworkStatsService, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPoll(int)>(i0);

        return;
    }

    static java.lang.Object access$1000(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        return $r1;
    }

    static com.android.server.net.NetworkStatsRecorder access$1100(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsRecorder $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        return $r1;
    }

    static com.android.server.net.NetworkStatsRecorder access$1200(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsRecorder $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        return $r1;
    }

    static android.net.NetworkStats access$1300(com.android.server.net.NetworkStatsService, android.net.NetworkTemplate, int, long, long, int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        int i0, i3, i4;
        long l1, l2;
        android.net.NetworkStats $r2;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.NetworkTemplate;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate,int,long,long,int,int)>(r1, i0, l1, l2, i3, i4);

        return $r2;
    }

    static android.net.NetworkStatsHistory access$1400(com.android.server.net.NetworkStatsService, android.net.NetworkTemplate, int, int, int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        int i0, i1, i2, i3;
        android.net.NetworkStatsHistory $r2;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.NetworkTemplate;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate,int,int,int,int)>(r1, i0, i1, i2, i3);

        return $r2;
    }

    static android.os.PowerManager$WakeLock access$1500(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static void access$1600(com.android.server.net.NetworkStatsService, int[])
    {
        com.android.server.net.NetworkStatsService r0;
        int[] r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: int[];

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void removeUidsLocked(int[])>(r1);

        return;
    }

    static void access$1700(com.android.server.net.NetworkStatsService, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void removeUserLocked(int)>(i0);

        return;
    }

    static void access$1800(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void shutdownLocked()>();

        return;
    }

    static android.os.Handler access$1900(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        return $r1;
    }

    static android.net.NetworkState[] access$200(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkState[] $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkState[] mLastNetworkStates>;

        return $r1;
    }

    static com.android.server.net.NetworkStatsService$NetworkStatsSettings access$2000(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        return $r1;
    }

    static long access$2100(com.android.server.net.NetworkStatsService, android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, $l2;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.NetworkTemplate;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $l2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

        return $l2;
    }

    static android.net.NetworkStats access$2200(com.android.server.net.NetworkStatsService, android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        long l0, l1;
        android.net.NetworkStats $r2;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.NetworkTemplate;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkUidBytes(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

        return $r2;
    }

    static void access$2300(com.android.server.net.NetworkStatsService, long)
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        l0 := @parameter1: long;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void advisePersistThreshold(long)>(l0);

        return;
    }

    static void access$2400(com.android.server.net.NetworkStatsService, com.android.server.net.NetworkStatsService$ThrowingConsumer)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsService$ThrowingConsumer r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: com.android.server.net.NetworkStatsService$ThrowingConsumer;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void invokeForAllStatsProviderCallbacks(com.android.server.net.NetworkStatsService$ThrowingConsumer)>(r1);

        return;
    }

    static android.net.Network[] access$300(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.Network[] $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.net.Network[] mDefaultNetworks>;

        return $r1;
    }

    static java.lang.String access$400(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface>;

        return $r1;
    }

    static void access$500(com.android.server.net.NetworkStatsService, android.net.Network[], android.net.NetworkState[], java.lang.String)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.Network[] r1;
        android.net.NetworkState[] r2;
        java.lang.String r3;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.Network[];

        r2 := @parameter2: android.net.NetworkState[];

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String)>(r1, r2, r3);

        return;
    }

    static void access$600(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerGlobalAlert()>();

        return;
    }

    static android.content.Context access$700(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        return $r1;
    }

    static int access$900(com.android.server.net.NetworkStatsService, java.lang.String)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: int checkAccessLevel(java.lang.String)>(r1);

        return $i0;
    }

    private void advisePersistThreshold(long)
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, $l1, $l2, $l4, l6, l7;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.time.Clock $r2;
        com.android.server.net.NetworkStatsRecorder $r3, $r4, $r5, $r6;
        byte $b3;
        java.lang.StringBuilder $r7;
        java.lang.String $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.net.NetworkStatsService;

        l6 := @parameter0: long;

        $l1 = staticinvoke <android.util.MathUtils: long constrain(long,long,long)>(l6, 131072L, 2097152L);

        r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold> = $l1;

        $z0 = <com.android.server.net.NetworkStatsService: boolean LOGV>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("advisePersistThreshold() given ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l6);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", clamped to ");

        $l4 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkStats", $r12);

     label1:
        l7 = r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes>;

        $r2 = r0.<com.android.server.net.NetworkStatsService: java.time.Clock mClock>;

        l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

        r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r1;

     label2:
        $z1 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z1 != 0 goto label4;

        exitmonitor r1;

     label3:
        return;

     label4:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updatePersistThresholdsLocked()>();

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r3.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r5.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

        exitmonitor r1;

     label5:
        $l2 = r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes>;

        $b3 = l7 cmp $l2;

        if $b3 == 0 goto label6;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerGlobalAlert()>();

     label6:
        return;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r13;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void assertSystemReady()
    {
        com.android.server.net.NetworkStatsService r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $z0 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("System not ready");

        throw $r1;
    }

    private void bootstrapStatsLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        java.time.Clock $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: java.time.Clock mClock>;

        l0 = virtualinvoke $r2.<java.time.Clock: long millis()>();

     label1:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void recordSnapshotLocked(long)>(l0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem reading network stats: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkStats", $r8);

        goto label2;

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String, com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config, boolean)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String r1;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config r2;
        boolean z0;
        android.os.DropBoxManager r3;
        android.content.Context $r4;
        java.lang.Object $r5;
        com.android.server.net.NetworkStatsRecorder $r6;
        com.android.internal.util.FileRotator $r7;
        long $l0, $l1, $l2;
        java.io.File $r8;
        com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver $r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config;

        z0 := @parameter2: boolean;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("dropbox");

        r3 = (android.os.DropBoxManager) $r5;

        $r6 = new com.android.server.net.NetworkStatsRecorder;

        $r7 = new com.android.internal.util.FileRotator;

        $r8 = r0.<com.android.server.net.NetworkStatsService: java.io.File mBaseDir>;

        $l1 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config: long rotateAgeMillis>;

        $l0 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config: long deleteAgeMillis>;

        specialinvoke $r7.<com.android.internal.util.FileRotator: void <init>(java.io.File,java.lang.String,long,long)>($r8, r1, $l1, $l0);

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver mNonMonotonicObserver>;

        $l2 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config: long bucketDuration>;

        specialinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void <init>(com.android.internal.util.FileRotator,android.net.NetworkStats$NonMonotonicObserver,android.os.DropBoxManager,java.lang.String,long,boolean)>($r7, $r9, r3, r1, $l2, z0);

        return $r6;
    }

    private int checkAccessLevel(java.lang.String)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String r1;
        android.content.Context $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <com.android.server.net.NetworkStatsAccess: int checkAccessLevel(android.content.Context,int,java.lang.String)>($r2, $i0, r1);

        return $i1;
    }

    private transient boolean checkAnyPermissionOf(java.lang.String[])
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String[] r1;
        int i0, $i1, i2;
        java.lang.String r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r1[i2];

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r2);

        if $i1 != 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean checkBpfStatsEnable()
    {
        com.android.server.net.NetworkStatsService r0;
        boolean $z0;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $z0 = r0.<com.android.server.net.NetworkStatsService: boolean mUseBpfTrafficStats>;

        return $z0;
    }

    public static com.android.server.net.NetworkStatsService create(android.content.Context, android.os.INetworkManagementService)
    {
        android.os.INetworkManagementService r0;
        android.app.AlarmManager r1;
        android.os.PowerManager r2;
        java.lang.Object $r3, $r4;
        com.android.server.net.NetworkStatsService $r5;
        android.os.PowerManager$WakeLock $r6;
        java.time.Clock $r7;
        com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings $r8;
        com.android.server.net.NetworkStatsFactory $r9;
        com.android.server.net.NetworkStatsObservers $r10;
        java.io.File $r11, $r12;
        com.android.server.net.NetworkStatsService$Dependencies $r13;
        android.content.Context r14;

        r14 := @parameter0: android.content.Context;

        r0 := @parameter1: android.os.INetworkManagementService;

        $r3 = virtualinvoke r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r1 = (android.app.AlarmManager) $r3;

        $r4 = virtualinvoke r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r2 = (android.os.PowerManager) $r4;

        $r5 = new com.android.server.net.NetworkStatsService;

        $r6 = virtualinvoke r2.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "NetworkStats");

        $r7 = staticinvoke <com.android.server.net.NetworkStatsService: java.time.Clock getDefaultClock()>();

        $r8 = new com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings;

        specialinvoke $r8.<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: void <init>(android.content.Context)>(r14);

        $r9 = new com.android.server.net.NetworkStatsFactory;

        specialinvoke $r9.<com.android.server.net.NetworkStatsFactory: void <init>()>();

        $r10 = new com.android.server.net.NetworkStatsObservers;

        specialinvoke $r10.<com.android.server.net.NetworkStatsObservers: void <init>()>();

        $r11 = staticinvoke <com.android.server.net.NetworkStatsService: java.io.File getDefaultSystemDir()>();

        $r12 = staticinvoke <com.android.server.net.NetworkStatsService: java.io.File getDefaultBaseDir()>();

        $r13 = new com.android.server.net.NetworkStatsService$Dependencies;

        specialinvoke $r13.<com.android.server.net.NetworkStatsService$Dependencies: void <init>()>();

        specialinvoke $r5.<com.android.server.net.NetworkStatsService: void <init>(android.content.Context,android.os.INetworkManagementService,android.app.AlarmManager,android.os.PowerManager$WakeLock,java.time.Clock,com.android.server.net.NetworkStatsService$NetworkStatsSettings,com.android.server.net.NetworkStatsFactory,com.android.server.net.NetworkStatsObservers,java.io.File,java.io.File,com.android.server.net.NetworkStatsService$Dependencies)>(r14, r0, r1, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13);

        specialinvoke $r5.<com.android.server.net.NetworkStatsService: void registerLocalService()>();

        return $r5;
    }

    private static void dumpInterfaces(android.util.proto.ProtoOutputStream, long, android.util.ArrayMap)
    {
        android.util.proto.ProtoOutputStream r0;
        long l0, l1;
        android.util.ArrayMap r1;
        int $i2, i3;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;
        com.android.server.net.NetworkIdentitySet $r5;

        r0 := @parameter0: android.util.proto.ProtoOutputStream;

        l0 := @parameter1: long;

        r1 := @parameter2: android.util.ArrayMap;

        i3 = 0;

     label1:
        $i2 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        if i3 >= $i2 goto label2;

        l1 = virtualinvoke r0.<android.util.proto.ProtoOutputStream: long start(long)>(l0);

        $r2 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        $r3 = (java.lang.String) $r2;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333441L, $r3);

        $r4 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r5 = (com.android.server.net.NetworkIdentitySet) $r4;

        virtualinvoke $r5.<com.android.server.net.NetworkIdentitySet: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r0, 1146756268034L);

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void end(long)>(l1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void dumpProtoLocked(java.io.FileDescriptor)
    {
        com.android.server.net.NetworkStatsService r0;
        android.util.proto.ProtoOutputStream $r1;
        android.util.ArrayMap $r2, $r3;
        com.android.server.net.NetworkStatsRecorder $r4, $r5, $r6, $r7;
        java.io.FileDescriptor r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r8 := @parameter0: java.io.FileDescriptor;

        $r1 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r1.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r8);

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        staticinvoke <com.android.server.net.NetworkStatsService: void dumpInterfaces(android.util.proto.ProtoOutputStream,long,android.util.ArrayMap)>($r1, 2246267895809L, $r2);

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        staticinvoke <com.android.server.net.NetworkStatsService: void dumpInterfaces(android.util.proto.ProtoOutputStream,long,android.util.ArrayMap)>($r1, 2246267895810L, $r3);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void dumpDebugLocked(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268035L);

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r5.<com.android.server.net.NetworkStatsRecorder: void dumpDebugLocked(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268036L);

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void dumpDebugLocked(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268037L);

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r7.<com.android.server.net.NetworkStatsRecorder: void dumpDebugLocked(android.util.proto.ProtoOutputStream,long)>($r1, 1146756268038L);

        virtualinvoke $r1.<android.util.proto.ProtoOutputStream: void flush()>();

        return;
    }

    private transient void enforceAnyPermissionOf(java.lang.String[])
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String[] r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String[];

        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean checkAnyPermissionOf(java.lang.String[])>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requires one of the following permissions: ");

        $r5 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(", ", r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private static com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap, java.lang.Object)
    {
        android.util.ArrayMap r0;
        java.lang.Object r1, $r3;
        com.android.server.net.NetworkIdentitySet r2, $r4, r6;

        r0 := @parameter0: android.util.ArrayMap;

        r1 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.net.NetworkIdentitySet) $r3;

        r6 = r2;

        if r2 != null goto label1;

        $r4 = new com.android.server.net.NetworkIdentitySet;

        specialinvoke $r4.<com.android.server.net.NetworkIdentitySet: void <init>()>();

        r6 = $r4;

        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label1:
        return r6;
    }

    private static java.io.File getDefaultBaseDir()
    {
        java.io.File $r1, $r2;

        $r1 = new java.io.File;

        $r2 = staticinvoke <com.android.server.net.NetworkStatsService: java.io.File getDefaultSystemDir()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "netstats");

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        return $r1;
    }

    private static java.time.Clock getDefaultClock()
    {
        android.os.BestClock $r0;
        java.time.Clock[] $r1;
        java.time.ZoneOffset $r2;
        java.time.Clock $r3, $r4;

        $r0 = new android.os.BestClock;

        $r2 = <java.time.ZoneOffset: java.time.ZoneOffset UTC>;

        $r1 = newarray (java.time.Clock)[2];

        $r3 = staticinvoke <android.os.SystemClock: java.time.Clock currentNetworkTimeClock()>();

        $r1[0] = $r3;

        $r4 = staticinvoke <java.time.Clock: java.time.Clock systemUTC()>();

        $r1[1] = $r4;

        specialinvoke $r0.<android.os.BestClock: void <init>(java.time.ZoneId,java.time.Clock[])>($r2, $r1);

        return $r0;
    }

    private static java.io.File getDefaultSystemDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    private android.net.NetworkStats getNetworkStatsFromProviders(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        android.net.NetworkStats $r2;
        com.android.server.net._$$Lambda$NetworkStatsService$InNd0bxX6ObmdmLP__WGePLtUfE $r3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        $r2 = new android.net.NetworkStats;

        specialinvoke $r2.<android.net.NetworkStats: void <init>(long,int)>(0L, 0);

        $r3 = new com.android.server.net._$$Lambda$NetworkStatsService$InNd0bxX6ObmdmLP__WGePLtUfE;

        specialinvoke $r3.<com.android.server.net._$$Lambda$NetworkStatsService$InNd0bxX6ObmdmLP__WGePLtUfE: void <init>(android.net.NetworkStats,int)>($r2, i0);

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void invokeForAllStatsProviderCallbacks(com.android.server.net.NetworkStatsService$ThrowingConsumer)>($r3);

        return $r2;
    }

    private android.net.NetworkStats getNetworkStatsTethering(int) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        android.os.INetworkManagementService $r1;
        java.lang.Throwable $r2;
        android.net.NetworkStats $r3, r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r4 = interfaceinvoke $r1.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem reading network stats", $r2);

        $r3 = new android.net.NetworkStats;

        specialinvoke $r3.<android.net.NetworkStats: void <init>(long,int)>(0L, 10);

        return $r3;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private android.net.NetworkStats getNetworkStatsUidDetail(java.lang.String[]) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String[] r1;
        android.net.NetworkStats r2, $r5, r6, r7;
        com.android.server.net.NetworkStatsFactory $r3, $r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String[];

        r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats readNetworkStatsUidDetail(int,java.lang.String[],int)>(-1, r1, -1);

        r6 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsTethering(int)>(1);

        virtualinvoke r6.<android.net.NetworkStats: void filter(int,java.lang.String[],int)>(-1, r1, -1);

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        virtualinvoke $r3.<com.android.server.net.NetworkStatsFactory: void apply464xlatAdjustments(android.net.NetworkStats,android.net.NetworkStats)>(r2, r6);

        virtualinvoke r2.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r6);

        r7 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsFromProviders(int)>(1);

        virtualinvoke r7.<android.net.NetworkStats: void filter(int,java.lang.String[],int)>(-1, r1, -1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        virtualinvoke $r4.<com.android.server.net.NetworkStatsFactory: void apply464xlatAdjustments(android.net.NetworkStats,android.net.NetworkStats)>(r2, r7);

        virtualinvoke r2.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r7);

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        virtualinvoke r2.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>($r5);

        return r2;
    }

    private long getNetworkTotalBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, $l3;
        int $i2;
        android.net.NetworkStats $r2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertSystemReady()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate,int,long,long,int,int)>(r1, 4, l0, l1, 3, $i2);

        $l3 = virtualinvoke $r2.<android.net.NetworkStats: long getTotalBytes()>();

        return $l3;
    }

    private android.net.NetworkStats getNetworkUidBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, l1;
        java.lang.Object r1;
        com.android.server.net.NetworkStatsCollection r2;
        com.android.server.net.NetworkStatsRecorder $r3;
        android.net.NetworkStats $r4;
        java.lang.Throwable $r5;
        android.net.NetworkTemplate r6;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r6 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertSystemReady()>();

        r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        r2 = virtualinvoke $r3.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>();

        exitmonitor r1;

     label2:
        $r4 = virtualinvoke r2.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long,int,int)>(r6, l0, l1, 3, 1000);

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private int getSubTypeForState(android.net.NetworkState)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkState r1;
        android.net.NetworkCapabilities $r2;
        boolean $z0;
        java.lang.String $r3;
        com.android.server.net.NetworkStatsSubscriptionsMonitor $r4;
        int $i0;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.net.NetworkState;

        $r2 = r1.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = virtualinvoke $r2.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsSubscriptionsMonitor mNetworkStatsSubscriptionsMonitor>;

        $r3 = r1.<android.net.NetworkState: java.lang.String subscriberId>;

        $i0 = virtualinvoke $r4.<com.android.server.net.NetworkStatsSubscriptionsMonitor: int getRatTypeForSubscriberId(java.lang.String)>($r3);

        return $i0;
    }

    private long getTetherStats(java.lang.String, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        long l1, $l2, $l3, $l4, $l5;
        java.lang.String $r1, $r10, $r15, r16;
        java.util.HashSet $r2, r18;
        boolean $z1;
        java.lang.StringBuilder $r3, r23;
        java.lang.Throwable $r11;
        android.os.RemoteException $r12;
        android.net.NetworkStats r17;
        android.net.NetworkStats$Entry r19;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r16 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r17 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsTethering(int)>(0);

     label02:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        $r1 = <android.net.NetworkStats: java.lang.String IFACE_ALL>;

        if r16 != $r1 goto label03;

        r18 = null;

        goto label04;

     label03:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r18 = $r2;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r16);

     label04:
        r19 = virtualinvoke r17.<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)>(null, r18);

        $z1 = <com.android.server.net.NetworkStatsService: boolean LOGD>;

        if $z1 == 0 goto label05;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TetherStats: iface=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" entry=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkStats", $r10);

     label05:
        if i0 == 0 goto label09;

        if i0 == 1 goto label08;

        if i0 == 2 goto label07;

        if i0 == 3 goto label06;

        return 0L;

     label06:
        $l5 = r19.<android.net.NetworkStats$Entry: long txPackets>;

        return $l5;

     label07:
        $l4 = r19.<android.net.NetworkStats$Entry: long txBytes>;

        return $l4;

     label08:
        $l3 = r19.<android.net.NetworkStats$Entry: long rxPackets>;

        return $l3;

     label09:
        $l2 = r19.<android.net.NetworkStats$Entry: long rxBytes>;

        return $l2;

     label10:
        $r11 := @caughtexception;

        goto label14;

     label11:
        $r12 := @caughtexception;

     label12:
        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error get TetherStats: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r15 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkStats", $r15);

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0L;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r11;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate, int, int, int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i1, i2, i3;
        android.telephony.SubscriptionPlan r1;
        com.android.server.net.NetworkStatsCollection r2;
        java.lang.Throwable $r3, $r4, r10;
        android.net.NetworkTemplate r5;
        java.lang.Object r6, r8, r11;
        android.net.NetworkStatsHistory r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r5 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.telephony.SubscriptionPlan resolveSubscriptionPlan(android.net.NetworkTemplate,int)>(r5, i0);

        r6 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r6;

     label01:
        r2 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached>;

     label02:
        r8 = r6;

     label03:
        r9 = virtualinvoke r2.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,android.telephony.SubscriptionPlan,int,int,int,int,long,long,int,int)>(r5, r1, -1, -1, 0, i1, -9223372036854775808L, 9223372036854775807L, i2, i3);

     label04:
        r8 = r6;

     label05:
        exitmonitor r6;

     label06:
        return r9;

     label07:
        $r3 := @caughtexception;

        r10 = $r3;

        r11 = r8;

        goto label09;

     label08:
        $r4 := @caughtexception;

        r10 = $r4;

        r11 = r6;

     label09:
        r8 = r11;

     label10:
        exitmonitor r11;

     label11:
        throw r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate, int, long, long, int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i3, i4;
        long l1, l2, $l5, $l6, $l7, $l8, $l9, $l10, $l11;
        android.net.NetworkStatsHistory$Entry r1;
        android.net.NetworkStatsHistory $r2;
        android.net.NetworkStats $r3;
        android.net.NetworkStats$Entry $r4;
        java.lang.String $r5;
        android.net.NetworkTemplate r7;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r7 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate,int,int,int,int)>(r7, i0, -1, i3, i4);

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1 = virtualinvoke $r2.<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,long,android.net.NetworkStatsHistory$Entry)>(l1, l2, $l5, null);

        $r3 = new android.net.NetworkStats;

        $l6 = l2 - l1;

        specialinvoke $r3.<android.net.NetworkStats: void <init>(long,int)>($l6, 1);

        $r4 = new android.net.NetworkStats$Entry;

        $r5 = <android.net.NetworkStats: java.lang.String IFACE_ALL>;

        $l11 = r1.<android.net.NetworkStatsHistory$Entry: long rxBytes>;

        $l10 = r1.<android.net.NetworkStatsHistory$Entry: long rxPackets>;

        $l9 = r1.<android.net.NetworkStatsHistory$Entry: long txBytes>;

        $l8 = r1.<android.net.NetworkStatsHistory$Entry: long txPackets>;

        $l7 = r1.<android.net.NetworkStatsHistory$Entry: long operations>;

        specialinvoke $r4.<android.net.NetworkStats$Entry: void <init>(java.lang.String,int,int,int,int,int,int,long,long,long,long,long)>($r5, -1, -1, 0, -1, -1, -1, $l11, $l10, $l9, $l8, $l7);

        virtualinvoke $r3.<android.net.NetworkStats: android.net.NetworkStats insertEntry(android.net.NetworkStats$Entry)>($r4);

        return $r3;
    }

    private void invokeForAllStatsProviderCallbacks(com.android.server.net.NetworkStatsService$ThrowingConsumer)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsService$ThrowingConsumer r1;
        java.util.Iterator r2;
        com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl r3;
        java.util.concurrent.CopyOnWriteArrayList $r6;
        boolean $z0;
        java.lang.Object $r7;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r11, $r13;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: com.android.server.net.NetworkStatsService$ThrowingConsumer;

        $r6 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.CopyOnWriteArrayList mStatsProviderCbList>;

        r2 = virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl) $r7;

     label2:
        interfaceinvoke r1.<com.android.server.net.NetworkStatsService$ThrowingConsumer: void accept(java.lang.Object)>(r3);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fail to broadcast to provider: ");

        $r11 = r3.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: java.lang.String mTag>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", $r13, $r8);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private boolean isRateLimitedForPoll(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i2, $i4;
        long l1, l3, $l5;
        android.util.SparseIntArray r1, $r3, $r4;
        byte $b6;
        java.lang.Throwable $r5;
        boolean z0;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        z0 = 0;

        if i0 != 1000 goto label1;

        return 0;

     label1:
        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r1 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mOpenSessionCallsPerUid>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mOpenSessionCallsPerUid>;

        i2 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mOpenSessionCallsPerUid>;

        $i4 = i2 + 1;

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(i0, $i4);

        l3 = r0.<com.android.server.net.NetworkStatsService: long mLastStatsSessionPoll>;

        r0.<com.android.server.net.NetworkStatsService: long mLastStatsSessionPoll> = l1;

        exitmonitor r1;

     label3:
        $l5 = l1 - l3;

        $b6 = $l5 cmp 15000L;

        if $b6 >= 0 goto label4;

        z0 = 1;

     label4:
        return z0;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    static void lambda$dump$2(com.android.internal.util.IndentingPrintWriter, boolean, com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl) throws android.os.RemoteException
    {
        com.android.internal.util.IndentingPrintWriter r0;
        boolean z0;
        com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl r1;
        java.lang.StringBuilder $r2, $r11;
        java.lang.String $r3, $r6, $r9, $r12, $r15, $r18;
        android.net.NetworkStats $r8, $r17;

        r0 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: java.lang.String mTag>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Xt:");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r8 = virtualinvoke r1.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: android.net.NetworkStats getCachedStats(int)>(0);

        $r9 = virtualinvoke $r8.<android.net.NetworkStats: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r9);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        if z0 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = r1.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: java.lang.String mTag>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Uid:");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r15);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r17 = virtualinvoke r1.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: android.net.NetworkStats getCachedStats(int)>(1);

        $r18 = virtualinvoke $r17.<android.net.NetworkStats: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r18);

        virtualinvoke r0.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label1:
        return;
    }

    static void lambda$getNetworkStatsFromProviders$3(android.net.NetworkStats, int, com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl) throws android.os.RemoteException
    {
        android.net.NetworkStats r0, $r2;
        int i0;
        com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl r1;

        r0 := @parameter0: android.net.NetworkStats;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl;

        $r2 = virtualinvoke r1.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: android.net.NetworkStats getCachedStats(int)>(i0);

        virtualinvoke r0.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>($r2);

        return;
    }

    static void lambda$performPollLocked$1(com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl r0;
        android.net.netstats.provider.INetworkStatsProvider $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl;

        $r1 = r0.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: android.net.netstats.provider.INetworkStatsProvider mProvider>;

        interfaceinvoke $r1.<android.net.netstats.provider.INetworkStatsProvider: void onRequestStatsUpdate(int)>(0);

        return;
    }

    private void maybeUpgradeLegacyStatsLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        java.io.File $r1, $r2, $r3, r9, r10, r11;
        boolean $z0, $z1, $z2;
        com.android.server.net.NetworkStatsRecorder $r4, $r5, $r6;
        java.lang.Throwable $r7;
        java.lang.OutOfMemoryError $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        r9 = new java.io.File;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir>;

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "netstats.bin");

        $z0 = virtualinvoke r9.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void importLegacyNetworkLocked(java.io.File)>(r9);

        virtualinvoke r9.<java.io.File: boolean delete()>();

     label2:
        r10 = new java.io.File;

        $r2 = r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir>;

        specialinvoke r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "netstats_xt.bin");

        $z1 = virtualinvoke r10.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        virtualinvoke r10.<java.io.File: boolean delete()>();

     label3:
        r11 = new java.io.File;

        $r3 = r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir>;

        specialinvoke r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "netstats_uid.bin");

        $z2 = virtualinvoke r11.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label4;

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void importLegacyUidLocked(java.io.File)>(r11);

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r5.<com.android.server.net.NetworkStatsRecorder: void importLegacyUidLocked(java.io.File)>(r11);

        virtualinvoke r11.<java.io.File: boolean delete()>();

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem during legacy upgrade", $r8);

        goto label7;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem during legacy upgrade", $r7);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.lang.OutOfMemoryError from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label6;
        catch java.lang.OutOfMemoryError from label2 to label3 with label5;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.OutOfMemoryError from label3 to label4 with label5;
    }

    private static native long nativeGetIfaceStat(java.lang.String, int, boolean);

    private static native long nativeGetTotalStat(int, boolean);

    private static native long nativeGetUidStat(int, int, boolean);

    private android.net.INetworkStatsSession openSessionInternal(int, java.lang.String)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, $i2, i3;
        long l1;
        boolean $z0;
        com.android.server.net.NetworkStatsService$1 $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i3 := @parameter0: int;

        r3 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean isRateLimitedForPoll(int)>(i0);

        if $z0 == 0 goto label1;

        i3 = i3 & -2;

        goto label1;

     label1:
        $i2 = i3 & 3;

        if $i2 == 0 goto label5;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPoll(int)>(3);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

     label5:
        $r1 = new com.android.server.net.NetworkStatsService$1;

        specialinvoke $r1.<com.android.server.net.NetworkStatsService$1: void <init>(com.android.server.net.NetworkStatsService,int,java.lang.String,int)>(r0, i0, r3, i3);

        return $r1;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void performPoll(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        java.lang.Object r1;
        android.os.PowerManager$WakeLock $r2, $r3, $r5;
        java.lang.Throwable $r4, $r6;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

     label02:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(i0);

     label03:
        $r3 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

     label07:
        $r5 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void release()>();

     label08:
        throw $r4;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void performPollLocked(int)
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        boolean $z0, $z1, z4, z5, z6, $z7;
        int $i1, $i2, $i3, $i7, i9, i10;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        java.util.concurrent.Semaphore $r3, $r6, $r27;
        com.android.server.net.'-$$Lambda$NetworkStatsService$xfTbcb80CcmFJlvul1xYQmewxlg' $r4;
        java.util.concurrent.TimeUnit $r5;
        java.time.Clock $r7;
        android.os.Message $r8;
        com.android.server.net.NetworkStatsRecorder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        java.lang.String $r19, $r22, $r33;
        java.lang.Throwable $r23, $r24;
        android.os.RemoteException $r34;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r37;
        android.os.Handler r38;
        java.lang.StringBuilder r41, r42;
        com.android.server.net.NetworkStatsService$ThrowingConsumer r43;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i9 := @parameter0: int;

        $z0 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = <com.android.server.net.NetworkStatsService: boolean LOGV>;

        if $z1 == 0 goto label02;

        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("performPollLocked(flags=0x");

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i9);

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkStats", $r22);

     label02:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "performPollLocked");

        z4 = 0;

        $i1 = i9 & 1;

        if $i1 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        $i2 = i9 & 2;

        if $i2 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        $i3 = i9 & 256;

        if $i3 == 0 goto label07;

        z4 = 1;

     label07:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "provider.requestStatsUpdate");

        $r2 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.CopyOnWriteArrayList mStatsProviderCbList>;

        i10 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        $r3 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.Semaphore mStatsProviderSem>;

        virtualinvoke $r3.<java.util.concurrent.Semaphore: int drainPermits()>();

        $r4 = <com.android.server.net._$$Lambda$NetworkStatsService$xfTbcb80CcmFJlvul1xYQmewxlg: com.android.server.net.'-$$Lambda$NetworkStatsService$xfTbcb80CcmFJlvul1xYQmewxlg' INSTANCE>;

        r43 = (com.android.server.net.NetworkStatsService$ThrowingConsumer) $r4;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void invokeForAllStatsProviderCallbacks(com.android.server.net.NetworkStatsService$ThrowingConsumer)>(r43);

     label08:
        $r6 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.Semaphore mStatsProviderSem>;

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r6.<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>(i10, 100L, $r5);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestStatsUpdate - providers responded ");

        $r27 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.Semaphore mStatsProviderSem>;

        $i7 = virtualinvoke $r27.<java.util.concurrent.Semaphore: int availablePermits()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r33 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("NetworkStats", $r33);

     label11:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        $r7 = r0.<com.android.server.net.NetworkStatsService: java.time.Clock mClock>;

        l0 = virtualinvoke $r7.<java.time.Clock: long millis()>();

     label12:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void recordSnapshotLocked(long)>(l0);

     label13:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "[persisting]");

        if z4 == 0 goto label14;

        $r13 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r13.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r14 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r14.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r15 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r15.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r16 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r16.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        goto label16;

     label14:
        if z5 == 0 goto label15;

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r11.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

        $r12 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r12.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

     label15:
        if z6 == 0 goto label16;

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r9.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

        $r10 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r10.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l0);

     label16:
        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        $r37 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z7 = interfaceinvoke $r37.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getSampleEnabled()>();

        if $z7 == 0 goto label17;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performSampleLocked()>();

     label17:
        r38 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        $r8 = virtualinvoke r38.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke r38.<android.os.Handler: boolean sendMessage(android.os.Message)>($r8);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        return;

     label18:
        $r34 := @caughtexception;

        return;

     label19:
        $r23 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem reading network stats", $r23);

        return;

        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.IllegalStateException from label12 to label13 with label19;
        catch android.os.RemoteException from label12 to label13 with label18;
    }

    private void performSampleLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24;
        java.time.Clock $r1;
        com.android.server.net.NetworkStatsRecorder $r2, $r3, $r4, $r5, $r6, $r7;
        android.net.NetworkTemplate r8, r12;
        android.net.NetworkStats$Entry r9, r10, r11, r13, r14, r15;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.time.Clock mClock>;

        l0 = virtualinvoke $r1.<java.time.Clock: long millis()>();

        r8 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileWildcard()>();

        $r2 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        r9 = virtualinvoke $r2.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r8);

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        r10 = virtualinvoke $r3.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r8);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        r11 = virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r8);

        $l12 = r9.<android.net.NetworkStats$Entry: long rxBytes>;

        $l11 = r9.<android.net.NetworkStats$Entry: long rxPackets>;

        $l10 = r9.<android.net.NetworkStats$Entry: long txBytes>;

        $l9 = r9.<android.net.NetworkStats$Entry: long txPackets>;

        $l8 = r10.<android.net.NetworkStats$Entry: long rxBytes>;

        $l7 = r10.<android.net.NetworkStats$Entry: long rxPackets>;

        $l6 = r10.<android.net.NetworkStats$Entry: long txBytes>;

        $l5 = r10.<android.net.NetworkStats$Entry: long txPackets>;

        $l4 = r11.<android.net.NetworkStats$Entry: long rxBytes>;

        $l3 = r11.<android.net.NetworkStats$Entry: long rxPackets>;

        $l2 = r11.<android.net.NetworkStats$Entry: long txBytes>;

        $l1 = r11.<android.net.NetworkStats$Entry: long txPackets>;

        staticinvoke <com.android.server.EventLogTags: void writeNetstatsMobileSample(long,long,long,long,long,long,long,long,long,long,long,long,long)>($l12, $l11, $l10, $l9, $l8, $l7, $l6, $l5, $l4, $l3, $l2, $l1, l0);

        r12 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifiWildcard()>();

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        r13 = virtualinvoke $r5.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r12);

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        r14 = virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r12);

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        r15 = virtualinvoke $r7.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r12);

        $l24 = r13.<android.net.NetworkStats$Entry: long rxBytes>;

        $l23 = r13.<android.net.NetworkStats$Entry: long rxPackets>;

        $l22 = r13.<android.net.NetworkStats$Entry: long txBytes>;

        $l21 = r13.<android.net.NetworkStats$Entry: long txPackets>;

        $l20 = r14.<android.net.NetworkStats$Entry: long rxBytes>;

        $l19 = r14.<android.net.NetworkStats$Entry: long rxPackets>;

        $l18 = r14.<android.net.NetworkStats$Entry: long txBytes>;

        $l17 = r14.<android.net.NetworkStats$Entry: long txPackets>;

        $l16 = r15.<android.net.NetworkStats$Entry: long rxBytes>;

        $l15 = r15.<android.net.NetworkStats$Entry: long rxPackets>;

        $l14 = r15.<android.net.NetworkStats$Entry: long txBytes>;

        $l13 = r15.<android.net.NetworkStats$Entry: long txPackets>;

        staticinvoke <com.android.server.EventLogTags: void writeNetstatsWifiSample(long,long,long,long,long,long,long,long,long,long,long,long,long)>($l24, $l23, $l22, $l21, $l20, $l19, $l18, $l17, $l16, $l15, $l14, $l13, l0);

        return;
    }

    private android.net.NetworkStats readNetworkStatsSummaryDev()
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsFactory $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException $r3;
        android.net.NetworkStats r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        r4 = virtualinvoke $r1.<com.android.server.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsSummaryDev()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private android.net.NetworkStats readNetworkStatsSummaryXt()
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsFactory $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException $r3;
        android.net.NetworkStats r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        r4 = virtualinvoke $r1.<com.android.server.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsSummaryXt()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private android.net.NetworkStats readNetworkStatsUidDetail(int, java.lang.String[], int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i1;
        com.android.server.net.NetworkStatsFactory $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException $r3;
        java.lang.String[] r4;
        android.net.NetworkStats r5;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String[];

        i1 := @parameter2: int;

     label1:
        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        r5 = virtualinvoke $r1.<com.android.server.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsDetail(int,java.lang.String[],int)>(i0, r4, i1);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void recordSnapshotLocked(long) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        android.net.NetworkStats r1, r2, r3, r18, r19;
        java.lang.String[] $r4;
        android.util.ArrayMap $r5, $r7, $r9, $r11, $r13, $r14, $r16, $r17;
        com.android.server.net.NetworkStatsRecorder $r6, $r8, $r10, $r12;
        com.android.server.net.NetworkStatsObservers $r15;

        r0 := @this: com.android.server.net.NetworkStatsService;

        l0 := @parameter0: long;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "snapshotUid");

        $r4 = <android.net.NetworkStats: java.lang.String[] INTERFACES_ALL>;

        r1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsUidDetail(java.lang.String[])>($r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "snapshotXt");

        r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats readNetworkStatsSummaryXt()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "snapshotDev");

        r3 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats readNetworkStatsSummaryDev()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "snapshotTether");

        r18 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsTethering(int)>(0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        virtualinvoke r2.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r18);

        virtualinvoke r3.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r18);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "snapshotStatsProvider");

        r19 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsFromProviders(int)>(0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        virtualinvoke r2.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r19);

        virtualinvoke r3.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r19);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "recordDev");

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r3, $r5, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "recordXt");

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r8.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r2, $r7, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "recordUid");

        $r10 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        $r9 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r10.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r1, $r9, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(2097152L, "recordUidTag");

        $r12 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        $r11 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r12.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r1, $r11, l0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(2097152L);

        $r15 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsObservers mStatsObservers>;

        $r13 = new android.util.ArrayMap;

        $r14 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        specialinvoke $r13.<android.util.ArrayMap: void <init>(android.util.ArrayMap)>($r14);

        $r16 = new android.util.ArrayMap;

        $r17 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        specialinvoke $r16.<android.util.ArrayMap: void <init>(android.util.ArrayMap)>($r17);

        virtualinvoke $r15.<com.android.server.net.NetworkStatsObservers: void updateStats(android.net.NetworkStats,android.net.NetworkStats,android.util.ArrayMap,android.util.ArrayMap,long)>(r2, r1, $r13, $r16, l0);

        return;
    }

    private void registerGlobalAlert()
    {
        com.android.server.net.NetworkStatsService r0;
        long $l0;
        android.os.INetworkManagementService $r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        com.android.server.net._$$Lambda$NetworkStatsService$KVH4Y9nH53_gEfrhunDFp_O6ExY $r11;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        $r2 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        $l0 = r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setGlobalAlert(long)>($l0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        goto label5;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem registering for global alert: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkStats", $r8);

     label5:
        $r11 = new com.android.server.net._$$Lambda$NetworkStatsService$KVH4Y9nH53_gEfrhunDFp_O6ExY;

        specialinvoke $r11.<com.android.server.net._$$Lambda$NetworkStatsService$KVH4Y9nH53_gEfrhunDFp_O6ExY: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void invokeForAllStatsProviderCallbacks(com.android.server.net.NetworkStatsService$ThrowingConsumer)>($r11);

        return;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void registerLocalService()
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsService$NetworkStatsManagerInternalImpl $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = new com.android.server.net.NetworkStatsService$NetworkStatsManagerInternalImpl;

        specialinvoke $r1.<com.android.server.net.NetworkStatsService$NetworkStatsManagerInternalImpl: void <init>(com.android.server.net.NetworkStatsService,com.android.server.net.NetworkStatsService$1)>(r0, null);

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/net/NetworkStatsManagerInternal;", $r1);

        return;
    }

    private transient void removeUidsLocked(int[])
    {
        com.android.server.net.NetworkStatsService r0;
        int[] r1;
        int i0, $i1, i3;
        boolean $z0;
        com.android.server.net.NetworkStatsRecorder $r3, $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: int[];

        $z0 = <com.android.server.net.NetworkStatsService: boolean LOGV>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeUidsLocked() for UIDs ");

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkStats", $r9);

     label1:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(3);

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r3.<com.android.server.net.NetworkStatsRecorder: void removeUidsLocked(int[])>(r1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void removeUidsLocked(int[])>(r1);

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $i1 = r1[i3];

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void resetKernelUidStats(int)>($i1);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    private void removeUserLocked(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        boolean $z0, $z1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        java.util.List $r4;
        java.lang.Object $r5;
        android.content.pm.ApplicationInfo $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;
        int[] r12;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        $z0 = <com.android.server.net.NetworkStatsService: boolean LOGV>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removeUserLocked() for userId=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkStats", $r10);

     label1:
        r12 = newarray (int)[0];

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>(4194816);

        r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.content.pm.ApplicationInfo) $r5;

        $i1 = $r6.<android.content.pm.ApplicationInfo: int uid>;

        $i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i1);

        r12 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r12, $i2);

        goto label2;

     label3:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void removeUidsLocked(int[])>(r12);

        return;
    }

    private android.telephony.SubscriptionPlan resolveSubscriptionPlan(android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, $i2;
        long l1;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        com.android.server.net.NetworkPolicyManagerInternal $r3;
        java.lang.StringBuilder $r4, $r6;
        java.lang.String $r5, $r7;
        java.lang.Throwable $r8;
        android.net.NetworkTemplate r9;
        android.telephony.SubscriptionPlan r10, r12;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r9 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        r10 = null;

        $i2 = i0 & 4;

        if $i2 == 0 goto label5;

        r10 = null;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z0 = interfaceinvoke $r1.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getAugmentEnabled()>();

        if $z0 == 0 goto label5;

        $z1 = <com.android.server.net.NetworkStatsService: boolean LOGD>;

        if $z1 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolving plan for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkStats", $r7);

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        $r3 = (com.android.server.net.NetworkPolicyManagerInternal) $r2;

        r12 = virtualinvoke $r3.<com.android.server.net.NetworkPolicyManagerInternal: android.telephony.SubscriptionPlan getSubscriptionPlan(android.net.NetworkTemplate)>(r9);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        r10 = r12;

        $z2 = <com.android.server.net.NetworkStatsService: boolean LOGD>;

        if $z2 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resolved to plan ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkStats", $r5);

        r10 = r12;

        goto label5;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

     label5:
        return r10;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void shutdownLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        android.content.BroadcastReceiver $r1, $r3, $r5, $r7, $r9;
        android.content.Context $r2, $r4, $r6, $r8, $r10;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r11;
        boolean $z0;
        java.time.Clock $r12;
        com.android.server.net.NetworkStatsRecorder $r13, $r14, $r15, $r16;
        com.android.server.net.NetworkStatsSubscriptionsMonitor $r17;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mTetherReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mPollReceiver>;

        virtualinvoke $r4.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r3);

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mRemovedReceiver>;

        virtualinvoke $r6.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r5);

        $r8 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mUserReceiver>;

        virtualinvoke $r8.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r7);

        $r10 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r9 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mShutdownReceiver>;

        virtualinvoke $r10.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r9);

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z0 = interfaceinvoke $r11.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getCombineSubtypeEnabled()>();

        if $z0 != 0 goto label1;

        $r17 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsSubscriptionsMonitor mNetworkStatsSubscriptionsMonitor>;

        virtualinvoke $r17.<com.android.server.net.NetworkStatsSubscriptionsMonitor: void stop()>();

     label1:
        $r12 = r0.<com.android.server.net.NetworkStatsService: java.time.Clock mClock>;

        l0 = virtualinvoke $r12.<java.time.Clock: long millis()>();

        $r13 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r13.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r14 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r14.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r15 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r15.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r16 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r16.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady> = 0;

        return;
    }

    private void updateIfaces(android.net.Network[], android.net.NetworkState[], java.lang.String)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkState[] r1;
        java.lang.String r2;
        java.lang.Object r3;
        android.os.PowerManager$WakeLock $r4, $r5, $r8;
        java.lang.Throwable $r6, $r7;
        android.net.Network[] r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r9 := @parameter0: android.net.Network[];

        r1 := @parameter1: android.net.NetworkState[];

        r2 := @parameter2: java.lang.String;

        r3 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r3;

     label01:
        $r4 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

     label02:
        r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface> = r2;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updateIfacesLocked(android.net.Network[],android.net.NetworkState[])>(r9, r1);

     label03:
        $r5 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void release()>();

     label04:
        exitmonitor r3;

     label05:
        return;

     label06:
        $r7 := @caughtexception;

     label07:
        $r8 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r8.<android.os.PowerManager$WakeLock: void release()>();

     label08:
        throw $r7;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r3;

     label11:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void updateIfacesLocked(android.net.Network[], android.net.NetworkState[])
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkState[] r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z11, $z13, $z14, $z17;
        int i0, $i1, $i2, $i3, $i4, i6, i7;
        java.lang.String r2, $r29, $r30, r44;
        android.util.ArrayMap $r3, $r4, $r18, $r20, $r23, $r25, $r31, $r33;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r5;
        android.util.ArraySet $r6;
        java.lang.String[] $r7, $r9;
        java.lang.Object[] $r8;
        android.net.NetworkInfo $r10, $r11;
        android.net.Network $r12;
        android.net.Network[] $r13, r35;
        android.content.Context $r14;
        android.net.LinkProperties $r15, $r17, $r41;
        java.lang.Object $r16;
        com.android.server.net.NetworkIdentitySet $r19, $r21, $r24, $r26, $r32, $r34;
        com.android.server.net.NetworkStatsFactory $r22;
        android.net.NetworkCapabilities $r27;
        android.net.NetworkIdentity $r28, r39;
        android.net.NetworkState r38;
        java.util.List $r42;
        java.util.Iterator r43;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r35 := @parameter0: android.net.Network[];

        r1 := @parameter1: android.net.NetworkState[];

        $z3 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z3 != 0 goto label01;

        return;

     label01:
        $z4 = <com.android.server.net.NetworkStatsService: boolean LOGV>;

        if $z4 == 0 goto label02;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("NetworkStats", "updateIfacesLocked()");

     label02:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(1);

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r3.<android.util.ArrayMap: void clear()>();

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r4.<android.util.ArrayMap: void clear()>();

        if r35 == null goto label03;

        r0.<com.android.server.net.NetworkStatsService: android.net.Network[] mDefaultNetworks> = r35;

     label03:
        r0.<com.android.server.net.NetworkStatsService: android.net.NetworkState[] mLastNetworkStates> = r1;

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        z0 = interfaceinvoke $r5.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getCombineSubtypeEnabled()>();

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        i0 = lengthof r1;

        i6 = 0;

     label04:
        if i6 >= i0 goto label13;

        r38 = r1[i6];

        $r10 = r38.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $z5 = virtualinvoke $r10.<android.net.NetworkInfo: boolean isConnected()>();

        if $z5 == 0 goto label12;

        $r11 = r38.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $i2 = virtualinvoke $r11.<android.net.NetworkInfo: int getType()>();

        z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>($i2);

        $r13 = r0.<com.android.server.net.NetworkStatsService: android.net.Network[] mDefaultNetworks>;

        $r12 = r38.<android.net.NetworkState: android.net.Network network>;

        z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r13, $r12);

        if z0 == 0 goto label05;

        i7 = -1;

        goto label06;

     label05:
        i7 = specialinvoke r0.<com.android.server.net.NetworkStatsService: int getSubTypeForState(android.net.NetworkState)>(r38);

     label06:
        $r14 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        r39 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState,boolean,int)>($r14, r38, z2, i7);

        $r15 = r38.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r2 = virtualinvoke $r15.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r2 == null goto label08;

        $r23 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r24 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r23, r2);

        virtualinvoke $r24.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r39);

        $r25 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r26 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r25, r2);

        virtualinvoke $r26.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r39);

        $r27 = r38.<android.net.NetworkState: android.net.NetworkCapabilities networkCapabilities>;

        $z11 = virtualinvoke $r27.<android.net.NetworkCapabilities: boolean hasCapability(int)>(4);

        if $z11 == 0 goto label07;

        $z13 = virtualinvoke r39.<android.net.NetworkIdentity: boolean getMetered()>();

        if $z13 != 0 goto label07;

        $r28 = new android.net.NetworkIdentity;

        $i3 = virtualinvoke r39.<android.net.NetworkIdentity: int getType()>();

        $i4 = virtualinvoke r39.<android.net.NetworkIdentity: int getSubType()>();

        $r29 = virtualinvoke r39.<android.net.NetworkIdentity: java.lang.String getSubscriberId()>();

        $r30 = virtualinvoke r39.<android.net.NetworkIdentity: java.lang.String getNetworkId()>();

        $z14 = virtualinvoke r39.<android.net.NetworkIdentity: boolean getRoaming()>();

        specialinvoke $r28.<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,java.lang.String,boolean,boolean,boolean)>($i3, $i4, $r29, $r30, $z14, 1, 1);

        $r31 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r32 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r31, "vt_data0");

        virtualinvoke $r32.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>($r28);

        $r33 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r34 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r33, "vt_data0");

        virtualinvoke $r34.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>($r28);

     label07:
        if z1 == 0 goto label08;

        virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>(r2);

     label08:
        $r41 = r38.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $r42 = virtualinvoke $r41.<android.net.LinkProperties: java.util.List getStackedLinks()>();

        r43 = interfaceinvoke $r42.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z17 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label12;

        $r16 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (android.net.LinkProperties) $r16;

        r44 = virtualinvoke $r17.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r44 == null goto label11;

        $r18 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r19 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r18, r44);

        virtualinvoke $r19.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r39);

        $r20 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r21 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r20, r44);

        virtualinvoke $r21.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r39);

        if z1 == 0 goto label10;

        virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>(r44);

     label10:
        $r22 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        virtualinvoke $r22.<com.android.server.net.NetworkStatsFactory: void noteStackedIface(java.lang.String,java.lang.String)>(r44, r2);

     label11:
        goto label09;

     label12:
        i6 = i6 + 1;

        goto label04;

     label13:
        $i1 = virtualinvoke $r6.<android.util.ArraySet: int size()>();

        $r7 = newarray (java.lang.String)[$i1];

        $r8 = virtualinvoke $r6.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.String[]) $r8;

        r0.<com.android.server.net.NetworkStatsService: java.lang.String[] mMobileIfaces> = $r9;

        return;
    }

    private void updatePersistThresholdsLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r1, $r3, $r5, $r7, $r9;
        com.android.server.net.NetworkStatsRecorder $r2, $r4, $r6, $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l0 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l1 = interfaceinvoke $r1.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getDevPersistBytes(long)>($l0);

        virtualinvoke $r2.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l2 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l3 = interfaceinvoke $r3.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getXtPersistBytes(long)>($l2);

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l3);

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l4 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l5 = interfaceinvoke $r5.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getUidPersistBytes(long)>($l4);

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l5);

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l6 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l7 = interfaceinvoke $r7.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getUidTagPersistBytes(long)>($l6);

        virtualinvoke $r8.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l7);

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l8 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l9 = interfaceinvoke $r9.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getGlobalAlertBytes(long)>($l8);

        r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes> = $l9;

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.NetworkStatsService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, z10, z12, $z13, z14, $z15, z16, z17, $z18;
        android.util.SparseIntArray r3, $r17, r85;
        int i0, $i1, $i7, i12, i14, i16, i26, i28, i32, i34, i39, i41, i43, i45, i46, i47;
        android.content.Context $r4;
        java.util.HashSet $r5;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r7;
        java.lang.Boolean $r8;
        android.util.ArrayMap $r12, $r15, $r34, $r37, $r40, $r43;
        com.android.server.net.NetworkStatsRecorder $r23, $r26, $r29, $r32, $r46, $r47, r70;
        long $l2, $l3, $l4, $l5, $l6, $l8, $l9, $l10, $l11, l13, l15, l17, l18, l44;
        java.lang.Object $r35, $r38, $r41, $r44, r67, r69, r92;
        java.lang.String $r48, $r49, $r50, r64;
        java.lang.Throwable $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, r68, r94;
        java.io.FileDescriptor r61;
        java.io.PrintWriter r62;
        java.lang.String[] r63;
        com.android.internal.util.IndentingPrintWriter $r66;
        long[] r89;
        com.android.server.net._$$Lambda$NetworkStatsService$_IJG_2djYyEsmGNuCKyh0LuHG28 r93;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r61 := @parameter0: java.io.FileDescriptor;

        r62 := @parameter1: java.io.PrintWriter;

        r63 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $z1 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "NetworkStats", r62);

        if $z1 != 0 goto label001;

        return;

     label001:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        i12 = lengthof r63;

        l13 = 86400000L;

        i14 = 0;

     label002:
        if i14 >= i12 goto label007;

        r64 = r63[i14];

        virtualinvoke $r5.<java.util.HashSet: boolean add(java.lang.Object)>(r64);

        l15 = l13;

        $z9 = virtualinvoke r64.<java.lang.String: boolean startsWith(java.lang.String)>("--duration=");

        if $z9 == 0 goto label006;

     label003:
        $r50 = virtualinvoke r64.<java.lang.String: java.lang.String substring(int)>(11);

        l15 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r50);

     label004:
        goto label006;

     label005:
        $r51 := @caughtexception;

        l15 = l13;

     label006:
        i14 = i14 + 1;

        l13 = l15;

        goto label002;

     label007:
        z10 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("--poll");

        if z10 != 0 goto label009;

        $z7 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("poll");

        if $z7 == 0 goto label008;

        goto label009;

     label008:
        z12 = 0;

        goto label010;

     label009:
        z12 = 1;

     label010:
        z0 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("--checkin");

        $z13 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("--full");

        if $z13 != 0 goto label012;

        $z6 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("full");

        if $z6 == 0 goto label011;

        goto label012;

     label011:
        z14 = 0;

        goto label013;

     label012:
        z14 = 1;

     label013:
        $z15 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("--uid");

        if $z15 != 0 goto label015;

        $z5 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("detail");

        if $z5 == 0 goto label014;

        goto label015;

     label014:
        z16 = 0;

        goto label016;

     label015:
        z16 = 1;

     label016:
        z17 = 1;

        $z18 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("--tag");

        if $z18 != 0 goto label018;

        $z4 = virtualinvoke $r5.<java.util.HashSet: boolean contains(java.lang.Object)>("detail");

        if $z4 == 0 goto label017;

        z17 = 1;

        goto label018;

     label017:
        z17 = 0;

     label018:
        $r66 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r62, "  ");

        r67 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r67;

     label019:
        i16 = lengthof r63;

     label020:
        if i16 <= 0 goto label024;

     label021:
        $r49 = "--proto";

        $r48 = r63[0];

        $z3 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>($r48);

        if $z3 == 0 goto label024;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void dumpProtoLocked(java.io.FileDescriptor)>(r61);

        exitmonitor r67;

     label022:
        return;

     label023:
        $r56 := @caughtexception;

        r68 = $r56;

        r69 = r67;

        goto label149;

     label024:
        if z12 == 0 goto label027;

     label025:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(259);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Forced poll");

        exitmonitor r67;

     label026:
        return;

     label027:
        if z0 == 0 goto label042;

     label028:
        l17 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label029:
        l18 = l17 - l13;

     label030:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("v1,");

     label031:
        $l10 = l18 / 1000L;

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void print(long)>($l10);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void print(char)>(44);

        $l11 = l17 / 1000L;

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void print(long)>($l11);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("xt");

        r70 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

     label032:
        virtualinvoke r70.<com.android.server.net.NetworkStatsRecorder: void dumpCheckin(java.io.PrintWriter,long,long)>(r62, l18, l17);

     label033:
        if z16 == 0 goto label035;

     label034:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("uid");

        $r47 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r47.<com.android.server.net.NetworkStatsRecorder: void dumpCheckin(java.io.PrintWriter,long,long)>(r62, l18, l17);

     label035:
        if z17 == 0 goto label037;

     label036:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("tag");

        $r46 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r46.<com.android.server.net.NetworkStatsRecorder: void dumpCheckin(java.io.PrintWriter,long,long)>(r62, l18, l17);

     label037:
        exitmonitor r67;

     label038:
        return;

     label039:
        $r52 := @caughtexception;

        r69 = r67;

        r68 = $r52;

        goto label149;

     label040:
        $r53 := @caughtexception;

        r68 = $r53;

        r69 = r67;

        goto label149;

     label041:
        $r54 := @caughtexception;

        r68 = $r54;

        r69 = r67;

        goto label149;

     label042:
        r69 = r67;

     label043:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Configs:");

     label044:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label045:
        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z2 = interfaceinvoke $r7.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getCombineSubtypeEnabled()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("netstats_combine_subtype_enabled", $r8);

     label046:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label047:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label048:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active interfaces:");

     label049:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label050:
        i26 = 0;

     label051:
        $r12 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        i28 = virtualinvoke $r12.<android.util.ArrayMap: int size()>();

     label052:
        if i26 >= i28 goto label055;

     label053:
        $r40 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r41 = virtualinvoke $r40.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i26);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("iface", $r41);

        $r43 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r44 = virtualinvoke $r43.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i26);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("ident", $r44);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label054:
        i26 = i26 + 1;

        goto label051;

     label055:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label056:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active UID interfaces:");

     label057:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label058:
        i32 = 0;

     label059:
        $r15 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        i34 = virtualinvoke $r15.<android.util.ArrayMap: int size()>();

     label060:
        if i32 >= i34 goto label063;

     label061:
        $r34 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r35 = virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i32);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("iface", $r35);

        $r37 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r38 = virtualinvoke $r37.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i32);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("ident", $r38);

        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label062:
        i32 = i32 + 1;

        goto label059;

     label063:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label064:
        r85 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mOpenSessionCallsPerUid>;

     label065:
        entermonitor r85;

     label066:
        $r17 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mOpenSessionCallsPerUid>;

        r3 = virtualinvoke $r17.<android.util.SparseIntArray: android.util.SparseIntArray clone()>();

        exitmonitor r85;

     label067:
        i39 = virtualinvoke r3.<android.util.SparseIntArray: int size()>();

     label068:
        r89 = newarray (long)[i39];

     label069:
        i41 = 0;

     label070:
        if i41 >= i39 goto label075;

     label071:
        i43 = virtualinvoke r3.<android.util.SparseIntArray: int valueAt(int)>(i41);

     label072:
        l44 = (long) i43;

        r92 = r67;

     label073:
        $l6 = l44 << 32;

        $i7 = virtualinvoke r3.<android.util.SparseIntArray: int keyAt(int)>(i41);

        $l8 = (long) $i7;

        $l9 = $l6 | $l8;

        r89[i41] = $l9;

     label074:
        i41 = i41 + 1;

        goto label070;

     label075:
        r92 = r67;

     label076:
        staticinvoke <java.util.Arrays: void sort(long[])>(r89);

     label077:
        r92 = r67;

     label078:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Top openSession callers (uid=count):");

     label079:
        r92 = r67;

     label080:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label081:
        r92 = r67;

     label082:
        $i1 = i39 - 20;

        i45 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

     label083:
        i46 = i39 - 1;

     label084:
        if i46 < i45 goto label091;

        $l2 = r89[i46];

        $l3 = $l2 & -1L;

        i0 = (int) $l3;

        $l4 = r89[i46];

        $l5 = $l4 >> 32;

        i47 = (int) $l5;

        r92 = r67;

     label085:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void print(int)>(i0);

     label086:
        r92 = r67;

     label087:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

     label088:
        r92 = r67;

     label089:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(int)>(i47);

     label090:
        i46 = i46 + -1;

        goto label084;

     label091:
        r92 = r67;

     label092:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label093:
        r92 = r67;

     label094:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label095:
        r92 = r67;

     label096:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Stats Providers:");

     label097:
        r92 = r67;

     label098:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label099:
        r92 = r67;

     label100:
        r93 = new com.android.server.net._$$Lambda$NetworkStatsService$_IJG_2djYyEsmGNuCKyh0LuHG28;

     label101:
        r92 = r67;

     label102:
        specialinvoke r93.<com.android.server.net._$$Lambda$NetworkStatsService$_IJG_2djYyEsmGNuCKyh0LuHG28: void <init>(com.android.internal.util.IndentingPrintWriter,boolean)>($r66, z16);

     label103:
        r92 = r67;

     label104:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void invokeForAllStatsProviderCallbacks(com.android.server.net.NetworkStatsService$ThrowingConsumer)>(r93);

     label105:
        r92 = r67;

     label106:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label107:
        r92 = r67;

     label108:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Dev stats:");

     label109:
        r92 = r67;

     label110:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label111:
        r92 = r67;

     label112:
        $r23 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r23.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>($r66, z14);

     label113:
        r92 = r67;

     label114:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label115:
        r92 = r67;

     label116:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Xt stats:");

     label117:
        r92 = r67;

     label118:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label119:
        r92 = r67;

     label120:
        $r26 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r26.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>($r66, z14);

     label121:
        r92 = r67;

     label122:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label123:
        if z16 == 0 goto label131;

        r92 = r67;

     label124:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("UID stats:");

     label125:
        r92 = r67;

     label126:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label127:
        r92 = r67;

     label128:
        $r32 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r32.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>($r66, z14);

     label129:
        r92 = r67;

     label130:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label131:
        if z17 == 0 goto label139;

        r92 = r67;

     label132:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("UID tag stats:");

     label133:
        r92 = r67;

     label134:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label135:
        r92 = r67;

     label136:
        $r29 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r29.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>($r66, z14);

     label137:
        r92 = r67;

     label138:
        virtualinvoke $r66.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label139:
        r92 = r67;

     label140:
        exitmonitor r67;

     label141:
        return;

     label142:
        $r57 := @caughtexception;

        r94 = $r57;

     label143:
        exitmonitor r85;

     label144:
        r92 = r67;

     label145:
        throw r94;

     label146:
        $r58 := @caughtexception;

        r94 = $r58;

        goto label143;

     label147:
        $r59 := @caughtexception;

        r68 = $r59;

        goto label149;

     label148:
        $r55 := @caughtexception;

        r68 = $r55;

        r69 = r67;

     label149:
        r92 = r69;

     label150:
        exitmonitor r69;

     label151:
        throw r68;

     label152:
        $r60 := @caughtexception;

        r68 = $r60;

        r69 = r92;

        goto label149;

        catch java.lang.NumberFormatException from label003 to label004 with label005;
        catch java.lang.Throwable from label019 to label020 with label148;
        catch java.lang.Throwable from label021 to label022 with label023;
        catch java.lang.Throwable from label025 to label026 with label023;
        catch java.lang.Throwable from label028 to label029 with label041;
        catch java.lang.Throwable from label030 to label031 with label041;
        catch java.lang.Throwable from label031 to label032 with label040;
        catch java.lang.Throwable from label032 to label033 with label039;
        catch java.lang.Throwable from label034 to label035 with label039;
        catch java.lang.Throwable from label036 to label037 with label039;
        catch java.lang.Throwable from label037 to label038 with label039;
        catch java.lang.Throwable from label043 to label044 with label147;
        catch java.lang.Throwable from label044 to label045 with label147;
        catch java.lang.Throwable from label045 to label046 with label147;
        catch java.lang.Throwable from label046 to label047 with label147;
        catch java.lang.Throwable from label047 to label048 with label147;
        catch java.lang.Throwable from label048 to label049 with label147;
        catch java.lang.Throwable from label049 to label050 with label147;
        catch java.lang.Throwable from label051 to label052 with label147;
        catch java.lang.Throwable from label053 to label054 with label039;
        catch java.lang.Throwable from label055 to label056 with label147;
        catch java.lang.Throwable from label056 to label057 with label147;
        catch java.lang.Throwable from label057 to label058 with label147;
        catch java.lang.Throwable from label059 to label060 with label147;
        catch java.lang.Throwable from label061 to label062 with label039;
        catch java.lang.Throwable from label063 to label064 with label147;
        catch java.lang.Throwable from label064 to label065 with label147;
        catch java.lang.Throwable from label065 to label066 with label147;
        catch java.lang.Throwable from label066 to label067 with label142;
        catch java.lang.Throwable from label067 to label068 with label147;
        catch java.lang.Throwable from label068 to label069 with label147;
        catch java.lang.Throwable from label071 to label072 with label147;
        catch java.lang.Throwable from label073 to label074 with label152;
        catch java.lang.Throwable from label076 to label077 with label152;
        catch java.lang.Throwable from label078 to label079 with label152;
        catch java.lang.Throwable from label080 to label081 with label152;
        catch java.lang.Throwable from label082 to label083 with label152;
        catch java.lang.Throwable from label085 to label086 with label152;
        catch java.lang.Throwable from label087 to label088 with label152;
        catch java.lang.Throwable from label089 to label090 with label152;
        catch java.lang.Throwable from label092 to label093 with label152;
        catch java.lang.Throwable from label094 to label095 with label152;
        catch java.lang.Throwable from label096 to label097 with label152;
        catch java.lang.Throwable from label098 to label099 with label152;
        catch java.lang.Throwable from label100 to label101 with label152;
        catch java.lang.Throwable from label102 to label103 with label152;
        catch java.lang.Throwable from label104 to label105 with label152;
        catch java.lang.Throwable from label106 to label107 with label152;
        catch java.lang.Throwable from label108 to label109 with label152;
        catch java.lang.Throwable from label110 to label111 with label152;
        catch java.lang.Throwable from label112 to label113 with label152;
        catch java.lang.Throwable from label114 to label115 with label152;
        catch java.lang.Throwable from label116 to label117 with label152;
        catch java.lang.Throwable from label118 to label119 with label152;
        catch java.lang.Throwable from label120 to label121 with label152;
        catch java.lang.Throwable from label122 to label123 with label152;
        catch java.lang.Throwable from label124 to label125 with label152;
        catch java.lang.Throwable from label126 to label127 with label152;
        catch java.lang.Throwable from label128 to label129 with label152;
        catch java.lang.Throwable from label130 to label131 with label152;
        catch java.lang.Throwable from label132 to label133 with label152;
        catch java.lang.Throwable from label134 to label135 with label152;
        catch java.lang.Throwable from label136 to label137 with label152;
        catch java.lang.Throwable from label138 to label139 with label152;
        catch java.lang.Throwable from label140 to label141 with label152;
        catch java.lang.Throwable from label143 to label144 with label146;
        catch java.lang.Throwable from label145 to label146 with label152;
        catch java.lang.Throwable from label150 to label151 with label152;
    }

    public void forceUpdate()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        android.content.Context $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_NETWORK_USAGE_HISTORY", "NetworkStats");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPoll(int)>(3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void forceUpdateIfaces(android.net.Network[], android.net.NetworkState[], java.lang.String, com.android.internal.net.VpnInfo[])
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkState[] r1;
        java.lang.String r2;
        com.android.internal.net.VpnInfo[] r3;
        long l0;
        android.content.Context $r4;
        com.android.server.net.NetworkStatsFactory $r5;
        java.lang.Throwable $r6;
        android.net.Network[] r7;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r7 := @parameter0: android.net.Network[];

        r1 := @parameter1: android.net.NetworkState[];

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.internal.net.VpnInfo[];

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r4);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String)>(r7, r1, r2);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        virtualinvoke $r5.<com.android.server.net.NetworkStatsFactory: void updateVpnInfos(com.android.internal.net.VpnInfo[])>(r3);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.NetworkStats getDataLayerSnapshotForUid(int) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkStats r1, $r4, $r5, $r8;
        int $i0, $i2, $i3, i6, i7;
        java.lang.String[] $r3;
        long $l1, $l5;
        java.lang.String $r6;
        android.net.NetworkStats$Entry r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i6 := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == i6 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("NetworkStats", "Snapshots only available for calling UID");

        $r8 = new android.net.NetworkStats;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r8.<android.net.NetworkStats: void <init>(long,int)>($l5, 0);

        return $r8;

     label1:
        $r3 = <android.net.NetworkStats: java.lang.String[] INTERFACES_ALL>;

        r1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats readNetworkStatsUidDetail(int,java.lang.String[],int)>(i6, $r3, -1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        virtualinvoke r1.<android.net.NetworkStats: void spliceOperationsFrom(android.net.NetworkStats)>($r4);

        $r5 = new android.net.NetworkStats;

        $l1 = virtualinvoke r1.<android.net.NetworkStats: long getElapsedRealtime()>();

        $i2 = virtualinvoke r1.<android.net.NetworkStats: int size()>();

        specialinvoke $r5.<android.net.NetworkStats: void <init>(long,int)>($l1, $i2);

        r9 = null;

        i7 = 0;

     label2:
        $i3 = virtualinvoke r1.<android.net.NetworkStats: int size()>();

        if i7 >= $i3 goto label3;

        r9 = virtualinvoke r1.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i7, r9);

        $r6 = <android.net.NetworkStats: java.lang.String IFACE_ALL>;

        r9.<android.net.NetworkStats$Entry: java.lang.String iface> = $r6;

        virtualinvoke $r5.<android.net.NetworkStats: android.net.NetworkStats combineValues(android.net.NetworkStats$Entry)>(r9);

        i7 = i7 + 1;

        goto label2;

     label3:
        return $r5;
    }

    public android.net.NetworkStats getDetailedUidStats(java.lang.String[])
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsFactory $r1;
        java.lang.String[] $r2, r5;
        android.os.RemoteException $r3;
        android.net.NetworkStats $r4, r6;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r5 := @parameter0: java.lang.String[];

     label1:
        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsFactory mStatsFactory>;

        $r2 = virtualinvoke $r1.<com.android.server.net.NetworkStatsFactory: java.lang.String[] augmentWithStackedInterfaces(java.lang.String[])>(r5);

        r6 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsUidDetail(java.lang.String[])>($r2);

     label2:
        return r6;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "Error compiling UID stats", $r3);

        $r4 = new android.net.NetworkStats;

        specialinvoke $r4.<android.net.NetworkStats: void <init>(long,int)>(0L, 0);

        return $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public long getIfaceStats(java.lang.String, int)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String r1;
        int i0;
        long l1, $l3, $l4;
        boolean $z0;
        byte $b2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean checkBpfStatsEnable()>();

        l1 = staticinvoke <com.android.server.net.NetworkStatsService: long nativeGetIfaceStat(java.lang.String,int,boolean)>(r1, i0, $z0);

        $b2 = l1 cmp -1L;

        if $b2 != 0 goto label1;

        return l1;

     label1:
        $l3 = specialinvoke r0.<com.android.server.net.NetworkStatsService: long getTetherStats(java.lang.String,int)>(r1, i0);

        $l4 = $l3 + l1;

        return $l4;
    }

    public java.lang.String[] getMobileIfaces()
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.String[] mMobileIfaces>;

        return $r1;
    }

    public long getTotalStats(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        long l1, $l3, $l4;
        boolean $z0;
        byte $b2;
        java.lang.String $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean checkBpfStatsEnable()>();

        l1 = staticinvoke <com.android.server.net.NetworkStatsService: long nativeGetTotalStat(int,boolean)>(i0, $z0);

        $b2 = l1 cmp -1L;

        if $b2 != 0 goto label1;

        return l1;

     label1:
        $r1 = <android.net.NetworkStats: java.lang.String IFACE_ALL>;

        $l3 = specialinvoke r0.<com.android.server.net.NetworkStatsService: long getTetherStats(java.lang.String,int)>($r1, i0);

        $l4 = $l3 + l1;

        return $l4;
    }

    public long getUidStats(int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i1, i2;
        boolean $z0;
        long $l3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i2 == 1000 goto label1;

        if i2 == i0 goto label1;

        return -1L;

     label1:
        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean checkBpfStatsEnable()>();

        $l3 = staticinvoke <com.android.server.net.NetworkStatsService: long nativeGetUidStat(int,int,boolean)>(i0, i1, $z0);

        return $l3;
    }

    public void handleOnCollapsedRatTypeChanged()
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.Handler r1, $r2;
        android.os.Message $r3;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r4;
        long $l0;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(3);

        r1 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        $r3 = virtualinvoke r1.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l0 = interfaceinvoke $r4.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getPollDelay()>();

        virtualinvoke r1.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l0);

        return;
    }

    public void incrementOperationCount(int, int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i1, i2, i3, $i4;
        android.net.NetworkStats r1, r12;
        java.lang.IllegalArgumentException $r2, $r3;
        android.util.SparseIntArray $r4;
        android.content.Context $r7;
        java.lang.Throwable $r8, $r9, $r10, r16;
        java.lang.Object r11, r15;
        java.lang.String r13, r14;
        long l5, l6;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i4 == i0 goto label01;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", "NetworkStats");

     label01:
        if i2 < 0 goto label17;

        if i1 == 0 goto label16;

        r11 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r11;

     label02:
        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet>;

        i3 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        r12 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        r13 = r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface>;

     label03:
        l5 = (long) i2;

     label04:
        virtualinvoke r12.<android.net.NetworkStats: android.net.NetworkStats combineValues(java.lang.String,int,int,int,long,long,long,long,long)>(r13, i0, i3, i1, 0L, 0L, 0L, 0L, l5);

        r1 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        r14 = r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface>;

     label05:
        l6 = (long) i2;

        r15 = r11;

     label06:
        virtualinvoke r1.<android.net.NetworkStats: android.net.NetworkStats combineValues(java.lang.String,int,int,int,long,long,long,long,long)>(r14, i0, i3, 0, 0L, 0L, 0L, 0L, l6);

     label07:
        r15 = r11;

     label08:
        exitmonitor r11;

     label09:
        return;

     label10:
        $r8 := @caughtexception;

        r16 = $r8;

        goto label12;

     label11:
        $r9 := @caughtexception;

        r16 = $r9;

     label12:
        r15 = r11;

     label13:
        exitmonitor r11;

     label14:
        throw r16;

     label15:
        $r10 := @caughtexception;

        r16 = $r10;

        r11 = r15;

        goto label12;

     label16:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("operation count must have specific tag");

        throw $r3;

     label17:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("operation count can only be incremented");

        throw $r2;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public void lambda$registerGlobalAlert$0$NetworkStatsService(com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl r1;
        long $l0;
        android.net.netstats.provider.INetworkStatsProvider $r2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl;

        $r2 = r1.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: android.net.netstats.provider.INetworkStatsProvider mProvider>;

        $l0 = r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes>;

        interfaceinvoke $r2.<android.net.netstats.provider.INetworkStatsProvider: void onSetAlert(long)>($l0);

        return;
    }

    public android.net.INetworkStatsSession openSession()
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.INetworkStatsSession $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSessionInternal(int,java.lang.String)>(4, null);

        return $r1;
    }

    public android.net.INetworkStatsSession openSessionForUsageStats(int, java.lang.String)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        java.lang.String r1;
        android.net.INetworkStatsSession $r2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSessionInternal(int,java.lang.String)>(i0, r1);

        return $r2;
    }

    public android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String, android.net.netstats.provider.INetworkStatsProvider)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.netstats.provider.INetworkStatsProvider r1;
        com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl r2;
        java.lang.String[] $r3;
        java.util.concurrent.CopyOnWriteArrayList $r6, $r9;
        android.net.INetworkManagementEventObserver $r7;
        java.util.concurrent.Semaphore $r8;
        java.lang.String $r11, $r17, r19;
        int $i0, $i1;
        android.os.RemoteException $r18;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r19 := @parameter0: java.lang.String;

        r1 := @parameter1: android.net.netstats.provider.INetworkStatsProvider;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "android.permission.NETWORK_STATS_PROVIDER";

        $r3[1] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void enforceAnyPermissionOf(java.lang.String[])>($r3);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "provider is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r19, "tag is null");

     label1:
        r2 = new com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl;

        $r8 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.Semaphore mStatsProviderSem>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.net.INetworkManagementEventObserver mAlertObserver>;

        $r6 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.CopyOnWriteArrayList mStatsProviderCbList>;

        specialinvoke r2.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: void <init>(java.lang.String,android.net.netstats.provider.INetworkStatsProvider,java.util.concurrent.Semaphore,android.net.INetworkManagementEventObserver,java.util.concurrent.CopyOnWriteArrayList)>(r19, r1, $r8, $r7, $r6);

        $r9 = r0.<com.android.server.net.NetworkStatsService: java.util.concurrent.CopyOnWriteArrayList mStatsProviderCbList>;

        virtualinvoke $r9.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r2);

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerNetworkStatsProvider from ");

        $r11 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsProviderCallbackImpl: java.lang.String mTag>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid/pid=");

        $i0 = staticinvoke <com.android.server.net.NetworkStatsService: int getCallingUid()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i1 = staticinvoke <com.android.server.net.NetworkStatsService: int getCallingPid()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r17 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("NetworkStats", $r17);

     label2:
        return r2;

     label3:
        $r18 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "registerNetworkStatsProvider failed", $r18);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.net.DataUsageRequest registerUsageCallback(java.lang.String, android.net.DataUsageRequest, android.os.Messenger, android.os.IBinder)
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.Messenger r1;
        android.os.IBinder r2;
        int i0, i1;
        long l2;
        android.net.NetworkTemplate $r5;
        com.android.server.net.NetworkStatsObservers $r9;
        android.os.Message $r10;
        java.lang.Throwable $r11;
        java.lang.String r12;
        android.net.DataUsageRequest r13, r14;
        android.os.Handler r15;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r12 := @parameter0: java.lang.String;

        r13 := @parameter1: android.net.DataUsageRequest;

        r1 := @parameter2: android.os.Messenger;

        r2 := @parameter3: android.os.IBinder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "calling package is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "DataUsageRequest is null");

        $r5 = r13.<android.net.DataUsageRequest: android.net.NetworkTemplate template>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r5, "NetworkTemplate is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "messenger is null");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r2, "binder is null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: int checkAccessLevel(java.lang.String)>(r12);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsObservers mStatsObservers>;

        r14 = virtualinvoke $r9.<com.android.server.net.NetworkStatsObservers: android.net.DataUsageRequest register(android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder,int,int)>(r13, r1, r2, i0, i1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        r15 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        $r10 = virtualinvoke r15.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r15.<android.os.Handler: boolean sendMessage(android.os.Message)>($r10);

        return r14;

     label3:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setUidForeground(int, boolean)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, $i1;
        boolean z0;
        java.lang.Object r1;
        android.util.SparseIntArray $r3, $r4;
        java.lang.Throwable $r5;
        byte b2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r1;

        if z0 == 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 0;

     label2:
        $r3 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet>;

        $i1 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        if $i1 == b2 goto label3;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet>;

        virtualinvoke $r4.<android.util.SparseIntArray: void put(int,int)>(i0, b2);

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void setKernelCounterSet(int,int)>(i0, b2);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void systemReady()
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.Object r1;
        long l0, $l1;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r2, $r5, $r8, $r11, $r44, $r46;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config $r3, $r6, $r9, $r12;
        com.android.server.net.NetworkStatsRecorder $r4, $r7, $r10, $r13, $r14;
        com.android.server.net.NetworkStatsCollection $r15;
        android.content.IntentFilter $r16, $r21, $r26, $r31, $r36;
        android.os.Handler $r17, $r22, $r27, $r32;
        android.content.BroadcastReceiver $r18, $r23, $r28, $r33, $r37;
        android.content.Context $r19, $r24, $r29, $r34, $r38, $r43;
        android.net.INetworkManagementEventObserver $r40;
        android.os.INetworkManagementService $r41;
        android.content.Intent $r42;
        android.app.AlarmManager $r45;
        boolean $z0;
        com.android.server.net.NetworkStatsSubscriptionsMonitor $r47;
        java.lang.Throwable $r48;
        android.os.RemoteException $r49;
        android.app.PendingIntent r56;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        entermonitor r1;

     label01:
        r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady> = 1;

        $r2 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r3 = interfaceinvoke $r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()>();

        $r4 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("dev", $r3, 0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder> = $r4;

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r6 = interfaceinvoke $r5.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()>();

        $r7 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("xt", $r6, 0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder> = $r7;

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r9 = interfaceinvoke $r8.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()>();

        $r10 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("uid", $r9, 0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder> = $r10;

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r12 = interfaceinvoke $r11.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()>();

        $r13 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("uid_tag", $r12, 1);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder> = $r13;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updatePersistThresholdsLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void maybeUpgradeLegacyStatsLocked()>();

        $r14 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r15 = virtualinvoke $r14.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>();

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached> = $r15;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void bootstrapStatsLocked()>();

        exitmonitor r1;

     label02:
        $r16 = new android.content.IntentFilter;

        specialinvoke $r16.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.TETHER_STATE_CHANGED");

        $r19 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r18 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mTetherReceiver>;

        $r17 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r19.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r18, $r16, null, $r17);

        $r21 = new android.content.IntentFilter;

        specialinvoke $r21.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_POLL");

        $r24 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r23 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mPollReceiver>;

        $r22 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r24.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r23, $r21, "android.permission.READ_NETWORK_USAGE_HISTORY", $r22);

        $r26 = new android.content.IntentFilter;

        specialinvoke $r26.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.UID_REMOVED");

        $r29 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r28 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mRemovedReceiver>;

        $r27 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r29.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r28, $r26, null, $r27);

        $r31 = new android.content.IntentFilter;

        specialinvoke $r31.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_REMOVED");

        $r34 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r33 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mUserReceiver>;

        $r32 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r34.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r33, $r31, null, $r32);

        $r36 = new android.content.IntentFilter;

        specialinvoke $r36.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.ACTION_SHUTDOWN");

        $r38 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r37 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mShutdownReceiver>;

        virtualinvoke $r38.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r37, $r36);

     label03:
        $r41 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        $r40 = r0.<com.android.server.net.NetworkStatsService: android.net.INetworkManagementEventObserver mAlertObserver>;

        interfaceinvoke $r41.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r40);

     label04:
        goto label06;

     label05:
        $r49 := @caughtexception;

     label06:
        $r43 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r42 = new android.content.Intent;

        specialinvoke $r42.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_POLL");

        r56 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r43, 0, $r42, 0);

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r45 = r0.<com.android.server.net.NetworkStatsService: android.app.AlarmManager mAlarmManager>;

        $r44 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l1 = interfaceinvoke $r44.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getPollInterval()>();

        virtualinvoke $r45.<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>(3, l0, $l1, r56);

        $r46 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z0 = interfaceinvoke $r46.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getCombineSubtypeEnabled()>();

        if $z0 != 0 goto label07;

        $r47 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsSubscriptionsMonitor mNetworkStatsSubscriptionsMonitor>;

        virtualinvoke $r47.<com.android.server.net.NetworkStatsSubscriptionsMonitor: void start()>();

     label07:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerGlobalAlert()>();

        return;

     label08:
        $r48 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r48;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void unregisterUsageRequest(android.net.DataUsageRequest)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        long l1;
        com.android.server.net.NetworkStatsObservers $r2;
        java.lang.Throwable $r3;
        android.net.DataUsageRequest r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r4 := @parameter0: android.net.DataUsageRequest;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r4, "DataUsageRequest is null");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsObservers mStatsObservers>;

        virtualinvoke $r2.<com.android.server.net.NetworkStatsObservers: void unregister(android.net.DataUsageRequest,int)>(r4, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
