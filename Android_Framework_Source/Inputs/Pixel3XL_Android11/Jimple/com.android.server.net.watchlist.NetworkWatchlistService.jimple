public class com.android.server.net.watchlist.NetworkWatchlistService extends com.android.internal.net.INetworkWatchlistManager$Stub
{
    static final boolean DEBUG;
    private static final int MAX_NUM_OF_WATCHLIST_DIGESTS;
    private static final java.lang.String TAG;
    private final com.android.server.net.watchlist.WatchlistConfig mConfig;
    private final android.content.Context mContext;
    private final com.android.server.ServiceThread mHandlerThread;
    android.net.IIpConnectivityMetrics mIpConnectivityMetrics;
    private volatile boolean mIsLoggingEnabled;
    private final java.lang.Object mLoggingSwitchLock;
    private final android.net.INetdEventCallback mNetdEventCallback;
    com.android.server.net.watchlist.WatchlistLoggingHandler mNetworkWatchlistHandler;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.net.watchlist.NetworkWatchlistService: int MAX_NUM_OF_WATCHLIST_DIGESTS> = 10000;

        <com.android.server.net.watchlist.NetworkWatchlistService: boolean DEBUG> = 0;

        $r0 = class "Lcom/android/server/net/watchlist/NetworkWatchlistService;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        java.lang.Object $r1;
        com.android.server.net.watchlist.NetworkWatchlistService$1 $r2;
        com.android.server.net.watchlist.WatchlistConfig $r3;
        com.android.server.ServiceThread $r4, $r7;
        java.lang.String $r5;
        com.android.server.net.watchlist.WatchlistLoggingHandler $r6;
        android.content.Context $r8, r10;
        android.os.Looper $r9;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        r10 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.net.INetworkWatchlistManager$Stub: void <init>()>();

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: java.lang.Object mLoggingSwitchLock> = $r1;

        $r2 = new com.android.server.net.watchlist.NetworkWatchlistService$1;

        specialinvoke $r2.<com.android.server.net.watchlist.NetworkWatchlistService$1: void <init>(com.android.server.net.watchlist.NetworkWatchlistService)>(r0);

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.INetdEventCallback mNetdEventCallback> = $r2;

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.content.Context mContext> = r10;

        $r3 = staticinvoke <com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig getInstance()>();

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig> = $r3;

        $r4 = new com.android.server.ServiceThread;

        $r5 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        specialinvoke $r4.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>($r5, 10, 0);

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.ServiceThread mHandlerThread> = $r4;

        virtualinvoke $r4.<com.android.server.ServiceThread: void start()>();

        $r6 = new com.android.server.net.watchlist.WatchlistLoggingHandler;

        $r8 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.ServiceThread mHandlerThread>;

        $r9 = virtualinvoke $r7.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke $r6.<com.android.server.net.watchlist.WatchlistLoggingHandler: void <init>(android.content.Context,android.os.Looper)>($r8, $r9);

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistLoggingHandler mNetworkWatchlistHandler> = $r6;

        virtualinvoke $r6.<com.android.server.net.watchlist.WatchlistLoggingHandler: void reportWatchlistIfNecessary()>();

        return;
    }

    void <init>(android.content.Context, com.android.server.ServiceThread, com.android.server.net.watchlist.WatchlistLoggingHandler, android.net.IIpConnectivityMetrics)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        android.content.Context r1;
        com.android.server.ServiceThread r2;
        com.android.server.net.watchlist.WatchlistLoggingHandler r3;
        android.net.IIpConnectivityMetrics r4;
        java.lang.Object $r5;
        com.android.server.net.watchlist.NetworkWatchlistService$1 $r6;
        com.android.server.net.watchlist.WatchlistConfig $r7;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.ServiceThread;

        r3 := @parameter2: com.android.server.net.watchlist.WatchlistLoggingHandler;

        r4 := @parameter3: android.net.IIpConnectivityMetrics;

        specialinvoke r0.<com.android.internal.net.INetworkWatchlistManager$Stub: void <init>()>();

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled> = 0;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: java.lang.Object mLoggingSwitchLock> = $r5;

        $r6 = new com.android.server.net.watchlist.NetworkWatchlistService$1;

        specialinvoke $r6.<com.android.server.net.watchlist.NetworkWatchlistService$1: void <init>(com.android.server.net.watchlist.NetworkWatchlistService)>(r0);

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.INetdEventCallback mNetdEventCallback> = $r6;

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.content.Context mContext> = r1;

        $r7 = staticinvoke <com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig getInstance()>();

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig> = $r7;

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.ServiceThread mHandlerThread> = r2;

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistLoggingHandler mNetworkWatchlistHandler> = r3;

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.IIpConnectivityMetrics mIpConnectivityMetrics> = r4;

        return;
    }

    static java.lang.String access$000()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        return $r0;
    }

    static void access$100(com.android.server.net.watchlist.NetworkWatchlistService)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;

        r0 := @parameter0: com.android.server.net.watchlist.NetworkWatchlistService;

        specialinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: void init()>();

        return;
    }

    static void access$200(com.android.server.net.watchlist.NetworkWatchlistService)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;

        r0 := @parameter0: com.android.server.net.watchlist.NetworkWatchlistService;

        specialinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: void initIpConnectivityMetrics()>();

        return;
    }

    static boolean access$300(com.android.server.net.watchlist.NetworkWatchlistService)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.net.watchlist.NetworkWatchlistService;

        $z0 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled>;

        return $z0;
    }

    private void enforceWatchlistLoggingPermission()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        int i0;
        java.lang.SecurityException $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 != 1000 goto label1;

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Uid %d has no permission to change watchlist setting.", $r2);

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    private void init()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        com.android.server.net.watchlist.WatchlistConfig $r1;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        $r1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig>;

        virtualinvoke $r1.<com.android.server.net.watchlist.WatchlistConfig: void removeTestModeConfig()>();

        return;
    }

    private void initIpConnectivityMetrics()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        android.os.IBinder $r1;
        android.net.IIpConnectivityMetrics $r2;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("connmetrics");

        $r2 = staticinvoke <android.net.IIpConnectivityMetrics$Stub: android.net.IIpConnectivityMetrics asInterface(android.os.IBinder)>($r1);

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.IIpConnectivityMetrics mIpConnectivityMetrics> = $r2;

        return;
    }

    private boolean isCallerShell()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 2000 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.String $r4;
        android.content.Context $r5;
        boolean $z0;
        com.android.server.net.watchlist.WatchlistConfig $r6;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.content.Context mContext>;

        $r4 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r5, $r4, r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r6 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig>;

        virtualinvoke $r6.<com.android.server.net.watchlist.WatchlistConfig: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        return;
    }

    public boolean forceReportWatchlistForTest(long)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        long l0;
        com.android.server.net.watchlist.WatchlistConfig $r1;
        boolean $z0;
        com.android.server.net.watchlist.WatchlistLoggingHandler $r2;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig>;

        $z0 = virtualinvoke $r1.<com.android.server.net.watchlist.WatchlistConfig: boolean isConfigSecure()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistLoggingHandler mNetworkWatchlistHandler>;

        virtualinvoke $r2.<com.android.server.net.watchlist.WatchlistLoggingHandler: void forceReportWatchlistForTest(long)>(l0);

        return 1;
    }

    public byte[] getWatchlistConfigHash()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        com.android.server.net.watchlist.WatchlistConfig $r1;
        byte[] $r2;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        $r1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig>;

        $r2 = virtualinvoke $r1.<com.android.server.net.watchlist.WatchlistConfig: byte[] getWatchlistConfigHash()>();

        return $r2;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        boolean $z0;
        com.android.server.net.watchlist.NetworkWatchlistShellCommand $r7;
        android.content.Context $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $z0 = specialinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean isCallerShell()>();

        if $z0 != 0 goto label1;

        $r9 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r9, "Only shell is allowed to call network watchlist shell commands");

        return;

     label1:
        $r7 = new com.android.server.net.watchlist.NetworkWatchlistShellCommand;

        $r8 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.content.Context mContext>;

        specialinvoke $r7.<com.android.server.net.watchlist.NetworkWatchlistShellCommand: void <init>(com.android.server.net.watchlist.NetworkWatchlistService,android.content.Context)>(r0, $r8);

        virtualinvoke $r7.<com.android.server.net.watchlist.NetworkWatchlistShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void reloadWatchlist() throws android.os.RemoteException
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        java.lang.String $r1;
        com.android.server.net.watchlist.WatchlistConfig $r2;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        specialinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: void enforceWatchlistLoggingPermission()>();

        $r1 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>($r1, "Reloading watchlist");

        $r2 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistConfig mConfig>;

        virtualinvoke $r2.<com.android.server.net.watchlist.WatchlistConfig: void reloadConfig()>();

        return;
    }

    public void reportWatchlistIfNecessary()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        com.android.server.net.watchlist.WatchlistLoggingHandler $r1;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        $r1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: com.android.server.net.watchlist.WatchlistLoggingHandler mNetworkWatchlistHandler>;

        virtualinvoke $r1.<com.android.server.net.watchlist.WatchlistLoggingHandler: void reportWatchlistIfNecessary()>();

        return;
    }

    public boolean startWatchlistLogging() throws android.os.RemoteException
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        boolean $z0;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        specialinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: void enforceWatchlistLoggingPermission()>();

        $z0 = virtualinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean startWatchlistLoggingImpl()>();

        return $z0;
    }

    protected boolean startWatchlistLoggingImpl() throws android.os.RemoteException
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        android.net.INetdEventCallback $r2;
        android.net.IIpConnectivityMetrics $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        r1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: java.lang.Object mLoggingSwitchLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled>;

        if $z0 == 0 goto label03;

        $r4 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r4, "Watchlist logging is already running");

        exitmonitor r1;

     label02:
        return 1;

     label03:
        $r3 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.IIpConnectivityMetrics mIpConnectivityMetrics>;

        $r2 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.INetdEventCallback mNetdEventCallback>;

        $z1 = interfaceinvoke $r3.<android.net.IIpConnectivityMetrics: boolean addNetdEventCallback(int,android.net.INetdEventCallback)>(2, $r2);

        if $z1 == 0 goto label06;

        r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled> = 1;

     label04:
        exitmonitor r1;

     label05:
        return 1;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        return 0;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean stopWatchlistLogging() throws android.os.RemoteException
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        boolean $z0;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        specialinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: void enforceWatchlistLoggingPermission()>();

        $z0 = virtualinvoke r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean stopWatchlistLoggingImpl()>();

        return $z0;
    }

    protected boolean stopWatchlistLoggingImpl()
    {
        com.android.server.net.watchlist.NetworkWatchlistService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        android.net.IIpConnectivityMetrics $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.net.watchlist.NetworkWatchlistService;

        r1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: java.lang.Object mLoggingSwitchLock>;

        entermonitor r1;

     label01:
        $z1 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled>;

        if $z1 != 0 goto label03;

        $r3 = <com.android.server.net.watchlist.NetworkWatchlistService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r3, "Watchlist logging is not running");

        exitmonitor r1;

     label02:
        return 1;

     label03:
        r0.<com.android.server.net.watchlist.NetworkWatchlistService: boolean mIsLoggingEnabled> = 0;

     label04:
        $r2 = r0.<com.android.server.net.watchlist.NetworkWatchlistService: android.net.IIpConnectivityMetrics mIpConnectivityMetrics>;

        z0 = interfaceinvoke $r2.<android.net.IIpConnectivityMetrics: boolean removeNetdEventCallback(int)>(2);

     label05:
        exitmonitor r1;

     label06:
        return z0;

     label07:
        $r4 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
}
