class com.android.server.net.watchlist.WatchlistConfig extends java.lang.Object
{
    private static final java.lang.String NETWORK_WATCHLIST_DB_FOR_TEST_PATH;
    private static final java.lang.String NETWORK_WATCHLIST_DB_PATH;
    private static final java.lang.String TAG;
    private static final com.android.server.net.watchlist.WatchlistConfig sInstance;
    private volatile com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests;
    private volatile com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests;
    private boolean mIsSecureConfig;
    private java.io.File mXmlFile;

    static void <clinit>()
    {
        com.android.server.net.watchlist.WatchlistConfig $r0;

        <com.android.server.net.watchlist.WatchlistConfig: java.lang.String TAG> = "WatchlistConfig";

        <com.android.server.net.watchlist.WatchlistConfig: java.lang.String NETWORK_WATCHLIST_DB_PATH> = "/data/misc/network_watchlist/network_watchlist.xml";

        <com.android.server.net.watchlist.WatchlistConfig: java.lang.String NETWORK_WATCHLIST_DB_FOR_TEST_PATH> = "/data/misc/network_watchlist/network_watchlist_for_test.xml";

        $r0 = new com.android.server.net.watchlist.WatchlistConfig;

        specialinvoke $r0.<com.android.server.net.watchlist.WatchlistConfig: void <init>()>();

        <com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig sInstance> = $r0;

        return;
    }

    private void <init>()
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.io.File $r1;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/data/misc/network_watchlist/network_watchlist.xml");

        specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void <init>(java.io.File)>($r1);

        return;
    }

    protected void <init>(java.io.File)
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.io.File r1;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.watchlist.WatchlistConfig: boolean mIsSecureConfig> = 1;

        r0.<com.android.server.net.watchlist.WatchlistConfig: java.io.File mXmlFile> = r1;

        virtualinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void reloadConfig()>();

        return;
    }

    private int getCrc32(java.lang.String)
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.lang.String r1;
        java.util.zip.CRC32 $r3;
        byte[] $r4;
        long $l0;
        int $i1;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.zip.CRC32;

        specialinvoke $r3.<java.util.zip.CRC32: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r3.<java.util.zip.CRC32: void update(byte[])>($r4);

        $l0 = virtualinvoke $r3.<java.util.zip.CRC32: long getValue()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public static com.android.server.net.watchlist.WatchlistConfig getInstance()
    {
        com.android.server.net.watchlist.WatchlistConfig $r0;

        $r0 = <com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig sInstance>;

        return $r0;
    }

    private byte[] getSha256(java.lang.String)
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.security.MessageDigest r1;
        byte[] $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r5 := @parameter0: java.lang.String;

     label1:
        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA256");

     label2:
        $r2 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>($r2);

        $r3 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private void parseHashes(org.xmlpull.v1.XmlPullParser, java.lang.String, java.util.List) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, $r5;
        java.util.List r3;
        byte[] r4;
        int $i0;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, r2);

     label1:
        $i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        if $i0 != 2 goto label2;

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "hash");

        $r5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String nextText()>();

        r4 = staticinvoke <com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>($r5);

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, null, "hash");

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label1;

     label2:
        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, null, r2);

        return;
    }

    public boolean containsDomain(java.lang.String)
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests r1;
        int i0;
        com.android.server.net.watchlist.HarmfulCrcs $r2;
        boolean $z0, $z1;
        com.android.server.net.watchlist.HarmfulDigests $r3;
        java.lang.String r4;
        byte[] r5;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests>;

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: int getCrc32(java.lang.String)>(r4);

        $r2 = r1.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulCrcs crc32s>;

        $z0 = virtualinvoke $r2.<com.android.server.net.watchlist.HarmfulCrcs: boolean contains(int)>(i0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r5 = specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: byte[] getSha256(java.lang.String)>(r4);

        $r3 = r1.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulDigests sha256Digests>;

        $z1 = virtualinvoke $r3.<com.android.server.net.watchlist.HarmfulDigests: boolean contains(byte[])>(r5);

        return $z1;
    }

    public boolean containsIp(java.lang.String)
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests r1;
        int i0;
        com.android.server.net.watchlist.HarmfulCrcs $r2;
        boolean $z0, $z1;
        com.android.server.net.watchlist.HarmfulDigests $r3;
        java.lang.String r4;
        byte[] r5;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests>;

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: int getCrc32(java.lang.String)>(r4);

        $r2 = r1.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulCrcs crc32s>;

        $z0 = virtualinvoke $r2.<com.android.server.net.watchlist.HarmfulCrcs: boolean contains(int)>(i0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r5 = specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: byte[] getSha256(java.lang.String)>(r4);

        $r3 = r1.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulDigests sha256Digests>;

        $z1 = virtualinvoke $r3.<com.android.server.net.watchlist.HarmfulDigests: boolean contains(byte[])>(r5);

        return $z1;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r22;
        com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r19;
        com.android.server.net.watchlist.HarmfulDigests $r14, $r18;
        com.android.server.net.watchlist.HarmfulCrcs $r16, $r20;
        byte[] r21;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        r21 = virtualinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: byte[] getWatchlistConfigHash()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Watchlist config hash: ");

        if r21 == null goto label1;

        r22 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r21);

        goto label2;

     label1:
        r22 = null;

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Domain CRC32 digest list:");

        $r9 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests>;

        if $r9 == null goto label3;

        $r19 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests>;

        $r20 = $r19.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulCrcs crc32s>;

        virtualinvoke $r20.<com.android.server.net.watchlist.HarmfulCrcs: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label3:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Domain SHA256 digest list:");

        $r10 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests>;

        if $r10 == null goto label4;

        $r17 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests>;

        $r18 = $r17.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulDigests sha256Digests>;

        virtualinvoke $r18.<com.android.server.net.watchlist.HarmfulDigests: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label4:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Ip CRC32 digest list:");

        $r11 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests>;

        if $r11 == null goto label5;

        $r15 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests>;

        $r16 = $r15.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulCrcs crc32s>;

        virtualinvoke $r16.<com.android.server.net.watchlist.HarmfulCrcs: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label5:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Ip SHA256 digest list:");

        $r12 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests>;

        if $r12 == null goto label6;

        $r13 = r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests>;

        $r14 = $r13.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: com.android.server.net.watchlist.HarmfulDigests sha256Digests>;

        virtualinvoke $r14.<com.android.server.net.watchlist.HarmfulDigests: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label6:
        return;
    }

    public byte[] getWatchlistConfigHash()
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.io.File $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        byte[] r4;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        $r1 = r0.<com.android.server.net.watchlist.WatchlistConfig: java.io.File mXmlFile>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.server.net.watchlist.WatchlistConfig: java.io.File mXmlFile>;

        r4 = staticinvoke <com.android.server.net.watchlist.DigestUtils: byte[] getSha256Hash(java.io.File)>($r2);

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WatchlistConfig", "Unable to get watchlist config hash", $r3);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public boolean isConfigSecure()
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        boolean $z0;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        $z0 = r0.<com.android.server.net.watchlist.WatchlistConfig: boolean mIsSecureConfig>;

        return $z0;
    }

    public void reloadConfig()
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.nio.charset.Charset $r3;
        java.lang.String $r4, $r6, $r8, r18;
        int $i1, $i3;
        java.lang.Throwable $r9, $r10, $r11;
        java.io.FileInputStream r12;
        java.util.ArrayList r13, r14, r15, r16;
        org.xmlpull.v1.XmlPullParser r17;
        byte b6;
        java.lang.StringBuilder r19;
        com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests r20, r23;
        com.android.server.net.watchlist.HarmfulCrcs r21, r24;
        com.android.server.net.watchlist.HarmfulDigests r22, r25;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        $r1 = r0.<com.android.server.net.watchlist.WatchlistConfig: java.io.File mXmlFile>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r12 = new java.io.FileInputStream;

        $r2 = r0.<com.android.server.net.watchlist.WatchlistConfig: java.io.File mXmlFile>;

        specialinvoke r12.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

     label02:
        r13 = new java.util.ArrayList;

        specialinvoke r13.<java.util.ArrayList: void <init>()>();

        r14 = new java.util.ArrayList;

        specialinvoke r14.<java.util.ArrayList: void <init>()>();

        r15 = new java.util.ArrayList;

        specialinvoke r15.<java.util.ArrayList: void <init>()>();

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>()>();

        r17 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r12, $r4);

        interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "watchlist-config");

     label03:
        $i1 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        if $i1 != 2 goto label26;

        r18 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label04:
        b6 = -1;

     label05:
        $i3 = virtualinvoke r18.<java.lang.String: int hashCode()>();

        lookupswitch($i3)
        {
            case -1862636386: goto label13;
            case -14835926: goto label11;
            case 835385997: goto label09;
            case 1718657537: goto label07;
            default: goto label06;
        };

     label06:
        goto label15;

     label07:
        $z1 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("crc32-ip");

        if $z1 == 0 goto label06;

     label08:
        b6 = 1;

        goto label15;

     label09:
        $z2 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("sha256-ip");

        if $z2 == 0 goto label06;

     label10:
        b6 = 3;

        goto label15;

     label11:
        $z3 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("sha256-domain");

        if $z3 == 0 goto label06;

     label12:
        b6 = 2;

        goto label15;

     label13:
        $z4 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("crc32-domain");

        if $z4 == 0 goto label06;

     label14:
        b6 = 0;

     label15:
        if b6 == 0 goto label24;

        if b6 == 1 goto label22;

        if b6 == 2 goto label20;

        if b6 == 3 goto label18;

     label16:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown element: ");

        $r6 = interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WatchlistConfig", $r8);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r17);

     label17:
        goto label25;

     label18:
        specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void parseHashes(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.List)>(r17, r18, r16);

     label19:
        goto label25;

     label20:
        specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void parseHashes(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.List)>(r17, r18, r14);

     label21:
        goto label25;

     label22:
        specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void parseHashes(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.List)>(r17, r18, r15);

     label23:
        goto label25;

     label24:
        specialinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void parseHashes(org.xmlpull.v1.XmlPullParser,java.lang.String,java.util.List)>(r17, r18, r13);

     label25:
        goto label03;

     label26:
        interfaceinvoke r17.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, null, "watchlist-config");

        r20 = new com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests;

        r21 = new com.android.server.net.watchlist.HarmfulCrcs;

        specialinvoke r21.<com.android.server.net.watchlist.HarmfulCrcs: void <init>(java.util.List)>(r13);

        r22 = new com.android.server.net.watchlist.HarmfulDigests;

        specialinvoke r22.<com.android.server.net.watchlist.HarmfulDigests: void <init>(java.util.List)>(r14);

        specialinvoke r20.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: void <init>(com.android.server.net.watchlist.HarmfulCrcs,com.android.server.net.watchlist.HarmfulDigests)>(r21, r22);

        r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mDomainDigests> = r20;

        r23 = new com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests;

        r24 = new com.android.server.net.watchlist.HarmfulCrcs;

        specialinvoke r24.<com.android.server.net.watchlist.HarmfulCrcs: void <init>(java.util.List)>(r15);

        r25 = new com.android.server.net.watchlist.HarmfulDigests;

        specialinvoke r25.<com.android.server.net.watchlist.HarmfulDigests: void <init>(java.util.List)>(r16);

        specialinvoke r23.<com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests: void <init>(com.android.server.net.watchlist.HarmfulCrcs,com.android.server.net.watchlist.HarmfulDigests)>(r24, r25);

        r0.<com.android.server.net.watchlist.WatchlistConfig: com.android.server.net.watchlist.WatchlistConfig$CrcShaDigests mIpDigests> = r23;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WatchlistConfig", "Reload watchlist done");

     label27:
        virtualinvoke r12.<java.io.FileInputStream: void close()>();

     label28:
        goto label36;

     label29:
        $r10 := @caughtexception;

     label30:
        virtualinvoke r12.<java.io.FileInputStream: void close()>();

     label31:
        goto label34;

     label32:
        $r11 := @caughtexception;

     label33:
        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label34:
        throw $r10;

     label35:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WatchlistConfig", "Failed parsing xml", $r9);

     label36:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label35;
        catch java.lang.NullPointerException from label01 to label02 with label35;
        catch java.lang.NumberFormatException from label01 to label02 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label35;
        catch java.io.IOException from label01 to label02 with label35;
        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label35;
        catch java.lang.Throwable from label02 to label03 with label29;
        catch java.lang.Throwable from label03 to label04 with label29;
        catch java.lang.Throwable from label05 to label06 with label29;
        catch java.lang.Throwable from label07 to label08 with label29;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label11 to label12 with label29;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Throwable from label16 to label17 with label29;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label24 to label25 with label29;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.IllegalStateException from label27 to label28 with label35;
        catch java.lang.NullPointerException from label27 to label28 with label35;
        catch java.lang.NumberFormatException from label27 to label28 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label27 to label28 with label35;
        catch java.io.IOException from label27 to label28 with label35;
        catch java.lang.IndexOutOfBoundsException from label27 to label28 with label35;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.IllegalStateException from label33 to label34 with label35;
        catch java.lang.NullPointerException from label33 to label34 with label35;
        catch java.lang.NumberFormatException from label33 to label34 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label33 to label34 with label35;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.lang.IndexOutOfBoundsException from label33 to label34 with label35;
        catch java.lang.IllegalStateException from label34 to label35 with label35;
        catch java.lang.NullPointerException from label34 to label35 with label35;
        catch java.lang.NumberFormatException from label34 to label35 with label35;
        catch org.xmlpull.v1.XmlPullParserException from label34 to label35 with label35;
        catch java.io.IOException from label34 to label35 with label35;
        catch java.lang.IndexOutOfBoundsException from label34 to label35 with label35;
    }

    public void removeTestModeConfig()
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        boolean $z0;
        java.lang.Exception $r1;
        java.io.File r2;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

     label1:
        r2 = new java.io.File;

        specialinvoke r2.<java.io.File: void <init>(java.lang.String)>("/data/misc/network_watchlist/network_watchlist_for_test.xml");

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WatchlistConfig", "Unable to delete test config");

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void setTestMode(java.io.InputStream) throws java.io.IOException
    {
        com.android.server.net.watchlist.WatchlistConfig r0;
        java.io.InputStream r1;
        java.io.File $r2, $r3;

        r0 := @this: com.android.server.net.watchlist.WatchlistConfig;

        r1 := @parameter0: java.io.InputStream;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WatchlistConfig", "Setting watchlist testing config");

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/data/misc/network_watchlist/network_watchlist_for_test.xml");

        staticinvoke <android.os.FileUtils: void copyToFileOrThrow(java.io.InputStream,java.io.File)>(r1, $r2);

        r0.<com.android.server.net.watchlist.WatchlistConfig: boolean mIsSecureConfig> = 0;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/data/misc/network_watchlist/network_watchlist_for_test.xml");

        r0.<com.android.server.net.watchlist.WatchlistConfig: java.io.File mXmlFile> = $r3;

        virtualinvoke r0.<com.android.server.net.watchlist.WatchlistConfig: void reloadConfig()>();

        return;
    }
}
