public class com.android.server.notification.ScheduleConditionProvider extends com.android.server.notification.SystemConditionProviderService
{
    private static final java.lang.String ACTION_EVALUATE;
    public static final android.content.ComponentName COMPONENT;
    static final boolean DEBUG;
    private static final java.lang.String EXTRA_TIME;
    private static final java.lang.String NOT_SHOWN;
    private static final int REQUEST_CODE_EVALUATE;
    private static final java.lang.String SCP_SETTING;
    private static final java.lang.String SEPARATOR;
    private static final java.lang.String SIMPLE_NAME;
    static final java.lang.String TAG;
    private android.app.AlarmManager mAlarmManager;
    private boolean mConnected;
    private final android.content.Context mContext;
    private long mNextAlarmTime;
    private android.content.BroadcastReceiver mReceiver;
    private boolean mRegistered;
    private android.util.ArraySet mSnoozedForAlarm;
    private final android.util.ArrayMap mSubscriptions;

    static void <clinit>()
    {
        android.content.ComponentName $r1;
        java.lang.Class $r2, $r4;
        java.lang.String $r3, $r5, $r7, $r10;
        java.lang.StringBuilder $r6;

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String TAG> = "ConditionProviders.SCP";

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String SEPARATOR> = ";";

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String SCP_SETTING> = "snoozed_schedule_condition_provider";

        <com.android.server.notification.ScheduleConditionProvider: int REQUEST_CODE_EVALUATE> = 1;

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String NOT_SHOWN> = "...";

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String EXTRA_TIME> = "time";

        <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG> = 1;

        <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG> = 1;

        $r1 = new android.content.ComponentName;

        $r2 = class "Lcom/android/server/notification/ScheduleConditionProvider;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("android", $r3);

        <com.android.server.notification.ScheduleConditionProvider: android.content.ComponentName COMPONENT> = $r1;

        $r4 = class "Lcom/android/server/notification/ScheduleConditionProvider;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String SIMPLE_NAME> = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = <com.android.server.notification.ScheduleConditionProvider: java.lang.String SIMPLE_NAME>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".EVALUATE");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.server.notification.ScheduleConditionProvider: java.lang.String ACTION_EVALUATE> = $r10;

        return;
    }

    public void <init>()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.util.ArrayMap $r2;
        android.util.ArraySet $r3;
        com.android.server.notification.ScheduleConditionProvider$1 $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r10;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        specialinvoke r0.<com.android.server.notification.SystemConditionProviderService: void <init>()>();

        r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Context mContext> = r0;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm> = $r3;

        $r4 = new com.android.server.notification.ScheduleConditionProvider$1;

        specialinvoke $r4.<com.android.server.notification.ScheduleConditionProvider$1: void <init>(com.android.server.notification.ScheduleConditionProvider)>(r0);

        r0.<com.android.server.notification.ScheduleConditionProvider: android.content.BroadcastReceiver mReceiver> = $r4;

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("new ");

        $r7 = <com.android.server.notification.ScheduleConditionProvider: java.lang.String SIMPLE_NAME>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("()");

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r10);

     label1:
        return;
    }

    static android.util.ArrayMap access$000(com.android.server.notification.ScheduleConditionProvider)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: com.android.server.notification.ScheduleConditionProvider;

        $r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        return $r1;
    }

    static void access$100(com.android.server.notification.ScheduleConditionProvider)
    {
        com.android.server.notification.ScheduleConditionProvider r0;

        r0 := @parameter0: com.android.server.notification.ScheduleConditionProvider;

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void evaluateSubscriptions()>();

        return;
    }

    private boolean conditionSnoozed(android.net.Uri)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.util.ArraySet r1, $r2;
        boolean z0;
        java.lang.Throwable $r3;
        android.net.Uri r4;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r4 := @parameter0: android.net.Uri;

        r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.service.notification.Condition createCondition(android.net.Uri, int, java.lang.String)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.net.Uri r1;
        int i0;
        java.lang.String r2, $r9, $r13;
        boolean $z0;
        android.service.notification.Condition $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r1 := @parameter0: android.net.Uri;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyCondition ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = staticinvoke <android.service.notification.Condition: java.lang.String stateToString(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" reason=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r13);

     label1:
        $r4 = new android.service.notification.Condition;

        specialinvoke $r4.<android.service.notification.Condition: void <init>(android.net.Uri,java.lang.String,java.lang.String,java.lang.String,int,int,int)>(r1, "...", "...", "...", 0, i0, 2);

        return $r4;
    }

    private void evaluateSubscriptions()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        long l0, l1, $l3;
        android.util.ArrayMap r1, $r5, $r6, $r12;
        java.util.Iterator r2;
        android.app.AlarmManager $r3, $r17;
        java.util.ArrayList $r4;
        boolean $z0, z2, $z3;
        java.util.Set $r7;
        int $i2;
        android.service.notification.Condition[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.Object $r11, $r13, $r16;
        android.service.notification.ScheduleCalendar $r14;
        android.content.Context $r15;
        java.lang.Throwable $r18;
        android.net.Uri r20;
        android.service.notification.Condition r21;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        $r3 = r0.<com.android.server.notification.ScheduleConditionProvider: android.app.AlarmManager mAlarmManager>;

        if $r3 != null goto label01;

        $r15 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r17 = (android.app.AlarmManager) $r16;

        r0.<com.android.server.notification.ScheduleConditionProvider: android.app.AlarmManager mAlarmManager> = $r17;

     label01:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.server.notification.ScheduleConditionProvider: long mNextAlarmTime> = 0L;

        l1 = virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: long getNextAlarm()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        entermonitor r1;

     label02:
        $r5 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $z0 = virtualinvoke $r5.<android.util.ArrayMap: boolean isEmpty()>();

        if $z0 != 0 goto label04;

     label03:
        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void setRegistered(boolean)>(z2);

        $r6 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label10;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (android.net.Uri) $r11;

        $r12 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r20);

        $r14 = (android.service.notification.ScheduleCalendar) $r13;

        r21 = virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition evaluateSubscriptionLocked(android.net.Uri,android.service.notification.ScheduleCalendar,long,long)>(r20, $r14, l0, l1);

     label07:
        if r21 == null goto label09;

     label08:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r21);

     label09:
        goto label06;

     label10:
        exitmonitor r1;

     label11:
        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r8 = newarray (android.service.notification.Condition)[$i2];

        $r9 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (android.service.notification.Condition[]) $r9;

        virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void notifyConditions(android.service.notification.Condition[])>($r10);

        $l3 = r0.<com.android.server.notification.ScheduleConditionProvider: long mNextAlarmTime>;

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void updateAlarm(long,long)>(l0, $l3);

        return;

     label12:
        $r18 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r18;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private boolean meetsSchedule(android.service.notification.ScheduleCalendar, long)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.service.notification.ScheduleCalendar r1;
        long l0;
        boolean $z0, z1;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r1 := @parameter0: android.service.notification.ScheduleCalendar;

        l0 := @parameter1: long;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.service.notification.ScheduleCalendar: boolean isInSchedule(long)>(l0);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void readSnoozed()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.util.ArraySet r1, $r6;
        long l0;
        java.lang.String[] r2;
        java.lang.String r3, r10, r11;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        int $i1, $i2, i3;
        boolean $z0;
        android.net.Uri $r7;
        java.lang.Throwable $r8, $r9;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        entermonitor r1;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r4 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r10 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r5, "snoozed_schedule_condition_provider", $i1);

     label03:
        if r10 == null goto label13;

     label04:
        r2 = virtualinvoke r10.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

     label05:
        i3 = 0;

     label06:
        $i2 = lengthof r2;

        if i3 >= $i2 goto label13;

     label07:
        r3 = r2[i3];

        r11 = r3;

        if r3 == null goto label09;

     label08:
        r11 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label09:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r11);

        if $z0 == 0 goto label11;

     label10:
        goto label12;

     label11:
        $r6 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        $r7 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r11);

        virtualinvoke $r6.<android.util.ArraySet: boolean add(java.lang.Object)>($r7);

     label12:
        i3 = i3 + 1;

        goto label06;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label14:
        exitmonitor r1;

     label15:
        return;

     label16:
        $r9 := @caughtexception;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label18:
        throw $r9;

     label19:
        $r8 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private void removeSnoozed(android.net.Uri)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.util.ArraySet r1, $r2;
        java.lang.Throwable $r3;
        android.net.Uri r4;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r4 := @parameter0: android.net.Uri;

        r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>(r4);

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void saveSnoozedLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void saveSnoozedLocked()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        java.lang.String r1;
        int i0;
        android.util.ArraySet $r2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        $r2 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(";", $r2);

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        $r3 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r4, "snoozed_schedule_condition_provider", r1, i0);

        return;
    }

    private void setRegistered(boolean)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        boolean z0, $z1, $z2;
        android.content.BroadcastReceiver $r1, $r4;
        android.content.IntentFilter $r2;
        java.lang.String $r3, $r9;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.notification.ScheduleConditionProvider: boolean mRegistered>;

        if $z1 != z0 goto label1;

        return;

     label1:
        $z2 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z2 == 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setRegistered ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r9);

     label2:
        r0.<com.android.server.notification.ScheduleConditionProvider: boolean mRegistered> = z0;

        if z0 == 0 goto label3;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIME_SET");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.TIMEZONE_CHANGED");

        $r3 = <com.android.server.notification.ScheduleConditionProvider: java.lang.String ACTION_EVALUATE>;

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>($r3);

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.app.action.NEXT_ALARM_CLOCK_CHANGED");

        $r4 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, $r2);

        goto label4;

     label3:
        $r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

     label4:
        return;
    }

    private void updateAlarm(long, long)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        long l0, l1, $l4;
        android.app.AlarmManager r1;
        android.app.PendingIntent r2;
        android.content.Context $r3, $r7;
        java.lang.Object $r4;
        android.content.Intent $r5, $r8, $r9;
        java.lang.String $r6, $r11, $r12, $r13, $r14;
        byte $b2;
        boolean $z0, $z1;
        java.lang.Object[] $r10;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r3 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r1 = (android.app.AlarmManager) $r4;

        $r7 = r0.<com.android.server.notification.ScheduleConditionProvider: android.content.Context mContext>;

        $r5 = new android.content.Intent;

        $r6 = <com.android.server.notification.ScheduleConditionProvider: java.lang.String ACTION_EVALUATE>;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>($r6);

        $r8 = virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r9 = virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("time", l1);

        r2 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r7, 1, $r9, 134217728);

        virtualinvoke r1.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>(r2);

        $b2 = l1 cmp l0;

        if $b2 <= 0 goto label2;

        $z1 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z1 == 0 goto label1;

        $r10 = newarray (java.lang.Object)[3];

        $r11 = staticinvoke <com.android.server.notification.ScheduleConditionProvider: java.lang.String ts(long)>(l1);

        $r10[0] = $r11;

        $l4 = l1 - l0;

        $r12 = staticinvoke <com.android.server.notification.ScheduleConditionProvider: java.lang.String formatDuration(long)>($l4);

        $r10[1] = $r12;

        $r13 = staticinvoke <com.android.server.notification.ScheduleConditionProvider: java.lang.String ts(long)>(l0);

        $r10[2] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Scheduling evaluate for %s, in %s, now=%s", $r10);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r14);

     label1:
        virtualinvoke r1.<android.app.AlarmManager: void setExact(int,long,android.app.PendingIntent)>(0, l1, r2);

        goto label3;

     label2:
        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label3;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", "Not scheduling evaluate");

     label3:
        return;
    }

    void addSnoozed(android.net.Uri)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.util.ArraySet r1, $r2;
        java.lang.Throwable $r3;
        android.net.Uri r4;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r4 := @parameter0: android.net.Uri;

        r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r4);

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void saveSnoozedLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.service.notification.IConditionProvider asInterface()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.os.IBinder $r1;
        android.service.notification.IConditionProvider $r2;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        $r1 = virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.os.IBinder onBind(android.content.Intent)>(null);

        $r2 = (android.service.notification.IConditionProvider) $r1;

        return $r2;
    }

    public void attachBase(android.content.Context)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.content.Context r1;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r1 := @parameter0: android.content.Context;

        virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void attachBaseContext(android.content.Context)>(r1);

        return;
    }

    public void dump(java.io.PrintWriter, com.android.server.notification.NotificationManagerService$DumpFilter)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        long l0, $l1;
        android.util.ArrayMap r1, $r5, $r14, $r17;
        java.util.Iterator r2;
        android.net.Uri r3;
        java.lang.String $r4, $r10, $r12, $r20, r24;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r6;
        java.lang.StringBuilder $r7;
        android.util.ArraySet $r9;
        java.lang.Object $r13, $r15, $r18;
        android.service.notification.ScheduleCalendar $r16, $r19;
        java.lang.Throwable $r21;
        java.io.PrintWriter r22;
        com.android.server.notification.NotificationManagerService$DumpFilter r23;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r22 := @parameter0: java.io.PrintWriter;

        r23 := @parameter1: com.android.server.notification.NotificationManagerService$DumpFilter;

        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r4 = <com.android.server.notification.ScheduleConditionProvider: java.lang.String SIMPLE_NAME>;

        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>($r4);

        virtualinvoke r22.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>("      mConnected=");

        $z0 = r0.<com.android.server.notification.ScheduleConditionProvider: boolean mConnected>;

        virtualinvoke r22.<java.io.PrintWriter: void println(boolean)>($z0);

        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>("      mRegistered=");

        $z1 = r0.<com.android.server.notification.ScheduleConditionProvider: boolean mRegistered>;

        virtualinvoke r22.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r22.<java.io.PrintWriter: void println(java.lang.String)>("      mSubscriptions=");

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        entermonitor r1;

     label01:
        $r5 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.net.Uri) $r13;

        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>("        ");

        $r14 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        $r16 = (android.service.notification.ScheduleCalendar) $r15;

        $z3 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: boolean meetsSchedule(android.service.notification.ScheduleCalendar,long)>($r16, l0);

        if $z3 == 0 goto label04;

     label03:
        r24 = "* ";

        goto label05;

     label04:
        r24 = "  ";

     label05:
        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>(r24);

        virtualinvoke r22.<java.io.PrintWriter: void println(java.lang.Object)>(r3);

        virtualinvoke r22.<java.io.PrintWriter: void print(java.lang.String)>("            ");

        $r17 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $r18 = virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        $r19 = (android.service.notification.ScheduleCalendar) $r18;

        $r20 = virtualinvoke $r19.<android.service.notification.ScheduleCalendar: java.lang.String toString()>();

        virtualinvoke r22.<java.io.PrintWriter: void println(java.lang.String)>($r20);

     label06:
        goto label02;

     label07:
        exitmonitor r1;

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      snoozed due to alarm: ");

        $r9 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArraySet mSnoozedForAlarm>;

        $r10 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(";", $r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r22.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        $l1 = r0.<com.android.server.notification.ScheduleConditionProvider: long mNextAlarmTime>;

        staticinvoke <com.android.server.notification.ScheduleConditionProvider: void dumpUpcomingTime(java.io.PrintWriter,java.lang.String,long,long)>(r22, "mNextAlarmTime", $l1, l0);

        return;

     label09:
        $r21 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    android.service.notification.Condition evaluateSubscriptionLocked(android.net.Uri, android.service.notification.ScheduleCalendar, long, long)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        boolean $z0, $z1, $z2, $z3;
        byte $b0, $b1, $b2, $b7;
        java.lang.Object[] $r1;
        java.lang.String $r2, $r3, $r4;
        android.net.Uri r5;
        android.service.notification.ScheduleCalendar r6;
        long l4, l5, l6, l8;
        android.service.notification.Condition r7, r8, r9, r10;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r5 := @parameter0: android.net.Uri;

        r6 := @parameter1: android.service.notification.ScheduleCalendar;

        l4 := @parameter2: long;

        l5 := @parameter3: long;

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = r6;

        $r2 = staticinvoke <com.android.server.notification.ScheduleConditionProvider: java.lang.String ts(long)>(l4);

        $r1[1] = $r2;

        $r3 = staticinvoke <com.android.server.notification.ScheduleConditionProvider: java.lang.String ts(long)>(l5);

        $r1[2] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("evaluateSubscriptionLocked cal=%s, now=%s, nextUserAlarmTime=%s", $r1);

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r4);

     label1:
        if r6 != null goto label2;

        r7 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition createCondition(android.net.Uri,int,java.lang.String)>(r5, 3, "!invalidId");

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void removeSnoozed(android.net.Uri)>(r5);

        return r7;

     label2:
        $z1 = virtualinvoke r6.<android.service.notification.ScheduleCalendar: boolean isInSchedule(long)>(l4);

        if $z1 == 0 goto label5;

        $z2 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: boolean conditionSnoozed(android.net.Uri)>(r5);

        if $z2 == 0 goto label3;

        r8 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition createCondition(android.net.Uri,int,java.lang.String)>(r5, 0, "snoozed");

        goto label6;

     label3:
        $z3 = virtualinvoke r6.<android.service.notification.ScheduleCalendar: boolean shouldExitForAlarm(long)>(l4);

        if $z3 == 0 goto label4;

        r9 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition createCondition(android.net.Uri,int,java.lang.String)>(r5, 0, "alarmCanceled");

        virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void addSnoozed(android.net.Uri)>(r5);

        r8 = r9;

        goto label6;

     label4:
        r8 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition createCondition(android.net.Uri,int,java.lang.String)>(r5, 1, "meetsSchedule");

        goto label6;

     label5:
        r10 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition createCondition(android.net.Uri,int,java.lang.String)>(r5, 0, "!meetsSchedule");

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void removeSnoozed(android.net.Uri)>(r5);

        r8 = r10;

     label6:
        virtualinvoke r6.<android.service.notification.ScheduleCalendar: void maybeSetNextAlarm(long,long)>(l4, l5);

        l6 = virtualinvoke r6.<android.service.notification.ScheduleCalendar: long getNextChangeTime(long)>(l4);

        $b7 = l6 cmp 0L;

        if $b7 <= 0 goto label8;

        $b0 = l6 cmp l4;

        if $b0 <= 0 goto label8;

        l8 = r0.<com.android.server.notification.ScheduleConditionProvider: long mNextAlarmTime>;

        $b1 = l8 cmp 0L;

        if $b1 == 0 goto label7;

        $b2 = l6 cmp l8;

        if $b2 >= 0 goto label8;

     label7:
        r0.<com.android.server.notification.ScheduleConditionProvider: long mNextAlarmTime> = l6;

     label8:
        return r8;
    }

    public android.content.ComponentName getComponent()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        $r1 = <com.android.server.notification.ScheduleConditionProvider: android.content.ComponentName COMPONENT>;

        return $r1;
    }

    public long getNextAlarm()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.app.AlarmManager$AlarmClockInfo r1;
        android.app.AlarmManager $r2;
        int $i0;
        long l1;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        $r2 = r0.<com.android.server.notification.ScheduleConditionProvider: android.app.AlarmManager mAlarmManager>;

        $i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r1 = virtualinvoke $r2.<android.app.AlarmManager: android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)>($i0);

        if r1 == null goto label1;

        l1 = virtualinvoke r1.<android.app.AlarmManager$AlarmClockInfo: long getTriggerTime()>();

        goto label2;

     label1:
        l1 = 0L;

     label2:
        return l1;
    }

    public boolean isValidConditionId(android.net.Uri)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        android.net.Uri r1;
        boolean $z0;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r1 := @parameter0: android.net.Uri;

        $z0 = staticinvoke <android.service.notification.ZenModeConfig: boolean isValidScheduleConditionId(android.net.Uri)>(r1);

        return $z0;
    }

    public void onBootComplete()
    {
        com.android.server.notification.ScheduleConditionProvider r0;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        return;
    }

    public void onConnected()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        boolean $z0;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", "onConnected");

     label1:
        r0.<com.android.server.notification.ScheduleConditionProvider: boolean mConnected> = 1;

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void readSnoozed()>();

        return;
    }

    public void onDestroy()
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        boolean $z0;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        specialinvoke r0.<com.android.server.notification.SystemConditionProviderService: void onDestroy()>();

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", "onDestroy");

     label1:
        r0.<com.android.server.notification.ScheduleConditionProvider: boolean mConnected> = 0;

        return;
    }

    public void onSubscribe(android.net.Uri)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        boolean $z0, $z1;
        android.util.ArrayMap $r1, r12;
        android.service.notification.ScheduleCalendar $r2;
        android.service.notification.Condition $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        android.net.Uri r10;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r10 := @parameter0: android.net.Uri;

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onSubscribe ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r8);

     label1:
        $z1 = staticinvoke <android.service.notification.ZenModeConfig: boolean isValidScheduleConditionId(android.net.Uri)>(r10);

        if $z1 != 0 goto label2;

        $r4 = specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: android.service.notification.Condition createCondition(android.net.Uri,int,java.lang.String)>(r10, 3, "invalidId");

        virtualinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void notifyCondition(android.service.notification.Condition)>($r4);

        return;

     label2:
        r12 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        entermonitor r12;

     label3:
        $r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        $r2 = staticinvoke <android.service.notification.ZenModeConfig: android.service.notification.ScheduleCalendar toScheduleCalendar(android.net.Uri)>(r10);

        virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, $r2);

        exitmonitor r12;

     label4:
        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void evaluateSubscriptions()>();

        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r12;

     label7:
        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void onUnsubscribe(android.net.Uri)
    {
        com.android.server.notification.ScheduleConditionProvider r0;
        boolean $z0;
        android.util.ArrayMap $r1, r10;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        android.net.Uri r8;

        r0 := @this: com.android.server.notification.ScheduleConditionProvider;

        r8 := @parameter0: android.net.Uri;

        $z0 = <com.android.server.notification.ScheduleConditionProvider: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onUnsubscribe ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ConditionProviders.SCP", $r6);

     label1:
        r10 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        entermonitor r10;

     label2:
        $r1 = r0.<com.android.server.notification.ScheduleConditionProvider: android.util.ArrayMap mSubscriptions>;

        virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        exitmonitor r10;

     label3:
        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void removeSnoozed(android.net.Uri)>(r8);

        specialinvoke r0.<com.android.server.notification.ScheduleConditionProvider: void evaluateSubscriptions()>();

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r10;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
