public class com.android.server.notification.ZenModeExtractor extends java.lang.Object implements com.android.server.notification.NotificationSignalExtractor
{
    private static final boolean DBG;
    private static final java.lang.String TAG;
    private com.android.server.notification.ZenModeHelper mZenModeHelper;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.server.notification.ZenModeExtractor: java.lang.String TAG> = "ZenModeExtractor";

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("ZenModeExtractor", 3);

        <com.android.server.notification.ZenModeExtractor: boolean DBG> = $z0;

        return;
    }

    public void <init>()
    {
        com.android.server.notification.ZenModeExtractor r0;

        r0 := @this: com.android.server.notification.ZenModeExtractor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void initialize(android.content.Context, com.android.server.notification.NotificationUsageStats)
    {
        com.android.server.notification.ZenModeExtractor r0;
        com.android.server.notification.NotificationUsageStats r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.Class $r4;
        java.lang.String $r5, $r8;
        android.content.Context r9;

        r0 := @this: com.android.server.notification.ZenModeExtractor;

        r9 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.notification.NotificationUsageStats;

        $z0 = <com.android.server.notification.ZenModeExtractor: boolean DBG>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initializing  ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ZenModeExtractor", $r8);

     label1:
        return;
    }

    public com.android.server.notification.RankingReconsideration process(com.android.server.notification.NotificationRecord)
    {
        com.android.server.notification.ZenModeExtractor r0;
        com.android.server.notification.NotificationRecord r1;
        com.android.server.notification.ZenModeHelper r2, $r4;
        boolean $z0, $z1, $z3, $z4;
        android.app.Notification $r3;
        android.app.NotificationManager$Policy $r5;
        int $i1;

        r0 := @this: com.android.server.notification.ZenModeExtractor;

        r1 := @parameter0: com.android.server.notification.NotificationRecord;

        if r1 == null goto label6;

        $r3 = virtualinvoke r1.<com.android.server.notification.NotificationRecord: android.app.Notification getNotification()>();

        if $r3 != null goto label1;

        goto label6;

     label1:
        r2 = r0.<com.android.server.notification.ZenModeExtractor: com.android.server.notification.ZenModeHelper mZenModeHelper>;

        if r2 != null goto label3;

        $z4 = <com.android.server.notification.ZenModeExtractor: boolean DBG>;

        if $z4 == 0 goto label2;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ZenModeExtractor", "skipping - no zen info available");

     label2:
        return null;

     label3:
        $z1 = virtualinvoke r2.<com.android.server.notification.ZenModeHelper: boolean shouldIntercept(com.android.server.notification.NotificationRecord)>(r1);

        virtualinvoke r1.<com.android.server.notification.NotificationRecord: boolean setIntercepted(boolean)>($z1);

        $z3 = virtualinvoke r1.<com.android.server.notification.NotificationRecord: boolean isIntercepted()>();

        if $z3 == 0 goto label4;

        $r4 = r0.<com.android.server.notification.ZenModeExtractor: com.android.server.notification.ZenModeHelper mZenModeHelper>;

        $r5 = virtualinvoke $r4.<com.android.server.notification.ZenModeHelper: android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()>();

        $i1 = $r5.<android.app.NotificationManager$Policy: int suppressedVisualEffects>;

        virtualinvoke r1.<com.android.server.notification.NotificationRecord: void setSuppressedVisualEffects(int)>($i1);

        goto label5;

     label4:
        virtualinvoke r1.<com.android.server.notification.NotificationRecord: void setSuppressedVisualEffects(int)>(0);

     label5:
        return null;

     label6:
        $z0 = <com.android.server.notification.ZenModeExtractor: boolean DBG>;

        if $z0 == 0 goto label7;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("ZenModeExtractor", "skipping empty notification");

     label7:
        return null;
    }

    public void setConfig(com.android.server.notification.RankingConfig)
    {
        com.android.server.notification.ZenModeExtractor r0;
        com.android.server.notification.RankingConfig r1;

        r0 := @this: com.android.server.notification.ZenModeExtractor;

        r1 := @parameter0: com.android.server.notification.RankingConfig;

        return;
    }

    public void setZenHelper(com.android.server.notification.ZenModeHelper)
    {
        com.android.server.notification.ZenModeExtractor r0;
        com.android.server.notification.ZenModeHelper r1;

        r0 := @this: com.android.server.notification.ZenModeExtractor;

        r1 := @parameter0: com.android.server.notification.ZenModeHelper;

        r0.<com.android.server.notification.ZenModeExtractor: com.android.server.notification.ZenModeHelper mZenModeHelper> = r1;

        return;
    }
}
