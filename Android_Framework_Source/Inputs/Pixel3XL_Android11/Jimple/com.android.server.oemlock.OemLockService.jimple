public class com.android.server.oemlock.OemLockService extends com.android.server.SystemService
{
    private static final java.lang.String FLASH_LOCK_PROP;
    private static final java.lang.String FLASH_LOCK_UNLOCKED;
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private com.android.server.oemlock.OemLock mOemLock;
    private final android.os.IBinder mService;
    private final android.os.UserManagerInternal$UserRestrictionsListener mUserRestrictionsListener;

    public void <init>(android.content.Context)
    {
        com.android.server.oemlock.OemLockService r0;
        android.content.Context r1;
        com.android.server.oemlock.OemLock $r2;

        r0 := @this: com.android.server.oemlock.OemLockService;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <com.android.server.oemlock.OemLockService: com.android.server.oemlock.OemLock getOemLock(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.oemlock.OemLockService: void <init>(android.content.Context,com.android.server.oemlock.OemLock)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, com.android.server.oemlock.OemLock)
    {
        com.android.server.oemlock.OemLockService r0;
        android.content.Context r1;
        com.android.server.oemlock.OemLock r2;
        com.android.server.oemlock.OemLockService$1 $r3;
        com.android.server.oemlock.OemLockService$2 $r4;
        java.lang.Object $r5;
        android.os.UserManagerInternal$UserRestrictionsListener $r6;
        android.os.UserManagerInternal $r7;

        r0 := @this: com.android.server.oemlock.OemLockService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.oemlock.OemLock;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r3 = new com.android.server.oemlock.OemLockService$1;

        specialinvoke $r3.<com.android.server.oemlock.OemLockService$1: void <init>(com.android.server.oemlock.OemLockService)>(r0);

        r0.<com.android.server.oemlock.OemLockService: android.os.UserManagerInternal$UserRestrictionsListener mUserRestrictionsListener> = $r3;

        $r4 = new com.android.server.oemlock.OemLockService$2;

        specialinvoke $r4.<com.android.server.oemlock.OemLockService$2: void <init>(com.android.server.oemlock.OemLockService)>(r0);

        r0.<com.android.server.oemlock.OemLockService: android.os.IBinder mService> = $r4;

        r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext> = r1;

        r0.<com.android.server.oemlock.OemLockService: com.android.server.oemlock.OemLock mOemLock> = r2;

        $r5 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        $r7 = (android.os.UserManagerInternal) $r5;

        $r6 = r0.<com.android.server.oemlock.OemLockService: android.os.UserManagerInternal$UserRestrictionsListener mUserRestrictionsListener>;

        virtualinvoke $r7.<android.os.UserManagerInternal: void addUserRestrictionsListener(android.os.UserManagerInternal$UserRestrictionsListener)>($r6);

        return;
    }

    static com.android.server.oemlock.OemLock access$000(com.android.server.oemlock.OemLockService)
    {
        com.android.server.oemlock.OemLockService r0;
        com.android.server.oemlock.OemLock $r1;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        $r1 = r0.<com.android.server.oemlock.OemLockService: com.android.server.oemlock.OemLock mOemLock>;

        return $r1;
    }

    static void access$100(com.android.server.oemlock.OemLockService, boolean)
    {
        com.android.server.oemlock.OemLockService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.oemlock.OemLockService: void setPersistentDataBlockOemUnlockAllowedBit(boolean)>(z0);

        return;
    }

    static void access$200(com.android.server.oemlock.OemLockService)
    {
        com.android.server.oemlock.OemLockService r0;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        specialinvoke r0.<com.android.server.oemlock.OemLockService: void enforceManageCarrierOemUnlockPermission()>();

        return;
    }

    static void access$300(com.android.server.oemlock.OemLockService)
    {
        com.android.server.oemlock.OemLockService r0;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        specialinvoke r0.<com.android.server.oemlock.OemLockService: void enforceUserIsAdmin()>();

        return;
    }

    static void access$400(com.android.server.oemlock.OemLockService)
    {
        com.android.server.oemlock.OemLockService r0;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        specialinvoke r0.<com.android.server.oemlock.OemLockService: void enforceManageUserOemUnlockPermission()>();

        return;
    }

    static boolean access$500(com.android.server.oemlock.OemLockService)
    {
        com.android.server.oemlock.OemLockService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        $z0 = specialinvoke r0.<com.android.server.oemlock.OemLockService: boolean isOemUnlockAllowedByAdmin()>();

        return $z0;
    }

    static void access$600(com.android.server.oemlock.OemLockService)
    {
        com.android.server.oemlock.OemLockService r0;

        r0 := @parameter0: com.android.server.oemlock.OemLockService;

        specialinvoke r0.<com.android.server.oemlock.OemLockService: void enforceOemUnlockReadPermission()>();

        return;
    }

    private void enforceManageCarrierOemUnlockPermission()
    {
        com.android.server.oemlock.OemLockService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.oemlock.OemLockService;

        $r1 = r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_CARRIER_OEM_UNLOCK_STATE", "Can\'t manage OEM unlock allowed by carrier");

        return;
    }

    private void enforceManageUserOemUnlockPermission()
    {
        com.android.server.oemlock.OemLockService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.oemlock.OemLockService;

        $r1 = r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USER_OEM_UNLOCK_STATE", "Can\'t manage OEM unlock allowed by user");

        return;
    }

    private void enforceOemUnlockReadPermission()
    {
        com.android.server.oemlock.OemLockService r0;
        android.content.Context $r1, $r2;
        int $i0, $i1;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.oemlock.OemLockService;

        $r1 = r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_OEM_UNLOCK_STATE");

        if $i0 != -1 goto label2;

        $r2 = r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.OEM_UNLOCK_STATE");

        if $i1 == -1 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Can\'t access OEM unlock state. Requires READ_OEM_UNLOCK_STATE or OEM_UNLOCK_STATE permission.");

        throw $r3;

     label2:
        return;
    }

    private void enforceUserIsAdmin()
    {
        com.android.server.oemlock.OemLockService r0;
        int i0;
        long l1;
        boolean z0;
        android.content.Context $r1;
        android.os.UserManager $r2;
        java.lang.Throwable $r3;
        java.lang.SecurityException r4;

        r0 := @this: com.android.server.oemlock.OemLockService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        z0 = virtualinvoke $r2.<android.os.UserManager: boolean isUserAdmin(int)>(i0);

     label2:
        if z0 == 0 goto label3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        r4 = new java.lang.SecurityException;

        specialinvoke r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Must be an admin user");

        throw r4;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    private static com.android.server.oemlock.OemLock getOemLock(android.content.Context)
    {
        android.content.Context r0;
        android.hardware.oemlock.V1_0.IOemLock r1;
        com.android.server.oemlock.PersistentDataBlockLock $r2;
        com.android.server.oemlock.VendorLock $r3;

        r0 := @parameter0: android.content.Context;

        r1 = staticinvoke <com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock getOemLockHalService()>();

        if r1 == null goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OemLock", "Using vendor lock via the HAL");

        $r3 = new com.android.server.oemlock.VendorLock;

        specialinvoke $r3.<com.android.server.oemlock.VendorLock: void <init>(android.content.Context,android.hardware.oemlock.V1_0.IOemLock)>(r0, r1);

        return $r3;

     label1:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OemLock", "Using persistent data block based lock");

        $r2 = new com.android.server.oemlock.PersistentDataBlockLock;

        specialinvoke $r2.<com.android.server.oemlock.PersistentDataBlockLock: void <init>(android.content.Context)>(r0);

        return $r2;
    }

    public static boolean isHalPresent()
    {
        android.hardware.oemlock.V1_0.IOemLock $r0;
        boolean z0;

        $r0 = staticinvoke <com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock getOemLockHalService()>();

        if $r0 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isOemUnlockAllowedByAdmin()
    {
        com.android.server.oemlock.OemLockService r0;
        android.content.Context $r1;
        android.os.UserManager $r2;
        android.os.UserHandle $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.oemlock.OemLockService;

        $r1 = r0.<com.android.server.oemlock.OemLockService: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        $r3 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_factory_reset", $r3);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private void setPersistentDataBlockOemUnlockAllowedBit(boolean)
    {
        com.android.server.oemlock.OemLockService r0;
        boolean z0, $z1;
        com.android.server.PersistentDataBlockManagerInternal r1;
        java.lang.Object $r3;
        com.android.server.oemlock.OemLock $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: com.android.server.oemlock.OemLockService;

        z0 := @parameter0: boolean;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/PersistentDataBlockManagerInternal;");

        r1 = (com.android.server.PersistentDataBlockManagerInternal) $r3;

        if r1 == null goto label1;

        $r4 = r0.<com.android.server.oemlock.OemLockService: com.android.server.oemlock.OemLock mOemLock>;

        $z1 = $r4 instanceof com.android.server.oemlock.PersistentDataBlockLock;

        if $z1 != 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update OEM Unlock bit in pst partition to ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OemLock", $r8);

        interfaceinvoke r1.<com.android.server.PersistentDataBlockManagerInternal: void forceOemUnlockEnabled(boolean)>(z0);

     label1:
        return;
    }

    public void onStart()
    {
        com.android.server.oemlock.OemLockService r0;
        android.os.IBinder $r1;

        r0 := @this: com.android.server.oemlock.OemLockService;

        $r1 = r0.<com.android.server.oemlock.OemLockService: android.os.IBinder mService>;

        virtualinvoke r0.<com.android.server.oemlock.OemLockService: void publishBinderService(java.lang.String,android.os.IBinder)>("oem_lock", $r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.oemlock.OemLockService: java.lang.String TAG> = "OemLock";

        <com.android.server.oemlock.OemLockService: java.lang.String FLASH_LOCK_UNLOCKED> = "0";

        <com.android.server.oemlock.OemLockService: java.lang.String FLASH_LOCK_PROP> = "ro.boot.flash.locked";

        return;
    }
}
