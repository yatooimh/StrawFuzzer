class com.android.server.oemlock.PersistentDataBlockLock extends com.android.server.oemlock.OemLock
{
    private static final java.lang.String TAG;
    private android.content.Context mContext;

    void <init>(android.content.Context)
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;
        android.content.Context r1;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.oemlock.OemLock: void <init>()>();

        r0.<com.android.server.oemlock.PersistentDataBlockLock: android.content.Context mContext> = r1;

        return;
    }

    private void disallowUnlockIfNotUnlocked()
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;
        android.service.persistentdata.PersistentDataBlockManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        $r2 = r0.<com.android.server.oemlock.PersistentDataBlockLock: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("persistent_data_block");

        r1 = (android.service.persistentdata.PersistentDataBlockManager) $r3;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("OemLock", "PersistentDataBlock is not supported on this device");

        return;

     label1:
        $i0 = virtualinvoke r1.<android.service.persistentdata.PersistentDataBlockManager: int getFlashLockState()>();

        if $i0 == 0 goto label2;

        virtualinvoke r1.<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>(0);

     label2:
        return;
    }

    java.lang.String getLockName()
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        return "";
    }

    boolean isOemUnlockAllowedByCarrier()
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;
        android.content.Context $r1;
        android.os.UserManager $r2;
        android.os.UserHandle $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        $r1 = r0.<com.android.server.oemlock.PersistentDataBlockLock: android.content.Context mContext>;

        $r2 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r1);

        $r3 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_oem_unlock", $r3);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    boolean isOemUnlockAllowedByDevice()
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;
        android.service.persistentdata.PersistentDataBlockManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        $r2 = r0.<com.android.server.oemlock.PersistentDataBlockLock: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("persistent_data_block");

        r1 = (android.service.persistentdata.PersistentDataBlockManager) $r3;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("OemLock", "PersistentDataBlock is not supported on this device");

        return 0;

     label1:
        $z0 = virtualinvoke r1.<android.service.persistentdata.PersistentDataBlockManager: boolean getOemUnlockEnabled()>();

        return $z0;
    }

    void setOemUnlockAllowedByCarrier(boolean, byte[])
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;
        boolean z0, $z1;
        byte[] r1;
        android.content.Context $r2;
        android.os.UserManager $r3;
        android.os.UserHandle $r4;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        z0 := @parameter0: boolean;

        r1 := @parameter1: byte[];

        if r1 == null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("OemLock", "Signature provided but is not being used");

     label1:
        $r2 = r0.<com.android.server.oemlock.PersistentDataBlockLock: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r2);

        $z1 = z0 ^ 1;

        $r4 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r3.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>("no_oem_unlock", $z1, $r4);

        if z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.oemlock.PersistentDataBlockLock: void disallowUnlockIfNotUnlocked()>();

     label2:
        return;
    }

    void setOemUnlockAllowedByDevice(boolean)
    {
        com.android.server.oemlock.PersistentDataBlockLock r0;
        boolean z0;
        android.service.persistentdata.PersistentDataBlockManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;

        r0 := @this: com.android.server.oemlock.PersistentDataBlockLock;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.oemlock.PersistentDataBlockLock: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("persistent_data_block");

        r1 = (android.service.persistentdata.PersistentDataBlockManager) $r3;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("OemLock", "PersistentDataBlock is not supported on this device");

        return;

     label1:
        virtualinvoke r1.<android.service.persistentdata.PersistentDataBlockManager: void setOemUnlockEnabled(boolean)>(z0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.oemlock.PersistentDataBlockLock: java.lang.String TAG> = "OemLock";

        return;
    }
}
