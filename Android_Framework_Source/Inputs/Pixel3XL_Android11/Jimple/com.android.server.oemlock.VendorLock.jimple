class com.android.server.oemlock.VendorLock extends com.android.server.oemlock.OemLock
{
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private android.hardware.oemlock.V1_0.IOemLock mOemLock;

    void <init>(android.content.Context, android.hardware.oemlock.V1_0.IOemLock)
    {
        com.android.server.oemlock.VendorLock r0;
        android.content.Context r1;
        android.hardware.oemlock.V1_0.IOemLock r2;

        r0 := @this: com.android.server.oemlock.VendorLock;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.hardware.oemlock.V1_0.IOemLock;

        specialinvoke r0.<com.android.server.oemlock.OemLock: void <init>()>();

        r0.<com.android.server.oemlock.VendorLock: android.content.Context mContext> = r1;

        r0.<com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock mOemLock> = r2;

        return;
    }

    static android.hardware.oemlock.V1_0.IOemLock getOemLockHalService()
    {
        android.os.RemoteException $r0;
        java.lang.RuntimeException $r1;
        java.lang.Throwable $r2;
        android.hardware.oemlock.V1_0.IOemLock r3;

     label1:
        r3 = staticinvoke <android.hardware.oemlock.V1_0.IOemLock: android.hardware.oemlock.V1_0.IOemLock getService(boolean)>(1);

     label2:
        return r3;

     label3:
        $r0 := @caughtexception;

        $r1 = virtualinvoke $r0.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r1;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OemLock", "OemLock HAL not present on device");

        return null;

        catch java.util.NoSuchElementException from label1 to label2 with label4;
        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$getLockName$0(java.lang.Integer[], java.lang.String[], int, java.lang.String)
    {
        java.lang.Integer[] r0;
        java.lang.String[] r1;
        int i0;
        java.lang.String r2;
        java.lang.Integer $r3;

        r0 := @parameter0: java.lang.Integer[];

        r1 := @parameter1: java.lang.String[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0[0] = $r3;

        r1[0] = r2;

        return;
    }

    static void lambda$isOemUnlockAllowedByCarrier$1(java.lang.Integer[], java.lang.Boolean[], int, boolean)
    {
        java.lang.Integer[] r0;
        java.lang.Boolean[] r1;
        int i0;
        boolean z0;
        java.lang.Integer $r2;
        java.lang.Boolean $r3;

        r0 := @parameter0: java.lang.Integer[];

        r1 := @parameter1: java.lang.Boolean[];

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r1[0] = $r3;

        return;
    }

    static void lambda$isOemUnlockAllowedByDevice$2(java.lang.Integer[], java.lang.Boolean[], int, boolean)
    {
        java.lang.Integer[] r0;
        java.lang.Boolean[] r1;
        int i0;
        boolean z0;
        java.lang.Integer $r2;
        java.lang.Boolean $r3;

        r0 := @parameter0: java.lang.Integer[];

        r1 := @parameter1: java.lang.Boolean[];

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0[0] = $r2;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r1[0] = $r3;

        return;
    }

    private java.util.ArrayList toByteArrayList(byte[])
    {
        com.android.server.oemlock.VendorLock r0;
        byte[] r1;
        int i0, $i1, i3;
        java.util.ArrayList $r3, $r5;
        byte $b2;
        java.lang.Byte $r4;

        r0 := @this: com.android.server.oemlock.VendorLock;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        return $r5;

     label1:
        $r3 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $b2 = r1[i3];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r3;
    }

    java.lang.String getLockName()
    {
        com.android.server.oemlock.VendorLock r0;
        java.lang.Integer[] r1;
        java.lang.String[] r2;
        com.android.server.oemlock._$$Lambda$VendorLock$mE2wEMNMcvqMft72oSVABYa_mYs r3;
        int i0;
        java.lang.Integer $r4;
        java.lang.String $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.hardware.oemlock.V1_0.IOemLock r8;

        r0 := @this: com.android.server.oemlock.VendorLock;

        r1 = newarray (java.lang.Integer)[1];

        r2 = newarray (java.lang.String)[1];

     label1:
        r8 = r0.<com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock mOemLock>;

        r3 = new com.android.server.oemlock._$$Lambda$VendorLock$mE2wEMNMcvqMft72oSVABYa_mYs;

        specialinvoke r3.<com.android.server.oemlock._$$Lambda$VendorLock$mE2wEMNMcvqMft72oSVABYa_mYs: void <init>(java.lang.Integer[],java.lang.String[])>(r1, r2);

        interfaceinvoke r8.<android.hardware.oemlock.V1_0.IOemLock: void getName(android.hardware.oemlock.V1_0.IOemLock$getNameCallback)>(r3);

     label2:
        $r4 = r1[0];

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Unknown return value indicates code is out of sync with HAL");

        return null;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Failed to get OEM lock name.");

        return null;

     label4:
        $r5 = r2[0];

        return $r5;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("OemLock", "Failed to get name from HAL", $r6);

        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    boolean isOemUnlockAllowedByCarrier()
    {
        com.android.server.oemlock.VendorLock r0;
        java.lang.Boolean[] r1;
        android.hardware.oemlock.V1_0.IOemLock r2;
        com.android.server.oemlock._$$Lambda$VendorLock$HjegvthxXAHFarV_FukbaMGePGU r3;
        int i0;
        java.lang.Integer $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.RuntimeException $r6, $r8;
        android.os.RemoteException $r7;
        java.lang.Integer[] r9;

        r0 := @this: com.android.server.oemlock.VendorLock;

        r9 = newarray (java.lang.Integer)[1];

        r1 = newarray (java.lang.Boolean)[1];

     label1:
        r2 = r0.<com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock mOemLock>;

        r3 = new com.android.server.oemlock._$$Lambda$VendorLock$HjegvthxXAHFarV_FukbaMGePGU;

        specialinvoke r3.<com.android.server.oemlock._$$Lambda$VendorLock$HjegvthxXAHFarV_FukbaMGePGU: void <init>(java.lang.Integer[],java.lang.Boolean[])>(r9, r1);

        interfaceinvoke r2.<android.hardware.oemlock.V1_0.IOemLock: void isOemUnlockAllowedByCarrier(android.hardware.oemlock.V1_0.IOemLock$isOemUnlockAllowedByCarrierCallback)>(r3);

     label2:
        $r4 = r9[0];

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Unknown return value indicates code is out of sync with HAL");

     label3:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to get carrier OEM unlock state");

        throw $r6;

     label4:
        $r5 = r1[0];

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label5:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Failed to get carrier state from HAL");

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    boolean isOemUnlockAllowedByDevice()
    {
        com.android.server.oemlock.VendorLock r0;
        java.lang.Integer[] r1;
        java.lang.Boolean[] r2;
        com.android.server.oemlock._$$Lambda$VendorLock$8zNsLj4Jt_s5XEEk_KIC2zQR29g r3;
        int i0;
        java.lang.Integer $r4;
        java.lang.Boolean $r5;
        boolean $z0;
        java.lang.RuntimeException $r6, $r8;
        android.os.RemoteException $r7;
        android.hardware.oemlock.V1_0.IOemLock r9;

        r0 := @this: com.android.server.oemlock.VendorLock;

        r1 = newarray (java.lang.Integer)[1];

        r2 = newarray (java.lang.Boolean)[1];

     label1:
        r9 = r0.<com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock mOemLock>;

        r3 = new com.android.server.oemlock._$$Lambda$VendorLock$8zNsLj4Jt_s5XEEk_KIC2zQR29g;

        specialinvoke r3.<com.android.server.oemlock._$$Lambda$VendorLock$8zNsLj4Jt_s5XEEk_KIC2zQR29g: void <init>(java.lang.Integer[],java.lang.Boolean[])>(r1, r2);

        interfaceinvoke r9.<android.hardware.oemlock.V1_0.IOemLock: void isOemUnlockAllowedByDevice(android.hardware.oemlock.V1_0.IOemLock$isOemUnlockAllowedByDeviceCallback)>(r3);

     label2:
        $r4 = r1[0];

        i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Unknown return value indicates code is out of sync with HAL");

     label3:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to get device OEM unlock state");

        throw $r6;

     label4:
        $r5 = r2[0];

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;

     label5:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Failed to get devie state from HAL");

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    void setOemUnlockAllowedByCarrier(boolean, byte[])
    {
        com.android.server.oemlock.VendorLock r0;
        boolean z0, $z1;
        int i0;
        android.hardware.oemlock.V1_0.IOemLock $r1;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6, r11;
        byte[] r7;
        java.util.ArrayList r8;
        java.lang.IllegalArgumentException r9;
        java.lang.SecurityException r10;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.oemlock.VendorLock;

        z0 := @parameter0: boolean;

        r7 := @parameter1: byte[];

     label1:
        r8 = specialinvoke r0.<com.android.server.oemlock.VendorLock: java.util.ArrayList toByteArrayList(byte[])>(r7);

        $r1 = r0.<com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock mOemLock>;

        i0 = interfaceinvoke $r1.<android.hardware.oemlock.V1_0.IOemLock: int setOemUnlockAllowedByCarrier(boolean,java.util.ArrayList)>(z0, r8);

     label2:
        if i0 == 0 goto label7;

        if i0 == 1 goto label6;

        if i0 != 2 goto label5;

     label3:
        $z1 = virtualinvoke r8.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        r9 = new java.lang.IllegalArgumentException;

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Signature required for carrier unlock");

        throw r9;

     label4:
        r10 = new java.lang.SecurityException;

        specialinvoke r10.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid signature used in attempt to carrier unlock");

        throw r10;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Unknown return value indicates code is out of sync with HAL");

     label6:
        r11 = new java.lang.RuntimeException;

        specialinvoke r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to set carrier OEM unlock state");

        throw r11;

     label7:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated carrier allows OEM lock state to: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OemLock", $r4);

     label8:
        return;

     label9:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("OemLock", "Failed to set carrier state with HAL", $r5);

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch android.os.RemoteException from label4 to label5 with label9;
        catch android.os.RemoteException from label5 to label6 with label9;
        catch android.os.RemoteException from label6 to label7 with label9;
        catch android.os.RemoteException from label7 to label8 with label9;
    }

    void setOemUnlockAllowedByDevice(boolean)
    {
        com.android.server.oemlock.VendorLock r0;
        boolean z0;
        int i0;
        android.hardware.oemlock.V1_0.IOemLock $r1;
        java.lang.String $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6, r7;
        java.lang.StringBuilder r8;

        r0 := @this: com.android.server.oemlock.VendorLock;

        z0 := @parameter0: boolean;

     label1:
        $r1 = r0.<com.android.server.oemlock.VendorLock: android.hardware.oemlock.V1_0.IOemLock mOemLock>;

        i0 = interfaceinvoke $r1.<android.hardware.oemlock.V1_0.IOemLock: int setOemUnlockAllowedByDevice(boolean)>(z0);

     label2:
        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

     label3:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OemLock", "Unknown return value indicates code is out of sync with HAL");

     label4:
        r7 = new java.lang.RuntimeException;

        specialinvoke r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to set device OEM unlock state");

        throw r7;

     label5:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated device allows OEM lock state to: ");

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OemLock", $r4);

     label6:
        return;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("OemLock", "Failed to set device state with HAL", $r5);

        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.oemlock.VendorLock: java.lang.String TAG> = "OemLock";

        return;
    }
}
