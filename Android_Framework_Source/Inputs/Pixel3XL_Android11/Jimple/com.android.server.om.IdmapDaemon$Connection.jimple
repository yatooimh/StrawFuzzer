class com.android.server.om.IdmapDaemon$Connection extends java.lang.Object implements java.lang.AutoCloseable
{
    private boolean mOpened;
    final com.android.server.om.IdmapDaemon this$0;

    private void <init>(com.android.server.om.IdmapDaemon)
    {
        com.android.server.om.IdmapDaemon$Connection r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.lang.Throwable $r3;
        com.android.server.om.IdmapDaemon r4;

        r0 := @this: com.android.server.om.IdmapDaemon$Connection;

        r4 := @parameter0: com.android.server.om.IdmapDaemon;

        r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0> = r4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.om.IdmapDaemon$Connection: boolean mOpened> = 1;

        r1 = staticinvoke <com.android.server.om.IdmapDaemon: java.lang.Object access$000(com.android.server.om.IdmapDaemon)>(r4);

        entermonitor r1;

     label1:
        $r2 = staticinvoke <com.android.server.om.IdmapDaemon: java.util.concurrent.atomic.AtomicInteger access$100(com.android.server.om.IdmapDaemon)>(r4);

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void <init>(com.android.server.om.IdmapDaemon, com.android.server.om.IdmapDaemon$1)
    {
        com.android.server.om.IdmapDaemon$Connection r0;
        com.android.server.om.IdmapDaemon r1;
        com.android.server.om.IdmapDaemon$1 r2;

        r0 := @this: com.android.server.om.IdmapDaemon$Connection;

        r1 := @parameter0: com.android.server.om.IdmapDaemon;

        r2 := @parameter1: com.android.server.om.IdmapDaemon$1;

        specialinvoke r0.<com.android.server.om.IdmapDaemon$Connection: void <init>(com.android.server.om.IdmapDaemon)>(r1);

        return;
    }

    public void close()
    {
        com.android.server.om.IdmapDaemon$Connection r0;
        java.lang.Object r1, $r7;
        android.os.Handler r2;
        com.android.server.om.IdmapDaemon $r3, $r4, $r6;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0;
        java.lang.Throwable $r8;
        com.android.server.om._$$Lambda$IdmapDaemon$Connection$4U_n0RSv1BPv15mvu8B8zXARcpk r9;

        r0 := @this: com.android.server.om.IdmapDaemon$Connection;

        $r3 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        r1 = staticinvoke <com.android.server.om.IdmapDaemon: java.lang.Object access$000(com.android.server.om.IdmapDaemon)>($r3);

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.om.IdmapDaemon$Connection: boolean mOpened>;

        if $z0 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.om.IdmapDaemon$Connection: boolean mOpened> = 0;

        $r4 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        $r5 = staticinvoke <com.android.server.om.IdmapDaemon: java.util.concurrent.atomic.AtomicInteger access$100(com.android.server.om.IdmapDaemon)>($r4);

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        if $i0 == 0 goto label5;

        exitmonitor r1;

     label4:
        return;

     label5:
        r2 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        r9 = new com.android.server.om._$$Lambda$IdmapDaemon$Connection$4U_n0RSv1BPv15mvu8B8zXARcpk;

        specialinvoke r9.<com.android.server.om._$$Lambda$IdmapDaemon$Connection$4U_n0RSv1BPv15mvu8B8zXARcpk: void <init>(com.android.server.om.IdmapDaemon$Connection)>(r0);

        $r6 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        $r7 = staticinvoke <com.android.server.om.IdmapDaemon: java.lang.Object access$000(com.android.server.om.IdmapDaemon)>($r6);

        virtualinvoke r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,java.lang.Object,long)>(r9, $r7, 10000L);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void lambda$close$0$IdmapDaemon$Connection()
    {
        com.android.server.om.IdmapDaemon$Connection r0;
        java.lang.Object r1;
        com.android.server.om.IdmapDaemon $r3, $r4, $r6, $r8;
        android.os.IIdmap2 $r5;
        java.util.concurrent.atomic.AtomicInteger $r7;
        int $i0;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.om.IdmapDaemon$Connection;

        $r3 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        r1 = staticinvoke <com.android.server.om.IdmapDaemon: java.lang.Object access$000(com.android.server.om.IdmapDaemon)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        $r5 = staticinvoke <com.android.server.om.IdmapDaemon: android.os.IIdmap2 access$200(com.android.server.om.IdmapDaemon)>($r4);

        if $r5 == null goto label5;

        $r6 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        $r7 = staticinvoke <com.android.server.om.IdmapDaemon: java.util.concurrent.atomic.AtomicInteger access$100(com.android.server.om.IdmapDaemon)>($r6);

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i0 == 0 goto label3;

     label2:
        goto label5;

     label3:
        staticinvoke <com.android.server.om.IdmapDaemon: void access$300()>();

        $r8 = r0.<com.android.server.om.IdmapDaemon$Connection: com.android.server.om.IdmapDaemon this$0>;

        staticinvoke <com.android.server.om.IdmapDaemon: android.os.IIdmap2 access$202(com.android.server.om.IdmapDaemon,android.os.IIdmap2)>($r8, null);

        exitmonitor r1;

     label4:
        return;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
}
