class com.android.server.om.IdmapDaemon extends java.lang.Object
{
    private static final java.lang.String IDMAP_DAEMON;
    private static final int SERVICE_CONNECT_INTERVAL_SLEEP_MS;
    private static final int SERVICE_CONNECT_TIMEOUT_MS;
    private static final int SERVICE_TIMEOUT_MS;
    private static com.android.server.om.IdmapDaemon sInstance;
    private final java.lang.Object mIdmapToken;
    private final java.util.concurrent.atomic.AtomicInteger mOpenedCount;
    private volatile android.os.IIdmap2 mService;

    void <init>()
    {
        com.android.server.om.IdmapDaemon r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.Object $r2;

        r0 := @this: com.android.server.om.IdmapDaemon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.server.om.IdmapDaemon: java.util.concurrent.atomic.AtomicInteger mOpenedCount> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.om.IdmapDaemon: java.lang.Object mIdmapToken> = $r2;

        return;
    }

    static java.lang.Object access$000(com.android.server.om.IdmapDaemon)
    {
        com.android.server.om.IdmapDaemon r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.om.IdmapDaemon;

        $r1 = r0.<com.android.server.om.IdmapDaemon: java.lang.Object mIdmapToken>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicInteger access$100(com.android.server.om.IdmapDaemon)
    {
        com.android.server.om.IdmapDaemon r0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @parameter0: com.android.server.om.IdmapDaemon;

        $r1 = r0.<com.android.server.om.IdmapDaemon: java.util.concurrent.atomic.AtomicInteger mOpenedCount>;

        return $r1;
    }

    static android.os.IIdmap2 access$200(com.android.server.om.IdmapDaemon)
    {
        com.android.server.om.IdmapDaemon r0;
        android.os.IIdmap2 $r1;

        r0 := @parameter0: com.android.server.om.IdmapDaemon;

        $r1 = r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService>;

        return $r1;
    }

    static android.os.IIdmap2 access$202(com.android.server.om.IdmapDaemon, android.os.IIdmap2)
    {
        com.android.server.om.IdmapDaemon r0;
        android.os.IIdmap2 r1;

        r0 := @parameter0: com.android.server.om.IdmapDaemon;

        r1 := @parameter1: android.os.IIdmap2;

        r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService> = r1;

        return r1;
    }

    static void access$300()
    {
        staticinvoke <com.android.server.om.IdmapDaemon: void stopIdmapService()>();

        return;
    }

    private com.android.server.om.IdmapDaemon$Connection connect() throws java.util.concurrent.TimeoutException, android.os.RemoteException
    {
        com.android.server.om.IdmapDaemon r0;
        java.lang.Object r1, $r3;
        android.os.Handler $r2;
        android.os.IIdmap2 $r4, $r6;
        android.os.IBinder $r5;
        java.lang.Throwable $r7;
        com.android.server.om.IdmapDaemon$Connection r8, r9;

        r0 := @this: com.android.server.om.IdmapDaemon;

        r1 = r0.<com.android.server.om.IdmapDaemon: java.lang.Object mIdmapToken>;

        entermonitor r1;

     label1:
        $r2 = staticinvoke <com.android.server.FgThread: android.os.Handler getHandler()>();

        $r3 = r0.<com.android.server.om.IdmapDaemon: java.lang.Object mIdmapToken>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>($r3);

        $r4 = r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService>;

        if $r4 == null goto label3;

        r8 = new com.android.server.om.IdmapDaemon$Connection;

        specialinvoke r8.<com.android.server.om.IdmapDaemon$Connection: void <init>(com.android.server.om.IdmapDaemon,com.android.server.om.IdmapDaemon$1)>(r0, null);

        exitmonitor r1;

     label2:
        return r8;

     label3:
        $r5 = specialinvoke r0.<com.android.server.om.IdmapDaemon: android.os.IBinder getIdmapService()>();

        $r6 = staticinvoke <android.os.IIdmap2$Stub: android.os.IIdmap2 asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService> = $r6;

        r9 = new com.android.server.om.IdmapDaemon$Connection;

        specialinvoke r9.<com.android.server.om.IdmapDaemon$Connection: void <init>(com.android.server.om.IdmapDaemon,com.android.server.om.IdmapDaemon$1)>(r0, null);

        exitmonitor r1;

     label4:
        return r9;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private android.os.IBinder getIdmapService() throws java.util.concurrent.TimeoutException, android.os.RemoteException
    {
        com.android.server.om.IdmapDaemon r0;
        long l0, $l1, $l2;
        byte $b3;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;
        com.android.server.om.'-$$Lambda$IdmapDaemon$PJzhiOHnyxvsKcpF_77d27eStZs' $r5;
        java.lang.Throwable $r6;
        android.os.IBinder r7;
        java.util.concurrent.TimeoutException r9;
        android.os.IBinder$DeathRecipient r10;

        r0 := @this: com.android.server.om.IdmapDaemon;

        staticinvoke <android.os.SystemService: void start(java.lang.String)>("idmap2d");

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

     label1:
        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = l0 + 5000L;

        $b3 = $l1 cmp $l2;

        if $b3 > 0 goto label6;

        r7 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("idmap");

        if r7 == null goto label2;

        $r5 = <com.android.server.om._$$Lambda$IdmapDaemon$PJzhiOHnyxvsKcpF_77d27eStZs: com.android.server.om.'-$$Lambda$IdmapDaemon$PJzhiOHnyxvsKcpF_77d27eStZs' INSTANCE>;

        r10 = (android.os.IBinder$DeathRecipient) $r5;

        interfaceinvoke r7.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r10, 0);

        return r7;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(5L);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        goto label1;

     label6:
        r9 = new java.util.concurrent.TimeoutException;

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = "idmap";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5000);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to connect to \'%s\' in %d milliseconds", $r2);

        specialinvoke r9.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>($r4);

        throw r9;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    static com.android.server.om.IdmapDaemon getInstance()
    {
        com.android.server.om.IdmapDaemon $r0, $r1, $r2;

        $r0 = <com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon sInstance>;

        if $r0 != null goto label1;

        $r2 = new com.android.server.om.IdmapDaemon;

        specialinvoke $r2.<com.android.server.om.IdmapDaemon: void <init>()>();

        <com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon sInstance> = $r2;

     label1:
        $r1 = <com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon sInstance>;

        return $r1;
    }

    static void lambda$getIdmapService$0()
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = "idmap";

        $r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("service \'%s\' died", $r0);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("OverlayManager", $r1);

        return;
    }

    private static void stopIdmapService()
    {
        staticinvoke <android.os.SystemService: void stop(java.lang.String)>("idmap2d");

        return;
    }

    java.lang.String createIdmap(java.lang.String, java.lang.String, int, boolean, int) throws java.util.concurrent.TimeoutException, android.os.RemoteException
    {
        com.android.server.om.IdmapDaemon r0;
        int i0, i1;
        boolean z0;
        com.android.server.om.IdmapDaemon$Connection r1;
        android.os.IIdmap2 $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5, r6, r7;

        r0 := @this: com.android.server.om.IdmapDaemon;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        r1 = specialinvoke r0.<com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon$Connection connect()>();

     label1:
        $r2 = r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService>;

        r7 = interfaceinvoke $r2.<android.os.IIdmap2: java.lang.String createIdmap(java.lang.String,java.lang.String,int,boolean,int)>(r5, r6, i0, z0, i1);

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label3:
        return r7;

     label4:
        $r4 := @caughtexception;

        if r1 == null goto label8;

     label5:
        virtualinvoke r1.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    boolean idmapExists(java.lang.String, int)
    {
        com.android.server.om.IdmapDaemon r0;
        java.lang.String r1, $r3, $r10, $r12;
        int i0;
        boolean z0;
        android.os.IIdmap2 $r2;
        java.lang.Throwable $r4, $r13;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        com.android.server.om.IdmapDaemon$Connection r14;
        java.io.File r15;

        r0 := @this: com.android.server.om.IdmapDaemon;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label01:
        r14 = specialinvoke r0.<com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon$Connection connect()>();

     label02:
        r15 = new java.io.File;

        $r2 = r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService>;

        $r3 = interfaceinvoke $r2.<android.os.IIdmap2: java.lang.String getIdmapPath(java.lang.String,int)>(r1, i0);

        specialinvoke r15.<java.io.File: void <init>(java.lang.String)>($r3);

        z0 = virtualinvoke r15.<java.io.File: boolean isFile()>();

     label03:
        if r14 == null goto label05;

     label04:
        virtualinvoke r14.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label05:
        return z0;

     label06:
        $r4 := @caughtexception;

        if r14 == null goto label11;

     label07:
        virtualinvoke r14.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

     label10:
        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

     label11:
        throw $r4;

     label12:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to check if idmap exists for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("OverlayManager", $r12);

        return 0;

        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label11 to label12 with label12;
    }

    boolean removeIdmap(java.lang.String, int) throws java.util.concurrent.TimeoutException, android.os.RemoteException
    {
        com.android.server.om.IdmapDaemon r0;
        int i0;
        boolean z0;
        android.os.IIdmap2 $r1;
        java.lang.Throwable $r2, $r3;
        java.lang.String r4;
        com.android.server.om.IdmapDaemon$Connection r5;

        r0 := @this: com.android.server.om.IdmapDaemon;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r5 = specialinvoke r0.<com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon$Connection connect()>();

     label1:
        $r1 = r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService>;

        z0 = interfaceinvoke $r1.<android.os.IIdmap2: boolean removeIdmap(java.lang.String,int)>(r4, i0);

     label2:
        if r5 == null goto label3;

        virtualinvoke r5.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label3:
        return z0;

     label4:
        $r3 := @caughtexception;

        if r5 == null goto label8;

     label5:
        virtualinvoke r5.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    boolean verifyIdmap(java.lang.String, java.lang.String, int, boolean, int) throws java.lang.Exception
    {
        com.android.server.om.IdmapDaemon r0;
        int i0, i1;
        com.android.server.om.IdmapDaemon$Connection r1;
        android.os.IIdmap2 $r2;
        java.lang.Throwable $r3, $r4;
        java.lang.String r5, r6;
        boolean z0, z1;

        r0 := @this: com.android.server.om.IdmapDaemon;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        r1 = specialinvoke r0.<com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon$Connection connect()>();

     label1:
        $r2 = r0.<com.android.server.om.IdmapDaemon: android.os.IIdmap2 mService>;

        z1 = interfaceinvoke $r2.<android.os.IIdmap2: boolean verifyIdmap(java.lang.String,java.lang.String,int,boolean,int)>(r5, r6, i0, z0, i1);

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label3:
        return z1;

     label4:
        $r4 := @caughtexception;

        if r1 == null goto label8;

     label5:
        virtualinvoke r1.<com.android.server.om.IdmapDaemon$Connection: void close()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static void <clinit>()
    {
        <com.android.server.om.IdmapDaemon: int SERVICE_TIMEOUT_MS> = 10000;

        <com.android.server.om.IdmapDaemon: int SERVICE_CONNECT_TIMEOUT_MS> = 5000;

        <com.android.server.om.IdmapDaemon: int SERVICE_CONNECT_INTERVAL_SLEEP_MS> = 5;

        <com.android.server.om.IdmapDaemon: java.lang.String IDMAP_DAEMON> = "idmap2d";

        return;
    }
}
