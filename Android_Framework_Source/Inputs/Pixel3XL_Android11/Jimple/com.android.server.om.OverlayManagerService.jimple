public final class com.android.server.om.OverlayManagerService extends com.android.server.SystemService
{
    static final boolean DEBUG;
    private static final java.lang.String DEFAULT_OVERLAYS_PROP;
    static final java.lang.String TAG;
    private final com.android.server.om.OverlayActorEnforcer mActorEnforcer;
    private final com.android.server.om.OverlayManagerServiceImpl mImpl;
    private final java.lang.Object mLock;
    private final com.android.server.om.OverlayManagerService$PackageManagerHelperImpl mPackageManager;
    private final java.util.concurrent.atomic.AtomicBoolean mPersistSettingsScheduled;
    private final android.os.IBinder mService;
    private final com.android.server.om.OverlayManagerSettings mSettings;
    private final android.util.AtomicFile mSettingsFile;
    private final com.android.server.pm.UserManagerService mUserManager;

    public void <init>(android.content.Context)
    {
        com.android.server.om.OverlayManagerService r0;
        com.android.server.om.OverlayManagerSettings r1;
        com.android.internal.content.om.OverlayConfig r2;
        java.lang.String[] r3;
        com.android.server.om.OverlayManagerService$OverlayChangeListener r4;
        java.lang.Object $r5;
        java.util.concurrent.atomic.AtomicBoolean $r6;
        com.android.server.om.OverlayManagerService$1 $r7;
        java.io.File $r8, r22;
        com.android.server.pm.UserManagerService $r9;
        com.android.server.om.IdmapDaemon $r10;
        com.android.server.om.OverlayManagerService$PackageManagerHelperImpl $r11, $r12, r23, r26;
        android.os.UserHandle $r13, $r15;
        android.os.IBinder $r17;
        java.lang.Throwable $r18, $r19, r34;
        android.content.Context r20, r29, r32;
        android.util.AtomicFile r21;
        com.android.server.om.IdmapManager r24;
        com.android.server.om.OverlayManagerServiceImpl r25;
        com.android.server.om.OverlayActorEnforcer r27;
        android.content.IntentFilter r28, r31;
        com.android.server.om.OverlayManagerService$PackageReceiver r30;
        com.android.server.om.OverlayManagerService$UserReceiver r33;

        r0 := @this: com.android.server.om.OverlayManagerService;

        r20 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r20);

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock> = $r5;

        $r6 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.om.OverlayManagerService: java.util.concurrent.atomic.AtomicBoolean mPersistSettingsScheduled> = $r6;

        $r7 = new com.android.server.om.OverlayManagerService$1;

        specialinvoke $r7.<com.android.server.om.OverlayManagerService$1: void <init>(com.android.server.om.OverlayManagerService)>(r0);

        r0.<com.android.server.om.OverlayManagerService: android.os.IBinder mService> = $r7;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(67108864L, "OMS#OverlayManagerService");

        r21 = new android.util.AtomicFile;

        r22 = new java.io.File;

        $r8 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke r22.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "overlays.xml");

        specialinvoke r21.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>(r22, "overlays");

        r0.<com.android.server.om.OverlayManagerService: android.util.AtomicFile mSettingsFile> = r21;

        r23 = new com.android.server.om.OverlayManagerService$PackageManagerHelperImpl;

     label2:
        specialinvoke r23.<com.android.server.om.OverlayManagerService$PackageManagerHelperImpl: void <init>(android.content.Context)>(r20);

        r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerService$PackageManagerHelperImpl mPackageManager> = r23;

        $r9 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r0.<com.android.server.om.OverlayManagerService: com.android.server.pm.UserManagerService mUserManager> = $r9;

        r24 = new com.android.server.om.IdmapManager;

        $r10 = staticinvoke <com.android.server.om.IdmapDaemon: com.android.server.om.IdmapDaemon getInstance()>();

        $r11 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerService$PackageManagerHelperImpl mPackageManager>;

        specialinvoke r24.<com.android.server.om.IdmapManager: void <init>(com.android.server.om.IdmapDaemon,com.android.server.om.OverlayableInfoCallback)>($r10, $r11);

        r1 = new com.android.server.om.OverlayManagerSettings;

        specialinvoke r1.<com.android.server.om.OverlayManagerSettings: void <init>()>();

        r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerSettings mSettings> = r1;

        r25 = new com.android.server.om.OverlayManagerServiceImpl;

        r26 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerService$PackageManagerHelperImpl mPackageManager>;

        r2 = staticinvoke <com.android.internal.content.om.OverlayConfig: com.android.internal.content.om.OverlayConfig getSystemInstance()>();

        r3 = staticinvoke <com.android.server.om.OverlayManagerService: java.lang.String[] getDefaultOverlayPackages()>();

        r4 = new com.android.server.om.OverlayManagerService$OverlayChangeListener;

        specialinvoke r4.<com.android.server.om.OverlayManagerService$OverlayChangeListener: void <init>(com.android.server.om.OverlayManagerService,com.android.server.om.OverlayManagerService$1)>(r0, null);

        specialinvoke r25.<com.android.server.om.OverlayManagerServiceImpl: void <init>(com.android.server.om.PackageManagerHelper,com.android.server.om.IdmapManager,com.android.server.om.OverlayManagerSettings,com.android.internal.content.om.OverlayConfig,java.lang.String[],com.android.server.om.OverlayManagerServiceImpl$OverlayChangeListener)>(r26, r24, r1, r2, r3, r4);

        r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerServiceImpl mImpl> = r25;

        r27 = new com.android.server.om.OverlayActorEnforcer;

        $r12 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerService$PackageManagerHelperImpl mPackageManager>;

        specialinvoke r27.<com.android.server.om.OverlayActorEnforcer: void <init>(com.android.server.om.OverlayableInfoCallback)>($r12);

        r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayActorEnforcer mActorEnforcer> = r27;

        r28 = new android.content.IntentFilter;

        specialinvoke r28.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r28.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r28.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke r28.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r28.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        r29 = virtualinvoke r0.<com.android.server.om.OverlayManagerService: android.content.Context getContext()>();

        r30 = new com.android.server.om.OverlayManagerService$PackageReceiver;

        specialinvoke r30.<com.android.server.om.OverlayManagerService$PackageReceiver: void <init>(com.android.server.om.OverlayManagerService,com.android.server.om.OverlayManagerService$1)>(r0, null);

        $r13 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r29.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r30, $r13, r28, null, null);

        r31 = new android.content.IntentFilter;

        specialinvoke r31.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r31.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke r31.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        r32 = virtualinvoke r0.<com.android.server.om.OverlayManagerService: android.content.Context getContext()>();

        r33 = new com.android.server.om.OverlayManagerService$UserReceiver;

        specialinvoke r33.<com.android.server.om.OverlayManagerService$UserReceiver: void <init>(com.android.server.om.OverlayManagerService,com.android.server.om.OverlayManagerService$1)>(r0, null);

        $r15 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r32.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>(r33, $r15, r31, null, null);

        specialinvoke r0.<com.android.server.om.OverlayManagerService: void restoreSettings()>();

        specialinvoke r0.<com.android.server.om.OverlayManagerService: void initIfNeeded()>();

        virtualinvoke r0.<com.android.server.om.OverlayManagerService: void onSwitchUser(int)>(0);

        $r17 = r0.<com.android.server.om.OverlayManagerService: android.os.IBinder mService>;

        virtualinvoke r0.<com.android.server.om.OverlayManagerService: void publishBinderService(java.lang.String,android.os.IBinder)>("overlay", $r17);

        virtualinvoke r0.<com.android.server.om.OverlayManagerService: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/om/OverlayManagerService;", r0);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        return;

     label4:
        $r18 := @caughtexception;

        r34 = $r18;

        goto label6;

     label5:
        $r19 := @caughtexception;

        r34 = $r19;

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        throw r34;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    static void access$1000(com.android.server.om.OverlayManagerService, int, java.lang.String)
    {
        com.android.server.om.OverlayManagerService r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.om.OverlayManagerService: void updateAssets(int,java.lang.String)>(i0, r1);

        return;
    }

    static com.android.server.pm.UserManagerService access$300(com.android.server.om.OverlayManagerService)
    {
        com.android.server.om.OverlayManagerService r0;
        com.android.server.pm.UserManagerService $r1;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        $r1 = r0.<com.android.server.om.OverlayManagerService: com.android.server.pm.UserManagerService mUserManager>;

        return $r1;
    }

    static java.lang.Object access$400(com.android.server.om.OverlayManagerService)
    {
        com.android.server.om.OverlayManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        $r1 = r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.om.OverlayManagerService$PackageManagerHelperImpl access$500(com.android.server.om.OverlayManagerService)
    {
        com.android.server.om.OverlayManagerService r0;
        com.android.server.om.OverlayManagerService$PackageManagerHelperImpl $r1;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        $r1 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerService$PackageManagerHelperImpl mPackageManager>;

        return $r1;
    }

    static com.android.server.om.OverlayManagerServiceImpl access$600(com.android.server.om.OverlayManagerService)
    {
        com.android.server.om.OverlayManagerService r0;
        com.android.server.om.OverlayManagerServiceImpl $r1;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        $r1 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerServiceImpl mImpl>;

        return $r1;
    }

    static java.util.ArrayList access$700(com.android.server.om.OverlayManagerService, int, java.util.List)
    {
        com.android.server.om.OverlayManagerService r0;
        int i0;
        java.util.List r1;
        java.util.ArrayList $r2;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        $r2 = specialinvoke r0.<com.android.server.om.OverlayManagerService: java.util.ArrayList updateOverlayPaths(int,java.util.List)>(i0, r1);

        return $r2;
    }

    static com.android.server.om.OverlayActorEnforcer access$800(com.android.server.om.OverlayManagerService)
    {
        com.android.server.om.OverlayManagerService r0;
        com.android.server.om.OverlayActorEnforcer $r1;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        $r1 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayActorEnforcer mActorEnforcer>;

        return $r1;
    }

    static void access$900(com.android.server.om.OverlayManagerService)
    {
        com.android.server.om.OverlayManagerService r0;

        r0 := @parameter0: com.android.server.om.OverlayManagerService;

        specialinvoke r0.<com.android.server.om.OverlayManagerService: void schedulePersistSettings()>();

        return;
    }

    private static java.lang.String[] getDefaultOverlayPackages()
    {
        int i0, $i1, i2;
        java.lang.String r1, r7;
        boolean $z0, $z1;
        android.util.ArraySet $r2;
        java.lang.String[] $r3, $r5, $r6, r8;
        java.lang.Object[] $r4;

        r7 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.boot.vendor.overlay.theme");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7);

        if $z0 == 0 goto label1;

        $r6 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

        return $r6;

     label1:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i0 = lengthof r8;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r1 = r8[i2];

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label3;

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r1);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $i1 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        $r3 = newarray (java.lang.String)[$i1];

        $r4 = virtualinvoke $r2.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    private void initIfNeeded()
    {
        com.android.server.om.OverlayManagerService r0;
        java.lang.Object r1, $r3, $r5, $r7, $r9;
        int i0, $i1, $i2, $i3, i4;
        android.content.Context $r2;
        android.os.UserManager $r4;
        boolean $z0;
        com.android.server.om.OverlayManagerServiceImpl $r6;
        android.content.pm.UserInfo $r8, $r10, r14;
        java.lang.Throwable $r12;
        java.util.List r13;
        java.util.ArrayList r15;

        r0 := @this: com.android.server.om.OverlayManagerService;

        $r2 = virtualinvoke r0.<com.android.server.om.OverlayManagerService: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r4 = (android.os.UserManager) $r3;

        r13 = virtualinvoke $r4.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        r1 = r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i0 = interfaceinvoke r13.<java.util.List: int size()>();

     label02:
        i4 = 0;

     label03:
        if i4 >= i0 goto label06;

     label04:
        $r5 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i4);

        r14 = (android.content.pm.UserInfo) $r5;

        $z0 = virtualinvoke r14.<android.content.pm.UserInfo: boolean supportsSwitchTo()>();

        if $z0 != 0 goto label05;

        $i1 = r14.<android.content.pm.UserInfo: int id>;

        if $i1 == 0 goto label05;

        $r6 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerServiceImpl mImpl>;

        $r7 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i4);

        $r8 = (android.content.pm.UserInfo) $r7;

        $i2 = $r8.<android.content.pm.UserInfo: int id>;

        r15 = virtualinvoke $r6.<com.android.server.om.OverlayManagerServiceImpl: java.util.ArrayList updateOverlaysForUser(int)>($i2);

        $r9 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i4);

        $r10 = (android.content.pm.UserInfo) $r9;

        $i3 = $r10.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.om.OverlayManagerService: java.util.ArrayList updateOverlayPaths(int,java.util.List)>($i3, r15);

     label05:
        i4 = i4 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void restoreSettings()
    {
        com.android.server.om.OverlayManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i7, i8;
        android.util.AtomicFile $r1, $r3;
        java.io.File $r2;
        boolean $z0;
        com.android.server.om.OverlayManagerSettings $r4, $r6, $r7;
        com.android.server.pm.UserManagerService $r5;
        java.lang.Object $r8, r16;
        android.content.pm.UserInfo $r9;
        android.os.UserHandle $r10;
        java.lang.Throwable $r11, $r12, $r13, $r14, $r15;
        java.io.FileInputStream r17;
        java.util.List r18;
        int[] r19, r20;

        r0 := @this: com.android.server.om.OverlayManagerService;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(67108864L, "OMS#restoreSettings");

        r16 = r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label02:
        $r1 = r0.<com.android.server.om.OverlayManagerService: android.util.AtomicFile mSettingsFile>;

        $r2 = virtualinvoke $r1.<android.util.AtomicFile: java.io.File getBaseFile()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label04;

        exitmonitor r16;

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        return;

     label04:
        $r3 = r0.<com.android.server.om.OverlayManagerService: android.util.AtomicFile mSettingsFile>;

        r17 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label05:
        $r4 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerSettings mSettings>;

        virtualinvoke $r4.<com.android.server.om.OverlayManagerSettings: void restore(java.io.InputStream)>(r17);

        $r5 = r0.<com.android.server.om.OverlayManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r18 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(1);

        $i2 = interfaceinvoke r18.<java.util.List: int size()>();

        r19 = newarray (int)[$i2];

     label06:
        i7 = 0;

     label07:
        $i3 = interfaceinvoke r18.<java.util.List: int size()>();

        if i7 >= $i3 goto label09;

        $r8 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(i7);

        $r9 = (android.content.pm.UserInfo) $r8;

        $r10 = virtualinvoke $r9.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i5 = virtualinvoke $r10.<android.os.UserHandle: int getIdentifier()>();

        r19[i7] = $i5;

     label08:
        i7 = i7 + 1;

        goto label07;

     label09:
        staticinvoke <java.util.Arrays: void sort(int[])>(r19);

        $r6 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerSettings mSettings>;

        r20 = virtualinvoke $r6.<com.android.server.om.OverlayManagerSettings: int[] getUsers()>();

        i0 = lengthof r20;

     label10:
        i8 = 0;

     label11:
        if i8 >= i0 goto label14;

        i1 = r20[i8];

     label12:
        $i4 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r19, i1);

        if $i4 >= 0 goto label13;

        $r7 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerSettings mSettings>;

        virtualinvoke $r7.<com.android.server.om.OverlayManagerSettings: boolean removeUser(int)>(i1);

     label13:
        i8 = i8 + 1;

        goto label11;

     label14:
        if r17 == null goto label16;

     label15:
        virtualinvoke r17.<java.io.FileInputStream: void close()>();

     label16:
        goto label25;

     label17:
        $r11 := @caughtexception;

        if r17 == null goto label22;

     label18:
        virtualinvoke r17.<java.io.FileInputStream: void close()>();

     label19:
        goto label22;

     label20:
        $r13 := @caughtexception;

     label21:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

     label22:
        throw $r11;

     label23:
        $r12 := @caughtexception;

     label24:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("OverlayManager", "failed to restore overlay state", $r12);

     label25:
        exitmonitor r16;

     label26:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        return;

     label27:
        $r15 := @caughtexception;

     label28:
        exitmonitor r16;

     label29:
        throw $r15;

     label30:
        $r14 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label30;
        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.io.IOException from label04 to label05 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label23;
        catch java.lang.Throwable from label04 to label05 with label27;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.io.IOException from label15 to label16 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label23;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.io.IOException from label22 to label23 with label23;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label23;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label29 to label30 with label30;
    }

    private void schedulePersistSettings()
    {
        com.android.server.om.OverlayManagerService r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;
        boolean $z0;
        android.os.Handler $r2;
        com.android.server.om._$$Lambda$OverlayManagerService$_WGEV7N0qhntbqqDW3A1O_TVv5o $r3;

        r0 := @this: com.android.server.om.OverlayManagerService;

        $r1 = r0.<com.android.server.om.OverlayManagerService: java.util.concurrent.atomic.AtomicBoolean mPersistSettingsScheduled>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicBoolean: boolean getAndSet(boolean)>(1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = staticinvoke <com.android.server.IoThread: android.os.Handler getHandler()>();

        $r3 = new com.android.server.om._$$Lambda$OverlayManagerService$_WGEV7N0qhntbqqDW3A1O_TVv5o;

        specialinvoke $r3.<com.android.server.om._$$Lambda$OverlayManagerService$_WGEV7N0qhntbqqDW3A1O_TVv5o: void <init>(com.android.server.om.OverlayManagerService)>(r0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    private void updateAssets(int, java.lang.String)
    {
        com.android.server.om.OverlayManagerService r0;
        int i0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: com.android.server.om.OverlayManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.om.OverlayManagerService: void updateAssets(int,java.util.List)>(i0, $r2);

        return;
    }

    private void updateAssets(int, java.util.List)
    {
        com.android.server.om.OverlayManagerService r0;
        int i0;
        android.app.IActivityManager r1;
        java.util.ArrayList $r2;
        android.os.RemoteException $r3;
        java.util.List r4;

        r0 := @this: com.android.server.om.OverlayManagerService;

        i0 := @parameter0: int;

        r4 := @parameter1: java.util.List;

        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label1:
        $r2 = specialinvoke r0.<com.android.server.om.OverlayManagerService: java.util.ArrayList updateOverlayPaths(int,java.util.List)>(i0, r4);

        interfaceinvoke r1.<android.app.IActivityManager: void scheduleApplicationInfoChanged(java.util.List,int)>($r2, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.util.ArrayList updateOverlayPaths(int, java.util.List)
    {
        com.android.server.om.OverlayManagerService r0;
        int i0, $i1, i3, i4, i5, i6;
        android.content.pm.PackageManagerInternal r1;
        java.lang.String r2, $r6, $r15, $r17, r32;
        java.util.ArrayList r3, $r9;
        java.lang.Object $r7, $r10, $r11, $r16, r29;
        boolean $z0, $z1, $z2;
        com.android.server.om.OverlayManagerServiceImpl $r8, $r18;
        java.util.List $r12, $r19, r24, r27, r30;
        java.lang.Object[] $r13;
        java.lang.Integer $r14;
        java.lang.Throwable $r21, $r22, $r23, r35;
        java.lang.StringBuilder r26;
        android.util.ArrayMap r28;
        java.util.HashSet r31;

        r0 := @this: com.android.server.om.OverlayManagerService;

        i0 := @parameter0: int;

        r24 := @parameter1: java.util.List;

     label01:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OMS#updateOverlayPaths ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r6 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(67108864L, $r6);

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r1 = (android.content.pm.PackageManagerInternal) $r7;

     label02:
        r27 = r24;

     label03:
        $z0 = interfaceinvoke r24.<java.util.List: boolean contains(java.lang.Object)>("android");

        if $z0 == 0 goto label04;

        r27 = virtualinvoke r1.<android.content.pm.PackageManagerInternal: java.util.List getTargetPackageNames(int)>(i0);

     label04:
        r28 = new android.util.ArrayMap;

        $i1 = interfaceinvoke r27.<java.util.List: int size()>();

        specialinvoke r28.<android.util.ArrayMap: void <init>(int)>($i1);

        r29 = r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock>;

        entermonitor r29;

     label05:
        $r8 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerServiceImpl mImpl>;

        r30 = virtualinvoke $r8.<com.android.server.om.OverlayManagerServiceImpl: java.util.List getEnabledOverlayPackageNames(java.lang.String,int)>("android", i0);

        i3 = interfaceinvoke r27.<java.util.List: int size()>();

     label06:
        i4 = 0;

     label07:
        if i4 >= i3 goto label11;

     label08:
        $r16 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(i4);

        r2 = (java.lang.String) $r16;

        r3 = new java.util.ArrayList;

        specialinvoke r3.<java.util.ArrayList: void <init>()>();

        $r17 = "android";

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label09;

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>(r30);

     label09:
        $r18 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerServiceImpl mImpl>;

        $r19 = virtualinvoke $r18.<com.android.server.om.OverlayManagerServiceImpl: java.util.List getEnabledOverlayPackageNames(java.lang.String,int)>(r2, i0);

        interfaceinvoke r3.<java.util.List: boolean addAll(java.util.Collection)>($r19);

        interfaceinvoke r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label10:
        i4 = i4 + 1;

        goto label07;

     label11:
        exitmonitor r29;

     label12:
        r31 = new java.util.HashSet;

        specialinvoke r31.<java.util.HashSet: void <init>()>();

        i5 = interfaceinvoke r27.<java.util.List: int size()>();

     label13:
        i6 = 0;

     label14:
        if i6 >= i5 goto label18;

     label15:
        $r10 = interfaceinvoke r27.<java.util.List: java.lang.Object get(int)>(i6);

        r32 = (java.lang.String) $r10;

     label16:
        $r11 = interfaceinvoke r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32);

        $r12 = (java.util.List) $r11;

        $z1 = virtualinvoke r1.<android.content.pm.PackageManagerInternal: boolean setEnabledOverlayPackages(int,java.lang.String,java.util.List,java.util.Collection)>(i0, r32, $r12, r31);

        if $z1 != 0 goto label17;

        $r13 = newarray (java.lang.Object)[2];

        $r13[0] = r32;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to change enabled overlays for %s user %d", $r13);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("OverlayManager", $r15);

     label17:
        i6 = i6 + 1;

        goto label14;

     label18:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>(r31);

     label19:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        return $r9;

     label20:
        $r23 := @caughtexception;

     label21:
        exitmonitor r29;

     label22:
        throw $r23;

     label23:
        $r21 := @caughtexception;

        r35 = $r21;

        goto label25;

     label24:
        $r22 := @caughtexception;

        r35 = $r22;

     label25:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        throw r35;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label04 to label05 with label23;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.lang.Throwable from label16 to label17 with label23;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label22 to label23 with label23;
    }

    public void lambda$schedulePersistSettings$0$OverlayManagerService()
    {
        com.android.server.om.OverlayManagerService r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        android.util.AtomicFile $r3, $r5, $r8;
        com.android.server.om.OverlayManagerSettings $r4;
        java.lang.Throwable $r6, $r7;
        java.io.FileOutputStream r9, r10;

        r0 := @this: com.android.server.om.OverlayManagerService;

        $r2 = r0.<com.android.server.om.OverlayManagerService: java.util.concurrent.atomic.AtomicBoolean mPersistSettingsScheduled>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(0);

        r1 = r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock>;

        entermonitor r1;

        r9 = null;

     label01:
        $r3 = r0.<com.android.server.om.OverlayManagerService: android.util.AtomicFile mSettingsFile>;

        r10 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r9 = r10;

     label03:
        $r4 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerSettings mSettings>;

        virtualinvoke $r4.<com.android.server.om.OverlayManagerSettings: void persist(java.io.OutputStream)>(r10);

     label04:
        r9 = r10;

     label05:
        $r5 = r0.<com.android.server.om.OverlayManagerService: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r5.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r10);

     label06:
        goto label10;

     label07:
        $r6 := @caughtexception;

        goto label12;

     label08:
        $r7 := @caughtexception;

     label09:
        $r8 = r0.<com.android.server.om.OverlayManagerService: android.util.AtomicFile mSettingsFile>;

        virtualinvoke $r8.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r9);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("OverlayManager", "failed to persist overlay state", $r7);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        exitmonitor r1;

     label13:
        throw $r6;

        catch java.io.IOException from label01 to label02 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label03 to label04 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.io.IOException from label05 to label06 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label12 to label13 with label07;
    }

    public void onStart()
    {
        com.android.server.om.OverlayManagerService r0;

        r0 := @this: com.android.server.om.OverlayManagerService;

        return;
    }

    public void onSwitchUser(int)
    {
        com.android.server.om.OverlayManagerService r0;
        int i0;
        java.lang.String $r4;
        com.android.server.om.OverlayManagerServiceImpl $r5;
        java.util.ArrayList $r6;
        java.lang.Throwable $r7, $r8;
        java.lang.StringBuilder r9;
        java.lang.Object r10;

        r0 := @this: com.android.server.om.OverlayManagerService;

        i0 := @parameter0: int;

     label1:
        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OMS#onSwitchUser ");

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(67108864L, $r4);

        r10 = r0.<com.android.server.om.OverlayManagerService: java.lang.Object mLock>;

        entermonitor r10;

     label2:
        $r5 = r0.<com.android.server.om.OverlayManagerService: com.android.server.om.OverlayManagerServiceImpl mImpl>;

        $r6 = virtualinvoke $r5.<com.android.server.om.OverlayManagerServiceImpl: java.util.ArrayList updateOverlaysForUser(int)>(i0);

        specialinvoke r0.<com.android.server.om.OverlayManagerService: void updateAssets(int,java.util.List)>(i0, $r6);

        exitmonitor r10;

     label3:
        specialinvoke r0.<com.android.server.om.OverlayManagerService: void schedulePersistSettings()>();

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r10;

     label7:
        throw $r8;

     label8:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(67108864L);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public static void <clinit>()
    {
        <com.android.server.om.OverlayManagerService: java.lang.String TAG> = "OverlayManager";

        <com.android.server.om.OverlayManagerService: java.lang.String DEFAULT_OVERLAYS_PROP> = "ro.boot.vendor.overlay.theme";

        <com.android.server.om.OverlayManagerService: boolean DEBUG> = 0;

        return;
    }
}
