public class com.android.server.om.OverlayReferenceMapper extends java.lang.Object
{
    private final java.util.Map mActorPkgToPkgs;
    private final java.util.Map mActorToTargetToOverlays;
    private boolean mDeferRebuild;
    private final java.lang.Object mLock;
    private final com.android.server.om.OverlayReferenceMapper$Provider mProvider;

    public void <init>(boolean, com.android.server.om.OverlayReferenceMapper$Provider)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        boolean z0;
        java.lang.Object $r1;
        java.util.HashMap $r2, $r3;
        com.android.server.om.OverlayReferenceMapper$1 $r4;
        com.android.server.om.OverlayReferenceMapper$Provider r5;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        z0 := @parameter0: boolean;

        r5 := @parameter1: com.android.server.om.OverlayReferenceMapper$Provider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorPkgToPkgs> = $r3;

        r0.<com.android.server.om.OverlayReferenceMapper: boolean mDeferRebuild> = z0;

        if r5 == null goto label1;

        goto label2;

     label1:
        $r4 = new com.android.server.om.OverlayReferenceMapper$1;

        specialinvoke $r4.<com.android.server.om.OverlayReferenceMapper$1: void <init>(com.android.server.om.OverlayReferenceMapper)>(r0);

        r5 = $r4;

     label2:
        r0.<com.android.server.om.OverlayReferenceMapper: com.android.server.om.OverlayReferenceMapper$Provider mProvider> = r5;

        return;
    }

    private void addOverlay(com.android.server.pm.parsing.pkg.AndroidPackage, java.util.Map)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.util.Map r1, $r5, r25;
        java.lang.Object r2, $r7, $r8, $r9, $r10, $r11, $r13;
        java.lang.String r3, $r12, r21, r24, r26;
        java.util.Iterator r4, r19;
        java.util.Set $r6, r22;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r14, $r15, $r16, r27;
        com.android.server.pm.parsing.pkg.AndroidPackage r17, r23;
        com.android.server.om.OverlayReferenceMapper$Provider r18;
        java.util.Map$Entry r20;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r17 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.util.Map;

        r2 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r3 = interfaceinvoke r17.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void removeOverlay(java.lang.String)>(r3);

        r18 = r0.<com.android.server.om.OverlayReferenceMapper: com.android.server.om.OverlayReferenceMapper$Provider mProvider>;

     label02:
        $r5 = interfaceinvoke r18.<com.android.server.om.OverlayReferenceMapper$Provider: java.util.Map getTargetToOverlayables(com.android.server.pm.parsing.pkg.AndroidPackage)>(r17);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        r19 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r7 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        r21 = (java.lang.String) $r8;

        $r9 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r22 = (java.util.Set) $r9;

     label04:
        $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r21);

        r23 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

     label05:
        if r23 != null goto label06;

        goto label03;

     label06:
        r24 = interfaceinvoke r23.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r25 = interfaceinvoke r23.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getOverlayables()>();

        r4 = interfaceinvoke r22.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z2 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r25.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r26 = (java.lang.String) $r13;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r26);

        if $z0 == 0 goto label09;

     label08:
        goto label07;

     label09:
        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void addOverlayToMap(java.lang.String,java.lang.String,java.lang.String)>(r26, r24, r3);

     label10:
        goto label07;

     label11:
        goto label03;

     label12:
        exitmonitor r2;

     label13:
        return;

     label14:
        $r16 := @caughtexception;

        r27 = $r16;

        goto label16;

     label15:
        $r15 := @caughtexception;

        r27 = $r15;

     label16:
        exitmonitor r2;

     label17:
        throw r27;

     label18:
        $r14 := @caughtexception;

        r27 = $r14;

        goto label16;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
    }

    private void addOverlayToMap(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.String r1, r2, r11;
        java.lang.Object r3, $r5, $r6, r13, r15;
        java.util.Map $r4, $r8, r12, r19, r20;
        java.lang.Throwable $r10;
        java.util.Set r14, r21;
        java.util.HashMap r17;
        java.util.HashSet r18;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r4 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (java.util.Map) $r5;

     label02:
        r13 = r12;

        if r12 != null goto label05;

     label03:
        r17 = new java.util.HashMap;

        r13 = r17;

        specialinvoke r17.<java.util.HashMap: void <init>()>();

     label04:
        $r8 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r11, r17);

     label05:
        r19 = (java.util.Map) r13;

        $r6 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r14 = (java.util.Set) $r6;

     label06:
        r15 = r14;

        if r14 != null goto label09;

     label07:
        r18 = new java.util.HashSet;

        r15 = r18;

        specialinvoke r18.<java.util.HashSet: void <init>()>();

     label08:
        r20 = (java.util.Map) r13;

        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r18);

     label09:
        r21 = (java.util.Set) r15;

        interfaceinvoke r21.<java.util.Set: boolean add(java.lang.Object)>(r2);

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        $r10 := @caughtexception;

     label13:
        exitmonitor r3;

     label14:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private void addTarget(com.android.server.pm.parsing.pkg.AndroidPackage, java.util.Map)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.util.Map r1, r4, $r16;
        java.lang.Object r2, $r11, $r12, $r14, $r17;
        java.lang.String r3, r5, r6, $r18;
        java.util.Iterator r7, r21;
        com.android.server.pm.parsing.pkg.AndroidPackage r8, r20;
        java.util.Set r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        java.util.Collection $r13;
        com.android.server.om.OverlayReferenceMapper$Provider $r15;
        java.lang.Throwable $r19;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r20 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.util.Map;

        r2 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r3 = interfaceinvoke r20.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void removeTarget(java.lang.String)>(r3);

        r4 = interfaceinvoke r20.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getOverlayables()>();

        $r10 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>();

        r21 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r11 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r11;

        $r12 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.lang.String) $r12;

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void addTargetToMap(java.lang.String,java.lang.String)>(r6, r3);

        $r13 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>();

        r7 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r14;

        $r15 = r0.<com.android.server.om.OverlayReferenceMapper: com.android.server.om.OverlayReferenceMapper$Provider mProvider>;

        $r16 = interfaceinvoke $r15.<com.android.server.om.OverlayReferenceMapper$Provider: java.util.Map getTargetToOverlayables(com.android.server.pm.parsing.pkg.AndroidPackage)>(r8);

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r9 = (java.util.Set) $r17;

        $z1 = staticinvoke <com.android.internal.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r9);

        if $z1 == 0 goto label05;

     label04:
        goto label03;

     label05:
        $z2 = interfaceinvoke r9.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z2 == 0 goto label06;

        $r18 = interfaceinvoke r8.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void addOverlayToMap(java.lang.String,java.lang.String,java.lang.String)>(r6, r3, $r18);

     label06:
        goto label03;

     label07:
        goto label02;

     label08:
        exitmonitor r2;

     label09:
        return;

     label10:
        $r19 := @caughtexception;

     label11:
        exitmonitor r2;

     label12:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void addTargetToMap(java.lang.String, java.lang.String)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.String r1, r2;
        java.util.Map r3, $r4, $r11, r16, r17;
        java.lang.Object $r5, $r6, r13;
        java.util.Set $r7;
        java.util.HashMap r14;
        java.util.HashSet r15;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Map) $r5;

        r13 = r3;

        if r3 != null goto label1;

        r14 = new java.util.HashMap;

        specialinvoke r14.<java.util.HashMap: void <init>()>();

        r13 = r14;

        $r11 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r14);

     label1:
        r16 = (java.util.Map) r13;

        $r6 = interfaceinvoke r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r7 = (java.util.Set) $r6;

        if $r7 != null goto label2;

        r15 = new java.util.HashSet;

        specialinvoke r15.<java.util.HashSet: void <init>()>();

        r17 = (java.util.Map) r13;

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r15);

     label2:
        return;
    }

    private void assertMapBuilt()
    {
        com.android.server.om.OverlayReferenceMapper r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        $z0 = r0.<com.android.server.om.OverlayReferenceMapper: boolean mDeferRebuild>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The actor map must be built by calling rebuildIfDeferred before it is queried");

        throw $r1;
    }

    private void rebuild()
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.Object r1, $r10, $r13, $r17, $r18;
        java.util.Iterator r2, r4;
        java.util.HashSet r3;
        java.lang.String r5, r20, r21;
        java.util.Set r6, $r9, $r14;
        java.util.Map $r7, $r8, $r12, $r15, r22;
        com.android.server.om.OverlayReferenceMapper$Provider $r11;
        boolean $z0, $z1, $z4;
        java.lang.Throwable $r19;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r7 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorPkgToPkgs>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        $r8 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.String) $r10;

        $r11 = r0.<com.android.server.om.OverlayReferenceMapper: com.android.server.om.OverlayReferenceMapper$Provider mProvider>;

        r21 = interfaceinvoke $r11.<com.android.server.om.OverlayReferenceMapper$Provider: java.lang.String getActorPkg(java.lang.String)>(r20);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r21);

        if $z0 == 0 goto label04;

     label03:
        goto label02;

     label04:
        $r12 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r20);

        r22 = (java.util.Map) $r13;

        r3 = new java.util.HashSet;

        specialinvoke r3.<java.util.HashSet: void <init>()>();

        $r14 = interfaceinvoke r22.<java.util.Map: java.util.Set keySet()>();

        r4 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r17 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r17;

        $r18 = interfaceinvoke r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (java.util.Set) $r18;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r5);

        interfaceinvoke r3.<java.util.Set: boolean addAll(java.util.Collection)>(r6);

     label06:
        goto label05;

     label07:
        $r15 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorPkgToPkgs>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r21, r3);

     label08:
        goto label02;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r19 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r19;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void removeOverlay(java.lang.String)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.Object r1, $r6, $r9;
        java.util.Iterator r2, r3;
        java.util.Map $r4, $r7;
        java.util.Collection $r5, $r8;
        boolean $z0, $z1;
        java.util.Set $r10;
        java.lang.Throwable $r11;
        java.lang.String r12;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r12 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.util.Map) $r6;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Set) $r9;

        interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>(r12);

     label04:
        goto label03;

     label05:
        goto label02;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void removeTarget(java.lang.String)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        java.util.Map r3, $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r9 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorToTargetToOverlays>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map) $r6;

        interfaceinvoke r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r9);

        $z1 = interfaceinvoke r3.<java.util.Map: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void addPkg(com.android.server.pm.parsing.pkg.AndroidPackage, java.util.Map)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.util.Map r1, $r3, $r5;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;
        com.android.server.om.OverlayReferenceMapper$Provider $r4;
        java.lang.Throwable $r6;
        com.android.server.pm.parsing.pkg.AndroidPackage r7;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r7 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.util.Map;

        r2 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r3 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getOverlayables()>();

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void addTarget(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Map)>(r7, r1);

     label2:
        $r4 = r0.<com.android.server.om.OverlayReferenceMapper: com.android.server.om.OverlayReferenceMapper$Provider mProvider>;

        $r5 = interfaceinvoke $r4.<com.android.server.om.OverlayReferenceMapper$Provider: java.util.Map getTargetToOverlayables(com.android.server.pm.parsing.pkg.AndroidPackage)>(r7);

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void addOverlay(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Map)>(r7, r1);

     label3:
        $z2 = r0.<com.android.server.om.OverlayReferenceMapper: boolean mDeferRebuild>;

        if $z2 != 0 goto label4;

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void rebuild()>();

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.util.Map getActorPkgToPkgs()
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.util.Map $r1;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        $r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorPkgToPkgs>;

        return $r1;
    }

    public boolean isValidActor(java.lang.String, java.lang.String)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        boolean $z0, z1;
        java.lang.Throwable $r4;
        java.lang.String r5, r6;
        java.util.Set r7;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void assertMapBuilt()>();

        $r2 = r0.<com.android.server.om.OverlayReferenceMapper: java.util.Map mActorPkgToPkgs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (java.util.Set) $r3;

     label02:
        if r7 == null goto label05;

     label03:
        $z0 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z0 == 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void rebuildIfDeferred()
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.om.OverlayReferenceMapper: boolean mDeferRebuild>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void rebuild()>();

        r0.<com.android.server.om.OverlayReferenceMapper: boolean mDeferRebuild> = 0;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void removePkg(java.lang.String)
    {
        com.android.server.om.OverlayReferenceMapper r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.om.OverlayReferenceMapper;

        r3 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.om.OverlayReferenceMapper: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void removeTarget(java.lang.String)>(r3);

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void removeOverlay(java.lang.String)>(r3);

        $z0 = r0.<com.android.server.om.OverlayReferenceMapper: boolean mDeferRebuild>;

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.om.OverlayReferenceMapper: void rebuild()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }
}
