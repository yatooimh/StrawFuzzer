class com.android.server.os.BugreportManagerServiceImpl extends android.os.IDumpstate$Stub
{
    private static final java.lang.String BUGREPORT_SERVICE;
    private static final long DEFAULT_BUGREPORT_SERVICE_TIMEOUT_MILLIS;
    private static final java.lang.String TAG;
    private final android.app.AppOpsManager mAppOps;
    private final android.util.ArraySet mBugreportWhitelistedPackages;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;

    void <init>(android.content.Context)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        android.content.Context r1;
        java.lang.Object $r2, $r3;
        android.app.AppOpsManager $r4;
        com.android.server.SystemConfig $r5;
        android.util.ArraySet $r6;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.IDumpstate$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.os.BugreportManagerServiceImpl: java.lang.Object mLock> = $r2;

        r0.<com.android.server.os.BugreportManagerServiceImpl: android.content.Context mContext> = r1;

        $r3 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r4 = (android.app.AppOpsManager) $r3;

        r0.<com.android.server.os.BugreportManagerServiceImpl: android.app.AppOpsManager mAppOps> = $r4;

        $r5 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r6 = virtualinvoke $r5.<com.android.server.SystemConfig: android.util.ArraySet getBugreportWhitelistedPackages()>();

        r0.<com.android.server.os.BugreportManagerServiceImpl: android.util.ArraySet mBugreportWhitelistedPackages> = $r6;

        return;
    }

    static java.lang.Object access$000(com.android.server.os.BugreportManagerServiceImpl)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.os.BugreportManagerServiceImpl;

        $r1 = r0.<com.android.server.os.BugreportManagerServiceImpl: java.lang.Object mLock>;

        return $r1;
    }

    private void ensureIsPrimaryUser()
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        android.app.IActivityManager $r1;
        android.content.Context $r2;
        android.os.UserManager $r3;
        int $i0, $i1;
        android.os.RemoteException $r4;
        android.content.pm.UserInfo r5, r6, r8;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        r5 = null;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        r6 = interfaceinvoke $r1.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

     label2:
        r5 = r6;

        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        $r2 = r0.<com.android.server.os.BugreportManagerServiceImpl: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r2);

        r8 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getPrimaryUser()>();

        if r5 != null goto label5;

        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void logAndThrow(java.lang.String)>("No current user. Only primary user is allowed to take bugreports.");

     label5:
        if r8 != null goto label6;

        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void logAndThrow(java.lang.String)>("No primary user. Only primary user is allowed to take bugreports.");

     label6:
        $i1 = r8.<android.content.pm.UserInfo: int id>;

        $i0 = r5.<android.content.pm.UserInfo: int id>;

        if $i1 == $i0 goto label7;

        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void logAndThrow(java.lang.String)>("Current user not primary user. Only primary user is allowed to take bugreports.");

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.os.IDumpstate getDumpstateBinderServiceLocked()
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        android.os.IBinder $r1;
        android.os.IDumpstate $r2;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("dumpstate");

        $r2 = staticinvoke <android.os.IDumpstate$Stub: android.os.IDumpstate asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    private boolean isDumpstateBinderServiceRunningLocked()
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        android.os.IDumpstate $r1;
        boolean z0;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        $r1 = specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: android.os.IDumpstate getDumpstateBinderServiceLocked()>();

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void logAndThrow(java.lang.String)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", r1);

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    private void reportError(android.os.IDumpstateListener, int)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        int i0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        android.os.IDumpstateListener r8;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        r8 := @parameter0: android.os.IDumpstateListener;

        i0 := @parameter1: int;

     label1:
        interfaceinvoke r8.<android.os.IDumpstateListener: void onError(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onError() transaction threw RemoteException: ");

        $r5 = virtualinvoke $r2.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.os.IDumpstate startAndGetDumpstateBinderServiceLocked()
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        int i0, i7, i8;
        java.lang.StringBuilder $r1, $r6;
        java.lang.String $r5, $r10;
        long $l2, $l4;
        byte $b5;
        android.os.IDumpstate r11;
        boolean z0, z1;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ctl.start", "bugreportd");

        r11 = null;

        z0 = 0;

        i7 = 0;

        i8 = 500;

     label1:
        if z0 != 0 goto label5;

        r11 = specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: android.os.IDumpstate getDumpstateBinderServiceLocked()>();

        if r11 == null goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BugreportManagerService", "Got bugreport service handle.");

        goto label5;

     label2:
        $l2 = (long) i8;

        staticinvoke <android.os.SystemClock: void sleep(long)>($l2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting to get dumpstate service handle (");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms)");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BugreportManagerService", $r10);

        i7 = i7 + i8;

        i0 = i8 * 2;

        $l4 = (long) i7;

        $b5 = $l4 cmp 30000L;

        if $b5 <= 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        z0 = z1;

        i8 = i0;

        goto label1;

     label5:
        if z0 == 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timed out waiting to get dumpstate service handle (");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms)");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", $r5);

     label6:
        return r11;
    }

    private void startBugreportLocked(int, java.lang.String, java.io.FileDescriptor, java.io.FileDescriptor, int, android.os.IDumpstateListener, boolean)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        int i0, i1;
        java.io.FileDescriptor r1, r2;
        boolean z0, $z1;
        android.os.IDumpstate r3;
        com.android.server.os.BugreportManagerServiceImpl$DumpstateListener $r4;
        android.os.RemoteException $r5;
        java.lang.String r6;
        android.os.IDumpstateListener r7;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        r1 := @parameter2: java.io.FileDescriptor;

        r2 := @parameter3: java.io.FileDescriptor;

        i1 := @parameter4: int;

        r7 := @parameter5: android.os.IDumpstateListener;

        z0 := @parameter6: boolean;

        $z1 = specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: boolean isDumpstateBinderServiceRunningLocked()>();

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", "\'dumpstate\' is already running. Cannot start a new bugreport while another one is currently in progress.");

        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void reportError(android.os.IDumpstateListener,int)>(r7, 5);

        return;

     label1:
        r3 = specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: android.os.IDumpstate startAndGetDumpstateBinderServiceLocked()>();

        if r3 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", "Unable to get bugreport service");

        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void reportError(android.os.IDumpstateListener,int)>(r7, 2);

        return;

     label2:
        $r4 = new com.android.server.os.BugreportManagerServiceImpl$DumpstateListener;

        specialinvoke $r4.<com.android.server.os.BugreportManagerServiceImpl$DumpstateListener: void <init>(com.android.server.os.BugreportManagerServiceImpl,android.os.IDumpstateListener,android.os.IDumpstate)>(r0, r7, r3);

     label3:
        interfaceinvoke r3.<android.os.IDumpstate: void startBugreport(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)>(i0, r6, r1, r2, i1, $r4, z0);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        virtualinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void cancelBugreport()>();

     label6:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private void validateBugreportMode(int)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        int i0;
        java.lang.StringBuilder $r1, $r5;
        java.lang.String $r4, $r9;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        if i0 == 3 goto label2;

        if i0 == 4 goto label2;

        if i0 != 5 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown bugreport mode: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", $r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown bugreport mode: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        return;
    }

    public void cancelBugreport()
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        java.lang.Object r1;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.os.IDumpstate r5;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        $r2 = r0.<com.android.server.os.BugreportManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "cancelBugreport");

        r1 = r0.<com.android.server.os.BugreportManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r5 = specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: android.os.IDumpstate getDumpstateBinderServiceLocked()>();

     label02:
        if r5 != null goto label05;

     label03:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BugreportManagerService", "cancelBugreport: Could not find native dumpstate service");

        exitmonitor r1;

     label04:
        return;

     label05:
        interfaceinvoke r5.<android.os.IDumpstate: void cancelBugreport()>();

     label06:
        goto label09;

     label07:
        $r4 := @caughtexception;

     label08:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BugreportManagerService", "RemoteException in cancelBugreport", $r4);

     label09:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("ctl.stop", "bugreportd");

        exitmonitor r1;

     label10:
        return;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void startBugreport(int, java.lang.String, java.io.FileDescriptor, java.io.FileDescriptor, int, android.os.IDumpstateListener, boolean)
    {
        com.android.server.os.BugreportManagerServiceImpl r0;
        java.io.FileDescriptor r1, r18;
        int i0, i2, i3;
        android.os.IDumpstateListener r2;
        boolean z0, $z1;
        long l1;
        java.lang.Object r3;
        android.content.Context $r4;
        android.app.AppOpsManager $r8;
        android.util.ArraySet $r9;
        java.lang.StringBuilder $r10;
        java.lang.SecurityException $r13;
        java.lang.String $r14, r17;
        java.lang.Throwable $r15, $r16;

        r0 := @this: com.android.server.os.BugreportManagerServiceImpl;

        i2 := @parameter0: int;

        r17 := @parameter1: java.lang.String;

        r18 := @parameter2: java.io.FileDescriptor;

        r1 := @parameter3: java.io.FileDescriptor;

        i0 := @parameter4: int;

        r2 := @parameter5: android.os.IDumpstateListener;

        z0 := @parameter6: boolean;

        $r4 = r0.<com.android.server.os.BugreportManagerServiceImpl: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "startBugreport");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r17);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r18);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void validateBugreportMode(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void ensureIsPrimaryUser()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = r0.<com.android.server.os.BugreportManagerServiceImpl: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r8.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i3, r17);

        $r9 = r0.<com.android.server.os.BugreportManagerServiceImpl: android.util.ArraySet mBugreportWhitelistedPackages>;

        $z1 = virtualinvoke $r9.<android.util.ArraySet: boolean contains(java.lang.Object)>(r17);

        if $z1 == 0 goto label8;

        r3 = r0.<com.android.server.os.BugreportManagerServiceImpl: java.lang.Object mLock>;

        entermonitor r3;

     label3:
        specialinvoke r0.<com.android.server.os.BugreportManagerServiceImpl: void startBugreportLocked(int,java.lang.String,java.io.FileDescriptor,java.io.FileDescriptor,int,android.os.IDumpstateListener,boolean)>(i3, r17, r18, r1, i0, r2, z0);

        exitmonitor r3;

     label4:
        return;

     label5:
        $r16 := @caughtexception;

     label6:
        exitmonitor r3;

     label7:
        throw $r16;

     label8:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not whitelisted to use Bugreport API");

        $r13 = new java.lang.SecurityException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label9:
        $r15 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.os.BugreportManagerServiceImpl: java.lang.String TAG> = "BugreportManagerService";

        <com.android.server.os.BugreportManagerServiceImpl: long DEFAULT_BUGREPORT_SERVICE_TIMEOUT_MILLIS> = 30000L;

        <com.android.server.os.BugreportManagerServiceImpl: java.lang.String BUGREPORT_SERVICE> = "bugreportd";

        return;
    }
}
