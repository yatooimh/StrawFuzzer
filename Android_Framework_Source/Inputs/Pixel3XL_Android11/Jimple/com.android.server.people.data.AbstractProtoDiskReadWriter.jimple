abstract class com.android.server.people.data.AbstractProtoDiskReadWriter extends java.lang.Object
{
    private static final long DEFAULT_DISK_WRITE_DELAY;
    private static final long SHUTDOWN_DISK_WRITE_TIMEOUT;
    private static final java.lang.String TAG;
    private final java.io.File mRootDir;
    private final java.util.concurrent.ScheduledExecutorService mScheduledExecutorService;
    private java.util.Map mScheduledFileDataMap;
    private java.util.concurrent.ScheduledFuture mScheduledFuture;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.server.people.data.AbstractProtoDiskReadWriter: long SHUTDOWN_DISK_WRITE_TIMEOUT> = 5000L;

        <com.android.server.people.data.AbstractProtoDiskReadWriter: long DEFAULT_DISK_WRITE_DELAY> = 120000L;

        $r0 = class "Lcom/android/server/people/data/AbstractProtoDiskReadWriter;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG> = $r1;

        return;
    }

    void <init>(java.io.File, java.util.concurrent.ScheduledExecutorService)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.io.File r1;
        java.util.concurrent.ScheduledExecutorService r2;
        android.util.ArrayMap $r3;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.concurrent.ScheduledExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap> = $r3;

        r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.io.File mRootDir> = r1;

        r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService> = r2;

        return;
    }

    private void flushScheduledData()
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.util.Iterator r1;
        java.util.Map $r2, $r3, $r5, $r7;
        boolean $z0, $z1;
        java.util.Set $r4;
        java.lang.Object $r6, $r8;
        java.lang.Throwable $r9;
        java.lang.String r10;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledFuture mScheduledFuture> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r6;

        $r7 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        virtualinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: void writeTo(java.lang.String,java.lang.Object)>(r10, $r8);

     label5:
        goto label4;

     label6:
        $r5 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledFuture mScheduledFuture> = null;

     label7:
        exitmonitor r0;

        return;

     label8:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private java.io.File getFile(java.lang.String)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.lang.String r1;
        java.io.File $r2, $r3;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        $r3 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.io.File mRootDir>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1);

        return $r2;
    }

    public static void lambda$nRGnkY2tYZySym1eNN1hpDLyKgc(com.android.server.people.data.AbstractProtoDiskReadWriter)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;

        r0 := @parameter0: com.android.server.people.data.AbstractProtoDiskReadWriter;

        specialinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: void flushScheduledData()>();

        return;
    }

    static boolean lambda$read$0(java.lang.String, java.io.File)
    {
        java.lang.String r0, $r2;
        java.io.File r1;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private java.lang.Object parseFile(java.io.File)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        android.util.AtomicFile $r1;
        com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamReader $r2;
        java.lang.Throwable $r3, $r5, $r6;
        java.lang.String $r4;
        java.io.File r7;
        java.io.FileInputStream r9;
        android.util.proto.ProtoInputStream r10;
        java.lang.Object r11;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r7 := @parameter0: java.io.File;

        $r1 = new android.util.AtomicFile;

        specialinvoke $r1.<android.util.AtomicFile: void <init>(java.io.File)>(r7);

     label01:
        r9 = virtualinvoke $r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r10 = new android.util.proto.ProtoInputStream;

        specialinvoke r10.<android.util.proto.ProtoInputStream: void <init>(java.io.InputStream)>(r9);

        $r2 = virtualinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamReader protoStreamReader()>();

        r11 = interfaceinvoke $r2.<com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamReader: java.lang.Object read(android.util.proto.ProtoInputStream)>(r10);

     label03:
        if r9 == null goto label05;

     label04:
        virtualinvoke r9.<java.io.FileInputStream: void close()>();

     label05:
        return r11;

     label06:
        $r6 := @caughtexception;

        if r9 == null goto label11;

     label07:
        virtualinvoke r9.<java.io.FileInputStream: void close()>();

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

     label10:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label11:
        throw $r6;

     label12:
        $r3 := @caughtexception;

        $r4 = <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r4, "Failed to parse protobuf file.", $r3);

        return null;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label11 to label12 with label12;
    }

    private void triggerScheduledFlushEarly()
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$nRGnkY2tYZySym1eNN1hpDLyKgc r1;
        java.util.Map $r2;
        boolean $z0, $z1;
        java.util.concurrent.ScheduledExecutorService $r3, r11;
        java.util.concurrent.ScheduledFuture $r4, $r7;
        java.util.concurrent.TimeUnit $r5;
        java.lang.Throwable $r8, $r9;
        java.lang.String $r10;
        java.util.concurrent.Future r12;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        entermonitor r0;

     label01:
        $r2 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $r3 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $z1 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z1 == 0 goto label03;

     label02:
        goto label10;

     label03:
        $r4 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledFuture mScheduledFuture>;

        if $r4 == null goto label04;

        $r7 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledFuture mScheduledFuture>;

        interfaceinvoke $r7.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1);

     label04:
        r11 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        r1 = new com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$nRGnkY2tYZySym1eNN1hpDLyKgc;

        specialinvoke r1.<com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$nRGnkY2tYZySym1eNN1hpDLyKgc: void <init>(com.android.server.people.data.AbstractProtoDiskReadWriter)>(r0);

        r12 = interfaceinvoke r11.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1);

     label05:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke r12.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(5000L, $r5);

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

     label08:
        $r10 = <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r10, "Failed to save data immediately.", $r9);

     label09:
        exitmonitor r0;

        return;

     label10:
        exitmonitor r0;

        return;

     label11:
        $r8 := @caughtexception;

        exitmonitor r0;

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.util.concurrent.ExecutionException from label05 to label06 with label07;
        catch java.util.concurrent.TimeoutException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
    }

    void delete(java.lang.String)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.io.File r1;
        boolean z0, $z1;
        java.lang.String r2, $r6, $r8, r10;
        java.util.Map $r3;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r10 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r10);

        r1 = specialinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.io.File getFile(java.lang.String)>(r10);

        z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

     label2:
        if z0 != 0 goto label3;

        exitmonitor r0;

        return;

     label3:
        $z1 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z1 != 0 goto label4;

        r2 = <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG>;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete file: ");

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r2, $r8);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    abstract com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamReader protoStreamReader();

    abstract com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamWriter protoStreamWriter();

    java.lang.Object read(java.lang.String)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.io.File[] r1;
        com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$RutlrISWNCUw_aU5FfyRnlVY9wk $r3;
        java.io.File $r4, $r5;
        int $i0, $i1;
        java.lang.Object $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r11, r12, r13;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r12 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.io.File mRootDir>;

        $r3 = new com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$RutlrISWNCUw_aU5FfyRnlVY9wk;

        specialinvoke $r3.<com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$RutlrISWNCUw_aU5FfyRnlVY9wk: void <init>(java.lang.String)>(r12);

        r1 = virtualinvoke $r4.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r3);

        if r1 == null goto label3;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        goto label3;

     label1:
        $i1 = lengthof r1;

        if $i1 <= 1 goto label2;

        r13 = <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found multiple files with the same name: ");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r13, $r11);

     label2:
        $r5 = r1[0];

        $r6 = specialinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.Object parseFile(java.io.File)>($r5);

        return $r6;

     label3:
        return null;
    }

    java.util.Map readAll()
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.io.File[] r1;
        int i0, i1;
        java.io.File r3, $r6;
        java.lang.Object r4;
        com.android.server.people.data.'-$$Lambda$AuvQl7mzpTuCl6KGI2jmWCB7WvI' $r5;
        java.lang.String $r8;
        android.util.ArrayMap r10;
        java.io.FileFilter r11;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        $r6 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.io.File mRootDir>;

        $r5 = <com.android.server.people.data._$$Lambda$AuvQl7mzpTuCl6KGI2jmWCB7WvI: com.android.server.people.data.'-$$Lambda$AuvQl7mzpTuCl6KGI2jmWCB7WvI' INSTANCE>;

        r11 = (java.io.FileFilter) $r5;

        r1 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r11);

        if r1 != null goto label1;

        return null;

     label1:
        r10 = new android.util.ArrayMap;

        specialinvoke r10.<android.util.ArrayMap: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r1[i1];

        r4 = specialinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.Object parseFile(java.io.File)>(r3);

        if r4 == null goto label3;

        $r8 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r4);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return r10;
    }

    void saveImmediately(java.lang.String, java.lang.Object)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.lang.Object r1;
        java.util.Map $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r1);

        specialinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: void triggerScheduledFlushEarly()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void scheduleSave(java.lang.String, java.lang.Object)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.util.Map $r1;
        java.util.concurrent.ScheduledExecutorService $r3, r11;
        boolean $z0;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.ScheduledFuture $r5, r10;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;
        java.lang.Object r9;
        com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$nRGnkY2tYZySym1eNN1hpDLyKgc r12;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r8 := @parameter0: java.lang.String;

        r9 := @parameter1: java.lang.Object;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.Map mScheduledFileDataMap>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r9);

        $r3 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        $z0 = interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: boolean isShutdown()>();

        if $z0 == 0 goto label3;

        $r6 = <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r6, "Worker is shutdown, failed to schedule data saving.");

     label2:
        exitmonitor r0;

        return;

     label3:
        r10 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledFuture mScheduledFuture>;

     label4:
        if r10 == null goto label5;

        exitmonitor r0;

        return;

     label5:
        r11 = r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledExecutorService mScheduledExecutorService>;

        r12 = new com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$nRGnkY2tYZySym1eNN1hpDLyKgc;

        specialinvoke r12.<com.android.server.people.data._$$Lambda$AbstractProtoDiskReadWriter$nRGnkY2tYZySym1eNN1hpDLyKgc: void <init>(com.android.server.people.data.AbstractProtoDiskReadWriter)>(r0);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = interfaceinvoke r11.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>(r12, 120000L, $r4);

        r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.util.concurrent.ScheduledFuture mScheduledFuture> = $r5;

     label6:
        exitmonitor r0;

        return;

     label7:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    void writeTo(java.lang.String, java.lang.Object)
    {
        com.android.server.people.data.AbstractProtoDiskReadWriter r0;
        java.io.FileOutputStream r1;
        android.util.proto.ProtoOutputStream r2;
        android.util.AtomicFile $r3;
        java.io.File $r4;
        com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamWriter $r5;
        java.lang.Throwable $r6, $r7;
        java.lang.String $r8, r9;
        java.lang.Object r10;

        r0 := @this: com.android.server.people.data.AbstractProtoDiskReadWriter;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.Object;

        $r3 = new android.util.AtomicFile;

        $r4 = specialinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: java.io.File getFile(java.lang.String)>(r9);

        specialinvoke $r3.<android.util.AtomicFile: void <init>(java.io.File)>($r4);

     label1:
        r1 = virtualinvoke $r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label2:
        r2 = new android.util.proto.ProtoOutputStream;

        specialinvoke r2.<android.util.proto.ProtoOutputStream: void <init>(java.io.OutputStream)>(r1);

        $r5 = virtualinvoke r0.<com.android.server.people.data.AbstractProtoDiskReadWriter: com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamWriter protoStreamWriter()>();

        interfaceinvoke $r5.<com.android.server.people.data.AbstractProtoDiskReadWriter$ProtoStreamWriter: void write(android.util.proto.ProtoOutputStream,java.lang.Object)>(r2, r10);

        virtualinvoke r2.<android.util.proto.ProtoOutputStream: void flush()>();

        virtualinvoke $r3.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label3:
        virtualinvoke $r3.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(null);

        return;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r3.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r1);

        throw $r6;

     label5:
        $r7 := @caughtexception;

        $r8 = <com.android.server.people.data.AbstractProtoDiskReadWriter: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Failed to write to protobuf file.", $r7);

        return;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }
}
