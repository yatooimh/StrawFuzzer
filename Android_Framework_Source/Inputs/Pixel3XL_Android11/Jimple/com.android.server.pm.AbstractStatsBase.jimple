public abstract class com.android.server.pm.AbstractStatsBase extends java.lang.Object
{
    private static final int WRITE_INTERVAL_MS;
    private final java.lang.String mBackgroundThreadName;
    private final java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning;
    private final java.lang.Object mFileLock;
    private final java.lang.String mFileName;
    private final java.util.concurrent.atomic.AtomicLong mLastTimeWritten;
    private final boolean mLock;

    protected void <init>(java.lang.String, java.lang.String, boolean)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.lang.String r1, r2;
        boolean z0;
        java.lang.Object $r3;
        java.util.concurrent.atomic.AtomicLong $r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;

        r0 := @this: com.android.server.pm.AbstractStatsBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.AbstractStatsBase: java.lang.Object mFileLock> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicLong mLastTimeWritten> = $r4;

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning> = $r5;

        r0.<com.android.server.pm.AbstractStatsBase: java.lang.String mFileName> = r1;

        r0.<com.android.server.pm.AbstractStatsBase: java.lang.String mBackgroundThreadName> = r2;

        r0.<com.android.server.pm.AbstractStatsBase: boolean mLock> = z0;

        return;
    }

    static void access$000(com.android.server.pm.AbstractStatsBase, java.lang.Object)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.lang.Object r1;

        r0 := @parameter0: com.android.server.pm.AbstractStatsBase;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: void writeImpl(java.lang.Object)>(r1);

        return;
    }

    static java.util.concurrent.atomic.AtomicLong access$100(com.android.server.pm.AbstractStatsBase)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @parameter0: com.android.server.pm.AbstractStatsBase;

        $r1 = r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicLong mLastTimeWritten>;

        return $r1;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$200(com.android.server.pm.AbstractStatsBase)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.pm.AbstractStatsBase;

        $r1 = r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning>;

        return $r1;
    }

    private void writeImpl(java.lang.Object)
    {
        com.android.server.pm.AbstractStatsBase r0;
        boolean $z0;
        java.lang.Throwable $r2, $r3, $r4;
        java.lang.Object r5, r6, r8;

        r0 := @this: com.android.server.pm.AbstractStatsBase;

        r5 := @parameter0: java.lang.Object;

        $z0 = r0.<com.android.server.pm.AbstractStatsBase: boolean mLock>;

        if $z0 == 0 goto label11;

        entermonitor r5;

     label01:
        r6 = r0.<com.android.server.pm.AbstractStatsBase: java.lang.Object mFileLock>;

        entermonitor r6;

     label02:
        virtualinvoke r0.<com.android.server.pm.AbstractStatsBase: void writeInternal(java.lang.Object)>(r5);

        exitmonitor r6;

     label03:
        exitmonitor r5;

     label04:
        goto label13;

     label05:
        $r2 := @caughtexception;

     label06:
        exitmonitor r6;

     label07:
        throw $r2;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r5;

     label10:
        throw $r4;

     label11:
        r8 = r0.<com.android.server.pm.AbstractStatsBase: java.lang.Object mFileLock>;

        entermonitor r8;

     label12:
        virtualinvoke r0.<com.android.server.pm.AbstractStatsBase: void writeInternal(java.lang.Object)>(r5);

        exitmonitor r8;

     label13:
        return;

     label14:
        $r3 := @caughtexception;

     label15:
        exitmonitor r8;

     label16:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected android.util.AtomicFile getFile()
    {
        com.android.server.pm.AbstractStatsBase r0;
        android.util.AtomicFile $r1;
        java.io.File $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.pm.AbstractStatsBase;

        $r1 = new android.util.AtomicFile;

        $r2 = new java.io.File;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "system");

        $r5 = r0.<com.android.server.pm.AbstractStatsBase: java.lang.String mFileName>;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r5);

        specialinvoke $r1.<android.util.AtomicFile: void <init>(java.io.File)>($r2);

        return $r1;
    }

    protected boolean maybeWriteAsync(java.lang.Object)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.lang.Object r1;
        long $l0, $l1, $l2;
        java.util.concurrent.atomic.AtomicLong $r2;
        byte $b3;
        java.util.concurrent.atomic.AtomicBoolean $r3;
        boolean $z0;
        com.android.server.pm.AbstractStatsBase$1 $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.pm.AbstractStatsBase;

        r1 := @parameter0: java.lang.Object;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r2 = r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicLong mLastTimeWritten>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l2 = $l0 - $l1;

        $b3 = $l2 cmp 1800000L;

        if $b3 >= 0 goto label1;

        return 0;

     label1:
        $r3 = r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z0 == 0 goto label2;

        $r4 = new com.android.server.pm.AbstractStatsBase$1;

        $r5 = r0.<com.android.server.pm.AbstractStatsBase: java.lang.String mBackgroundThreadName>;

        specialinvoke $r4.<com.android.server.pm.AbstractStatsBase$1: void <init>(com.android.server.pm.AbstractStatsBase,java.lang.String,java.lang.Object)>(r0, $r5, r1);

        virtualinvoke $r4.<com.android.server.pm.AbstractStatsBase$1: void start()>();

        return 1;

     label2:
        return 0;
    }

    protected void read(java.lang.Object)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.lang.Object r1, r6, r9;
        boolean $z0;
        java.util.concurrent.atomic.AtomicLong $r2;
        long $l0;
        java.lang.Throwable $r3, $r4, $r5;

        r0 := @this: com.android.server.pm.AbstractStatsBase;

        r6 := @parameter0: java.lang.Object;

        $z0 = r0.<com.android.server.pm.AbstractStatsBase: boolean mLock>;

        if $z0 == 0 goto label11;

        entermonitor r6;

     label01:
        r1 = r0.<com.android.server.pm.AbstractStatsBase: java.lang.Object mFileLock>;

        entermonitor r1;

     label02:
        virtualinvoke r0.<com.android.server.pm.AbstractStatsBase: void readInternal(java.lang.Object)>(r6);

        exitmonitor r1;

     label03:
        exitmonitor r6;

     label04:
        goto label13;

     label05:
        $r4 := @caughtexception;

     label06:
        exitmonitor r1;

     label07:
        throw $r4;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r6;

     label10:
        throw $r3;

     label11:
        r9 = r0.<com.android.server.pm.AbstractStatsBase: java.lang.Object mFileLock>;

        entermonitor r9;

     label12:
        virtualinvoke r0.<com.android.server.pm.AbstractStatsBase: void readInternal(java.lang.Object)>(r6);

        exitmonitor r9;

     label13:
        $r2 = r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicLong mLastTimeWritten>;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        return;

     label14:
        $r5 := @caughtexception;

     label15:
        exitmonitor r9;

     label16:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    protected abstract void readInternal(java.lang.Object);

    protected abstract void writeInternal(java.lang.Object);

    protected void writeNow(java.lang.Object)
    {
        com.android.server.pm.AbstractStatsBase r0;
        java.lang.Object r1;
        java.util.concurrent.atomic.AtomicLong $r2;
        long $l0;

        r0 := @this: com.android.server.pm.AbstractStatsBase;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: void writeImpl(java.lang.Object)>(r1);

        $r2 = r0.<com.android.server.pm.AbstractStatsBase: java.util.concurrent.atomic.AtomicLong mLastTimeWritten>;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.AbstractStatsBase: int WRITE_INTERVAL_MS> = 1800000;

        return;
    }
}
