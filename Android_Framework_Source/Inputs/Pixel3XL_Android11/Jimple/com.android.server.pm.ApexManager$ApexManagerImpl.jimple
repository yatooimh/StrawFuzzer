public class com.android.server.pm.ApexManager$ApexManagerImpl extends com.android.server.pm.ApexManager
{
    private java.util.Set mActiveApexInfosCache;
    private java.util.List mAllPackagesCache;
    private android.util.ArrayMap mApksInApex;
    private java.util.Set mErrorWithApkInApex;
    private final java.lang.Object mLock;
    private android.util.ArrayMap mPackageNameToApexModuleName;

    protected void <init>()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object $r1;
        android.util.ArrayMap $r2;
        android.util.ArraySet $r3;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        specialinvoke r0.<com.android.server.pm.ApexManager: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock> = $r1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex> = $r2;

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mErrorWithApkInApex> = $r3;

        return;
    }

    private static boolean isActive(android.content.pm.PackageInfo)
    {
        android.content.pm.PackageInfo r0;
        android.content.pm.ApplicationInfo $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: android.content.pm.PackageInfo;

        $r1 = r0.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r1.<android.content.pm.ApplicationInfo: int flags>;

        $i1 = $i0 & 8388608;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void scanApexPackagesInternalLocked(com.android.server.pm.parsing.PackageParser2, java.util.concurrent.ExecutorService)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0, $i1, $i2, $i3, i6, i7;
        com.android.server.pm.ParallelPackageParser$ParseResult r4;
        android.apex.IApexService $r5;
        android.util.ArrayMap $r6, $r40, r72;
        com.android.server.pm.ParallelPackageParser $r7;
        java.util.HashSet $r8, $r9;
        java.io.File $r10, $r58;
        java.lang.Object $r11;
        boolean $z0, $z2, $z3, $z4, $z6;
        java.lang.StringBuilder $r12, $r19, $r25, $r31, $r43, $r51, $r62;
        java.lang.String $r14, $r17, $r21, $r24, $r27, $r29, $r33, $r36, $r38, $r39, $r42, $r45, $r48, $r49, $r50, $r53, $r56, $r57, $r59, $r64, $r66;
        java.lang.IllegalStateException $r16, $r23, $r35, $r47, $r55;
        android.content.pm.PackageParser$PackageParserException $r18;
        com.android.server.pm.parsing.pkg.ParsedPackage $r30;
        java.util.List $r37;
        android.os.RemoteException $r61;
        java.lang.RuntimeException $r67;
        com.android.server.pm.parsing.PackageParser2 r68;
        java.util.concurrent.ExecutorService r69;
        java.util.ArrayList r71;
        android.apex.ApexInfo[] r73;
        android.apex.ApexInfo r75, r80;
        java.lang.Throwable r79;
        android.content.pm.PackageInfo r81;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r68 := @parameter0: com.android.server.pm.parsing.PackageParser2;

        r69 := @parameter1: java.util.concurrent.ExecutorService;

     label01:
        r71 = new java.util.ArrayList;

        specialinvoke r71.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache> = r71;

        r72 = new android.util.ArrayMap;

        specialinvoke r72.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName> = r72;

        $r5 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        r73 = interfaceinvoke $r5.<android.apex.IApexService: android.apex.ApexInfo[] getAllPackages()>();

     label02:
        $i1 = lengthof r73;

        if $i1 != 0 goto label03;

        return;

     label03:
        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        $r7 = new com.android.server.pm.ParallelPackageParser;

        specialinvoke $r7.<com.android.server.pm.ParallelPackageParser: void <init>(com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r68, r69);

        i0 = lengthof r73;

        i6 = 0;

     label04:
        if i6 >= i0 goto label05;

        r75 = r73[i6];

        $r58 = new java.io.File;

        $r59 = r75.<android.apex.ApexInfo: java.lang.String modulePath>;

        specialinvoke $r58.<java.io.File: void <init>(java.lang.String)>($r59);

        virtualinvoke $r7.<com.android.server.pm.ParallelPackageParser: void submit(java.io.File,int)>($r58, 32);

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, r75);

        i6 = i6 + 1;

        goto label04;

     label05:
        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        i7 = 0;

     label06:
        $i2 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        if i7 >= $i2 goto label16;

        r4 = virtualinvoke $r7.<com.android.server.pm.ParallelPackageParser: com.android.server.pm.ParallelPackageParser$ParseResult take()>();

        r79 = r4.<com.android.server.pm.ParallelPackageParser$ParseResult: java.lang.Throwable throwable>;

        $r10 = r4.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile>;

        $r11 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        r80 = (android.apex.ApexInfo) $r11;

        if r79 != null goto label12;

        $r30 = r4.<com.android.server.pm.ParallelPackageParser$ParseResult: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        r81 = staticinvoke <android.content.pm.parsing.PackageInfoWithoutStateUtils: android.content.pm.PackageInfo generate(android.content.pm.parsing.ParsingPackageRead,android.apex.ApexInfo,int)>($r30, r80, 134217920);

        if r81 == null goto label11;

        $r37 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        interfaceinvoke $r37.<java.util.List: boolean add(java.lang.Object)>(r81);

        $r40 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r39 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r38 = r80.<android.apex.ApexInfo: java.lang.String moduleName>;

        virtualinvoke $r40.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r38);

        $z2 = r80.<android.apex.ApexInfo: boolean isActive>;

        if $z2 == 0 goto label08;

        $r50 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z6 = virtualinvoke $r8.<java.util.HashSet: boolean contains(java.lang.Object)>($r50);

        if $z6 != 0 goto label07;

        $r57 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r8.<java.util.HashSet: boolean add(java.lang.Object)>($r57);

        goto label08;

     label07:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Two active packages have the same name: ");

        $r53 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = new java.lang.IllegalStateException;

        $r56 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r56);

        throw $r55;

     label08:
        $z3 = r80.<android.apex.ApexInfo: boolean isFactory>;

        if $z3 == 0 goto label10;

        $r42 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z4 = virtualinvoke $r9.<java.util.HashSet: boolean contains(java.lang.Object)>($r42);

        if $z4 != 0 goto label09;

        $r49 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r9.<java.util.HashSet: boolean add(java.lang.Object)>($r49);

        goto label10;

     label09:
        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Two factory packages have the same name: ");

        $r45 = r81.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = new java.lang.IllegalStateException;

        $r48 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r48);

        throw $r47;

     label10:
        goto label13;

     label11:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to generate package info: ");

        $r33 = r80.<android.apex.ApexInfo: java.lang.String modulePath>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = new java.lang.IllegalStateException;

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label12:
        $z0 = r79 instanceof android.content.pm.PackageParser$PackageParserException;

        if $z0 == 0 goto label15;

        $r18 = (android.content.pm.PackageParser$PackageParserException) r79;

        $i3 = $r18.<android.content.pm.PackageParser$PackageParserException: int error>;

        if $i3 != -123 goto label14;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scan apex failed, not a coreApp:");

        $r27 = r80.<android.apex.ApexInfo: java.lang.String modulePath>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ApexManager", $r29);

     label13:
        i7 = i7 + 1;

        goto label06;

     label14:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse: ");

        $r21 = r80.<android.apex.ApexInfo: java.lang.String modulePath>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = new java.lang.IllegalStateException;

        $r24 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r24, r79);

        throw $r23;

     label15:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception occurred while parsing ");

        $r14 = r80.<android.apex.ApexInfo: java.lang.String modulePath>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r17, r79);

        throw $r16;

     label16:
        return;

     label17:
        $r61 := @caughtexception;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve packages from apexservice: ");

        $r64 = virtualinvoke $r61.<android.os.RemoteException: java.lang.String toString()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

        $r66 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ApexManager", $r66);

        $r67 = new java.lang.RuntimeException;

        specialinvoke $r67.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r61);

        throw $r67;

        catch android.os.RemoteException from label01 to label02 with label17;
    }

    boolean abortStagedSession(int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0;
        android.apex.IApexService $r2;
        android.os.RemoteException $r3;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7, $r10;
        com.android.server.pm.PackageManagerException $r9;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r2.<android.apex.IApexService: void abortStagedSession(int)>(i0);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to abort staged session : ");

        $r7 = virtualinvoke $r4.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = new com.android.server.pm.PackageManagerException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r10);

        throw $r9;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to contact apexservice", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean destroyCeSnapshotsNotSpecified(int, int[])
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0;
        android.apex.IApexService $r1;
        java.lang.Exception $r2;
        java.lang.String $r3;
        int[] r4;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

        r4 := @parameter1: int[];

     label1:
        $r1 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r1.<android.apex.IApexService: void destroyCeSnapshotsNotSpecified(int,int[])>(i0, r4);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", $r3, $r2);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean destroyDeSnapshots(int)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0;
        android.apex.IApexService $r2;
        java.lang.Exception $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r2.<android.apex.IApexService: void destroyDeSnapshots(int)>(i0);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", $r4, $r3);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.apex.ApexSessionInfo[] r1;
        int i0, $i1, i2;
        android.apex.ApexSessionInfo r2;
        java.lang.StringBuilder r3;
        com.android.internal.util.IndentingPrintWriter $r4;
        android.apex.IApexService $r6;
        java.util.List $r8, $r9, $r10, $r11;
        java.lang.String $r14, r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.os.RemoteException $r17;
        java.io.PrintWriter r18;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r18 := @parameter0: java.io.PrintWriter;

        r19 := @parameter1: java.lang.String;

        $r4 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r18, "  ", 120);

     label01:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("APEX session state:");

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r6 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        r1 = interfaceinvoke $r6.<android.apex.IApexService: android.apex.ApexSessionInfo[] getSessions()>();

        i0 = lengthof r1;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label23;

        r2 = r1[i2];

     label04:
        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ID: ");

        $i1 = r2.<android.apex.ApexSessionInfo: int sessionId>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $z0 = r2.<android.apex.ApexSessionInfo: boolean isUnknown>;

        if $z0 == 0 goto label06;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: UNKNOWN");

     label05:
        goto label21;

     label06:
        $z1 = r2.<android.apex.ApexSessionInfo: boolean isVerified>;

        if $z1 == 0 goto label08;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: VERIFIED");

     label07:
        goto label21;

     label08:
        $z2 = r2.<android.apex.ApexSessionInfo: boolean isStaged>;

        if $z2 == 0 goto label10;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: STAGED");

     label09:
        goto label21;

     label10:
        $z3 = r2.<android.apex.ApexSessionInfo: boolean isActivated>;

        if $z3 == 0 goto label12;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: ACTIVATED");

     label11:
        goto label21;

     label12:
        $z4 = r2.<android.apex.ApexSessionInfo: boolean isActivationFailed>;

        if $z4 == 0 goto label14;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: ACTIVATION FAILED");

     label13:
        goto label21;

     label14:
        $z5 = r2.<android.apex.ApexSessionInfo: boolean isSuccess>;

        if $z5 == 0 goto label16;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: SUCCESS");

     label15:
        goto label21;

     label16:
        $z6 = r2.<android.apex.ApexSessionInfo: boolean isRevertInProgress>;

        if $z6 == 0 goto label18;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: REVERT IN PROGRESS");

     label17:
        goto label21;

     label18:
        $z7 = r2.<android.apex.ApexSessionInfo: boolean isReverted>;

        if $z7 == 0 goto label20;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: REVERTED");

     label19:
        goto label21;

     label20:
        $z8 = r2.<android.apex.ApexSessionInfo: boolean isRevertFailed>;

        if $z8 == 0 goto label21;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("State: REVERT FAILED");

     label21:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label22:
        i2 = i2 + 1;

        goto label03;

     label23:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r8 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        if $r8 != null goto label25;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("APEX packages have not been scanned");

     label24:
        return;

     label25:
        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active APEX packages:");

        $r9 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List getActivePackages()>();

        virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: void dumpFromPackagesCache(java.util.List,java.lang.String,com.android.internal.util.IndentingPrintWriter)>($r9, r19, $r4);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Inactive APEX packages:");

        $r10 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List getInactivePackages()>();

        virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: void dumpFromPackagesCache(java.util.List,java.lang.String,com.android.internal.util.IndentingPrintWriter)>($r10, r19, $r4);

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Factory APEX packages:");

        $r11 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List getFactoryPackages()>();

        virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: void dumpFromPackagesCache(java.util.List,java.lang.String,com.android.internal.util.IndentingPrintWriter)>($r11, r19, $r4);

     label26:
        goto label28;

     label27:
        $r17 := @caughtexception;

        virtualinvoke $r4.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Couldn\'t communicate with apexd.");

     label28:
        return;

        catch android.os.RemoteException from label01 to label02 with label27;
        catch android.os.RemoteException from label04 to label05 with label27;
        catch android.os.RemoteException from label06 to label07 with label27;
        catch android.os.RemoteException from label08 to label09 with label27;
        catch android.os.RemoteException from label10 to label11 with label27;
        catch android.os.RemoteException from label12 to label13 with label27;
        catch android.os.RemoteException from label14 to label15 with label27;
        catch android.os.RemoteException from label16 to label17 with label27;
        catch android.os.RemoteException from label18 to label19 with label27;
        catch android.os.RemoteException from label20 to label21 with label27;
        catch android.os.RemoteException from label21 to label22 with label27;
        catch android.os.RemoteException from label23 to label24 with label27;
        catch android.os.RemoteException from label25 to label26 with label27;
    }

    void dumpFromPackagesCache(java.util.List, java.lang.String, com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.util.List r1;
        java.lang.String r2, $r8, $r13, $r17, $r19, $r23, $r27, $r29;
        com.android.internal.util.IndentingPrintWriter r3;
        int i0, $i1, i2;
        android.content.pm.PackageInfo r4;
        java.lang.Object $r7;
        java.lang.StringBuilder $r10, $r14, $r20, $r24;
        android.content.pm.ApplicationInfo $r16;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i2 = 0;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label1:
        if i2 >= i0 goto label4;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (android.content.pm.PackageInfo) $r7;

        if r2 == null goto label2;

        $r29 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z2 != 0 goto label2;

        goto label3;

     label2:
        $r8 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version: ");

        $i1 = r4.<android.content.pm.PackageInfo: int versionCode>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Path: ");

        $r16 = r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r17 = $r16.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IsActive: ");

        $z0 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isActive(android.content.pm.PackageInfo)>(r4);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IsFactory: ");

        $z1 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isFactory(android.content.pm.PackageInfo)>(r4);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r27);

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        return;
    }

    public java.util.List getActiveApexInfos()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1;
        android.apex.ApexInfo[] r2;
        android.apex.ApexInfo r3;
        java.util.Set r4, $r6, $r7, $r15;
        com.android.server.utils.TimingsTraceAndSlog $r5;
        android.apex.IApexService $r8;
        int $i0, i2;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;
        android.util.ArraySet r12;
        com.android.server.pm.ApexManager$ActiveApexInfo r13;
        java.util.ArrayList r16;
        java.util.List r17;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        $r5 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke $r5.<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String,long)>("ApexManagerTiming", 262144L);

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r6 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache>;

        if $r6 != null goto label12;

        virtualinvoke $r5.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("getActiveApexInfos_noCache");

     label02:
        r12 = new android.util.ArraySet;

        specialinvoke r12.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache> = r12;

        $r8 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        r2 = interfaceinvoke $r8.<android.apex.IApexService: android.apex.ApexInfo[] getActivePackages()>();

     label03:
        i2 = 0;

     label04:
        $i0 = lengthof r2;

        if i2 >= $i0 goto label08;

     label05:
        r3 = r2[i2];

     label06:
        r4 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache>;

        r13 = new com.android.server.pm.ApexManager$ActiveApexInfo;

        specialinvoke r13.<com.android.server.pm.ApexManager$ActiveApexInfo: void <init>(android.apex.ApexInfo,com.android.server.pm.ApexManager$1)>(r3, null);

        interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r13);

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

     label10:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to retrieve packages from apexservice", $r10);

     label11:
        virtualinvoke $r5.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label12:
        $r15 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache>;

        if $r15 == null goto label14;

        r16 = new java.util.ArrayList;

        $r7 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache>;

        specialinvoke r16.<java.util.ArrayList: void <init>(java.util.Collection)>($r7);

        exitmonitor r1;

     label13:
        return r16;

     label14:
        r17 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r1;

     label15:
        return r17;

     label16:
        $r9 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch android.os.RemoteException from label02 to label03 with label09;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch android.os.RemoteException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch android.os.RemoteException from label06 to label07 with label09;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public java.lang.String getActiveApexPackageNameContainingPackage(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1, $r7, $r11, $r14, $r17;
        int i0, i1, i2, i3;
        java.lang.String r2, $r9, $r15, r20;
        android.util.ArrayMap $r3, $r5, $r6, $r10, $r12, $r13, $r16;
        java.util.List $r8;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r18;
        com.android.server.pm.parsing.pkg.AndroidPackage r19;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r19 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        if $r3 == null goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "APEX packages have not been scanned");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r19);

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex>;

        i0 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

     label04:
        i2 = 0;

     label05:
        if i2 >= i0 goto label13;

     label06:
        $r6 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r8 = (java.util.List) $r7;

        $r9 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z0 = interfaceinvoke $r8.<java.util.List: boolean contains(java.lang.Object)>($r9);

        if $z0 == 0 goto label12;

        $r10 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        r2 = (java.lang.String) $r11;

        $r12 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        i1 = virtualinvoke $r12.<android.util.ArrayMap: int size()>();

     label07:
        i3 = 0;

     label08:
        if i3 >= i1 goto label12;

     label09:
        $r13 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        $r15 = (java.lang.String) $r14;

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label11;

        $r16 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r17 = virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        r20 = (java.lang.String) $r17;

        exitmonitor r1;

     label10:
        return r20;

     label11:
        i3 = i3 + 1;

        goto label08;

     label12:
        i2 = i2 + 1;

        goto label05;

     label13:
        exitmonitor r1;

     label14:
        return null;

     label15:
        $r18 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r18;

        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    java.util.List getActivePackages()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.content.pm.PackageInfo r2;
        java.util.List $r3, $r5, $r7;
        java.util.ArrayList $r4;
        java.lang.Object $r6;
        boolean $z0, z2;
        int i0, $i1;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        if $r3 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "APEX packages have not been scanned");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label3:
        $r7 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (android.content.pm.PackageInfo) $r6;

        $z0 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isActive(android.content.pm.PackageInfo)>(r2);

        if $z0 == 0 goto label4;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return $r4;
    }

    public java.lang.String getApexModuleNameForPackageName(java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap $r2, $r3;
        java.lang.Throwable $r5;
        java.lang.String r6, r7;
        boolean z0;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        if $r2 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "APEX packages have not been scanned");

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (java.lang.String) $r4;

        exitmonitor r1;

     label5:
        return r7;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    java.util.List getApksInApex(java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1, $r4, $r7;
        android.util.ArrayMap $r2, $r3, $r5;
        java.util.List $r6, r11, r12;
        java.lang.Throwable $r8;
        java.lang.String r9, r10;
        boolean z0;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r9 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        if $r2 == null goto label03;

     label02:
        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "APEX packages have not been scanned");

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r10 = (java.lang.String) $r4;

     label05:
        if r10 != null goto label08;

     label06:
        r11 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r1;

     label07:
        return r11;

     label08:
        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex>;

        $r6 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r7 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r10, $r6);

        r12 = (java.util.List) $r7;

        exitmonitor r1;

     label09:
        return r12;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    java.util.List getFactoryPackages()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.content.pm.PackageInfo r2;
        java.util.List $r3, $r5, $r7;
        java.util.ArrayList $r4;
        java.lang.Object $r6;
        boolean $z0, z2;
        int i0, $i1;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        if $r3 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "APEX packages have not been scanned");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label3:
        $r7 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (android.content.pm.PackageInfo) $r6;

        $z0 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isFactory(android.content.pm.PackageInfo)>(r2);

        if $z0 == 0 goto label4;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return $r4;
    }

    java.util.List getInactivePackages()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.content.pm.PackageInfo r2;
        java.util.List $r3, $r5, $r7;
        java.util.ArrayList $r4;
        java.lang.Object $r6;
        boolean $z0, z2;
        int i0, $i1;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        if $r3 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "APEX packages have not been scanned");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i0 = 0;

     label3:
        $r7 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i0 >= $i1 goto label5;

        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (android.content.pm.PackageInfo) $r6;

        $z0 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isActive(android.content.pm.PackageInfo)>(r2);

        if $z0 != 0 goto label4;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        return $r4;
    }

    public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.String r1, $r5;
        int i0, $i1, $i2, i3, i4;
        java.util.List $r2, $r3, r6;
        java.lang.Object $r4;
        boolean $z0, $z1, $z2, z3, z4, z5;
        android.content.pm.PackageInfo r7;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r1 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        r6 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        z3 = 0;

        if r6 == null goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z4, "APEX packages have not been scanned");

        $i1 = i3 & 1;

        if $i1 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        $i2 = i3 & 2;

        if $i2 == 0 goto label05;

        z3 = 1;

     label05:
        i4 = 0;

        $r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label06:
        if i4 >= i0 goto label11;

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i4);

        r7 = (android.content.pm.PackageInfo) $r4;

        $r5 = r7.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label07;

        goto label10;

     label07:
        if z5 == 0 goto label08;

        $z2 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isActive(android.content.pm.PackageInfo)>(r7);

        if $z2 != 0 goto label09;

     label08:
        if z3 == 0 goto label10;

        $z1 = staticinvoke <com.android.server.pm.ApexManager$ApexManagerImpl: boolean isFactory(android.content.pm.PackageInfo)>(r7);

        if $z1 == 0 goto label10;

     label09:
        return r7;

     label10:
        i4 = i4 + 1;

        goto label06;

     label11:
        return null;
    }

    android.apex.ApexSessionInfo getStagedSessionInfo(int)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0;
        boolean z0;
        android.apex.IApexService $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.apex.ApexSessionInfo r4;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        r4 = interfaceinvoke $r1.<android.apex.IApexService: android.apex.ApexSessionInfo getStagedSessionInfo(int)>(i0);

        z0 = r4.<android.apex.ApexSessionInfo: boolean isUnknown>;

     label2:
        if z0 == 0 goto label3;

        return null;

     label3:
        return r4;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to contact apexservice", $r2);

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    boolean isApexPackage(java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.String r1, $r7;
        int i0, i1;
        boolean $z0, $z1, z2;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;
        android.content.pm.PackageInfo $r6;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: boolean isApexSupported()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        if $r2 == null goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "APEX packages have not been scanned");

        i1 = 0;

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

     label4:
        if i1 >= i0 goto label6;

        $r4 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.List mAllPackagesCache>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.content.pm.PackageInfo) $r5;

        $r7 = $r6.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        return 1;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        return 0;
    }

    boolean isApexSupported()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        return 1;
    }

    boolean isApkInApexInstallSuccess(java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1, $r4;
        android.util.ArrayMap r2, $r3;
        java.util.Set $r5;
        boolean $z1, z2, z3;
        java.lang.Throwable $r6;
        java.lang.String r7, r8;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r7 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

     label02:
        if r2 == null goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z2, "APEX packages have not been scanned");

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (java.lang.String) $r4;

     label05:
        if r8 != null goto label08;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mErrorWithApkInApex>;

        $z1 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>(r8);

        if $z1 != 0 goto label10;

     label09:
        z3 = 1;

        goto label11;

     label10:
        z3 = 0;

     label11:
        exitmonitor r1;

     label12:
        return z3;

     label13:
        $r6 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void markStagedSessionReady(int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0;
        android.apex.IApexService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r11;
        com.android.server.pm.PackageManagerException $r10;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r2.<android.apex.IApexService: void markStagedSessionReady(int)>(i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mark apexd session as ready : ");

        $r8 = virtualinvoke $r5.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new com.android.server.pm.PackageManagerException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r11);

        throw $r10;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to contact apexservice", $r3);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    void markStagedSessionSuccessful(int)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0;
        android.apex.IApexService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r2.<android.apex.IApexService: void markStagedSessionSuccessful(int)>(i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mark session ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as successful");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", $r10, $r5);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to contact apexservice", $r3);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    void registerApkInApex(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1, $r6, $r12, r19;
        java.util.Iterator r2;
        com.android.server.pm.ApexManager$ActiveApexInfo r3;
        java.util.List r4, r21;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.String $r7, $r9, $r10, $r13, $r14;
        java.io.File $r8;
        android.util.ArrayMap $r11, $r15;
        java.lang.Throwable $r17;
        com.android.server.pm.parsing.pkg.AndroidPackage r18;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r18 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache>;

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.ApexManager$ActiveApexInfo) $r6;

        $r7 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r8 = r3.<com.android.server.pm.ApexManager$ActiveApexInfo: java.io.File apexDirectory>;

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>($r9);

        if $z1 == 0 goto label06;

        $r11 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex>;

        $r10 = r3.<com.android.server.pm.ApexManager$ActiveApexInfo: java.lang.String apexModuleName>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        r4 = (java.util.List) $r12;

     label03:
        r19 = r4;

        if r4 != null goto label05;

     label04:
        r19 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r15 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mApksInApex>;

        $r14 = r3.<com.android.server.pm.ApexManager$ActiveApexInfo: java.lang.String apexModuleName>;

        virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r19);

     label05:
        $r13 = interfaceinvoke r18.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r21 = (java.util.List) r19;

        interfaceinvoke r21.<java.util.List: boolean add(java.lang.Object)>($r13);

     label06:
        goto label02;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r17 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    void reportErrorWithApkInApex(java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.lang.Object r1, $r5;
        java.util.Iterator r2;
        com.android.server.pm.ApexManager$ActiveApexInfo r3;
        java.util.Set $r4, $r9;
        boolean $z0, $z1;
        java.io.File $r6;
        java.lang.String $r7, $r8, r11;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r11 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mActiveApexInfosCache>;

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.ApexManager$ActiveApexInfo) $r5;

        $r6 = r3.<com.android.server.pm.ApexManager$ActiveApexInfo: java.io.File apexDirectory>;

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>($r7);

        if $z1 == 0 goto label3;

        $r9 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.util.Set mErrorWithApkInApex>;

        $r8 = r3.<com.android.server.pm.ApexManager$ActiveApexInfo: java.lang.String apexModuleName>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r8);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean restoreCeData(int, int, java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0, i1;
        java.lang.String r1, $r9, $r12, r13;
        android.util.ArrayMap $r2, $r3;
        java.lang.Object $r4, r14;
        android.apex.IApexService $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r10;
        java.lang.Exception $r11;
        boolean z0;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r13 := @parameter2: java.lang.String;

        r14 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r14;

     label01:
        $r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        if $r2 == null goto label03;

     label02:
        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "APEX packages have not been scanned");

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r1 = (java.lang.String) $r4;

        exitmonitor r14;

     label05:
        if r1 != null goto label06;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid apex package name: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ApexManager", $r9);

        return 0;

     label06:
        $r5 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r5.<android.apex.IApexService: void restoreCeData(int,int,java.lang.String)>(i0, i1, r1);

     label07:
        return 1;

     label08:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", $r12, $r11);

        return 0;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r14;

     label11:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    boolean revertActiveSessions()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.apex.IApexService $r1;
        java.lang.Exception $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r1.<android.apex.IApexService: void revertActiveSessions()>();

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", $r3, $r2);

        return 0;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to contact apexservice", $r4);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    void scanApexPackagesTraced(com.android.server.pm.parsing.PackageParser2, java.util.concurrent.ExecutorService)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        java.util.concurrent.ExecutorService r1;
        java.lang.Object r2;
        java.lang.Throwable $r3, $r4;
        com.android.server.pm.parsing.PackageParser2 r5;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r5 := @parameter0: com.android.server.pm.parsing.PackageParser2;

        r1 := @parameter1: java.util.concurrent.ExecutorService;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "scanApexPackagesTraced");

     label1:
        r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        specialinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: void scanApexPackagesInternalLocked(com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r5, r1);

        exitmonitor r2;

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r3;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public long snapshotCeData(int, int, java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        int i0, i1;
        java.lang.String r1, $r9, $r12, r13;
        long l2;
        android.util.ArrayMap $r2, $r3;
        java.lang.Object $r4, r14;
        android.apex.IApexService $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r10;
        java.lang.Exception $r11;
        boolean z0;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r13 := @parameter2: java.lang.String;

        r14 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: java.lang.Object mLock>;

        entermonitor r14;

     label01:
        $r2 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        if $r2 == null goto label03;

     label02:
        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean,java.lang.String)>(z0, "APEX packages have not been scanned");

        $r3 = r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.util.ArrayMap mPackageNameToApexModuleName>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r1 = (java.lang.String) $r4;

        exitmonitor r14;

     label05:
        if r1 != null goto label06;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid apex package name: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ApexManager", $r9);

        return -1L;

     label06:
        $r5 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        l2 = interfaceinvoke $r5.<android.apex.IApexService: long snapshotCeData(int,int,java.lang.String)>(i0, i1, r1);

     label07:
        return l2;

     label08:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", $r12, $r11);

        return -1L;

     label09:
        $r10 := @caughtexception;

     label10:
        exitmonitor r14;

     label11:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    android.apex.ApexInfoList submitStagedSession(android.apex.ApexSessionParams) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.apex.IApexService $r1;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        com.android.server.pm.PackageManagerException $r7;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        android.apex.ApexSessionParams r11;
        android.apex.ApexInfoList r12;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r11 := @parameter0: android.apex.ApexSessionParams;

     label1:
        r12 = new android.apex.ApexInfoList;

        specialinvoke r12.<android.apex.ApexInfoList: void <init>()>();

        $r1 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        interfaceinvoke $r1.<android.apex.IApexService: void submitStagedSession(android.apex.ApexSessionParams,android.apex.ApexInfoList)>(r11, r12);

     label2:
        return r12;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("apexd verification failed : ");

        $r5 = virtualinvoke $r2.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = new com.android.server.pm.PackageManagerException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(1, $r8);

        throw $r7;

     label4:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ApexManager", "Unable to contact apexservice", $r9);

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    boolean uninstallApex(java.lang.String)
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.apex.IApexService $r1;
        java.util.List $r2;
        java.lang.Exception $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        r4 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.pm.ApexManager$ApexManagerImpl: android.apex.IApexService waitForApexService()>();

        $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r4);

        interfaceinvoke $r1.<android.apex.IApexService: void unstagePackages(java.util.List)>($r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected android.apex.IApexService waitForApexService()
    {
        com.android.server.pm.ApexManager$ApexManagerImpl r0;
        android.os.IBinder $r1, $r2;
        android.apex.IApexService $r3;

        r0 := @this: com.android.server.pm.ApexManager$ApexManagerImpl;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder waitForService(java.lang.String)>("apexservice");

        $r2 = staticinvoke <android.os.Binder: android.os.IBinder allowBlocking(android.os.IBinder)>($r1);

        $r3 = staticinvoke <android.apex.IApexService$Stub: android.apex.IApexService asInterface(android.os.IBinder)>($r2);

        return $r3;
    }
}
