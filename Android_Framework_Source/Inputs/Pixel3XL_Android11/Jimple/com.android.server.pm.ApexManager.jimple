public abstract class com.android.server.pm.ApexManager extends java.lang.Object
{
    public static final int MATCH_ACTIVE_PACKAGE;
    static final int MATCH_FACTORY_PACKAGE;
    private static final java.lang.String TAG;
    private static final android.util.Singleton sApexManagerSingleton;

    static void <clinit>()
    {
        com.android.server.pm.ApexManager$1 $r0;

        <com.android.server.pm.ApexManager: java.lang.String TAG> = "ApexManager";

        <com.android.server.pm.ApexManager: int MATCH_FACTORY_PACKAGE> = 2;

        <com.android.server.pm.ApexManager: int MATCH_ACTIVE_PACKAGE> = 1;

        $r0 = new com.android.server.pm.ApexManager$1;

        specialinvoke $r0.<com.android.server.pm.ApexManager$1: void <init>()>();

        <com.android.server.pm.ApexManager: android.util.Singleton sApexManagerSingleton> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.server.pm.ApexManager r0;

        r0 := @this: com.android.server.pm.ApexManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.server.pm.ApexManager getInstance()
    {
        android.util.Singleton $r0;
        java.lang.Object $r1;
        com.android.server.pm.ApexManager $r2;

        $r0 = <com.android.server.pm.ApexManager: android.util.Singleton sApexManagerSingleton>;

        $r1 = virtualinvoke $r0.<android.util.Singleton: java.lang.Object get()>();

        $r2 = (com.android.server.pm.ApexManager) $r1;

        return $r2;
    }

    public static boolean isFactory(android.content.pm.PackageInfo)
    {
        android.content.pm.PackageInfo r0;
        int i0, $i1;
        android.content.pm.ApplicationInfo $r1;
        boolean z0;

        r0 := @parameter0: android.content.pm.PackageInfo;

        $r1 = r0.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        i0 = $r1.<android.content.pm.ApplicationInfo: int flags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    abstract boolean abortStagedSession(int) throws com.android.server.pm.PackageManagerException;

    public abstract boolean destroyCeSnapshotsNotSpecified(int, int[]);

    public abstract boolean destroyDeSnapshots(int);

    abstract void dump(java.io.PrintWriter, java.lang.String);

    public abstract java.util.List getActiveApexInfos();

    public abstract java.lang.String getActiveApexPackageNameContainingPackage(com.android.server.pm.parsing.pkg.AndroidPackage);

    abstract java.util.List getActivePackages();

    public abstract java.lang.String getApexModuleNameForPackageName(java.lang.String);

    abstract java.util.List getApksInApex(java.lang.String);

    abstract java.util.List getFactoryPackages();

    abstract java.util.List getInactivePackages();

    public abstract android.content.pm.PackageInfo getPackageInfo(java.lang.String, int);

    abstract android.apex.ApexSessionInfo getStagedSessionInfo(int);

    abstract boolean isApexPackage(java.lang.String);

    abstract boolean isApexSupported();

    abstract boolean isApkInApexInstallSuccess(java.lang.String);

    abstract void markStagedSessionReady(int) throws com.android.server.pm.PackageManagerException;

    abstract void markStagedSessionSuccessful(int);

    abstract void registerApkInApex(com.android.server.pm.parsing.pkg.AndroidPackage);

    abstract void reportErrorWithApkInApex(java.lang.String);

    public abstract boolean restoreCeData(int, int, java.lang.String);

    abstract boolean revertActiveSessions();

    abstract void scanApexPackagesTraced(com.android.server.pm.parsing.PackageParser2, java.util.concurrent.ExecutorService);

    public abstract long snapshotCeData(int, int, java.lang.String);

    abstract android.apex.ApexInfoList submitStagedSession(android.apex.ApexSessionParams) throws com.android.server.pm.PackageManagerException;

    abstract boolean uninstallApex(java.lang.String);
}
