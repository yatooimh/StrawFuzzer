class com.android.server.pm.CompilerStats extends com.android.server.pm.AbstractStatsBase
{
    private static final int COMPILER_STATS_VERSION;
    private static final java.lang.String COMPILER_STATS_VERSION_HEADER;
    private final java.util.Map packageStats;

    public void <init>()
    {
        com.android.server.pm.CompilerStats r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.pm.CompilerStats;

        specialinvoke r0.<com.android.server.pm.AbstractStatsBase: void <init>(java.lang.String,java.lang.String,boolean)>("package-cstats.list", "CompilerStats_DiskWriter", 0);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats> = $r1;

        return;
    }

    public com.android.server.pm.CompilerStats$PackageStats createPackageStats(java.lang.String)
    {
        com.android.server.pm.CompilerStats r0;
        java.util.Map r1, $r3;
        com.android.server.pm.CompilerStats$PackageStats r2;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.CompilerStats;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r1;

     label1:
        r2 = new com.android.server.pm.CompilerStats$PackageStats;

        specialinvoke r2.<com.android.server.pm.CompilerStats$PackageStats: void <init>(java.lang.String)>(r6);

        $r3 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r2);

        exitmonitor r1;

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void deletePackageStats(java.lang.String)
    {
        com.android.server.pm.CompilerStats r0;
        java.util.Map r1, $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.pm.CompilerStats;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.android.server.pm.CompilerStats$PackageStats getOrCreatePackageStats(java.lang.String)
    {
        com.android.server.pm.CompilerStats r0;
        java.util.Map r1, $r3;
        com.android.server.pm.CompilerStats$PackageStats r2, r7;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.CompilerStats;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r2 = (com.android.server.pm.CompilerStats$PackageStats) $r4;

     label2:
        if r2 == null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return r2;

     label5:
        r7 = virtualinvoke r0.<com.android.server.pm.CompilerStats: com.android.server.pm.CompilerStats$PackageStats createPackageStats(java.lang.String)>(r6);

        exitmonitor r1;

     label6:
        return r7;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public com.android.server.pm.CompilerStats$PackageStats getPackageStats(java.lang.String)
    {
        com.android.server.pm.CompilerStats r0;
        java.util.Map r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;
        com.android.server.pm.CompilerStats$PackageStats r6;

        r0 := @this: com.android.server.pm.CompilerStats;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (com.android.server.pm.CompilerStats$PackageStats) $r3;

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean maybeWriteAsync()
    {
        com.android.server.pm.CompilerStats r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.CompilerStats;

        $z0 = virtualinvoke r0.<com.android.server.pm.CompilerStats: boolean maybeWriteAsync(java.lang.Object)>(null);

        return $z0;
    }

    void read()
    {
        com.android.server.pm.CompilerStats r0;
        java.lang.Void $r1;

        r0 := @this: com.android.server.pm.CompilerStats;

        $r1 = (java.lang.Void) null;

        virtualinvoke r0.<com.android.server.pm.CompilerStats: void read(java.lang.Object)>($r1);

        return;
    }

    public boolean read(java.io.Reader)
    {
        com.android.server.pm.CompilerStats r0;
        java.util.Map r1, $r2;
        boolean $z0, $z1;
        java.lang.String $r5, $r6, $r7, $r10, $r13, $r14, $r15, r20, r22;
        int $i0, $i1, i4, i5;
        long $l2;
        java.lang.Exception $r16;
        java.lang.Throwable $r17;
        java.io.Reader r18;
        java.io.BufferedReader r19;
        com.android.server.pm.CompilerStats$PackageStats r21;
        java.lang.IllegalArgumentException r23, r25, r27, r29;
        java.lang.StringBuilder r24, r26, r28;

        r0 := @this: com.android.server.pm.CompilerStats;

        r18 := @parameter0: java.io.Reader;

        r1 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label02:
        r19 = new java.io.BufferedReader;

        specialinvoke r19.<java.io.BufferedReader: void <init>(java.io.Reader)>(r18);

        r20 = virtualinvoke r19.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if r20 == null goto label20;

     label04:
        $z0 = virtualinvoke r20.<java.lang.String: boolean startsWith(java.lang.String)>("PACKAGE_MANAGER__COMPILER_STATS__");

        if $z0 == 0 goto label19;

        $r6 = "PACKAGE_MANAGER__COMPILER_STATS__";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r7 = virtualinvoke r20.<java.lang.String: java.lang.String substring(int)>($i0);

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label05:
        if i4 != 1 goto label18;

     label06:
        r21 = new com.android.server.pm.CompilerStats$PackageStats;

        specialinvoke r21.<com.android.server.pm.CompilerStats$PackageStats: void <init>(java.lang.String)>("fake package");

     label07:
        r22 = virtualinvoke r19.<java.io.BufferedReader: java.lang.String readLine()>();

     label08:
        if r22 == null goto label16;

     label09:
        $z1 = virtualinvoke r22.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z1 == 0 goto label14;

        i5 = virtualinvoke r22.<java.lang.String: int indexOf(int)>(58);

     label10:
        if i5 == -1 goto label13;

        if i5 == 1 goto label13;

     label11:
        $r14 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(1, i5);

        $i1 = i5 + 1;

        $r15 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int)>($i1);

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r15);

        virtualinvoke r21.<com.android.server.pm.CompilerStats$PackageStats: void setCompileTime(java.lang.String,long)>($r14, $l2);

     label12:
        goto label07;

     label13:
        r23 = new java.lang.IllegalArgumentException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse data ");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r13 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r23;

     label14:
        r21 = virtualinvoke r0.<com.android.server.pm.CompilerStats: com.android.server.pm.CompilerStats$PackageStats getOrCreatePackageStats(java.lang.String)>(r22);

     label15:
        goto label07;

     label16:
        exitmonitor r1;

     label17:
        return 1;

     label18:
        r25 = new java.lang.IllegalArgumentException;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected version: ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r10 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r25;

     label19:
        r27 = new java.lang.IllegalArgumentException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid version line: ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r5 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw r27;

     label20:
        r29 = new java.lang.IllegalArgumentException;

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No version line found.");

        throw r29;

     label21:
        $r16 := @caughtexception;

     label22:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Error parsing compiler stats", $r16);

        exitmonitor r1;

     label23:
        return 0;

     label24:
        $r17 := @caughtexception;

     label25:
        exitmonitor r1;

     label26:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Exception from label02 to label03 with label21;
        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Exception from label04 to label05 with label21;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Exception from label06 to label07 with label21;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Exception from label07 to label08 with label21;
        catch java.lang.Throwable from label07 to label08 with label24;
        catch java.lang.Exception from label09 to label10 with label21;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Exception from label11 to label12 with label21;
        catch java.lang.Throwable from label11 to label12 with label24;
        catch java.lang.Exception from label13 to label14 with label21;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Exception from label14 to label15 with label21;
        catch java.lang.Throwable from label14 to label15 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Exception from label18 to label19 with label21;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Exception from label20 to label21 with label21;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    protected volatile void readInternal(java.lang.Object)
    {
        com.android.server.pm.CompilerStats r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: com.android.server.pm.CompilerStats;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<com.android.server.pm.CompilerStats: void readInternal(java.lang.Void)>($r2);

        return;
    }

    protected void readInternal(java.lang.Void)
    {
        com.android.server.pm.CompilerStats r0;
        android.util.AtomicFile r1;
        java.io.InputStreamReader r2;
        java.io.FileInputStream $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.Void r6;
        java.io.BufferedReader r7, r8, r9;

        r0 := @this: com.android.server.pm.CompilerStats;

        r6 := @parameter0: java.lang.Void;

        r1 = virtualinvoke r0.<com.android.server.pm.CompilerStats: android.util.AtomicFile getFile()>();

        r7 = null;

        r8 = null;

     label01:
        r9 = new java.io.BufferedReader;

     label02:
        r7 = null;

        r8 = null;

     label03:
        r2 = new java.io.InputStreamReader;

     label04:
        r7 = null;

        r8 = null;

     label05:
        $r3 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        specialinvoke r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r3);

     label06:
        r7 = null;

        r8 = null;

     label07:
        specialinvoke r9.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2);

     label08:
        r7 = r9;

        r8 = r9;

     label09:
        virtualinvoke r0.<com.android.server.pm.CompilerStats: boolean read(java.io.Reader)>(r9);

     label10:
        goto label13;

     label11:
        $r5 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r7);

        throw $r5;

     label12:
        $r4 := @caughtexception;

        r9 = r8;

     label13:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r9);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.io.FileNotFoundException from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.io.FileNotFoundException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.io.FileNotFoundException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.io.FileNotFoundException from label09 to label10 with label12;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public void setPackageStats(java.lang.String, com.android.server.pm.CompilerStats$PackageStats)
    {
        com.android.server.pm.CompilerStats r0;
        com.android.server.pm.CompilerStats$PackageStats r1;
        java.util.Map r2, $r3;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.CompilerStats;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.server.pm.CompilerStats$PackageStats;

        r2 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void write(java.io.Writer)
    {
        com.android.server.pm.CompilerStats r0;
        java.util.Iterator r1, r2;
        java.lang.StringBuilder r3;
        com.android.internal.util.FastPrintWriter $r4;
        java.util.Map $r5, $r8, $r10, r25, r27;
        java.util.Collection $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r12, $r14, $r18;
        java.lang.String $r9, $r15, $r20;
        java.util.Set $r11;
        java.lang.Throwable $r21, $r22;
        java.io.Writer r23;
        com.android.server.pm.CompilerStats$PackageStats r26;
        java.util.Map$Entry r28;

        r0 := @this: com.android.server.pm.CompilerStats;

        r23 := @parameter0: java.io.Writer;

        $r4 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r4.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer)>(r23);

        virtualinvoke $r4.<com.android.internal.util.FastPrintWriter: void print(java.lang.String)>("PACKAGE_MANAGER__COMPILER_STATS__");

        virtualinvoke $r4.<com.android.internal.util.FastPrintWriter: void println(int)>(1);

        r25 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        entermonitor r25;

     label01:
        $r5 = r0.<com.android.server.pm.CompilerStats: java.util.Map packageStats>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.android.server.pm.CompilerStats$PackageStats) $r7;

        r27 = staticinvoke <com.android.server.pm.CompilerStats$PackageStats: java.util.Map access$000(com.android.server.pm.CompilerStats$PackageStats)>(r26);

        entermonitor r27;

     label03:
        $r8 = staticinvoke <com.android.server.pm.CompilerStats$PackageStats: java.util.Map access$000(com.android.server.pm.CompilerStats$PackageStats)>(r26);

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        $r9 = virtualinvoke r26.<com.android.server.pm.CompilerStats$PackageStats: java.lang.String getPackageName()>();

        virtualinvoke $r4.<com.android.internal.util.FastPrintWriter: void println(java.lang.String)>($r9);

        $r10 = staticinvoke <com.android.server.pm.CompilerStats$PackageStats: java.util.Map access$000(com.android.server.pm.CompilerStats$PackageStats)>(r26);

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.util.Map$Entry) $r12;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r14 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r15 = (java.lang.String) $r14;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r18 = interfaceinvoke r28.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.android.internal.util.FastPrintWriter: void println(java.lang.String)>($r20);

     label05:
        goto label04;

     label06:
        exitmonitor r27;

     label07:
        goto label02;

     label08:
        $r22 := @caughtexception;

     label09:
        exitmonitor r27;

     label10:
        throw $r22;

     label11:
        exitmonitor r25;

     label12:
        virtualinvoke $r4.<com.android.internal.util.FastPrintWriter: void flush()>();

        return;

     label13:
        $r21 := @caughtexception;

     label14:
        exitmonitor r25;

     label15:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    protected volatile void writeInternal(java.lang.Object)
    {
        com.android.server.pm.CompilerStats r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: com.android.server.pm.CompilerStats;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<com.android.server.pm.CompilerStats: void writeInternal(java.lang.Void)>($r2);

        return;
    }

    protected void writeInternal(java.lang.Void)
    {
        com.android.server.pm.CompilerStats r0;
        android.util.AtomicFile r1;
        java.io.OutputStreamWriter r2;
        java.lang.Throwable $r3;
        java.lang.Void r4;
        java.io.FileOutputStream r5, r6;

        r0 := @this: com.android.server.pm.CompilerStats;

        r4 := @parameter0: java.lang.Void;

        r1 = virtualinvoke r0.<com.android.server.pm.CompilerStats: android.util.AtomicFile getFile()>();

        r5 = null;

     label01:
        r6 = virtualinvoke r1.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r5 = r6;

     label03:
        r2 = new java.io.OutputStreamWriter;

     label04:
        r5 = r6;

     label05:
        specialinvoke r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r6);

     label06:
        r5 = r6;

     label07:
        virtualinvoke r0.<com.android.server.pm.CompilerStats: void write(java.io.Writer)>(r2);

     label08:
        r5 = r6;

     label09:
        virtualinvoke r2.<java.io.OutputStreamWriter: void flush()>();

     label10:
        r5 = r6;

     label11:
        virtualinvoke r1.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r6);

     label12:
        goto label15;

     label13:
        $r3 := @caughtexception;

        if r5 == null goto label14;

        virtualinvoke r1.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r5);

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to write compiler stats", $r3);

     label15:
        return;

        catch java.io.IOException from label01 to label02 with label13;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label13;
    }

    void writeNow()
    {
        com.android.server.pm.CompilerStats r0;

        r0 := @this: com.android.server.pm.CompilerStats;

        virtualinvoke r0.<com.android.server.pm.CompilerStats: void writeNow(java.lang.Object)>(null);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.CompilerStats: java.lang.String COMPILER_STATS_VERSION_HEADER> = "PACKAGE_MANAGER__COMPILER_STATS__";

        <com.android.server.pm.CompilerStats: int COMPILER_STATS_VERSION> = 1;

        return;
    }
}
