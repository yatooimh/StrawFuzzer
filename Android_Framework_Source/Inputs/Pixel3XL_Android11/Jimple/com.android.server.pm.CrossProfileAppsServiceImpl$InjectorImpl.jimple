class com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl extends java.lang.Object implements com.android.server.pm.CrossProfileAppsServiceImpl$Injector
{
    private android.content.Context mContext;

    public void <init>(android.content.Context)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.content.Context r1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl: android.content.Context mContext> = r1;

        return;
    }

    public int checkComponentPermission(java.lang.String, int, int, boolean)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        java.lang.String r1;
        int i0, i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i2 = staticinvoke <android.app.ActivityManager: int checkComponentPermission(java.lang.String,int,int,boolean)>(r1, i0, i1, z0);

        return $i2;
    }

    public long clearCallingIdentity()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        long $l0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        return $l0;
    }

    public android.app.ActivityManagerInternal getActivityManagerInternal()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        java.lang.Object $r1;
        android.app.ActivityManagerInternal $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r2 = (android.app.ActivityManagerInternal) $r1;

        return $r2;
    }

    public com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        java.lang.Object $r1;
        com.android.server.wm.ActivityTaskManagerInternal $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r2 = (com.android.server.wm.ActivityTaskManagerInternal) $r1;

        return $r2;
    }

    public android.app.AppOpsManager getAppOpsManager()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.AppOpsManager $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r3 = (android.app.AppOpsManager) $r2;

        return $r3;
    }

    public int getCallingPid()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        int $i0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        return $i0;
    }

    public int getCallingUid()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        int $i0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        return $i0;
    }

    public android.os.UserHandle getCallingUserHandle()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.os.UserHandle $r1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        return $r1;
    }

    public int getCallingUserId()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        int $i0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        return $i0;
    }

    public android.app.admin.DevicePolicyManagerInternal getDevicePolicyManagerInternal()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        java.lang.Object $r1;
        android.app.admin.DevicePolicyManagerInternal $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        $r2 = (android.app.admin.DevicePolicyManagerInternal) $r1;

        return $r2;
    }

    public android.content.pm.IPackageManager getIPackageManager()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.content.pm.IPackageManager $r1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        return $r1;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        return $r2;
    }

    public android.content.pm.PackageManagerInternal getPackageManagerInternal()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        java.lang.Object $r1;
        android.content.pm.PackageManagerInternal $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r2 = (android.content.pm.PackageManagerInternal) $r1;

        return $r2;
    }

    public android.os.UserManager getUserManager()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.UserManager $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r3 = (android.os.UserManager) $r2;

        return $r3;
    }

    public void killUid(int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        staticinvoke <com.android.server.pm.permission.PermissionManagerService: void killUid(int,int,java.lang.String)>($i1, $i2, "permissions revoked");

        return;
    }

    public void restoreCallingIdentity(long)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        long l0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        l0 := @parameter0: long;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;
    }

    public void sendBroadcastAsUser(android.content.Intent, android.os.UserHandle)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, r2);

        return;
    }

    public final java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        com.android.internal.util.FunctionalUtils$ThrowingSupplier r1;
        java.lang.Object $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        r1 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingSupplier;

        $r2 = staticinvoke <android.os.Binder: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>(r1);

        return $r2;
    }

    public void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl r0;
        com.android.internal.util.FunctionalUtils$ThrowingRunnable r1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        r1 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingRunnable;

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>(r1);

        return;
    }
}
