public class com.android.server.pm.CrossProfileAppsServiceImpl extends android.content.pm.ICrossProfileApps$Stub
{
    private static final java.lang.String TAG;
    private android.content.Context mContext;
    private com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector;
    private final com.android.server.pm.CrossProfileAppsServiceImpl$LocalService mLocalService;

    public void <init>(android.content.Context)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.Context r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl;

        specialinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$InjectorImpl: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void <init>(android.content.Context,com.android.server.pm.CrossProfileAppsServiceImpl$Injector)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, com.android.server.pm.CrossProfileAppsServiceImpl$Injector)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.Context r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$LocalService $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.pm.CrossProfileAppsServiceImpl$Injector;

        specialinvoke r0.<android.content.pm.ICrossProfileApps$Stub: void <init>()>();

        $r3 = new com.android.server.pm.CrossProfileAppsServiceImpl$LocalService;

        specialinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$LocalService: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl)>(r0);

        r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$LocalService mLocalService> = $r3;

        r0.<com.android.server.pm.CrossProfileAppsServiceImpl: android.content.Context mContext> = r1;

        r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector> = r2;

        return;
    }

    static com.android.server.pm.CrossProfileAppsServiceImpl$Injector access$000(com.android.server.pm.CrossProfileAppsServiceImpl)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1;

        r0 := @parameter0: com.android.server.pm.CrossProfileAppsServiceImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        return $r1;
    }

    static boolean access$100(com.android.server.pm.CrossProfileAppsServiceImpl, java.lang.String, int, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasInteractAcrossProfilesPermission(java.lang.String,int,int)>(r1, i0, i1);

        return $z0;
    }

    static java.util.List access$200(com.android.server.pm.CrossProfileAppsServiceImpl, java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0;
        java.util.List $r2;

        r0 := @parameter0: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfilesUnchecked(java.lang.String,int)>(r1, i0);

        return $r2;
    }

    private boolean appDeclaresCrossProfileAttribute(int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1;
        android.content.pm.PackageManagerInternal $r2;
        com.android.server.pm.parsing.pkg.AndroidPackage $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = interfaceinvoke $r1.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int)>(i0);

        $z0 = interfaceinvoke $r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isCrossProfile()>();

        return $z0;
    }

    private boolean canRequestInteractAcrossProfilesUnchecked(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r6;
        int[] r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3, $r5;
        android.os.UserManager $r4;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.os.UserManager getUserManager()>();

        $r5 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r5.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        r2 = virtualinvoke $r4.<android.os.UserManager: int[] getEnabledProfileIds(int)>($i0);

        $i1 = lengthof r2;

        if $i1 >= 2 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isProfileOwner(java.lang.String,int[])>(r1, r2);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r6 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPermission(int)>(93);

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasRequestedAppOpPermission(java.lang.String,java.lang.String)>($r6, r1);

        return $z1;
    }

    private boolean currentModeEquals(int, java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1;
        java.lang.String r1, r2;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$HQp2BeBy_esshdSMayqT2rKlavg $r3;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 = staticinvoke <android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>("android.permission.INTERACT_ACROSS_PROFILES");

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$HQp2BeBy_esshdSMayqT2rKlavg;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$HQp2BeBy_esshdSMayqT2rKlavg: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int,java.lang.String,int,java.lang.String)>(r0, i0, r2, i1, r1);

        $r5 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private java.util.List findAllPackageNames()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1, $r3, $r4;
        android.content.pm.PackageManagerInternal $r2;
        int $i0, $i1;
        java.util.List $r5, $r11;
        java.util.stream.Stream $r6, $r8;
        com.android.server.pm.'-$$Lambda$CrossProfileAppsServiceImpl$J_ESRc306ndKYXbNY3e46XQq1Zs' $r7;
        java.util.stream.Collector $r9;
        java.lang.Object $r10;
        java.util.function.Function r12;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = interfaceinvoke $r1.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i1 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $r5 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.util.List getInstalledApplications(int,int,int)>(0, $i0, $i1);

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.stream.Stream stream()>();

        $r7 = <com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$J_ESRc306ndKYXbNY3e46XQq1Zs: com.android.server.pm.'-$$Lambda$CrossProfileAppsServiceImpl$J_ESRc306ndKYXbNY3e46XQq1Zs' INSTANCE>;

        r12 = (java.util.function.Function) $r7;

        $r8 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r12);

        $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9);

        $r11 = (java.util.List) $r10;

        return $r11;
    }

    private java.util.List findBroadcastReceiversForUser(android.content.Intent, android.os.UserHandle)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        android.content.pm.PackageManager $r4;
        java.util.List $r5;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.os.UserHandle;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: java.util.List queryBroadcastReceiversAsUser(android.content.Intent,int,android.os.UserHandle)>(r1, 0, r2);

        return $r5;
    }

    private java.util.List getTargetUserProfilesUnchecked(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$ZwEbVtiAVN8XYZYxg44xuGkFKak $r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        java.lang.Object $r4;
        java.util.List $r5;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$ZwEbVtiAVN8XYZYxg44xuGkFKak;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$ZwEbVtiAVN8XYZYxg44xuGkFKak: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int,java.lang.String)>(r0, i0, r1);

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.util.List) $r4;

        return $r5;
    }

    private boolean hasCallerGotInteractAcrossProfilesPermission(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i1 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingPid()>();

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasInteractAcrossProfilesPermission(java.lang.String,int,int)>(r1, $i0, $i1);

        return $z0;
    }

    private boolean hasInteractAcrossProfilesPermission(java.lang.String, int, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1, $i2;
        boolean z0, $z1, z2;
        android.content.Context $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.INTERACT_ACROSS_USERS_FULL", i0);

        z2 = 1;

        if z0 != 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.INTERACT_ACROSS_USERS", i0);

        if $z1 == 0 goto label1;

        goto label4;

     label1:
        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: android.content.Context mContext>;

        $i2 = staticinvoke <android.content.PermissionChecker: int checkPermissionForPreflight(android.content.Context,java.lang.String,int,int,java.lang.String)>($r2, "android.permission.INTERACT_ACROSS_PROFILES", i1, i0, r1);

        if $i2 != 0 goto label2;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;

     label4:
        return 1;
    }

    private boolean hasOtherProfileWithPackageInstalled(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$mdLHcsVQVlAc0piNfMSuwChvy8Y $r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$mdLHcsVQVlAc0piNfMSuwChvy8Y;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$mdLHcsVQVlAc0piNfMSuwChvy8Y: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int,java.lang.String)>(r0, i0, r1);

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean hasRequestedAppOpPermission(java.lang.String, java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, r6;
        boolean z0;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.content.pm.IPackageManager $r3;
        java.lang.String[] $r4;
        android.os.RemoteException $r5;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.IPackageManager getIPackageManager()>();

        $r4 = interfaceinvoke $r3.<android.content.pm.IPackageManager: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>(r6);

        z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r4, r1);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("CrossProfileAppsService", "PackageManager dead. Cannot get permission info");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean isCallingUserAManagedProfile()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r1.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isManagedProfile(int)>($i0);

        return $z0;
    }

    private boolean isCrossProfilePackageWhitelisted(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$i8pCn3vFy03m7u0vRgPEFDJBRZ8 $r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$i8pCn3vFy03m7u0vRgPEFDJBRZ8;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$i8pCn3vFy03m7u0vRgPEFDJBRZ8: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,java.lang.String)>(r0, r1);

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isCrossProfilePackageWhitelistedByDefault(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$CivmBEBoyHzUSmV21ug5oSEiuXM $r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$CivmBEBoyHzUSmV21ug5oSEiuXM;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$CivmBEBoyHzUSmV21ug5oSEiuXM: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,java.lang.String)>(r0, r1);

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r2);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isManagedProfile(int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$_QVEx6li6tfJWaDf54O7jr0fE5Q $r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r1 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$_QVEx6li6tfJWaDf54O7jr0fE5Q;

        specialinvoke $r1.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$_QVEx6li6tfJWaDf54O7jr0fE5Q: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int)>(r0, i0);

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isPackageEnabled(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2, $r4;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$35r_Eh7boIF7EPFqH7bKXyZYEDo $r3;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i1 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$35r_Eh7boIF7EPFqH7bKXyZYEDo;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$35r_Eh7boIF7EPFqH7bKXyZYEDo: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,java.lang.String,int,int)>(r0, r1, i1, i0);

        $r5 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isPackageInstalled(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2, $r4;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$tXd1Af3yqns6wmZqxn7GMaUn_I4 $r3;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i1 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$tXd1Af3yqns6wmZqxn7GMaUn_I4;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$tXd1Af3yqns6wmZqxn7GMaUn_I4: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,java.lang.String,int,int)>(r0, r1, i1, i0);

        $r5 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        $r6 = (java.lang.Boolean) $r5;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean isPermissionGranted(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector r2;
        boolean z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        z0 = 1;

        $i1 = interfaceinvoke r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int checkComponentPermission(java.lang.String,int,int,boolean)>(r1, i0, -1, 1);

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isPlatformSignedAppWithAutomaticProfilesPermission(java.lang.String, int[])
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int[] r2;
        int i0, i1, i2, i3;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        android.content.pm.PackageManagerInternal $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        i2 = r2[i1];

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        i3 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: int getPackageUidInternal(java.lang.String,int,int)>(r1, 0, i2);

        if i3 != -1 goto label2;

        goto label3;

     label2:
        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.INTERACT_ACROSS_PROFILES", i3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return 0;
    }

    private boolean isPlatformSignedAppWithNonUserConfigurablePermission(java.lang.String, int[])
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int[] r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isCrossProfilePackageWhitelistedByDefault(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPlatformSignedAppWithAutomaticProfilesPermission(java.lang.String,int[])>(r1, r2);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isProfileOwner(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r6;
        int i0;
        android.content.ComponentName r2;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$SkoXDY_btTNmVcedeaMo_QLx9_s $r3;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$SkoXDY_btTNmVcedeaMo_QLx9_s;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$SkoXDY_btTNmVcedeaMo_QLx9_s: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int)>(r0, i0);

        $r5 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r3);

        r2 = (android.content.ComponentName) $r5;

        if r2 != null goto label1;

        return 0;

     label1:
        $r6 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    private boolean isProfileOwner(java.lang.String, int[])
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int[] r2;
        int i0, $i1, i2;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $i1 = r2[i2];

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isProfileOwner(java.lang.String,int)>(r1, $i1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isSameProfileGroup(int, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$l_HDH615_tUbj1olMg0_KDh14VY $r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        java.lang.Object $r3;
        java.lang.Boolean $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r1 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$l_HDH615_tUbj1olMg0_KDh14VY;

        specialinvoke $r1.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$l_HDH615_tUbj1olMg0_KDh14VY: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int,int)>(r0, i0, i1);

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: java.lang.Object withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingSupplier)>($r1);

        $r4 = (java.lang.Boolean) $r3;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    static java.lang.String lambda$findAllPackageNames$11(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        java.lang.String $r1;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $r1 = r0.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        return $r1;
    }

    public static void lambda$wMVevLD4FZ1cL73xmtbSkTJK9d8(com.android.server.pm.CrossProfileAppsServiceImpl, java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void resetInteractAcrossProfilesAppOp(java.lang.String)>(r1);

        return;
    }

    private void logStartActivityByIntent(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        android.app.admin.DevicePolicyEventLogger $r2, $r4, $r5;
        java.lang.String[] $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(150);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r1;

        $r4 = virtualinvoke $r2.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r3);

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isCallingUserAManagedProfile()>();

        $r5 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>($z0);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    private void maybeKillUid(java.lang.String, int, boolean)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0;
        boolean z0, $z1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 != 0 goto label1;

        return;

     label1:
        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasInteractAcrossProfilesPermission(java.lang.String,int,int)>(r1, i0, -1);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: void killUid(int)>(i0);

        return;
    }

    private void maybeLogSetInteractAcrossProfilesAppOp(java.lang.String, int, int, boolean, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1, i2, $i3;
        boolean z0, $z1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.app.admin.DevicePolicyEventLogger $r3, $r5, $r6, $r7;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        if z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        if i1 == $i3 goto label2;

        return;

     label2:
        $r3 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(139);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r1;

        $r5 = virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r4);

        $r6 = virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setInt(int)>(i0);

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean appDeclaresCrossProfileAttribute(int)>(i2);

        $r7 = virtualinvoke $r6.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setBoolean(boolean)>($z1);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

        return;
    }

    private void resetInteractAcrossProfilesAppOp(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r3, $r8;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canConfigureInteractAcrossProfiles(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not resetting app-op for package ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since it is still configurable by users.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("CrossProfileAppsService", $r8);

        return;

     label1:
        $r3 = staticinvoke <android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>("android.permission.INTERACT_ACROSS_PROFILES");

        $i0 = staticinvoke <android.app.AppOpsManager: int opToDefaultMode(java.lang.String)>($r3);

        virtualinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOp(java.lang.String,int)>(r1, $i0);

        return;
    }

    private void sendCanInteractAcrossProfilesChangedBroadcast(java.lang.String, int, android.os.UserHandle)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        android.os.UserHandle r1;
        java.util.Iterator r2;
        android.content.Intent $r3, r14;
        boolean $z0, $z1;
        java.util.List $r5;
        java.lang.Object $r6;
        android.content.pm.ResolveInfo $r7;
        android.content.pm.ComponentInfo $r8;
        android.content.ComponentName $r9;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r11;
        java.lang.String r13;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r13 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.UserHandle;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.action.CAN_INTERACT_ACROSS_PROFILES_CHANGED");

        r14 = virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r13);

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean appDeclaresCrossProfileAttribute(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r14.<android.content.Intent: android.content.Intent addFlags(int)>(285212672);

        goto label2;

     label1:
        virtualinvoke r14.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

     label2:
        $r5 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List findBroadcastReceiversForUser(android.content.Intent,android.os.UserHandle)>(r14, r1);

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.content.pm.ResolveInfo) $r6;

        $r8 = virtualinvoke $r7.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r9 = virtualinvoke $r8.<android.content.pm.ComponentInfo: android.content.ComponentName getComponentName()>();

        virtualinvoke r14.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r9);

        $r11 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        interfaceinvoke $r11.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r14, r1);

        goto label3;

     label4:
        return;
    }

    private void setInteractAcrossProfilesAppOpForUser(java.lang.String, int, int, boolean)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r10;
        int i0, i1;
        boolean z0;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

     label1:
        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOpForUserOrThrow(java.lang.String,int,int,boolean)>(r1, i0, i1, z0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing package ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ID ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("CrossProfileAppsService", $r10, $r4);

     label4:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void setInteractAcrossProfilesAppOpForUserOrThrow(java.lang.String, int, int, boolean) throws android.content.pm.PackageManager$NameNotFoundException
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r18;
        int i0, i1, i2, $i3;
        boolean z0, z1, $z2, $z3;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3, $r5, $r6, $r10;
        android.content.pm.PackageManager $r4;
        android.app.AppOpsManager $r7;
        android.os.UserHandle $r8;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$W6cmC5S7q8PE8b0EVkhmtq131dY $r9;
        java.lang.StringBuilder $r11;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManager getPackageManager()>();

        i2 = virtualinvoke $r4.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int,int)>(r1, 0, i1);

        $z2 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean currentModeEquals(int,java.lang.String,int)>(i0, r1, i2);

        if $z2 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to set mode to existing value of ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ID ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("CrossProfileAppsService", $r18);

        return;

     label1:
        z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasInteractAcrossProfilesPermission(java.lang.String,int,int)>(r1, i2, -1);

        $r5 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i3 = interfaceinvoke $r5.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $z3 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES", $i3);

        if $z3 == 0 goto label2;

        $r10 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r9 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$W6cmC5S7q8PE8b0EVkhmtq131dY;

        specialinvoke $r9.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$W6cmC5S7q8PE8b0EVkhmtq131dY: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int,java.lang.String,int)>(r0, i2, r1, i0);

        interfaceinvoke $r10.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r9);

        goto label3;

     label2:
        $r6 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r7 = interfaceinvoke $r6.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.AppOpsManager getAppOpsManager()>();

        virtualinvoke $r7.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(93, i2, r1, i0);

     label3:
        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void maybeKillUid(java.lang.String,int,boolean)>(r1, i2, z1);

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void sendCanInteractAcrossProfilesChangedBroadcast(java.lang.String,int,android.os.UserHandle)>(r1, i2, $r8);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void maybeLogSetInteractAcrossProfilesAppOp(java.lang.String,int,int,boolean,int)>(r1, i0, i1, z0, i2);

        return;
    }

    private void setInteractAcrossProfilesAppOpUnchecked(java.lang.String, int, boolean)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r7;
        int i0, i1, i3, i4, i5;
        boolean z0, $z1, $z2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2, $r3;
        java.lang.StringBuilder $r4;
        android.os.UserManager r9;
        int[] r10;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 != 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canConfigureInteractAcrossProfiles(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to turn on the appop for interacting across profiles for invalid app ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("CrossProfileAppsService", $r7);

        return;

     label1:
        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        r9 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.os.UserManager getUserManager()>();

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i3 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        i4 = 0;

        r10 = virtualinvoke r9.<android.os.UserManager: int[] getProfileIds(int,boolean)>(i3, 0);

        i5 = lengthof r10;

     label2:
        if i4 >= i5 goto label5;

        i1 = r10[i4];

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPackageInstalled(java.lang.String,int)>(r1, i1);

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOpForUser(java.lang.String,int,int,boolean)>(r1, i0, i1, z0);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        return;
    }

    private void verifyActivityCanHandleIntent(android.content.Intent, int, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.Intent r1;
        int i0, i1;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$0Ehy54esDzebqEX4vSnU4OTdHQk $r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$0Ehy54esDzebqEX4vSnU4OTdHQk;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$0Ehy54esDzebqEX4vSnU4OTdHQk: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,android.content.Intent,int,int)>(r0, r1, i0, i1);

        interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r2);

        return;
    }

    private void verifyActivityCanHandleIntentAndExported(android.content.Intent, android.content.ComponentName, int, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.Intent r1;
        android.content.ComponentName r2;
        int i0, i1;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$OF_Fe6H4qgx502m4OuO6sVwmhH8 $r3;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r4;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$OF_Fe6H4qgx502m4OuO6sVwmhH8;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$OF_Fe6H4qgx502m4OuO6sVwmhH8: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,android.content.Intent,int,int,android.content.ComponentName)>(r0, r1, i0, i1, r2);

        interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        return;
    }

    private void verifyCallingPackage(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2, $r4;
        android.app.AppOpsManager $r3;
        int $i0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.AppOpsManager getAppOpsManager()>();

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i0, r1);

        return;
    }

    public boolean canConfigureInteractAcrossProfiles(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r3;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        int $i0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasOtherProfileWithPackageInstalled(java.lang.String,int)>(r1, $i0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r3 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPermission(int)>(93);

        $z2 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasRequestedAppOpPermission(java.lang.String,java.lang.String)>($r3, r1);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isCrossProfilePackageWhitelisted(java.lang.String)>(r1);

        return $z3;
    }

    public boolean canInteractAcrossProfiles(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        int $i0;
        java.util.List $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfilesUnchecked(java.lang.String,int)>(r1, $i0);

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasCallerGotInteractAcrossProfilesPermission(java.lang.String)>(r1);

        return $z1;
    }

    public boolean canRequestInteractAcrossProfiles(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean canRequestInteractAcrossProfilesUnchecked(java.lang.String)>(r1);

        return $z0;
    }

    public boolean canUserAttemptToConfigureInteractAcrossProfiles(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, $r4;
        int i0, $i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2, $r3;
        boolean $z0, $z1, $z2, z3;
        android.os.UserManager r5;
        int[] r6;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        r5 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.os.UserManager getUserManager()>();

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i0 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        z3 = 0;

        r6 = virtualinvoke r5.<android.os.UserManager: int[] getProfileIds(int,boolean)>(i0, 0);

        $i1 = lengthof r6;

        if $i1 >= 2 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isProfileOwner(java.lang.String,int[])>(r1, r6);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r4 = staticinvoke <android.app.AppOpsManager: java.lang.String opToPermission(int)>(93);

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasRequestedAppOpPermission(java.lang.String,java.lang.String)>($r4, r1);

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPlatformSignedAppWithNonUserConfigurablePermission(java.lang.String,int[])>(r1, r6);

        if $z2 != 0 goto label3;

        z3 = 1;

        goto label3;

     label3:
        return z3;
    }

    public void clearInteractAcrossProfilesAppOps()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        java.lang.String $r1;
        java.util.List $r2;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$iCdID9mpWwEF8zjU8plHANZ1ZyI $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        $r1 = staticinvoke <android.app.AppOpsManager: java.lang.String permissionToOp(java.lang.String)>("android.permission.INTERACT_ACROSS_PROFILES");

        i0 = staticinvoke <android.app.AppOpsManager: int opToDefaultMode(java.lang.String)>($r1);

        $r2 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List findAllPackageNames()>();

        $r3 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$iCdID9mpWwEF8zjU8plHANZ1ZyI;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$iCdID9mpWwEF8zjU8plHANZ1ZyI: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl,int)>(r0, i0);

        interfaceinvoke $r2.<java.util.List: void forEach(java.util.function.Consumer)>($r3);

        return;
    }

    android.content.pm.CrossProfileAppsInternal getLocalService()
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        com.android.server.pm.CrossProfileAppsServiceImpl$LocalService $r1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$LocalService mLocalService>;

        return $r1;
    }

    public java.util.List getTargetUserProfiles(java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        android.app.admin.DevicePolicyEventLogger $r3, $r5;
        java.lang.String[] $r4;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r6;
        int $i0;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $r3 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(125);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r1;

        $r5 = virtualinvoke $r3.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r4);

        virtualinvoke $r5.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r6 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $i0 = interfaceinvoke $r6.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $r7 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfilesUnchecked(java.lang.String,int)>(r1, $i0);

        return $r7;
    }

    public void lambda$clearInteractAcrossProfilesAppOps$10$CrossProfileAppsServiceImpl(int, java.lang.String)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOp(java.lang.String,int)>(r1, i0);

        return;
    }

    public java.lang.Boolean lambda$currentModeEquals$8$CrossProfileAppsServiceImpl(int, java.lang.String, int, java.lang.String) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1, $i2;
        java.lang.String r1, r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        android.app.AppOpsManager $r4;
        java.lang.Boolean $r5;
        boolean z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.AppOpsManager getAppOpsManager()>();

        $i2 = virtualinvoke $r4.<android.app.AppOpsManager: int unsafeCheckOpNoThrow(java.lang.String,int,java.lang.String)>(r1, i1, r2);

        if i0 != $i2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        return $r5;
    }

    public java.util.List lambda$getTargetUserProfilesUnchecked$2$CrossProfileAppsServiceImpl(int, java.lang.String) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        int[] r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r4;
        android.os.UserManager $r5;
        java.util.ArrayList $r6;
        boolean $z0;
        android.os.UserHandle $r7;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r5 = interfaceinvoke $r4.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.os.UserManager getUserManager()>();

        r2 = virtualinvoke $r5.<android.os.UserManager: int[] getEnabledProfileIds(int)>(i0);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        i1 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label5;

        i2 = r2[i3];

        if i2 != i0 goto label2;

        goto label4;

     label2:
        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPackageEnabled(java.lang.String,int)>(r1, i2);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        $r7 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r7);

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        return $r6;
    }

    public java.lang.Boolean lambda$hasOtherProfileWithPackageInstalled$9$CrossProfileAppsServiceImpl(int, java.lang.String) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        int[] r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        android.os.UserManager $r4;
        java.lang.Boolean $r5, $r6;
        boolean $z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.os.UserManager getUserManager()>();

        r2 = virtualinvoke $r4.<android.os.UserManager: int[] getProfileIds(int,boolean)>(i0, 0);

        i1 = lengthof r2;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        i2 = r2[i3];

        if i2 == i0 goto label2;

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPackageInstalled(java.lang.String,int)>(r1, i2);

        if $z0 == 0 goto label2;

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r6;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r5;
    }

    public java.lang.Boolean lambda$isCrossProfilePackageWhitelisted$0$CrossProfileAppsServiceImpl(java.lang.String) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.app.admin.DevicePolicyManagerInternal $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Boolean $r5;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.admin.DevicePolicyManagerInternal getDevicePolicyManagerInternal()>();

        $r4 = virtualinvoke $r3.<android.app.admin.DevicePolicyManagerInternal: java.util.List getAllCrossProfilePackages()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r5;
    }

    public java.lang.Boolean lambda$isCrossProfilePackageWhitelistedByDefault$1$CrossProfileAppsServiceImpl(java.lang.String) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.app.admin.DevicePolicyManagerInternal $r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Boolean $r5;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.admin.DevicePolicyManagerInternal getDevicePolicyManagerInternal()>();

        $r4 = virtualinvoke $r3.<android.app.admin.DevicePolicyManagerInternal: java.util.List getDefaultCrossProfilePackages()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean contains(java.lang.Object)>(r1);

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r5;
    }

    public java.lang.Boolean lambda$isManagedProfile$13$CrossProfileAppsServiceImpl(int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.UserManager $r3;
        boolean $z0;
        java.lang.Boolean $r4;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/UserManager;");

        $r3 = (android.os.UserManager) $r2;

        $z0 = virtualinvoke $r3.<android.os.UserManager: boolean isManagedProfile(int)>(i0);

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r4;
    }

    public java.lang.Boolean lambda$isPackageEnabled$3$CrossProfileAppsServiceImpl(java.lang.String, int, int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1;
        android.content.pm.PackageManagerInternal $r2;
        android.content.pm.ApplicationInfo $r3;
        boolean $z0, z1;
        java.lang.String r4;
        android.content.pm.PackageInfo r5;
        java.lang.Boolean $r6;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = interfaceinvoke $r1.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        r5 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int,int)>(r4, 786432, i0, i1);

        if r5 == null goto label1;

        $r3 = r5.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = $r3.<android.content.pm.ApplicationInfo: boolean enabled>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        return $r6;
    }

    public java.lang.Boolean lambda$isPackageInstalled$6$CrossProfileAppsServiceImpl(java.lang.String, int, int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.content.pm.PackageManagerInternal $r3;
        android.content.pm.PackageInfo $r4;
        java.lang.Boolean $r5;
        boolean z0;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r4 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int,int)>(r1, 786432, i0, i1);

        if $r4 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        return $r5;
    }

    public android.content.ComponentName lambda$isProfileOwner$14$CrossProfileAppsServiceImpl(int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1;
        android.app.admin.DevicePolicyManagerInternal $r2;
        android.content.ComponentName $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = interfaceinvoke $r1.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.admin.DevicePolicyManagerInternal getDevicePolicyManagerInternal()>();

        $r3 = virtualinvoke $r2.<android.app.admin.DevicePolicyManagerInternal: android.content.ComponentName getProfileOwnerAsUser(int)>(i0);

        return $r3;
    }

    public java.lang.Boolean lambda$isSameProfileGroup$12$CrossProfileAppsServiceImpl(int, int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r1;
        android.os.UserManager $r2;
        boolean $z0;
        java.lang.Boolean $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r2 = interfaceinvoke $r1.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.os.UserManager getUserManager()>();

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean isSameProfileGroup(int,int)>(i0, i1);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public void lambda$setInteractAcrossProfilesAppOpForUserOrThrow$7$CrossProfileAppsServiceImpl(int, java.lang.String, int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        int i0, i1;
        java.lang.String r1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.app.AppOpsManager $r3;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.app.AppOpsManager getAppOpsManager()>();

        virtualinvoke $r3.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(93, i0, r1, i1);

        return;
    }

    public void lambda$verifyActivityCanHandleIntent$4$CrossProfileAppsServiceImpl(android.content.Intent, int, int) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.Intent r1;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        android.content.pm.PackageManagerInternal $r3;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        java.lang.String $r6;
        java.util.List $r7;
        boolean $z0;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r3 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r4 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        $r7 = virtualinvoke $r3.<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>(r1, $r6, 786432, i0, i1);

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Activity cannot handle intent");

        throw $r8;
    }

    public void lambda$verifyActivityCanHandleIntentAndExported$5$CrossProfileAppsServiceImpl(android.content.Intent, int, int, android.content.ComponentName) throws java.lang.Exception
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        android.content.ComponentName r1;
        android.content.pm.ActivityInfo r2;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r3;
        android.content.pm.PackageManagerInternal $r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        java.lang.String $r7, $r12, $r15, $r16, $r17, $r18;
        java.lang.StringBuilder $r8;
        java.lang.SecurityException $r11;
        java.lang.Object $r13;
        android.content.pm.ResolveInfo $r14;
        boolean $z0, $z1, $z2;
        android.content.Intent r19;
        int i0, i1, i2, i3;
        java.util.List r20;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r19 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.content.ComponentName;

        $r3 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r4 = interfaceinvoke $r3.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: android.content.pm.PackageManagerInternal getPackageManagerInternal()>();

        $r5 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = virtualinvoke r19.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r6);

        r20 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>(r19, $r7, 786432, i0, i1);

        i2 = interfaceinvoke r20.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $r13 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(i3);

        $r14 = (android.content.pm.ResolveInfo) $r13;

        r2 = $r14.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r15 = r2.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r16 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r15, $r16);

        if $z0 == 0 goto label2;

        $r17 = r2.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r18 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r17, $r18);

        if $z1 == 0 goto label2;

        $z2 = r2.<android.content.pm.ActivityInfo: boolean exported>;

        if $z2 == 0 goto label2;

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to launch activity without  category Intent.CATEGORY_LAUNCHER or activity is not exported");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    public void resetInteractAcrossProfilesAppOps(java.util.List)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.util.List r1;
        com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$wMVevLD4FZ1cL73xmtbSkTJK9d8 $r2;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.util.List;

        $r2 = new com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$wMVevLD4FZ1cL73xmtbSkTJK9d8;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$CrossProfileAppsServiceImpl$wMVevLD4FZ1cL73xmtbSkTJK9d8: void <init>(com.android.server.pm.CrossProfileAppsServiceImpl)>(r0);

        interfaceinvoke r1.<java.util.List: void forEach(java.util.function.Consumer)>($r2);

        return;
    }

    public void setInteractAcrossProfilesAppOp(java.lang.String, int)
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r3, $r4;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i1 = interfaceinvoke $r2.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.INTERACT_ACROSS_USERS_FULL", i1);

        if $z0 != 0 goto label2;

        $z3 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.INTERACT_ACROSS_USERS", i1);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("INTERACT_ACROSS_USERS or INTERACT_ACROSS_USERS_FULL is required to set the app-op for interacting across profiles.");

        throw $r4;

     label2:
        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.MANAGE_APP_OPS_MODES", i1);

        if $z1 != 0 goto label4;

        $z2 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isPermissionGranted(java.lang.String,int)>("android.permission.CONFIGURE_INTERACT_ACROSS_PROFILES", i1);

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("MANAGE_APP_OPS_MODES or CONFIGURE_INTERACT_ACROSS_PROFILES is required to set the app-op for interacting across profiles.");

        throw $r3;

     label4:
        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void setInteractAcrossProfilesAppOpUnchecked(java.lang.String,int,boolean)>(r1, i0, 1);

        return;
    }

    public void startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.ComponentName, int, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, r2, $r20, $r21, $r25, $r28, $r39;
        int i0, i1, i2, i3, $i5;
        boolean z0, $z1, $z2, $z3;
        com.android.server.wm.ActivityTaskManagerInternal r4;
        android.app.admin.DevicePolicyEventLogger $r7, $r9;
        java.lang.String[] $r8;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r10, $r11, $r12, $r43;
        java.util.List $r13;
        android.os.UserHandle $r14;
        java.lang.StringBuilder $r15, $r22;
        java.lang.SecurityException $r19, $r27, $r35;
        android.content.Intent $r29;
        android.app.ActivityOptions $r33;
        android.content.Context $r34;
        android.app.IApplicationThread r41;
        android.content.ComponentName r42;
        android.os.Bundle r44;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r41 := @parameter0: android.app.IApplicationThread;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r42 := @parameter3: android.content.ComponentName;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r42);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $r7 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(126);

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = r1;

        $r9 = virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setStrings(java.lang.String[])>($r8);

        virtualinvoke $r9.<android.app.admin.DevicePolicyEventLogger: void write()>();

        $r10 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i1 = interfaceinvoke $r10.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $r11 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i2 = interfaceinvoke $r11.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        $r12 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i3 = interfaceinvoke $r12.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingPid()>();

        $r13 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfilesUnchecked(java.lang.String,int)>(r1, i1);

        $r14 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $z1 = interfaceinvoke $r13.<java.util.List: boolean contains(java.lang.Object)>($r14);

        if $z1 == 0 goto label8;

        $r21 = virtualinvoke r42.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z2 == 0 goto label7;

        $r29 = new android.content.Intent;

        specialinvoke $r29.<android.content.Intent: void <init>()>();

        if z0 == 0 goto label1;

        virtualinvoke $r29.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r29.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        virtualinvoke $r29.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r39 = virtualinvoke r42.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r29.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r39);

        goto label4;

     label1:
        if i1 == i0 goto label3;

        $r34 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: android.content.Context mContext>;

        $i5 = staticinvoke <android.content.PermissionChecker: int checkPermissionForPreflight(android.content.Context,java.lang.String,int,int,java.lang.String)>($r34, "android.permission.INTERACT_ACROSS_PROFILES", i3, i2, r1);

        if $i5 != 0 goto label2;

        $z3 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean isSameProfileGroup(int,int)>(i1, i0);

        if $z3 == 0 goto label2;

        goto label3;

     label2:
        $r35 = new java.lang.SecurityException;

        specialinvoke $r35.<java.lang.SecurityException: void <init>(java.lang.String)>("Attempt to launch activity without required android.permission.INTERACT_ACROSS_PROFILES permission or target user is not in the same profile group.");

        throw $r35;

     label3:
        virtualinvoke $r29.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r42);

     label4:
        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyActivityCanHandleIntentAndExported(android.content.Intent,android.content.ComponentName,int,int)>($r29, r42, i2, i0);

        virtualinvoke $r29.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(null);

        virtualinvoke $r29.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r42);

        $r43 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        r4 = interfaceinvoke $r43.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()>();

        if z0 == 0 goto label5;

        $r33 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions makeOpenCrossProfileAppsAnimation()>();

        r44 = virtualinvoke $r33.<android.app.ActivityOptions: android.os.Bundle toBundle()>();

        goto label6;

     label5:
        r44 = null;

     label6:
        virtualinvoke r4.<com.android.server.wm.ActivityTaskManagerInternal: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,android.os.IBinder,int,android.os.Bundle,int)>(r41, r1, r2, $r29, null, 268435456, r44, i0);

        return;

     label7:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempts to start an activity in other package - ");

        $r25 = virtualinvoke r42.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = new java.lang.SecurityException;

        $r28 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.SecurityException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label8:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot access unrelated user ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = new java.lang.SecurityException;

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r20);

        throw $r19;
    }

    public void startActivityAsUserByIntent(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, int, android.os.IBinder, android.os.Bundle) throws android.os.RemoteException
    {
        com.android.server.pm.CrossProfileAppsServiceImpl r0;
        java.lang.String r1, r2, $r15, $r20, $r23, $r33;
        int i0, i1, i2;
        android.os.IBinder r3;
        android.os.Bundle r4;
        java.util.List r5;
        android.content.ComponentName $r8, $r14, $r19;
        com.android.server.pm.CrossProfileAppsServiceImpl$Injector $r10, $r11, $r24;
        android.content.Intent $r12, r35;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r16, $r28;
        java.lang.SecurityException $r22, $r26, $r32;
        com.android.server.wm.ActivityTaskManagerInternal $r25;
        android.os.UserHandle $r27;
        android.app.IApplicationThread r34;

        r0 := @this: com.android.server.pm.CrossProfileAppsServiceImpl;

        r34 := @parameter0: android.app.IApplicationThread;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r35 := @parameter3: android.content.Intent;

        i0 := @parameter4: int;

        r3 := @parameter5: android.os.IBinder;

        r4 := @parameter6: android.os.Bundle;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r35);

        $r8 = virtualinvoke r35.<android.content.Intent: android.content.ComponentName getComponent()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r8, "The intent must have a Component set");

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $r10 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i1 = interfaceinvoke $r10.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUserId()>();

        $r11 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        i2 = interfaceinvoke $r11.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: int getCallingUid()>();

        r5 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: java.util.List getTargetUserProfilesUnchecked(java.lang.String,int)>(r1, i1);

        if i1 == i0 goto label2;

        $r27 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $z2 = interfaceinvoke r5.<java.util.List: boolean contains(java.lang.Object)>($r27);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot access unrelated user ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r32 = new java.lang.SecurityException;

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.SecurityException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label2:
        $r12 = new android.content.Intent;

        specialinvoke $r12.<android.content.Intent: void <init>(android.content.Intent)>(r35);

        virtualinvoke $r12.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        $r14 = virtualinvoke $r12.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r15 = virtualinvoke $r14.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label5;

        if i1 == i0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: boolean hasCallerGotInteractAcrossProfilesPermission(java.lang.String)>(r1);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r26 = new java.lang.SecurityException;

        specialinvoke $r26.<java.lang.SecurityException: void <init>(java.lang.String)>("Attempt to launch activity without required android.permission.INTERACT_ACROSS_PROFILES permission or target user is not in the same profile group.");

        throw $r26;

     label4:
        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void verifyActivityCanHandleIntent(android.content.Intent,int,int)>($r12, i2, i0);

        $r24 = r0.<com.android.server.pm.CrossProfileAppsServiceImpl: com.android.server.pm.CrossProfileAppsServiceImpl$Injector mInjector>;

        $r25 = interfaceinvoke $r24.<com.android.server.pm.CrossProfileAppsServiceImpl$Injector: com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()>();

        virtualinvoke $r25.<com.android.server.wm.ActivityTaskManagerInternal: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,android.os.IBinder,int,android.os.Bundle,int)>(r34, r1, r2, $r12, r3, 0, r4, i0);

        specialinvoke r0.<com.android.server.pm.CrossProfileAppsServiceImpl: void logStartActivityByIntent(java.lang.String)>(r1);

        return;

     label5:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempts to start an activity in other package - ");

        $r19 = virtualinvoke $r12.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r20 = virtualinvoke $r19.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = new java.lang.SecurityException;

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.SecurityException: void <init>(java.lang.String)>($r23);

        throw $r22;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.CrossProfileAppsServiceImpl: java.lang.String TAG> = "CrossProfileAppsService";

        return;
    }
}
