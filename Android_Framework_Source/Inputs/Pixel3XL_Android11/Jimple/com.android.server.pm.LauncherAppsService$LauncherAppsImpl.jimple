class com.android.server.pm.LauncherAppsService$LauncherAppsImpl extends android.content.pm.ILauncherApps$Stub
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final android.app.ActivityManagerInternal mActivityManagerInternal;
    private final com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal;
    private final android.os.Handler mCallbackHandler;
    private final android.content.Context mContext;
    private final android.app.admin.DevicePolicyManager mDpm;
    private final android.content.pm.IPackageManager mIPM;
    private final com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners;
    private com.android.server.pm.PackageInstallerService mPackageInstallerService;
    private final com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor mPackageMonitor;
    private final com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler mShortcutChangeHandler;
    private final android.content.pm.ShortcutServiceInternal mShortcutServiceInternal;
    private final android.os.UserManager mUm;
    private final android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal;
    private final android.os.UserManagerInternal mUserManagerInternal;

    public void <init>(android.content.Context)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList $r1;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor $r2, $r21;
        android.content.pm.IPackageManager $r3;
        android.content.Context $r4, $r26, r29;
        java.lang.Object $r5, $r7, $r10, $r13, $r16, $r19, $r27;
        android.os.UserManager $r6;
        android.os.UserManagerInternal $r9, $r23, r30;
        android.app.usage.UsageStatsManagerInternal $r12, r31;
        android.app.ActivityManagerInternal $r15, r32;
        com.android.server.wm.ActivityTaskManagerInternal $r18, r33;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler $r22;
        android.content.pm.ShortcutServiceInternal $r24, r34, r35;
        android.os.Handler $r25;
        android.app.admin.DevicePolicyManager $r28;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r29 := @parameter0: android.content.Context;

        specialinvoke r0.<android.content.pm.ILauncherApps$Stub: void <init>()>();

        $r1 = new com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList;

        specialinvoke $r1.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: void <init>(com.android.server.pm.LauncherAppsService$LauncherAppsImpl)>(r0);

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners> = $r1;

        $r2 = new com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor;

        specialinvoke $r2.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void <init>(com.android.server.pm.LauncherAppsService$LauncherAppsImpl,com.android.server.pm.LauncherAppsService$1)>(r0, null);

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor mPackageMonitor> = $r2;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext> = r29;

        $r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.IPackageManager mIPM> = $r3;

        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r6 = (android.os.UserManager) $r5;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManager mUm> = $r6;

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/os/UserManagerInternal;");

        r30 = (android.os.UserManagerInternal) $r7;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r30);

        $r9 = (android.os.UserManagerInternal) r30;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManagerInternal mUserManagerInternal> = $r9;

        $r10 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/usage/UsageStatsManagerInternal;");

        r31 = (android.app.usage.UsageStatsManagerInternal) $r10;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r31);

        $r12 = (android.app.usage.UsageStatsManagerInternal) r31;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal> = $r12;

        $r13 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        r32 = (android.app.ActivityManagerInternal) $r13;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r32);

        $r15 = (android.app.ActivityManagerInternal) r32;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.ActivityManagerInternal mActivityManagerInternal> = $r15;

        $r16 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        r33 = (com.android.server.wm.ActivityTaskManagerInternal) $r16;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r33);

        $r18 = (com.android.server.wm.ActivityTaskManagerInternal) r33;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal> = $r18;

        $r19 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/ShortcutServiceInternal;");

        r34 = (android.content.pm.ShortcutServiceInternal) $r19;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r34);

        r35 = (android.content.pm.ShortcutServiceInternal) r34;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal> = r35;

        $r21 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor mPackageMonitor>;

        virtualinvoke r35.<android.content.pm.ShortcutServiceInternal: void addListener(android.content.pm.ShortcutServiceInternal$ShortcutChangeListener)>($r21);

        $r22 = new com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler;

        $r23 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManagerInternal mUserManagerInternal>;

        specialinvoke $r22.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler: void <init>(android.os.UserManagerInternal)>($r23);

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler mShortcutChangeHandler> = $r22;

        $r24 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        virtualinvoke $r24.<android.content.pm.ShortcutServiceInternal: void addShortcutChangeCallback(android.content.pm.LauncherApps$ShortcutChangeCallback)>($r22);

        $r25 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.Handler mCallbackHandler> = $r25;

        $r26 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r27 = virtualinvoke $r26.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r28 = (android.app.admin.DevicePolicyManager) $r27;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.admin.DevicePolicyManager mDpm> = $r28;

        return;
    }

    static com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList access$100(com.android.server.pm.LauncherAppsService$LauncherAppsImpl)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList $r1;

        r0 := @parameter0: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        return $r1;
    }

    static boolean access$200(com.android.server.pm.LauncherAppsService$LauncherAppsImpl, android.os.UserHandle, android.os.UserHandle, java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.os.UserHandle r1, r2;
        java.lang.String r3;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter1: android.os.UserHandle;

        r2 := @parameter2: android.os.UserHandle;

        r3 := @parameter3: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isEnabledProfileOf(android.os.UserHandle,android.os.UserHandle,java.lang.String)>(r1, r2, r3);

        return $z0;
    }

    static android.content.pm.ShortcutServiceInternal access$300(com.android.server.pm.LauncherAppsService$LauncherAppsImpl)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.pm.ShortcutServiceInternal $r1;

        r0 := @parameter0: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        return $r1;
    }

    private boolean canAccessProfile(int, java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int i0, i1, $i3, $i4, $i5;
        long l2;
        boolean $z0, $z1, $z2;
        android.os.UserManager $r1;
        android.os.UserManagerInternal $r2;
        java.lang.String $r9, r11;
        java.lang.Throwable $r10;
        android.content.pm.UserInfo r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        i0 := @parameter0: int;

        r11 := @parameter1: java.lang.String;

        i1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectCallingUserId()>();

        if i0 != i1 goto label1;

        return 1;

     label1:
        $i3 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i4 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean injectHasInteractAcrossUsersFullPermission(int,int)>($i3, $i4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        l2 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: long injectClearCallingIdentity()>();

     label3:
        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManager mUm>;

        r12 = virtualinvoke $r1.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i1);

     label4:
        if r12 == null goto label7;

     label5:
        $z2 = virtualinvoke r12.<android.content.pm.UserInfo: boolean isProfile()>();

        if $z2 == 0 goto label7;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for another profile ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed");

        $r9 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("LauncherAppsService", $r9);

     label6:
        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l2);

        return 0;

     label7:
        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l2);

        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManagerInternal mUserManagerInternal>;

        $i5 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectCallingUserId()>();

        $z1 = virtualinvoke $r2.<android.os.UserManagerInternal: boolean isProfileAccessible(int,int,java.lang.String,boolean)>($i5, i0, r11, 1);

        return $z1;

     label8:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l2);

        throw $r10;

        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
    }

    private void ensureShortcutPermission(java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1;
        android.content.pm.ShortcutServiceInternal $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i2 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $z0 = virtualinvoke $r2.<android.content.pm.ShortcutServiceInternal: boolean hasShortcutHostPermission(int,java.lang.String,int,int)>($i0, r1, $i1, $i2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller can\'t access shortcut information");

        throw $r3;
    }

    private void ensureStrictAccessShortcutsPermission(java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean injectHasAccessShortcutsPermission(int,int)>($i0, $i1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller can\'t access shortcut information");

        throw $r2;
    }

    private int getCallingUserId()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int $i0, $i1;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        return $i1;
    }

    private android.content.pm.ResolveInfo getHiddenAppActivityInfo(java.lang.String, int, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int i0, $i1, $i2;
        android.os.UserHandle r1;
        android.content.Intent $r3;
        android.content.ComponentName $r4;
        java.lang.String $r5, $r11, r14;
        java.lang.Object $r7, $r12;
        android.content.Context $r8;
        android.content.pm.PackageManagerInternal $r9;
        android.content.ContentResolver $r10;
        android.content.pm.ResolveInfo $r13;
        java.util.List r15;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r14 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.UserHandle;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        $r4 = new android.content.ComponentName;

        $r5 = <android.content.pm.PackageManager: java.lang.String APP_DETAILS_ACTIVITY_CLASS_NAME>;

        specialinvoke $r4.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r14, $r5);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r4);

        $r7 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r9 = (android.content.pm.PackageManagerInternal) $r7;

        $r8 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r10 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r11 = virtualinvoke $r3.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r10);

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        r15 = virtualinvoke $r9.<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>($r3, $r11, 786432, i0, $i1);

        $i2 = interfaceinvoke r15.<java.util.List: int size()>();

        if $i2 <= 0 goto label1;

        $r12 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (android.content.pm.ResolveInfo) $r12;

        return $r13;

     label1:
        return null;
    }

    private com.android.server.pm.PackageInstallerService getPackageInstallerService()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.PackageInstallerService $r1, $r2, $r6;
        android.os.IBinder $r3;
        com.android.server.pm.PackageManagerService $r4;
        android.content.pm.IPackageInstaller $r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.PackageInstallerService mPackageInstallerService>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        $r4 = (com.android.server.pm.PackageManagerService) $r3;

        $r5 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService: android.content.pm.IPackageInstaller getPackageInstaller()>();

        $r6 = (com.android.server.pm.PackageInstallerService) $r5;

        r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.PackageInstallerService mPackageInstallerService> = $r6;

     label1:
        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.PackageInstallerService mPackageInstallerService>;

        return $r2;
    }

    private boolean hasDefaultEnableLauncherActivity(java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.pm.PackageManagerInternal r1;
        int i0, $i1, $i2, i3;
        java.lang.Object $r3, $r10;
        android.content.Intent $r4;
        android.content.Context $r7;
        android.content.ContentResolver $r8;
        java.lang.String $r9, r13;
        android.content.pm.ResolveInfo $r11;
        android.content.pm.ActivityInfo $r12;
        boolean $z0;
        java.util.List r14;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r13 := @parameter0: java.lang.String;

        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r1 = (android.content.pm.PackageManagerInternal) $r3;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r13);

        $r7 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = virtualinvoke $r4.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r8);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        r14 = virtualinvoke r1.<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>($r4, $r9, 512, $i1, $i2);

        i0 = interfaceinvoke r14.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r10 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(i3);

        $r11 = (android.content.pm.ResolveInfo) $r10;

        $r12 = $r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $z0 = $r12.<android.content.pm.ActivityInfo: boolean enabled>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isEnabledProfileOf(android.os.UserHandle, android.os.UserHandle, java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.os.UserHandle r1, r2;
        java.lang.String r3;
        android.os.UserManagerInternal $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: android.os.UserHandle;

        r2 := @parameter1: android.os.UserHandle;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManagerInternal mUserManagerInternal>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = virtualinvoke $r4.<android.os.UserManagerInternal: boolean isProfileAccessible(int,int,java.lang.String,boolean)>($i0, $i1, r3, 0);

        return $z0;
    }

    private boolean isManagedProfileAdmin(android.os.UserHandle, java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, $r6;
        android.os.UserManager $r2;
        int $i0, $i1, i2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        android.app.admin.DevicePolicyManager $r4;
        android.os.UserHandle $r5, r7;
        java.util.List r8;
        android.content.pm.UserInfo r9;
        android.content.ComponentName r10;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r7 := @parameter0: android.os.UserHandle;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManager mUm>;

        $i0 = virtualinvoke r7.<android.os.UserHandle: int getIdentifier()>();

        r8 = virtualinvoke $r2.<android.os.UserManager: java.util.List getProfiles(int)>($i0);

        i2 = 0;

     label1:
        $i1 = interfaceinvoke r8.<java.util.List: int size()>();

        if i2 >= $i1 goto label5;

        $r3 = interfaceinvoke r8.<java.util.List: java.lang.Object get(int)>(i2);

        r9 = (android.content.pm.UserInfo) $r3;

        $z0 = virtualinvoke r9.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 != 0 goto label2;

        goto label4;

     label2:
        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.admin.DevicePolicyManager mDpm>;

        $r5 = virtualinvoke r9.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        r10 = virtualinvoke $r4.<android.app.admin.DevicePolicyManager: android.content.ComponentName getProfileOwnerAsUser(android.os.UserHandle)>($r5);

        if r10 != null goto label3;

        goto label4;

     label3:
        $r6 = virtualinvoke r10.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        return 0;
    }

    private android.content.pm.ParceledListSlice queryActivitiesForUser(java.lang.String, android.content.Intent, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.Intent r1;
        android.os.UserHandle r2;
        int i0, $i2, $i3;
        long l1;
        boolean $z0;
        android.content.pm.ParceledListSlice $r3;
        java.lang.Object $r4;
        android.content.Context $r5;
        android.content.pm.PackageManagerInternal $r6;
        android.content.ContentResolver $r7;
        java.lang.String $r8, r11;
        java.util.List $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r11 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: android.os.UserHandle;

        $i2 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i2, "Cannot retrieve activities");

        if $z0 != 0 goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: long injectClearCallingIdentity()>();

     label2:
        $r3 = new android.content.pm.ParceledListSlice;

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r6 = (android.content.pm.PackageManagerInternal) $r4;

        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r7 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r7);

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r9 = virtualinvoke $r6.<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>(r1, $r8, 786432, i0, $i3);

        specialinvoke $r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r9);

     label3:
        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        return $r3;

     label4:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        throw $r10;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private boolean requestsPermissions(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.util.List $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r2);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private boolean shouldShowSyntheticActivity(android.os.UserHandle, android.content.pm.ApplicationInfo)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.pm.ApplicationInfo r1;
        boolean $z1, $z2, $z3, $z4, $z5, z6;
        java.lang.String $r2, $r4, $r6;
        java.lang.Object $r3;
        android.content.pm.PackageManagerInternal $r5;
        android.os.UserHandle r7;
        com.android.server.pm.parsing.pkg.AndroidPackage r8;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r7 := @parameter0: android.os.UserHandle;

        r1 := @parameter1: android.content.pm.ApplicationInfo;

        if r1 == null goto label5;

        $z1 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: boolean isUpdatedSystemApp()>();

        if $z2 == 0 goto label1;

        goto label5;

     label1:
        $r2 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z3 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isManagedProfileAdmin(android.os.UserHandle,java.lang.String)>(r7, $r2);

        if $z3 == 0 goto label2;

        return 0;

     label2:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r5 = (android.content.pm.PackageManagerInternal) $r3;

        $r4 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        r8 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(java.lang.String)>($r4);

        if r8 != null goto label3;

        return 0;

     label3:
        z6 = 0;

        $z4 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean requestsPermissions(com.android.server.pm.parsing.pkg.AndroidPackage)>(r8);

        if $z4 == 0 goto label4;

        z6 = 0;

        $r6 = r1.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z5 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean hasDefaultEnableLauncherActivity(java.lang.String)>($r6);

        if $z5 == 0 goto label4;

        z6 = 1;

     label4:
        return z6;

     label5:
        return 0;
    }

    private boolean startShortcutIntentsAsPublisher(android.content.Intent[], java.lang.String, java.lang.String, android.os.Bundle, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2, $r7;
        android.os.Bundle r3;
        com.android.server.wm.ActivityTaskManagerInternal $r4;
        boolean $z0;
        java.lang.Throwable $r8;
        android.content.Intent[] r9;
        int i1, i2;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r9 := @parameter0: android.content.Intent[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        i1 := @parameter4: int;

     label1:
        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        i2 = virtualinvoke $r4.<com.android.server.wm.ActivityTaskManagerInternal: int startActivitiesAsPackage(java.lang.String,java.lang.String,int,android.content.Intent[],android.os.Bundle)>(r1, r2, i1, r9, r3);

        $z0 = staticinvoke <android.app.ActivityManager: boolean isStartResultSuccessful(int)>(i2);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t start activity, code=");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LauncherAppsService", $r7);

     label4:
        return 0;

     label5:
        $r8 := @caughtexception;

        return 0;

        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.SecurityException from label3 to label4 with label5;
    }

    private void startWatchingPackageBroadcasts()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.os.Handler $r1;
        android.os.UserHandle $r2;
        android.content.Context $r3;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor $r4;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor mPackageMonitor>;

        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r2 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.Handler mCallbackHandler>;

        virtualinvoke $r4.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void register(android.content.Context,android.os.UserHandle,boolean,android.os.Handler)>($r3, $r2, 1, $r1);

        return;
    }

    private void stopWatchingPackageBroadcasts()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor $r1;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor mPackageMonitor>;

        virtualinvoke $r1.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void unregister()>();

        return;
    }

    private int toShortcutsCacheFlags(int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int i0, i2;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        i0 := @parameter0: int;

        i2 = 0;

        if i0 != 0 goto label1;

        i2 = 16384;

        goto label2;

     label1:
        if i0 != 1 goto label2;

        i2 = 1073741824;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentPositive(int,java.lang.String)>(i2, "Invalid cache owner");

        return i2;
    }

    public void addOnAppsChangedListener(java.lang.String, android.content.pm.IOnAppsChangedListener) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.pm.IOnAppsChangedListener r1;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList r2, r3, $r5, $r6;
        com.android.server.pm.LauncherAppsService$BroadcastCookie r4;
        int $i0, $i1, $i2, $i3;
        android.os.UserHandle $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IOnAppsChangedListener;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r9);

        r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        $i0 = virtualinvoke $r5.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: int getRegisteredCallbackCount()>();

        if $i0 != 0 goto label2;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void startWatchingPackageBroadcasts()>();

     label2:
        $r6 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        virtualinvoke $r6.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: boolean unregister(android.os.IInterface)>(r1);

        r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        r4 = new com.android.server.pm.LauncherAppsService$BroadcastCookie;

        $i1 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $r7 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

        $i2 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i3 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        specialinvoke r4.<com.android.server.pm.LauncherAppsService$BroadcastCookie: void <init>(android.os.UserHandle,java.lang.String,int,int)>($r7, r9, $i2, $i3);

        virtualinvoke r3.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: boolean register(android.os.IInterface,java.lang.Object)>(r1, r4);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void cacheShortcuts(java.lang.String, java.lang.String, java.util.List, android.os.UserHandle, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2;
        java.util.List r3;
        android.os.UserHandle r4;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        android.content.pm.ShortcutServiceInternal $r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: android.os.UserHandle;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureStrictAccessShortcutsPermission(java.lang.String)>(r1);

        $i1 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i1, "Cannot cache shortcuts");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i2 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i3 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $i4 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int toShortcutsCacheFlags(int)>(i0);

        virtualinvoke $r5.<android.content.pm.ShortcutServiceInternal: void cacheShortcuts(int,java.lang.String,java.lang.String,java.util.List,int,int)>($i2, r1, r2, r3, $i3, $i4);

        return;
    }

    void checkCallbackCount()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList r1, $r3;
        int $i0;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        $i0 = virtualinvoke $r3.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: int getRegisteredCallbackCount()>();

        if $i0 != 0 goto label2;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void stopWatchingPackageBroadcasts()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.pm.ParceledListSlice getAllSessions(java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        long l0;
        int i1, i2, $i3, i4;
        java.util.ArrayList $r2;
        android.os.UserManager $r3;
        android.content.pm.ParceledListSlice $r4, $r6;
        com.android.server.pm.PackageInstallerService $r5;
        java.util.List $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;
        int[] r10;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r9 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r9);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManager mUm>;

        $i3 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        r10 = virtualinvoke $r3.<android.os.UserManager: int[] getEnabledProfileIds(int)>($i3);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        i1 = lengthof r10;

     label2:
        i4 = 0;

     label3:
        if i4 >= i1 goto label6;

        i2 = r10[i4];

     label4:
        $r5 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.PackageInstallerService getPackageInstallerService()>();

        $r6 = virtualinvoke $r5.<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getAllSessions(int)>(i2);

        $r7 = virtualinvoke $r6.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r7);

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r4 = new android.content.pm.ParceledListSlice;

        specialinvoke $r4.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r2);

        return $r4;

     label7:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String, java.lang.String, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r7;
        android.os.UserHandle r2;
        int $i0, $i1;
        boolean $z0, $z1;
        com.android.server.wm.ActivityTaskManagerInternal $r3;
        java.lang.SecurityException $r4;
        android.app.usage.UsageStatsManagerInternal $r5;
        android.content.pm.LauncherApps$AppUsageLimit $r6;
        long $l2, $l3;
        android.app.usage.UsageStatsManagerInternal$AppUsageLimitData r8;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r7);

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i0, "Cannot access usage limit");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerInternal: boolean isCallerRecents(int)>($i1);

        if $z1 == 0 goto label3;

        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.usage.UsageStatsManagerInternal mUsageStatsManagerInternal>;

        r8 = virtualinvoke $r5.<android.app.usage.UsageStatsManagerInternal: android.app.usage.UsageStatsManagerInternal$AppUsageLimitData getAppUsageLimit(java.lang.String,android.os.UserHandle)>(r1, r2);

        if r8 != null goto label2;

        return null;

     label2:
        $r6 = new android.content.pm.LauncherApps$AppUsageLimit;

        $l2 = virtualinvoke r8.<android.app.usage.UsageStatsManagerInternal$AppUsageLimitData: long getTotalUsageLimit()>();

        $l3 = virtualinvoke r8.<android.app.usage.UsageStatsManagerInternal$AppUsageLimitData: long getUsageRemaining()>();

        specialinvoke $r6.<android.content.pm.LauncherApps$AppUsageLimit: void <init>(long,long)>($l2, $l3);

        return $r6;

     label3:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller is not the recents app");

        throw $r4;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, java.lang.String, int, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r5;
        int i0, i1, $i3, $i4;
        android.os.UserHandle r2;
        long l2;
        boolean $z0;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        android.content.pm.PackageManagerInternal r6;
        android.content.pm.ApplicationInfo r7;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.UserHandle;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i3, "Cannot check package");

        if $z0 != 0 goto label1;

        return null;

     label1:
        i1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r6 = (android.content.pm.PackageManagerInternal) $r3;

     label3:
        $i4 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r7 = virtualinvoke r6.<android.content.pm.PackageManagerInternal: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int,int)>(r1, i0, i1, $i4);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return r7;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String, java.lang.String, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.os.UserHandle r1;
        int i0, i2, $i3, $i4, $i5, $i6;
        long l1;
        boolean z0, $z1, $z2, $z3, $z6, $z8;
        android.content.Intent $r2, $r3, $r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        android.os.UserManager $r7;
        android.content.pm.UserInfo $r8;
        android.app.admin.DevicePolicyManager $r9;
        java.util.List $r10, $r12;
        java.lang.Object $r11, $r14, $r17;
        android.content.pm.ParceledListSlice $r13, r25, $r30;
        java.lang.String $r15, $r16, $r20, r23, r24;
        android.content.pm.ResolveInfo $r18, r29, r36;
        android.content.pm.ActivityInfo $r19;
        android.content.pm.ApplicationInfo $r21, r35;
        java.lang.Throwable $r22;
        android.content.ComponentName r26;
        java.util.ArrayList r27;
        android.content.pm.PackageManagerInternal r28;
        java.util.HashSet r32;
        java.util.Iterator r33, r34;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r23 := @parameter0: java.lang.String;

        r24 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.UserHandle;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        $r3 = virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        $r4 = virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r24);

        r25 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice queryActivitiesForUser(java.lang.String,android.content.Intent,android.os.UserHandle)>(r23, $r4, r1);

        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i3 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r6, "show_hidden_icon_apps_enabled", 1);

        if $i3 != 0 goto label01;

        return r25;

     label01:
        if r25 != null goto label02;

        return null;

     label02:
        i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: long injectClearCallingIdentity()>();

     label03:
        $r7 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.UserManager mUm>;

        $i4 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r8 = virtualinvoke $r7.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>($i4);

        z0 = virtualinvoke $r8.<android.content.pm.UserInfo: boolean isManagedProfile()>();

     label04:
        if z0 == 0 goto label05;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        return r25;

     label05:
        $r9 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.app.admin.DevicePolicyManager mDpm>;

        r26 = virtualinvoke $r9.<android.app.admin.DevicePolicyManager: android.content.ComponentName getDeviceOwnerComponentOnAnyUser()>();

     label06:
        if r26 == null goto label07;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        return r25;

     label07:
        r27 = new java.util.ArrayList;

        $r10 = virtualinvoke r25.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        specialinvoke r27.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        $r11 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r28 = (android.content.pm.PackageManagerInternal) $r11;

     label08:
        if r24 == null goto label16;

     label09:
        i2 = virtualinvoke r27.<java.util.ArrayList: int size()>();

     label10:
        if i2 <= 0 goto label11;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        return r25;

     label11:
        $i6 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r21 = virtualinvoke r28.<android.content.pm.PackageManagerInternal: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int,int)>(r24, 0, i0, $i6);

        $z6 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean shouldShowSyntheticActivity(android.os.UserHandle,android.content.pm.ApplicationInfo)>(r1, $r21);

        if $z6 == 0 goto label14;

        r29 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ResolveInfo getHiddenAppActivityInfo(java.lang.String,int,android.os.UserHandle)>(r24, i0, r1);

     label12:
        if r29 == null goto label14;

     label13:
        virtualinvoke r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

     label14:
        $r30 = new android.content.pm.ParceledListSlice;

        specialinvoke $r30.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r27);

     label15:
        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        return $r30;

     label16:
        r32 = new java.util.HashSet;

        specialinvoke r32.<java.util.HashSet: void <init>()>();

        r33 = virtualinvoke r27.<java.util.ArrayList: java.util.Iterator iterator()>();

     label17:
        $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

        $r17 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        $r18 = (android.content.pm.ResolveInfo) $r17;

        $r19 = $r18.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r20 = $r19.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r32.<java.util.HashSet: boolean add(java.lang.Object)>($r20);

     label18:
        goto label17;

     label19:
        $i5 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $r12 = virtualinvoke r28.<android.content.pm.PackageManagerInternal: java.util.List getInstalledApplications(int,int,int)>(0, $i5, i0);

        r34 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label20:
        $z8 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label26;

        $r14 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (android.content.pm.ApplicationInfo) $r14;

        $r15 = r35.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z2 = virtualinvoke r32.<java.util.HashSet: boolean contains(java.lang.Object)>($r15);

        if $z2 != 0 goto label25;

        $z3 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean shouldShowSyntheticActivity(android.os.UserHandle,android.content.pm.ApplicationInfo)>(r1, r35);

        if $z3 != 0 goto label22;

     label21:
        goto label20;

     label22:
        $r16 = r35.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        r36 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ResolveInfo getHiddenAppActivityInfo(java.lang.String,int,android.os.UserHandle)>($r16, i0, r1);

     label23:
        if r36 == null goto label25;

     label24:
        virtualinvoke r27.<java.util.ArrayList: boolean add(java.lang.Object)>(r36);

     label25:
        goto label20;

     label26:
        $r13 = new android.content.pm.ParceledListSlice;

        specialinvoke $r13.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r27);

     label27:
        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        return $r13;

     label28:
        $r22 := @caughtexception;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void injectRestoreCallingIdentity(long)>(l1);

        throw $r22;

        catch java.lang.Throwable from label03 to label04 with label28;
        catch java.lang.Throwable from label05 to label06 with label28;
        catch java.lang.Throwable from label07 to label08 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label13 to label14 with label28;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Throwable from label17 to label18 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label20 to label21 with label28;
        catch java.lang.Throwable from label22 to label23 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
    }

    public android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String, java.lang.String, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2;
        android.os.UserHandle r3;
        android.content.Intent $r4, $r5;
        android.content.pm.ParceledListSlice $r6;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.UserHandle;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CREATE_SHORTCUT");

        $r5 = virtualinvoke $r4.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r2);

        $r6 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ParceledListSlice queryActivitiesForUser(java.lang.String,android.content.Intent,android.os.UserHandle)>(r1, $r5, r3);

        return $r6;
    }

    public android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String, android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.os.UserHandle r1;
        boolean z0;
        long l0;
        int $i1;
        android.content.Intent $r3, r9;
        android.content.Context $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        android.content.ComponentName r7;
        android.content.IntentSender r8;
        android.app.PendingIntent r10;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r6 := @parameter0: java.lang.String;

        r7 := @parameter1: android.content.ComponentName;

        r1 := @parameter2: android.os.UserHandle;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r6);

        $i1 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i1, "Cannot check package");

        r8 = null;

        if z0 != 0 goto label1;

        return null;

     label1:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r7);

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CREATE_SHORTCUT");

        r9 = virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r7);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        r10 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r4, 0, r9, 1409286144, null, r1);

     label3:
        if r10 != null goto label4;

        goto label5;

     label4:
        r8 = virtualinvoke r10.<android.app.PendingIntent: android.content.IntentSender getIntentSender()>();

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r8;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String, java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2, r3;
        int i0, $i1;
        boolean $z0;
        android.content.pm.ShortcutServiceInternal $r4;
        android.os.ParcelFileDescriptor $r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>(i0, "Cannot access shortcuts");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i1 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $r5 = virtualinvoke $r4.<android.content.pm.ShortcutServiceInternal: android.os.ParcelFileDescriptor getShortcutIconFd(int,java.lang.String,java.lang.String,java.lang.String,int)>($i1, r1, r2, r3, i0);

        return $r5;
    }

    public int getShortcutIconResId(java.lang.String, java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2, r3;
        int i0, $i1, $i2;
        boolean $z0;
        android.content.pm.ShortcutServiceInternal $r4;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>(i0, "Cannot access shortcuts");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i1 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i2 = virtualinvoke $r4.<android.content.pm.ShortcutServiceInternal: int getShortcutIconResId(int,java.lang.String,java.lang.String,java.lang.String,int)>($i1, r1, r2, r3, i0);

        return $i2;
    }

    public java.lang.String getShortcutIconUri(java.lang.String, java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2, r3, $r5;
        int i0, $i1;
        boolean $z0;
        android.content.pm.ShortcutServiceInternal $r4;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r1);

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>(i0, "Cannot access shortcuts");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i1 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $r5 = virtualinvoke $r4.<android.content.pm.ShortcutServiceInternal: java.lang.String getShortcutIconUri(int,java.lang.String,java.lang.String,java.lang.String,int)>($i1, r1, r2, r3, i0);

        return $r5;
    }

    public android.content.pm.ParceledListSlice getShortcuts(java.lang.String, android.content.pm.ShortcutQueryWrapper, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r4;
        android.content.pm.ShortcutQueryWrapper r2;
        android.os.UserHandle r3;
        long l0;
        java.util.List r5, r6, $r10, $r14;
        android.content.ComponentName r7;
        int i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        android.content.pm.ParceledListSlice $r8, $r13;
        android.content.pm.ShortcutServiceInternal $r9;
        java.lang.IllegalArgumentException $r11, $r12;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.ShortcutQueryWrapper;

        r3 := @parameter2: android.os.UserHandle;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r1);

        $i2 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i2, "Cannot get shortcuts");

        if $z0 != 0 goto label1;

        $r13 = new android.content.pm.ParceledListSlice;

        $r14 = <java.util.Collections: java.util.List EMPTY_LIST>;

        specialinvoke $r13.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r14);

        return $r13;

     label1:
        l0 = virtualinvoke r2.<android.content.pm.ShortcutQueryWrapper: long getChangedSince()>();

        r4 = virtualinvoke r2.<android.content.pm.ShortcutQueryWrapper: java.lang.String getPackage()>();

        r5 = virtualinvoke r2.<android.content.pm.ShortcutQueryWrapper: java.util.List getShortcutIds()>();

        r6 = virtualinvoke r2.<android.content.pm.ShortcutQueryWrapper: java.util.List getLocusIds()>();

        r7 = virtualinvoke r2.<android.content.pm.ShortcutQueryWrapper: android.content.ComponentName getActivity()>();

        i1 = virtualinvoke r2.<android.content.pm.ShortcutQueryWrapper: int getQueryFlags()>();

        if r5 == null goto label3;

        if r4 == null goto label2;

        goto label3;

     label2:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("To query by shortcut ID, package name must also be set");

        throw $r12;

     label3:
        if r6 == null goto label5;

        if r4 == null goto label4;

        goto label5;

     label4:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("To query by locus ID, package name must also be set");

        throw $r11;

     label5:
        $r8 = new android.content.pm.ParceledListSlice;

        $r9 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i3 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i4 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        $i5 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i6 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $r10 = virtualinvoke $r9.<android.content.pm.ShortcutServiceInternal: java.util.List getShortcuts(int,java.lang.String,long,java.lang.String,java.util.List,java.util.List,android.content.ComponentName,int,int,int,int)>($i3, r1, l0, r4, r5, r6, r7, i1, $i4, $i5, $i6);

        specialinvoke $r8.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r10);

        return $r8;
    }

    public android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r3;
        android.content.pm.PackageManagerInternal $r4;
        android.os.Bundle $r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i0, "Cannot get launcher extras");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r4 = (android.content.pm.PackageManagerInternal) $r3;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String,int)>(r1, $i1);

        return $r5;
    }

    public boolean hasShortcutHostPermission(java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1;
        android.content.pm.ShortcutServiceInternal $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r1);

        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i2 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $z0 = virtualinvoke $r2.<android.content.pm.ShortcutServiceInternal: boolean hasShortcutHostPermission(int,java.lang.String,int,int)>($i0, r1, $i1, $i2);

        return $z0;
    }

    int injectBinderCallingPid()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int $i0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $i0 = staticinvoke <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingPid()>();

        return $i0;
    }

    int injectBinderCallingUid()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int $i0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $i0 = staticinvoke <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUid()>();

        return $i0;
    }

    final int injectCallingUserId()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int $i0, $i1;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i0);

        return $i1;
    }

    long injectClearCallingIdentity()
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        long $l0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        return $l0;
    }

    boolean injectHasAccessShortcutsPermission(int, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        boolean z0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.ACCESS_SHORTCUTS", i0, i1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean injectHasInteractAcrossUsersFullPermission(int, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        boolean z0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INTERACT_ACROSS_USERS_FULL", i0, i1);

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void injectRestoreCallingIdentity(long)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        long l0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        l0 := @parameter0: long;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;
    }

    public boolean isActivityEnabled(java.lang.String, android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        int i0, i2, $i3, $i4, $i5;
        long l1;
        boolean z1, z2, z3;
        android.content.pm.IPackageManager $r3;
        java.lang.Object $r4;
        android.content.pm.PackageManagerInternal $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;
        android.content.pm.ActivityInfo r8;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: android.os.UserHandle;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        z2 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i3, "Cannot check component");

        if z2 != 0 goto label01;

        return 0;

     label01:
        i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.IPackageManager mIPM>;

        $i4 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        i2 = interfaceinvoke $r3.<android.content.pm.IPackageManager: int getComponentEnabledSetting(android.content.ComponentName,int)>(r1, $i4);

     label03:
        if i2 == 1 goto label10;

        if i2 == 2 goto label09;

        if i2 == 3 goto label09;

        if i2 == 4 goto label09;

     label04:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r5 = (android.content.pm.PackageManagerInternal) $r4;

        $i5 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r8 = virtualinvoke $r5.<android.content.pm.PackageManagerInternal: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int,int)>(r1, 786432, i0, $i5);

     label05:
        z3 = 0;

        if r8 == null goto label08;

     label06:
        z1 = virtualinvoke r8.<android.content.pm.ActivityInfo: boolean isEnabled()>();

     label07:
        z3 = 0;

        if z1 == 0 goto label08;

        z3 = 1;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z3;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label11:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
    }

    public boolean isPackageEnabled(java.lang.String, java.lang.String, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r7;
        android.os.UserHandle r2;
        int i0, $i2, $i3;
        long l1;
        boolean z1, z2, z3;
        java.lang.Object $r3;
        android.content.pm.PackageManagerInternal $r4;
        android.content.pm.ApplicationInfo $r5;
        java.lang.Throwable $r6;
        android.content.pm.PackageInfo r8;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.UserHandle;

        $i2 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        z2 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i2, "Cannot check package");

        if z2 != 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r4 = (android.content.pm.PackageManagerInternal) $r3;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r8 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int,int)>(r1, 786432, i0, $i3);

     label3:
        z3 = 0;

        if r8 == null goto label6;

     label4:
        $r5 = r8.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        z1 = $r5.<android.content.pm.ApplicationInfo: boolean enabled>;

     label5:
        z3 = 0;

        if z1 == 0 goto label6;

        z3 = 1;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z3;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    public boolean lambda$registerPackageInstallerCallback$0$LauncherAppsService$LauncherAppsImpl(android.os.UserHandle, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.os.UserHandle r1, $r2;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: android.os.UserHandle;

        i0 := @parameter1: int;

        $r2 = new android.os.UserHandle;

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean isEnabledProfileOf(android.os.UserHandle,android.os.UserHandle,java.lang.String)>(r1, $r2, "shouldReceiveEvent");

        return $z0;
    }

    public void pinShortcuts(java.lang.String, java.lang.String, java.util.List, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2;
        java.util.List r3;
        android.os.UserHandle r4;
        int $i0, $i1, $i2;
        boolean $z0;
        android.content.pm.ShortcutServiceInternal $r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: android.os.UserHandle;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r1);

        $i0 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i0, "Cannot pin shortcuts");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i1 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i2 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r5.<android.content.pm.ShortcutServiceInternal: void pinShortcuts(int,java.lang.String,java.lang.String,java.util.List,int)>($i1, r1, r2, r3, $i2);

        return;
    }

    void postToPackageMonitorHandler(java.lang.Runnable)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.Runnable r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.os.Handler mCallbackHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return;
    }

    public void registerPackageInstallerCallback(java.lang.String, android.content.pm.IPackageInstallerCallback)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.pm.IPackageInstallerCallback r1;
        android.os.UserHandle $r2;
        int $i0;
        com.android.server.pm.PackageInstallerService $r3;
        com.android.server.pm._$$Lambda$LauncherAppsService$LauncherAppsImpl$PR6SMHDNFTsnoL92MFZskM_zN8k $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.IPackageInstallerCallback;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r5);

        $r2 = new android.os.UserHandle;

        $i0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        specialinvoke $r2.<android.os.UserHandle: void <init>(int)>($i0);

        $r3 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.PackageInstallerService getPackageInstallerService()>();

        $r4 = new com.android.server.pm._$$Lambda$LauncherAppsService$LauncherAppsImpl$PR6SMHDNFTsnoL92MFZskM_zN8k;

        specialinvoke $r4.<com.android.server.pm._$$Lambda$LauncherAppsService$LauncherAppsImpl$PR6SMHDNFTsnoL92MFZskM_zN8k: void <init>(com.android.server.pm.LauncherAppsService$LauncherAppsImpl,android.os.UserHandle)>(r0, $r2);

        virtualinvoke $r3.<com.android.server.pm.PackageInstallerService: void registerCallback(android.content.pm.IPackageInstallerCallback,java.util.function.IntPredicate)>(r1, $r4);

        return;
    }

    public void registerShortcutChangeCallback(java.lang.String, android.content.pm.ShortcutQueryWrapper, android.content.pm.IShortcutChangeCallback)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.pm.ShortcutQueryWrapper r1;
        android.content.pm.IShortcutChangeCallback r2;
        java.util.List $r3, $r4;
        int $i0, $i1, $i2;
        boolean $z0;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler $r5;
        java.lang.String $r6, $r8, r10;
        java.lang.IllegalArgumentException $r7, $r9;
        android.os.UserHandle r11;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.ShortcutQueryWrapper;

        r2 := @parameter2: android.content.pm.IShortcutChangeCallback;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r10);

        $r3 = virtualinvoke r1.<android.content.pm.ShortcutQueryWrapper: java.util.List getShortcutIds()>();

        if $r3 == null goto label2;

        $r8 = virtualinvoke r1.<android.content.pm.ShortcutQueryWrapper: java.lang.String getPackage()>();

        if $r8 == null goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("To query by shortcut ID, package name must also be set");

        throw $r9;

     label2:
        $r4 = virtualinvoke r1.<android.content.pm.ShortcutQueryWrapper: java.util.List getLocusIds()>();

        if $r4 == null goto label4;

        $r6 = virtualinvoke r1.<android.content.pm.ShortcutQueryWrapper: java.lang.String getPackage()>();

        if $r6 == null goto label3;

        goto label4;

     label3:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("To query by locus ID, package name must also be set");

        throw $r7;

     label4:
        $i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectCallingUserId()>();

        r11 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i0);

        $i1 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i2 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean injectHasInteractAcrossUsersFullPermission(int,int)>($i1, $i2);

        if $z0 == 0 goto label5;

        r11 = null;

     label5:
        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler mShortcutChangeHandler>;

        virtualinvoke $r5.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler: void addShortcutChangeCallback(android.content.pm.IShortcutChangeCallback,android.content.pm.ShortcutQueryWrapper,android.os.UserHandle)>(r2, r1, r11);

        return;
    }

    public void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList r1, $r2, $r3;
        int $i0;
        java.lang.Throwable $r4;
        android.content.pm.IOnAppsChangedListener r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r5 := @parameter0: android.content.pm.IOnAppsChangedListener;

        r1 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        virtualinvoke $r2.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: boolean unregister(android.os.IInterface)>(r5);

        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList mListeners>;

        $i0 = virtualinvoke $r3.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$PackageCallbackList: int getRegisteredCallbackCount()>();

        if $i0 != 0 goto label2;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void stopWatchingPackageBroadcasts()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.pm.ActivityInfo resolveActivity(java.lang.String, android.content.ComponentName, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        int i0, $i2, $i3;
        long l1;
        boolean $z0;
        java.lang.Object $r3;
        android.content.pm.PackageManagerInternal $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        android.content.pm.ActivityInfo r7;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.ComponentName;

        r2 := @parameter2: android.os.UserHandle;

        $i2 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i2, "Cannot resolve activity");

        if $z0 != 0 goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r4 = (android.content.pm.PackageManagerInternal) $r3;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        r7 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int,int)>(r1, 786432, i0, $i3);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r7;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean shouldHideFromSuggestions(java.lang.String, android.os.UserHandle)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1;
        android.os.UserHandle r2;
        boolean z0, z1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        android.content.pm.PackageManagerInternal $r4;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.UserHandle;

        $i0 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i0, "cannot get shouldHideFromSuggestions");

        z1 = 0;

        if z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r4 = (android.content.pm.PackageManagerInternal) $r3;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        $i2 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: int getDistractingPackageRestrictions(java.lang.String,int)>(r1, $i1);

        $i3 = $i2 & 1;

        if $i3 == 0 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    public void showAppDetailsAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.ComponentName, android.graphics.Rect, android.os.Bundle, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2, r6;
        android.graphics.Rect r3;
        android.os.Bundle r4;
        android.os.UserHandle r5;
        long l0;
        int $i1, $i2;
        boolean $z0;
        android.net.Uri $r7;
        com.android.server.wm.ActivityTaskManagerInternal $r9;
        java.lang.Throwable $r10, $r11, r15;
        android.app.IApplicationThread r12;
        android.content.ComponentName r13;
        android.content.Intent r14;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r12 := @parameter0: android.app.IApplicationThread;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r13 := @parameter3: android.content.ComponentName;

        r3 := @parameter4: android.graphics.Rect;

        r4 := @parameter5: android.os.Bundle;

        r5 := @parameter6: android.os.UserHandle;

        $i1 = virtualinvoke r5.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i1, "Cannot show app details");

        if $z0 != 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r6 = virtualinvoke r13.<android.content.ComponentName: java.lang.String getPackageName()>();

        r14 = new android.content.Intent;

        $r7 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", r6, null);

        specialinvoke r14.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.settings.APPLICATION_DETAILS_SETTINGS", $r7);

        virtualinvoke r14.<android.content.Intent: android.content.Intent setFlags(int)>(268468224);

     label3:
        virtualinvoke r14.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(r3);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r9 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        $i2 = virtualinvoke r5.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r9.<com.android.server.wm.ActivityTaskManagerInternal: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,android.os.IBinder,int,android.os.Bundle,int)>(r12, r1, r2, r14, null, 268435456, r4, $i2);

        return;

     label5:
        $r10 := @caughtexception;

        r15 = $r10;

        goto label7;

     label6:
        $r11 := @caughtexception;

        r15 = $r11;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r15;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.ComponentName, android.graphics.Rect, android.os.Bundle, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, $r10, $r16, $r19, $r23, $r24, $r25, $r26, $r29, r35;
        android.content.ComponentName r2;
        android.os.Bundle r3;
        android.os.UserHandle r4;
        long l0;
        java.util.List r6;
        int i1, $i2, $i3, $i4, i6, i7;
        boolean $z0, $z1, $z2, $z3, z4;
        android.content.Intent $r7;
        java.lang.Object $r12, $r21;
        android.content.Context $r13;
        android.content.pm.PackageManagerInternal $r14;
        android.content.ContentResolver $r15;
        com.android.server.wm.ActivityTaskManagerInternal $r20;
        android.content.pm.ResolveInfo $r22;
        java.lang.Throwable $r32, $r33, r42;
        android.app.IApplicationThread r34;
        android.graphics.Rect r36;
        android.content.pm.ActivityInfo r37;
        java.lang.SecurityException r38, r40;
        java.lang.StringBuilder r39, r41;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r34 := @parameter0: android.app.IApplicationThread;

        r35 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.content.ComponentName;

        r36 := @parameter4: android.graphics.Rect;

        r3 := @parameter5: android.os.Bundle;

        r4 := @parameter6: android.os.UserHandle;

        $i2 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i2, "Cannot start activity");

        if $z0 != 0 goto label01;

        return;

     label01:
        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r7.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.LAUNCHER");

        virtualinvoke $r7.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(r36);

        virtualinvoke $r7.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r10 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r10);

        i6 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r12 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r14 = (android.content.pm.PackageManagerInternal) $r12;

        $r13 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.Context mContext>;

        $r15 = virtualinvoke $r13.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = virtualinvoke $r7.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r15);

        $i3 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke $r14.<android.content.pm.PackageManagerInternal: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int,int)>($r7, $r16, 786432, i6, $i3);

        i1 = interfaceinvoke r6.<java.util.List: int size()>();

     label03:
        i7 = 0;

     label04:
        if i7 >= i1 goto label09;

     label05:
        $r21 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(i7);

        $r22 = (android.content.pm.ResolveInfo) $r21;

        r37 = $r22.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r23 = r37.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r24 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z1 == 0 goto label08;

        $r25 = r37.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r26 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getClassName()>();

        $z2 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z2 == 0 goto label08;

        $z3 = r37.<android.content.pm.ActivityInfo: boolean exported>;

        if $z3 == 0 goto label07;

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(null);

        virtualinvoke $r7.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r2);

     label06:
        z4 = 1;

        goto label10;

     label07:
        r38 = new java.lang.SecurityException;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot launch non-exported components ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r38.<java.lang.SecurityException: void <init>(java.lang.String)>($r29);

        throw r38;

     label08:
        i7 = i7 + 1;

        goto label04;

     label09:
        z4 = 0;

     label10:
        if z4 == 0 goto label11;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r20 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        $i4 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r20.<com.android.server.wm.ActivityTaskManagerInternal: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,android.os.IBinder,int,android.os.Bundle,int)>(r34, r35, r1, $r7, null, 268435456, r3, $i4);

        return;

     label11:
        r40 = new java.lang.SecurityException;

        r41 = new java.lang.StringBuilder;

        specialinvoke r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to launch activity without  category Intent.CATEGORY_LAUNCHER ");

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r19 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r40.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw r40;

     label12:
        $r33 := @caughtexception;

        r42 = $r33;

        goto label14;

     label13:
        $r32 := @caughtexception;

        r42 = $r32;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r42;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public void startSessionDetailsActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.pm.PackageInstaller$SessionInfo, android.graphics.Rect, android.os.Bundle, android.os.UserHandle) throws android.os.RemoteException
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        android.app.IApplicationThread r1;
        java.lang.String r2, r3, $r11;
        android.graphics.Rect r4;
        android.os.Bundle r5;
        android.os.UserHandle r6;
        int i0;
        boolean $z0;
        android.content.Intent $r7, $r14, r21;
        android.net.Uri$Builder $r8, $r9, $r10, $r12, $r15, $r16, $r17;
        android.net.Uri $r13, $r18;
        com.android.server.wm.ActivityTaskManagerInternal $r19;
        android.content.pm.PackageInstaller$SessionInfo r20;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: android.app.IApplicationThread;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r20 := @parameter3: android.content.pm.PackageInstaller$SessionInfo;

        r4 := @parameter4: android.graphics.Rect;

        r5 := @parameter5: android.os.Bundle;

        r6 := @parameter6: android.os.UserHandle;

        i0 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>(i0, "Cannot start details activity");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.VIEW");

        $r8 = new android.net.Uri$Builder;

        specialinvoke $r8.<android.net.Uri$Builder: void <init>()>();

        $r9 = virtualinvoke $r8.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("market");

        $r10 = virtualinvoke $r9.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>("details");

        $r11 = r20.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String appPackageName>;

        $r12 = virtualinvoke $r10.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("id", $r11);

        $r13 = virtualinvoke $r12.<android.net.Uri$Builder: android.net.Uri build()>();

        $r14 = virtualinvoke $r7.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r13);

        $r15 = new android.net.Uri$Builder;

        specialinvoke $r15.<android.net.Uri$Builder: void <init>()>();

        $r16 = virtualinvoke $r15.<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>("android-app");

        $r17 = virtualinvoke $r16.<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<android.net.Uri$Builder: android.net.Uri build()>();

        r21 = virtualinvoke $r14.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.REFERRER", $r18);

        virtualinvoke r21.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(r4);

        $r19 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.wm.ActivityTaskManagerInternal mActivityTaskManagerInternal>;

        virtualinvoke $r19.<com.android.server.wm.ActivityTaskManagerInternal: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,java.lang.String,android.content.Intent,android.os.IBinder,int,android.os.Bundle,int)>(r1, r2, r3, r21, null, 268435456, r5, i0);

        return;
    }

    public boolean startShortcut(java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.graphics.Rect, android.os.Bundle, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2, r12, r13;
        android.graphics.Rect r3;
        android.os.Bundle r4;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        android.content.pm.ShortcutServiceInternal $r5, $r6;
        android.content.Intent $r8, $r10, $r16, $r17;
        android.content.Intent[] r14;
        android.app.ActivityOptions r15;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r12 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r13 := @parameter3: java.lang.String;

        r3 := @parameter4: android.graphics.Rect;

        r4 := @parameter5: android.os.Bundle;

        i0 := @parameter6: int;

        virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void verifyCallingPackage(java.lang.String)>(r12);

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>(i0, "Cannot start activity");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i1 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $z1 = virtualinvoke $r5.<android.content.pm.ShortcutServiceInternal: boolean isPinnedByCaller(int,java.lang.String,java.lang.String,java.lang.String,int)>($i1, r12, r1, r13, i0);

        if $z1 != 0 goto label2;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r12);

     label2:
        $r6 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i2 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i3 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingPid()>();

        $i4 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        r14 = virtualinvoke $r6.<android.content.pm.ShortcutServiceInternal: android.content.Intent[] createShortcutIntents(int,java.lang.String,java.lang.String,java.lang.String,int,int,int)>($i2, r12, r1, r13, i0, $i3, $i4);

        if r14 == null goto label5;

        $i5 = lengthof r14;

        if $i5 != 0 goto label3;

        goto label5;

     label3:
        r15 = staticinvoke <android.app.ActivityOptions: android.app.ActivityOptions fromBundle(android.os.Bundle)>(r4);

        if r15 == null goto label4;

        $z2 = virtualinvoke r15.<android.app.ActivityOptions: boolean isApplyActivityFlagsForBubbles()>();

        if $z2 == 0 goto label4;

        $r8 = r14[0];

        virtualinvoke $r8.<android.content.Intent: android.content.Intent addFlags(int)>(524288);

        $r10 = r14[0];

        virtualinvoke $r10.<android.content.Intent: android.content.Intent addFlags(int)>(134217728);

     label4:
        $r16 = r14[0];

        virtualinvoke $r16.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r17 = r14[0];

        virtualinvoke $r17.<android.content.Intent: void setSourceBounds(android.graphics.Rect)>(r3);

        $z3 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean startShortcutIntentsAsPublisher(android.content.Intent[],java.lang.String,java.lang.String,android.os.Bundle,int)>(r14, r1, r2, r4, i0);

        return $z3;

     label5:
        return 0;
    }

    public void uncacheShortcuts(java.lang.String, java.lang.String, java.util.List, android.os.UserHandle, int)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, r2;
        java.util.List r3;
        android.os.UserHandle r4;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        android.content.pm.ShortcutServiceInternal $r5;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        r4 := @parameter3: android.os.UserHandle;

        i0 := @parameter4: int;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureStrictAccessShortcutsPermission(java.lang.String)>(r1);

        $i1 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean canAccessProfile(int,java.lang.String)>($i1, "Cannot uncache shortcuts");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: android.content.pm.ShortcutServiceInternal mShortcutServiceInternal>;

        $i2 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUserId()>();

        $i3 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

        $i4 = specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int toShortcutsCacheFlags(int)>(i0);

        virtualinvoke $r5.<android.content.pm.ShortcutServiceInternal: void uncacheShortcuts(int,java.lang.String,java.lang.String,java.util.List,int,int)>($i2, r1, r2, r3, $i3, $i4);

        return;
    }

    public void unregisterShortcutChangeCallback(java.lang.String, android.content.pm.IShortcutChangeCallback)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1;
        android.content.pm.IShortcutChangeCallback r2;
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler $r3;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IShortcutChangeCallback;

        specialinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: void ensureShortcutPermission(java.lang.String)>(r1);

        $r3 = r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler mShortcutChangeHandler>;

        virtualinvoke $r3.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$ShortcutChangeHandler: void removeShortcutChangeCallback(android.content.pm.IShortcutChangeCallback)>(r2);

        return;
    }

    void verifyCallingPackage(java.lang.String)
    {
        com.android.server.pm.LauncherAppsService$LauncherAppsImpl r0;
        java.lang.String r1, $r7;
        android.content.pm.IPackageManager $r2;
        int $i1, $i2, $i3, i5;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.pm.LauncherAppsService$LauncherAppsImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i1 = staticinvoke <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        i5 = interfaceinvoke $r2.<android.content.pm.IPackageManager: int getPackageUid(java.lang.String,int,int)>(r1, 794624, $i2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        i5 = -1;

     label4:
        if i5 >= 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LauncherAppsService", $r7);

     label5:
        $i3 = virtualinvoke r0.<com.android.server.pm.LauncherAppsService$LauncherAppsImpl: int injectBinderCallingUid()>();

        if i5 != $i3 goto label6;

        return;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Calling package name mismatch");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: java.lang.String TAG> = "LauncherAppsService";

        <com.android.server.pm.LauncherAppsService$LauncherAppsImpl: boolean DEBUG> = 0;

        return;
    }
}
