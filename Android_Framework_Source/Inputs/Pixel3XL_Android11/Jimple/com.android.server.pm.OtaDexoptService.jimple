public class com.android.server.pm.OtaDexoptService extends android.content.pm.IOtaDexopt$Stub
{
    private static final long BULK_DELETE_THRESHOLD;
    private static final boolean DEBUG_DEXOPT;
    private static final java.lang.String TAG;
    private long availableSpaceAfterBulkDelete;
    private long availableSpaceAfterDexopt;
    private long availableSpaceBefore;
    private int completeSize;
    private int dexoptCommandCountExecuted;
    private int dexoptCommandCountTotal;
    private int importantPackageCount;
    private final android.content.Context mContext;
    private java.util.List mDexoptCommands;
    private final com.android.server.pm.PackageManagerService mPackageManagerService;
    private final com.android.internal.logging.MetricsLogger metricsLogger;
    private long otaDexoptTimeStart;
    private int otherPackageCount;

    public void <init>(android.content.Context, com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.OtaDexoptService r0;
        android.content.Context r1;
        com.android.server.pm.PackageManagerService r2;
        com.android.internal.logging.MetricsLogger $r3;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.pm.PackageManagerService;

        specialinvoke r0.<android.content.pm.IOtaDexopt$Stub: void <init>()>();

        r0.<com.android.server.pm.OtaDexoptService: android.content.Context mContext> = r1;

        r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService> = r2;

        $r3 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r3.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger> = $r3;

        return;
    }

    private java.util.List generatePackageDexopts(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.OtaDexoptService r0;
        com.android.server.pm.PackageSetting r1;
        int i0;
        java.util.ArrayList r2;
        com.android.server.pm.OtaDexoptService$OTADexoptPackageDexOptimizer r3;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo r4;
        android.content.Context $r5, $r7;
        com.android.server.pm.PackageManagerService $r6, $r9;
        java.lang.Object $r8;
        com.android.server.pm.dex.DexManager $r10;
        java.lang.String $r11, $r12;
        java.lang.Throwable $r13;
        com.android.server.pm.parsing.pkg.AndroidPackage r14;
        com.android.server.pm.OtaDexoptService$1 r15;
        com.android.server.pm.dex.DexoptOptions r16;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        r14 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        entermonitor r0;

     label1:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        r15 = new com.android.server.pm.OtaDexoptService$1;

        $r5 = r0.<com.android.server.pm.OtaDexoptService: android.content.Context mContext>;

        specialinvoke r15.<com.android.server.pm.OtaDexoptService$1: void <init>(com.android.server.pm.OtaDexoptService,android.content.Context,boolean,java.util.List)>(r0, $r5, 1, r2);

        r3 = new com.android.server.pm.OtaDexoptService$OTADexoptPackageDexOptimizer;

        $r6 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r8 = $r6.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        $r7 = r0.<com.android.server.pm.OtaDexoptService: android.content.Context mContext>;

        specialinvoke r3.<com.android.server.pm.OtaDexoptService$OTADexoptPackageDexOptimizer: void <init>(com.android.server.pm.Installer,java.lang.Object,android.content.Context)>(r15, $r8, $r7);

        $r9 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r10 = virtualinvoke $r9.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager getDexManager()>();

        $r11 = interfaceinvoke r14.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r4 = virtualinvoke $r10.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>($r11);

        r16 = new com.android.server.pm.dex.DexoptOptions;

        $r12 = interfaceinvoke r14.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke r16.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,int)>($r12, i0, 4);

        virtualinvoke r3.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.lang.String[],com.android.server.pm.CompilerStats$PackageStats,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo,com.android.server.pm.dex.DexoptOptions)>(r14, r1, null, null, r4, r16);

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r13 := @caughtexception;

        exitmonitor r0;

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private long getAvailableSpace()
    {
        com.android.server.pm.OtaDexoptService r0;
        long l0, $l1, $l2;
        java.io.File $r1;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        l0 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: long getMainLowSpaceThreshold()>();

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $l1 = virtualinvoke $r1.<java.io.File: long getUsableSpace()>();

        $l2 = $l1 - l0;

        return $l2;
    }

    private long getMainLowSpaceThreshold()
    {
        com.android.server.pm.OtaDexoptService r0;
        java.io.File r1;
        long l0;
        android.content.Context $r2;
        android.os.storage.StorageManager $r3;
        byte $b1;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r2 = r0.<com.android.server.pm.OtaDexoptService: android.content.Context mContext>;

        $r3 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r2);

        l0 = virtualinvoke $r3.<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        return l0;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid low memory threshold");

        throw $r4;
    }

    private static int inMegabytes(long)
    {
        byte $b0;
        int $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        long l3, l4;

        l3 := @parameter0: long;

        l4 = l3 / 1048576L;

        $b0 = l4 cmp 2147483647L;

        if $b0 <= 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recording ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MB of free space, overflowing range");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OTADexopt", $r5);

        return 2147483647;

     label1:
        $i1 = (int) l4;

        return $i1;
    }

    static boolean lambda$prepare$0(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        com.android.server.pm.parsing.pkg.AndroidPackage $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        $r2 = "android";

        $r1 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r3 = interfaceinvoke $r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    static int lambda$prepare$1(com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0, r1;
        com.android.server.pm.pkg.PackageStateUnserialized $r2, $r3;
        long $l0, $l1;
        int $i2;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        $r2 = virtualinvoke r0.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l0 = virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $r3 = virtualinvoke r1.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l1 = virtualinvoke $r3.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l0, $l1);

        return $i2;
    }

    public static com.android.server.pm.OtaDexoptService main(android.content.Context, com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.OtaDexoptService $r1;
        com.android.server.pm.Installer $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

        r0 := @parameter1: com.android.server.pm.PackageManagerService;

        $r1 = new com.android.server.pm.OtaDexoptService;

        specialinvoke $r1.<com.android.server.pm.OtaDexoptService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService)>(r3, r0);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("otadexopt", $r1);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        specialinvoke $r1.<com.android.server.pm.OtaDexoptService: void moveAbArtifacts(com.android.server.pm.Installer)>($r2);

        return $r1;
    }

    private void moveAbArtifacts(com.android.server.pm.Installer)
    {
        com.android.server.pm.OtaDexoptService r0;
        java.util.Iterator r1, r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int i0, i4, i5, i6, i7, i8;
        java.lang.String r3, r5, $r15, $r17, $r18, $r19, $r20, $r21, $r23, $r24, $r25, $r28, $r34, r44;
        java.util.List $r6, r42;
        java.lang.IllegalStateException $r7;
        com.android.server.pm.PackageManagerService $r8, $r9, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r10, $r30;
        java.lang.Object $r16, $r26;
        java.io.File $r27, $r29;
        com.android.server.pm.Installer$InstallerException $r35;
        com.android.server.pm.Installer r36;
        java.util.Collection r38;
        com.android.server.pm.PackageSetting r40;
        java.lang.String[] r41, r43;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        r36 := @parameter0: com.android.server.pm.Installer;

        $r6 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        if $r6 != null goto label19;

        $r8 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $z0 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("OTADexopt", "No upgrade, skipping A/B artifacts check.");

        return;

     label01:
        $r9 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        r38 = virtualinvoke $r9.<com.android.server.pm.PackageManagerService: java.util.Collection getPackages()>();

        i4 = 0;

        i5 = 0;

        r1 = interfaceinvoke r38.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z7 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label18;

        $r16 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r16;

        if r2 != null goto label03;

        goto label17;

     label03:
        $z1 = staticinvoke <com.android.server.pm.PackageDexOptimizer: boolean canOptimizePackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        if $z1 != 0 goto label04;

        goto label17;

     label04:
        $r17 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        if $r17 != null goto label05;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can be optimized but has null codePath");

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("OTADexopt", $r34);

        goto label17;

     label05:
        $r18 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $z2 = virtualinvoke $r18.<java.lang.String: boolean startsWith(java.lang.String)>("/system");

        if $z2 != 0 goto label17;

        $r19 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $z3 = virtualinvoke $r19.<java.lang.String: boolean startsWith(java.lang.String)>("/vendor");

        if $z3 != 0 goto label16;

        $r20 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $z4 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>("/product");

        if $z4 != 0 goto label15;

        $r21 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $z5 = virtualinvoke $r21.<java.lang.String: boolean startsWith(java.lang.String)>("/system_ext");

        if $z5 == 0 goto label06;

        goto label17;

     label06:
        $r22 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r23 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r40 = virtualinvoke $r22.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r23);

        $r24 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r2, r40);

        $r25 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r2, r40);

        r41 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r24, $r25);

        r42 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.util.List getAllCodePathsExcludingResourceOnly(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        r43 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>(r41);

        i0 = lengthof r43;

        i6 = 0;

        i7 = i5;

        i8 = i4;

     label07:
        if i6 >= i0 goto label14;

        r3 = r43[i6];

        r4 = interfaceinvoke r42.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r26 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.lang.String) $r26;

        $r27 = new java.io.File;

        $r28 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke $r27.<java.io.File: void <init>(java.lang.String)>($r28);

        $r29 = staticinvoke <com.android.server.pm.PackageDexOptimizer: java.io.File getOatDir(java.io.File)>($r27);

        r5 = virtualinvoke $r29.<java.io.File: java.lang.String getAbsolutePath()>();

     label09:
        virtualinvoke r36.<com.android.server.pm.Installer: void moveAb(java.lang.String,java.lang.String,java.lang.String)>(r44, r3, r5);

     label10:
        i7 = i7 + 1;

        goto label12;

     label11:
        $r35 := @caughtexception;

     label12:
        i8 = i8 + 1;

        goto label08;

     label13:
        i6 = i6 + 1;

        goto label07;

     label14:
        i4 = i8;

        i5 = i7;

        goto label02;

     label15:
        goto label17;

     label16:
        goto label17;

     label17:
        goto label02;

     label18:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Moved ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("OTADexopt", $r15);

        return;

     label19:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should not be ota-dexopting when trying to move.");

        throw $r7;

        catch com.android.server.pm.Installer$InstallerException from label09 to label10 with label11;
    }

    private void performMetricsLogging()
    {
        com.android.server.pm.OtaDexoptService r0;
        long l0, $l2, $l4, $l6, $l12, $l13, $l14;
        int i1, $i3, $i5, $i7, $i8, $i9, $i10, $i11;
        com.android.internal.logging.MetricsLogger $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        java.util.concurrent.TimeUnit $r8;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        $r1 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $l2 = r0.<com.android.server.pm.OtaDexoptService: long availableSpaceBefore>;

        $i3 = staticinvoke <com.android.server.pm.OtaDexoptService: int inMegabytes(long)>($l2);

        virtualinvoke $r1.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_available_space_before_mb", $i3);

        $r2 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $l4 = r0.<com.android.server.pm.OtaDexoptService: long availableSpaceAfterBulkDelete>;

        $i5 = staticinvoke <com.android.server.pm.OtaDexoptService: int inMegabytes(long)>($l4);

        virtualinvoke $r2.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_available_space_after_bulk_delete_mb", $i5);

        $r3 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $l6 = r0.<com.android.server.pm.OtaDexoptService: long availableSpaceAfterDexopt>;

        $i7 = staticinvoke <com.android.server.pm.OtaDexoptService: int inMegabytes(long)>($l6);

        virtualinvoke $r3.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_available_space_after_dexopt_mb", $i7);

        $r4 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $i8 = r0.<com.android.server.pm.OtaDexoptService: int importantPackageCount>;

        virtualinvoke $r4.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_num_important_packages", $i8);

        $r5 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $i9 = r0.<com.android.server.pm.OtaDexoptService: int otherPackageCount>;

        virtualinvoke $r5.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_num_other_packages", $i9);

        $r6 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $i10 = r0.<com.android.server.pm.OtaDexoptService: int dexoptCommandCountTotal>;

        virtualinvoke $r6.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_num_commands", $i10);

        $r7 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        $i11 = r0.<com.android.server.pm.OtaDexoptService: int dexoptCommandCountExecuted>;

        virtualinvoke $r7.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_num_commands_executed", $i11);

        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l12 = r0.<com.android.server.pm.OtaDexoptService: long otaDexoptTimeStart>;

        $l13 = l0 - $l12;

        $l14 = virtualinvoke $r8.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l13);

        i1 = (int) $l14;

        $r9 = r0.<com.android.server.pm.OtaDexoptService: com.android.internal.logging.MetricsLogger metricsLogger>;

        virtualinvoke $r9.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("ota_dexopt_time_s", i1);

        return;
    }

    private void prepareMetricsLogging(int, int, long, long)
    {
        com.android.server.pm.OtaDexoptService r0;
        int i0, i1, $i4;
        long l2, l3, $l5;
        java.util.List $r1;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        r0.<com.android.server.pm.OtaDexoptService: long availableSpaceBefore> = l2;

        r0.<com.android.server.pm.OtaDexoptService: long availableSpaceAfterBulkDelete> = l3;

        r0.<com.android.server.pm.OtaDexoptService: long availableSpaceAfterDexopt> = 0L;

        r0.<com.android.server.pm.OtaDexoptService: int importantPackageCount> = i0;

        r0.<com.android.server.pm.OtaDexoptService: int otherPackageCount> = i1;

        $r1 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $i4 = interfaceinvoke $r1.<java.util.List: int size()>();

        r0.<com.android.server.pm.OtaDexoptService: int dexoptCommandCountTotal> = $i4;

        r0.<com.android.server.pm.OtaDexoptService: int dexoptCommandCountExecuted> = 0;

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        r0.<com.android.server.pm.OtaDexoptService: long otaDexoptTimeStart> = $l5;

        return;
    }

    public void cleanup() throws android.os.RemoteException
    {
        com.android.server.pm.OtaDexoptService r0;
        long $l1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        entermonitor r0;

     label1:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("OTADexopt", "Cleaning up OTA Dexopt state.");

        r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands> = null;

        $l1 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: long getAvailableSpace()>();

        r0.<com.android.server.pm.OtaDexoptService: long availableSpaceAfterDexopt> = $l1;

        specialinvoke r0.<com.android.server.pm.OtaDexoptService: void performMetricsLogging()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dexoptNextPackage() throws android.os.RemoteException
    {
        com.android.server.pm.OtaDexoptService r0;
        java.lang.Throwable $r1;
        java.lang.UnsupportedOperationException r2;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        entermonitor r0;

     label1:
        r2 = new java.lang.UnsupportedOperationException;

        specialinvoke r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw r2;

     label2:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public float getProgress() throws android.os.RemoteException
    {
        com.android.server.pm.OtaDexoptService r0;
        java.util.List $r2;
        int $i0, $i1, i2, i3, i4;
        float $f0, f1, f2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        entermonitor r0;

     label1:
        i2 = r0.<com.android.server.pm.OtaDexoptService: int completeSize>;

     label2:
        if i2 != 0 goto label3;

        exitmonitor r0;

        return 1.0F;

     label3:
        $r2 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i0 = r0.<com.android.server.pm.OtaDexoptService: int completeSize>;

        $i1 = $i0 - i3;

        f1 = (float) $i1;

        i4 = r0.<com.android.server.pm.OtaDexoptService: int completeSize>;

     label4:
        $f0 = (float) i4;

        f2 = f1 / $f0;

        exitmonitor r0;

        return f2;

     label5:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public boolean isDone() throws android.os.RemoteException
    {
        com.android.server.pm.OtaDexoptService r0;
        boolean z0;
        java.util.List $r1, $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException r4;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        if $r1 == null goto label3;

        $r2 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

     label2:
        exitmonitor r0;

        return z0;

     label3:
        r4 = new java.lang.IllegalStateException;

        specialinvoke r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("done() called before prepare()");

        throw r4;

     label4:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public java.lang.String nextDexoptCommand() throws android.os.RemoteException
    {
        com.android.server.pm.OtaDexoptService r0;
        java.lang.StringBuilder r1, r17;
        java.util.List $r2, $r3, $r4, $r7, $r11;
        boolean $z0;
        java.lang.Object $r5;
        long $l0;
        byte $b1;
        int $i2, $i3, $i5, $i6;
        java.lang.String $r10, $r14, r16;
        java.lang.Throwable $r15;
        java.lang.IllegalStateException r18;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        if $r2 == null goto label7;

        $r3 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        exitmonitor r0;

        return "(all done)";

     label3:
        $r4 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>(0);

        r16 = (java.lang.String) $r5;

        $l0 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: long getAvailableSpace()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label5;

        $i5 = r0.<com.android.server.pm.OtaDexoptService: int dexoptCommandCountExecuted>;

        $i6 = $i5 + 1;

        r0.<com.android.server.pm.OtaDexoptService: int dexoptCommandCountExecuted> = $i6;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next command: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("OTADexopt", $r14);

     label4:
        exitmonitor r0;

        return r16;

     label5:
        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough space for OTA dexopt, stopping with ");

        $r7 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $i2 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i3 = $i2 + 1;

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" commands left.");

        $r10 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OTADexopt", $r10);

        $r11 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        interfaceinvoke $r11.<java.util.List: void clear()>();

     label6:
        exitmonitor r0;

        return "(no free space)";

     label7:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("dexoptNextPackage() called before prepare()");

        throw r18;

     label8:
        $r15 := @caughtexception;

        exitmonitor r0;

        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.pm.OtaDexoptService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.pm.OtaDexoptShellCommand $r7;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.pm.OtaDexoptShellCommand;

        specialinvoke $r7.<com.android.server.pm.OtaDexoptShellCommand: void <init>(com.android.server.pm.OtaDexoptService)>(r0);

        virtualinvoke $r7.<com.android.server.pm.OtaDexoptShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void prepare() throws android.os.RemoteException
    {
        com.android.server.pm.OtaDexoptService r0;
        long l0, l1, $l9, $l12;
        java.util.List $r1, $r15, $r40, $r41, $r44, $r45, r51;
        com.android.server.pm.PackageManagerService $r2, $r3, $r7, $r8, $r13, $r36;
        com.android.server.pm.Settings $r4, $r9;
        android.util.ArrayMap $r5, $r10, $r14;
        java.util.Collection $r6, $r11;
        java.util.function.Predicate $r12, r78, r79;
        int $i2, $i3, $i4, $i5, $i7, $i8;
        boolean $z4, $z5, $z6, $z7, $z10;
        byte $b6;
        com.android.server.pm.'-$$Lambda$OtaDexoptService$f-VUEY5wfogCtnGtBDIikkJ2pcE' $r16;
        java.lang.Object $r17, $r22, $r34, $r37, $r42, r50;
        com.android.server.pm.pkg.PackageStateUnserialized $r19, $r27;
        java.lang.String $r21, $r24, $r29, $r31, $r33, $r35;
        com.android.server.pm.parsing.pkg.AndroidPackage $r38, $r39, $r43;
        java.lang.Throwable $r46, $r47;
        java.lang.Exception $r48;
        com.android.server.pm.'-$$Lambda$OtaDexoptService$-kxeeF3jeQWWNnvm1X8l5hpWPQ8' r49;
        java.util.Iterator r54, r56, r60, r64;
        com.android.server.pm.PackageSetting r55, r57, r61, r62, r65;
        java.util.ArrayList r71, r72;
        java.lang.IllegalStateException r73, r77;
        java.lang.StringBuilder r74, r75, r76;
        java.util.Comparator r80;

        r0 := @this: com.android.server.pm.OtaDexoptService;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        if $r1 != null goto label25;

        r49 = <com.android.server.pm._$$Lambda$OtaDexoptService$_kxeeF3jeQWWNnvm1X8l5hpWPQ8: com.android.server.pm.'-$$Lambda$OtaDexoptService$-kxeeF3jeQWWNnvm1X8l5hpWPQ8' INSTANCE>;

        $r2 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        r50 = $r2.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r50;

     label02:
        $r3 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r4 = $r3.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Collection values()>();

        $r7 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        r51 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.util.List getPackagesForDexopt(java.util.Collection,com.android.server.pm.PackageManagerService,boolean)>($r6, $r7, 1);

        r78 = (java.util.function.Predicate) r49;

        interfaceinvoke r51.<java.util.List: boolean removeIf(java.util.function.Predicate)>(r78);

        r71 = new java.util.ArrayList;

        $r8 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r9 = $r8.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.util.Collection values()>();

        specialinvoke r71.<java.util.ArrayList: void <init>(java.util.Collection)>($r11);

        interfaceinvoke r71.<java.util.List: boolean removeAll(java.util.Collection)>(r51);

        $r12 = <com.android.server.pm.PackageManagerServiceUtils: java.util.function.Predicate REMOVE_IF_NULL_PKG>;

        interfaceinvoke r71.<java.util.List: boolean removeIf(java.util.function.Predicate)>($r12);

        r79 = (java.util.function.Predicate) r49;

        interfaceinvoke r71.<java.util.List: boolean removeIf(java.util.function.Predicate)>(r79);

        r72 = new java.util.ArrayList;

        $r13 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r14 = $r13.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i2 = virtualinvoke $r14.<android.util.ArrayMap: int size()>();

        $i3 = $i2 * 3;

        $i4 = $i3 / 2;

        specialinvoke r72.<java.util.ArrayList: void <init>(int)>($i4);

        r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands> = r72;

        exitmonitor r50;

     label03:
        r54 = interfaceinvoke r51.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r42 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (com.android.server.pm.PackageSetting) $r42;

        $r44 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $r43 = r55.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r45 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: java.util.List generatePackageDexopts(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int)>($r43, r55, 4);

        interfaceinvoke $r44.<java.util.List: boolean addAll(java.util.Collection)>($r45);

     label05:
        goto label04;

     label06:
        r56 = interfaceinvoke r71.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z5 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label10;

        $r37 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (com.android.server.pm.PackageSetting) $r37;

        $r38 = r57.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z7 = interfaceinvoke $r38.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isCoreApp()>();

        if $z7 != 0 goto label09;

        $r40 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $r39 = r57.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r41 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: java.util.List generatePackageDexopts(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int)>($r39, r57, 0);

        interfaceinvoke $r40.<java.util.List: boolean addAll(java.util.Collection)>($r41);

     label08:
        goto label07;

     label09:
        r73 = new java.lang.IllegalStateException;

        specialinvoke r73.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Found a core app that\'s not important");

        throw r73;

     label10:
        $r15 = r0.<com.android.server.pm.OtaDexoptService: java.util.List mDexoptCommands>;

        $i5 = interfaceinvoke $r15.<java.util.List: int size()>();

        r0.<com.android.server.pm.OtaDexoptService: int completeSize> = $i5;

        l0 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: long getAvailableSpace()>();

     label11:
        $b6 = l0 cmp 1073741824L;

        if $b6 >= 0 goto label15;

     label12:
        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Low on space, deleting oat files in an attempt to free up space: ");

        $r31 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.lang.String packagesToString(java.util.List)>(r71);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("OTADexopt", $r33);

        r60 = interfaceinvoke r71.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z6 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label15;

        $r34 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>();

        r61 = (com.android.server.pm.PackageSetting) $r34;

        $r36 = r0.<com.android.server.pm.OtaDexoptService: com.android.server.pm.PackageManagerService mPackageManagerService>;

        $r35 = r61.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r36.<com.android.server.pm.PackageManagerService: void deleteOatArtifactsOfPackage(java.lang.String)>($r35);

     label14:
        goto label13;

     label15:
        l1 = specialinvoke r0.<com.android.server.pm.OtaDexoptService: long getAvailableSpace()>();

        $i7 = interfaceinvoke r51.<java.util.List: int size()>();

        $i8 = interfaceinvoke r71.<java.util.List: int size()>();

        specialinvoke r0.<com.android.server.pm.OtaDexoptService: void prepareMetricsLogging(int,int,long,long)>($i7, $i8, l0, l1);

     label16:
        $r16 = <com.android.server.pm._$$Lambda$OtaDexoptService$f_VUEY5wfogCtnGtBDIikkJ2pcE: com.android.server.pm.'-$$Lambda$OtaDexoptService$f-VUEY5wfogCtnGtBDIikkJ2pcE' INSTANCE>;

        r80 = (java.util.Comparator) $r16;

        $r17 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r51, r80);

        r62 = (com.android.server.pm.PackageSetting) $r17;

        r75 = new java.lang.StringBuilder;

        specialinvoke r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("A/B OTA: lastUsed time = ");

        $r19 = virtualinvoke r62.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l9 = virtualinvoke $r19.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r21 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("OTADexopt", $r21);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("OTADexopt", "A/B OTA: deprioritized packages:");

        r64 = interfaceinvoke r71.<java.util.List: java.util.Iterator iterator()>();

     label17:
        $z10 = interfaceinvoke r64.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label19;

        $r22 = interfaceinvoke r64.<java.util.Iterator: java.lang.Object next()>();

        r65 = (com.android.server.pm.PackageSetting) $r22;

        r76 = new java.lang.StringBuilder;

        specialinvoke r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r24 = r65.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r27 = virtualinvoke r65.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l12 = virtualinvoke $r27.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        virtualinvoke r76.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        $r29 = virtualinvoke r76.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("OTADexopt", $r29);

     label18:
        goto label17;

     label19:
        goto label21;

     label20:
        $r48 := @caughtexception;

     label21:
        exitmonitor r0;

        return;

     label22:
        $r46 := @caughtexception;

     label23:
        exitmonitor r50;

     label24:
        throw $r46;

     label25:
        r77 = new java.lang.IllegalStateException;

        specialinvoke r77.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already called prepare()");

        throw r77;

     label26:
        $r47 := @caughtexception;

        exitmonitor r0;

        throw $r47;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label04 to label05 with label26;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label07 to label08 with label26;
        catch java.lang.Throwable from label09 to label10 with label26;
        catch java.lang.Throwable from label10 to label11 with label26;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label16 with label26;
        catch java.lang.Exception from label16 to label17 with label20;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Exception from label17 to label18 with label20;
        catch java.lang.Throwable from label17 to label18 with label26;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.OtaDexoptService: java.lang.String TAG> = "OTADexopt";

        <com.android.server.pm.OtaDexoptService: boolean DEBUG_DEXOPT> = 1;

        <com.android.server.pm.OtaDexoptService: long BULK_DELETE_THRESHOLD> = 1073741824L;

        return;
    }
}
