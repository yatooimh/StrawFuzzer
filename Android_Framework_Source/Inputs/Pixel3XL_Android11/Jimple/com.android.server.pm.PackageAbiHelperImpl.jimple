final class com.android.server.pm.PackageAbiHelperImpl extends java.lang.Object implements com.android.server.pm.PackageAbiHelper
{

    void <init>()
    {
        com.android.server.pm.PackageAbiHelperImpl r0;

        r0 := @this: com.android.server.pm.PackageAbiHelperImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String calculateBundledApkRoot(java.lang.String)
    {
        java.io.File r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r29, $r36, r39, r43;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r15, $r16, $r17, $r21, $r23, $r25, $r27, $r30, $r35, $r37, r38, $r45;
        int $i1;
        java.lang.StringBuilder $r18, $r22, $r32, r44;
        java.lang.Throwable $r31;
        java.lang.String[] r40;

        r38 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r38);

        $r3 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $z0 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r3, $r2);

        if $z0 == 0 goto label01;

        r39 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        goto label14;

     label01:
        $r4 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r4, $r2);

        if $z1 == 0 goto label02;

        r39 = staticinvoke <android.os.Environment: java.io.File getOemDirectory()>();

        goto label14;

     label02:
        $r5 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        $z2 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r5, $r2);

        if $z2 == 0 goto label03;

        r39 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        goto label14;

     label03:
        $r6 = staticinvoke <android.os.Environment: java.io.File getOdmDirectory()>();

        $z3 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r6, $r2);

        if $z3 == 0 goto label04;

        r39 = staticinvoke <android.os.Environment: java.io.File getOdmDirectory()>();

        goto label14;

     label04:
        $r7 = staticinvoke <android.os.Environment: java.io.File getProductDirectory()>();

        $z4 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r7, $r2);

        if $z4 == 0 goto label05;

        r39 = staticinvoke <android.os.Environment: java.io.File getProductDirectory()>();

        goto label14;

     label05:
        $r8 = staticinvoke <android.os.Environment: java.io.File getSystemExtDirectory()>();

        $z5 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r8, $r2);

        if $z5 == 0 goto label06;

        r39 = staticinvoke <android.os.Environment: java.io.File getSystemExtDirectory()>();

        goto label14;

     label06:
        $r9 = staticinvoke <android.os.Environment: java.io.File getOdmDirectory()>();

        $z6 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r9, $r2);

        if $z6 == 0 goto label07;

        r39 = staticinvoke <android.os.Environment: java.io.File getOdmDirectory()>();

        goto label14;

     label07:
        $r10 = staticinvoke <android.os.Environment: java.io.File getApexDirectory()>();

        $z7 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r10, $r2);

        if $z7 == 0 goto label10;

        $r16 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r17 = <java.io.File: java.lang.String separator>;

        r40 = virtualinvoke $r16.<java.lang.String: java.lang.String[] split(java.lang.String)>($r17);

        $i1 = lengthof r40;

        if $i1 <= 2 goto label08;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = r40[1];

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = <java.io.File: java.lang.String separator>;

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = r40[2];

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = new java.io.File;

        $r30 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>($r30);

        r39 = $r29;

        goto label09;

     label08:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t canonicalize code path ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        r39 = staticinvoke <android.os.Environment: java.io.File getApexDirectory()>();

     label09:
        goto label14;

     label10:
        r39 = virtualinvoke $r2.<java.io.File: java.io.File getCanonicalFile()>();

        r43 = virtualinvoke r39.<java.io.File: java.io.File getParentFile()>();

     label11:
        r1 = virtualinvoke r43.<java.io.File: java.io.File getParentFile()>();

     label12:
        if r1 == null goto label13;

        r39 = r43;

        r43 = r1;

        goto label11;

     label13:
        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized code path ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - using ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r15 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

     label14:
        $r45 = virtualinvoke r39.<java.io.File: java.lang.String getPath()>();

        return $r45;

     label15:
        $r31 := @caughtexception;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t canonicalize code path ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r35);

        $r36 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $r37 = virtualinvoke $r36.<java.io.File: java.lang.String getPath()>();

        return $r37;

        catch java.io.IOException from label10 to label11 with label15;
        catch java.io.IOException from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label15;
    }

    private static java.lang.String deriveCodePathName(java.lang.String)
    {
        java.lang.String r0, r1, $r3, $r8;
        java.io.File $r2;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        r1 = virtualinvoke $r2.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        return r1;

     label2:
        $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z1 != 0 goto label4;

        $z2 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z2 == 0 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Odd, ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t look like an APK");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        return null;

     label4:
        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r3;
    }

    private com.android.server.pm.PackageAbiHelper$Abis getBundledAppAbi(com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageAbiHelperImpl r0;
        java.lang.String r1, $r4, $r7, $r16, $r20, $r23, $r24, $r26, $r29, $r30, $r33, $r36, r38, r41, r42;
        java.io.File $r3, $r5, $r21, $r27, $r31, $r32, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, $z8;
        java.lang.String[] $r6, $r8, $r9, $r10, $r11, $r17, $r18, $r19, $r22, $r25, $r28, $r40;
        java.lang.StringBuilder $r12;
        com.android.server.pm.parsing.pkg.AndroidPackage r37;
        com.android.server.pm.PackageAbiHelper$Abis $r44;

        r0 := @this: com.android.server.pm.PackageAbiHelperImpl;

        r37 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r38 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        $r3 = new java.io.File;

        $r4 = interfaceinvoke r37.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>($r3);

        if $z0 == 0 goto label01;

        $r31 = new java.io.File;

        $r32 = new java.io.File;

        specialinvoke $r32.<java.io.File: void <init>(java.lang.String,java.lang.String)>("lib64", r1);

        $r33 = virtualinvoke $r32.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r31.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r38, $r33);

        z6 = virtualinvoke $r31.<java.io.File: boolean exists()>();

        $r34 = new java.io.File;

        $r35 = new java.io.File;

        specialinvoke $r35.<java.io.File: void <init>(java.lang.String,java.lang.String)>("lib", r1);

        $r36 = virtualinvoke $r35.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r34.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r38, $r36);

        z7 = virtualinvoke $r34.<java.io.File: boolean exists()>();

        goto label05;

     label01:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "lib");

        $r6 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r6);

        if $z1 != 0 goto label02;

        $r25 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r26 = $r25[0];

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r26);

        if $z5 != 0 goto label02;

        $r27 = new java.io.File;

        $r28 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $r29 = $r28[0];

        $r30 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r29);

        specialinvoke $r27.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r30);

        z6 = virtualinvoke $r27.<java.io.File: boolean exists()>();

        goto label03;

     label02:
        z6 = 0;

     label03:
        $r40 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $z8 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r40);

        if $z8 != 0 goto label04;

        $r19 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r20 = $r19[0];

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r20);

        if $z4 != 0 goto label04;

        $r21 = new java.io.File;

        $r22 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $r23 = $r22[0];

        $r24 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r23);

        specialinvoke $r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, $r24);

        z7 = virtualinvoke $r21.<java.io.File: boolean exists()>();

        goto label05;

     label04:
        z7 = 0;

     label05:
        if z6 == 0 goto label06;

        if z7 != 0 goto label06;

        $r18 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        r41 = $r18[0];

        r42 = null;

        goto label11;

     label06:
        if z7 == 0 goto label07;

        if z6 != 0 goto label07;

        $r17 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        r41 = $r17[0];

        r42 = null;

        goto label11;

     label07:
        if z7 == 0 goto label10;

        if z6 == 0 goto label10;

        $z2 = interfaceinvoke r37.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isMultiArch()>();

        if $z2 != 0 goto label08;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has multiple bundled libs, but is not multiarch.");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r16);

     label08:
        $r7 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPreferredInstructionSet()>();

        $z3 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitInstructionSet(java.lang.String)>($r7);

        if $z3 == 0 goto label09;

        $r10 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        r41 = $r10[0];

        $r11 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        r42 = $r11[0];

        goto label11;

     label09:
        $r8 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        r41 = $r8[0];

        $r9 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        r42 = $r9[0];

        goto label11;

     label10:
        r41 = null;

        r42 = null;

     label11:
        $r44 = new com.android.server.pm.PackageAbiHelper$Abis;

        specialinvoke $r44.<com.android.server.pm.PackageAbiHelper$Abis: void <init>(java.lang.String,java.lang.String)>(r41, r42);

        return $r44;
    }

    private static com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.PackageAbiHelper$Abis, java.io.File, java.lang.String, java.lang.String, boolean, boolean)
    {
        boolean z0, z1, z2, z3, z4, z5;
        java.io.File $r1, $r2, $r3, $r6, $r9, $r12, $r14, $r16, $r18, r20;
        java.lang.String $r4, $r5, $r7, $r8, $r10, $r11, $r15, r21, r22, r24, r25, r26, r27, r28, r29, r30, r31, r32;
        java.lang.String[] $r13, $r17;
        com.android.server.pm.PackageAbiHelper$Abis r19;
        com.android.server.pm.PackageAbiHelper$NativeLibraryPaths $r33;

        r19 := @parameter0: com.android.server.pm.PackageAbiHelper$Abis;

        r20 := @parameter1: java.io.File;

        r21 := @parameter2: java.lang.String;

        r22 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        z0 := @parameter5: boolean;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r21);

        if z1 == 0 goto label01;

        if z0 != 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        z3 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>($r1);

        if z3 == 0 goto label11;

        if z2 == 0 goto label09;

        r24 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: java.lang.String calculateBundledApkRoot(java.lang.String)>(r22);

        $r11 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(com.android.server.pm.PackageAbiHelper$Abis)>(r19);

        z4 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitInstructionSet(java.lang.String)>($r11);

        r25 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: java.lang.String deriveCodePathName(java.lang.String)>(r21);

        if z4 == 0 goto label03;

        r26 = "lib64";

        goto label04;

     label03:
        r26 = "lib";

     label04:
        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>(r24);

        $r13 = newarray (java.lang.String)[2];

        $r13[0] = r26;

        $r13[1] = r25;

        $r14 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r12, $r13);

        r27 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>();

        $r15 = r19.<com.android.server.pm.PackageAbiHelper$Abis: java.lang.String secondary>;

        if $r15 == null goto label07;

        if z4 == 0 goto label05;

        r28 = "lib";

        goto label06;

     label05:
        r28 = "lib64";

     label06:
        $r16 = new java.io.File;

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>(r24);

        $r17 = newarray (java.lang.String)[2];

        $r17[0] = r28;

        $r17[1] = r25;

        $r18 = staticinvoke <android.os.Environment: java.io.File buildPath(java.io.File,java.lang.String[])>($r16, $r17);

        r29 = virtualinvoke $r18.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label08;

     label07:
        r29 = null;

     label08:
        r30 = r27;

        goto label10;

     label09:
        $r9 = new java.io.File;

        $r10 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: java.lang.String deriveCodePathName(java.lang.String)>(r21);

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>(r20, $r10);

        r30 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>();

        r29 = null;

     label10:
        z5 = 0;

        r31 = r30;

        goto label13;

     label11:
        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "lib");

        r32 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        z5 = 1;

        $r3 = new java.io.File;

        $r4 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPrimaryInstructionSet(com.android.server.pm.PackageAbiHelper$Abis)>(r19);

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r32, $r4);

        r31 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = r19.<com.android.server.pm.PackageAbiHelper$Abis: java.lang.String secondary>;

        if $r5 == null goto label12;

        $r6 = new java.io.File;

        $r7 = r19.<com.android.server.pm.PackageAbiHelper$Abis: java.lang.String secondary>;

        $r8 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r7);

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r32, $r8);

        r29 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        r30 = r32;

        goto label13;

     label12:
        r29 = null;

        r30 = r32;

     label13:
        $r33 = new com.android.server.pm.PackageAbiHelper$NativeLibraryPaths;

        specialinvoke $r33.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: void <init>(java.lang.String,boolean,java.lang.String,java.lang.String)>(r30, z5, r31, r29);

        return $r33;
    }

    private static void maybeThrowExceptionForMultiArchCopy(java.lang.String, int) throws com.android.server.pm.PackageManagerException
    {
        java.lang.String r0;
        int i0;
        com.android.server.pm.PackageManagerException $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 >= 0 goto label2;

        if i0 == -114 goto label2;

        if i0 != -113 goto label1;

        goto label2;

     label1:
        $r1 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r1.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(i0, r0);

        throw $r1;

     label2:
        return;
    }

    public android.util.Pair derivePackageAbi(com.android.server.pm.parsing.pkg.AndroidPackage, boolean, java.lang.String, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageAbiHelperImpl r0;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, $z13;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.String $r3, $r5, $r6, $r8, r29, r30, r32, $r33, r40, r42, r43, r45, r46, r54, r55, $r57, $r58, $r63, $r64;
        java.io.File $r4, $r62, r67;
        java.lang.String[] $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r41, r47, r48, r49;
        java.lang.Throwable $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, r38, r39;
        com.android.server.pm.parsing.pkg.AndroidPackage r28;
        com.android.server.pm.PackageAbiHelper$NativeLibraryPaths r31, $r65;
        com.android.internal.content.NativeLibraryHelper$Handle r34, r35, r36, r50;
        com.android.server.pm.PackageAbiHelper$Abis r66, r74;
        com.android.server.pm.PackageManagerException r68, r69, r71, r72;
        java.lang.StringBuilder r70, r73;
        android.util.Pair r75;
        java.io.IOException r76;

        r0 := @this: com.android.server.pm.PackageAbiHelperImpl;

        r28 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        r29 := @parameter2: java.lang.String;

        z11 := @parameter3: boolean;

        r30 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r28);

        r66 = new com.android.server.pm.PackageAbiHelper$Abis;

        $r3 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r28);

        specialinvoke r66.<com.android.server.pm.PackageAbiHelper$Abis: void <init>(java.lang.String,java.lang.String)>(r30, $r3);

        $r4 = <com.android.server.pm.PackageManagerService: java.io.File sAppLib32InstallDir>;

        $r5 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r6 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $z4 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        r31 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.PackageAbiHelper$Abis,java.io.File,java.lang.String,java.lang.String,boolean,boolean)>(r66, $r4, $r5, $r6, $z4, z0);

        $z5 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z5 == 0 goto label001;

        if z0 != 0 goto label001;

        z11 = 0;

        goto label001;

     label001:
        r32 = r31.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: java.lang.String nativeLibraryRootDir>;

        z1 = r31.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: boolean nativeLibraryRootRequiresIsa>;

        $r33 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        z2 = staticinvoke <android.os.incremental.IncrementalManager: boolean isIncrementalPath(java.lang.String)>($r33);

        r34 = null;

        r35 = null;

     label002:
        r36 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: com.android.internal.content.NativeLibraryHelper$Handle createNativeLibraryHandle(com.android.server.pm.parsing.pkg.AndroidPackage)>(r28);

     label003:
        r35 = r36;

        r34 = r36;

     label004:
        r67 = new java.io.File;

     label005:
        r35 = r36;

        r34 = r36;

     label006:
        specialinvoke r67.<java.io.File: void <init>(java.lang.String)>(r32);

     label007:
        r35 = r36;

        r34 = r36;

     label008:
        z3 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isMultiArch()>();

     label009:
        if z3 == 0 goto label060;

        i1 = -114;

     label010:
        $r9 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        i2 = lengthof $r9;

     label011:
        if i2 <= 0 goto label017;

        if z11 == 0 goto label014;

     label012:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "copyNativeBinaries");

        $r15 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        i3 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean,boolean)>(r36, r67, $r15, z1, z2);

     label013:
        goto label015;

     label014:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "findSupportedAbi");

        $r14 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        i3 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r36, $r14);

     label015:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label016:
        i1 = i3;

     label017:
        if i1 < 0 goto label023;

     label018:
        $z10 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>(r28);

        if $z10 == 0 goto label023;

     label019:
        if z11 != 0 goto label020;

        goto label023;

     label020:
        r68 = new com.android.server.pm.PackageManagerException;

        specialinvoke r68.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Shared library native lib extraction not supported");

        throw r68;

     label021:
        $r22 := @caughtexception;

        r38 = $r22;

        goto label129;

     label022:
        $r19 := @caughtexception;

        r39 = $r19;

        r40 = null;

        goto label116;

     label023:
        staticinvoke <com.android.server.pm.PackageAbiHelperImpl: void maybeThrowExceptionForMultiArchCopy(java.lang.String,int)>("Error unpackaging 32 bit native libs for multiarch app.", i1);

        $r41 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        i4 = lengthof $r41;

     label024:
        if i4 <= 0 goto label036;

        if z11 == 0 goto label029;

        r42 = null;

     label025:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "copyNativeBinaries");

     label026:
        r42 = null;

     label027:
        $r13 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        i5 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean,boolean)>(r36, r67, $r13, z1, z2);

     label028:
        goto label033;

     label029:
        r42 = null;

     label030:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "findSupportedAbi");

     label031:
        r42 = null;

     label032:
        $r12 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        i5 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r36, $r12);

     label033:
        r42 = null;

     label034:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label035:
        goto label037;

     label036:
        i5 = -114;

     label037:
        r42 = null;

     label038:
        staticinvoke <com.android.server.pm.PackageAbiHelperImpl: void maybeThrowExceptionForMultiArchCopy(java.lang.String,int)>("Error unpackaging 64 bit native libs for multiarch app.", i5);

     label039:
        r43 = null;

        if i5 < 0 goto label050;

        if z11 == 0 goto label048;

        r42 = null;

     label040:
        $z9 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>(r28);

        if $z9 != 0 goto label042;

     label041:
        goto label048;

     label042:
        r42 = null;

     label043:
        r69 = new com.android.server.pm.PackageManagerException;

     label044:
        r42 = null;

     label045:
        specialinvoke r69.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Shared library native lib extraction not supported");

     label046:
        r42 = null;

     label047:
        throw r69;

     label048:
        r42 = null;

     label049:
        $r11 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        r43 = $r11[i5];

     label050:
        r45 = r43;

        r46 = null;

        if i1 < 0 goto label057;

        r42 = r43;

     label051:
        $r10 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        r46 = $r10[i1];

     label052:
        if i5 < 0 goto label056;

        r42 = r43;

     label053:
        $z8 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isUse32BitAbi()>();

        if $z8 == 0 goto label055;

     label054:
        r45 = r46;

        r46 = r43;

        goto label057;

     label055:
        r45 = r43;

        goto label057;

     label056:
        r45 = r46;

        r46 = null;

     label057:
        r29 = r45;

        goto label110;

     label058:
        $r26 := @caughtexception;

        r38 = $r26;

        goto label129;

     label059:
        $r18 := @caughtexception;

        r39 = $r18;

        r40 = null;

        goto label116;

     label060:
        if r29 == null goto label065;

        r42 = null;

     label061:
        r47 = newarray (java.lang.String)[1];

     label062:
        r47[0] = r29;

        goto label066;

     label063:
        $r17 := @caughtexception;

        r38 = $r17;

        goto label129;

     label064:
        $r25 := @caughtexception;

        r39 = $r25;

        r40 = r42;

        goto label116;

     label065:
        r47 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

     label066:
        $r7 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        i0 = lengthof $r7;

     label067:
        r48 = r47;

        z12 = 0;

        if i0 <= 0 goto label072;

        r48 = r47;

        z12 = 0;

        if r29 != null goto label072;

        r42 = null;

        r48 = r47;

        z12 = 0;

     label068:
        $z7 = staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle)>(r36);

        if $z7 == 0 goto label072;

     label069:
        r42 = null;

     label070:
        r48 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label071:
        z12 = 1;

     label072:
        if z11 == 0 goto label077;

        r42 = null;

     label073:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "copyNativeBinaries");

     label074:
        r42 = null;

     label075:
        i6 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean,boolean)>(r36, r67, r48, z1, z2);

     label076:
        r49 = r48;

        goto label082;

     label077:
        r50 = r36;

     label078:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "findSupportedAbi");

     label079:
        r50 = r36;

     label080:
        i6 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r36, r48);

     label081:
        r49 = r48;

     label082:
        r50 = r36;

     label083:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label084:
        if i6 >= 0 goto label099;

        if i6 != -114 goto label085;

        goto label099;

     label085:
        r50 = r36;

     label086:
        r71 = new com.android.server.pm.PackageManagerException;

     label087:
        r50 = r36;

     label088:
        r70 = new java.lang.StringBuilder;

     label089:
        r50 = r36;

     label090:
        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

     label091:
        r50 = r36;

     label092:
        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error unpackaging native libs for app, errorCode=");

     label093:
        r50 = r36;

     label094:
        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

     label095:
        r50 = r36;

     label096:
        $r8 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r71.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, $r8);

     label097:
        r50 = r36;

     label098:
        throw r71;

     label099:
        if i6 < 0 goto label108;

        r50 = r36;

     label100:
        $z6 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>(r28);

        if $z6 != 0 goto label102;

     label101:
        r29 = r49[i6];

        r46 = null;

        goto label110;

     label102:
        r50 = r36;

     label103:
        r72 = new com.android.server.pm.PackageManagerException;

     label104:
        r50 = r36;

     label105:
        specialinvoke r72.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Shared library with native libs must be multiarch");

     label106:
        r50 = r36;

     label107:
        throw r72;

     label108:
        if i6 != -114 goto label109;

        if r29 == null goto label109;

        r46 = null;

        goto label110;

     label109:
        r29 = null;

        r46 = null;

        if z12 == 0 goto label110;

        r29 = r49[0];

        r46 = null;

     label110:
        r54 = r29;

        r55 = r46;

        goto label127;

     label111:
        $r16 := @caughtexception;

        r39 = $r16;

        r40 = null;

        goto label116;

     label112:
        $r27 := @caughtexception;

        r38 = $r27;

        goto label129;

     label113:
        $r24 := @caughtexception;

        r39 = $r24;

        r40 = null;

        goto label116;

     label114:
        $r23 := @caughtexception;

        r38 = $r23;

        r36 = r35;

        goto label129;

     label115:
        $r20 := @caughtexception;

        r40 = null;

        r39 = $r20;

        r36 = r34;

     label116:
        r50 = r36;

     label117:
        r73 = new java.lang.StringBuilder;

     label118:
        r50 = r36;

     label119:
        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

     label120:
        r50 = r36;

     label121:
        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get canonical file ");

     label122:
        r50 = r36;

     label123:
        r76 = (java.io.IOException) r39;

        $r57 = virtualinvoke r76.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

     label124:
        r50 = r36;

     label125:
        $r58 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r58);

     label126:
        r55 = null;

        r54 = r40;

     label127:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r36);

        r74 = new com.android.server.pm.PackageAbiHelper$Abis;

        specialinvoke r74.<com.android.server.pm.PackageAbiHelper$Abis: void <init>(java.lang.String,java.lang.String)>(r54, r55);

        r75 = new android.util.Pair;

        $r62 = <com.android.server.pm.PackageManagerService: java.io.File sAppLib32InstallDir>;

        $r63 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r64 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $z13 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        $r65 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.PackageAbiHelper$Abis,java.io.File,java.lang.String,java.lang.String,boolean,boolean)>(r74, $r62, $r63, $r64, $z13, z0);

        specialinvoke r75.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r74, $r65);

        return r75;

     label128:
        $r21 := @caughtexception;

        r38 = $r21;

        r36 = r50;

     label129:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r36);

        throw r38;

        catch java.io.IOException from label002 to label003 with label115;
        catch java.lang.Throwable from label002 to label003 with label114;
        catch java.io.IOException from label004 to label005 with label115;
        catch java.lang.Throwable from label004 to label005 with label114;
        catch java.io.IOException from label006 to label007 with label115;
        catch java.lang.Throwable from label006 to label007 with label114;
        catch java.io.IOException from label008 to label009 with label115;
        catch java.lang.Throwable from label008 to label009 with label114;
        catch java.io.IOException from label010 to label011 with label059;
        catch java.lang.Throwable from label010 to label011 with label058;
        catch java.io.IOException from label012 to label013 with label022;
        catch java.lang.Throwable from label012 to label013 with label021;
        catch java.io.IOException from label014 to label015 with label022;
        catch java.lang.Throwable from label014 to label015 with label021;
        catch java.io.IOException from label015 to label016 with label022;
        catch java.lang.Throwable from label015 to label016 with label021;
        catch java.io.IOException from label018 to label019 with label022;
        catch java.lang.Throwable from label018 to label019 with label021;
        catch java.io.IOException from label020 to label021 with label022;
        catch java.lang.Throwable from label020 to label021 with label021;
        catch java.io.IOException from label023 to label024 with label059;
        catch java.lang.Throwable from label023 to label024 with label058;
        catch java.io.IOException from label025 to label026 with label064;
        catch java.lang.Throwable from label025 to label026 with label063;
        catch java.io.IOException from label027 to label028 with label064;
        catch java.lang.Throwable from label027 to label028 with label063;
        catch java.io.IOException from label030 to label031 with label064;
        catch java.lang.Throwable from label030 to label031 with label063;
        catch java.io.IOException from label032 to label033 with label064;
        catch java.lang.Throwable from label032 to label033 with label063;
        catch java.io.IOException from label034 to label035 with label064;
        catch java.lang.Throwable from label034 to label035 with label063;
        catch java.io.IOException from label038 to label039 with label064;
        catch java.lang.Throwable from label038 to label039 with label063;
        catch java.io.IOException from label040 to label041 with label064;
        catch java.lang.Throwable from label040 to label041 with label063;
        catch java.io.IOException from label043 to label044 with label064;
        catch java.lang.Throwable from label043 to label044 with label063;
        catch java.io.IOException from label045 to label046 with label064;
        catch java.lang.Throwable from label045 to label046 with label063;
        catch java.io.IOException from label047 to label048 with label064;
        catch java.lang.Throwable from label047 to label048 with label063;
        catch java.io.IOException from label049 to label050 with label064;
        catch java.lang.Throwable from label049 to label050 with label063;
        catch java.io.IOException from label051 to label052 with label064;
        catch java.lang.Throwable from label051 to label052 with label063;
        catch java.io.IOException from label053 to label054 with label064;
        catch java.lang.Throwable from label053 to label054 with label063;
        catch java.io.IOException from label061 to label062 with label064;
        catch java.lang.Throwable from label061 to label062 with label063;
        catch java.io.IOException from label065 to label066 with label113;
        catch java.lang.Throwable from label065 to label066 with label112;
        catch java.io.IOException from label066 to label067 with label113;
        catch java.lang.Throwable from label066 to label067 with label112;
        catch java.io.IOException from label068 to label069 with label064;
        catch java.lang.Throwable from label068 to label069 with label063;
        catch java.io.IOException from label070 to label071 with label064;
        catch java.lang.Throwable from label070 to label071 with label063;
        catch java.io.IOException from label073 to label074 with label064;
        catch java.lang.Throwable from label073 to label074 with label063;
        catch java.io.IOException from label075 to label076 with label064;
        catch java.lang.Throwable from label075 to label076 with label063;
        catch java.io.IOException from label078 to label079 with label111;
        catch java.lang.Throwable from label078 to label079 with label128;
        catch java.io.IOException from label080 to label081 with label111;
        catch java.lang.Throwable from label080 to label081 with label128;
        catch java.io.IOException from label083 to label084 with label111;
        catch java.lang.Throwable from label083 to label084 with label128;
        catch java.io.IOException from label086 to label087 with label111;
        catch java.lang.Throwable from label086 to label087 with label128;
        catch java.io.IOException from label088 to label089 with label111;
        catch java.lang.Throwable from label088 to label089 with label128;
        catch java.io.IOException from label090 to label091 with label111;
        catch java.lang.Throwable from label090 to label091 with label128;
        catch java.io.IOException from label092 to label093 with label111;
        catch java.lang.Throwable from label092 to label093 with label128;
        catch java.io.IOException from label094 to label095 with label111;
        catch java.lang.Throwable from label094 to label095 with label128;
        catch java.io.IOException from label096 to label097 with label111;
        catch java.lang.Throwable from label096 to label097 with label128;
        catch java.io.IOException from label098 to label099 with label111;
        catch java.lang.Throwable from label098 to label099 with label128;
        catch java.io.IOException from label100 to label101 with label111;
        catch java.lang.Throwable from label100 to label101 with label128;
        catch java.io.IOException from label103 to label104 with label111;
        catch java.lang.Throwable from label103 to label104 with label128;
        catch java.io.IOException from label105 to label106 with label111;
        catch java.lang.Throwable from label105 to label106 with label128;
        catch java.io.IOException from label107 to label108 with label111;
        catch java.lang.Throwable from label107 to label108 with label128;
        catch java.lang.Throwable from label117 to label118 with label128;
        catch java.lang.Throwable from label119 to label120 with label128;
        catch java.lang.Throwable from label121 to label122 with label128;
        catch java.lang.Throwable from label123 to label124 with label128;
        catch java.lang.Throwable from label125 to label126 with label128;
    }

    public java.lang.String getAdjustedAbiForSharedUser(java.util.Set, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageAbiHelperImpl r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.util.Iterator r2;
        java.lang.String r3, $r6, $r7, $r9, $r10, $r11, r13, r14, r18, r19;
        java.lang.Object $r5, r17;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8;
        java.util.Set r12;
        com.android.server.pm.PackageSetting r15, r16;

        r0 := @this: com.android.server.pm.PackageAbiHelperImpl;

        r12 := @parameter0: java.util.Set;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r13 = null;

        if r1 == null goto label01;

        r14 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        r13 = null;

        if r14 == null goto label01;

        r13 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>(r14);

     label01:
        r2 = interfaceinvoke r12.<java.util.Set: java.util.Iterator iterator()>();

        r15 = null;

     label02:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.android.server.pm.PackageSetting) $r5;

        if r1 == null goto label03;

        $r10 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r11 = r16.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label03;

        goto label02;

     label03:
        $r6 = r16.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        if $r6 != null goto label04;

        goto label02;

     label04:
        $r7 = r16.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        r3 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r7);

        if r13 == null goto label07;

        $z0 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label07;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instruction set mismatch, ");

        if r15 != null goto label05;

        r17 = "[caller]";

        goto label06;

     label05:
        r17 = r15;

     label06:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" whereas ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r9);

     label07:
        r18 = r13;

        if r13 != null goto label08;

        r18 = r3;

        r15 = r16;

     label08:
        r13 = r18;

        goto label02;

     label09:
        if r13 != null goto label10;

        return null;

     label10:
        if r15 == null goto label11;

        r19 = r15.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        goto label12;

     label11:
        r19 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label12:
        return r19;
    }

    public com.android.server.pm.PackageAbiHelper$Abis getBundledAppAbis(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageAbiHelperImpl r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String r2, $r3, $r4, $r5;
        com.android.server.pm.PackageAbiHelper$Abis $r6;

        r0 := @this: com.android.server.pm.PackageAbiHelperImpl;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        r2 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: java.lang.String deriveCodePathName(java.lang.String)>($r3);

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r5 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: java.lang.String calculateBundledApkRoot(java.lang.String)>($r4);

        $r6 = specialinvoke r0.<com.android.server.pm.PackageAbiHelperImpl: com.android.server.pm.PackageAbiHelper$Abis getBundledAppAbi(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String,java.lang.String)>(r1, $r5, r2);

        return $r6;
    }

    public com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, java.io.File)
    {
        com.android.server.pm.PackageAbiHelperImpl r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageSetting r2;
        java.io.File r3;
        com.android.server.pm.PackageAbiHelper$Abis $r4;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0, $z1;
        com.android.server.pm.pkg.PackageStateUnserialized $r9;
        com.android.server.pm.PackageAbiHelper$NativeLibraryPaths $r10;

        r0 := @this: com.android.server.pm.PackageAbiHelperImpl;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: com.android.server.pm.PackageSetting;

        r3 := @parameter2: java.io.File;

        $r4 = new com.android.server.pm.PackageAbiHelper$Abis;

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPrimaryCpuAbi()>();

        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSecondaryCpuAbi()>();

        specialinvoke $r4.<com.android.server.pm.PackageAbiHelper$Abis: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        $r7 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r8 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $z0 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        $r9 = virtualinvoke r2.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z1 = virtualinvoke $r9.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        $r10 = staticinvoke <com.android.server.pm.PackageAbiHelperImpl: com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.PackageAbiHelper$Abis,java.io.File,java.lang.String,java.lang.String,boolean,boolean)>($r4, r3, $r7, $r8, $z0, $z1);

        return $r10;
    }
}
