public class com.android.server.pm.PackageInstallerService extends android.content.pm.IPackageInstaller$Stub implements com.android.server.pm.PackageSessionProvider
{
    private static final int ADB_DEV_MODE;
    private static final boolean LOGD;
    private static final long MAX_ACTIVE_SESSIONS_NO_PERMISSION;
    private static final long MAX_ACTIVE_SESSIONS_WITH_PERMISSION;
    private static final long MAX_AGE_MILLIS;
    private static final long MAX_HISTORICAL_SESSIONS;
    private static final long MAX_TIME_SINCE_UPDATE_MILLIS;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_SESSIONS;
    private static final java.io.FilenameFilter sStageFilter;
    private final android.util.SparseBooleanArray mAllocatedSessions;
    private final com.android.server.pm.ApexManager mApexManager;
    private android.app.AppOpsManager mAppOps;
    private volatile boolean mBypassNextStagedInstallerCheck;
    private final com.android.server.pm.PackageInstallerService$Callbacks mCallbacks;
    private final android.content.Context mContext;
    private final java.util.List mHistoricalSessions;
    private final android.util.SparseIntArray mHistoricalSessionsByInstaller;
    private final android.os.Handler mInstallHandler;
    private final android.os.HandlerThread mInstallThread;
    private final com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback;
    private final android.util.SparseBooleanArray mLegacySessions;
    private volatile boolean mOkToSendBroadcasts;
    private final com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager;
    private final com.android.server.pm.PackageManagerService mPm;
    private final java.util.Random mRandom;
    private final android.util.SparseArray mSessions;
    private final java.io.File mSessionsDir;
    private final android.util.AtomicFile mSessionsFile;
    private final com.android.server.pm.StagingManager mStagingManager;

    static void <clinit>()
    {
        com.android.server.pm.PackageInstallerService$1 $r0;

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG_SESSIONS> = "sessions";

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG> = "PackageInstaller";

        <com.android.server.pm.PackageInstallerService: long MAX_TIME_SINCE_UPDATE_MILLIS> = 604800000L;

        <com.android.server.pm.PackageInstallerService: long MAX_HISTORICAL_SESSIONS> = 1048576L;

        <com.android.server.pm.PackageInstallerService: long MAX_AGE_MILLIS> = 259200000L;

        <com.android.server.pm.PackageInstallerService: long MAX_ACTIVE_SESSIONS_WITH_PERMISSION> = 1024L;

        <com.android.server.pm.PackageInstallerService: long MAX_ACTIVE_SESSIONS_NO_PERMISSION> = 50L;

        <com.android.server.pm.PackageInstallerService: boolean LOGD> = 0;

        <com.android.server.pm.PackageInstallerService: int ADB_DEV_MODE> = 36;

        $r0 = new com.android.server.pm.PackageInstallerService$1;

        specialinvoke $r0.<com.android.server.pm.PackageInstallerService$1: void <init>()>();

        <com.android.server.pm.PackageInstallerService: java.io.FilenameFilter sStageFilter> = $r0;

        return;
    }

    public void <init>(android.content.Context, com.android.server.pm.PackageManagerService, java.util.function.Supplier)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.Context r1;
        java.util.function.Supplier r2;
        com.android.server.pm.PackageInstallerService$InternalCallback $r3;
        java.security.SecureRandom $r4;
        android.util.SparseBooleanArray $r5, $r9;
        android.util.SparseArray $r6;
        java.util.ArrayList $r7;
        android.util.SparseIntArray $r8;
        java.lang.Object $r10;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r11;
        android.os.HandlerThread $r12, $r14, $r17;
        android.os.Handler $r13;
        android.os.Looper $r15, $r18;
        com.android.server.pm.PackageInstallerService$Callbacks $r16;
        android.util.AtomicFile $r19;
        java.io.File $r20, $r21, $r22, $r23;
        com.android.server.pm.ApexManager $r24;
        com.android.server.pm.StagingManager $r25;
        com.android.server.pm.PackageManagerService r26;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.Context;

        r26 := @parameter1: com.android.server.pm.PackageManagerService;

        r2 := @parameter2: java.util.function.Supplier;

        specialinvoke r0.<android.content.pm.IPackageInstaller$Stub: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: boolean mOkToSendBroadcasts> = 0;

        r0.<com.android.server.pm.PackageInstallerService: boolean mBypassNextStagedInstallerCheck> = 0;

        $r3 = new com.android.server.pm.PackageInstallerService$InternalCallback;

        specialinvoke $r3.<com.android.server.pm.PackageInstallerService$InternalCallback: void <init>(com.android.server.pm.PackageInstallerService)>(r0);

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback> = $r3;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: java.util.Random mRandom> = $r4;

        $r5 = new android.util.SparseBooleanArray;

        specialinvoke $r5.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mAllocatedSessions> = $r5;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: java.util.List mHistoricalSessions> = $r7;

        $r8 = new android.util.SparseIntArray;

        specialinvoke $r8.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseIntArray mHistoricalSessionsByInstaller> = $r8;

        $r9 = new android.util.SparseBooleanArray;

        specialinvoke $r9.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions> = $r9;

        r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext> = r1;

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm> = r26;

        $r10 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/pm/permission/PermissionManagerServiceInternal;");

        $r11 = (com.android.server.pm.permission.PermissionManagerServiceInternal) $r10;

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager> = $r11;

        $r12 = new android.os.HandlerThread;

        specialinvoke $r12.<android.os.HandlerThread: void <init>(java.lang.String)>("PackageInstaller");

        r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread> = $r12;

        virtualinvoke $r12.<android.os.HandlerThread: void start()>();

        $r13 = new android.os.Handler;

        $r14 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r15 = virtualinvoke $r14.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r13.<android.os.Handler: void <init>(android.os.Looper)>($r15);

        r0.<com.android.server.pm.PackageInstallerService: android.os.Handler mInstallHandler> = $r13;

        $r16 = new com.android.server.pm.PackageInstallerService$Callbacks;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r18 = virtualinvoke $r17.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r16.<com.android.server.pm.PackageInstallerService$Callbacks: void <init>(android.os.Looper)>($r18);

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks> = $r16;

        $r19 = new android.util.AtomicFile;

        $r20 = new java.io.File;

        $r21 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r20.<java.io.File: void <init>(java.io.File,java.lang.String)>($r21, "install_sessions.xml");

        specialinvoke $r19.<android.util.AtomicFile: void <init>(java.io.File,java.lang.String)>($r20, "package-session");

        r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile> = $r19;

        $r22 = new java.io.File;

        $r23 = staticinvoke <android.os.Environment: java.io.File getDataSystemDirectory()>();

        specialinvoke $r22.<java.io.File: void <init>(java.io.File,java.lang.String)>($r23, "install_sessions");

        r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir> = $r22;

        virtualinvoke $r22.<java.io.File: boolean mkdirs()>();

        $r24 = staticinvoke <com.android.server.pm.ApexManager: com.android.server.pm.ApexManager getInstance()>();

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.ApexManager mApexManager> = $r24;

        $r25 = new com.android.server.pm.StagingManager;

        specialinvoke $r25.<com.android.server.pm.StagingManager: void <init>(com.android.server.pm.PackageInstallerService,android.content.Context,java.util.function.Supplier)>(r0, r1, r2);

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager> = $r25;

        return;
    }

    static android.util.SparseArray access$000(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        return $r1;
    }

    static void access$100(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsLocked()>();

        return;
    }

    static com.android.server.pm.StagingManager access$1000(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.StagingManager $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager>;

        return $r1;
    }

    static void access$1100(com.android.server.pm.PackageInstallerService, com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.PackageInstallerSession r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        r1 := @parameter1: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void addHistoricalSessionLocked(com.android.server.pm.PackageInstallerSession)>(r1);

        return;
    }

    static java.io.File access$1200(com.android.server.pm.PackageInstallerService, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>(i0);

        return $r1;
    }

    static android.os.Handler access$1300(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: android.os.Handler mInstallHandler>;

        return $r1;
    }

    static com.android.server.pm.PackageInstallerService$Callbacks access$300(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.PackageInstallerService$Callbacks $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        return $r1;
    }

    static void access$500(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsAsync()>();

        return;
    }

    static boolean access$800(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $z0 = r0.<com.android.server.pm.PackageInstallerService: boolean mOkToSendBroadcasts>;

        return $z0;
    }

    static com.android.server.pm.PackageManagerService access$900(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.PackageManagerService $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        return $r1;
    }

    private void addHistoricalSessionLocked(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, $i1, $i2;
        java.io.CharArrayWriter $r2;
        com.android.internal.util.IndentingPrintWriter $r3;
        java.util.List $r4;
        java.lang.String $r5;
        com.android.server.pm.PackageInstallerSession r6;
        android.util.SparseIntArray r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r6 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r2 = new java.io.CharArrayWriter;

        specialinvoke $r2.<java.io.CharArrayWriter: void <init>()>();

        $r3 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>($r2, "    ");

        virtualinvoke r6.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

        $r4 = r0.<com.android.server.pm.PackageInstallerService: java.util.List mHistoricalSessions>;

        $r5 = virtualinvoke $r2.<java.io.CharArrayWriter: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        i0 = virtualinvoke r6.<com.android.server.pm.PackageInstallerSession: int getInstallerUid()>();

        r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseIntArray mHistoricalSessionsByInstaller>;

        $i1 = virtualinvoke r7.<android.util.SparseIntArray: int get(int)>(i0);

        $i2 = $i1 + 1;

        virtualinvoke r7.<android.util.SparseIntArray: void put(int,int)>(i0, $i2);

        return;
    }

    private int allocateSessionIdLocked()
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, $i1, i2;
        java.util.Random $r1;
        android.util.SparseBooleanArray $r2, $r4;
        boolean $z0;
        java.lang.IllegalStateException $r3;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i2 = 0;

     label1:
        $r1 = r0.<com.android.server.pm.PackageInstallerService: java.util.Random mRandom>;

        $i1 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(2147483646);

        i0 = $i1 + 1;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mAllocatedSessions>;

        $z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mAllocatedSessions>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        return i0;

     label2:
        if i2 >= 32 goto label3;

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to allocate session ID");

        throw $r3;
    }

    private java.io.File buildAppIconFile(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.File r1, $r7;
        java.lang.StringBuilder $r3;
        java.lang.String $r8;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_icon.");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r7 = new java.io.File;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r8);

        return $r7;
    }

    private java.lang.String buildExternalStageCid(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smdl");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private java.io.File buildSessionDir(int, android.content.pm.PackageInstaller$SessionParams)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.File r1, $r3, $r8;
        boolean $z0;
        java.lang.String $r2, $r4, $r9;
        java.lang.StringBuilder $r5;
        android.content.pm.PackageInstaller$SessionParams r10;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r10 := @parameter1: android.content.pm.PackageInstaller$SessionParams;

        $z0 = r10.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z0 == 0 goto label1;

        $r4 = r10.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        r1 = staticinvoke <android.os.Environment: java.io.File getDataStagingDirectory(java.lang.String)>($r4);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("session_");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.io.File;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r9);

        return $r8;

     label1:
        $r2 = r10.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildTmpSessionDir(int,java.lang.String)>(i0, $r2);

        return $r3;
    }

    static android.app.Notification buildSuccessNotification(android.content.Context, java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, $r5, $r13, r26;
        int i0, $i2, $i3, $i4;
        android.content.pm.IPackageManager $r1;
        java.lang.StringBuilder $r2;
        android.content.pm.ApplicationInfo $r6, $r7, $r11;
        android.graphics.drawable.Drawable $r8;
        android.content.res.Resources $r9, $r10, $r15;
        android.app.Notification$Builder $r12, $r14, $r16, $r17, $r18, $r21, $r22;
        android.app.Notification$BigTextStyle $r19, $r20;
        android.app.Notification $r23;
        android.os.RemoteException $r24;
        android.content.Context r25;
        android.content.pm.PackageInfo r27, r28;
        android.content.pm.PackageManager r30;
        android.graphics.Bitmap r31;
        java.lang.CharSequence r32;

        r25 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        r26 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r27 = null;

     label1:
        $r1 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r28 = interfaceinvoke $r1.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r26, 67108864, i0);

     label2:
        r27 = r28;

        goto label4;

     label3:
        $r24 := @caughtexception;

     label4:
        if r27 == null goto label6;

        $r6 = r27.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r6 != null goto label5;

        goto label6;

     label5:
        r30 = virtualinvoke r25.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r7 = r27.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r8 = virtualinvoke $r7.<android.content.pm.ApplicationInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)>(r30);

        $r9 = virtualinvoke r25.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r9.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104901);

        $r10 = virtualinvoke r25.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r10.<android.content.res.Resources: int getDimensionPixelSize(int)>(17104902);

        r31 = staticinvoke <com.android.internal.util.ImageUtils: android.graphics.Bitmap buildScaledBitmap(android.graphics.drawable.Drawable,int,int)>($r8, $i2, $i3);

        $r11 = r27.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r32 = virtualinvoke $r11.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r30);

        $r12 = new android.app.Notification$Builder;

        $r13 = <com.android.internal.notification.SystemNotificationChannels: java.lang.String DEVICE_ADMIN>;

        specialinvoke $r12.<android.app.Notification$Builder: void <init>(android.content.Context,java.lang.String)>(r25, $r13);

        $r14 = virtualinvoke $r12.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17302346);

        $r15 = virtualinvoke r25.<android.content.Context: android.content.res.Resources getResources()>();

        $i4 = virtualinvoke $r15.<android.content.res.Resources: int getColor(int)>(17170460);

        $r16 = virtualinvoke $r14.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i4);

        $r17 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>(r32);

        $r18 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>(r0);

        $r19 = new android.app.Notification$BigTextStyle;

        specialinvoke $r19.<android.app.Notification$BigTextStyle: void <init>()>();

        $r20 = virtualinvoke $r19.<android.app.Notification$BigTextStyle: android.app.Notification$BigTextStyle bigText(java.lang.CharSequence)>(r0);

        $r21 = virtualinvoke $r18.<android.app.Notification$Builder: android.app.Notification$Builder setStyle(android.app.Notification$Style)>($r20);

        $r22 = virtualinvoke $r21.<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>(r31);

        $r23 = virtualinvoke $r22.<android.app.Notification$Builder: android.app.Notification build()>();

        return $r23;

     label6:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notification not built for package: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r5);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private java.io.File buildTmpSessionDir(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.io.File $r6, r9;
        java.lang.String $r7, r8;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        r9 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File getTmpSessionDir(java.lang.String)>(r8);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vmdl");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r6 = new java.io.File;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r9, $r7);

        return $r6;
    }

    private int createSessionInternal(android.content.pm.PackageInstaller$SessionParams, java.lang.String, int) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, i65, i66, i68, i69, i70;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r1, $r23;
        com.android.server.pm.PackageManagerService $r2, $r47, $r48, $r88;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, $z15, $z16, $z17;
        java.lang.SecurityException $r3, $r42, $r43, $r55;
        android.content.pm.DataLoaderParams $r4;
        java.lang.String $r5, $r11, $r15, $r21, $r26, $r33, $r52, $r53, r66, $r67, $r69, $r70, r71, r72, r74, r83;
        android.content.Context $r6, $r8, $r25, $r27, $r34, $r41, $r49, $r54, $r87;
        android.util.SparseArray $r7, r78, r93, r94;
        long $l7, $l9, $l17, l67, l71;
        byte $b8, $b10, $b18;
        android.util.SparseIntArray $r12;
        android.content.pm.PackageInstaller$SessionParams $r16, r65;
        com.android.server.pm.PackageInstallerService$Callbacks $r17;
        com.android.server.pm.StagingManager $r18, $r91;
        java.util.List $r22, $r77;
        android.graphics.Bitmap $r24, $r37, $r38, $r39, $r40;
        java.io.IOException $r28;
        java.lang.StringBuilder $r29, r80, r97, r99;
        java.lang.IllegalArgumentException $r32, $r45, $r46;
        java.lang.Object $r35;
        android.app.ActivityManager $r36;
        com.android.server.pm.ApexManager $r44;
        android.app.AppOpsManager $r50, $r51;
        java.lang.Throwable $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, r81, r95;
        java.lang.CharSequence $r68;
        java.lang.String[] r73;
        java.lang.IllegalStateException r79, r96, r98;
        java.io.File r82;
        com.android.server.pm.InstallSource r84;
        com.android.server.pm.PackageInstallerSession $r85;
        com.android.server.pm.PackageInstallerService$InternalCallback $r86;
        android.os.HandlerThread $r89;
        android.os.Looper $r90;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r65 := @parameter0: android.content.pm.PackageInstaller$SessionParams;

        r66 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r1.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, "createSession");

        $r2 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(i0, "no_install_apps");

        if $z0 != 0 goto label74;

        $r4 = r65.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        if $r4 == null goto label02;

        $r54 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i51 = virtualinvoke $r54.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("com.android.permission.USE_INSTALLER_V2");

        if $i51 != 0 goto label01;

        goto label02;

     label01:
        $r55 = new java.lang.SecurityException;

        specialinvoke $r55.<java.lang.SecurityException: void <init>(java.lang.String)>("You need the com.android.permission.USE_INSTALLER_V2 permission to use a data loader");

        throw $r55;

     label02:
        $r5 = r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        if $r5 == null goto label03;

        $r53 = r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $i50 = virtualinvoke $r53.<java.lang.String: int length()>();

        if $i50 <= 255 goto label03;

        r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName> = null;

     label03:
        $r67 = r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel>;

        $r68 = staticinvoke <android.text.TextUtils: java.lang.CharSequence trimToSize(java.lang.CharSequence,int)>($r67, 1000);

        $r69 = (java.lang.String) $r68;

        r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = $r69;

        $r70 = r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String installerPackageName>;

        if $r70 == null goto label04;

        $r52 = r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String installerPackageName>;

        $i49 = virtualinvoke $r52.<java.lang.String: int length()>();

        if $i49 >= 255 goto label04;

        r71 = r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String installerPackageName>;

        goto label05;

     label04:
        r71 = r66;

     label05:
        if i1 == 2000 goto label10;

        if i1 != 0 goto label06;

        goto label10;

     label06:
        if i1 == 1000 goto label07;

        $r51 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r51.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r66);

     label07:
        $z11 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r71, r66);

        if $z11 != 0 goto label08;

        $r49 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i48 = virtualinvoke $r49.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        if $i48 == 0 goto label08;

        $r50 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r50.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r71);

     label08:
        $i52 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i53 = $i52 & -33;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i53;

        $i54 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i55 = $i54 & -65;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i55;

        $i56 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i57 = $i56 & -5;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i57;

        $i58 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i59 = $i58 | 2;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i59;

        $i60 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i61 = $i60 & 65536;

        if $i61 == 0 goto label09;

        $r48 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $z12 = virtualinvoke $r48.<com.android.server.pm.PackageManagerService: boolean isCallerVerifier(int)>(i1);

        if $z12 != 0 goto label09;

        $i46 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i47 = $i46 & -65537;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i47;

     label09:
        r72 = r66;

        goto label11;

     label10:
        $i3 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i4 = $i3 | 32;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i4;

        r72 = null;

     label11:
        $i62 = r65.<android.content.pm.PackageInstaller$SessionParams: int originatingUid>;

        if $i62 == -1 goto label12;

        $i43 = r65.<android.content.pm.PackageInstaller$SessionParams: int originatingUid>;

        if $i43 == i1 goto label12;

        $r47 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i44 = r65.<android.content.pm.PackageInstaller$SessionParams: int originatingUid>;

        r73 = virtualinvoke $r47.<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>($i44);

        if r73 == null goto label12;

        $i45 = lengthof r73;

        if $i45 <= 0 goto label12;

        r74 = r73[0];

        goto label13;

     label12:
        r74 = null;

     label13:
        $z13 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z13 != 0 goto label15;

        $z10 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCalledBySystemOrShell(int)>(i1);

        if $z10 == 0 goto label14;

        goto label15;

     label14:
        $i39 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i40 = $i39 & -1048577;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i40;

        $i41 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i42 = $i41 & -129;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i42;

        goto label16;

     label15:
        $i5 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i6 = $i5 | 1048576;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i6;

     label16:
        if i1 == 1000 goto label17;

        $i35 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i36 = $i35 & 36;

        if $i36 == 36 goto label17;

        $i37 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i38 = $i37 & -524289;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i38;

     label17:
        $i63 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i64 = $i63 & 131072;

        if $i64 == 0 goto label18;

        z14 = 1;

        goto label19;

     label18:
        z14 = 0;

     label19:
        $z1 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z1 != 0 goto label20;

        if z14 == 0 goto label21;

     label20:
        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", "PackageInstaller");

     label21:
        if z14 == 0 goto label24;

        $r44 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.ApexManager mApexManager>;

        $z8 = virtualinvoke $r44.<com.android.server.pm.ApexManager: boolean isApexSupported()>();

        if $z8 == 0 goto label23;

        $z9 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z9 == 0 goto label22;

        goto label24;

     label22:
        $r46 = new java.lang.IllegalArgumentException;

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("APEX files can only be installed as part of a staged session.");

        throw $r46;

     label23:
        $r45 = new java.lang.IllegalArgumentException;

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("This device doesn\'t support the installation of APEX files");

        throw $r45;

     label24:
        $z2 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z2 == 0 goto label27;

        $z5 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCalledBySystemOrShell(int)>(i1);

        if $z5 != 0 goto label27;

        $z6 = r0.<com.android.server.pm.PackageInstallerService: boolean mBypassNextStagedInstallerCheck>;

        if $z6 == 0 goto label25;

        r0.<com.android.server.pm.PackageInstallerService: boolean mBypassNextStagedInstallerCheck> = 0;

        goto label27;

     label25:
        $z7 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isStagedInstallerAllowed(java.lang.String)>(r71);

        if $z7 == 0 goto label26;

        goto label27;

     label26:
        $r43 = new java.lang.SecurityException;

        specialinvoke $r43.<java.lang.SecurityException: void <init>(java.lang.String)>("Installer not allowed to commit staged install");

        throw $r43;

     label27:
        $z15 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        if $z15 != 0 goto label40;

        $i19 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i20 = $i19 & 256;

        if $i20 == 0 goto label29;

        $r41 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i34 = virtualinvoke $r41.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS");

        if $i34 == -1 goto label28;

        goto label29;

     label28:
        $r42 = new java.lang.SecurityException;

        specialinvoke $r42.<java.lang.SecurityException: void <init>(java.lang.String)>("You need the android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS permission to use the PackageManager.INSTALL_GRANT_RUNTIME_PERMISSIONS flag");

        throw $r42;

     label29:
        $r24 = r65.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r24 == null goto label31;

        $r34 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r35 = virtualinvoke $r34.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r36 = (android.app.ActivityManager) $r35;

        i65 = virtualinvoke $r36.<android.app.ActivityManager: int getLauncherLargeIconSize()>();

        $r37 = r65.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $i30 = virtualinvoke $r37.<android.graphics.Bitmap: int getWidth()>();

        $i31 = i65 * 2;

        if $i30 > $i31 goto label30;

        $r40 = r65.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $i32 = virtualinvoke $r40.<android.graphics.Bitmap: int getHeight()>();

        $i33 = i65 * 2;

        if $i32 <= $i33 goto label31;

     label30:
        $r38 = r65.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r39 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r38, i65, i65, 1);

        r65.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r39;

     label31:
        i66 = r65.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if i66 == 1 goto label33;

        if i66 != 2 goto label32;

        goto label33;

     label32:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid install mode: ");

        $i29 = r65.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r32 = new java.lang.IllegalArgumentException;

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label33:
        $i21 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i22 = $i21 & 16;

        if $i22 == 0 goto label35;

        $r27 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $z4 = staticinvoke <com.android.internal.content.PackageHelper: boolean fitsOnInternal(android.content.Context,android.content.pm.PackageInstaller$SessionParams)>($r27, r65);

        if $z4 == 0 goto label34;

        goto label40;

     label34:
        $r28 = new java.io.IOException;

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>("No suitable internal storage available");

        throw $r28;

     label35:
        $i23 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i24 = $i23 & 512;

        if $i24 == 0 goto label36;

        $i27 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i28 = $i27 | 16;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i28;

        goto label40;

     label36:
        $i25 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i26 = $i25 | 16;

        r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i26;

        l67 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label37:
        $r25 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r26 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String resolveInstallVolume(android.content.Context,android.content.pm.PackageInstaller$SessionParams)>($r25, r65);

        r65.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid> = $r26;

     label38:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l67);

        goto label40;

     label39:
        $r64 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l67);

        throw $r64;

     label40:
        $r77 = r65.<android.content.pm.PackageInstaller$SessionParams: java.util.List whitelistedRestrictedPermissions>;

        if $r77 == null goto label41;

        $r23 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r22 = r65.<android.content.pm.PackageInstaller$SessionParams: java.util.List whitelistedRestrictedPermissions>;

        virtualinvoke $r23.<com.android.server.pm.permission.PermissionManagerServiceInternal: void retainHardAndSoftRestrictedPermissions(java.util.List)>($r22);

     label41:
        r78 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r78;

     label42:
        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        i68 = staticinvoke <com.android.server.pm.PackageInstallerService: int getSessionCount(android.util.SparseArray,int)>($r7, i1);

        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        i2 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

     label43:
        if i2 != 0 goto label46;

        $l17 = (long) i68;

        $b18 = $l17 cmp 1024L;

        if $b18 >= 0 goto label44;

        goto label47;

     label44:
        r79 = new java.lang.IllegalStateException;

        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many active sessions for UID ");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r21 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r79.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw r79;

     label45:
        $r56 := @caughtexception;

        r81 = $r56;

        goto label71;

     label46:
        $l7 = (long) i68;

        $b8 = $l7 cmp 50L;

        if $b8 >= 0 goto label69;

     label47:
        $r12 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseIntArray mHistoricalSessionsByInstaller>;

        i69 = virtualinvoke $r12.<android.util.SparseIntArray: int get(int)>(i1);

     label48:
        $l9 = (long) i69;

        $b10 = $l9 cmp 1048576L;

        if $b10 >= 0 goto label66;

     label49:
        i70 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        exitmonitor r78;

     label50:
        l71 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z3 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        if $z3 != 0 goto label52;

        $i15 = r65.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i16 = $i15 & 16;

        if $i16 == 0 goto label51;

        r82 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildSessionDir(int,android.content.pm.PackageInstaller$SessionParams)>(i70, r65);

        r83 = null;

        goto label53;

     label51:
        r83 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.lang.String buildExternalStageCid(int)>(i70);

        r82 = null;

        goto label53;

     label52:
        r82 = null;

        r83 = null;

     label53:
        $z16 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean forceQueryableOverride>;

        if $z16 == 0 goto label54;

        if i1 == 2000 goto label54;

        if i1 == 0 goto label54;

        r65.<android.content.pm.PackageInstaller$SessionParams: boolean forceQueryableOverride> = 0;

     label54:
        r84 = staticinvoke <com.android.server.pm.InstallSource: com.android.server.pm.InstallSource create(java.lang.String,java.lang.String,java.lang.String)>(r72, r74, r71);

        $r85 = new com.android.server.pm.PackageInstallerSession;

        $r86 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        $r87 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r88 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r89 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r90 = virtualinvoke $r89.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r91 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager>;

        specialinvoke $r85.<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,com.android.server.pm.PackageSessionProvider,android.os.Looper,com.android.server.pm.StagingManager,int,int,int,com.android.server.pm.InstallSource,android.content.pm.PackageInstaller$SessionParams,long,java.io.File,java.lang.String,android.content.pm.InstallationFile[],boolean,boolean,boolean,boolean,int[],int,boolean,boolean,boolean,int,java.lang.String)>($r86, $r87, $r88, r0, $r90, $r91, i70, i0, i1, r84, r65, l71, r82, r83, null, 0, 0, 0, 0, null, -1, 0, 0, 0, 0, "");

        r93 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r93;

     label55:
        r94 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

     label56:
        virtualinvoke r94.<android.util.SparseArray: void put(int,java.lang.Object)>(i70, $r85);

        exitmonitor r93;

     label57:
        $z17 = r65.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z17 == 0 goto label58;

        $r18 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager>;

        virtualinvoke $r18.<com.android.server.pm.StagingManager: void createSession(com.android.server.pm.PackageInstallerSession)>($r85);

     label58:
        $r16 = $r85.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i11 = $r16.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i12 = $i11 & 8388608;

        if $i12 != 0 goto label59;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        $i14 = $r85.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $i13 = $r85.<com.android.server.pm.PackageInstallerSession: int userId>;

        staticinvoke <com.android.server.pm.PackageInstallerService$Callbacks: void access$200(com.android.server.pm.PackageInstallerService$Callbacks,int,int)>($r17, $i14, $i13);

     label59:
        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsAsync()>();

        return i70;

     label60:
        $r59 := @caughtexception;

        r95 = $r59;

        goto label62;

     label61:
        $r60 := @caughtexception;

        r95 = $r60;

     label62:
        exitmonitor r93;

     label63:
        throw r95;

     label64:
        $r58 := @caughtexception;

        r95 = $r58;

        goto label62;

     label65:
        $r63 := @caughtexception;

        r81 = $r63;

        goto label71;

     label66:
        r96 = new java.lang.IllegalStateException;

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many historical sessions for UID ");

     label67:
        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r96.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw r96;

     label68:
        $r57 := @caughtexception;

        r81 = $r57;

        goto label71;

     label69:
        r98 = new java.lang.IllegalStateException;

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many active sessions for UID ");

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r98.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw r98;

     label70:
        $r61 := @caughtexception;

        r81 = $r61;

     label71:
        exitmonitor r78;

     label72:
        throw r81;

     label73:
        $r62 := @caughtexception;

        r81 = $r62;

        goto label71;

     label74:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("User restriction prevents installing");

        throw $r3;

        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label42 to label43 with label70;
        catch java.lang.Throwable from label44 to label45 with label45;
        catch java.lang.Throwable from label47 to label48 with label70;
        catch java.lang.Throwable from label49 to label50 with label65;
        catch java.lang.Throwable from label55 to label56 with label61;
        catch java.lang.Throwable from label56 to label57 with label60;
        catch java.lang.Throwable from label62 to label63 with label64;
        catch java.lang.Throwable from label66 to label67 with label68;
        catch java.lang.Throwable from label67 to label68 with label73;
        catch java.lang.Throwable from label69 to label70 with label73;
        catch java.lang.Throwable from label71 to label72 with label73;
    }

    private static int getSessionCount(android.util.SparseArray, int)
    {
        android.util.SparseArray r0;
        int i0, i1, $i2, i3, i4, i5;
        java.lang.Object $r1;
        com.android.server.pm.PackageInstallerSession $r2;

        r0 := @parameter0: android.util.SparseArray;

        i0 := @parameter1: int;

        i3 = 0;

        i1 = virtualinvoke r0.<android.util.SparseArray: int size()>();

        i4 = 0;

     label1:
        if i4 >= i1 goto label3;

        i5 = i3;

        $r1 = virtualinvoke r0.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        $r2 = (com.android.server.pm.PackageInstallerSession) $r1;

        $i2 = virtualinvoke $r2.<com.android.server.pm.PackageInstallerSession: int getInstallerUid()>();

        if $i2 != i0 goto label2;

        i5 = i3 + 1;

     label2:
        i4 = i4 + 1;

        i3 = i5;

        goto label1;

     label3:
        return i3;
    }

    private java.io.File getTmpSessionDir(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(r1);

        return $r2;
    }

    private boolean isCalledBySystemOrShell(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        if i0 == 1000 goto label2;

        if i0 == 0 goto label2;

        if i0 != 2000 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.PackageInstallerSession r1;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        z0 = 1;

        if i0 != 0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<com.android.server.pm.PackageInstallerSession: int getInstallerUid()>();

        if i0 != $i1 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    public static boolean isStageName(java.lang.String)
    {
        java.lang.String r0;
        boolean z1, $z2, $z3, z4, z5, $z6, z7, z8;

        r0 := @parameter0: java.lang.String;

        z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("vmdl");

        if z4 == 0 goto label1;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z3 == 0 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        $z6 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("smdl");

        if $z6 == 0 goto label3;

        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z2 == 0 goto label3;

        z7 = 1;

        goto label4;

     label3:
        z7 = 0;

     label4:
        z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("smdl2tmp");

        z8 = 1;

        if z5 != 0 goto label6;

        z8 = 1;

        if z7 != 0 goto label6;

        if z1 == 0 goto label5;

        z8 = 1;

        goto label6;

     label5:
        z8 = 0;

     label6:
        return z8;
    }

    private boolean isStagedInstallerAllowed(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.lang.String r1;
        com.android.server.SystemConfig $r2;
        java.util.Set $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r3 = virtualinvoke $r2.<com.android.server.SystemConfig: java.util.Set getWhitelistedStagedInstallers()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    static boolean lambda$registerCallback$0(int, int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static transient android.util.ArraySet newArraySet(java.lang.Object[])
    {
        java.lang.Object[] r0;
        android.util.ArraySet $r2;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        if r0 == null goto label1;

        $i0 = lengthof r0;

        virtualinvoke $r2.<android.util.ArraySet: void ensureCapacity(int)>($i0);

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, r0);

     label1:
        return $r2;
    }

    private android.content.pm.IPackageInstallerSession openSessionInternal(int) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.StringBuilder r2;
        java.lang.Object $r4;
        java.lang.String $r7;
        boolean $z0;
        java.lang.Throwable $r8;
        com.android.server.pm.PackageInstallerSession r9;
        java.lang.SecurityException r10;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r9 = (com.android.server.pm.PackageInstallerSession) $r4;

     label2:
        if r9 == null goto label5;

     label3:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r9);

        if $z0 == 0 goto label5;

        virtualinvoke r9.<com.android.server.pm.PackageInstallerSession: void open()>();

        exitmonitor r1;

     label4:
        return r9;

     label5:
        r10 = new java.lang.SecurityException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw r10;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    static void prepareStageDir(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r9, $r15;
        java.io.IOException $r5, $r12, $r18;
        java.lang.String $r6, $r7, $r8, $r13, $r19;
        java.lang.Throwable $r14;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

     label1:
        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void mkdir(java.lang.String,int)>($r7, 509);

        $r8 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r8, 509);

     label2:
        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r0);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restorecon session dir: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare session dir: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = new java.io.IOException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r14);

        throw $r18;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session dir already exists: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.io.IOException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch android.system.ErrnoException from label1 to label2 with label4;
    }

    private void readSessionsLocked()
    {
        com.android.server.pm.PackageInstallerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        boolean z0, $z1, $z2, z3;
        com.android.server.pm.PackageInstallerSession r2, $r9;
        long l0, l1, l2, l3, $l4, $l8, $l10;
        android.util.SparseArray $r3, $r7, $r20, $r37;
        android.util.AtomicFile $r4;
        java.nio.charset.Charset $r5;
        java.lang.String $r6, $r10, $r11, $r23;
        java.lang.Object $r8;
        android.os.HandlerThread $r12;
        com.android.server.pm.PackageInstallerService$InternalCallback $r13;
        android.content.Context $r14;
        com.android.server.pm.PackageManagerService $r15;
        android.os.Looper $r16;
        java.io.File $r17;
        com.android.server.pm.StagingManager $r18;
        byte $b5, $b11;
        int $i6, $i7, i14, i15, $i16;
        android.util.SparseBooleanArray $r19;
        java.lang.Throwable $r24, $r26, $r27;
        java.lang.Exception $r25;
        java.io.FileInputStream r28, r29, r30, r31;
        java.lang.StringBuilder r32;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        virtualinvoke $r3.<android.util.SparseArray: void clear()>();

        r28 = null;

        r29 = null;

        r30 = null;

     label01:
        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        r31 = virtualinvoke $r4.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label03:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

     label04:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label05:
        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r31, $r6);

     label06:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label07:
        i14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

     label08:
        if i14 == 1 goto label50;

        if i14 != 2 goto label06;

        r30 = r31;

        r28 = r31;

        r29 = r31;

     label09:
        $r10 = "session";

        $r11 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

     label10:
        if z0 == 0 goto label49;

        r30 = r31;

        r28 = r31;

        r29 = r31;

     label11:
        $r13 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        $r14 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r15 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r12 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r16 = virtualinvoke $r12.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r18 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager>;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        r2 = staticinvoke <com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerSession readFromXml(org.xmlpull.v1.XmlPullParser,com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,android.os.Looper,com.android.server.pm.StagingManager,java.io.File,com.android.server.pm.PackageSessionProvider)>(r1, $r13, $r14, $r15, $r16, $r18, $r17, r0);

     label12:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label13:
        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label14:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label15:
        l1 = r2.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

     label16:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label17:
        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label18:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label19:
        l3 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: long getUpdatedMillis()>();

     label20:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label21:
        $z1 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean isStaged()>();

        if $z1 == 0 goto label26;

     label22:
        $l10 = l2 - l3;

        $b11 = $l10 cmp 604800000L;

        if $b11 < 0 goto label25;

        r30 = r31;

        r28 = r31;

        r29 = r31;

     label23:
        $z2 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z2 == 0 goto label25;

     label24:
        z3 = 0;

        goto label38;

     label25:
        z3 = 1;

        goto label38;

     label26:
        $l4 = l0 - l1;

        $b5 = $l4 cmp 259200000L;

        if $b5 < 0 goto label37;

        r30 = r31;

        r28 = r31;

        r29 = r31;

     label27:
        r32 = new java.lang.StringBuilder;

     label28:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label29:
        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

     label30:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label31:
        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Abandoning old session created at ");

     label32:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label33:
        $l8 = r2.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

     label34:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label35:
        $r23 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r23);

     label36:
        z3 = 0;

        goto label38;

     label37:
        z3 = 1;

     label38:
        if z3 == 0 goto label41;

        r30 = r31;

        r28 = r31;

        r29 = r31;

     label39:
        $r20 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i7 = r2.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>($i7, r2);

     label40:
        goto label43;

     label41:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label42:
        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void addHistoricalSessionLocked(com.android.server.pm.PackageInstallerSession)>(r2);

     label43:
        r30 = r31;

        r28 = r31;

        r29 = r31;

     label44:
        $r19 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mAllocatedSessions>;

        $i6 = r2.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r19.<android.util.SparseBooleanArray: void put(int,boolean)>($i6, 1);

     label45:
        goto label49;

     label46:
        $r25 := @caughtexception;

        r30 = r31;

        r28 = r31;

        r29 = r31;

     label47:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstaller", "Could not read session", $r25);

     label48:
        goto label06;

     label49:
        goto label06;

     label50:
        goto label57;

     label51:
        $r24 := @caughtexception;

        goto label55;

     label52:
        $r27 := @caughtexception;

        r30 = r28;

     label53:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstaller", "Failed reading install sessions", $r27);

     label54:
        goto label58;

     label55:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r30);

        throw $r24;

     label56:
        $r26 := @caughtexception;

        r31 = r29;

     label57:
        r28 = r31;

     label58:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r28);

        i15 = 0;

     label59:
        $r37 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i16 = virtualinvoke $r37.<android.util.SparseArray: int size()>();

        if i15 >= $i16 goto label60;

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i15);

        $r9 = (com.android.server.pm.PackageInstallerSession) $r8;

        virtualinvoke $r9.<com.android.server.pm.PackageInstallerSession: void onAfterSessionRead()>();

        i15 = i15 + 1;

        goto label59;

     label60:
        return;

        catch java.io.FileNotFoundException from label01 to label02 with label56;
        catch java.io.IOException from label01 to label02 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label52;
        catch java.lang.Throwable from label01 to label02 with label51;
        catch java.io.FileNotFoundException from label03 to label04 with label56;
        catch java.io.IOException from label03 to label04 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label52;
        catch java.lang.Throwable from label03 to label04 with label51;
        catch java.io.FileNotFoundException from label05 to label06 with label56;
        catch java.io.IOException from label05 to label06 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label52;
        catch java.lang.Throwable from label05 to label06 with label51;
        catch java.io.FileNotFoundException from label07 to label08 with label56;
        catch java.io.IOException from label07 to label08 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label52;
        catch java.lang.Throwable from label07 to label08 with label51;
        catch java.io.FileNotFoundException from label09 to label10 with label56;
        catch java.io.IOException from label09 to label10 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label52;
        catch java.lang.Throwable from label09 to label10 with label51;
        catch java.lang.Exception from label11 to label12 with label46;
        catch java.io.FileNotFoundException from label11 to label12 with label56;
        catch java.io.IOException from label11 to label12 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label52;
        catch java.lang.Throwable from label11 to label12 with label51;
        catch java.io.FileNotFoundException from label13 to label14 with label56;
        catch java.io.IOException from label13 to label14 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label52;
        catch java.lang.Throwable from label13 to label14 with label51;
        catch java.io.FileNotFoundException from label15 to label16 with label56;
        catch java.io.IOException from label15 to label16 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label52;
        catch java.lang.Throwable from label15 to label16 with label51;
        catch java.io.FileNotFoundException from label17 to label18 with label56;
        catch java.io.IOException from label17 to label18 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label52;
        catch java.lang.Throwable from label17 to label18 with label51;
        catch java.io.FileNotFoundException from label19 to label20 with label56;
        catch java.io.IOException from label19 to label20 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label52;
        catch java.lang.Throwable from label19 to label20 with label51;
        catch java.io.FileNotFoundException from label21 to label22 with label56;
        catch java.io.IOException from label21 to label22 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label52;
        catch java.lang.Throwable from label21 to label22 with label51;
        catch java.io.FileNotFoundException from label23 to label24 with label56;
        catch java.io.IOException from label23 to label24 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label52;
        catch java.lang.Throwable from label23 to label24 with label51;
        catch java.io.FileNotFoundException from label27 to label28 with label56;
        catch java.io.IOException from label27 to label28 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label27 to label28 with label52;
        catch java.lang.Throwable from label27 to label28 with label51;
        catch java.io.FileNotFoundException from label29 to label30 with label56;
        catch java.io.IOException from label29 to label30 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label52;
        catch java.lang.Throwable from label29 to label30 with label51;
        catch java.io.FileNotFoundException from label31 to label32 with label56;
        catch java.io.IOException from label31 to label32 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label52;
        catch java.lang.Throwable from label31 to label32 with label51;
        catch java.io.FileNotFoundException from label33 to label34 with label56;
        catch java.io.IOException from label33 to label34 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label33 to label34 with label52;
        catch java.lang.Throwable from label33 to label34 with label51;
        catch java.io.FileNotFoundException from label35 to label36 with label56;
        catch java.io.IOException from label35 to label36 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label35 to label36 with label52;
        catch java.lang.Throwable from label35 to label36 with label51;
        catch java.io.FileNotFoundException from label39 to label40 with label56;
        catch java.io.IOException from label39 to label40 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label39 to label40 with label52;
        catch java.lang.Throwable from label39 to label40 with label51;
        catch java.io.FileNotFoundException from label42 to label43 with label56;
        catch java.io.IOException from label42 to label43 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label42 to label43 with label52;
        catch java.lang.Throwable from label42 to label43 with label51;
        catch java.io.FileNotFoundException from label44 to label45 with label56;
        catch java.io.IOException from label44 to label45 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label44 to label45 with label52;
        catch java.lang.Throwable from label44 to label45 with label51;
        catch java.io.FileNotFoundException from label47 to label48 with label56;
        catch java.io.IOException from label47 to label48 with label52;
        catch org.xmlpull.v1.XmlPullParserException from label47 to label48 with label52;
        catch java.lang.Throwable from label47 to label48 with label51;
        catch java.lang.Throwable from label53 to label54 with label51;
    }

    private void reconcileStagesLocked(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.io.File r1, $r2, $r16;
        java.io.FilenameFilter $r3;
        java.io.File[] $r4;
        android.util.SparseArray $r5, $r13;
        int $i0, i2;
        boolean $z0;
        java.lang.Object $r6, $r14, r22;
        java.lang.StringBuilder $r7;
        java.lang.String $r10, r18;
        com.android.server.pm.PackageManagerService $r11, $r12;
        com.android.server.pm.PackageInstallerSession $r15;
        java.lang.Throwable $r17;
        android.util.ArraySet r19;
        java.util.Iterator r20;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r18 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File getTmpSessionDir(java.lang.String)>(r18);

        $r3 = <com.android.server.pm.PackageInstallerService: java.io.FilenameFilter sStageFilter>;

        $r4 = virtualinvoke $r2.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r3);

        r19 = staticinvoke <com.android.server.pm.PackageInstallerService: android.util.ArraySet newArraySet(java.lang.Object[])>($r4);

        i2 = 0;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label2;

        $r13 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r15 = (com.android.server.pm.PackageInstallerSession) $r14;

        $r16 = $r15.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        virtualinvoke r19.<android.util.ArraySet: boolean remove(java.lang.Object)>($r16);

        i2 = i2 + 1;

        goto label1;

     label2:
        r20 = virtualinvoke r19.<android.util.ArraySet: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r6 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.io.File) $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan stage ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r10);

        $r11 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        r22 = $r11.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r22;

     label4:
        $r12 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r12.<com.android.server.pm.PackageManagerService: void removeCodePathLI(java.io.File)>(r1);

        exitmonitor r22;

     label5:
        goto label3;

     label6:
        $r17 := @caughtexception;

     label7:
        exitmonitor r22;

     label8:
        throw $r17;

     label9:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void writeSessionsAsync()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.os.Handler $r1;
        com.android.server.pm.PackageInstallerService$2 $r2;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r1 = staticinvoke <com.android.server.IoThread: android.os.Handler getHandler()>();

        $r2 = new com.android.server.pm.PackageInstallerService$2;

        specialinvoke $r2.<com.android.server.pm.PackageInstallerService$2: void <init>(com.android.server.pm.PackageInstallerService)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void writeSessionsLocked()
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.internal.util.FastXmlSerializer r1;
        int i0, i1;
        android.util.AtomicFile $r2, $r9, $r15;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        java.lang.Boolean $r5;
        android.util.SparseArray $r7, $r10;
        java.lang.Object $r11;
        java.io.File $r12;
        com.android.server.pm.PackageInstallerSession $r13;
        java.lang.Throwable $r14;
        java.io.FileOutputStream r16, r17;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r16 = null;

     label01:
        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        r17 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label02:
        r16 = r17;

     label03:
        r1 = new com.android.internal.util.FastXmlSerializer;

     label04:
        r16 = r17;

     label05:
        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label06:
        r16 = r17;

     label07:
        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r17, $r4);

     label08:
        r16 = r17;

     label09:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r5);

     label10:
        r16 = r17;

     label11:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "sessions");

     label12:
        r16 = r17;

     label13:
        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        i0 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

     label14:
        i1 = 0;

     label15:
        if i1 >= i0 goto label18;

        r16 = r17;

     label16:
        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r13 = (com.android.server.pm.PackageInstallerSession) $r11;

        $r12 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        virtualinvoke $r13.<com.android.server.pm.PackageInstallerSession: void write(org.xmlpull.v1.XmlSerializer,java.io.File)>(r1, $r12);

     label17:
        i1 = i1 + 1;

        goto label15;

     label18:
        r16 = r17;

     label19:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "sessions");

     label20:
        r16 = r17;

     label21:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

     label22:
        r16 = r17;

     label23:
        $r9 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        virtualinvoke $r9.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r17);

     label24:
        goto label26;

     label25:
        $r14 := @caughtexception;

        if r16 == null goto label26;

        $r15 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        virtualinvoke $r15.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r16);

     label26:
        return;

        catch java.io.IOException from label01 to label02 with label25;
        catch java.io.IOException from label03 to label04 with label25;
        catch java.io.IOException from label05 to label06 with label25;
        catch java.io.IOException from label07 to label08 with label25;
        catch java.io.IOException from label09 to label10 with label25;
        catch java.io.IOException from label11 to label12 with label25;
        catch java.io.IOException from label13 to label14 with label25;
        catch java.io.IOException from label16 to label17 with label25;
        catch java.io.IOException from label19 to label20 with label25;
        catch java.io.IOException from label21 to label22 with label25;
        catch java.io.IOException from label23 to label24 with label25;
    }

    public void abandonSession(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.StringBuilder r2;
        java.lang.Object $r4;
        java.lang.String $r7;
        boolean $z0;
        java.lang.Throwable $r8;
        com.android.server.pm.PackageInstallerSession r9;
        java.lang.SecurityException r10;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r9 = (com.android.server.pm.PackageInstallerSession) $r4;

     label2:
        if r9 == null goto label5;

     label3:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r9);

        if $z0 == 0 goto label5;

        virtualinvoke r9.<com.android.server.pm.PackageInstallerSession: void abandon()>();

        exitmonitor r1;

     label4:
        return;

     label5:
        r10 = new java.lang.SecurityException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw r10;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String allocateExternalStageCidLegacy()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1;
        int i0;
        android.util.SparseBooleanArray $r2;
        java.lang.Throwable $r6;
        java.lang.StringBuilder r7;
        java.lang.String r8;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        i0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        virtualinvoke $r2.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        r7 = new java.lang.StringBuilder;

        specialinvoke r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smdl");

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        r8 = virtualinvoke r7.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return r8;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.io.File allocateStageDirLegacy(java.lang.String, boolean) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        boolean z0;
        android.util.SparseArray r1;
        int i0;
        java.io.IOException r2;
        android.util.SparseBooleanArray $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.String r6;
        java.io.File r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r6 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        i0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        virtualinvoke $r3.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        r7 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildTmpSessionDir(int,java.lang.String)>(i0, r6);

        staticinvoke <com.android.server.pm.PackageInstallerService: void prepareStageDir(java.io.File)>(r7);

     label2:
        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r4 := @caughtexception;

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        r2 = new java.io.IOException;

        specialinvoke r2.<java.io.IOException: void <init>(java.lang.Throwable)>($r5);

        throw r2;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.IllegalStateException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void bypassNextStagedInstallerCheck(boolean)
    {
        com.android.server.pm.PackageInstallerService r0;
        boolean z0, $z1;
        int $i0;
        java.lang.SecurityException $r1;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        z0 := @parameter0: boolean;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCalledBySystemOrShell(int)>($i0);

        if $z1 == 0 goto label1;

        r0.<com.android.server.pm.PackageInstallerService: boolean mBypassNextStagedInstallerCheck> = z0;

        return;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller not allowed to bypass staged installer check");

        throw $r1;
    }

    public int createSession(android.content.pm.PackageInstaller$SessionParams, java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.lang.String r1;
        java.lang.Throwable $r2;
        java.lang.RuntimeException $r3;
        android.content.pm.PackageInstaller$SessionParams r4;
        int i0, i1;
        java.io.IOException r6;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r4 := @parameter0: android.content.pm.PackageInstaller$SessionParams;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        i1 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int createSessionInternal(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>(r4, r1, i0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        r6 = (java.io.IOException) $r2;

        $r3 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r6);

        throw $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1, $r5, $r21;
        java.util.ArrayList r2;
        com.android.server.pm.PackageInstallerSession r3, $r20;
        java.util.List $r10, $r16;
        android.util.SparseBooleanArray $r13;
        java.lang.String $r14, $r18;
        java.lang.Object $r17, $r19, $r22;
        boolean $z0;
        java.lang.Throwable $r23;
        com.android.internal.util.IndentingPrintWriter r24;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r24 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label01:
        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active install sessions:");

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        i0 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label08;

     label04:
        $r21 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r22 = virtualinvoke $r21.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r3 = (com.android.server.pm.PackageInstallerSession) $r22;

        $z0 = virtualinvoke r3.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z0 == 0 goto label06;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label05:
        goto label07;

     label06:
        virtualinvoke r3.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>(r24);

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label07:
        i1 = i1 + 1;

        goto label03;

     label08:
        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Finalized install sessions:");

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i2 = interfaceinvoke r2.<java.util.List: int size()>();

     label09:
        i3 = 0;

     label10:
        if i3 >= i2 goto label13;

     label11:
        $r19 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        $r20 = (com.android.server.pm.PackageInstallerSession) $r19;

        virtualinvoke $r20.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>(r24);

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label12:
        i3 = i3 + 1;

        goto label10;

     label13:
        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Historical install sessions:");

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r10 = r0.<com.android.server.pm.PackageInstallerService: java.util.List mHistoricalSessions>;

        i4 = interfaceinvoke $r10.<java.util.List: int size()>();

     label14:
        i5 = 0;

     label15:
        if i5 >= i4 goto label18;

     label16:
        $r16 = r0.<com.android.server.pm.PackageInstallerService: java.util.List mHistoricalSessions>;

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(i5);

        $r18 = (java.lang.String) $r17;

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r18);

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label17:
        i5 = i5 + 1;

        goto label15;

     label18:
        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Legacy install sessions:");

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r13 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        $r14 = virtualinvoke $r13.<android.util.SparseBooleanArray: java.lang.String toString()>();

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        virtualinvoke r24.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label19:
        exitmonitor r1;

     label20:
        return;

     label21:
        $r23 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r23;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public android.content.pm.ParceledListSlice getAllSessions(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, i1, $i2, $i3, i4;
        android.util.SparseArray r1, $r5, $r7;
        com.android.server.pm.PackageInstallerSession r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        java.util.ArrayList $r4;
        android.content.pm.ParceledListSlice $r6;
        java.lang.Object $r8;
        boolean $z0, $z1, $z3;
        android.content.pm.PackageInstaller$SessionInfo $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 0, "getAllSessions");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

        i4 = 0;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i2 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i4 >= $i2 goto label4;

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r2 = (com.android.server.pm.PackageInstallerSession) $r8;

        $i3 = r2.<com.android.server.pm.PackageInstallerSession: int userId>;

        if $i3 != i0 goto label3;

        $z0 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean isStaged()>();

        if $z1 == 0 goto label2;

        $z3 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z3 != 0 goto label3;

     label2:
        $r9 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoForCaller(boolean,int)>(0, i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r9);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        exitmonitor r1;

     label5:
        $r6 = new android.content.pm.ParceledListSlice;

        specialinvoke $r6.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r4);

        return $r6;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public android.content.pm.ParceledListSlice getMySessions(java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.util.SparseArray r2, $r8, $r10;
        com.android.server.pm.PackageInstallerSession r3;
        android.content.pm.PackageInstaller$SessionInfo r4;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        android.app.AppOpsManager $r6;
        java.util.ArrayList $r7;
        android.content.pm.ParceledListSlice $r9;
        java.lang.Object $r11;
        java.lang.String $r12, r14;
        boolean $z0, $z1;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r14 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, i0, 1, 0, "getMySessions");

        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r6.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i2, r14);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r2;

        i5 = 0;

     label1:
        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i3 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        if i5 >= $i3 goto label3;

        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r3 = (com.android.server.pm.PackageInstallerSession) $r11;

        r4 = virtualinvoke r3.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoForCaller(boolean,int)>(0, 1000);

        $r12 = virtualinvoke r4.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String getInstallerPackageName()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r12, r14);

        if $z0 == 0 goto label2;

        $i4 = r3.<com.android.server.pm.PackageInstallerSession: int userId>;

        if $i4 != i0 goto label2;

        $z1 = virtualinvoke r3.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z1 != 0 goto label2;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        exitmonitor r2;

     label4:
        $r9 = new android.content.pm.ParceledListSlice;

        specialinvoke $r9.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r7);

        return $r9;

     label5:
        $r13 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public com.android.server.pm.PackageInstallerSession getSession(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.pm.PackageInstallerSession r5;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.pm.PackageInstallerSession) $r3;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.lang.Throwable $r4;
        com.android.server.pm.PackageInstallerSession r5;
        android.content.pm.PackageInstaller$SessionInfo r6;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.pm.PackageInstallerSession) $r3;

     label02:
        if r5 == null goto label06;

     label03:
        $z0 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: boolean isStaged()>();

        if $z0 == 0 goto label04;

        $z1 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z1 != 0 goto label06;

     label04:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r6 = virtualinvoke r5.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoForCaller(boolean,int)>(1, $i1);

     label05:
        goto label07;

     label06:
        r6 = null;

     label07:
        exitmonitor r1;

     label08:
        return r6;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.content.pm.ParceledListSlice getStagedSessions()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r2, $r4, $r6;
        java.util.ArrayList $r3;
        int $i0, $i1, i2;
        android.content.pm.ParceledListSlice $r5;
        java.lang.Object $r7;
        boolean $z0, $z1;
        android.content.pm.PackageInstaller$SessionInfo $r8;
        java.lang.Throwable $r9;
        com.android.server.pm.PackageInstallerSession r10;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r2;

        i2 = 0;

     label1:
        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label3;

        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r10 = (com.android.server.pm.PackageInstallerSession) $r7;

        $z0 = virtualinvoke r10.<com.android.server.pm.PackageInstallerSession: boolean isStaged()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r10.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        if $z1 != 0 goto label2;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r8 = virtualinvoke r10.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoForCaller(boolean,int)>(0, $i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        exitmonitor r2;

     label4:
        $r5 = new android.content.pm.ParceledListSlice;

        specialinvoke $r5.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r3);

        return $r5;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void installExistingPackage(java.lang.String, int, int, android.content.IntentSender, int, java.util.List)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.content.IntentSender r2;
        java.util.List r3;
        com.android.server.pm.PackageManagerService $r4;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.IntentSender;

        i2 := @parameter4: int;

        r3 := @parameter5: java.util.List;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r4.<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List,android.content.IntentSender)>(r1, i2, i0, i1, r3, r2);

        return;
    }

    boolean okToSendBroadcasts()
    {
        com.android.server.pm.PackageInstallerService r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $z0 = r0.<com.android.server.pm.PackageInstallerService: boolean mOkToSendBroadcasts>;

        return $z0;
    }

    public void onPrivateVolumeMounted(java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r3 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void reconcileStagesLocked(java.lang.String)>(r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.IPackageInstallerSession openSession(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        android.content.pm.IPackageInstallerSession r3;
        java.io.IOException r5;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

     label1:
        r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: android.content.pm.IPackageInstallerSession openSessionInternal(int)>(i0);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        r5 = (java.io.IOException) $r1;

        $r2 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r5);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void registerCallback(android.content.pm.IPackageInstallerCallback, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.IPackageInstallerCallback r1;
        int i0, $i1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        com.android.server.pm._$$Lambda$PackageInstallerService$vra5ZkE3juVvcgDBu5xv0wVzno8 $r3;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.IPackageInstallerCallback;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, i0, 1, 0, "registerCallback");

        $r3 = new com.android.server.pm._$$Lambda$PackageInstallerService$vra5ZkE3juVvcgDBu5xv0wVzno8;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$PackageInstallerService$vra5ZkE3juVvcgDBu5xv0wVzno8: void <init>(int)>(i0);

        virtualinvoke r0.<com.android.server.pm.PackageInstallerService: void registerCallback(android.content.pm.IPackageInstallerCallback,java.util.function.IntPredicate)>(r1, $r3);

        return;
    }

    public void registerCallback(android.content.pm.IPackageInstallerCallback, java.util.function.IntPredicate)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.IPackageInstallerCallback r1;
        java.util.function.IntPredicate r2;
        com.android.server.pm.PackageInstallerService$Callbacks $r3;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.IPackageInstallerCallback;

        r2 := @parameter1: java.util.function.IntPredicate;

        $r3 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        virtualinvoke $r3.<com.android.server.pm.PackageInstallerService$Callbacks: void register(android.content.pm.IPackageInstallerCallback,java.util.function.IntPredicate)>(r1, r2);

        return;
    }

    void restoreAndApplyStagedSessionIfNeeded()
    {
        com.android.server.pm.PackageInstallerService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList $r1;
        android.util.SparseArray $r2, $r13, r17;
        int $i0, $i1, $i2, $i3, i4;
        com.android.server.pm.PackageManagerService $r3;
        java.lang.Object $r4, $r14;
        com.android.server.pm.PackageInstallerSession $r5, r18, r20;
        java.lang.StringBuilder $r6;
        java.lang.String $r12;
        java.lang.Throwable $r15;
        java.util.Iterator r19;
        com.android.server.pm.StagingManager $r22;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r17 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r17;

        i4 = 0;

     label01:
        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i4 >= $i0 goto label03;

        $r13 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r14 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r18 = (com.android.server.pm.PackageInstallerSession) $r14;

        $z4 = virtualinvoke r18.<com.android.server.pm.PackageInstallerSession: boolean isStaged()>();

        if $z4 == 0 goto label02;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r18);

     label02:
        i4 = i4 + 1;

        goto label01;

     label03:
        exitmonitor r17;

     label04:
        $r3 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        z0 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        r19 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r4 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.android.server.pm.PackageInstallerSession) $r4;

        $z2 = virtualinvoke r20.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z2 != 0 goto label06;

        $z3 = virtualinvoke r20.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z3 == 0 goto label06;

        $i1 = virtualinvoke r20.<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>();

        $r5 = virtualinvoke r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerSession getSession(int)>($i1);

        if $r5 != null goto label06;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An orphan staged session ");

        $i2 = r20.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is found, parent ");

        $i3 = virtualinvoke r20.<com.android.server.pm.PackageInstallerSession: int getParentSessionId()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing");

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r20.<com.android.server.pm.PackageInstallerSession: void setStagedSessionFailed(int,java.lang.String)>(2, $r12);

     label06:
        $r22 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager>;

        virtualinvoke $r22.<com.android.server.pm.StagingManager: void restoreSession(com.android.server.pm.PackageInstallerSession,boolean)>(r20, z0);

        goto label05;

     label07:
        r0.<com.android.server.pm.PackageInstallerService: boolean mOkToSendBroadcasts> = 1;

        return;

     label08:
        $r15 := @caughtexception;

     label09:
        exitmonitor r17;

     label10:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void setPermissionsResult(int, boolean)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        boolean z0;
        android.util.SparseArray r1, $r3;
        android.content.Context $r2;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        com.android.server.pm.PackageInstallerSession r6;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", "PackageInstaller");

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.pm.PackageInstallerSession) $r4;

     label2:
        if r6 == null goto label4;

     label3:
        virtualinvoke r6.<com.android.server.pm.PackageInstallerSession: void setPermissionsResult(boolean)>(z0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void systemReady()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1, $r11, $r16;
        java.util.Iterator r2;
        java.io.File r3, $r9, $r19;
        android.content.Context $r4;
        java.lang.Object $r5, $r12, $r17;
        android.app.AppOpsManager $r6;
        com.android.server.pm.StagingManager $r7;
        java.lang.String $r8, $r15;
        java.io.File[] $r10;
        int $i0, $i2, i3;
        boolean $z0;
        com.android.server.pm.PackageInstallerSession $r18;
        java.lang.Throwable $r20;
        android.util.ArraySet r21;
        java.lang.StringBuilder r22;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r6 = (android.app.AppOpsManager) $r5;

        r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps> = $r6;

        $r7 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.StagingManager mStagingManager>;

        virtualinvoke $r7.<com.android.server.pm.StagingManager: void systemReady()>();

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void readSessionsLocked()>();

        $r8 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void reconcileStagesLocked(java.lang.String)>($r8);

        $r9 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        $r10 = virtualinvoke $r9.<java.io.File: java.io.File[] listFiles()>();

        r21 = staticinvoke <com.android.server.pm.PackageInstallerService: android.util.ArraySet newArraySet(java.lang.Object[])>($r10);

     label02:
        i3 = 0;

     label03:
        $r11 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i0 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        if i3 >= $i0 goto label05;

        $r16 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r17 = virtualinvoke $r16.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        $r18 = (com.android.server.pm.PackageInstallerSession) $r17;

        $i2 = $r18.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r19 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>($i2);

        virtualinvoke r21.<android.util.ArraySet: boolean remove(java.lang.Object)>($r19);

     label04:
        i3 = i3 + 1;

        goto label03;

     label05:
        r2 = virtualinvoke r21.<android.util.ArraySet: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r12 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.io.File) $r12;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan icon ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r15);

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label07:
        goto label06;

     label08:
        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsLocked()>();

        exitmonitor r1;

     label09:
        return;

     label10:
        $r20 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void uninstall(android.content.pm.VersionedPackage, java.lang.String, int, android.content.IntentSender, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, i1, i2, $i4, $i5;
        android.app.admin.DevicePolicyManagerInternal r1;
        long l3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        com.android.server.pm.PackageManagerService $r3, $r13, $r17;
        android.content.pm.ApplicationInfo $r4;
        android.content.Intent $r5;
        java.lang.String $r6, r22, $r27;
        android.net.Uri $r7;
        android.content.pm.IPackageDeleteObserver2 $r9, $r14, $r18;
        android.os.IBinder $r10;
        android.content.Context $r12, $r26, $r29;
        android.app.admin.DevicePolicyEventLogger $r15, $r16;
        boolean $z0, z1;
        android.app.AppOpsManager $r19;
        java.lang.Throwable $r20;
        android.content.pm.VersionedPackage r21;
        android.content.IntentSender r23;
        java.lang.Object $r24;
        com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter $r25;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r21 := @parameter0: android.content.pm.VersionedPackage;

        r22 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r23 := @parameter3: android.content.IntentSender;

        i1 := @parameter4: int;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i2, i1, 1, 1, "uninstall");

        if i2 == 2000 goto label01;

        if i2 == 0 goto label01;

        $r19 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r19.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i2, r22);

     label01:
        $r24 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        r1 = (android.app.admin.DevicePolicyManagerInternal) $r24;

        if r1 == null goto label02;

        $z0 = virtualinvoke r1.<android.app.admin.DevicePolicyManagerInternal: boolean canSilentlyInstallPackage(java.lang.String,int)>(r22, i2);

        if $z0 == 0 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        $r25 = new com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter;

        $r26 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r27 = virtualinvoke r21.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        specialinvoke $r25.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void <init>(android.content.Context,android.content.IntentSender,java.lang.String,boolean,int)>($r26, r23, $r27, z1, i1);

        $r29 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i5 = virtualinvoke $r29.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DELETE_PACKAGES");

        if $i5 != 0 goto label04;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r18 = virtualinvoke $r25.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke $r17.<com.android.server.pm.PackageManagerService: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>(r21, $r18, i1, i0);

        goto label10;

     label04:
        if z1 == 0 goto label08;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r13 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r14 = virtualinvoke $r25.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke $r13.<com.android.server.pm.PackageManagerService: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>(r21, $r14, i1, i0);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        $r15 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(113);

        $r16 = virtualinvoke $r15.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>(r22);

        virtualinvoke $r16.<android.app.admin.DevicePolicyEventLogger: void write()>();

        goto label10;

     label07:
        $r20 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw $r20;

     label08:
        $r3 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r4 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r22, 0, i1);

        $i4 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i4 < 28 goto label09;

        $r12 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        virtualinvoke $r12.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.REQUEST_DELETE_PACKAGES", null);

     label09:
        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.UNINSTALL_PACKAGE");

        $r6 = virtualinvoke r21.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $r7 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", $r6, null);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r7);

        $r9 = virtualinvoke $r25.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        $r10 = interfaceinvoke $r9.<android.content.pm.IPackageDeleteObserver2: android.os.IBinder asBinder()>();

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>("android.content.pm.extra.CALLBACK", $r10);

        virtualinvoke $r25.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void onUserActionRequired(android.content.Intent)>($r5);

     label10:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
    }

    public void uninstallExistingPackage(android.content.pm.VersionedPackage, java.lang.String, android.content.IntentSender, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.VersionedPackage r1;
        android.content.IntentSender r2;
        int i0, i1;
        android.content.Context $r3, $r8;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        android.app.AppOpsManager $r5;
        java.lang.String r6, $r9;
        com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter $r7;
        com.android.server.pm.PackageManagerService $r11;
        android.content.pm.IPackageDeleteObserver2 $r12;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.VersionedPackage;

        r6 := @parameter1: java.lang.String;

        r2 := @parameter2: android.content.IntentSender;

        i0 := @parameter3: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_PACKAGES", null);

        $r4 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, "uninstall");

        if i1 == 2000 goto label1;

        if i1 == 0 goto label1;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r5.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r6);

        goto label1;

     label1:
        $r7 = new com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter;

        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r9 = virtualinvoke r1.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        specialinvoke $r7.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void <init>(android.content.Context,android.content.IntentSender,java.lang.String,boolean,int)>($r8, r2, $r9, 0, i0);

        $r11 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r12 = virtualinvoke $r7.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke $r11.<com.android.server.pm.PackageManagerService: void deleteExistingPackageAsUser(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int)>(r1, $r12, i0);

        return;
    }

    public void unregisterCallback(android.content.pm.IPackageInstallerCallback)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.IPackageInstallerCallback r1;
        com.android.server.pm.PackageInstallerService$Callbacks $r2;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.IPackageInstallerCallback;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        virtualinvoke $r2.<com.android.server.pm.PackageInstallerService$Callbacks: void unregister(android.content.pm.IPackageInstallerCallback)>(r1);

        return;
    }

    public void updateSessionAppIcon(int, android.graphics.Bitmap)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1, $r3;
        com.android.server.pm.PackageInstallerSession r2;
        java.lang.Object $r4, $r9;
        java.lang.String $r7;
        boolean $z0;
        android.content.Context $r8;
        android.app.ActivityManager $r10;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.Throwable $r11;
        android.graphics.Bitmap r12, r13;
        android.content.pm.PackageInstaller$SessionParams $r14, $r15;
        com.android.server.pm.PackageInstallerService$InternalCallback $r16;
        java.lang.SecurityException r17;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i4 := @parameter0: int;

        r12 := @parameter1: android.graphics.Bitmap;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r2 = (com.android.server.pm.PackageInstallerSession) $r4;

     label02:
        if r2 == null goto label11;

     label03:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r2);

        if $z0 == 0 goto label11;

     label04:
        r13 = r12;

        if r12 == null goto label09;

     label05:
        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        $r10 = (android.app.ActivityManager) $r9;

        i5 = virtualinvoke $r10.<android.app.ActivityManager: int getLauncherLargeIconSize()>();

        $i0 = virtualinvoke r12.<android.graphics.Bitmap: int getWidth()>();

        $i1 = i5 * 2;

        if $i0 > $i1 goto label08;

     label06:
        r13 = r12;

     label07:
        $i2 = virtualinvoke r12.<android.graphics.Bitmap: int getHeight()>();

        $i3 = i5 * 2;

        if $i2 <= $i3 goto label09;

     label08:
        r13 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r12, i5, i5, 1);

     label09:
        $r14 = r2.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r14.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = r13;

        $r15 = r2.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r15.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = -1L;

        $r16 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        virtualinvoke $r16.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionBadgingChanged(com.android.server.pm.PackageInstallerSession)>(r2);

        exitmonitor r1;

     label10:
        return;

     label11:
        r17 = new java.lang.SecurityException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r7 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw r17;

     label12:
        $r11 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void updateSessionAppLabel(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.String $r6, r10;
        boolean $z0;
        android.content.pm.PackageInstaller$SessionParams $r7;
        com.android.server.pm.PackageInstallerService$InternalCallback $r8;
        java.lang.Throwable $r9;
        com.android.server.pm.PackageInstallerSession r11;
        java.lang.SecurityException r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r11 = (com.android.server.pm.PackageInstallerSession) $r3;

     label2:
        if r11 == null goto label5;

     label3:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r11);

        if $z0 == 0 goto label5;

        $r7 = r11.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r7.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = r10;

        $r8 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        virtualinvoke $r8.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionBadgingChanged(com.android.server.pm.PackageInstallerSession)>(r11);

        exitmonitor r1;

     label4:
        return;

     label5:
        r12 = new java.lang.SecurityException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw r12;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }
}
