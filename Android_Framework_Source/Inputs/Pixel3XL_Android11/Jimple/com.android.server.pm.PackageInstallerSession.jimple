public class com.android.server.pm.PackageInstallerSession extends android.content.pm.IPackageInstallerSession$Stub
{
    private static final java.lang.String ATTR_ABI_OVERRIDE;
    private static final java.lang.String ATTR_APP_ICON;
    private static final java.lang.String ATTR_APP_LABEL;
    private static final java.lang.String ATTR_APP_PACKAGE_NAME;
    private static final java.lang.String ATTR_COMMITTED;
    private static final java.lang.String ATTR_CREATED_MILLIS;
    private static final java.lang.String ATTR_DATALOADER_ARGUMENTS;
    private static final java.lang.String ATTR_DATALOADER_CLASS_NAME;
    private static final java.lang.String ATTR_DATALOADER_PACKAGE_NAME;
    private static final java.lang.String ATTR_DATALOADER_TYPE;
    private static final java.lang.String ATTR_DESTROYED;
    private static final java.lang.String ATTR_INITIATING_PACKAGE_NAME;
    private static final java.lang.String ATTR_INSTALLER_PACKAGE_NAME;
    private static final java.lang.String ATTR_INSTALLER_UID;
    private static final java.lang.String ATTR_INSTALL_FLAGS;
    private static final java.lang.String ATTR_INSTALL_LOCATION;
    private static final java.lang.String ATTR_INSTALL_REASON;
    private static final java.lang.String ATTR_IS_APPLIED;
    private static final java.lang.String ATTR_IS_DATALOADER;
    private static final java.lang.String ATTR_IS_FAILED;
    private static final java.lang.String ATTR_IS_READY;
    private static final java.lang.String ATTR_LENGTH_BYTES;
    private static final java.lang.String ATTR_LOCATION;
    private static final java.lang.String ATTR_METADATA;
    private static final java.lang.String ATTR_MODE;
    private static final java.lang.String ATTR_MULTI_PACKAGE;
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_ORIGINATING_PACKAGE_NAME;
    private static final java.lang.String ATTR_ORIGINATING_UID;
    private static final java.lang.String ATTR_ORIGINATING_URI;
    private static final java.lang.String ATTR_PARENT_SESSION_ID;
    private static final java.lang.String ATTR_PREPARED;
    private static final java.lang.String ATTR_REFERRER_URI;
    private static final java.lang.String ATTR_SEALED;
    private static final java.lang.String ATTR_SESSION_ID;
    private static final java.lang.String ATTR_SESSION_STAGE_CID;
    private static final java.lang.String ATTR_SESSION_STAGE_DIR;
    private static final java.lang.String ATTR_SIGNATURE;
    private static final java.lang.String ATTR_SIZE_BYTES;
    private static final java.lang.String ATTR_STAGED_SESSION;
    private static final java.lang.String ATTR_STAGED_SESSION_ERROR_CODE;
    private static final java.lang.String ATTR_STAGED_SESSION_ERROR_MESSAGE;
    private static final java.lang.String ATTR_UPDATED_MILLIS;
    private static final java.lang.String ATTR_USER_ID;
    private static final java.lang.String ATTR_VOLUME_UUID;
    private static final int[] EMPTY_CHILD_SESSION_ARRAY;
    private static final android.content.pm.InstallationFile[] EMPTY_INSTALLATION_FILE_ARRAY;
    private static final int INCREMENTAL_STORAGE_BLOCKED_TIMEOUT_MS;
    private static final int INCREMENTAL_STORAGE_UNHEALTHY_MONITORING_MS;
    private static final int INCREMENTAL_STORAGE_UNHEALTHY_TIMEOUT_MS;
    private static final boolean LOGD;
    private static final int MSG_INSTALL;
    private static final int MSG_ON_PACKAGE_INSTALLED;
    private static final int MSG_SESSION_VERIFICATION_FAILURE;
    private static final int MSG_STREAM_VALIDATE_AND_COMMIT;
    private static final java.lang.String PROPERTY_NAME_INHERIT_NATIVE;
    private static final java.lang.String REMOVE_MARKER_EXTENSION;
    private static final java.lang.String SYSTEM_DATA_LOADER_PACKAGE;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_AUTO_REVOKE_PERMISSIONS_MODE;
    static final java.lang.String TAG_CHILD_SESSION;
    private static final java.lang.String TAG_GRANTED_RUNTIME_PERMISSION;
    static final java.lang.String TAG_SESSION;
    static final java.lang.String TAG_SESSION_FILE;
    private static final java.lang.String TAG_WHITELISTED_RESTRICTED_PERMISSION;
    private static final java.io.FileFilter sAddedApkFilter;
    private static final java.io.FileFilter sAddedFilter;
    private static final java.io.FileFilter sRemovedFilter;
    final long createdMillis;
    private final java.util.concurrent.atomic.AtomicInteger mActiveCount;
    private final java.util.ArrayList mBridges;
    private final com.android.server.pm.PackageInstallerService$InternalCallback mCallback;
    private android.util.SparseIntArray mChildSessionIds;
    private float mClientProgress;
    private boolean mCommitted;
    private final android.content.Context mContext;
    private boolean mDataLoaderFinished;
    private boolean mDestroyed;
    private final java.util.ArrayList mFds;
    private android.util.ArraySet mFiles;
    private java.lang.String mFinalMessage;
    private int mFinalStatus;
    private final android.os.Handler mHandler;
    private final android.os.Handler$Callback mHandlerCallback;
    private android.os.incremental.IncrementalFileStorages mIncrementalFileStorages;
    private java.io.File mInheritedFilesBase;
    private com.android.server.pm.InstallSource mInstallSource;
    private int mInstallerUid;
    private float mInternalProgress;
    private final java.lang.Object mLock;
    private final int mOriginalInstallerUid;
    private java.lang.String mPackageName;
    private int mParentSessionId;
    private boolean mPermissionsManuallyAccepted;
    private final com.android.server.pm.PackageManagerService mPm;
    private boolean mPrepared;
    private float mProgress;
    private boolean mRelinquished;
    private android.content.IntentSender mRemoteStatusReceiver;
    private float mReportedProgress;
    private java.io.File mResolvedBaseFile;
    private final java.util.List mResolvedInheritedFiles;
    private final java.util.List mResolvedInstructionSets;
    private final java.util.List mResolvedNativeLibPaths;
    private final java.util.List mResolvedStagedFiles;
    private boolean mSealed;
    private final com.android.server.pm.PackageSessionProvider mSessionProvider;
    private boolean mShouldBeSealed;
    private android.content.pm.PackageParser$SigningDetails mSigningDetails;
    private boolean mStagedSessionApplied;
    private int mStagedSessionErrorCode;
    private java.lang.String mStagedSessionErrorMessage;
    private boolean mStagedSessionFailed;
    private boolean mStagedSessionReady;
    private final com.android.server.pm.StagingManager mStagingManager;
    private boolean mVerityFound;
    private long mVersionCode;
    final android.content.pm.PackageInstaller$SessionParams params;
    final int sessionId;
    final java.lang.String stageCid;
    final java.io.File stageDir;
    private long updatedMillis;
    final int userId;

    static void <clinit>()
    {
        int[] $r0;
        android.content.pm.InstallationFile[] $r1;
        com.android.server.pm.PackageInstallerSession$1 $r2;
        com.android.server.pm.PackageInstallerSession$2 $r3;
        com.android.server.pm.PackageInstallerSession$3 $r4;

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG_WHITELISTED_RESTRICTED_PERMISSION> = "whitelisted-restricted-permission";

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG_SESSION_FILE> = "sessionFile";

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG_SESSION> = "session";

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG_GRANTED_RUNTIME_PERMISSION> = "granted-runtime-permission";

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG_CHILD_SESSION> = "childSession";

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG_AUTO_REVOKE_PERMISSIONS_MODE> = "auto-revoke-permissions-mode";

        <com.android.server.pm.PackageInstallerSession: java.lang.String TAG> = "PackageInstallerSession";

        <com.android.server.pm.PackageInstallerSession: java.lang.String SYSTEM_DATA_LOADER_PACKAGE> = "android";

        <com.android.server.pm.PackageInstallerSession: java.lang.String REMOVE_MARKER_EXTENSION> = ".removed";

        <com.android.server.pm.PackageInstallerSession: java.lang.String PROPERTY_NAME_INHERIT_NATIVE> = "pi.inherit_native_on_dont_kill";

        <com.android.server.pm.PackageInstallerSession: int MSG_STREAM_VALIDATE_AND_COMMIT> = 1;

        <com.android.server.pm.PackageInstallerSession: int MSG_SESSION_VERIFICATION_FAILURE> = 4;

        <com.android.server.pm.PackageInstallerSession: int MSG_ON_PACKAGE_INSTALLED> = 3;

        <com.android.server.pm.PackageInstallerSession: int MSG_INSTALL> = 2;

        <com.android.server.pm.PackageInstallerSession: boolean LOGD> = 1;

        <com.android.server.pm.PackageInstallerSession: int INCREMENTAL_STORAGE_UNHEALTHY_TIMEOUT_MS> = 7000;

        <com.android.server.pm.PackageInstallerSession: int INCREMENTAL_STORAGE_UNHEALTHY_MONITORING_MS> = 60000;

        <com.android.server.pm.PackageInstallerSession: int INCREMENTAL_STORAGE_BLOCKED_TIMEOUT_MS> = 2000;

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_VOLUME_UUID> = "volumeUuid";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_USER_ID> = "userId";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_UPDATED_MILLIS> = "updatedMillis";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_STAGED_SESSION_ERROR_MESSAGE> = "errorMessage";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_STAGED_SESSION_ERROR_CODE> = "errorCode";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_STAGED_SESSION> = "stagedSession";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_SIZE_BYTES> = "sizeBytes";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_SIGNATURE> = "signature";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_SESSION_STAGE_DIR> = "sessionStageDir";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_SESSION_STAGE_CID> = "sessionStageCid";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_SESSION_ID> = "sessionId";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_SEALED> = "sealed";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_REFERRER_URI> = "referrerUri";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_PREPARED> = "prepared";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_PARENT_SESSION_ID> = "parentSessionId";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_ORIGINATING_URI> = "originatingUri";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_ORIGINATING_UID> = "originatingUid";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_ORIGINATING_PACKAGE_NAME> = "installOriginatingPackageName";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_NAME> = "name";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_MULTI_PACKAGE> = "multiPackage";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_MODE> = "mode";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_METADATA> = "metadata";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_LOCATION> = "location";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_LENGTH_BYTES> = "lengthBytes";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_IS_READY> = "isReady";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_IS_FAILED> = "isFailed";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_IS_DATALOADER> = "isDataLoader";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_IS_APPLIED> = "isApplied";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_INSTALL_REASON> = "installRason";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_INSTALL_LOCATION> = "installLocation";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_INSTALL_FLAGS> = "installFlags";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_INSTALLER_UID> = "installerUid";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_INSTALLER_PACKAGE_NAME> = "installerPackageName";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_INITIATING_PACKAGE_NAME> = "installInitiatingPackageName";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_DESTROYED> = "destroyed";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_DATALOADER_TYPE> = "dataLoaderType";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_DATALOADER_PACKAGE_NAME> = "dataLoaderPackageName";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_DATALOADER_CLASS_NAME> = "dataLoaderClassName";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_DATALOADER_ARGUMENTS> = "dataLoaderArguments";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_CREATED_MILLIS> = "createdMillis";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_COMMITTED> = "committed";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_APP_PACKAGE_NAME> = "appPackageName";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_APP_LABEL> = "appLabel";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_APP_ICON> = "appIcon";

        <com.android.server.pm.PackageInstallerSession: java.lang.String ATTR_ABI_OVERRIDE> = "abiOverride";

        $r0 = <libcore.util.EmptyArray: int[] INT>;

        <com.android.server.pm.PackageInstallerSession: int[] EMPTY_CHILD_SESSION_ARRAY> = $r0;

        $r1 = newarray (android.content.pm.InstallationFile)[0];

        <com.android.server.pm.PackageInstallerSession: android.content.pm.InstallationFile[] EMPTY_INSTALLATION_FILE_ARRAY> = $r1;

        $r2 = new com.android.server.pm.PackageInstallerSession$1;

        specialinvoke $r2.<com.android.server.pm.PackageInstallerSession$1: void <init>()>();

        <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sAddedApkFilter> = $r2;

        $r3 = new com.android.server.pm.PackageInstallerSession$2;

        specialinvoke $r3.<com.android.server.pm.PackageInstallerSession$2: void <init>()>();

        <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sAddedFilter> = $r3;

        $r4 = new com.android.server.pm.PackageInstallerSession$3;

        specialinvoke $r4.<com.android.server.pm.PackageInstallerSession$3: void <init>()>();

        <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sRemovedFilter> = $r4;

        return;
    }

    public void <init>(com.android.server.pm.PackageInstallerService$InternalCallback, android.content.Context, com.android.server.pm.PackageManagerService, com.android.server.pm.PackageSessionProvider, android.os.Looper, com.android.server.pm.StagingManager, int, int, int, com.android.server.pm.InstallSource, android.content.pm.PackageInstaller$SessionParams, long, java.io.File, java.lang.String, android.content.pm.InstallationFile[], boolean, boolean, boolean, boolean, int[], int, boolean, boolean, boolean, int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.Context r1;
        com.android.server.pm.PackageManagerService r2;
        com.android.server.pm.PackageSessionProvider r3;
        android.os.Looper r4;
        com.android.server.pm.StagingManager r5;
        com.android.server.pm.InstallSource r6, $r28;
        android.content.pm.PackageInstaller$SessionParams r7, $r33;
        long l0;
        java.io.File r8;
        java.lang.String r9, r12, $r30, $r36, r44;
        android.content.pm.InstallationFile[] r10;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, $z15;
        int[] r11;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10;
        java.util.concurrent.atomic.AtomicInteger $r14;
        java.lang.Object $r15;
        java.util.ArrayList $r16, $r17, $r20, $r21, $r22, $r23;
        android.util.SparseIntArray $r18, $r41;
        android.util.ArraySet $r19, $r39;
        com.android.server.pm.PackageInstallerSession$4 $r24;
        android.os.Handler $r25;
        android.os.Handler$Callback $r26;
        java.lang.IllegalArgumentException $r29, $r31, $r32, $r37, $r40;
        android.content.pm.DataLoaderParams $r34;
        android.content.ComponentName $r35;
        com.android.server.pm.PackageInstallerSession$FileEntry $r38;
        com.android.server.pm.PackageInstallerService$InternalCallback r42;
        android.content.pm.InstallationFile r43;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r42 := @parameter0: com.android.server.pm.PackageInstallerService$InternalCallback;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: com.android.server.pm.PackageManagerService;

        r3 := @parameter3: com.android.server.pm.PackageSessionProvider;

        r4 := @parameter4: android.os.Looper;

        r5 := @parameter5: com.android.server.pm.StagingManager;

        i3 := @parameter6: int;

        i4 := @parameter7: int;

        i5 := @parameter8: int;

        r6 := @parameter9: com.android.server.pm.InstallSource;

        r7 := @parameter10: android.content.pm.PackageInstaller$SessionParams;

        l0 := @parameter11: long;

        r8 := @parameter12: java.io.File;

        r9 := @parameter13: java.lang.String;

        r10 := @parameter14: android.content.pm.InstallationFile[];

        z0 := @parameter15: boolean;

        z1 := @parameter16: boolean;

        z2 := @parameter17: boolean;

        z3 := @parameter18: boolean;

        r11 := @parameter19: int[];

        i1 := @parameter20: int;

        z4 := @parameter21: boolean;

        z5 := @parameter22: boolean;

        z6 := @parameter23: boolean;

        i2 := @parameter24: int;

        r12 := @parameter25: java.lang.String;

        specialinvoke r0.<android.content.pm.IPackageInstallerSession$Stub: void <init>()>();

        $r14 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r14.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount> = $r14;

        $r15 = new java.lang.Object;

        specialinvoke $r15.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock> = $r15;

        r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress> = 0.0F;

        r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress> = 0.0F;

        r0.<com.android.server.pm.PackageInstallerSession: float mProgress> = 0.0F;

        r0.<com.android.server.pm.PackageInstallerSession: float mReportedProgress> = -1.0F;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mShouldBeSealed> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mRelinquished> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsManuallyAccepted> = 0;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds> = $r16;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges> = $r17;

        $r18 = new android.util.SparseIntArray;

        specialinvoke $r18.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds> = $r18;

        $r19 = new android.util.ArraySet;

        specialinvoke $r19.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles> = $r19;

        r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode> = 0;

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles> = $r20;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles> = $r21;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInstructionSets> = $r22;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedNativeLibPaths> = $r23;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDataLoaderFinished> = 0;

        $r24 = new com.android.server.pm.PackageInstallerSession$4;

        specialinvoke $r24.<com.android.server.pm.PackageInstallerSession$4: void <init>(com.android.server.pm.PackageInstallerSession)>(r0);

        r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler$Callback mHandlerCallback> = $r24;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback> = r42;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext> = r1;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm> = r2;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider> = r3;

        $r25 = new android.os.Handler;

        $r26 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler$Callback mHandlerCallback>;

        specialinvoke $r25.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>(r4, $r26);

        r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler> = $r25;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.StagingManager mStagingManager> = r5;

        r0.<com.android.server.pm.PackageInstallerSession: int sessionId> = i3;

        r0.<com.android.server.pm.PackageInstallerSession: int userId> = i4;

        r0.<com.android.server.pm.PackageInstallerSession: int mOriginalInstallerUid> = i5;

        r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid> = i5;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        $r28 = (com.android.server.pm.InstallSource) r6;

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource> = $r28;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params> = r7;

        r0.<com.android.server.pm.PackageInstallerSession: long createdMillis> = l0;

        r0.<com.android.server.pm.PackageInstallerSession: long updatedMillis> = l0;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir> = r8;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid> = r9;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mShouldBeSealed> = z3;

        if r11 == null goto label03;

        i6 = lengthof r11;

        i7 = 0;

     label01:
        if i7 >= i6 goto label02;

        i8 = r11[i7];

        $r41 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        virtualinvoke $r41.<android.util.SparseIntArray: void put(int,int)>(i8, 0);

        i7 = i7 + 1;

        goto label01;

     label02:
        goto label03;

     label03:
        r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId> = i1;

        if r10 == null goto label06;

        i9 = 0;

        i10 = lengthof r10;

     label04:
        if i9 >= i10 goto label06;

        r43 = r10[i9];

        $r39 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        $r38 = new com.android.server.pm.PackageInstallerSession$FileEntry;

        specialinvoke $r38.<com.android.server.pm.PackageInstallerSession$FileEntry: void <init>(int,android.content.pm.InstallationFile)>(i9, r43);

        $z12 = virtualinvoke $r39.<android.util.ArraySet: boolean add(java.lang.Object)>($r38);

        if $z12 == 0 goto label05;

        i9 = i9 + 1;

        goto label04;

     label05:
        $r40 = new java.lang.IllegalArgumentException;

        specialinvoke $r40.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Trying to add a duplicate installation file");

        throw $r40;

     label06:
        $z7 = r7.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        if $z7 != 0 goto label12;

        z13 = 1;

        if r8 != null goto label07;

        z14 = 1;

        goto label08;

     label07:
        z14 = 0;

     label08:
        if r9 != null goto label09;

        goto label10;

     label09:
        z13 = 0;

     label10:
        if z14 == z13 goto label11;

        goto label12;

     label11:
        $r37 = new java.lang.IllegalArgumentException;

        specialinvoke $r37.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exactly one of stageDir or stageCid stage must be set");

        throw $r37;

     label12:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared> = z0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted> = z1;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed> = z2;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady> = z4;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed> = z5;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied> = z6;

        r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode> = i2;

        if r12 == null goto label13;

        r44 = r12;

        goto label14;

     label13:
        r44 = "";

     label14:
        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage> = r44;

        $z8 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z8 == 0 goto label16;

        $z11 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isApexInstallation()>();

        if $z11 != 0 goto label15;

        $r33 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r34 = $r33.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $r35 = virtualinvoke $r34.<android.content.pm.DataLoaderParams: android.content.ComponentName getComponentName()>();

        $r36 = virtualinvoke $r35.<android.content.ComponentName: java.lang.String getPackageName()>();

        if $r36 != "android" goto label16;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertShellOrSystemCalling(java.lang.String)>("System data loaders");

        goto label16;

     label15:
        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("DataLoader installation of APEX modules is not allowed.");

        throw $r32;

     label16:
        $z15 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isIncrementalInstallation()>();

        if $z15 == 0 goto label19;

        $z9 = staticinvoke <android.os.incremental.IncrementalManager: boolean isAllowed()>();

        if $z9 == 0 goto label18;

        $r30 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $z10 = staticinvoke <com.android.server.pm.PackageInstallerSession: boolean isIncrementalInstallationAllowed(java.lang.String)>($r30);

        if $z10 == 0 goto label17;

        goto label19;

     label17:
        $r31 = new java.lang.IllegalArgumentException;

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incremental installation of this package is not allowed.");

        throw $r31;

     label18:
        $r29 = new java.lang.IllegalArgumentException;

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incremental installation not allowed.");

        throw $r29;

     label19:
        return;
    }

    static void access$000(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void handleStreamValidateAndCommit()>();

        return;
    }

    static void access$100(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void handleInstall()>();

        return;
    }

    static boolean access$1000(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        return $z0;
    }

    static void access$1100(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        return;
    }

    static void access$1200(com.android.server.pm.PackageInstallerSession, int, java.lang.String, android.os.Bundle)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1;
        android.os.Bundle r2;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.Bundle;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(i0, r1, r2);

        return;
    }

    static boolean access$1300(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDataLoaderFinished>;

        return $z0;
    }

    static boolean access$1302(com.android.server.pm.PackageInstallerSession, boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter1: boolean;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDataLoaderFinished> = z0;

        return z0;
    }

    static void access$1400(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void onStorageUnhealthy()>();

        return;
    }

    static void access$1500(com.android.server.pm.PackageInstallerSession, int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionVerificationFailure(int,java.lang.String)>(i0, r1);

        return;
    }

    static int access$1600(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int $i0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        return $i0;
    }

    static com.android.server.pm.PackageSessionProvider access$1700(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.PackageSessionProvider $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider>;

        return $r1;
    }

    static void access$1800(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchStreamValidateAndCommit()>();

        return;
    }

    static void access$1900(com.android.server.pm.PackageInstallerSession, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void sendPendingStreaming(java.lang.String)>(r1);

        return;
    }

    static android.content.Context access$200(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$300(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked()>();

        return $z0;
    }

    static void access$400(android.content.Context, android.content.IntentSender, int, boolean, int, java.lang.String, int, java.lang.String, android.os.Bundle)
    {
        android.content.Context r0;
        android.content.IntentSender r1;
        int i0, i1, i2;
        boolean z0;
        java.lang.String r2, r3;
        android.os.Bundle r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.IntentSender;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        r2 := @parameter5: java.lang.String;

        i2 := @parameter6: int;

        r3 := @parameter7: java.lang.String;

        r4 := @parameter8: android.os.Bundle;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void sendOnPackageInstalled(android.content.Context,android.content.IntentSender,int,boolean,int,java.lang.String,int,java.lang.String,android.os.Bundle)>(r0, r1, i0, z0, i1, r2, i2, r3, r4);

        return;
    }

    static void access$500(com.android.server.pm.PackageInstallerSession, int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void onSessionVerificationFailure(int,java.lang.String)>(i0, r1);

        return;
    }

    static android.os.ParcelFileDescriptor access$700(com.android.server.pm.PackageInstallerSession, java.lang.String, long, long, android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1;
        long l0, l1;
        android.os.ParcelFileDescriptor r2, $r3;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r2 := @parameter4: android.os.ParcelFileDescriptor;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor doWriteInternal(java.lang.String,long,long,android.os.ParcelFileDescriptor)>(r1, l0, l1, r2);

        return $r3;
    }

    static android.os.Handler access$800(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        return $r1;
    }

    static java.lang.Object access$900(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        return $r1;
    }

    private void assertApkConsistentLocked(java.lang.String, android.content.pm.PackageParser$ApkLite) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r2, $r3, $r7, $r10, $r13, $r15, $r23, $r30, $r32, $r33, $r38, $r41, $r44;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r4, $r16, $r26, $r34;
        com.android.server.pm.PackageManagerException $r12, $r22, $r29, $r43;
        android.content.pm.PackageInstaller$SessionParams $r14, $r31, $r37;
        long $l0, $l1, $l4;
        byte $b2;
        int $i3;
        android.content.pm.PackageParser$SigningDetails $r24, $r25;
        android.content.pm.PackageParser$ApkLite r45;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        r45 := @parameter1: android.content.pm.PackageParser$ApkLite;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r2 = r45.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r15 = $r14.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        if $r15 == null goto label2;

        $r31 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r33 = $r31.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $r32 = r45.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        $z2 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r32);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified package ");

        $r37 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r38 = $r37.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inconsistent with ");

        $r41 = r45.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = new com.android.server.pm.PackageManagerException;

        $r44 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r44);

        throw $r43;

     label2:
        $l0 = r0.<com.android.server.pm.PackageInstallerSession: long mVersionCode>;

        $l1 = virtualinvoke r45.<android.content.pm.PackageParser$ApkLite: long getLongVersionCode()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label4;

        $r25 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r24 = r45.<android.content.pm.PackageParser$ApkLite: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $z1 = virtualinvoke $r25.<android.content.pm.PackageParser$SigningDetails: boolean signaturesMatchExactly(android.content.pm.PackageParser$SigningDetails)>($r24);

        if $z1 == 0 goto label3;

        return;

     label3:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures are inconsistent");

        $r29 = new com.android.server.pm.PackageManagerException;

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r30);

        throw $r29;

     label4:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version code ");

        $i3 = r45.<android.content.pm.PackageParser$ApkLite: int versionCode>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inconsistent with ");

        $l4 = r0.<com.android.server.pm.PackageInstallerSession: long mVersionCode>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r22 = new com.android.server.pm.PackageManagerException;

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r23);

        throw $r22;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" package ");

        $r7 = r45.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inconsistent with ");

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = new com.android.server.pm.PackageManagerException;

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r13);

        throw $r12;
    }

    private void assertCallerIsOwnerOrRootLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 0 goto label2;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        if i0 != $i1 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session does not belong to uid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    private void assertCallerIsOwnerOrRootOrSystemLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 0 goto label2;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        if i0 == $i1 goto label2;

        if i0 != 1000 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session does not belong to uid ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        return;
    }

    private void assertCanWrite(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z1 != 0 goto label7;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealedLocked(java.lang.String)>("assertCanWrite");

        exitmonitor r1;

     label2:
        if z0 == 0 goto label3;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertShellOrSystemCalling(java.lang.String)>("Reverse mode");

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot write regular files in a data loader installation session.");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void assertConsistencyWithLocked(com.android.server.pm.PackageInstallerSession) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0, r1;
        android.content.pm.PackageInstaller$SessionParams $r2, $r3, $r12, $r13;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r14;
        int $i0, $i1, $i2, $i3;
        com.android.server.pm.PackageManagerException $r10, $r20;
        java.lang.String $r11, $r21;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z1 = $r2.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        $r3 = r1.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = $r3.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z1 != $z0 goto label2;

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z2 = virtualinvoke $r12.<android.content.pm.PackageInstaller$SessionParams: boolean getEnableRollback()>();

        $r13 = r1.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z3 = virtualinvoke $r13.<android.content.pm.PackageInstaller$SessionParams: boolean getEnableRollback()>();

        if $z2 != $z3 goto label1;

        return;

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multipackage Inconsistency: session ");

        $i2 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and session ");

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have inconsistent rollback settings");

        $r20 = new com.android.server.pm.PackageManagerException;

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-120, $r21);

        throw $r20;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Multipackage Inconsistency: session ");

        $i0 = r1.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and session ");

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" have inconsistent staged settings");

        $r10 = new com.android.server.pm.PackageManagerException;

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-120, $r11);

        throw $r10;
    }

    private void assertMultiPackageConsistencyLocked(java.util.List) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0, r4;
        java.util.Iterator r1;
        java.lang.Object $r2;
        java.util.List r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r3 := @parameter0: java.util.List;

        r1 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.pm.PackageInstallerSession) $r2;

        if r4 != null goto label2;

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertConsistencyWithLocked(com.android.server.pm.PackageInstallerSession)>(r4);

        goto label1;

     label3:
        return;
    }

    private void assertNoWriteFileTransfersOpenLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.util.ArrayList $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r3, $r6;
        android.os.FileBridge $r4;
        java.lang.SecurityException $r5, $r8;
        android.os.RevocableFileDescriptor $r7;
        java.util.Iterator r9, r10;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds>;

        r9 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.os.RevocableFileDescriptor) $r6;

        $z3 = virtualinvoke $r7.<android.os.RevocableFileDescriptor: boolean isRevoked()>();

        if $z3 == 0 goto label2;

        goto label1;

     label2:
        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Files still open");

        throw $r8;

     label3:
        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        r10 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r3 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.os.FileBridge) $r3;

        $z2 = virtualinvoke $r4.<android.os.FileBridge: boolean isClosed()>();

        if $z2 == 0 goto label5;

        goto label4;

     label5:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Files still open");

        throw $r5;

     label6:
        return;
    }

    private void assertPreparedAndNotCommittedOrDestroyedLocked(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotDestroyedLocked(java.lang.String)>(r1);

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed after commit");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void assertPreparedAndNotDestroyedLocked(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r6, $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r7;
        java.lang.IllegalStateException $r5;
        java.lang.SecurityException $r10;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed after destruction");

        $r10 = new java.lang.SecurityException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before prepared");

        $r5 = new java.lang.IllegalStateException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void assertPreparedAndNotSealedLocked(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotCommittedOrDestroyedLocked(java.lang.String)>(r1);

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not allowed after sealing");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private void assertShellOrSystemCalling(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r7;
        int i0;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 0 goto label2;

        if i0 == 1000 goto label2;

        if i0 != 2000 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" only supported from shell or system");

        $r6 = new java.lang.SecurityException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label2:
        return;
    }

    private static java.io.File buildAppIconFile(int, java.io.File)
    {
        int i0;
        java.io.File r0, $r6;
        java.lang.StringBuilder $r2;
        java.lang.String $r7;

        i0 := @parameter0: int;

        r0 := @parameter1: java.io.File;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_icon.");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r6 = new java.io.File;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r7);

        return $r6;
    }

    private void cleanStageDir()
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.PackageManagerService $r1;
        java.io.File $r2;
        com.android.server.pm.Installer $r3;
        java.lang.String $r4;
        com.android.server.pm.Installer$InstallerException $r5;
        android.os.incremental.IncrementalFileStorages r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r6 = r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages>;

        if r6 == null goto label1;

        virtualinvoke r6.<android.os.incremental.IncrementalFileStorages: void cleanUp()>();

        r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages> = null;

     label1:
        $r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r3 = $r1.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<com.android.server.pm.Installer: void rmPackageDir(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch com.android.server.pm.Installer$InstallerException from label1 to label2 with label3;
    }

    private void cleanStageDir(java.util.List)
    {
        com.android.server.pm.PackageInstallerSession r0, r4;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.util.List r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r3 := @parameter0: java.util.List;

        if r3 == null goto label4;

        r1 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.pm.PackageInstallerSession) $r2;

        if r4 == null goto label2;

        specialinvoke r4.<com.android.server.pm.PackageInstallerSession: void cleanStageDir()>();

     label2:
        goto label1;

     label3:
        goto label5;

     label4:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void cleanStageDir()>();

     label5:
        return;
    }

    private void cleanStageDirNotLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object $r2;
        boolean $z0;
        java.util.List $r3;
        java.lang.StringBuilder $r4;
        java.lang.Thread $r6;
        java.lang.String $r7, $r10;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling thread ");

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is holding mLock");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.Throwable;

        specialinvoke $r11.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstallerSession", $r10, $r11);

     label1:
        $r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getChildSessionsNotLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void cleanStageDir(java.util.List)>($r3);

        return;
    }

    private void closeInternal(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0;
        java.lang.Object r1;
        int i0;
        java.util.concurrent.atomic.AtomicInteger $r3;
        com.android.server.pm.PackageInstallerService$InternalCallback $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

        if z0 == 0 goto label2;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

     label2:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        exitmonitor r1;

     label3:
        if i0 != 0 goto label4;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r4.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionActiveChanged(com.android.server.pm.PackageInstallerSession,boolean)>(r0, 0);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void computeProgressLocked(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, f10;
        com.android.server.pm.PackageInstallerService$InternalCallback $r1;
        double $d0;
        byte $b0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        $f0 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $f1 = $f0 * 0.8F;

        $f2 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>($f1, 0.0F, 0.8F);

        $f3 = r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress>;

        $f4 = $f3 * 0.2F;

        $f5 = staticinvoke <android.util.MathUtils: float constrain(float,float,float)>($f4, 0.0F, 0.2F);

        f9 = $f2 + $f5;

        r0.<com.android.server.pm.PackageInstallerSession: float mProgress> = f9;

        if z0 != 0 goto label1;

        $f6 = r0.<com.android.server.pm.PackageInstallerSession: float mReportedProgress>;

        $f7 = f9 - $f6;

        $f8 = staticinvoke <java.lang.Math: float abs(float)>($f7);

        $d0 = (double) $f8;

        $b0 = $d0 cmpl 0.01;

        if $b0 < 0 goto label2;

     label1:
        f10 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        r0.<com.android.server.pm.PackageInstallerSession: float mReportedProgress> = f10;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r1.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionProgressChanged(com.android.server.pm.PackageInstallerSession,float)>(r0, f10);

     label2:
        return;
    }

    private static void copyFiles(java.util.List, java.io.File) throws java.io.IOException
    {
        java.io.File r0, $r22, r46, r48, r49;
        int i0, $i1, i5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r1, $r8, $r14, $r24, $r30, $r39;
        java.lang.String $r6, $r13, $r20, $r21, $r23, $r29, $r36, $r37, $r43;
        java.lang.Object $r7;
        java.io.IOException $r19, $r35, $r42;
        java.lang.Throwable $r38;
        java.util.List r44;
        java.io.File[] r45;
        java.util.Iterator r47;

        r44 := @parameter0: java.util.List;

        r0 := @parameter1: java.io.File;

        r45 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i0 = lengthof r45;

        i5 = 0;

     label01:
        if i5 >= i0 goto label03;

        r46 = r45[i5];

        $r37 = virtualinvoke r46.<java.io.File: java.lang.String getName()>();

        $z3 = virtualinvoke $r37.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z3 == 0 goto label02;

        virtualinvoke r46.<java.io.File: boolean delete()>();

     label02:
        i5 = i5 + 1;

        goto label01;

     label03:
        r47 = interfaceinvoke r44.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>();

        r48 = (java.io.File) $r7;

        r49 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("inherit", ".tmp", r0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r13);

        $z1 = staticinvoke <android.os.FileUtils: boolean copyFile(java.io.File,java.io.File)>(r48, r49);

        if $z1 == 0 goto label09;

     label05:
        $r21 = virtualinvoke r49.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r21, 420);

     label06:
        $r22 = new java.io.File;

        $r23 = virtualinvoke r48.<java.io.File: java.lang.String getName()>();

        specialinvoke $r22.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Renaming ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r29);

        $z2 = virtualinvoke r49.<java.io.File: boolean renameTo(java.io.File)>($r22);

        if $z2 == 0 goto label07;

        goto label04;

     label07:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r35 = new java.io.IOException;

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.IOException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label08:
        $r38 := @caughtexception;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to chmod ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r42 = new java.io.IOException;

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<java.io.IOException: void <init>(java.lang.String)>($r43);

        throw $r42;

     label09:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r19 = new java.io.IOException;

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label10:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copied ");

        $i1 = interfaceinvoke r44.<java.util.List: int size()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" files into ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r6);

        return;

        catch android.system.ErrnoException from label05 to label06 with label08;
    }

    private void createOatDirs(java.util.List, java.io.File) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.io.File r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        com.android.server.pm.PackageManagerService $r4;
        com.android.server.pm.Installer $r5;
        java.lang.String $r6, r10;
        com.android.server.pm.Installer$InstallerException $r7;
        com.android.server.pm.PackageManagerException $r8;
        java.util.List r9;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r9 := @parameter0: java.util.List;

        r1 := @parameter1: java.io.File;

        r2 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r3;

     label2:
        $r4 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r5 = $r4.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r5.<com.android.server.pm.Installer: void createOatDir(java.lang.String,java.lang.String)>($r6, r10);

     label3:
        goto label1;

     label4:
        $r7 := @caughtexception;

        $r8 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(com.android.server.pm.Installer$InstallerException)>($r7);

        throw $r8;

     label5:
        return;

        catch com.android.server.pm.Installer$InstallerException from label2 to label3 with label4;
    }

    private void createRemoveSplitMarkerLocked(java.lang.String) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.io.File $r2, r9;
        java.lang.String $r3, $r4, r7;
        java.lang.Throwable $r5;
        java.io.IOException $r6;
        android.system.ErrnoException r10;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r7 := @parameter0: java.lang.String;

     label1:
        r9 = new java.io.File;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r3 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.lang.String getRemoveMarkerName(java.lang.String)>(r7);

        specialinvoke r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, $r3);

        virtualinvoke r9.<java.io.File: boolean createNewFile()>();

        $r4 = virtualinvoke r9.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r4, 0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r10 = (android.system.ErrnoException) $r5;

        $r6 = virtualinvoke r10.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r6;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private void destroyInternal()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.ArrayList $r2, $r16;
        java.io.File $r3, $r6;
        com.android.server.pm.PackageManagerService $r5;
        com.android.server.pm.Installer $r7;
        java.lang.String $r8;
        java.lang.Object $r9, $r11, r15;
        android.os.FileBridge $r10;
        android.os.RevocableFileDescriptor $r12;
        java.lang.Throwable $r13;
        com.android.server.pm.Installer$InstallerException $r14;
        java.util.Iterator r17, r18;
        android.os.incremental.IncrementalFileStorages r19;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r15 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r15;

     label01:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = 1;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = $r1.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z0 == 0 goto label02;

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z3 == 0 goto label03;

     label02:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed> = 1;

     label03:
        $r16 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds>;

        r17 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r11 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (android.os.RevocableFileDescriptor) $r11;

        virtualinvoke $r12.<android.os.RevocableFileDescriptor: void revoke()>();

     label05:
        goto label04;

     label06:
        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        r18 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r9 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.os.FileBridge) $r9;

        virtualinvoke $r10.<android.os.FileBridge: void forceClose()>();

     label08:
        goto label07;

     label09:
        exitmonitor r15;

     label10:
        r19 = r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages>;

        if r19 == null goto label11;

        virtualinvoke r19.<android.os.incremental.IncrementalFileStorages: void cleanUp()>();

        r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages> = null;

     label11:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r3 == null goto label15;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z2 = $r4.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z2 != 0 goto label15;

     label12:
        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r7 = $r5.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r8 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r7.<com.android.server.pm.Installer: void rmPackageDir(java.lang.String)>($r8);

     label13:
        goto label15;

     label14:
        $r14 := @caughtexception;

     label15:
        return;

     label16:
        $r13 := @caughtexception;

     label17:
        exitmonitor r15;

     label18:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch com.android.server.pm.Installer$InstallerException from label12 to label13 with label14;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void dispatchSessionFinished(int, java.lang.String, android.os.Bundle)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1, $i2, $i3;
        android.os.Bundle r1;
        android.content.IntentSender r2;
        java.lang.String r3, r12;
        com.android.server.pm.PackageManagerService $r4, $r7;
        com.android.server.pm.PackageInstallerService $r5;
        boolean $z0, $z1, z2, z3, $z4;
        android.content.pm.PackageInstaller$SessionParams $r6;
        android.content.pm.PackageInstaller$SessionInfo $r8;
        android.os.Handler $r9;
        android.os.Message $r10;
        java.lang.Throwable $r11;
        java.lang.Object r13;
        com.android.internal.os.SomeArgs r14;
        com.android.server.pm.PackageInstallerService$InternalCallback $r15;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.Bundle;

        r13 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r13;

     label01:
        r0.<com.android.server.pm.PackageInstallerSession: int mFinalStatus> = i0;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mFinalMessage> = r12;

        r2 = r0.<com.android.server.pm.PackageInstallerSession: android.content.IntentSender mRemoteStatusReceiver>;

        r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        exitmonitor r13;

     label02:
        if r2 == null goto label03;

        r14 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r14.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r3;

        r14.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r12;

        r14.<com.android.internal.os.SomeArgs: java.lang.Object arg3> = r1;

        r14.<com.android.internal.os.SomeArgs: java.lang.Object arg4> = r2;

        r14.<com.android.internal.os.SomeArgs: int argi1> = i0;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r10 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(3, r14);

        virtualinvoke $r10.<android.os.Message: void sendToTarget()>();

     label03:
        z2 = 0;

        if i0 != 1 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        if r1 == null goto label06;

        $z1 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String)>("android.intent.extra.REPLACING");

        if $z1 != 0 goto label07;

     label06:
        z2 = 1;

     label07:
        if z3 == 0 goto label08;

        if z2 == 0 goto label08;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r5 = $r4.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $z0 = virtualinvoke $r5.<com.android.server.pm.PackageInstallerService: boolean okToSendBroadcasts()>();

        if $z0 == 0 goto label08;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i1 = $r6.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i2 = $i1 & 8388608;

        if $i2 != 0 goto label08;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r8 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoScrubbed(boolean)>(1);

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        virtualinvoke $r7.<com.android.server.pm.PackageManagerService: void sendSessionCommitBroadcast(android.content.pm.PackageInstaller$SessionInfo,int)>($r8, $i3);

     label08:
        $r15 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r15.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionFinished(com.android.server.pm.PackageInstallerSession,boolean)>(r0, z3);

        $z4 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z4 == 0 goto label09;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void logDataLoaderInstallationSession(int)>(i0);

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r13;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void dispatchSessionVerificationFailure(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(4, i0, -1, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void dispatchStreamValidateAndCommit()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    private android.os.ParcelFileDescriptor doWriteInternal(java.lang.String, long, long, android.os.ParcelFileDescriptor) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        long l0, l1, l2;
        com.android.server.pm.'-$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo' r1;
        boolean $z0, $z2, $z3, $z4, $z8;
        java.util.ArrayList $r3, $r15, $r16, $r21, $r27, $r28;
        java.lang.String $r6, $r8, $r9, r32;
        java.io.File $r7, $r10, r52;
        int $i3, $i4, $i5, $i7, $i10, $i11;
        java.io.FileDescriptor $r12, r38, r40;
        android.content.Context $r13, $r17;
        android.os.ParcelFileDescriptor $r14, r33, r55;
        byte $b9, $b12;
        java.lang.Object $r18, r34, r41, r44;
        android.content.pm.PackageInstaller$SessionParams $r19;
        android.os.storage.StorageManager $r20;
        java.lang.Throwable $r22, $r24, $r25, $r26, $r29, $r30, $r31, r42, r43;
        java.io.IOException $r23;
        android.os.RevocableFileDescriptor r35, r50;
        android.os.FileBridge r36, r51;
        android.system.Int64Ref r53;
        com.android.server.pm._$$Lambda$PackageInstallerSession$0Oqu1oanLjaOBEcFPtJVCRQ0lHs r54;
        java.lang.StringBuilder r56;
        java.lang.IllegalArgumentException r57;
        java.util.concurrent.Executor r58;
        android.system.ErrnoException r59;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r32 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r33 := @parameter3: android.os.ParcelFileDescriptor;

        r34 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r34;

     label01:
        $z0 = <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD>;

        if $z0 == 0 goto label03;

        r50 = new android.os.RevocableFileDescriptor;

        r35 = r50;

        specialinvoke r50.<android.os.RevocableFileDescriptor: void <init>()>();

        $r21 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds>;

        virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r50);

     label02:
        r36 = null;

        goto label05;

     label03:
        r51 = new android.os.FileBridge;

        r36 = r51;

        specialinvoke r51.<android.os.FileBridge: void <init>()>();

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r51);

     label04:
        r35 = null;

     label05:
        exitmonitor r34;

     label06:
        $z2 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r32);

        if $z2 == 0 goto label42;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        r52 = new java.io.File;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        specialinvoke r52.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, r32);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label09:
        $r8 = virtualinvoke r52.<java.io.File: java.lang.String getAbsolutePath()>();

        $i4 = <android.system.OsConstants: int O_CREAT>;

        $i3 = <android.system.OsConstants: int O_WRONLY>;

        $i5 = $i4 | $i3;

        r38 = staticinvoke <android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r8, $i5, 420);

        $r9 = virtualinvoke r52.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r9, 420);

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r10 == null goto label12;

     label10:
        $b9 = l1 cmp 0L;

        if $b9 <= 0 goto label12;

     label11:
        $r17 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r20 = (android.os.storage.StorageManager) $r18;

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i10 = $r19.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i11 = staticinvoke <com.android.internal.content.PackageHelper: int translateAllocateFlags(int)>($i10);

        virtualinvoke $r20.<android.os.storage.StorageManager: void allocateBytes(java.io.FileDescriptor,long,int)>(r38, l1, $i11);

     label12:
        $b12 = l0 cmp 0L;

        if $b12 <= 0 goto label14;

     label13:
        $i7 = <android.system.OsConstants: int SEEK_SET>;

        staticinvoke <android.system.Os: long lseek(java.io.FileDescriptor,long,int)>(r38, l0, $i7);

     label14:
        if r33 == null goto label37;

     label15:
        r53 = new android.system.Int64Ref;

        specialinvoke r53.<android.system.Int64Ref: void <init>(long)>(0L);

        r40 = virtualinvoke r33.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r1 = <com.android.server.pm._$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo: com.android.server.pm.'-$$Lambda$_14QHG018Z6p13d3hzJuGTWnNeo' INSTANCE>;

        r54 = new com.android.server.pm._$$Lambda$PackageInstallerSession$0Oqu1oanLjaOBEcFPtJVCRQ0lHs;

        specialinvoke r54.<com.android.server.pm._$$Lambda$PackageInstallerSession$0Oqu1oanLjaOBEcFPtJVCRQ0lHs: void <init>(com.android.server.pm.PackageInstallerSession,android.system.Int64Ref)>(r0, r53);

     label16:
        r58 = (java.util.concurrent.Executor) r1;

        staticinvoke <android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor,long,android.os.CancellationSignal,java.util.concurrent.Executor,android.os.FileUtils$ProgressListener)>(r40, r38, l1, null, r58, r54);

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r38);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r33);

        r41 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r41;

     label18:
        $z4 = <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD>;

        if $z4 == 0 goto label20;

        $r16 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds>;

        virtualinvoke $r16.<java.util.ArrayList: boolean remove(java.lang.Object)>(r35);

     label19:
        goto label21;

     label20:
        virtualinvoke r36.<android.os.FileBridge: void forceClose()>();

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        virtualinvoke $r15.<java.util.ArrayList: boolean remove(java.lang.Object)>(r36);

     label21:
        exitmonitor r41;

     label22:
        return null;

     label23:
        $r31 := @caughtexception;

        r42 = $r31;

     label24:
        exitmonitor r41;

     label25:
        throw r42;

     label26:
        $r26 := @caughtexception;

        r43 = $r26;

        goto label28;

     label27:
        $r29 := @caughtexception;

        r43 = $r29;

     label28:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r38);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r33);

        r44 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r44;

     label29:
        $z8 = <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD>;

        if $z8 == 0 goto label31;

        $r28 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds>;

        virtualinvoke $r28.<java.util.ArrayList: boolean remove(java.lang.Object)>(r35);

     label30:
        goto label32;

     label31:
        virtualinvoke r36.<android.os.FileBridge: void forceClose()>();

        $r27 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        virtualinvoke $r27.<java.util.ArrayList: boolean remove(java.lang.Object)>(r36);

     label32:
        exitmonitor r44;

     label33:
        throw r43;

     label34:
        $r25 := @caughtexception;

        r42 = $r25;

     label35:
        exitmonitor r44;

     label36:
        goto label25;

     label37:
        $z3 = <android.content.pm.PackageInstaller: boolean ENABLE_REVOCABLE_FD>;

        if $z3 == 0 goto label38;

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        virtualinvoke r35.<android.os.RevocableFileDescriptor: void init(android.content.Context,java.io.FileDescriptor)>($r13, r38);

        $r14 = virtualinvoke r35.<android.os.RevocableFileDescriptor: android.os.ParcelFileDescriptor getRevocableFileDescriptor()>();

        return $r14;

     label38:
        virtualinvoke r36.<android.os.FileBridge: void setTargetFile(java.io.FileDescriptor)>(r38);

        virtualinvoke r36.<android.os.FileBridge: void start()>();

        r55 = new android.os.ParcelFileDescriptor;

        $r12 = virtualinvoke r36.<android.os.FileBridge: java.io.FileDescriptor getClientSocket()>();

        specialinvoke r55.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r12);

        return r55;

     label39:
        $r24 := @caughtexception;

     label40:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label41:
        throw $r24;

     label42:
        r57 = new java.lang.IllegalArgumentException;

        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name: ");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r6 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r57.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r57;

     label43:
        $r22 := @caughtexception;

        r59 = (android.system.ErrnoException) $r22;

        $r23 = virtualinvoke r59.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r23;

     label44:
        $r30 := @caughtexception;

     label45:
        exitmonitor r34;

     label46:
        throw $r30;

        catch java.lang.Throwable from label01 to label02 with label44;
        catch java.lang.Throwable from label03 to label04 with label44;
        catch java.lang.Throwable from label05 to label06 with label44;
        catch android.system.ErrnoException from label06 to label07 with label43;
        catch java.lang.Throwable from label07 to label08 with label39;
        catch android.system.ErrnoException from label08 to label09 with label43;
        catch android.system.ErrnoException from label09 to label10 with label43;
        catch android.system.ErrnoException from label11 to label12 with label43;
        catch android.system.ErrnoException from label13 to label14 with label43;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch android.system.ErrnoException from label17 to label18 with label43;
        catch java.lang.Throwable from label18 to label19 with label23;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
        catch android.system.ErrnoException from label25 to label26 with label43;
        catch android.system.ErrnoException from label28 to label29 with label43;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.lang.Throwable from label31 to label32 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch android.system.ErrnoException from label33 to label34 with label43;
        catch java.lang.Throwable from label35 to label36 with label34;
        catch android.system.ErrnoException from label37 to label38 with label43;
        catch android.system.ErrnoException from label38 to label39 with label43;
        catch android.system.ErrnoException from label40 to label41 with label43;
        catch android.system.ErrnoException from label41 to label42 with label43;
        catch android.system.ErrnoException from label42 to label43 with label43;
        catch java.lang.Throwable from label45 to label46 with label44;
    }

    private void dumpLocked(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r3;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r7, $r14, $r17, $r20, $r30, $r55, $r75;
        java.lang.Integer $r9, $r11, $r22, $r48, $r51, $r53, $r63, $r73;
        com.android.server.pm.InstallSource $r13, $r16, $r19;
        long $l4, $l5;
        java.lang.Long $r24, $r26;
        java.io.File $r28;
        android.content.pm.PackageInstaller$SessionParams $r32, $r57, $r60;
        float $f0, $f1;
        java.lang.Float $r33, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Boolean $r37, $r39, $r41, $r43, $r45, $r58, $r61, $r67, $r69, $r71;
        java.util.ArrayList $r47, $r50;
        android.util.SparseIntArray $r65;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("userId", $r9);

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int mOriginalInstallerUid>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mOriginalInstallerUid", $r11);

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r14 = $r13.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("installerPackageName", $r14);

        $r16 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r17 = $r16.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("installInitiatingPackageName", $r17);

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r20 = $r19.<com.android.server.pm.InstallSource: java.lang.String originatingPackageName>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("installOriginatingPackageName", $r20);

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mInstallerUid", $r22);

        $l4 = r0.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        $r24 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("createdMillis", $r24);

        $l5 = r0.<com.android.server.pm.PackageInstallerSession: long updatedMillis>;

        $r26 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("updatedMillis", $r26);

        $r28 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("stageDir", $r28);

        $r30 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("stageCid", $r30);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r32 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        virtualinvoke $r32.<android.content.pm.PackageInstaller$SessionParams: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        $f0 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $r33 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mClientProgress", $r33);

        $f1 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        $r35 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mProgress", $r35);

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        $r37 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mCommitted", $r37);

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        $r39 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mSealed", $r39);

        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsManuallyAccepted>;

        $r41 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mPermissionsManuallyAccepted", $r41);

        $z3 = r0.<com.android.server.pm.PackageInstallerSession: boolean mRelinquished>;

        $r43 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mRelinquished", $r43);

        $z4 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mDestroyed", $r45);

        $r47 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mFds>;

        $i6 = virtualinvoke $r47.<java.util.ArrayList: int size()>();

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mFds", $r48);

        $r50 = r0.<com.android.server.pm.PackageInstallerSession: java.util.ArrayList mBridges>;

        $i7 = virtualinvoke $r50.<java.util.ArrayList: int size()>();

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mBridges", $r51);

        $i8 = r0.<com.android.server.pm.PackageInstallerSession: int mFinalStatus>;

        $r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mFinalStatus", $r53);

        $r55 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mFinalMessage>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mFinalMessage", $r55);

        $r57 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z5 = $r57.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        $r58 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("params.isMultiPackage", $r58);

        $r60 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z6 = $r60.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        $r61 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("params.isStaged", $r61);

        $i9 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        $r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mParentSessionId", $r63);

        $r65 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mChildSessionIds", $r65);

        $z7 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied>;

        $r67 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mStagedSessionApplied", $r67);

        $z8 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed>;

        $r69 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z8);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mStagedSessionFailed", $r69);

        $z9 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady>;

        $r71 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mStagedSessionReady", $r71);

        $i10 = r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode>;

        $r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mStagedSessionErrorCode", $r73);

        $r75 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter printPair(java.lang.String,java.lang.Object)>("mStagedSessionErrorMessage", $r75);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    private void extractNativeLibraries(java.io.File, java.lang.String, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1;
        int i0;
        java.io.File $r1, r7;
        java.lang.String $r4, r8;
        java.lang.Throwable $r5, $r6;
        com.android.internal.content.NativeLibraryHelper$Handle r10, r11, r12;
        com.android.server.pm.PackageManagerException r13, r17;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r7 := @parameter0: java.io.File;

        r8 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>(r7, "lib");

        if z0 != 0 goto label01;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesFromDirLI(java.io.File,boolean)>($r1, 1);

     label01:
        r10 = null;

        r11 = null;

     label02:
        r12 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>(r7);

     label03:
        r11 = r12;

        r10 = r12;

     label04:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isIncrementalInstallation()>();

        i0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String,boolean)>(r12, $r1, r8, $z1);

     label05:
        if i0 != 1 goto label06;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r12);

        return;

     label06:
        r11 = r12;

        r10 = r12;

     label07:
        r13 = new com.android.server.pm.PackageManagerException;

     label08:
        r11 = r12;

        r10 = r12;

     label09:
        r14 = new java.lang.StringBuilder;

     label10:
        r11 = r12;

        r10 = r12;

     label11:
        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

     label12:
        r11 = r12;

        r10 = r12;

     label13:
        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to extract native libraries, res=");

     label14:
        r11 = r12;

        r10 = r12;

     label15:
        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label16:
        r11 = r12;

        r10 = r12;

     label17:
        $r4 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(i0, $r4);

     label18:
        r11 = r12;

        r10 = r12;

     label19:
        throw r13;

     label20:
        $r5 := @caughtexception;

        goto label27;

     label21:
        $r6 := @caughtexception;

        r11 = r10;

     label22:
        r17 = new com.android.server.pm.PackageManagerException;

     label23:
        r11 = r10;

     label24:
        specialinvoke r17.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-110, "Failed to extract native libraries", $r6);

     label25:
        r11 = r10;

     label26:
        throw r17;

     label27:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r11);

        throw $r5;

        catch java.io.IOException from label02 to label03 with label21;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.io.IOException from label04 to label05 with label21;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.io.IOException from label07 to label08 with label21;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.io.IOException from label09 to label10 with label21;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.io.IOException from label11 to label12 with label21;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.io.IOException from label13 to label14 with label21;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.io.IOException from label15 to label16 with label21;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.io.IOException from label17 to label18 with label21;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label19 to label20 with label20;
        catch java.lang.Throwable from label22 to label23 with label20;
        catch java.lang.Throwable from label24 to label25 with label20;
        catch java.lang.Throwable from label26 to label27 with label20;
    }

    private static java.util.ArrayList filterFiles(java.io.File, java.lang.String[], java.io.FileFilter)
    {
        java.io.File r0, $r6;
        java.lang.String[] r1;
        java.io.FileFilter r2;
        int i0, $i1, i2;
        java.util.ArrayList $r5;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.io.FileFilter;

        $r5 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r6 = new java.io.File;

        $r7 = r1[i2];

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, $r7);

        $z0 = interfaceinvoke r2.<java.io.FileFilter: boolean accept(java.io.File)>($r6);

        if $z0 == 0 goto label2;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r5;
    }

    private android.content.pm.PackageInstaller$SessionInfo generateInfoInternal(boolean, boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        java.lang.Object r2;
        android.content.pm.PackageInstaller$SessionInfo $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        com.android.server.pm.InstallSource $r4;
        java.lang.String $r5, $r12, $r14, $r29, r39;
        java.io.File $r6, $r37;
        float $f0;
        java.util.concurrent.atomic.AtomicInteger $r7;
        android.content.pm.PackageInstaller$SessionParams $r8, $r9, $r10, $r11, $r13, $r15, $r16, $r17, $r19, $r21, $r22, $r23, $r24, $r25, $r31, $r33, $r35;
        long $l5, $l13, $l14;
        java.lang.String[] $r18;
        java.util.List $r20;
        android.util.SparseIntArray $r26;
        int[] $r27, $r28, $r30;
        android.net.Uri $r32, $r34;
        android.graphics.Bitmap $r36;
        java.lang.Throwable $r38;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r3 = new android.content.pm.PackageInstaller$SessionInfo;

        specialinvoke $r3.<android.content.pm.PackageInstaller$SessionInfo: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int sessionId> = $i0;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int userId> = $i1;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r5 = $r4.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String installerPackageName> = $r5;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        if $r6 == null goto label03;

        $r37 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        r39 = virtualinvoke $r37.<java.io.File: java.lang.String getAbsolutePath()>();

     label02:
        goto label04;

     label03:
        r39 = null;

     label04:
        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String resolvedBaseCodePath> = r39;

        $f0 = r0.<com.android.server.pm.PackageInstallerSession: float mProgress>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: float progress> = $f0;

        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean sealed> = $z2;

        $z3 = r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isCommitted> = $z3;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        $i2 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        if $i2 <= 0 goto label06;

     label05:
        z9 = 1;

        goto label07;

     label06:
        z9 = 0;

     label07:
        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean active> = z9;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i3 = $r8.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int mode> = $i3;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i4 = $r9.<android.content.pm.PackageInstaller$SessionParams: int installReason>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int installReason> = $i4;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l5 = $r10.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: long sizeBytes> = $l5;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r12 = $r11.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String appPackageName> = $r12;

     label08:
        if z0 == 0 goto label10;

     label09:
        $r35 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r36 = $r35.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: android.graphics.Bitmap appIcon> = $r36;

     label10:
        $r13 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r14 = $r13.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.lang.CharSequence appLabel> = $r14;

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i6 = $r15.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int installLocation> = $i6;

     label11:
        if z1 != 0 goto label13;

     label12:
        $r33 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r34 = $r33.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri originatingUri> = $r34;

     label13:
        $r16 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i7 = $r16.<android.content.pm.PackageInstaller$SessionParams: int originatingUid>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int originatingUid> = $i7;

     label14:
        if z1 != 0 goto label16;

     label15:
        $r31 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r32 = $r31.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: android.net.Uri referrerUri> = $r32;

     label16:
        $r17 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r18 = $r17.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String[] grantedRuntimePermissions> = $r18;

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r20 = $r19.<android.content.pm.PackageInstaller$SessionParams: java.util.List whitelistedRestrictedPermissions>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.util.List whitelistedRestrictedPermissions> = $r20;

        $r21 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i8 = $r21.<android.content.pm.PackageInstaller$SessionParams: int autoRevokePermissionsMode>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int autoRevokePermissionsMode> = $i8;

        $r22 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i9 = $r22.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int installFlags> = $i9;

        $r23 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z4 = $r23.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isMultiPackage> = $z4;

        $r24 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z5 = $r24.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged> = $z5;

        $r25 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i10 = $r25.<android.content.pm.PackageInstaller$SessionParams: int rollbackDataPolicy>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int rollbackDataPolicy> = $i10;

        $i11 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int parentSessionId> = $i11;

        $r26 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        $r27 = virtualinvoke $r26.<android.util.SparseIntArray: int[] copyKeys()>();

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int[] childSessionIds> = $r27;

        $r28 = $r3.<android.content.pm.PackageInstaller$SessionInfo: int[] childSessionIds>;

        if $r28 != null goto label17;

        $r30 = <com.android.server.pm.PackageInstallerSession: int[] EMPTY_CHILD_SESSION_ARRAY>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int[] childSessionIds> = $r30;

     label17:
        $z6 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionApplied> = $z6;

        $z7 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionReady> = $z7;

        $z8 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: boolean isStagedSessionFailed> = $z8;

        $i12 = r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode>;

        $r29 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage>;

        virtualinvoke $r3.<android.content.pm.PackageInstaller$SessionInfo: void setStagedSessionErrorCode(int,java.lang.String)>($i12, $r29);

        $l13 = r0.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: long createdMillis> = $l13;

        $l14 = r0.<com.android.server.pm.PackageInstallerSession: long updatedMillis>;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: long updatedMillis> = $l14;

        exitmonitor r2;

     label18:
        return $r3;

     label19:
        $r38 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r38;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private java.util.List getAddedApksLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String[] r1;
        java.io.FileFilter $r2;
        java.io.File $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.lang.String[] getNamesLocked()>();

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r2 = <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sAddedApkFilter>;

        $r4 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.util.ArrayList filterFiles(java.io.File,java.lang.String[],java.io.FileFilter)>($r3, r1, $r2);

        return $r4;
    }

    private long getApksSize()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String $r1, $r4, $r5, $r7, $r8;
        com.android.server.pm.PackageManagerService $r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, i4;
        java.io.File $r3, $r6, r10;
        long $l1, $l2, l3, l5;
        com.android.server.pm.PackageSetting r9;
        java.io.File[] r11;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        r9 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r1);

        if r9 != null goto label1;

        return 0L;

     label1:
        r10 = r9.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        if r10 != null goto label2;

        return 0L;

     label2:
        $z0 = virtualinvoke r10.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r10.<java.io.File: java.lang.String getName()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String toLowerCase()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z3 == 0 goto label3;

        $l2 = virtualinvoke r10.<java.io.File: long length()>();

        return $l2;

     label3:
        $z1 = virtualinvoke r10.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label4;

        return 0L;

     label4:
        r11 = virtualinvoke r10.<java.io.File: java.io.File[] listFiles()>();

        l3 = 0L;

        i4 = 0;

     label5:
        $i0 = lengthof r11;

        if i4 >= $i0 goto label7;

        l5 = l3;

        $r3 = r11[i4];

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>();

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z2 == 0 goto label6;

        $r6 = r11[i4];

        $l1 = virtualinvoke $r6.<java.io.File: long length()>();

        l5 = l3 + $l1;

     label6:
        i4 = i4 + 1;

        l3 = l5;

        goto label5;

     label7:
        return l3;
    }

    private java.util.List getChildSessionsNotLocked()
    {
        com.android.server.pm.PackageInstallerSession r0, $r6;
        int[] r1;
        int i0, i1, $i2, i4;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.util.ArrayList $r4, r16;
        com.android.server.pm.PackageSessionProvider $r5;
        java.lang.StringBuilder $r7;
        java.lang.Thread $r9;
        java.lang.String $r10, $r13;
        java.lang.Throwable $r14;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling thread ");

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r10 = virtualinvoke $r9.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is holding mLock");

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.Throwable;

        specialinvoke $r14.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstallerSession", $r13, $r14);

     label1:
        r16 = null;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z1 == 0 goto label3;

        r1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        $r4 = new java.util.ArrayList;

        $i2 = lengthof r1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        i0 = lengthof r1;

        i4 = 0;

     label2:
        r16 = $r4;

        if i4 >= i0 goto label3;

        i1 = r1[i4];

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider>;

        $r6 = interfaceinvoke $r5.<com.android.server.pm.PackageSessionProvider: com.android.server.pm.PackageInstallerSession getSession(int)>(i1);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r6);

        i4 = i4 + 1;

        goto label2;

     label3:
        return r16;
    }

    private android.content.pm.InstallationFile[] getInstallationFilesLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.InstallationFile[] r1;
        java.util.Iterator r2;
        com.android.server.pm.PackageInstallerSession$FileEntry r3;
        android.util.ArraySet $r4, $r5;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r6;
        android.content.pm.InstallationFile $r7;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        $i0 = virtualinvoke $r4.<android.util.ArraySet: int size()>();

        r1 = newarray (android.content.pm.InstallationFile)[$i0];

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        r2 = virtualinvoke $r5.<android.util.ArraySet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.PackageInstallerSession$FileEntry) $r6;

        $i1 = virtualinvoke r3.<com.android.server.pm.PackageInstallerSession$FileEntry: int getIndex()>();

        $r7 = virtualinvoke r3.<com.android.server.pm.PackageInstallerSession$FileEntry: android.content.pm.InstallationFile getFile()>();

        r1[$i1] = $r7;

        goto label1;

     label2:
        return r1;
    }

    private java.lang.String[] getNamesLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1, i2;
        boolean $z0;
        android.content.pm.InstallationFile $r1;
        java.lang.String $r2;
        java.io.File $r3;
        java.lang.String[] r4, r5, r7;
        android.content.pm.InstallationFile[] r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        r4 = virtualinvoke $r3.<java.io.File: java.lang.String[] list()>();

        r5 = r4;

        if r4 != null goto label1;

        r5 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

     label1:
        return r5;

     label2:
        r6 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.InstallationFile[] getInstallationFilesLocked()>();

        $i1 = lengthof r6;

        r7 = newarray (java.lang.String)[$i1];

        i2 = 0;

        i0 = lengthof r6;

     label3:
        if i2 >= i0 goto label4;

        $r1 = r6[i2];

        $r2 = virtualinvoke $r1.<android.content.pm.InstallationFile: java.lang.String getName()>();

        r7[i2] = $r2;

        i2 = i2 + 1;

        goto label3;

     label4:
        return r7;
    }

    private static java.lang.String getRelativePath(java.io.File, java.io.File) throws java.io.IOException
    {
        java.lang.String r0, $r5, $r12, $r13, r16;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r6;
        java.io.IOException $r4, $r11;
        int $i0;
        java.io.File r14, r15;

        r14 := @parameter0: java.io.File;

        r15 := @parameter1: java.io.File;

        r16 = virtualinvoke r14.<java.io.File: java.lang.String getAbsolutePath()>();

        r0 = virtualinvoke r15.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>("/.");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String)>(r0);

        if $z1 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r13 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r13;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" outside base: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = new java.io.IOException;

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid path (was relative) : ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r4 = new java.io.IOException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private static java.lang.String getRemoveMarkerName(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r7, r8, r10;

        r8 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".removed");

        r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r10);

        if $z0 == 0 goto label1;

        return r10;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid marker: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private java.util.List getRemovedFilesLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String[] r1;
        java.io.FileFilter $r2;
        java.io.File $r3;
        java.util.ArrayList $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.lang.String[] getNamesLocked()>();

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r2 = <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sRemovedFilter>;

        $r4 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.util.ArrayList filterFiles(java.io.File,java.lang.String[],java.io.FileFilter)>($r3, r1, $r2);

        return $r4;
    }

    private void handleInstall()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String r1, $r6, $r15;
        boolean $z0, $z1, $z2;
        android.content.pm.PackageInstaller$SessionParams $r2;
        com.android.server.pm.StagingManager $r3;
        android.app.admin.DevicePolicyEventLogger $r4, $r7;
        com.android.server.pm.InstallSource $r5;
        java.lang.Throwable $r8;
        com.android.server.pm.PackageManagerException $r9;
        java.lang.StringBuilder $r10;
        int $i0, $i2;
        java.util.List r16;
        java.lang.Object r17;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked()>();

        if $z0 == 0 goto label01;

        $r4 = staticinvoke <android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger createEvent(int)>(112);

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r6 = $r5.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $r7 = virtualinvoke $r4.<android.app.admin.DevicePolicyEventLogger: android.app.admin.DevicePolicyEventLogger setAdmin(java.lang.String)>($r6);

        virtualinvoke $r7.<android.app.admin.DevicePolicyEventLogger: void write()>();

     label01:
        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z1 = $r2.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z1 == 0 goto label02;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.StagingManager mStagingManager>;

        virtualinvoke $r3.<com.android.server.pm.StagingManager: void commitSession(com.android.server.pm.PackageInstallerSession)>(r0);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(1, "Session staged", null);

        return;

     label02:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isApexInstallation()>();

        if $z2 == 0 goto label03;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(-110, "APEX packages can only be installed using staged sessions.", null);

        return;

     label03:
        r16 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getChildSessionsNotLocked()>();

     label04:
        r17 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r17;

     label05:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void installNonStagedLocked(java.util.List)>(r16);

        exitmonitor r17;

     label06:
        goto label11;

     label07:
        $r8 := @caughtexception;

     label08:
        exitmonitor r17;

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

        r1 = staticinvoke <android.util.ExceptionUtils: java.lang.String getCompleteMessage(java.lang.Throwable)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Commit of session ");

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageInstallerSession", $r15);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        $i2 = $r9.<com.android.server.pm.PackageManagerException: int error>;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>($i2, r1, null);

     label11:
        return;

        catch com.android.server.pm.PackageManagerException from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch com.android.server.pm.PackageManagerException from label09 to label10 with label10;
    }

    private void handleStreamValidateAndCommit()
    {
        com.android.server.pm.PackageInstallerSession r0, $r9, r16;
        int i0, $i1, i2, i3, i4;
        boolean $z0, $z1, z3, z4, z5;
        android.os.Handler $r3;
        android.os.Message $r4;
        android.util.SparseIntArray $r5, $r11;
        java.util.ArrayList $r6;
        java.lang.Object $r8;
        com.android.server.pm.PackageSessionProvider $r12;
        com.android.server.pm.PackageManagerException $r13, $r14, r15, r17;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r15 = null;

        z3 = 0;

     label01:
        z4 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean streamValidateAndCommit()>();

     label02:
        z3 = z4;

        goto label04;

     label03:
        $r14 := @caughtexception;

        r15 = $r14;

     label04:
        z5 = z3;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z0 == 0 goto label12;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int size()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i2);

        i3 = i2 + -1;

     label05:
        if i3 < 0 goto label10;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        i0 = virtualinvoke $r11.<android.util.SparseIntArray: int keyAt(int)>(i3);

     label06:
        $r12 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider>;

        r16 = interfaceinvoke $r12.<com.android.server.pm.PackageSessionProvider: com.android.server.pm.PackageInstallerSession getSession(int)>(i0);

        $z1 = specialinvoke r16.<com.android.server.pm.PackageInstallerSession: boolean streamValidateAndCommit()>();

        z3 = z3 & $z1;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r16);

     label07:
        r17 = r15;

        goto label09;

     label08:
        $r13 := @caughtexception;

        r17 = r15;

        z3 = 0;

        if r15 != null goto label09;

        r17 = $r13;

        z3 = 0;

     label09:
        i3 = i3 + -1;

        r15 = r17;

        goto label05;

     label10:
        z5 = z3;

        if r15 == null goto label12;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)>(r15);

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i4 = $i1 - 1;

     label11:
        z5 = z3;

        if i4 < 0 goto label12;

        $r8 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r9 = (com.android.server.pm.PackageInstallerSession) $r8;

        specialinvoke $r9.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)>(r15);

        i4 = i4 + -1;

        goto label11;

     label12:
        if z5 != 0 goto label13;

        return;

     label13:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;

        catch com.android.server.pm.PackageManagerException from label01 to label02 with label03;
        catch com.android.server.pm.PackageManagerException from label06 to label07 with label08;
    }

    private void installNonStagedLocked(java.util.List) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0, r13;
        java.util.List r1;
        boolean $z0, $z1, z3;
        com.android.server.pm.PackageManagerService $r3, $r5;
        java.util.ArrayList $r4;
        int $i0, $i1, $i2, $i3, $i4, i5;
        android.content.Context $r6;
        android.content.IntentSender $r7;
        java.lang.String $r8;
        java.lang.Object $r9;
        com.android.server.pm.PackageManagerException $r10, r12;
        com.android.server.pm.PackageManagerService$ActiveInstallSession r11, r14;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: java.util.List;

        r11 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService$ActiveInstallSession makeSessionActiveLocked()>();

        if r11 != null goto label01;

        return;

     label01:
        $z0 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z0 == 0 goto label11;

        $r4 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        z3 = 1;

        r12 = null;

        i5 = 0;

     label02:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i5 >= $i1 goto label09;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r13 = (com.android.server.pm.PackageInstallerSession) $r9;

     label03:
        r14 = specialinvoke r13.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService$ActiveInstallSession makeSessionActiveLocked()>();

     label04:
        if r14 == null goto label06;

     label05:
        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r14);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        r12 = $r10;

        z3 = 0;

     label08:
        i5 = i5 + 1;

        goto label02;

     label09:
        if z3 != 0 goto label10;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: android.content.IntentSender mRemoteStatusReceiver>;

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked()>();

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        $i4 = r12.<com.android.server.pm.PackageManagerException: int error>;

        $r8 = virtualinvoke r12.<com.android.server.pm.PackageManagerException: java.lang.String getLocalizedMessage()>();

        staticinvoke <com.android.server.pm.PackageInstallerSession: void sendOnPackageInstalled(android.content.Context,android.content.IntentSender,int,boolean,int,java.lang.String,int,java.lang.String,android.os.Bundle)>($r6, $r7, $i2, $z1, $i3, null, $i4, $r8, null);

        return;

     label10:
        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService: void installStage(java.util.List)>($r4);

        goto label12;

     label11:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService: void installStage(com.android.server.pm.PackageManagerService$ActiveInstallSession)>(r11);

     label12:
        return;

        catch com.android.server.pm.PackageManagerException from label03 to label04 with label07;
        catch com.android.server.pm.PackageManagerException from label05 to label06 with label07;
    }

    private boolean isApexInstallation()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i0 = $r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i1 = $i0 & 131072;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isDataLoaderInstallation()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1;
        android.content.pm.DataLoaderParams $r2;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r2 = $r1.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isIncrementalInstallation()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0, z1;
        android.content.pm.PackageInstaller$SessionParams $r1;
        android.content.pm.DataLoaderParams $r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r2 = $r1.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $i0 = virtualinvoke $r2.<android.content.pm.DataLoaderParams: int getType()>();

        if $i0 != 2 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isIncrementalInstallationAllowed(java.lang.String)
    {
        java.lang.Object $r0;
        android.content.pm.PackageManagerInternal $r1;
        com.android.server.pm.parsing.pkg.AndroidPackage $r2, $r3;
        boolean $z0, $z1, z2;
        com.android.server.pm.pkg.PackageStateUnserialized $r4;
        java.lang.String r5;
        com.android.server.pm.PackageSetting r6;

        r5 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        $r1 = (android.content.pm.PackageManagerInternal) $r0;

        r6 = virtualinvoke $r1.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r5);

        z2 = 1;

        if r6 == null goto label4;

        $r2 = r6.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r2 != null goto label1;

        goto label4;

     label1:
        $r3 = r6.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z0 = interfaceinvoke $r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r6.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z1 = virtualinvoke $r4.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if $z1 != 0 goto label2;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;

     label4:
        return 1;
    }

    private boolean isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, i1, $i2, $i3;
        android.app.admin.DevicePolicyManagerInternal r1;
        java.lang.Object $r2;
        com.android.server.pm.InstallSource $r3;
        java.lang.String $r4;
        boolean $z1, z2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        if i0 == i1 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManagerInternal;");

        r1 = (android.app.admin.DevicePolicyManagerInternal) $r2;

        z2 = 0;

        if r1 == null goto label2;

        z2 = 0;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r4 = $r3.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $z1 = virtualinvoke r1.<android.app.admin.DevicePolicyManagerInternal: boolean canSilentlyInstallPackage(java.lang.String,int)>($r4, $i3);

        if $z1 == 0 goto label2;

        z2 = 1;

     label2:
        return z2;
    }

    private boolean isLinkPossible(java.util.List, java.io.File)
    {
        com.android.server.pm.PackageInstallerSession r0;
        long l0, l1;
        java.lang.String $r1, $r4, $r10;
        boolean $z0;
        java.lang.Object $r2;
        java.io.File $r3, r12;
        android.system.StructStat $r5, r13;
        byte $b2;
        java.lang.Throwable $r6;
        java.lang.StringBuilder $r7;
        java.util.List r11;
        java.util.Iterator r14;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r11 := @parameter0: java.util.List;

        r12 := @parameter1: java.io.File;

     label1:
        $r1 = virtualinvoke r12.<java.io.File: java.lang.String getAbsolutePath()>();

        r13 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>($r1);

        r14 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.io.File) $r2;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r5 = staticinvoke <android.system.Os: android.system.StructStat stat(java.lang.String)>($r4);

        l0 = $r5.<android.system.StructStat: long st_dev>;

        l1 = r13.<android.system.StructStat: long st_dev>;

     label3:
        $b2 = l0 cmp l1;

        if $b2 == 0 goto label4;

        return 0;

     label4:
        goto label2;

     label5:
        return 1;

     label6:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to detect if linking possible: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstallerSession", $r10);

        return 0;

        catch android.system.ErrnoException from label1 to label2 with label6;
        catch android.system.ErrnoException from label2 to label3 with label6;
    }

    private static boolean isSecureFrpInstallAllowed(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1;
        java.lang.String[] r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        boolean $z0, z1;
        android.content.pm.PackageManagerInternal r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r5;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r4 = (android.content.pm.PackageManagerInternal) $r2;

        z1 = 0;

        r1 = virtualinvoke r4.<android.content.pm.PackageManagerInternal: java.lang.String[] getKnownPackageNames(int,int)>(2, 0);

        r5 = virtualinvoke r4.<android.content.pm.PackageManagerInternal: com.android.server.pm.parsing.pkg.AndroidPackage getPackage(int)>(i0);

        if r5 == null goto label1;

        $r3 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r1, $r3);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r0.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        if $i1 != 0 goto label2;

        z1 = 1;

     label2:
        return z1;
    }

    private static boolean isStagedSessionStateValid(boolean, boolean, boolean)
    {
        boolean z0, z1, z2, z3;

        z2 := @parameter0: boolean;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if z2 != 0 goto label1;

        if z0 != 0 goto label1;

        if z1 == 0 goto label4;

     label1:
        if z2 == 0 goto label2;

        if z0 != 0 goto label2;

        if z1 == 0 goto label4;

     label2:
        if z2 != 0 goto label3;

        if z0 == 0 goto label3;

        if z1 == 0 goto label4;

     label3:
        if z2 != 0 goto label5;

        if z0 != 0 goto label5;

        if z1 == 0 goto label5;

     label4:
        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        return z3;
    }

    private boolean isStreamingInstallation()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, z1;
        android.content.pm.PackageInstaller$SessionParams $r1;
        android.content.pm.DataLoaderParams $r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        z1 = 1;

        if z0 == 0 goto label1;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r2 = $r1.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $i0 = virtualinvoke $r2.<android.content.pm.DataLoaderParams: int getType()>();

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static void lambda$onStorageUnhealthy$1(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        java.lang.String r0, $r4;
        int $i0;
        java.lang.StringBuilder $r1;
        com.android.server.pm.PackageManagerService r5;

        r5 := @parameter0: com.android.server.pm.PackageManagerService;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r5.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>(r0, -1L, 0, 2);

        if $i0 == 1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to uninstall package with failed dataloader: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageInstallerSession", $r4);

     label1:
        return;
    }

    private void linkFiles(java.util.List, java.io.File, java.io.File) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.io.File r1, $r10, r27;
        java.lang.String r2, $r8, $r13, $r14, $r25;
        boolean $z0;
        java.lang.StringBuilder $r3, $r16;
        int $i0;
        java.lang.Object $r9;
        com.android.server.pm.PackageManagerService $r11;
        com.android.server.pm.Installer $r12;
        com.android.server.pm.Installer$InstallerException $r15;
        java.io.IOException $r24;
        java.util.List r26;
        java.util.Iterator r28;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r26 := @parameter0: java.util.List;

        r1 := @parameter1: java.io.File;

        r27 := @parameter2: java.io.File;

        r28 = interfaceinvoke r26.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.io.File) $r9;

        r2 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.lang.String getRelativePath(java.io.File,java.io.File)>($r10, r27);

     label2:
        $r11 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r12 = $r11.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r13 = virtualinvoke r27.<java.io.File: java.lang.String getAbsolutePath()>();

        $r14 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r12.<com.android.server.pm.Installer: void linkFile(java.lang.String,java.lang.String,java.lang.String)>(r2, $r13, $r14);

     label3:
        goto label1;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed linkOrCreateDir(");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r24 = new java.io.IOException;

        $r25 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r15);

        throw $r24;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Linked ");

        $i0 = interfaceinvoke r26.<java.util.List: int size()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" files into ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r8);

        return;

        catch com.android.server.pm.Installer$InstallerException from label2 to label3 with label4;
    }

    private void logDataLoaderInstallationSession(int)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i2, $i3;
        long l1, $l4, $l5, $l6;
        android.content.pm.PackageInstaller$SessionParams $r1;
        boolean $z0;
        java.lang.String r2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i3 = $i2 & 32;

        if $i3 != 0 goto label1;

        r2 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        goto label2;

     label1:
        r2 = "";

     label2:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isIncrementalInstallation()>();

        $l4 = r0.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        $l5 = l1 - $l4;

        $l6 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: long getApksSize()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,boolean,java.lang.String,long,int,long)>(263, $z0, r2, $l5, i0, $l6);

        return;
    }

    private com.android.server.pm.PackageManagerService$ActiveInstallSession makeSessionActiveLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.android.server.pm.PackageManagerException $r1, $r2, $r3, $r45;
        android.content.pm.PackageInstaller$SessionParams $r4, $r9, $r18, $r19, $r62;
        android.os.UserHandle $r5, r63;
        com.android.server.pm.PackageManagerService$ActiveInstallSession $r6;
        android.content.pm.PackageParser$SigningDetails $r7, $r14;
        com.android.server.pm.InstallSource $r8;
        java.io.File $r10, $r16, $r20, $r29, $r36, r49, r52, r56, r58;
        java.lang.String $r11, $r12, $r21, $r25, $r34, $r39, r54, r55, r57;
        java.util.List $r23, $r26, $r27, $r28, $r30, $r35, r48;
        java.lang.Object $r31;
        android.content.Intent $r37;
        com.android.server.pm.PackageManagerService $r38;
        android.content.IntentSender $r42;
        android.content.Context $r43;
        java.lang.Throwable $r44;
        com.android.server.pm.PackageInstallerSession$5 r46, $r61;
        java.lang.StringBuilder r50, r59;
        java.lang.IllegalStateException r51;
        java.util.Iterator r53;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mRelinquished>;

        if $z0 != 0 goto label29;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z1 != 0 goto label28;

        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z2 == 0 goto label27;

        $z3 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isApexInstallation()>();

        if $z3 == 0 goto label01;

        r46 = null;

        goto label24;

     label01:
        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z4 = $r4.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        if $z4 != 0 goto label23;

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r12);

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r14);

        $r16 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r16);

        $z5 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean needToAskForPermissionsLocked()>();

        if $z5 == 0 goto label02;

        $r37 = new android.content.Intent;

        specialinvoke $r37.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.action.CONFIRM_INSTALL");

        $r38 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r39 = virtualinvoke $r38.<com.android.server.pm.PackageManagerService: java.lang.String getPackageInstallerPackageName()>();

        virtualinvoke $r37.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r39);

        $i10 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r37.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.SESSION_ID", $i10);

        $r43 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $r42 = r0.<com.android.server.pm.PackageInstallerSession: android.content.IntentSender mRemoteStatusReceiver>;

        $i11 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void sendOnUserActionRequired(android.content.Context,android.content.IntentSender,int,android.content.Intent)>($r43, $r42, $i11, $r37);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void closeInternal(boolean)>(0);

        return null;

     label02:
        $r18 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i4 = $r18.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i4 != 2 goto label22;

     label03:
        r48 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        r49 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inherited files: ");

        $r23 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r25);

        $r26 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        $z7 = interfaceinvoke $r26.<java.util.List: boolean isEmpty()>();

        if $z7 != 0 goto label06;

        $r36 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mInheritedFilesBase>;

        if $r36 == null goto label05;

     label04:
        goto label06;

     label05:
        r51 = new java.lang.IllegalStateException;

        specialinvoke r51.<java.lang.IllegalStateException: void <init>(java.lang.String)>("mInheritedFilesBase == null");

        throw r51;

     label06:
        $z8 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isLinkPossible(java.util.List,java.io.File)>(r48, r49);

        if $z8 == 0 goto label19;

        $r27 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInstructionSets>;

        $z9 = interfaceinvoke $r27.<java.util.List: boolean isEmpty()>();

        if $z9 != 0 goto label07;

        r52 = new java.io.File;

        specialinvoke r52.<java.io.File: void <init>(java.io.File,java.lang.String)>(r49, "oat");

        $r35 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInstructionSets>;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void createOatDirs(java.util.List,java.io.File)>($r35, r52);

     label07:
        $r28 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedNativeLibPaths>;

        $z10 = interfaceinvoke $r28.<java.util.List: boolean isEmpty()>();

        if $z10 != 0 goto label17;

        $r30 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedNativeLibPaths>;

        r53 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z12 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label17;

        $r31 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.lang.String) $r31;

        i0 = virtualinvoke r54.<java.lang.String: int lastIndexOf(int)>(47);

     label09:
        if i0 < 0 goto label15;

     label10:
        $i7 = virtualinvoke r54.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        if i0 < $i8 goto label12;

     label11:
        goto label15;

     label12:
        r55 = virtualinvoke r54.<java.lang.String: java.lang.String substring(int,int)>(1, i0);

        r56 = new java.io.File;

        specialinvoke r56.<java.io.File: void <init>(java.io.File,java.lang.String)>(r49, r55);

        $z11 = virtualinvoke r56.<java.io.File: boolean exists()>();

        if $z11 != 0 goto label13;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void createNativeLibrarySubdir(java.io.File)>(r56);

     label13:
        $i9 = i0 + 1;

        r57 = virtualinvoke r54.<java.lang.String: java.lang.String substring(int)>($i9);

        r58 = new java.io.File;

        specialinvoke r58.<java.io.File: void <init>(java.io.File,java.lang.String)>(r56, r57);

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void createNativeLibrarySubdir(java.io.File)>(r58);

     label14:
        goto label08;

     label15:
        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping native library creation for linking due to invalid path: ");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r34 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageInstallerSession", $r34);

     label16:
        goto label08;

     label17:
        $r29 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mInheritedFilesBase>;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void linkFiles(java.util.List,java.io.File,java.io.File)>(r48, r49, $r29);

     label18:
        goto label20;

     label19:
        staticinvoke <com.android.server.pm.PackageInstallerSession: void copyFiles(java.util.List,java.io.File)>(r48, r49);

     label20:
        goto label22;

     label21:
        $r44 := @caughtexception;

        $r45 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r45.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-4, "Failed to inherit existing install", $r44);

        throw $r45;

     label22:
        r0.<com.android.server.pm.PackageInstallerSession: float mInternalProgress> = 0.5F;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(1);

        $r20 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r21 = $r19.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        $z6 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean mayInheritNativeLibs()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void extractNativeLibraries(java.io.File,java.lang.String,boolean)>($r20, $r21, $z6);

     label23:
        $r61 = new com.android.server.pm.PackageInstallerSession$5;

        specialinvoke $r61.<com.android.server.pm.PackageInstallerSession$5: void <init>(com.android.server.pm.PackageInstallerSession)>(r0);

        r46 = $r61;

     label24:
        $r62 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i12 = $r62.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i13 = $i12 & 64;

        if $i13 == 0 goto label25;

        r63 = <android.os.UserHandle: android.os.UserHandle ALL>;

        goto label26;

     label25:
        $r5 = new android.os.UserHandle;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        specialinvoke $r5.<android.os.UserHandle: void <init>(int)>($i1);

        r63 = $r5;

     label26:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mRelinquished> = 1;

        $r6 = new com.android.server.pm.PackageManagerService$ActiveInstallSession;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        specialinvoke $r6.<com.android.server.pm.PackageManagerService$ActiveInstallSession: void <init>(java.lang.String,java.io.File,android.content.pm.IPackageInstallObserver2,int,android.content.pm.PackageInstaller$SessionParams,int,com.android.server.pm.InstallSource,android.os.UserHandle,android.content.pm.PackageParser$SigningDetails)>($r11, $r10, r46, $i3, $r9, $i2, $r8, r63, $r7);

        return $r6;

     label27:
        $r3 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r3.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Session not sealed");

        throw $r3;

     label28:
        $r2 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r2.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Session destroyed");

        throw $r2;

     label29:
        $r1 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r1.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, "Session relinquished");

        throw $r1;

        catch java.io.IOException from label03 to label04 with label21;
        catch java.io.IOException from label05 to label06 with label21;
        catch java.io.IOException from label06 to label07 with label21;
        catch java.io.IOException from label07 to label08 with label21;
        catch java.io.IOException from label08 to label09 with label21;
        catch java.io.IOException from label10 to label11 with label21;
        catch java.io.IOException from label12 to label13 with label21;
        catch java.io.IOException from label13 to label14 with label21;
        catch java.io.IOException from label15 to label16 with label21;
        catch java.io.IOException from label17 to label18 with label21;
        catch java.io.IOException from label19 to label20 with label21;
    }

    private boolean markAsSealed(android.content.IntentSender, boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1, $z2, z3;
        java.util.List r1;
        java.lang.Object r2;
        android.content.Context $r4, $r7, $r8;
        android.content.ContentResolver $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.pm.PackageInstallerService$InternalCallback $r6;
        java.lang.Throwable $r9;
        com.android.server.pm.PackageManagerException $r10;
        android.content.IntentSender r11;
        java.lang.SecurityException r12;
        java.lang.IllegalArgumentException r13, r15;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r11 := @parameter0: android.content.IntentSender;

        z0 := @parameter1: boolean;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r11);

        r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getChildSessionsNotLocked()>();

        r2 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotDestroyedLocked(java.lang.String)>("commit");

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertNoWriteFileTransfersOpenLocked()>();

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "secure_frp_mode", 0);

        if $i0 != 1 goto label03;

     label02:
        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        if z3 == 0 goto label08;

     label05:
        $r8 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z2 = staticinvoke <com.android.server.pm.PackageInstallerSession: boolean isSecureFrpInstallAllowed(android.content.Context,int)>($r8, $i5);

        if $z2 == 0 goto label07;

     label06:
        goto label08;

     label07:
        r12 = new java.lang.SecurityException;

        specialinvoke r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Can\'t install packages while in secure FRP");

        throw r12;

     label08:
        if z0 == 0 goto label12;

     label09:
        $r7 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", null);

        $i4 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int mOriginalInstallerUid>;

        if $i4 == $i3 goto label11;

     label10:
        goto label13;

     label11:
        r13 = new java.lang.IllegalArgumentException;

        specialinvoke r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session has not been transferred");

        throw r13;

     label12:
        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int mOriginalInstallerUid>;

        if $i2 != $i1 goto label21;

     label13:
        r0.<com.android.server.pm.PackageInstallerSession: android.content.IntentSender mRemoteStatusReceiver> = r11;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z1 == 0 goto label15;

        exitmonitor r2;

     label14:
        return 1;

     label15:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void sealLocked(java.util.List)>(r1);

     label16:
        exitmonitor r2;

     label17:
        $r6 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r6.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionSealedBlocking(com.android.server.pm.PackageInstallerSession)>(r0);

        return 1;

     label18:
        $r10 := @caughtexception;

     label19:
        exitmonitor r2;

     label20:
        return 0;

     label21:
        r15 = new java.lang.IllegalArgumentException;

        specialinvoke r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session has been transferred");

        throw r15;

     label22:
        $r9 := @caughtexception;

     label23:
        exitmonitor r2;

     label24:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch com.android.server.pm.PackageManagerException from label15 to label16 with label18;
        catch java.lang.Throwable from label15 to label16 with label22;
        catch java.lang.Throwable from label16 to label17 with label22;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private boolean mayInheritNativeLibs()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0, z1;
        android.content.pm.PackageInstaller$SessionParams $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z1 = 1;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("pi.inherit_native_on_dont_kill", 1);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i0 = $r1.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i0 != 2 goto label1;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i1 = $r2.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static void maybeRenameFile(java.io.File, java.io.File) throws com.android.server.pm.PackageManagerException
    {
        java.io.File r0, r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        com.android.server.pm.PackageManagerException $r8;
        java.lang.String $r9;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.io.File: boolean renameTo(java.io.File)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not rename file ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = new com.android.server.pm.PackageManagerException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, $r9);

        throw $r8;

     label2:
        return;
    }

    private boolean needToAskForPermissionsLocked()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1, z2, z3, z4, z5, z6, z7, z8, z9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12;
        com.android.server.pm.PackageManagerService $r1, $r2, $r3, $r5;
        java.lang.String $r4;
        android.content.pm.PackageInstaller$SessionParams $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsManuallyAccepted>;

        z2 = 0;

        if z0 == 0 goto label01;

        return 0;

     label01:
        $r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $i1 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", $i0);

        if $i1 != 0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        $r2 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $i3 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_SELF_UPDATES", $i2);

        if $i3 != 0 goto label04;

        z4 = 1;

        goto label05;

     label04:
        z4 = 0;

     label05:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $i4 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        $i5 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGE_UPDATES", $i4);

        if $i5 != 0 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $i6 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        i11 = virtualinvoke $r5.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>($r4, 0, $i6);

        if z3 != 0 goto label10;

        if z5 == 0 goto label08;

        if i11 != -1 goto label10;

     label08:
        if z4 == 0 goto label09;

        $i10 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        if i11 != $i10 goto label09;

        goto label10;

     label09:
        z6 = 0;

        goto label11;

     label10:
        z6 = 1;

     label11:
        $i12 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        if $i12 != 0 goto label12;

        z7 = 1;

        goto label13;

     label12:
        z7 = 0;

     label13:
        $i7 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        if $i7 != 1000 goto label14;

        z8 = 1;

        goto label15;

     label14:
        z8 = 0;

     label15:
        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i8 = $r6.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i9 = $i8 & 1024;

        if $i9 == 0 goto label16;

        z9 = 1;

        goto label17;

     label16:
        z9 = 0;

     label17:
        if z9 != 0 goto label19;

        if z6 != 0 goto label18;

        if z7 != 0 goto label18;

        if z8 != 0 goto label18;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isInstallerDeviceOwnerOrAffiliatedProfileOwnerLocked()>();

        if $z1 != 0 goto label18;

        goto label19;

     label18:
        goto label20;

     label19:
        z2 = 1;

     label20:
        return z2;
    }

    private com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.PackageManagerException r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 := @parameter0: com.android.server.pm.PackageManagerException;

        $i0 = r1.<com.android.server.pm.PackageManagerException: int error>;

        $r2 = staticinvoke <android.util.ExceptionUtils: java.lang.String getCompleteMessage(java.lang.Throwable)>(r1);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void onSessionVerificationFailure(int,java.lang.String)>($i0, $r2);

        return r1;
    }

    private void onSessionVerificationFailure(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(i0, r1, null);

        return;
    }

    private void onStorageUnhealthy()
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, $r3;
        boolean $z0;
        com.android.server.pm._$$Lambda$PackageInstallerSession$UpuMRb5wmirrOQyE79KreHPfilQ $r4;
        android.os.Handler $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        r2 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r4 = new com.android.server.pm._$$Lambda$PackageInstallerSession$UpuMRb5wmirrOQyE79KreHPfilQ;

        specialinvoke $r4.<com.android.server.pm._$$Lambda$PackageInstallerSession$UpuMRb5wmirrOQyE79KreHPfilQ: void <init>(com.android.server.pm.PackageManagerService,java.lang.String)>(r1, r2);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    private android.os.ParcelFileDescriptor openReadInternalLocked(java.lang.String) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;
        java.lang.String $r4, $r7, r11;
        java.io.File $r5, r15;
        int $i0;
        java.io.FileDescriptor $r8;
        java.lang.Throwable $r9;
        java.io.IOException $r10;
        android.os.ParcelFileDescriptor r16;
        java.lang.StringBuilder r17;
        java.lang.IllegalArgumentException r18;
        android.system.ErrnoException r19;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r11 := @parameter0: java.lang.String;

     label1:
        $z0 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r11);

        if $z0 == 0 goto label2;

        r15 = new java.io.File;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        specialinvoke r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, r11);

        r16 = new android.os.ParcelFileDescriptor;

        $r7 = virtualinvoke r15.<java.io.File: java.lang.String getAbsolutePath()>();

        $i0 = <android.system.OsConstants: int O_RDONLY>;

        $r8 = staticinvoke <android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r7, $i0, 0);

        specialinvoke r16.<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>($r8);

        return r16;

     label2:
        r18 = new java.lang.IllegalArgumentException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name: ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r4 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r18;

     label3:
        $r9 := @caughtexception;

        r19 = (android.system.ErrnoException) $r9;

        $r10 = virtualinvoke r19.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

        catch android.system.ErrnoException from label1 to label2 with label3;
        catch android.system.ErrnoException from label2 to label3 with label3;
    }

    private boolean prepareDataLoaderLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        android.content.Context r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, z7, z8, z9;
        java.lang.Object $r7;
        android.content.pm.PackageInstaller$SessionParams $r9;
        android.content.pm.DataLoaderParamsParcel $r11;
        android.content.ComponentName $r14;
        java.lang.String $r15, $r21, $r25, $r26, $r27, $r28, $r29, $r33, $r38;
        android.os.incremental.IncrementalFileStorages $r17, r40;
        java.io.FileFilter $r19, $r23;
        java.io.File $r20, $r24, r49, r54, r55;
        android.content.pm.InstallationFileParcel $r30;
        java.lang.Throwable $r31, $r34, $r35, $r36, $r39, r50;
        android.content.pm.InstallationFile[] r44;
        android.content.pm.InstallationFile r45;
        android.content.pm.DataLoaderManager r46;
        android.content.pm.DataLoaderParams r47;
        com.android.server.pm.PackageManagerException r51, r59, r60, r61;
        java.util.ArrayList r52, r53;
        com.android.server.pm.PackageInstallerSession$6 r56;
        android.os.incremental.StorageHealthCheckParams r57;
        com.android.server.pm.PackageInstallerSession$7 r58;
        java.io.IOException r62, r63, r64, r65;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z7 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        z8 = 1;

        if z7 != 0 goto label01;

        return 1;

     label01:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDataLoaderFinished>;

        if $z0 == 0 goto label02;

        return 1;

     label02:
        r40 = r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages>;

        if r40 == null goto label06;

     label03:
        virtualinvoke r40.<android.os.incremental.IncrementalFileStorages: void startLoading()>();

     label04:
        return 0;

     label05:
        $r36 := @caughtexception;

        r51 = new com.android.server.pm.PackageManagerException;

        r62 = (java.io.IOException) $r36;

        $r38 = virtualinvoke r62.<java.io.IOException: java.lang.String getMessage()>();

        r63 = (java.io.IOException) $r36;

        $r39 = virtualinvoke r63.<java.io.IOException: java.lang.Throwable getCause()>();

        specialinvoke r51.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-20, $r38, $r39);

        throw r51;

     label06:
        r52 = new java.util.ArrayList;

        specialinvoke r52.<java.util.ArrayList: void <init>()>();

        r53 = new java.util.ArrayList;

        specialinvoke r53.<java.util.ArrayList: void <init>()>();

        r44 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.InstallationFile[] getInstallationFilesLocked()>();

        i0 = lengthof r44;

        i5 = 0;

     label07:
        if i5 >= i0 goto label10;

        r45 = r44[i5];

        $r19 = <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sAddedFilter>;

        r54 = new java.io.File;

        $r20 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r21 = virtualinvoke r45.<android.content.pm.InstallationFile: java.lang.String getName()>();

        specialinvoke r54.<java.io.File: void <init>(java.io.File,java.lang.String)>($r20, $r21);

        $z3 = interfaceinvoke $r19.<java.io.FileFilter: boolean accept(java.io.File)>(r54);

        if $z3 == 0 goto label08;

        $r30 = virtualinvoke r45.<android.content.pm.InstallationFile: android.content.pm.InstallationFileParcel getData()>();

        interfaceinvoke r52.<java.util.List: boolean add(java.lang.Object)>($r30);

        goto label09;

     label08:
        $r23 = <com.android.server.pm.PackageInstallerSession: java.io.FileFilter sRemovedFilter>;

        r55 = new java.io.File;

        $r24 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r25 = virtualinvoke r45.<android.content.pm.InstallationFile: java.lang.String getName()>();

        specialinvoke r55.<java.io.File: void <init>(java.io.File,java.lang.String)>($r24, $r25);

        $z4 = interfaceinvoke $r23.<java.io.FileFilter: boolean accept(java.io.File)>(r55);

        if $z4 == 0 goto label09;

        $r26 = virtualinvoke r45.<android.content.pm.InstallationFile: java.lang.String getName()>();

        $r27 = virtualinvoke r45.<android.content.pm.InstallationFile: java.lang.String getName()>();

        $i2 = virtualinvoke $r27.<java.lang.String: int length()>();

        $r28 = ".removed";

        $i3 = virtualinvoke $r28.<java.lang.String: int length()>();

        $i4 = $i2 - $i3;

        $r29 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

        interfaceinvoke r53.<java.util.List: boolean add(java.lang.Object)>($r29);

     label09:
        i5 = i5 + 1;

        goto label07;

     label10:
        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/content/pm/DataLoaderManager;");

        r46 = (android.content.pm.DataLoaderManager) $r7;

        if r46 == null goto label21;

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        r47 = $r9.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isIncrementalInstallation()>();

        z9 = $z1 ^ 1;

        r56 = new com.android.server.pm.PackageInstallerSession$6;

        specialinvoke r56.<com.android.server.pm.PackageInstallerSession$6: void <init>(com.android.server.pm.PackageInstallerSession,android.content.pm.DataLoaderManager,boolean,java.util.List,android.content.pm.DataLoaderParams,java.util.List)>(r0, r46, z9, r52, r47, r53);

        if z9 != 0 goto label19;

        r57 = new android.os.incremental.StorageHealthCheckParams;

        specialinvoke r57.<android.os.incremental.StorageHealthCheckParams: void <init>()>();

        r57.<android.os.incremental.StorageHealthCheckParams: int blockedTimeoutMs> = 2000;

        r57.<android.os.incremental.StorageHealthCheckParams: int unhealthyTimeoutMs> = 7000;

        r57.<android.os.incremental.StorageHealthCheckParams: int unhealthyMonitoringMs> = 60000;

        $r14 = virtualinvoke r47.<android.content.pm.DataLoaderParams: android.content.ComponentName getComponentName()>();

        $r15 = virtualinvoke $r14.<android.content.ComponentName: java.lang.String getPackageName()>();

        if $r15 != "android" goto label11;

        goto label12;

     label11:
        z8 = 0;

     label12:
        r58 = new com.android.server.pm.PackageInstallerSession$7;

        specialinvoke r58.<com.android.server.pm.PackageInstallerSession$7: void <init>(com.android.server.pm.PackageInstallerSession,boolean)>(r0, z8);

     label13:
        r3 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        r49 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

     label14:
        $r17 = staticinvoke <android.os.incremental.IncrementalFileStorages: android.os.incremental.IncrementalFileStorages initialize(android.content.Context,java.io.File,android.content.pm.DataLoaderParams,android.content.pm.IDataLoaderStatusListener,android.os.incremental.StorageHealthCheckParams,android.os.incremental.IStorageHealthListener,java.util.List)>(r3, r49, r47, r56, r57, r58, r52);

        r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages> = $r17;

     label15:
        return 0;

     label16:
        $r31 := @caughtexception;

        r50 = $r31;

        goto label18;

     label17:
        $r35 := @caughtexception;

        r50 = $r35;

     label18:
        r59 = new com.android.server.pm.PackageManagerException;

        r64 = (java.io.IOException) r50;

        $r33 = virtualinvoke r64.<java.io.IOException: java.lang.String getMessage()>();

        r65 = (java.io.IOException) r50;

        $r34 = virtualinvoke r65.<java.io.IOException: java.lang.Throwable getCause()>();

        specialinvoke r59.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-20, $r33, $r34);

        throw r59;

     label19:
        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r11 = virtualinvoke r47.<android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParamsParcel getData()>();

        $z2 = virtualinvoke r46.<android.content.pm.DataLoaderManager: boolean bindToDataLoader(int,android.content.pm.DataLoaderParamsParcel,android.content.pm.IDataLoaderStatusListener)>($i1, $r11, r56);

        if $z2 == 0 goto label20;

        return 0;

     label20:
        r60 = new com.android.server.pm.PackageManagerException;

        specialinvoke r60.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-20, "Failed to initialize data loader");

        throw r60;

     label21:
        r61 = new com.android.server.pm.PackageManagerException;

        specialinvoke r61.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-20, "Failed to find data loader manager service");

        throw r61;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label13 to label14 with label17;
        catch java.io.IOException from label14 to label15 with label16;
    }

    public static com.android.server.pm.PackageInstallerSession readFromXml(org.xmlpull.v1.XmlPullParser, com.android.server.pm.PackageInstallerService$InternalCallback, android.content.Context, com.android.server.pm.PackageManagerService, android.os.Looper, com.android.server.pm.StagingManager, java.io.File, com.android.server.pm.PackageSessionProvider) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageInstallerService$InternalCallback r0;
        android.content.Context r1;
        com.android.server.pm.PackageManagerService r2;
        android.os.Looper r3;
        com.android.server.pm.StagingManager r4;
        com.android.server.pm.PackageSessionProvider r5;
        int i0, i1, i2, i4, i5, i6, $i7, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i25, i26, i27, i28, i29;
        java.lang.String r7, r8, r9, r10, r13, $r17, $r19, $r22, $r23, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r49, $r53, $r54, $r55, $r59, $r60, $r61, r65;
        long l3, $l12, $l21, $l24;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        android.content.pm.PackageInstaller$SessionParams $r16;
        android.graphics.Bitmap $r18, $r56;
        android.net.Uri $r20, $r21;
        java.lang.IllegalArgumentException $r24;
        java.util.ArrayList $r25, $r26, $r27, $r28;
        com.android.server.pm.PackageInstallerSession $r29;
        com.android.server.pm.InstallSource $r30;
        android.content.pm.InstallationFile[] $r31, r71;
        java.lang.Object[] $r32, $r36;
        java.lang.Object $r33;
        java.lang.Integer $r34, $r52;
        java.lang.String[] $r35, $r37;
        android.content.pm.InstallationFile $r48;
        byte[] $r50, $r51;
        android.content.pm.DataLoaderParams $r57;
        android.content.ComponentName $r58;
        java.io.File $r62, r64, r66, r67;
        org.xmlpull.v1.XmlPullParser r63;
        int[] r70;

        r63 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r0 := @parameter1: com.android.server.pm.PackageInstallerService$InternalCallback;

        r1 := @parameter2: android.content.Context;

        r2 := @parameter3: com.android.server.pm.PackageManagerService;

        r3 := @parameter4: android.os.Looper;

        r4 := @parameter5: com.android.server.pm.StagingManager;

        r64 := @parameter6: java.io.File;

        r5 := @parameter7: com.android.server.pm.PackageSessionProvider;

        i0 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "sessionId");

        i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "userId");

        r7 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "installerPackageName");

        $i7 = virtualinvoke r2.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r7, 8192, i1);

        i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r63, "installerUid", $i7);

        r8 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "installInitiatingPackageName");

        r9 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "installOriginatingPackageName");

        l3 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "createdMillis");

        staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "updatedMillis");

        r65 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "sessionStageDir");

        if r65 == null goto label01;

        $r62 = new java.io.File;

        specialinvoke $r62.<java.io.File: void <init>(java.lang.String)>(r65);

        r66 = $r62;

        goto label02;

     label01:
        r66 = null;

     label02:
        r10 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "sessionStageCid");

        z0 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r63, "prepared", 1);

        z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "committed");

        z2 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "destroyed");

        z3 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "sealed");

        i4 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r63, "parentSessionId", -1);

        $r16 = new android.content.pm.PackageInstaller$SessionParams;

        specialinvoke $r16.<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>(-1);

        $z7 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r63, "multiPackage", 0);

        $r16.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage> = $z7;

        $z8 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r63, "stagedSession", 0);

        $r16.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged> = $z8;

        $i9 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "mode");

        $r16.<android.content.pm.PackageInstaller$SessionParams: int mode> = $i9;

        $i10 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "installFlags");

        $r16.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i10;

        $i11 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "installLocation");

        $r16.<android.content.pm.PackageInstaller$SessionParams: int installLocation> = $i11;

        $l12 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "sizeBytes");

        $r16.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes> = $l12;

        $r17 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "appPackageName");

        $r16.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName> = $r17;

        $r18 = staticinvoke <com.android.internal.util.XmlUtils: android.graphics.Bitmap readBitmapAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "appIcon");

        $r16.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r18;

        $r19 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "appLabel");

        $r16.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = $r19;

        $r20 = staticinvoke <com.android.internal.util.XmlUtils: android.net.Uri readUriAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "originatingUri");

        $r16.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri> = $r20;

        $i13 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r63, "originatingUid", -1);

        $r16.<android.content.pm.PackageInstaller$SessionParams: int originatingUid> = $i13;

        $r21 = staticinvoke <com.android.internal.util.XmlUtils: android.net.Uri readUriAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "referrerUri");

        $r16.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri> = $r21;

        $r22 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "abiOverride");

        $r16.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride> = $r22;

        $r23 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "volumeUuid");

        $r16.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid> = $r23;

        $i14 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "installRason");

        $r16.<android.content.pm.PackageInstaller$SessionParams: int installReason> = $i14;

        $z9 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "isDataLoader");

        if $z9 == 0 goto label03;

        $r57 = new android.content.pm.DataLoaderParams;

        $i25 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "dataLoaderType");

        $r58 = new android.content.ComponentName;

        $r59 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "dataLoaderPackageName");

        $r60 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "dataLoaderClassName");

        specialinvoke $r58.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r59, $r60);

        $r61 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "dataLoaderArguments");

        specialinvoke $r57.<android.content.pm.DataLoaderParams: void <init>(int,android.content.ComponentName,java.lang.String)>($i25, $r58, $r61);

        $r16.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams> = $r57;

     label03:
        r67 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.io.File buildAppIconFile(int,java.io.File)>(i0, r64);

        $z10 = virtualinvoke r67.<java.io.File: boolean exists()>();

        if $z10 == 0 goto label04;

        $r55 = virtualinvoke r67.<java.io.File: java.lang.String getAbsolutePath()>();

        $r56 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>($r55);

        $r16.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r56;

        $l24 = virtualinvoke r67.<java.io.File: long lastModified()>();

        $r16.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = $l24;

     label04:
        z4 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "isReady");

        z5 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "isFailed");

        z6 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "isApplied");

        i5 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r63, "errorCode", 0);

        r13 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "errorMessage");

        $z11 = staticinvoke <com.android.server.pm.PackageInstallerSession: boolean isStagedSessionStateValid(boolean,boolean,boolean)>(z4, z6, z5);

        if $z11 == 0 goto label24;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>()>();

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        i6 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        i26 = 3;

     label05:
        i27 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i27 == 1 goto label15;

        if i27 != 3 goto label07;

        $i23 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i23 <= i6 goto label06;

        goto label07;

     label06:
        goto label15;

     label07:
        if i27 == 3 goto label14;

        if i27 != 4 goto label08;

        goto label14;

     label08:
        $r38 = "granted-runtime-permission";

        $r39 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z13 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r39);

        if $z13 == 0 goto label09;

        $r54 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "name");

        interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>($r54);

     label09:
        $r40 = "whitelisted-restricted-permission";

        $r41 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z14 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r41);

        if $z14 == 0 goto label10;

        $r53 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "name");

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r53);

        goto label10;

     label10:
        $r42 = "auto-revoke-permissions-mode";

        $r43 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z15 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>($r43);

        if $z15 == 0 goto label11;

        i26 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "mode");

     label11:
        $r44 = "childSession";

        $r45 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z16 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>($r45);

        if $z16 == 0 goto label12;

        $i22 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r63, "sessionId", -1);

        $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i22);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r52);

        goto label12;

     label12:
        $r46 = "sessionFile";

        $r47 = interfaceinvoke r63.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z17 = virtualinvoke $r46.<java.lang.String: boolean equals(java.lang.Object)>($r47);

        if $z17 == 0 goto label13;

        $r48 = new android.content.pm.InstallationFile;

        $i20 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r63, "location", 0);

        $r49 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "name");

        $l21 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r63, "lengthBytes", -1L);

        $r50 = staticinvoke <com.android.internal.util.XmlUtils: byte[] readByteArrayAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "metadata");

        $r51 = staticinvoke <com.android.internal.util.XmlUtils: byte[] readByteArrayAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r63, "signature");

        specialinvoke $r48.<android.content.pm.InstallationFile: void <init>(int,java.lang.String,long,byte[],byte[])>($i20, $r49, $l21, $r50, $r51);

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r48);

        goto label14;

     label13:
        goto label14;

     label14:
        goto label05;

     label15:
        $i15 = interfaceinvoke $r25.<java.util.List: int size()>();

        if $i15 <= 0 goto label16;

        $r35 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

        $r36 = interfaceinvoke $r25.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r35);

        $r37 = (java.lang.String[]) $r36;

        $r16.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions> = $r37;

     label16:
        $i16 = interfaceinvoke $r26.<java.util.List: int size()>();

        if $i16 <= 0 goto label17;

        $r16.<android.content.pm.PackageInstaller$SessionParams: java.util.List whitelistedRestrictedPermissions> = $r26;

     label17:
        $r16.<android.content.pm.PackageInstaller$SessionParams: int autoRevokePermissionsMode> = i26;

        $i17 = interfaceinvoke $r27.<java.util.List: int size()>();

        if $i17 <= 0 goto label20;

        $i18 = interfaceinvoke $r27.<java.util.List: int size()>();

        r70 = newarray (int)[$i18];

        i28 = 0;

        i29 = interfaceinvoke $r27.<java.util.List: int size()>();

     label18:
        if i28 >= i29 goto label19;

        $r33 = interfaceinvoke $r27.<java.util.List: java.lang.Object get(int)>(i28);

        $r34 = (java.lang.Integer) $r33;

        $i19 = virtualinvoke $r34.<java.lang.Integer: int intValue()>();

        r70[i28] = $i19;

        i28 = i28 + 1;

        goto label18;

     label19:
        goto label21;

     label20:
        r70 = <com.android.server.pm.PackageInstallerSession: int[] EMPTY_CHILD_SESSION_ARRAY>;

     label21:
        $z12 = interfaceinvoke $r28.<java.util.List: boolean isEmpty()>();

        if $z12 != 0 goto label22;

        $r31 = <com.android.server.pm.PackageInstallerSession: android.content.pm.InstallationFile[] EMPTY_INSTALLATION_FILE_ARRAY>;

        $r32 = interfaceinvoke $r28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r31);

        r71 = (android.content.pm.InstallationFile[]) $r32;

        goto label23;

     label22:
        r71 = null;

     label23:
        $r29 = new com.android.server.pm.PackageInstallerSession;

        $r30 = staticinvoke <com.android.server.pm.InstallSource: com.android.server.pm.InstallSource create(java.lang.String,java.lang.String,java.lang.String)>(r8, r9, r7);

        specialinvoke $r29.<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,com.android.server.pm.PackageSessionProvider,android.os.Looper,com.android.server.pm.StagingManager,int,int,int,com.android.server.pm.InstallSource,android.content.pm.PackageInstaller$SessionParams,long,java.io.File,java.lang.String,android.content.pm.InstallationFile[],boolean,boolean,boolean,boolean,int[],int,boolean,boolean,boolean,int,java.lang.String)>(r0, r1, r2, r5, r3, r4, i0, i1, i2, $r30, $r16, l3, r66, r10, r71, z0, z1, z2, z3, r70, i4, z4, z5, z6, i5, r13);

        return $r29;

     label24:
        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t restore staged session with invalid state.");

        throw $r24;
    }

    private void resolveAndStageFile(java.io.File, java.io.File) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.util.List $r2, $r14, $r15;
        java.io.File $r3, $r11, r17, r18;
        java.lang.String $r4, $r5, $r10, $r12, $r13;
        boolean $z1, $z2, $z3;
        java.lang.StringBuilder $r6;
        com.android.server.pm.PackageManagerException $r9, $r16;
        int $i0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r17 := @parameter0: java.io.File;

        r18 := @parameter1: java.io.File;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r18);

        staticinvoke <com.android.server.pm.PackageInstallerSession: void maybeRenameFile(java.io.File,java.io.File)>(r17, r18);

        $r3 = new java.io.File;

        $r4 = virtualinvoke r17.<java.io.File: java.lang.String getPath()>();

        $r5 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>($r4);

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $z3 = r0.<com.android.server.pm.PackageInstallerSession: boolean mVerityFound>;

        if $z3 != 0 goto label2;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mVerityFound> = 1;

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        $i0 = interfaceinvoke $r15.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        goto label2;

     label1:
        $r16 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r16.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-118, "Some file is missing fs-verity signature");

        throw $r16;

     label2:
        $r11 = new java.io.File;

        $r12 = virtualinvoke r18.<java.io.File: java.lang.String getPath()>();

        $r13 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>($r12);

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r13);

        staticinvoke <com.android.server.pm.PackageInstallerSession: void maybeRenameFile(java.io.File,java.io.File)>($r3, $r11);

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r11);

        return;

     label3:
        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mVerityFound>;

        if $z2 != 0 goto label4;

        return;

     label4:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing corresponding fs-verity signature to ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r9 = new com.android.server.pm.PackageManagerException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-118, $r10);

        throw $r9;
    }

    private void resolveInheritedFile(java.io.File)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.util.List $r1, $r5;
        java.io.File $r2, r6;
        java.lang.String $r3, $r4;
        boolean $z1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r6 := @parameter0: java.io.File;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r6);

        $r2 = new java.io.File;

        $r3 = virtualinvoke r6.<java.io.File: java.lang.String getPath()>();

        $r4 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>($r3);

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r4);

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

     label1:
        return;
    }

    private void sealLocked(java.util.List) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.PackageManagerException $r1, $r2, $r4, $r5;
        java.lang.Throwable $r3;
        java.util.List r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r6 := @parameter0: java.util.List;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertNoWriteFileTransfersOpenLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotDestroyedLocked(java.lang.String)>("sealing of session");

        r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed> = 1;

     label2:
        if r6 == null goto label4;

     label3:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertMultiPackageConsistencyLocked(java.util.List)>(r6);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        $r4 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r4.<com.android.server.pm.PackageManagerException: void <init>(java.lang.Throwable)>($r3);

        $r5 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)>($r4);

        throw $r5;

     label6:
        $r1 := @caughtexception;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)>($r1);

        throw $r2;

        catch com.android.server.pm.PackageManagerException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch com.android.server.pm.PackageManagerException from label3 to label4 with label6;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static void sendOnPackageInstalled(android.content.Context, android.content.IntentSender, int, boolean, int, java.lang.String, int, java.lang.String, android.os.Bundle)
    {
        android.content.IntentSender r0;
        int i0, i1, i2, i3, $i4;
        boolean z0, $z1, $z2, z3;
        java.lang.String r1, $r9, r14, $r19, r20;
        android.os.Bundle r2;
        java.lang.Object $r10;
        android.app.NotificationManager $r11;
        android.content.IntentSender$SendIntentException $r12;
        android.content.Context r13;
        android.content.res.Resources r15;
        android.app.Notification r16;
        android.content.Intent $r17;

        r13 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.IntentSender;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        i1 := @parameter4: int;

        r14 := @parameter5: java.lang.String;

        i2 := @parameter6: int;

        r1 := @parameter7: java.lang.String;

        r2 := @parameter8: android.os.Bundle;

        z3 = 1;

        if 1 != i2 goto label5;

        if z0 == 0 goto label5;

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<android.os.Bundle: boolean getBoolean(java.lang.String)>("android.intent.extra.REPLACING");

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        r15 = virtualinvoke r13.<android.content.Context: android.content.res.Resources getResources()>();

        if z3 == 0 goto label3;

        i3 = 17040736;

        goto label4;

     label3:
        i3 = 17040735;

     label4:
        $r9 = virtualinvoke r15.<android.content.res.Resources: java.lang.String getString(int)>(i3);

        r16 = staticinvoke <com.android.server.pm.PackageInstallerService: android.app.Notification buildSuccessNotification(android.content.Context,java.lang.String,java.lang.String,int)>(r13, $r9, r14, i1);

        if r16 == null goto label5;

        $r10 = virtualinvoke r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r11 = (android.app.NotificationManager) $r10;

        virtualinvoke $r11.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>(r14, 21, r16);

     label5:
        $r17 = new android.content.Intent;

        specialinvoke $r17.<android.content.Intent: void <init>()>();

        virtualinvoke $r17.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.PACKAGE_NAME", r14);

        virtualinvoke $r17.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.SESSION_ID", i0);

        $i4 = staticinvoke <android.content.pm.PackageManager: int installStatusToPublicStatus(int)>(i2);

        virtualinvoke $r17.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.STATUS", $i4);

        $r19 = staticinvoke <android.content.pm.PackageManager: java.lang.String installStatusToString(int,java.lang.String)>(i2, r1);

        virtualinvoke $r17.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.STATUS_MESSAGE", $r19);

        virtualinvoke $r17.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.LEGACY_STATUS", i2);

        if r2 == null goto label6;

        r20 = virtualinvoke r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("android.content.pm.extra.FAILURE_EXISTING_PACKAGE");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z1 != 0 goto label6;

        virtualinvoke $r17.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.OTHER_PACKAGE_NAME", r20);

     label6:
        virtualinvoke r0.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>(r13, 0, $r17, null, null);

     label7:
        goto label9;

     label8:
        $r12 := @caughtexception;

     label9:
        return;

        catch android.content.IntentSender$SendIntentException from label6 to label7 with label8;
    }

    private static void sendOnUserActionRequired(android.content.Context, android.content.IntentSender, int, android.content.Intent)
    {
        android.content.IntentSender r0;
        int i0;
        android.content.Intent r1, $r3;
        android.content.IntentSender$SendIntentException $r7;
        android.content.Context r8;

        r8 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.IntentSender;

        i0 := @parameter2: int;

        r1 := @parameter3: android.content.Intent;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.SESSION_ID", i0);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.STATUS", -1);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.INTENT", r1);

     label1:
        virtualinvoke r0.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>(r8, 0, $r3, null, null);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        return;

        catch android.content.IntentSender$SendIntentException from label1 to label2 with label3;
    }

    private void sendPendingStreaming(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.IntentSender r1;
        android.content.Intent $r3;
        int $i0;
        boolean $z0;
        android.content.Context $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r12, r16;
        android.content.IntentSender$SendIntentException $r14;
        java.lang.Throwable $r15;
        java.lang.Object r17;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r16 := @parameter0: java.lang.String;

        r17 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r17;

     label01:
        r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.IntentSender mRemoteStatusReceiver>;

        exitmonitor r17;

     label02:
        if r1 != null goto label03;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageInstallerSession", "Missing receiver for pending streaming status.");

        return;

     label03:
        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.SESSION_ID", $i0);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.STATUS", -2);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r16);

        if $z0 != 0 goto label04;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Staging Image Not Ready [");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.STATUS_MESSAGE", $r12);

        goto label05;

     label04:
        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.STATUS_MESSAGE", "Staging Image Not Ready");

     label05:
        $r7 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        virtualinvoke r1.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>($r7, 0, $r3, null, null);

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

     label08:
        return;

     label09:
        $r15 := @caughtexception;

     label10:
        exitmonitor r17;

     label11:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.content.IntentSender$SendIntentException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void setClientProgressLocked(float)
    {
        com.android.server.pm.PackageInstallerSession r0;
        float f0, $f1;
        byte $b0;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        f0 := @parameter0: float;

        $f1 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress> = f0;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(z0);

        return;
    }

    private boolean shouldScrubData(int)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        if i0 < 10000 goto label1;

        $i1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: int getInstallerUid()>();

        if $i1 == i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean streamAndValidateLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1, $r8;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.pm.StagingManager $r2;
        com.android.server.pm.PackageManagerException $r3, $r4, $r6, $r7;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

     label1:
        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = $r1.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        if $z0 != 0 goto label6;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean prepareDataLoaderLocked()>();

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isApexInstallation()>();

        if $z2 == 0 goto label5;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void validateApexInstallLocked()>();

     label4:
        goto label6;

     label5:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void validateApkInstallLocked()>();

     label6:
        $r8 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z3 = $r8.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z3 == 0 goto label7;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.StagingManager mStagingManager>;

        virtualinvoke $r2.<com.android.server.pm.StagingManager: void checkNonOverlappingWithStagedSessions(com.android.server.pm.PackageInstallerSession)>(r0);

     label7:
        return 1;

     label8:
        $r5 := @caughtexception;

        $r6 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r6.<com.android.server.pm.PackageManagerException: void <init>(java.lang.Throwable)>($r5);

        $r7 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)>($r6);

        throw $r7;

     label9:
        $r3 := @caughtexception;

        $r4 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerException onSessionVerificationFailure(com.android.server.pm.PackageManagerException)>($r3);

        throw $r4;

        catch com.android.server.pm.PackageManagerException from label1 to label2 with label9;
        catch java.lang.Throwable from label1 to label2 with label8;
        catch com.android.server.pm.PackageManagerException from label3 to label4 with label9;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch com.android.server.pm.PackageManagerException from label5 to label6 with label9;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch com.android.server.pm.PackageManagerException from label6 to label7 with label9;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private boolean streamValidateAndCommit() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return 1;

     label3:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean streamAndValidateLocked()>();

        if $z1 != 0 goto label5;

        exitmonitor r1;

     label4:
        return 0;

     label5:
        r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress> = 1.0F;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void computeProgressLocked(boolean)>(1);

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted> = 1;

        exitmonitor r1;

     label6:
        return 1;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void validateApexInstallLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0, $z1, $z2;
        com.android.server.pm.PackageManagerException $r2, $r8, $r16, $r23;
        java.lang.Object[] $r3;
        int $i0, $i1;
        java.lang.Integer $r4;
        java.io.File $r5, $r18, $r19, r25;
        java.lang.String $r6, $r7, $r17, $r20, $r21, r26;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10, $r13;
        long $l2;
        android.content.pm.PackageParser$PackageParserException $r22;
        java.util.List r24;
        android.content.pm.PackageParser$ApkLite r28;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r24 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getAddedApksLocked()>();

        $z0 = interfaceinvoke r24.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        $i1 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>(r24);

        if $i1 > 1 goto label8;

        $r9 = interfaceinvoke r24.<java.util.List: java.lang.Object get(int)>(0);

        r25 = (java.io.File) $r9;

        r26 = virtualinvoke r25.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke r26.<java.lang.String: boolean endsWith(java.lang.String)>(".apex");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apex");

        r26 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $z2 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r26);

        if $z2 == 0 goto label7;

        $r18 = new java.io.File;

        $r19 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        specialinvoke $r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r19, r26);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveAndStageFile(java.io.File,java.io.File)>(r25, $r18);

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = $r18;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = null;

     label3:
        r28 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$ApkLite parseApkLite(java.io.File,int)>($r18, 32);

     label4:
        $r20 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        if $r20 != null goto label5;

        $r21 = r28.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = $r21;

        $l2 = virtualinvoke r28.<android.content.pm.PackageParser$ApkLite: long getLongVersionCode()>();

        r0.<com.android.server.pm.PackageInstallerSession: long mVersionCode> = $l2;

     label5:
        return;

     label6:
        $r22 := @caughtexception;

        $r23 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>($r22);

        throw $r23;

     label7:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filename: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r16 = new com.android.server.pm.PackageManagerException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r17);

        throw $r16;

     label8:
        $r8 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r8.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Too many files for apex install");

        throw $r8;

     label9:
        $r2 = new com.android.server.pm.PackageManagerException;

        $r3 = newarray (java.lang.Object)[2];

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Session: %d. No packages staged in %s", $r3);

        specialinvoke $r2.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r7);

        throw $r2;

        catch android.content.pm.PackageParser$PackageParserException from label3 to label4 with label6;
    }

    private void validateApkInstallLocked() throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i20, i21, i22, i23, i24, i25, i26;
        android.content.pm.PackageParser$SigningDetails $r3, $r78, $r79, $r82, $r106, $r107, $r132;
        java.util.List $r4, $r5, $r37, $r52, $r54, $r55, $r56, $r58, $r60, $r61, r153, r158;
        android.content.pm.PackageInstaller$SessionParams $r6, $r9, $r144, $r177;
        java.lang.String $r7, $r13, $r15, $r20, $r22, $r27, $r33, $r36, $r39, $r40, $r43, $r46, $r57, $r59, $r66, $r68, $r73, $r76, $r77, $r81, $r83, $r90, $r94, $r97, $r100, $r104, $r105, $r108, $r109, $r112, $r119, $r122, $r123, $r128, $r131, $r133, $r138, $r139, $r142, $r143, $r146, r157, r165, r173, r189, r206, r210;
        com.android.server.pm.PackageManagerService $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z16, $z18, $z21, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z34, z35, $z36, $z37, $z38, z39, $z40, $z41, $z42, z43;
        android.util.ArraySet $r10;
        android.content.pm.parsing.result.ParseInput $r11, $r18, $r92;
        java.io.File $r12, $r19, $r25, $r26, $r28, $r48, $r49, $r64, $r67, $r69, $r120, $r121, $r129, $r130, $r137, $r141, r162, r167, r185, r191, r192, r197, r201, r205, r212;
        com.android.server.pm.PackageManagerException $r14, $r21, $r35, $r45, $r70, $r75, $r89, $r93, $r103, $r118, $r127, $r134, $r147, $r150;
        java.lang.Exception $r16, $r23, $r95;
        java.lang.Object $r17, $r24, $r38, $r53, $r84, $r91, $r96, $r140;
        android.os.incremental.IncrementalFileStorages $r29, $r30;
        java.lang.StringBuilder $r31, $r41, $r71, $r86, $r98, $r110, $r115, $r124;
        java.io.File[] $r47, r194, r198, r204, r207;
        java.util.ArrayList $r50, $r51, $r154;
        java.lang.String[] $r62, $r63, $r65, $r85, $r186, r195;
        android.content.pm.ApplicationInfo $r80, $r145, $r148, r178;
        long $l10, $l12;
        java.lang.Object[] $r135;
        java.lang.Integer $r136;
        android.content.pm.PackageParser$PackageParserException $r149;
        java.lang.Throwable $r151;
        android.content.pm.PackageInfo r152;
        java.util.Iterator r156, r160, r172, r209, r211;
        android.content.pm.parsing.result.ParseTypeImpl r159;
        android.content.pm.PackageParser$ApkLite r161, r164, r182, r183;
        android.content.pm.parsing.result.ParseResult r163, r179, r181;
        android.content.pm.PackageParser$PackageLite r180;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = null;

        r0.<com.android.server.pm.PackageInstallerSession: long mVersionCode> = -1L;

        $r3 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r3;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = null;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        interfaceinvoke $r5.<java.util.List: void clear()>();

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r7 = $r6.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        r152 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>($r7, 67108928, $i1);

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i2 = $r9.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i2 != 2 goto label02;

        if r152 == null goto label01;

        $r148 = r152.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        if $r148 == null goto label01;

        goto label02;

     label01:
        $r147 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r147.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Missing existing base package");

        throw $r147;

     label02:
        $z0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isApkVerityEnabled()>();

        if $z0 == 0 goto label03;

        $r144 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i18 = $r144.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i18 != 2 goto label03;

        $r145 = r152.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r146 = virtualinvoke $r145.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        $z34 = staticinvoke <com.android.server.security.VerityUtils: boolean hasFsverity(java.lang.String)>($r146);

        if $z34 == 0 goto label03;

        z35 = 1;

        goto label04;

     label03:
        z35 = 0;

     label04:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mVerityFound> = z35;

        r153 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getRemovedFilesLocked()>();

        $r154 = new java.util.ArrayList;

        specialinvoke $r154.<java.util.ArrayList: void <init>()>();

        $z36 = interfaceinvoke r153.<java.util.List: boolean isEmpty()>();

        if $z36 != 0 goto label06;

        r156 = interfaceinvoke r153.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z32 = interfaceinvoke r156.<java.util.Iterator: boolean hasNext()>();

        if $z32 == 0 goto label06;

        $r140 = interfaceinvoke r156.<java.util.Iterator: java.lang.Object next()>();

        $r141 = (java.io.File) $r140;

        r157 = virtualinvoke $r141.<java.io.File: java.lang.String getName()>();

        $i15 = virtualinvoke r157.<java.lang.String: int length()>();

        $r142 = ".removed";

        $i16 = virtualinvoke $r142.<java.lang.String: int length()>();

        $i17 = $i15 - $i16;

        $r143 = virtualinvoke r157.<java.lang.String: java.lang.String substring(int,int)>(0, $i17);

        interfaceinvoke $r154.<java.util.List: boolean add(java.lang.Object)>($r143);

        goto label05;

     label06:
        r158 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getAddedApksLocked()>();

        $z1 = interfaceinvoke r158.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label08;

        $i13 = interfaceinvoke $r154.<java.util.List: int size()>();

        if $i13 == 0 goto label07;

        goto label08;

     label07:
        $r134 = new com.android.server.pm.PackageManagerException;

        $r135 = newarray (java.lang.Object)[2];

        $i14 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r136 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i14);

        $r135[0] = $r136;

        $r137 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r138 = virtualinvoke $r137.<java.io.File: java.lang.String getAbsolutePath()>();

        $r135[1] = $r138;

        $r139 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Session: %d. No packages staged in %s", $r135);

        specialinvoke $r134.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r139);

        throw $r134;

     label08:
        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        r159 = staticinvoke <android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseTypeImpl forDefaultParsing()>();

        r160 = interfaceinvoke r158.<java.util.List: java.util.Iterator iterator()>();

        r161 = null;

     label09:
        $z37 = interfaceinvoke r160.<java.util.Iterator: boolean hasNext()>();

        if $z37 == 0 goto label20;

        $r91 = interfaceinvoke r160.<java.util.Iterator: java.lang.Object next()>();

        r162 = (java.io.File) $r91;

        $r92 = virtualinvoke r159.<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseInput reset()>();

        r163 = staticinvoke <android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parseApkLite(android.content.pm.parsing.result.ParseInput,java.io.File,int)>($r92, r162, 32);

        $z28 = interfaceinvoke r163.<android.content.pm.parsing.result.ParseResult: boolean isError()>();

        if $z28 != 0 goto label19;

        $r96 = interfaceinvoke r163.<android.content.pm.parsing.result.ParseResult: java.lang.Object getResult()>();

        r164 = (android.content.pm.PackageParser$ApkLite) $r96;

        $r97 = r164.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        $z29 = virtualinvoke $r10.<android.util.ArraySet: boolean add(java.lang.Object)>($r97);

        if $z29 == 0 goto label18;

        $r105 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        if $r105 != null goto label10;

        $r133 = r164.<android.content.pm.PackageParser$ApkLite: java.lang.String packageName>;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = $r133;

        $l12 = virtualinvoke r164.<android.content.pm.PackageParser$ApkLite: long getLongVersionCode()>();

        r0.<com.android.server.pm.PackageInstallerSession: long mVersionCode> = $l12;

        goto label10;

     label10:
        $r107 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r106 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r107 != $r106 goto label11;

        $r132 = r164.<android.content.pm.PackageParser$ApkLite: android.content.pm.PackageParser$SigningDetails signingDetails>;

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r132;

     label11:
        $r108 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r162);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertApkConsistentLocked(java.lang.String,android.content.pm.PackageParser$ApkLite)>($r108, r164);

        $r109 = r164.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        if $r109 != null goto label12;

        r165 = "base.apk";

        goto label13;

     label12:
        $r110 = new java.lang.StringBuilder;

        specialinvoke $r110.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split_");

        $r112 = r164.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r112);

        virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        r165 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        $z30 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r165);

        if $z30 == 0 goto label17;

        $r120 = new java.io.File;

        $r121 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        specialinvoke $r120.<java.io.File: void <init>(java.io.File,java.lang.String)>($r121, r165);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveAndStageFile(java.io.File,java.io.File)>(r162, $r120);

        $r122 = r164.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        if $r122 != null goto label14;

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = $r120;

        r161 = r164;

     label14:
        r167 = staticinvoke <android.content.pm.dex.DexMetadataHelper: java.io.File findDexMetadataForFile(java.io.File)>(r162);

        if r167 == null goto label16;

        $r123 = virtualinvoke r167.<java.io.File: java.lang.String getName()>();

        $z31 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>($r123);

        if $z31 == 0 goto label15;

        $r129 = new java.io.File;

        $r130 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r131 = staticinvoke <android.content.pm.dex.DexMetadataHelper: java.lang.String buildDexMetadataPathForApk(java.lang.String)>(r165);

        specialinvoke $r129.<java.io.File: void <init>(java.io.File,java.lang.String)>($r130, $r131);

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveAndStageFile(java.io.File,java.io.File)>(r167, $r129);

        goto label16;

     label15:
        $r124 = new java.lang.StringBuilder;

        specialinvoke $r124.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filename: ");

        virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r167);

        $r127 = new com.android.server.pm.PackageManagerException;

        $r128 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r127.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r128);

        throw $r127;

     label16:
        goto label09;

     label17:
        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filename: ");

        virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r165);

        $r118 = new com.android.server.pm.PackageManagerException;

        $r119 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r118.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r119);

        throw $r118;

     label18:
        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Split ");

        $r100 = r164.<android.content.pm.PackageParser$ApkLite: java.lang.String splitName>;

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was defined multiple times");

        $r103 = new com.android.server.pm.PackageManagerException;

        $r104 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r103.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r104);

        throw $r103;

     label19:
        $r93 = new com.android.server.pm.PackageManagerException;

        $i11 = interfaceinvoke r163.<android.content.pm.parsing.result.ParseResult: int getErrorCode()>();

        $r94 = interfaceinvoke r163.<android.content.pm.parsing.result.ParseResult: java.lang.String getErrorMessage()>();

        $r95 = interfaceinvoke r163.<android.content.pm.parsing.result.ParseResult: java.lang.Exception getException()>();

        specialinvoke $r93.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>($i11, $r94, $r95);

        throw $r93;

     label20:
        $i3 = interfaceinvoke $r154.<java.util.List: int size()>();

        if $i3 <= 0 goto label29;

        if r152 == null goto label28;

        r172 = interfaceinvoke $r154.<java.util.List: java.util.Iterator iterator()>();

     label21:
        $z26 = interfaceinvoke r172.<java.util.Iterator: boolean hasNext()>();

        if $z26 == 0 goto label23;

        $r84 = interfaceinvoke r172.<java.util.Iterator: java.lang.Object next()>();

        r173 = (java.lang.String) $r84;

        $r85 = r152.<android.content.pm.PackageInfo: java.lang.String[] splitNames>;

        $z27 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r85, r173);

        if $z27 == 0 goto label22;

        goto label21;

     label22:
        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Split not found: ");

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r173);

        $r89 = new com.android.server.pm.PackageManagerException;

        $r90 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r89.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r90);

        throw $r89;

     label23:
        $r77 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        if $r77 != null goto label24;

        $r83 = r152.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName> = $r83;

        $l10 = virtualinvoke r152.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        r0.<com.android.server.pm.PackageInstallerSession: long mVersionCode> = $l10;

     label24:
        $r79 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r78 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r79 != $r78 goto label29;

     label25:
        $r80 = r152.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r81 = $r80.<android.content.pm.ApplicationInfo: java.lang.String sourceDir>;

        $r82 = staticinvoke <android.util.apk.ApkSignatureVerifier: android.content.pm.PackageParser$SigningDetails unsafeGetCertsWithoutVerification(java.lang.String,int)>($r81, 1);

        r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r82;

     label26:
        goto label29;

     label27:
        $r149 := @caughtexception;

        $r150 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r150.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Couldn\'t obtain signatures from base APK");

        throw $r150;

     label28:
        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing existing base package for ");

        $r73 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = new com.android.server.pm.PackageManagerException;

        $r76 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r76);

        throw $r75;

     label29:
        $r177 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i20 = $r177.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i20 != 1 goto label31;

        $z25 = virtualinvoke $r10.<android.util.ArraySet: boolean contains(java.lang.Object)>(null);

        if $z25 == 0 goto label30;

        goto label60;

     label30:
        $r70 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r70.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Full install must include a base package");

        throw $r70;

     label31:
        r178 = r152.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = virtualinvoke r159.<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseInput reset()>();

        $r12 = new java.io.File;

        $r13 = virtualinvoke r178.<android.content.pm.ApplicationInfo: java.lang.String getCodePath()>();

        specialinvoke $r12.<java.io.File: void <init>(java.lang.String)>($r13);

        r179 = staticinvoke <android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parsePackageLite(android.content.pm.parsing.result.ParseInput,java.io.File,int)>($r11, $r12, 0);

        $z2 = interfaceinvoke r179.<android.content.pm.parsing.result.ParseResult: boolean isError()>();

        if $z2 != 0 goto label71;

        $r17 = interfaceinvoke r179.<android.content.pm.parsing.result.ParseResult: java.lang.Object getResult()>();

        r180 = (android.content.pm.PackageParser$PackageLite) $r17;

        $r18 = virtualinvoke r159.<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseInput reset()>();

        $r19 = new java.io.File;

        $r20 = virtualinvoke r178.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>($r20);

        r181 = staticinvoke <android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parseApkLite(android.content.pm.parsing.result.ParseInput,java.io.File,int)>($r18, $r19, 32);

        $z3 = interfaceinvoke r181.<android.content.pm.parsing.result.ParseResult: boolean isError()>();

        if $z3 != 0 goto label70;

        $r24 = interfaceinvoke r181.<android.content.pm.parsing.result.ParseResult: java.lang.Object getResult()>();

        r182 = (android.content.pm.PackageParser$ApkLite) $r24;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertApkConsistentLocked(java.lang.String,android.content.pm.PackageParser$ApkLite)>("Existing base", r182);

        r183 = r161;

        $r25 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        if $r25 != null goto label33;

        $r67 = new java.io.File;

        $r68 = virtualinvoke r178.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        specialinvoke $r67.<java.io.File: void <init>(java.lang.String)>($r68);

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile> = $r67;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveInheritedFile(java.io.File)>($r67);

        $r69 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File mResolvedBaseFile>;

        r185 = staticinvoke <android.content.pm.dex.DexMetadataHelper: java.io.File findDexMetadataForFile(java.io.File)>($r69);

        if r185 == null goto label32;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveInheritedFile(java.io.File)>(r185);

     label32:
        r183 = r182;

     label33:
        $r186 = r180.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $z38 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r186);

        if $z38 != 0 goto label37;

        i21 = 0;

     label34:
        $r62 = r180.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $i9 = lengthof $r62;

        if i21 >= $i9 goto label36;

        $r63 = r180.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        r189 = $r63[i21];

        $r64 = new java.io.File;

        $r65 = r180.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        $r66 = $r65[i21];

        specialinvoke $r64.<java.io.File: void <init>(java.lang.String)>($r66);

        z39 = interfaceinvoke $r154.<java.util.List: boolean contains(java.lang.Object)>(r189);

        $z24 = virtualinvoke $r10.<android.util.ArraySet: boolean contains(java.lang.Object)>(r189);

        if $z24 != 0 goto label35;

        if z39 != 0 goto label35;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveInheritedFile(java.io.File)>($r64);

        r191 = staticinvoke <android.content.pm.dex.DexMetadataHelper: java.io.File findDexMetadataForFile(java.io.File)>($r64);

        if r191 == null goto label35;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void resolveInheritedFile(java.io.File)>(r191);

        goto label35;

     label35:
        i21 = i21 + 1;

        goto label34;

     label36:
        goto label37;

     label37:
        $r26 = new java.io.File;

        $r27 = virtualinvoke r178.<android.content.pm.ApplicationInfo: java.lang.String getBaseCodePath()>();

        specialinvoke $r26.<java.io.File: void <init>(java.lang.String)>($r27);

        r192 = virtualinvoke $r26.<java.io.File: java.io.File getParentFile()>();

        r0.<com.android.server.pm.PackageInstallerSession: java.io.File mInheritedFilesBase> = r192;

        $r28 = new java.io.File;

        specialinvoke $r28.<java.io.File: void <init>(java.io.File,java.lang.String)>(r192, "oat");

        $z4 = virtualinvoke $r28.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label44;

        r194 = virtualinvoke $r28.<java.io.File: java.io.File[] listFiles()>();

        if r194 == null goto label43;

        $i7 = lengthof r194;

        if $i7 <= 0 goto label43;

        r195 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAllDexCodeInstructionSets()>();

        i22 = lengthof r194;

        i23 = 0;

     label38:
        if i23 >= i22 goto label42;

        r197 = r194[i23];

        $r57 = virtualinvoke r197.<java.io.File: java.lang.String getName()>();

        $z21 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r195, $r57);

        if $z21 != 0 goto label39;

        goto label41;

     label39:
        r198 = virtualinvoke r197.<java.io.File: java.io.File[] listFiles()>();

        if r198 == null goto label41;

        $i8 = lengthof r198;

        if $i8 != 0 goto label40;

        goto label41;

     label40:
        $r58 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInstructionSets>;

        $r59 = virtualinvoke r197.<java.io.File: java.lang.String getName()>();

        interfaceinvoke $r58.<java.util.List: boolean add(java.lang.Object)>($r59);

        $r60 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        $r61 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r198);

        interfaceinvoke $r60.<java.util.List: boolean addAll(java.util.Collection)>($r61);

        goto label41;

     label41:
        i23 = i23 + 1;

        goto label38;

     label42:
        goto label44;

     label43:
        goto label44;

     label44:
        $z40 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean mayInheritNativeLibs()>();

        if $z40 == 0 goto label59;

        $z12 = interfaceinvoke $r154.<java.util.List: boolean isEmpty()>();

        if $z12 == 0 goto label59;

        $r47 = newarray (java.io.File)[2];

        $r48 = new java.io.File;

        specialinvoke $r48.<java.io.File: void <init>(java.io.File,java.lang.String)>(r192, "lib");

        $r47[0] = $r48;

        $r49 = new java.io.File;

        specialinvoke $r49.<java.io.File: void <init>(java.io.File,java.lang.String)>(r192, "lib64");

        $r47[1] = $r49;

        i0 = lengthof $r47;

        i24 = 0;

     label45:
        if i24 >= i0 goto label58;

        r201 = $r47[i24];

        $z13 = virtualinvoke r201.<java.io.File: boolean exists()>();

        if $z13 == 0 goto label57;

        $z14 = virtualinvoke r201.<java.io.File: boolean isDirectory()>();

        if $z14 != 0 goto label46;

        goto label57;

     label46:
        $r50 = new java.util.ArrayList;

        specialinvoke $r50.<java.util.ArrayList: void <init>()>();

        $r51 = new java.util.ArrayList;

        specialinvoke $r51.<java.util.ArrayList: void <init>()>();

        r204 = virtualinvoke r201.<java.io.File: java.io.File[] listFiles()>();

        i25 = lengthof r204;

        i26 = 0;

     label47:
        if i26 >= i25 goto label53;

        r205 = r204[i26];

        $z18 = virtualinvoke r205.<java.io.File: boolean isDirectory()>();

        if $z18 != 0 goto label48;

        goto label51;

     label48:
        r206 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.lang.String getRelativePath(java.io.File,java.io.File)>(r205, r192);

     label49:
        r207 = virtualinvoke r205.<java.io.File: java.io.File[] listFiles()>();

        if r207 == null goto label51;

        $i6 = lengthof r207;

        if $i6 != 0 goto label50;

        goto label51;

     label50:
        interfaceinvoke $r50.<java.util.List: boolean add(java.lang.Object)>(r206);

        $r56 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r207);

        interfaceinvoke $r51.<java.util.List: boolean addAll(java.util.Collection)>($r56);

        goto label51;

     label51:
        i26 = i26 + 1;

        goto label47;

     label52:
        $r151 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstallerSession", "Skipping linking of native library directory!", $r151);

        interfaceinvoke $r50.<java.util.List: void clear()>();

        interfaceinvoke $r51.<java.util.List: void clear()>();

        goto label53;

     label53:
        r209 = interfaceinvoke $r50.<java.util.List: java.util.Iterator iterator()>();

     label54:
        $z41 = interfaceinvoke r209.<java.util.Iterator: boolean hasNext()>();

        if $z41 == 0 goto label56;

        $r53 = interfaceinvoke r209.<java.util.Iterator: java.lang.Object next()>();

        r210 = (java.lang.String) $r53;

        $r54 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedNativeLibPaths>;

        $z16 = interfaceinvoke $r54.<java.util.List: boolean contains(java.lang.Object)>(r210);

        if $z16 != 0 goto label55;

        $r55 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedNativeLibPaths>;

        interfaceinvoke $r55.<java.util.List: boolean add(java.lang.Object)>(r210);

     label55:
        goto label54;

     label56:
        $r52 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedInheritedFiles>;

        interfaceinvoke $r52.<java.util.List: boolean addAll(java.util.Collection)>($r51);

        goto label57;

     label57:
        i24 = i24 + 1;

        goto label45;

     label58:
        r161 = r183;

        goto label60;

     label59:
        r161 = r183;

     label60:
        $z42 = r161.<android.content.pm.PackageParser$ApkLite: boolean useEmbeddedDex>;

        if $z42 == 0 goto label64;

        $r37 = r0.<com.android.server.pm.PackageInstallerSession: java.util.List mResolvedStagedFiles>;

        r211 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>();

     label61:
        $z9 = interfaceinvoke r211.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label64;

        $r38 = interfaceinvoke r211.<java.util.Iterator: java.lang.Object next()>();

        r212 = (java.io.File) $r38;

        $r39 = virtualinvoke r212.<java.io.File: java.lang.String getName()>();

        $z10 = virtualinvoke $r39.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z10 == 0 goto label63;

        $r40 = virtualinvoke r212.<java.io.File: java.lang.String getPath()>();

        $z11 = staticinvoke <com.android.server.pm.dex.DexManager: boolean auditUncompressedDexInApk(java.lang.String)>($r40);

        if $z11 == 0 goto label62;

        goto label63;

     label62:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Some dex are not uncompressed and aligned correctly for ");

        $r43 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = new com.android.server.pm.PackageManagerException;

        $r46 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r46);

        throw $r45;

     label63:
        goto label61;

     label64:
        $z5 = r161.<android.content.pm.PackageParser$ApkLite: boolean isSplitRequired>;

        if $z5 == 0 goto label66;

        $i5 = virtualinvoke $r10.<android.util.ArraySet: int size()>();

        if $i5 <= 1 goto label65;

        goto label66;

     label65:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing split for ");

        $r33 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = new com.android.server.pm.PackageManagerException;

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-28, $r36);

        throw $r35;

     label66:
        $i4 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        if $i4 != 2000 goto label67;

        z43 = 1;

        goto label68;

     label67:
        z43 = 0;

     label68:
        if z43 == 0 goto label69;

        $z6 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isIncrementalInstallation()>();

        if $z6 == 0 goto label69;

        $r29 = r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages>;

        if $r29 == null goto label69;

        $z7 = r161.<android.content.pm.PackageParser$ApkLite: boolean debuggable>;

        if $z7 != 0 goto label69;

        $z8 = r161.<android.content.pm.PackageParser$ApkLite: boolean profilableByShell>;

        if $z8 != 0 goto label69;

        $r30 = r0.<com.android.server.pm.PackageInstallerSession: android.os.incremental.IncrementalFileStorages mIncrementalFileStorages>;

        virtualinvoke $r30.<android.os.incremental.IncrementalFileStorages: void disableReadLogs()>();

     label69:
        return;

     label70:
        $r21 = new com.android.server.pm.PackageManagerException;

        $r22 = interfaceinvoke r181.<android.content.pm.parsing.result.ParseResult: java.lang.String getErrorMessage()>();

        $r23 = interfaceinvoke r181.<android.content.pm.parsing.result.ParseResult: java.lang.Exception getException()>();

        specialinvoke $r21.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-110, $r22, $r23);

        throw $r21;

     label71:
        $r14 = new com.android.server.pm.PackageManagerException;

        $r15 = interfaceinvoke r179.<android.content.pm.parsing.result.ParseResult: java.lang.String getErrorMessage()>();

        $r16 = interfaceinvoke r179.<android.content.pm.parsing.result.ParseResult: java.lang.Exception getException()>();

        specialinvoke $r14.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String,java.lang.Throwable)>(-110, $r15, $r16);

        throw $r14;

        catch android.content.pm.PackageParser$PackageParserException from label25 to label26 with label27;
        catch java.io.IOException from label48 to label49 with label52;
    }

    private static void writeAutoRevokePermissionsMode(org.xmlpull.v1.XmlSerializer, int) throws java.io.IOException
    {
        org.xmlpull.v1.XmlSerializer r0;
        int i0;

        r0 := @parameter0: org.xmlpull.v1.XmlSerializer;

        i0 := @parameter1: int;

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "auto-revoke-permissions-mode");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r0, "mode", i0);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "auto-revoke-permissions-mode");

        return;
    }

    private static void writeGrantedRuntimePermissionsLocked(org.xmlpull.v1.XmlSerializer, java.lang.String[]) throws java.io.IOException
    {
        org.xmlpull.v1.XmlSerializer r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;

        r0 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r1 := @parameter1: java.lang.String[];

        if r1 == null goto label2;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "granted-runtime-permission");

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r0, "name", r2);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "granted-runtime-permission");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void writeWhitelistedRestrictedPermissionsLocked(org.xmlpull.v1.XmlSerializer, java.util.List) throws java.io.IOException
    {
        org.xmlpull.v1.XmlSerializer r0;
        java.util.List r1;
        int i0, i1;
        java.lang.Object $r3;
        java.lang.CharSequence $r4;

        r0 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r1 := @parameter1: java.util.List;

        if r1 == null goto label2;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "whitelisted-restricted-permission");

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (java.lang.CharSequence) $r3;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r0, "name", $r4);

        interfaceinvoke r0.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "whitelisted-restricted-permission");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void abandon()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8;
        android.content.pm.PackageInstaller$SessionParams $r9, $r10;
        com.android.server.pm.StagingManager $r11;
        com.android.server.pm.PackageInstallerService$InternalCallback $r12;
        java.lang.Throwable $r13;
        java.util.List r14;
        java.lang.Object r15;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z0 != 0 goto label16;

        r14 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getChildSessionsNotLocked()>();

        r15 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r15;

     label01:
        $r9 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z1 = $r9.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z1 == 0 goto label03;

        $z5 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z5 == 0 goto label03;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootOrSystemLocked()>();

     label02:
        goto label04;

     label03:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

     label04:
        $z6 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z6 == 0 goto label06;

        exitmonitor r15;

     label05:
        return;

     label06:
        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        if $z2 == 0 goto label09;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z3 = $r10.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z3 == 0 goto label09;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed> = 1;

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.StagingManager mStagingManager>;

        $z4 = virtualinvoke $r11.<com.android.server.pm.StagingManager: boolean abortCommittedSessionLocked(com.android.server.pm.PackageInstallerSession)>(r0);

        if $z4 != 0 goto label08;

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r12.<com.android.server.pm.PackageInstallerService$InternalCallback: void onStagedSessionChanged(com.android.server.pm.PackageInstallerSession)>(r0);

        exitmonitor r15;

     label07:
        return;

     label08:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void cleanStageDir(java.util.List)>(r14);

     label09:
        $z7 = r0.<com.android.server.pm.PackageInstallerSession: boolean mRelinquished>;

        if $z7 == 0 goto label11;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", "Ignoring abandon after commit relinquished control");

        exitmonitor r15;

     label10:
        return;

     label11:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        exitmonitor r15;

     label12:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(-115, "Session was abandoned", null);

        return;

     label13:
        $r13 := @caughtexception;

     label14:
        exitmonitor r15;

     label15:
        throw $r13;

     label16:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a child of multi-package session ");

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and may not be abandoned directly.");

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void addChildSessionId(int)
    {
        com.android.server.pm.PackageInstallerSession r0, r7;
        int i0, $i1, $i2, $i3, $i4;
        com.android.server.pm.PackageSessionProvider $r1;
        boolean $z0, $z1, $z2;
        android.util.SparseIntArray $r5;
        java.lang.Throwable $r6;
        java.lang.Object r8;
        java.lang.StringBuilder $r10;
        java.lang.IllegalStateException $r12;
        java.lang.String $r13;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider>;

        r7 = interfaceinvoke $r1.<com.android.server.pm.PackageSessionProvider: com.android.server.pm.PackageInstallerSession getSession(int)>(i0);

        if r7 == null goto label9;

        $z0 = virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z0 == 0 goto label1;

        $i4 = r7.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        if $i4 != $i3 goto label9;

     label1:
        $z1 = r7.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        if $z1 != 0 goto label9;

        $z2 = r7.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z2 != 0 goto label9;

        r8 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r8;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealedLocked(java.lang.String)>("addChildSessionId");

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        $i1 = virtualinvoke $r5.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

        if $i1 < 0 goto label4;

        exitmonitor r8;

     label3:
        return;

     label4:
        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r7.<com.android.server.pm.PackageInstallerSession: void setParentSessionId(int)>($i2);

        virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: void addChildSessionIdInternal(int)>(i0);

        exitmonitor r8;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r8;

     label8:
        throw $r6;

     label9:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add child session ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as it does not exist or is in an invalid state.");

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void addChildSessionIdInternal(int)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(i0, 0);

        return;
    }

    public void addClientProgress(float)
    {
        com.android.server.pm.PackageInstallerSession r0;
        float f0, $f1, $f2;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        f0 := @parameter0: float;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        $f1 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $f2 = $f1 + f0;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void setClientProgressLocked(float)>($f2);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void addFile(int, java.lang.String, long, byte[], byte[])
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, i2;
        long l1;
        java.lang.Object r1;
        android.util.ArraySet r2, $r17;
        com.android.server.pm.PackageInstallerSession$FileEntry r3;
        android.content.pm.InstallationFile r4;
        android.content.Context $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r12, $r21, r32;
        java.lang.IllegalArgumentException $r10, $r15, $r24, r31;
        java.lang.String $r11, $r16, $r20, $r25, r27;
        java.lang.Throwable $r26;
        byte[] r28, r29;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r27 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        r28 := @parameter3: byte[];

        r29 := @parameter4: byte[];

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permission.USE_INSTALLER_V2", null);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z0 == 0 goto label11;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isStreamingInstallation()>();

        if $z1 == 0 goto label02;

        if i0 != 0 goto label01;

        goto label02;

     label01:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-incremental installation only supports /data/app placement: ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label02:
        if r28 == null goto label10;

        $z2 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r27);

        if $z2 == 0 goto label09;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealedLocked(java.lang.String)>("addFile");

        r2 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        r3 = new com.android.server.pm.PackageInstallerSession$FileEntry;

        $r17 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        i2 = virtualinvoke $r17.<android.util.ArraySet: int size()>();

        r4 = new android.content.pm.InstallationFile;

        specialinvoke r4.<android.content.pm.InstallationFile: void <init>(int,java.lang.String,long,byte[],byte[])>(i0, r27, l1, r28, r29);

        specialinvoke r3.<com.android.server.pm.PackageInstallerSession$FileEntry: void <init>(int,android.content.pm.InstallationFile)>(i2, r4);

        $z3 = virtualinvoke r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r3);

        if $z3 == 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        r31 = new java.lang.IllegalArgumentException;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File already added: ");

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r20 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw r31;

     label06:
        $r26 := @caughtexception;

     label07:
        exitmonitor r1;

     label08:
        throw $r26;

     label09:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid name: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label10:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DataLoader installation requires valid metadata: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label11:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot add files to non-data loader installation session.");

        throw $r6;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void close()
    {
        com.android.server.pm.PackageInstallerSession r0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void closeInternal(boolean)>(1);

        return;
    }

    public void commit(android.content.IntentSender, boolean)
    {
        com.android.server.pm.PackageInstallerSession r0, $r15;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        int i0, $i1, $i2, $i3, i4;
        java.lang.StringBuilder $r1;
        java.lang.IllegalStateException $r7;
        java.lang.String $r8;
        com.android.server.pm.PackageInstallerSession$ChildStatusIntentReceiver $r9;
        android.util.SparseIntArray $r10, $r11, $r12, $r13;
        com.android.server.pm.PackageSessionProvider $r14;
        android.content.IntentSender r16, r17;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r16 := @parameter0: android.content.IntentSender;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean hasParentSessionId()>();

        if $z1 != 0 goto label6;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean markAsSealed(android.content.IntentSender,boolean)>(r16, z0);

        if $z2 != 0 goto label1;

        return;

     label1:
        $z3 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isMultiPackage()>();

        if $z3 == 0 goto label5;

        $r9 = new com.android.server.pm.PackageInstallerSession$ChildStatusIntentReceiver;

        $r10 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        $r11 = virtualinvoke $r10.<android.util.SparseIntArray: android.util.SparseIntArray clone()>();

        specialinvoke $r9.<com.android.server.pm.PackageInstallerSession$ChildStatusIntentReceiver: void <init>(com.android.server.pm.PackageInstallerSession,android.util.SparseIntArray,android.content.IntentSender,com.android.server.pm.PackageInstallerSession$1)>(r0, $r11, r16, null);

        r17 = virtualinvoke $r9.<com.android.server.pm.PackageInstallerSession$ChildStatusIntentReceiver: android.content.IntentSender getIntentSender()>();

        z5 = 0;

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        $i3 = virtualinvoke $r12.<android.util.SparseIntArray: int size()>();

        i4 = $i3 - 1;

     label2:
        if i4 < 0 goto label4;

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        i0 = virtualinvoke $r13.<android.util.SparseIntArray: int keyAt(int)>(i4);

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider>;

        $r15 = interfaceinvoke $r14.<com.android.server.pm.PackageSessionProvider: com.android.server.pm.PackageInstallerSession getSession(int)>(i0);

        $z4 = specialinvoke $r15.<com.android.server.pm.PackageInstallerSession: boolean markAsSealed(android.content.IntentSender,boolean)>(r17, z0);

        if $z4 != 0 goto label3;

        z5 = 1;

     label3:
        i4 = i4 + -1;

        goto label2;

     label4:
        if z5 == 0 goto label5;

        return;

     label5:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchStreamValidateAndCommit()>();

        return;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session ");

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a child of multi-package session ");

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and may not be committed directly.");

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.internal.util.IndentingPrintWriter r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r3 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dumpLocked(com.android.internal.util.IndentingPrintWriter)>(r3);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.PackageInstaller$SessionInfo generateInfoForCaller(boolean, int)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1;
        int i0;
        android.content.pm.PackageInstaller$SessionInfo $r1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean shouldScrubData(int)>(i0);

        $r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoInternal(boolean,boolean)>(z0, $z1);

        return $r1;
    }

    public android.content.pm.PackageInstaller$SessionInfo generateInfoScrubbed(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0;
        android.content.pm.PackageInstaller$SessionInfo $r1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfoInternal(boolean,boolean)>(z0, 1);

        return $r1;
    }

    public int[] getChildSessionIds()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int[] r1, $r3;
        android.util.SparseIntArray $r2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        r1 = virtualinvoke $r2.<android.util.SparseIntArray: int[] copyKeys()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = <com.android.server.pm.PackageInstallerSession: int[] EMPTY_CHILD_SESSION_ARRAY>;

        return $r3;
    }

    public android.content.pm.DataLoaderParamsParcel getDataLoaderParams()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.Context r1;
        android.content.pm.PackageInstaller$SessionParams $r2, $r4;
        android.content.pm.DataLoaderParams $r3, $r5;
        android.content.pm.DataLoaderParamsParcel r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        r6 = null;

        virtualinvoke r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permission.USE_INSTALLER_V2", null);

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r3 = $r2.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r5 = $r4.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        r6 = virtualinvoke $r5.<android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParamsParcel getData()>();

     label1:
        return r6;
    }

    com.android.server.pm.InstallSource getInstallSource()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        com.android.server.pm.InstallSource r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getInstallerPackageName()
    {
        com.android.server.pm.PackageInstallerSession r0;
        com.android.server.pm.InstallSource $r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource getInstallSource()>();

        $r2 = $r1.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        return $r2;
    }

    public int getInstallerUid()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        int i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String[] getNames()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String[] r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotCommittedOrDestroyedLocked(java.lang.String)>("getNames");

        r3 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.lang.String[] getNamesLocked()>();

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.lang.String getPackageName()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getParentSessionId()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int $i0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        return $i0;
    }

    int getStagedSessionErrorCode()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int $i0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode>;

        return $i0;
    }

    java.lang.String getStagedSessionErrorMessage()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage>;

        return $r1;
    }

    public long getUpdatedMillis()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        long l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        l0 = r0.<com.android.server.pm.PackageInstallerSession: long updatedMillis>;

        exitmonitor r1;

     label2:
        return l0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean hasParentSessionId()
    {
        com.android.server.pm.PackageInstallerSession r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isCommitted()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mCommitted>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isDestroyed()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isMultiPackage()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = $r1.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        return $z0;
    }

    public boolean isPrepared()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isSealed()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isStaged()
    {
        com.android.server.pm.PackageInstallerSession r0;
        android.content.pm.PackageInstaller$SessionParams $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r1 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = $r1.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        return $z0;
    }

    public boolean isStagedAndInTerminalState()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        android.content.pm.PackageInstaller$SessionParams $r3;
        boolean $z0, $z1, $z2, z3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = $r3.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z0 == 0 goto label3;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied>;

        if $z1 != 0 goto label2;

        $z2 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed>;

        if $z2 == 0 goto label3;

     label2:
        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z3;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean isStagedSessionApplied()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied>;

        return $z0;
    }

    boolean isStagedSessionFailed()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed>;

        return $z0;
    }

    boolean isStagedSessionReady()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady>;

        return $z0;
    }

    public void lambda$doWriteInternal$0$PackageInstallerSession(android.system.Int64Ref, long)
    {
        com.android.server.pm.PackageInstallerSession r0;
        long l0, l1, $l2, $l4, $l5;
        android.content.pm.PackageInstaller$SessionParams $r2, $r3;
        byte $b3;
        float $f0, $f1, $f2, $f3, $f4;
        java.lang.Throwable $r4;
        android.system.Int64Ref r5;
        java.lang.Object r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r5 := @parameter0: android.system.Int64Ref;

        l0 := @parameter1: long;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l2 = $r2.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label6;

        l1 = r5.<android.system.Int64Ref: long value>;

        r5.<android.system.Int64Ref: long value> = l0;

        r6 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r6;

     label1:
        $f3 = r0.<com.android.server.pm.PackageInstallerSession: float mClientProgress>;

        $l4 = l0 - l1;

        $f1 = (float) $l4;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l5 = $r3.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $f0 = (float) $l5;

        $f2 = $f1 / $f0;

        $f4 = $f3 + $f2;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void setClientProgressLocked(float)>($f4);

        exitmonitor r6;

     label2:
        goto label6;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r6;

     label5:
        throw $r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void markUpdated()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        long $l0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.server.pm.PackageInstallerSession: long updatedMillis> = $l0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void onAfterSessionRead()
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean $z0, $z1, $z2;
        com.android.server.pm.PackageManagerException $r1;
        java.lang.Throwable $r2, $r3;
        java.lang.Object r4, r6;
        java.util.List r5;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r4 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r4;

     label01:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mShouldBeSealed>;

        if $z0 == 0 goto label14;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isStagedAndInTerminalState()>();

        if $z1 == 0 goto label03;

     label02:
        goto label14;

     label03:
        exitmonitor r4;

     label04:
        r5 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getChildSessionsNotLocked()>();

        r6 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r6;

     label05:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void sealLocked(java.util.List)>(r5);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isApexInstallation()>();

        if $z2 == 0 goto label06;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void validateApexInstallLocked()>();

     label06:
        goto label10;

     label07:
        $r2 := @caughtexception;

        goto label12;

     label08:
        $r1 := @caughtexception;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstallerSession", "Package not valid", $r1);

     label10:
        exitmonitor r6;

     label11:
        return;

     label12:
        exitmonitor r6;

     label13:
        throw $r2;

     label14:
        exitmonitor r4;

     label15:
        return;

     label16:
        $r3 := @caughtexception;

     label17:
        exitmonitor r4;

     label18:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch com.android.server.pm.PackageManagerException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label12 to label13 with label07;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void open() throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean z0, $z1, $z2;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;
        com.android.server.pm.PackageInstallerService$InternalCallback $r3, $r7;
        java.io.File $r4, $r6;
        android.content.pm.PackageInstaller$SessionParams $r5;
        java.lang.Throwable $r8;
        java.lang.IllegalArgumentException r9;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: java.util.concurrent.atomic.AtomicInteger mActiveCount>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        if $i0 != 0 goto label01;

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r7.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionActiveChanged(com.android.server.pm.PackageInstallerSession,boolean)>(r0, 1);

     label01:
        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared>;

        if $z1 != 0 goto label08;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r4 == null goto label04;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        staticinvoke <com.android.server.pm.PackageInstallerService: void prepareStageDir(java.io.File)>($r6);

     label03:
        goto label05;

     label04:
        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z2 = $r5.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        if $z2 == 0 goto label07;

     label05:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPrepared> = 1;

     label06:
        goto label08;

     label07:
        r9 = new java.lang.IllegalArgumentException;

        specialinvoke r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("stageDir must be set");

        throw r9;

     label08:
        exitmonitor r1;

     label09:
        if z0 != 0 goto label10;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r3.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionPrepared(com.android.server.pm.PackageInstallerSession)>(r0);

     label10:
        return;

     label11:
        $r8 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.os.ParcelFileDescriptor openRead(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r3, $r5;
        java.lang.RuntimeException $r4;
        java.lang.String r6;
        android.os.ParcelFileDescriptor r7;
        java.lang.IllegalStateException r10;
        java.io.IOException r11;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r6 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z0 != 0 goto label10;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotCommittedOrDestroyedLocked(java.lang.String)>("openRead");

     label02:
        r7 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor openReadInternalLocked(java.lang.String)>(r6);

     label03:
        exitmonitor r1;

     label04:
        return r7;

     label05:
        $r3 := @caughtexception;

     label06:
        r11 = (java.io.IOException) $r3;

        $r4 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r11);

        throw $r4;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r5;

     label10:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot read regular files in a data loader installation session.");

        throw r10;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public android.os.ParcelFileDescriptor openWrite(java.lang.String, long, long)
    {
        com.android.server.pm.PackageInstallerSession r0;
        long l0, l1;
        java.lang.Throwable $r1;
        java.lang.RuntimeException $r2;
        java.lang.String r3;
        android.os.ParcelFileDescriptor r4;
        java.io.IOException r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r3 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCanWrite(boolean)>(0);

     label1:
        r4 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor doWriteInternal(java.lang.String,long,long,android.os.ParcelFileDescriptor)>(r3, l0, l1, null);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        r6 = (java.io.IOException) $r1;

        $r2 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r6);

        throw $r2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void removeChildSessionId(int)
    {
        com.android.server.pm.PackageInstallerSession r0, r6;
        java.lang.Object r1;
        com.android.server.pm.PackageSessionProvider $r2;
        android.util.SparseIntArray $r3, $r4;
        java.lang.Throwable $r5;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageSessionProvider mSessionProvider>;

        r6 = interfaceinvoke $r2.<com.android.server.pm.PackageSessionProvider: com.android.server.pm.PackageInstallerSession getSession(int)>(i0);

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        i1 = virtualinvoke $r3.<android.util.SparseIntArray: int indexOfKey(int)>(i0);

     label02:
        if r6 == null goto label04;

     label03:
        virtualinvoke r6.<com.android.server.pm.PackageInstallerSession: void setParentSessionId(int)>(-1);

     label04:
        if i1 >= 0 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.util.SparseIntArray mChildSessionIds>;

        virtualinvoke $r4.<android.util.SparseIntArray: void removeAt(int)>(i1);

        exitmonitor r1;

     label08:
        return;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void removeFile(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, i1;
        java.lang.Object r1;
        android.content.pm.InstallationFile r2;
        android.content.Context $r3;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r4, $r7;
        android.content.pm.PackageInstaller$SessionParams $r5;
        java.lang.String $r6, $r9, $r12, r14;
        android.util.ArraySet $r8, r15;
        java.lang.Throwable $r13;
        com.android.server.pm.PackageInstallerSession$FileEntry r16;
        java.lang.IllegalArgumentException r17;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r14 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("com.android.permission.USE_INSTALLER_V2", null);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z0 == 0 goto label8;

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r6 = $r5.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        if $z1 != 0 goto label7;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealedLocked(java.lang.String)>("removeFile");

        r15 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        r16 = new com.android.server.pm.PackageInstallerSession$FileEntry;

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: android.util.ArraySet mFiles>;

        i1 = virtualinvoke $r8.<android.util.ArraySet: int size()>();

        r2 = new android.content.pm.InstallationFile;

        $r9 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.lang.String getRemoveMarkerName(java.lang.String)>(r14);

        specialinvoke r2.<android.content.pm.InstallationFile: void <init>(int,java.lang.String,long,byte[],byte[])>(i0, $r9, -1L, null, null);

        specialinvoke r16.<com.android.server.pm.PackageInstallerSession$FileEntry: void <init>(int,android.content.pm.InstallationFile)>(i1, r2);

        $z2 = virtualinvoke r15.<android.util.ArraySet: boolean add(java.lang.Object)>(r16);

        if $z2 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r17 = new java.lang.IllegalArgumentException;

        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File already removed: ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r12 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw r17;

     label4:
        $r13 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r13;

     label7:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must specify package name to remove a split");

        throw $r7;

     label8:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot add files to non-data loader installation session.");

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void removeSplit(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        android.content.pm.PackageInstaller$SessionParams $r3;
        java.lang.String $r4, r9;
        java.lang.Throwable $r6, $r8;
        java.lang.RuntimeException $r7;
        java.lang.IllegalStateException r12, r13;
        java.io.IOException r14;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r9 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDataLoaderInstallation()>();

        if $z0 != 0 goto label11;

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r4 = $r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 != 0 goto label10;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotCommittedOrDestroyedLocked(java.lang.String)>("removeSplit");

     label02:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void createRemoveSplitMarkerLocked(java.lang.String)>(r9);

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r6 := @caughtexception;

     label06:
        r14 = (java.io.IOException) $r6;

        $r7 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r14);

        throw $r7;

     label07:
        $r8 := @caughtexception;

     label08:
        exitmonitor r1;

     label09:
        throw $r8;

     label10:
        r12 = new java.lang.IllegalStateException;

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must specify package name to remove a split");

        throw r12;

     label11:
        r13 = new java.lang.IllegalStateException;

        specialinvoke r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot remove splits in a data loader installation session.");

        throw r13;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void setClientProgress(float)
    {
        com.android.server.pm.PackageInstallerSession r0;
        float f0;
        java.lang.Object r1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        f0 := @parameter0: float;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void setClientProgressLocked(float)>(f0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setParentSessionId(int)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException r9;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

        if i0 == -1 goto label4;

     label1:
        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        if $i1 != -1 goto label3;

     label2:
        goto label4;

     label3:
        r9 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The parent of ");

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is alreadyset to ");

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r9;

     label4:
        r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId> = i0;

        exitmonitor r1;

     label5:
        return;

     label6:
        $r8 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void setPermissionsResult(boolean)
    {
        com.android.server.pm.PackageInstallerSession r0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.SecurityException $r3;
        android.os.Handler $r4;
        android.os.Message $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.pm.PackageInstallerSession: boolean mSealed>;

        if $z1 == 0 goto label8;

        if z0 == 0 goto label6;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mPermissionsManuallyAccepted> = 1;

        $r4 = r0.<com.android.server.pm.PackageInstallerSession: android.os.Handler mHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

        exitmonitor r1;

     label2:
        goto label7;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

     label6:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void destroyInternal()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void dispatchSessionFinished(int,java.lang.String,android.os.Bundle)>(-115, "User rejected permissions", null);

     label7:
        return;

     label8:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Must be sealed to accept permissions");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setStagedSessionApplied()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;
        java.lang.String $r5;
        com.android.server.pm.PackageInstallerService$InternalCallback $r6;
        java.lang.Throwable $r7;
        java.lang.StringBuilder r8;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied> = 1;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage> = "";

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Marking session ");

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as applied");

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r5);

        exitmonitor r1;

     label4:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void cleanStageDirNotLocked()>();

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r6.<com.android.server.pm.PackageInstallerService$InternalCallback: void onStagedSessionChanged(com.android.server.pm.PackageInstallerSession)>(r0);

        return;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void setStagedSessionFailed(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        boolean $z0;
        java.lang.String $r7, r10;
        com.android.server.pm.PackageInstallerService$InternalCallback $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed> = 1;

        r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode> = i0;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage> = r10;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Marking session ");

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as failed: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageInstallerSession", $r7);

        exitmonitor r1;

     label4:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void cleanStageDirNotLocked()>();

        $r8 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r8.<com.android.server.pm.PackageInstallerService$InternalCallback: void onStagedSessionChanged(com.android.server.pm.PackageInstallerSession)>(r0);

        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void setStagedSessionReady()
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.pm.PackageInstallerService$InternalCallback $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z0 == 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady> = 1;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode> = 0;

        r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage> = "";

        exitmonitor r1;

     label4:
        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r3.<com.android.server.pm.PackageInstallerService$InternalCallback: void onStagedSessionChanged(com.android.server.pm.PackageInstallerSession)>(r0);

        return;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void transfer(java.lang.String)
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.util.List r1;
        int $i0, $i1, $i2, $i3;
        com.android.server.pm.PackageManagerService $r3, $r6;
        android.os.ParcelableException $r4;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.StringBuilder $r7;
        java.lang.SecurityException $r13, $r16, r27;
        java.lang.String $r14, $r18, $r19, r24;
        android.content.pm.PackageInstaller$SessionParams $r15;
        boolean $z0, $z1;
        com.android.server.pm.InstallSource $r17, $r20;
        com.android.server.pm.PackageInstallerService$InternalCallback $r21;
        com.android.server.pm.PackageManagerException $r22;
        java.lang.Throwable $r23;
        android.content.pm.ApplicationInfo r25;
        java.lang.Object r26;
        java.lang.IllegalArgumentException r29;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r24 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r24);

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $i0 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        r25 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r24, 0, $i0);

        if r25 == null goto label13;

        $r6 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageManagerService mPm>;

        $i1 = r25.<android.content.pm.ApplicationInfo: int uid>;

        $i2 = virtualinvoke $r6.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", $i1);

        if $i2 != 0 goto label12;

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z0 = virtualinvoke $r15.<android.content.pm.PackageInstaller$SessionParams: boolean areHiddenOptionsSet()>();

        if $z0 == 0 goto label11;

        r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: java.util.List getChildSessionsNotLocked()>();

        r26 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r26;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCallerIsOwnerOrRootLocked()>();

        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertPreparedAndNotSealedLocked(java.lang.String)>("transfer");

     label02:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void sealLocked(java.util.List)>(r1);

     label03:
        $r19 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mPackageName>;

        $r17 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r18 = $r17.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z1 == 0 goto label05;

        $i3 = r25.<android.content.pm.ApplicationInfo: int uid>;

        r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid> = $i3;

        $r20 = staticinvoke <com.android.server.pm.InstallSource: com.android.server.pm.InstallSource create(java.lang.String,java.lang.String,java.lang.String)>(r24, null, r24);

        r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource> = $r20;

        exitmonitor r26;

     label04:
        $r21 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.PackageInstallerService$InternalCallback mCallback>;

        virtualinvoke $r21.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionSealedBlocking(com.android.server.pm.PackageInstallerSession)>(r0);

        return;

     label05:
        r27 = new java.lang.SecurityException;

        specialinvoke r27.<java.lang.SecurityException: void <init>(java.lang.String)>("Can only transfer sessions that update the original installer");

        throw r27;

     label06:
        $r22 := @caughtexception;

     label07:
        r29 = new java.lang.IllegalArgumentException;

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>("Package is not valid", $r22);

        throw r29;

     label08:
        $r23 := @caughtexception;

     label09:
        exitmonitor r26;

     label10:
        throw $r23;

     label11:
        $r16 = new java.lang.SecurityException;

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>("Can only transfer sessions that use public options");

        throw $r16;

     label12:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destination package ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have the ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission");

        $r13 = new java.lang.SecurityException;

        $r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label13:
        $r4 = new android.os.ParcelableException;

        $r5 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke $r5.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r24);

        specialinvoke $r4.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch com.android.server.pm.PackageManagerException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void write(java.lang.String, long, long, android.os.ParcelFileDescriptor)
    {
        com.android.server.pm.PackageInstallerSession r0;
        long l0, l1;
        android.os.ParcelFileDescriptor r1;
        java.lang.Throwable $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;
        boolean z0;
        java.io.IOException r7;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 := @parameter3: android.os.ParcelFileDescriptor;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: void assertCanWrite(boolean)>(z0);

     label3:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.os.ParcelFileDescriptor doWriteInternal(java.lang.String,long,long,android.os.ParcelFileDescriptor)>(r5, l0, l1, r1);

     label4:
        return;

     label5:
        $r3 := @caughtexception;

        r7 = (java.io.IOException) $r3;

        $r4 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r7);

        throw $r4;

        catch java.io.IOException from label3 to label4 with label5;
    }

    void write(org.xmlpull.v1.XmlSerializer, java.io.File) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerSession r0;
        java.lang.Object r1;
        java.io.File r2, $r9, $r65, r74;
        int i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i22, i23, i24, i25, i26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        com.android.server.pm.InstallSource $r3, $r5, $r7;
        java.lang.String $r4, $r6, $r8, $r10, $r13, $r19, $r21, $r28, $r30, $r42, $r46, $r56, $r60, $r63, $r64, $r66, $r71, $r72;
        long $l4, $l5, $l11, $l17, $l18, $l19, $l21;
        android.content.pm.PackageInstaller$SessionParams $r11, $r12, $r14, $r15, $r16, $r17, $r18, $r20, $r22, $r24, $r25, $r27, $r29, $r31, $r32, $r33, $r35, $r37, $r38, $r40, $r45, $r47, $r50, $r51, $r53, $r57, $r61, $r67;
        android.net.Uri $r23, $r26;
        java.lang.String[] $r34;
        java.util.List $r36;
        android.graphics.Bitmap $r39, $r41, $r49;
        byte[] $r43, $r44;
        byte $b20;
        android.graphics.Bitmap$CompressFormat $r48;
        android.content.pm.DataLoaderParams $r52, $r54, $r58, $r62, r75;
        android.content.ComponentName $r55, $r59;
        java.lang.Throwable $r68, $r69, $r70;
        org.xmlpull.v1.XmlSerializer r73;
        java.io.FileOutputStream r77, r78, r89;
        int[] r84;
        android.content.pm.InstallationFile[] r85;
        android.content.pm.InstallationFile r86;
        java.lang.StringBuilder r88, r90;
        java.io.IOException r91;

        r0 := @this: com.android.server.pm.PackageInstallerSession;

        r73 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r74 := @parameter1: java.io.File;

        r1 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.pm.PackageInstallerSession: boolean mDestroyed>;

        if $z0 == 0 goto label03;

        $r67 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z11 = $r67.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        if $z11 != 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        interfaceinvoke r73.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "session");

        $i1 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "sessionId", $i1);

        $i2 = r0.<com.android.server.pm.PackageInstallerSession: int userId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "userId", $i2);

        $r3 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r4 = $r3.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "installerPackageName", $r4);

        $i3 = r0.<com.android.server.pm.PackageInstallerSession: int mInstallerUid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "installerUid", $i3);

        $r5 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r6 = $r5.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "installInitiatingPackageName", $r6);

        $r7 = r0.<com.android.server.pm.PackageInstallerSession: com.android.server.pm.InstallSource mInstallSource>;

        $r8 = $r7.<com.android.server.pm.InstallSource: java.lang.String originatingPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "installOriginatingPackageName", $r8);

        $l4 = r0.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r73, "createdMillis", $l4);

        $l5 = r0.<com.android.server.pm.PackageInstallerSession: long updatedMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r73, "updatedMillis", $l5);

        $r9 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r9 == null goto label04;

        $r65 = r0.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r66 = virtualinvoke $r65.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "sessionStageDir", $r66);

     label04:
        $r10 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r10 == null goto label05;

        $r64 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "sessionStageCid", $r64);

     label05:
        $z1 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isPrepared()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "prepared", $z1);

        $z2 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isCommitted()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "committed", $z2);

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isDestroyed()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "destroyed", $z3);

        $z4 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: boolean isSealed()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "sealed", $z4);

        $r11 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z5 = $r11.<android.content.pm.PackageInstaller$SessionParams: boolean isMultiPackage>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "multiPackage", $z5);

        $r12 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $z6 = $r12.<android.content.pm.PackageInstaller$SessionParams: boolean isStaged>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "stagedSession", $z6);

        $z7 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionReady>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "isReady", $z7);

        $z8 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionFailed>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "isFailed", $z8);

        $z9 = r0.<com.android.server.pm.PackageInstallerSession: boolean mStagedSessionApplied>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "isApplied", $z9);

        $i6 = r0.<com.android.server.pm.PackageInstallerSession: int mStagedSessionErrorCode>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "errorCode", $i6);

        $r13 = r0.<com.android.server.pm.PackageInstallerSession: java.lang.String mStagedSessionErrorMessage>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "errorMessage", $r13);

        $i7 = r0.<com.android.server.pm.PackageInstallerSession: int mParentSessionId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "parentSessionId", $i7);

        $r14 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i8 = $r14.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "mode", $i8);

        $r15 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i9 = $r15.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "installFlags", $i9);

        $r16 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i10 = $r16.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "installLocation", $i10);

        $r17 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l11 = $r17.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r73, "sizeBytes", $l11);

        $r18 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r19 = $r18.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "appPackageName", $r19);

        $r20 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r21 = $r20.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "appLabel", $r21);

        $r22 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r23 = $r22.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeUriAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,android.net.Uri)>(r73, "originatingUri", $r23);

        $r24 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i12 = $r24.<android.content.pm.PackageInstaller$SessionParams: int originatingUid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "originatingUid", $i12);

        $r25 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r26 = $r25.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeUriAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,android.net.Uri)>(r73, "referrerUri", $r26);

        $r27 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r28 = $r27.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "abiOverride", $r28);

        $r29 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r30 = $r29.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "volumeUuid", $r30);

        $r31 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i13 = $r31.<android.content.pm.PackageInstaller$SessionParams: int installReason>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "installRason", $i13);

        $r32 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        r75 = $r32.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

     label06:
        if r75 == null goto label07;

        z12 = 1;

        goto label08;

     label07:
        z12 = 0;

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r73, "isDataLoader", z12);

     label09:
        if z12 == 0 goto label11;

     label10:
        $r51 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r52 = $r51.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $i22 = virtualinvoke $r52.<android.content.pm.DataLoaderParams: int getType()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "dataLoaderType", $i22);

        $r53 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r54 = $r53.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $r55 = virtualinvoke $r54.<android.content.pm.DataLoaderParams: android.content.ComponentName getComponentName()>();

        $r56 = virtualinvoke $r55.<android.content.ComponentName: java.lang.String getPackageName()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "dataLoaderPackageName", $r56);

        $r57 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r58 = $r57.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $r59 = virtualinvoke $r58.<android.content.pm.DataLoaderParams: android.content.ComponentName getComponentName()>();

        $r60 = virtualinvoke $r59.<android.content.ComponentName: java.lang.String getClassName()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "dataLoaderClassName", $r60);

        $r61 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r62 = $r61.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        $r63 = virtualinvoke $r62.<android.content.pm.DataLoaderParams: java.lang.String getArguments()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "dataLoaderArguments", $r63);

     label11:
        $r33 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r34 = $r33.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions>;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void writeGrantedRuntimePermissionsLocked(org.xmlpull.v1.XmlSerializer,java.lang.String[])>(r73, $r34);

        $r35 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r36 = $r35.<android.content.pm.PackageInstaller$SessionParams: java.util.List whitelistedRestrictedPermissions>;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void writeWhitelistedRestrictedPermissionsLocked(org.xmlpull.v1.XmlSerializer,java.util.List)>(r73, $r36);

        $r37 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $i14 = $r37.<android.content.pm.PackageInstaller$SessionParams: int autoRevokePermissionsMode>;

        staticinvoke <com.android.server.pm.PackageInstallerSession: void writeAutoRevokePermissionsMode(org.xmlpull.v1.XmlSerializer,int)>(r73, $i14);

        $i15 = r0.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        r2 = staticinvoke <com.android.server.pm.PackageInstallerSession: java.io.File buildAppIconFile(int,java.io.File)>($i15, r74);

        $r38 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r39 = $r38.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r39 != null goto label13;

        $z10 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z10 == 0 goto label13;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label12:
        goto label43;

     label13:
        $r40 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r41 = $r40.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r41 == null goto label43;

        $l18 = virtualinvoke r2.<java.io.File: long lastModified()>();

        $r45 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l19 = $r45.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified>;

        $b20 = $l18 cmp $l19;

        if $b20 == 0 goto label43;

        r88 = new java.lang.StringBuilder;

        specialinvoke r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Writing changed icon ");

        virtualinvoke r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r46 = virtualinvoke r88.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstallerSession", $r46);

     label14:
        r77 = null;

        r78 = null;

     label15:
        r89 = new java.io.FileOutputStream;

     label16:
        r77 = null;

        r78 = null;

     label17:
        specialinvoke r89.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

     label18:
        r77 = r89;

        r78 = r89;

     label19:
        $r47 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r49 = $r47.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r48 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r49.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r48, 90, r89);

     label20:
        r78 = r89;

     label21:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r78);

     label22:
        goto label39;

     label23:
        $r69 := @caughtexception;

        goto label41;

     label24:
        $r70 := @caughtexception;

        r77 = r78;

     label25:
        r90 = new java.lang.StringBuilder;

     label26:
        r77 = r78;

     label27:
        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

     label28:
        r77 = r78;

     label29:
        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write icon ");

     label30:
        r77 = r78;

     label31:
        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label32:
        r77 = r78;

     label33:
        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label34:
        r77 = r78;

     label35:
        r91 = (java.io.IOException) $r70;

        $r71 = virtualinvoke r91.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

     label36:
        r77 = r78;

     label37:
        $r72 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstallerSession", $r72);

     label38:
        goto label21;

     label39:
        $r50 = r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $l21 = virtualinvoke r2.<java.io.File: long lastModified()>();

        $r50.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = $l21;

     label40:
        goto label43;

     label41:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r77);

     label42:
        throw $r69;

     label43:
        r84 = virtualinvoke r0.<com.android.server.pm.PackageInstallerSession: int[] getChildSessionIds()>();

        i23 = lengthof r84;

     label44:
        i24 = 0;

     label45:
        if i24 >= i23 goto label48;

        i0 = r84[i24];

     label46:
        interfaceinvoke r73.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "childSession");

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "sessionId", i0);

        interfaceinvoke r73.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "childSession");

     label47:
        i24 = i24 + 1;

        goto label45;

     label48:
        specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.InstallationFile[] getInstallationFilesLocked()>();

        r85 = specialinvoke r0.<com.android.server.pm.PackageInstallerSession: android.content.pm.InstallationFile[] getInstallationFilesLocked()>();

        i25 = lengthof r85;

     label49:
        i26 = 0;

     label50:
        if i26 >= i25 goto label53;

        r86 = r85[i26];

     label51:
        interfaceinvoke r73.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "sessionFile");

        $i16 = virtualinvoke r86.<android.content.pm.InstallationFile: int getLocation()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r73, "location", $i16);

        $r42 = virtualinvoke r86.<android.content.pm.InstallationFile: java.lang.String getName()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r73, "name", $r42);

        $l17 = virtualinvoke r86.<android.content.pm.InstallationFile: long getLengthBytes()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r73, "lengthBytes", $l17);

        $r43 = virtualinvoke r86.<android.content.pm.InstallationFile: byte[] getMetadata()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeByteArrayAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,byte[])>(r73, "metadata", $r43);

        $r44 = virtualinvoke r86.<android.content.pm.InstallationFile: byte[] getSignature()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeByteArrayAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,byte[])>(r73, "signature", $r44);

        interfaceinvoke r73.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "sessionFile");

     label52:
        i26 = i26 + 1;

        goto label50;

     label53:
        exitmonitor r1;

     label54:
        interfaceinvoke r73.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "session");

        return;

     label55:
        $r68 := @caughtexception;

     label56:
        exitmonitor r1;

     label57:
        throw $r68;

        catch java.lang.Throwable from label01 to label02 with label55;
        catch java.lang.Throwable from label03 to label04 with label55;
        catch java.lang.Throwable from label04 to label05 with label55;
        catch java.lang.Throwable from label05 to label06 with label55;
        catch java.lang.Throwable from label08 to label09 with label55;
        catch java.lang.Throwable from label10 to label11 with label55;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.lang.Throwable from label13 to label14 with label55;
        catch java.io.IOException from label15 to label16 with label24;
        catch java.lang.Throwable from label15 to label16 with label23;
        catch java.io.IOException from label17 to label18 with label24;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.io.IOException from label19 to label20 with label24;
        catch java.lang.Throwable from label19 to label20 with label23;
        catch java.lang.Throwable from label21 to label22 with label55;
        catch java.lang.Throwable from label25 to label26 with label23;
        catch java.lang.Throwable from label27 to label28 with label23;
        catch java.lang.Throwable from label29 to label30 with label23;
        catch java.lang.Throwable from label31 to label32 with label23;
        catch java.lang.Throwable from label33 to label34 with label23;
        catch java.lang.Throwable from label35 to label36 with label23;
        catch java.lang.Throwable from label37 to label38 with label23;
        catch java.lang.Throwable from label39 to label40 with label55;
        catch java.lang.Throwable from label41 to label42 with label55;
        catch java.lang.Throwable from label42 to label43 with label55;
        catch java.lang.Throwable from label43 to label44 with label55;
        catch java.lang.Throwable from label46 to label47 with label55;
        catch java.lang.Throwable from label48 to label49 with label55;
        catch java.lang.Throwable from label51 to label52 with label55;
        catch java.lang.Throwable from label53 to label54 with label55;
        catch java.lang.Throwable from label56 to label57 with label55;
    }
}
