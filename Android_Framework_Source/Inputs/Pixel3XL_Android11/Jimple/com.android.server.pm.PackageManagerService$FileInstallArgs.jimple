class com.android.server.pm.PackageManagerService$FileInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    private java.io.File codeFile;
    private java.io.File resourceFile;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$InstallParams r2;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$InstallParams)>(r2);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.lang.String r1, r2;
        com.android.server.pm.PackageManagerService$OriginInfo $r3;
        android.content.pm.PackageParser$SigningDetails $r4;
        com.android.server.pm.InstallSource $r5;
        java.io.File $r6, $r7, r10, r11;
        com.android.server.pm.PackageManagerService r8;
        java.lang.String[] r9;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r8 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String[];

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r8;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        $r5 = <com.android.server.pm.InstallSource: com.android.server.pm.InstallSource EMPTY>;

        $r4 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,com.android.server.pm.InstallSource,java.lang.String,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[],java.util.List,int,java.lang.String,int,android.content.pm.PackageParser$SigningDetails,int,boolean,com.android.server.pm.PackageManagerService$MultiPackageInstallParams,int)>($r3, null, null, 0, $r5, null, null, r9, null, null, null, 3, null, 0, $r4, 0, 0, null, 0);

        if r1 == null goto label1;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r1);

        r10 = $r7;

        goto label2;

     label1:
        r10 = null;

     label2:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = r10;

        r11 = null;

        if r2 == null goto label3;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r2);

        r11 = $r6;

     label3:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = r11;

        return;
    }

    private boolean cleanUp()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        boolean $z0, $z1, $z3;
        java.io.File $r1, $r4, $r5, r8, $r11, r12;
        com.android.server.pm.PackageManagerService $r2, $r6, $r10;
        android.os.incremental.IncrementalManager $r3, $r7;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if r8 == null goto label4;

        $z0 = virtualinvoke r8.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        goto label4;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        r9 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager access$3800(com.android.server.pm.PackageManagerService)>($r2);

        if $r3 == null goto label2;

        $z3 = staticinvoke <android.os.incremental.IncrementalManager: boolean isIncrementalPath(java.lang.String)>(r9);

        if $z3 == 0 goto label2;

        $r6 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r7 = staticinvoke <com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager access$3800(com.android.server.pm.PackageManagerService)>($r6);

        virtualinvoke $r7.<android.os.incremental.IncrementalManager: void closeStorage(java.lang.String)>(r9);

     label2:
        $r10 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r11 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        virtualinvoke $r10.<com.android.server.pm.PackageManagerService: void removeCodePathLI(java.io.File)>($r11);

        r12 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        if r12 == null goto label3;

        $r4 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r4, r12);

        if $z1 != 0 goto label3;

        $r5 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        virtualinvoke $r5.<java.io.File: boolean delete()>();

     label3:
        return 1;

     label4:
        return 0;
    }

    private int doCopyApk()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService$OriginInfo $r2, $r6, $r16, $r18;
        boolean $z0, z1, z2;
        int $i0, $i1, i5, i6;
        com.android.server.pm.PackageManagerService $r3;
        java.lang.String $r4, $r8, $r11, $r15, $r25;
        com.android.server.pm.PackageInstallerService $r5;
        java.io.File $r7, $r9, $r10, $r12, $r13, $r14, $r17, $r19, r27;
        java.lang.Throwable $r20, $r21, $r26;
        java.lang.StringBuilder $r22;
        com.android.internal.content.NativeLibraryHelper$Handle r28, r29, r30;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z0 = $r2.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z0 == 0 goto label01;

        $r16 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r17 = $r16.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = $r17;

        $r18 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r19 = $r18.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = $r19;

        return 1;

     label01:
        $i0 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: int installFlags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label03;

     label02:
        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        $r3 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r5 = $r3.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $r4 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String volumeUuid>;

        r27 = virtualinvoke $r5.<com.android.server.pm.PackageInstallerService: java.io.File allocateStageDirLegacy(java.lang.String,boolean)>($r4, z1);

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = r27;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = r27;

     label05:
        $r6 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r7 = $r6.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        i5 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int copyPackage(java.lang.String,java.io.File)>($r8, $r9);

        if i5 == 1 goto label06;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Failed to copy package");

        return i5;

     label06:
        $r10 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getAbsolutePath()>();

        z2 = staticinvoke <android.os.incremental.IncrementalManager: boolean isIncrementalPath(java.lang.String)>($r11);

        $r12 = new java.io.File;

        $r13 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "lib");

        r28 = null;

        r29 = null;

     label07:
        $r14 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        r30 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>($r14);

     label08:
        r29 = r30;

        r28 = r30;

     label09:
        $r15 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String abiOverride>;

        i6 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String,boolean)>(r30, $r12, $r15, z2);

     label10:
        r28 = r30;

     label11:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r28);

        goto label16;

     label12:
        $r20 := @caughtexception;

        goto label17;

     label13:
        $r26 := @caughtexception;

        r29 = r28;

     label14:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Copying native libraries failed", $r26);

     label15:
        i6 = -110;

        goto label11;

     label16:
        return i6;

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r29);

        throw $r20;

     label18:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create copy file: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r25);

        return -4;

        catch java.io.IOException from label01 to label02 with label18;
        catch java.io.IOException from label04 to label05 with label18;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.util.List r1, r6;
        java.io.File r2, $r3;
        boolean $z1;
        android.content.pm.PackageParser$PackageLite $r4;
        android.content.pm.PackageParser$PackageParserException $r5;
        com.android.server.pm.PackageManagerService $r8;
        java.lang.String[] $r9;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        r6 = r1;

        if r2 == null goto label4;

        r6 = r1;

        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r4 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>($r3, 0);

        r6 = virtualinvoke $r4.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r6 = r1;

     label4:
        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        $r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String[] instructionSets>;

        virtualinvoke $r8.<com.android.server.pm.PackageManagerService: void removeDexFiles(java.util.List,java.lang.String[])>(r6, $r9);

        return;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label3;
    }

    int copyApk()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "copyApk");

     label1:
        i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: int doCopyApk()>();

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return i0;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: void cleanUpResourcesLI()>();

        return 1;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return i0;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return i0;
    }

    boolean doRename(int, com.android.server.pm.parsing.pkg.ParsedPackage)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1, r26, r27, r28, $r29;
        com.android.server.pm.PackageManagerService $r2, $r4, $r16;
        java.lang.String $r3, $r6, $r7, $r8, $r10, $r11, $r18, $r24;
        android.os.incremental.IncrementalManager $r5, $r17;
        java.lang.String[] $r13, $r14;
        boolean $z0, $z1, z3;
        java.lang.Throwable $r19, $r20;
        java.lang.StringBuilder $r21;
        int i3;
        com.android.server.pm.parsing.pkg.ParsedPackage r25;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i3 := @parameter0: int;

        r25 := @parameter1: com.android.server.pm.parsing.pkg.ParsedPackage;

        if i3 == 1 goto label01;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        return 0;

     label01:
        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        r26 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        r27 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r3 = interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r28 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File access$3700(com.android.server.pm.PackageManagerService,java.io.File,java.lang.String)>($r2, r26, $r3);

        $r4 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r5 = staticinvoke <com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager access$3800(com.android.server.pm.PackageManagerService)>($r4);

        if $r5 == null goto label02;

        $r18 = virtualinvoke r27.<java.io.File: java.lang.String getAbsolutePath()>();

        $z1 = staticinvoke <android.os.incremental.IncrementalManager: boolean isIncrementalPath(java.lang.String)>($r18);

        if $z1 == 0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        $r29 = virtualinvoke r28.<java.io.File: java.io.File getParentFile()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void makeDirRecursive(java.io.File,int)>($r29, 509);

     label04:
        if z3 == 0 goto label07;

     label05:
        $r16 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r17 = staticinvoke <com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager access$3800(com.android.server.pm.PackageManagerService)>($r16);

        virtualinvoke $r17.<android.os.incremental.IncrementalManager: void renameCodePath(java.io.File,java.io.File)>(r27, r28);

     label06:
        goto label08;

     label07:
        $r6 = virtualinvoke r27.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke r28.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void rename(java.lang.String,java.lang.String)>($r6, $r7);

     label08:
        if z3 != 0 goto label09;

        $z0 = staticinvoke <android.os.SELinux: boolean restoreconRecursive(java.io.File)>(r28);

        if $z0 != 0 goto label09;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Failed to restorecon");

        return 0;

     label09:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = r28;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = r28;

     label10:
        $r8 = virtualinvoke r28.<java.io.File: java.lang.String getCanonicalPath()>();

        interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setCodePath(java.lang.String)>($r8);

     label11:
        $r10 = interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getBaseCodePath()>();

        $r11 = staticinvoke <android.os.FileUtils: java.lang.String rewriteAfterRename(java.io.File,java.io.File,java.lang.String)>(r27, r28, $r10);

        interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setBaseCodePath(java.lang.String)>($r11);

        $r13 = interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String[] getSplitCodePaths()>();

        $r14 = staticinvoke <android.os.FileUtils: java.lang.String[] rewriteAfterRename(java.io.File,java.io.File,java.lang.String[])>(r27, r28, $r13);

        interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSplitCodePaths(java.lang.String[])>($r14);

        return 1;

     label12:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get path: ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r24, $r20);

        return 0;

     label13:
        $r19 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to rename", $r19);

        return 0;

        catch java.io.IOException from label03 to label04 with label13;
        catch android.system.ErrnoException from label03 to label04 with label13;
        catch java.io.IOException from label05 to label06 with label13;
        catch android.system.ErrnoException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch android.system.ErrnoException from label07 to label08 with label13;
        catch java.io.IOException from label10 to label11 with label12;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File r1;
        java.lang.String r2;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File r1;
        java.lang.String r2;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }
}
