abstract class com.android.server.pm.PackageManagerService$InstallArgs extends java.lang.Object
{
    final java.lang.String abiOverride;
    final int autoRevokePermissionsMode;
    final boolean forceQueryableOverride;
    final int installFlags;
    final java.lang.String[] installGrantPermissions;
    final int installReason;
    final com.android.server.pm.InstallSource installSource;
    java.lang.String[] instructionSets;
    final int mDataLoaderType;
    final com.android.server.pm.PackageManagerService$MultiPackageInstallParams mMultiPackageInstallParams;
    final com.android.server.pm.PackageManagerService$MoveInfo move;
    final android.content.pm.IPackageInstallObserver2 observer;
    final com.android.server.pm.PackageManagerService$OriginInfo origin;
    final android.content.pm.PackageParser$SigningDetails signingDetails;
    final int traceCookie;
    final java.lang.String traceMethod;
    final android.os.UserHandle user;
    final java.lang.String volumeUuid;
    final java.util.List whitelistedRestrictedPermissions;

    void <init>(com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        com.android.server.pm.PackageManagerService$InstallParams r1;
        com.android.server.pm.PackageManagerService$OriginInfo $r2;
        com.android.server.pm.PackageManagerService$MoveInfo $r3;
        android.content.pm.IPackageInstallObserver2 $r4;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.pm.InstallSource $r5;
        java.lang.String $r6, $r10, $r13;
        android.os.UserHandle $r7;
        com.android.server.pm.PackageManagerService$MultiPackageInstallParams $r8;
        boolean $z0;
        android.content.pm.PackageParser$SigningDetails $r9;
        java.util.List $r11;
        java.lang.String[] $r12;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$InstallParams;

        $r2 = r1.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r3 = r1.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move>;

        $r4 = r1.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer>;

        $i0 = r1.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r5 = r1.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.InstallSource installSource>;

        $r6 = r1.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String volumeUuid>;

        $r7 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        $r13 = r1.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        $r12 = r1.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String[] grantedRuntimePermissions>;

        $r11 = r1.<com.android.server.pm.PackageManagerService$InstallParams: java.util.List whitelistedRestrictedPermissions>;

        $i4 = r1.<com.android.server.pm.PackageManagerService$InstallParams: int autoRevokePermissionsMode>;

        $r10 = r1.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String traceMethod>;

        $i3 = r1.<com.android.server.pm.PackageManagerService$InstallParams: int traceCookie>;

        $r9 = r1.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $i2 = r1.<com.android.server.pm.PackageManagerService$InstallParams: int installReason>;

        $z0 = r1.<com.android.server.pm.PackageManagerService$InstallParams: boolean forceQueryableOverride>;

        $r8 = r1.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MultiPackageInstallParams mParentInstallParams>;

        $i1 = r1.<com.android.server.pm.PackageManagerService$InstallParams: int mDataLoaderType>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,com.android.server.pm.InstallSource,java.lang.String,android.os.UserHandle,java.lang.String[],java.lang.String,java.lang.String[],java.util.List,int,java.lang.String,int,android.content.pm.PackageParser$SigningDetails,int,boolean,com.android.server.pm.PackageManagerService$MultiPackageInstallParams,int)>($r2, $r3, $r4, $i0, $r5, $r6, $r7, null, $r13, $r12, $r11, $i4, $r10, $i3, $r9, $i2, $z0, $r8, $i1);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService$OriginInfo, com.android.server.pm.PackageManagerService$MoveInfo, android.content.pm.IPackageInstallObserver2, int, com.android.server.pm.InstallSource, java.lang.String, android.os.UserHandle, java.lang.String[], java.lang.String, java.lang.String[], java.util.List, int, java.lang.String, int, android.content.pm.PackageParser$SigningDetails, int, boolean, com.android.server.pm.PackageManagerService$MultiPackageInstallParams, int)
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        com.android.server.pm.PackageManagerService$OriginInfo r1;
        com.android.server.pm.PackageManagerService$MoveInfo r2;
        android.content.pm.IPackageInstallObserver2 r3;
        int i0, i1, i2, i3, i4;
        com.android.server.pm.InstallSource r4, $r15;
        java.lang.String r5, r8, r11;
        android.os.UserHandle r6;
        java.lang.String[] r7, r9;
        java.util.List r10;
        android.content.pm.PackageParser$SigningDetails r12;
        boolean z0;
        com.android.server.pm.PackageManagerService$MultiPackageInstallParams r13;
        java.lang.Object $r14;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$OriginInfo;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$MoveInfo;

        r3 := @parameter2: android.content.pm.IPackageInstallObserver2;

        i0 := @parameter3: int;

        r4 := @parameter4: com.android.server.pm.InstallSource;

        r5 := @parameter5: java.lang.String;

        r6 := @parameter6: android.os.UserHandle;

        r7 := @parameter7: java.lang.String[];

        r8 := @parameter8: java.lang.String;

        r9 := @parameter9: java.lang.String[];

        r10 := @parameter10: java.util.List;

        i1 := @parameter11: int;

        r11 := @parameter12: java.lang.String;

        i2 := @parameter13: int;

        r12 := @parameter14: android.content.pm.PackageParser$SigningDetails;

        i3 := @parameter15: int;

        z0 := @parameter16: boolean;

        r13 := @parameter17: com.android.server.pm.PackageManagerService$MultiPackageInstallParams;

        i4 := @parameter18: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin> = r1;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MoveInfo move> = r2;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags> = i0;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.IPackageInstallObserver2 observer> = r3;

        $r14 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r4);

        $r15 = (com.android.server.pm.InstallSource) $r14;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.InstallSource installSource> = $r15;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String volumeUuid> = r5;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user> = r6;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String[] instructionSets> = r7;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String abiOverride> = r8;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String[] installGrantPermissions> = r9;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.util.List whitelistedRestrictedPermissions> = r10;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: int autoRevokePermissionsMode> = i1;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String traceMethod> = r11;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: int traceCookie> = i2;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.PackageParser$SigningDetails signingDetails> = r12;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: int installReason> = i3;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: boolean forceQueryableOverride> = z0;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MultiPackageInstallParams mMultiPackageInstallParams> = r13;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: int mDataLoaderType> = i4;

        return;
    }

    abstract void cleanUpResourcesLI();

    abstract int copyApk();

    int doPostCopy(int)
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        i0 := @parameter0: int;

        return 1;
    }

    abstract boolean doPostDeleteLI(boolean);

    abstract int doPostInstall(int, int);

    int doPreCopy()
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        return 1;
    }

    abstract int doPreInstall(int);

    abstract boolean doRename(int, com.android.server.pm.parsing.pkg.ParsedPackage);

    abstract java.lang.String getCodePath();

    abstract java.lang.String getResourcePath();

    android.os.UserHandle getUser()
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        android.os.UserHandle $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        return $r1;
    }

    protected boolean isEphemeral()
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $i0 = r0.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
