class com.android.server.pm.PackageManagerService$InstallParams extends com.android.server.pm.PackageManagerService$HandlerParams
{
    final int autoRevokePermissionsMode;
    final boolean forceQueryableOverride;
    final java.lang.String[] grantedRuntimePermissions;
    int installFlags;
    final int installReason;
    final com.android.server.pm.InstallSource installSource;
    private com.android.server.pm.PackageManagerService$InstallArgs mArgs;
    final int mDataLoaderType;
    private boolean mEnableRollbackCompleted;
    private boolean mIntegrityVerificationCompleted;
    com.android.server.pm.PackageManagerService$MultiPackageInstallParams mParentInstallParams;
    int mRet;
    final int mSessionId;
    private boolean mVerificationCompleted;
    final com.android.server.pm.PackageManagerService$MoveInfo move;
    final android.content.pm.IPackageInstallObserver2 observer;
    final com.android.server.pm.PackageManagerService$OriginInfo origin;
    final java.lang.String packageAbiOverride;
    final long requiredInstalledVersionCode;
    final android.content.pm.PackageParser$SigningDetails signingDetails;
    final com.android.server.pm.PackageManagerService this$0;
    final com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo;
    final java.lang.String volumeUuid;
    final java.util.List whitelistedRestrictedPermissions;

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$ActiveInstallSession)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$ActiveInstallSession r2;
        android.content.pm.PackageInstaller$SessionParams r3;
        android.os.UserHandle $r5;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12;
        android.content.pm.DataLoaderParams $r6, $r26;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r11, $r18, $r21, $r22;
        com.android.server.pm.PackageManagerService$VerificationInfo $r12;
        android.net.Uri $r13, $r14;
        java.io.File $r15;
        com.android.server.pm.PackageManagerService$OriginInfo $r16;
        com.android.server.pm.InstallSource $r17, $r20;
        android.content.pm.IPackageInstallObserver2 $r19;
        java.lang.String[] $r23;
        java.util.List $r24;
        android.content.pm.PackageParser$SigningDetails $r25;
        long $l11;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$ActiveInstallSession;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0> = r1;

        $r5 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: android.os.UserHandle getUser()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService$HandlerParams: void <init>(com.android.server.pm.PackageManagerService,android.os.UserHandle)>(r1, $r5);

        r3 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: android.content.pm.PackageInstaller$SessionParams getSessionParams()>();

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$2400()>();

        if $z0 == 0 goto label1;

        $i1 = r3.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i2 = $i1 & 2048;

        if $i2 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ephemeral install of ");

        $r9 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: java.lang.String getPackageName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r11);

     label1:
        $r12 = new com.android.server.pm.PackageManagerService$VerificationInfo;

        $r13 = r3.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri>;

        $r14 = r3.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri>;

        $i4 = r3.<android.content.pm.PackageInstaller$SessionParams: int originatingUid>;

        $i5 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: int getInstallerUid()>();

        specialinvoke $r12.<com.android.server.pm.PackageManagerService$VerificationInfo: void <init>(android.net.Uri,android.net.Uri,int,int)>($r13, $r14, $i4, $i5);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo> = $r12;

        $r15 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: java.io.File getStagedDir()>();

        $r16 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromStagedFile(java.io.File)>($r15);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin> = $r16;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move> = null;

        $r17 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: com.android.server.pm.InstallSource getInstallSource()>();

        $r18 = $r17.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $i6 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: int getInstallerUid()>();

        $i7 = r3.<android.content.pm.PackageInstaller$SessionParams: int installReason>;

        $i8 = staticinvoke <com.android.server.pm.PackageManagerService: int access$2500(com.android.server.pm.PackageManagerService,java.lang.String,int,int)>(r1, $r18, $i6, $i7);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installReason> = $i8;

        $r19 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: android.content.pm.IPackageInstallObserver2 getObserver()>();

        r0.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer> = $r19;

        $i9 = r3.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = $i9;

        $r20 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: com.android.server.pm.InstallSource getInstallSource()>();

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.InstallSource installSource> = $r20;

        $r21 = r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String volumeUuid>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String volumeUuid> = $r21;

        $r22 = r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride> = $r22;

        $r23 = r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String[] grantedRuntimePermissions>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String[] grantedRuntimePermissions> = $r23;

        $r24 = r3.<android.content.pm.PackageInstaller$SessionParams: java.util.List whitelistedRestrictedPermissions>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.util.List whitelistedRestrictedPermissions> = $r24;

        $i10 = r3.<android.content.pm.PackageInstaller$SessionParams: int autoRevokePermissionsMode>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int autoRevokePermissionsMode> = $i10;

        $r25 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        r0.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.PackageParser$SigningDetails signingDetails> = $r25;

        $l11 = r3.<android.content.pm.PackageInstaller$SessionParams: long requiredInstalledVersionCode>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: long requiredInstalledVersionCode> = $l11;

        $z1 = r3.<android.content.pm.PackageInstaller$SessionParams: boolean forceQueryableOverride>;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean forceQueryableOverride> = $z1;

        $r26 = r3.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        if $r26 == null goto label2;

        $r6 = r3.<android.content.pm.PackageInstaller$SessionParams: android.content.pm.DataLoaderParams dataLoaderParams>;

        i12 = virtualinvoke $r6.<android.content.pm.DataLoaderParams: int getType()>();

        goto label3;

     label2:
        i12 = 0;

     label3:
        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mDataLoaderType> = i12;

        $i0 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$ActiveInstallSession: int getSessionId()>();

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mSessionId> = $i0;

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$OriginInfo, com.android.server.pm.PackageManagerService$MoveInfo, android.content.pm.IPackageInstallObserver2, int, com.android.server.pm.InstallSource, java.lang.String, com.android.server.pm.PackageManagerService$VerificationInfo, android.os.UserHandle, java.lang.String, java.lang.String[], java.util.List, int, android.content.pm.PackageParser$SigningDetails, int, long, int)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$OriginInfo r2;
        com.android.server.pm.PackageManagerService$MoveInfo r3;
        android.content.pm.IPackageInstallObserver2 r4;
        int i0, i1, i2, i4;
        com.android.server.pm.InstallSource r5, $r14;
        java.lang.String r6, r9;
        com.android.server.pm.PackageManagerService$VerificationInfo r7;
        android.os.UserHandle r8;
        java.lang.String[] r10;
        java.util.List r11;
        android.content.pm.PackageParser$SigningDetails r12;
        long l3;
        java.lang.Object $r13;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$OriginInfo;

        r3 := @parameter2: com.android.server.pm.PackageManagerService$MoveInfo;

        r4 := @parameter3: android.content.pm.IPackageInstallObserver2;

        i0 := @parameter4: int;

        r5 := @parameter5: com.android.server.pm.InstallSource;

        r6 := @parameter6: java.lang.String;

        r7 := @parameter7: com.android.server.pm.PackageManagerService$VerificationInfo;

        r8 := @parameter8: android.os.UserHandle;

        r9 := @parameter9: java.lang.String;

        r10 := @parameter10: java.lang.String[];

        r11 := @parameter11: java.util.List;

        i1 := @parameter12: int;

        r12 := @parameter13: android.content.pm.PackageParser$SigningDetails;

        i2 := @parameter14: int;

        l3 := @parameter15: long;

        i4 := @parameter16: int;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$HandlerParams: void <init>(com.android.server.pm.PackageManagerService,android.os.UserHandle)>(r1, r8);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin> = r2;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move> = r3;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer> = r4;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = i0;

        $r13 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r14 = (com.android.server.pm.InstallSource) $r13;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.InstallSource installSource> = $r14;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String volumeUuid> = r6;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo> = r7;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride> = r9;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String[] grantedRuntimePermissions> = r10;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: java.util.List whitelistedRestrictedPermissions> = r11;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int autoRevokePermissionsMode> = i1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.PackageParser$SigningDetails signingDetails> = r12;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installReason> = i2;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: long requiredInstalledVersionCode> = l3;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean forceQueryableOverride> = 0;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mDataLoaderType> = i4;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mSessionId> = -1;

        return;
    }

    static com.android.server.pm.PackageManagerService$InstallArgs access$700(com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        com.android.server.pm.PackageManagerService$InstallArgs $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$InstallParams;

        $r1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$InstallArgs mArgs>;

        return $r1;
    }

    private int installLocationPolicy(android.content.pm.PackageInfoLite)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r7, $r20;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r29;
        boolean z0, $z1, $z2, $z3;
        com.android.server.pm.PackageManagerService $r4, $r5, $r17;
        android.util.ArrayMap $r6, $r19;
        long $l5, $l6, $l8, $l9, $l11, $l14;
        byte $b7, $b15;
        java.lang.String $r12, $r16, $r24, $r26, r28;
        com.android.server.pm.Settings $r18;
        java.lang.Throwable $r21;
        com.android.server.pm.PackageManagerException $r22;
        android.content.pm.PackageInfoLite r27;
        com.android.server.pm.PackageSetting r30;
        java.lang.StringBuilder r31, r32, r34;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        r27 := @parameter0: android.content.pm.PackageInfoLite;

        r28 = r27.<android.content.pm.PackageInfoLite: java.lang.String packageName>;

        i0 = r27.<android.content.pm.PackageInfoLite: int installLocation>;

        $r4 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        r1 = $r4.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r5 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r6 = $r5.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r28);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r7;

     label02:
        r29 = r2;

        if r2 != null goto label06;

     label03:
        $r17 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r18 = $r17.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r19 = $r18.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r20 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r28);

        r30 = (com.android.server.pm.PackageSetting) $r20;

     label04:
        r29 = r2;

        if r30 == null goto label06;

     label05:
        r29 = r30.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label06:
        $l14 = r0.<com.android.server.pm.PackageManagerService$InstallParams: long requiredInstalledVersionCode>;

        $b15 = $l14 cmp -1L;

        if $b15 == 0 goto label12;

     label07:
        if r29 != null goto label10;

     label08:
        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required installed version code was ");

        $l11 = r0.<com.android.server.pm.PackageManagerService$InstallParams: long requiredInstalledVersionCode>;

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but package is not installed");

        $r16 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r16);

        exitmonitor r1;

     label09:
        return -8;

     label10:
        $l5 = interfaceinvoke r29.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        $l6 = r0.<com.android.server.pm.PackageManagerService$InstallParams: long requiredInstalledVersionCode>;

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label12;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Required installed version code was ");

        $l8 = r0.<com.android.server.pm.PackageManagerService$InstallParams: long requiredInstalledVersionCode>;

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but actual installed version is ");

        $l9 = interfaceinvoke r29.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r12 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r12);

        exitmonitor r1;

     label11:
        return -8;

     label12:
        if r29 == null goto label20;

     label13:
        $i4 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $z3 = interfaceinvoke r29.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isDebuggable()>();

        z0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isDowngradePermitted(int,boolean)>($i4, $z3);

     label14:
        if z0 != 0 goto label20;

     label15:
        staticinvoke <com.android.server.pm.PackageManagerService: void access$2600(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.PackageInfoLite)>(r29, r27);

     label16:
        goto label20;

     label17:
        $r22 := @caughtexception;

     label18:
        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Downgrade detected: ");

        $r24 = virtualinvoke $r22.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r26);

        exitmonitor r1;

     label19:
        return -7;

     label20:
        if r2 == null goto label33;

     label21:
        $i2 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label31;

        $z1 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 == 0 goto label23;

        exitmonitor r1;

     label22:
        return 1;

     label23:
        if i0 != 1 goto label26;

     label24:
        exitmonitor r1;

     label25:
        return 1;

     label26:
        if i0 != 2 goto label27;

        goto label33;

     label27:
        $z2 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z2 == 0 goto label29;

        exitmonitor r1;

     label28:
        return 2;

     label29:
        exitmonitor r1;

     label30:
        return 1;

     label31:
        exitmonitor r1;

     label32:
        return -4;

     label33:
        exitmonitor r1;

     label34:
        $i1 = r27.<android.content.pm.PackageInfoLite: int recommendedInstallLocation>;

        return $i1;

     label35:
        $r21 := @caughtexception;

     label36:
        exitmonitor r1;

     label37:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label35;
        catch java.lang.Throwable from label03 to label04 with label35;
        catch java.lang.Throwable from label05 to label06 with label35;
        catch java.lang.Throwable from label06 to label07 with label35;
        catch java.lang.Throwable from label08 to label09 with label35;
        catch java.lang.Throwable from label10 to label11 with label35;
        catch java.lang.Throwable from label13 to label14 with label35;
        catch com.android.server.pm.PackageManagerException from label15 to label16 with label17;
        catch java.lang.Throwable from label15 to label16 with label35;
        catch java.lang.Throwable from label18 to label19 with label35;
        catch java.lang.Throwable from label21 to label22 with label35;
        catch java.lang.Throwable from label24 to label25 with label35;
        catch java.lang.Throwable from label27 to label28 with label35;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label31 to label32 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
    }

    void handleIntegrityVerificationFinished()
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        $z0 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mIntegrityVerificationCompleted>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mIntegrityVerificationCompleted> = 1;

        $z1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mVerificationCompleted>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: void handleReturnCode()>();

     label1:
        return;
    }

    void handleReturnCode()
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.pm.PackageManagerService$InstallArgs $r1, $r3;
        com.android.server.pm.PackageManagerService $r2;
        android.content.pm.parsing.result.ParseTypeImpl $r4;
        com.android.server.pm._$$Lambda$PackageManagerService$InstallParams$4lBKoJrqMGZeOT3xLNbomU0eAmc $r5;
        android.content.pm.parsing.result.ParseInput $r6;
        com.android.server.pm.PackageManagerService$OriginInfo $r7, $r13;
        java.io.File $r8, $r14;
        java.lang.Object $r9;
        android.content.pm.PackageParser$PackageLite $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, $r17, r20;
        java.lang.Exception $r18;
        android.os.RemoteException $r19;
        android.content.pm.parsing.result.ParseResult r21;
        android.content.pm.IPackageInstallObserver2 r23;
        android.os.Bundle r24;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        $z0 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mVerificationCompleted>;

        if $z0 == 0 goto label8;

        $z1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mIntegrityVerificationCompleted>;

        if $z1 == 0 goto label8;

        $z2 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mEnableRollbackCompleted>;

        if $z2 == 0 goto label8;

        $i1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i2 = $i1 & 8388608;

        if $i2 == 0 goto label6;

        r20 = "";

        $r4 = new android.content.pm.parsing.result.ParseTypeImpl;

        $r5 = new com.android.server.pm._$$Lambda$PackageManagerService$InstallParams$4lBKoJrqMGZeOT3xLNbomU0eAmc;

        specialinvoke $r5.<com.android.server.pm._$$Lambda$PackageManagerService$InstallParams$4lBKoJrqMGZeOT3xLNbomU0eAmc: void <init>(com.android.server.pm.PackageManagerService$InstallParams)>(r0);

        specialinvoke $r4.<android.content.pm.parsing.result.ParseTypeImpl: void <init>(android.content.pm.parsing.result.ParseInput$Callback)>($r5);

        $r6 = virtualinvoke $r4.<android.content.pm.parsing.result.ParseTypeImpl: android.content.pm.parsing.result.ParseInput reset()>();

        $r7 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r8 = $r7.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        r21 = staticinvoke <android.content.pm.parsing.ApkLiteParseUtils: android.content.pm.parsing.result.ParseResult parsePackageLite(android.content.pm.parsing.result.ParseInput,java.io.File,int)>($r6, $r8, 0);

        $z3 = interfaceinvoke r21.<android.content.pm.parsing.result.ParseResult: boolean isError()>();

        if $z3 == 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t parse package at ");

        $r13 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r14 = $r13.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r15 = virtualinvoke $r14.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = interfaceinvoke r21.<android.content.pm.parsing.result.ParseResult: java.lang.Exception getException()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r17, $r18);

        goto label2;

     label1:
        $r9 = interfaceinvoke r21.<android.content.pm.parsing.result.ParseResult: java.lang.Object getResult()>();

        $r10 = (android.content.pm.PackageParser$PackageLite) $r9;

        r20 = $r10.<android.content.pm.PackageParser$PackageLite: java.lang.String packageName>;

     label2:
        r23 = r0.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer>;

        i0 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet>;

        r24 = new android.os.Bundle;

        specialinvoke r24.<android.os.Bundle: void <init>()>();

        interfaceinvoke r23.<android.content.pm.IPackageInstallObserver2: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>(r20, i0, "Dry run", r24);

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Observer no longer exists.");

     label5:
        return;

     label6:
        $i3 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet>;

        if $i3 != 1 goto label7;

        $r3 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$InstallArgs mArgs>;

        $i5 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService$InstallArgs: int copyApk()>();

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet> = $i5;

     label7:
        $r2 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$InstallArgs mArgs>;

        $i4 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet>;

        staticinvoke <com.android.server.pm.PackageManagerService: void access$3600(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,int)>($r2, $r1, $i4);

     label8:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    void handleRollbackEnabled()
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mEnableRollbackCompleted> = 1;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: void handleReturnCode()>();

        return;
    }

    public void handleStartCopy()
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        android.content.pm.PackageInfoLite r1, r50, r53;
        long l0, l1, $l18;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i19, $i21, $i22, $i25, i26, i27, i28, i29, i30, i31, $i32, $i33, i34;
        com.android.server.pm.PackageManagerService$OriginInfo $r2, $r4, $r9, $r31, $r37, $r45, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, $z7;
        com.android.server.pm.PackageManagerService $r3, $r8, $r10, $r11, $r19, $r24, $r26, $r28, $r34, $r36, $r55;
        java.lang.String $r5, $r6, $r32, $r33, $r38, $r39, $r44;
        android.content.Context $r7, $r21, $r29, $r40;
        android.util.SparseArray $r12, $r25, $r27;
        android.content.Intent $r13;
        com.android.server.pm.PackageManagerService$InstallParams$1 $r20;
        android.os.UserHandle $r22;
        com.android.server.pm.PackageVerificationState $r23;
        java.io.File $r30, $r46;
        byte $b17;
        com.android.server.pm.Installer $r35;
        java.lang.StringBuilder $r41;
        java.lang.IllegalStateException $r47;
        com.android.server.pm.Installer$InstallerException $r48;
        android.os.storage.StorageManager r52;
        com.android.server.pm.PackageManagerService$InstallArgs r56;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        $r2 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z0 = $r2.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z0 == 0 goto label02;

        $r45 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r46 = $r45.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        if $r46 == null goto label01;

        $i21 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i22 = $i21 | 16;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = $i22;

        goto label02;

     label01:
        $r47 = new java.lang.IllegalStateException;

        specialinvoke $r47.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid stage location");

        throw $r47;

     label02:
        $i3 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i4 = $i3 & 16;

        if $i4 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        $i5 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i6 = $i5 & 2048;

        if $i6 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        $r3 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r7 = $r3.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r6 = $r4.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String resolvedPath>;

        $i7 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r5 = r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        r1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: android.content.pm.PackageInfoLite getMinimalPackageInfo(android.content.Context,java.lang.String,int,java.lang.String)>($r7, $r6, $i7, $r5);

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$2400()>();

        if $z1 == 0 goto label07;

        if z6 == 0 goto label07;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pkgLite for install: ");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r44);

     label07:
        r50 = r1;

        $r51 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z7 = $r51.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z7 != 0 goto label12;

        r50 = r1;

        $i16 = r1.<android.content.pm.PackageInfoLite: int recommendedInstallLocation>;

        if $i16 != -1 goto label12;

        $r28 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r29 = $r28.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r52 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r29);

        $r30 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        l0 = virtualinvoke r52.<android.os.storage.StorageManager: long getStorageLowBytes(java.io.File)>($r30);

        $r31 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r33 = $r31.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String resolvedPath>;

        $r32 = r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        l1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: long calculateInstalledSize(java.lang.String,java.lang.String)>($r33, $r32);

        r53 = r1;

        $b17 = l1 cmp 0L;

        if $b17 < 0 goto label11;

     label08:
        $r34 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r35 = $r34.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $l18 = l1 + l0;

        virtualinvoke $r35.<com.android.server.pm.Installer: void freeCache(java.lang.String,long,long,int)>(null, $l18, 0L, 0);

        $r36 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r40 = $r36.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r37 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r39 = $r37.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String resolvedPath>;

        $i19 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r38 = r0.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        r53 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: android.content.pm.PackageInfoLite getMinimalPackageInfo(android.content.Context,java.lang.String,int,java.lang.String)>($r40, $r39, $i19, $r38);

     label09:
        goto label11;

     label10:
        $r48 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to free cache", $r48);

        r53 = r1;

     label11:
        r50 = r53;

        $i25 = r53.<android.content.pm.PackageInfoLite: int recommendedInstallLocation>;

        if $i25 != -6 goto label12;

        r53.<android.content.pm.PackageInfoLite: int recommendedInstallLocation> = -1;

        r50 = r53;

     label12:
        i27 = r50.<android.content.pm.PackageInfoLite: int recommendedInstallLocation>;

        if i27 != -3 goto label13;

        i26 = -19;

        goto label24;

     label13:
        if i27 != -4 goto label14;

        i26 = -1;

        goto label24;

     label14:
        if i27 != -1 goto label15;

        i26 = -4;

        goto label24;

     label15:
        if i27 != -2 goto label16;

        i26 = -2;

        goto label24;

     label16:
        if i27 != -6 goto label17;

        i26 = -3;

        goto label24;

     label17:
        if i27 != -5 goto label18;

        i26 = -20;

        goto label24;

     label18:
        i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: int installLocationPolicy(android.content.pm.PackageInfoLite)>(r50);

        if i2 != -7 goto label19;

        i26 = -25;

        goto label24;

     label19:
        if i2 != -8 goto label20;

        i26 = -121;

        goto label24;

     label20:
        i26 = 1;

        if z5 != 0 goto label24;

        if i2 != 2 goto label21;

        $i14 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i15 = $i14 & -17;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = $i15;

        i26 = 1;

        goto label24;

     label21:
        if i2 != 3 goto label23;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$2400()>();

        if $z4 == 0 goto label22;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "...setting INSTALL_EPHEMERAL install flag");

     label22:
        $i11 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        i28 = $i11 | 2048;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = i28;

        $i12 = i28 & -17;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = $i12;

        i26 = 1;

        goto label24;

     label23:
        $i9 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i10 = $i9 | 16;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags> = $i10;

        i26 = 1;

     label24:
        $r55 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        r56 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2700(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>($r55, r0);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mVerificationCompleted> = 1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mIntegrityVerificationCompleted> = 1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mEnableRollbackCompleted> = 1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$InstallArgs mArgs> = r56;

        i29 = i26;

        if i26 != 1 goto label26;

        $r8 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        i30 = staticinvoke <com.android.server.pm.PackageManagerService: int access$2808(com.android.server.pm.PackageManagerService)>($r8);

        $r9 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z2 = $r9.<com.android.server.pm.PackageManagerService$OriginInfo: boolean existing>;

        if $z2 != 0 goto label25;

        $r23 = new com.android.server.pm.PackageVerificationState;

        specialinvoke $r23.<com.android.server.pm.PackageVerificationState: void <init>(com.android.server.pm.PackageManagerService$InstallParams)>(r0);

        $r24 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r25 = $r24.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification>;

        virtualinvoke $r25.<android.util.SparseArray: void append(int,java.lang.Object)>(i30, $r23);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: void sendIntegrityVerificationRequest(int,android.content.pm.PackageInfoLite,com.android.server.pm.PackageVerificationState)>(i30, r50, $r23);

        i31 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: int sendPackageVerificationRequest(int,android.content.pm.PackageInfoLite,com.android.server.pm.PackageVerificationState)>(i30, r50, $r23);

        i26 = i31;

        $z3 = virtualinvoke $r23.<com.android.server.pm.PackageVerificationState: boolean areAllVerificationsComplete()>();

        if $z3 == 0 goto label25;

        $r26 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r27 = $r26.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification>;

        virtualinvoke $r27.<android.util.SparseArray: void remove(int)>(i30);

        i26 = i31;

     label25:
        i29 = i26;

        $i32 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $i33 = $i32 & 262144;

        if $i33 == 0 goto label26;

        $r10 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        i34 = staticinvoke <com.android.server.pm.PackageManagerService: int access$2908(com.android.server.pm.PackageManagerService)>($r10);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "enable_rollback", i34);

        $r11 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r12 = $r11.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingEnableRollback>;

        virtualinvoke $r12.<android.util.SparseArray: void append(int,java.lang.Object)>(i34, r0);

        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_ENABLE_ROLLBACK");

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.ENABLE_ROLLBACK_TOKEN", i34);

        $i8 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int mSessionId>;

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.ENABLE_ROLLBACK_SESSION_ID", $i8);

        virtualinvoke $r13.<android.content.Intent: android.content.Intent setType(java.lang.String)>("application/vnd.android.package-archive");

        virtualinvoke $r13.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        virtualinvoke $r13.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $r19 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r21 = $r19.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r22 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $r20 = new com.android.server.pm.PackageManagerService$InstallParams$1;

        specialinvoke $r20.<com.android.server.pm.PackageManagerService$InstallParams$1: void <init>(com.android.server.pm.PackageManagerService$InstallParams,int)>(r0, i34);

        virtualinvoke $r21.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r13, $r22, "android.permission.PACKAGE_ROLLBACK_AGENT", $r20, null, 0, null, null);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mEnableRollbackCompleted> = 0;

        i29 = i26;

     label26:
        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet> = i29;

        return;

        catch com.android.server.pm.Installer$InstallerException from label08 to label09 with label10;
    }

    void handleVerificationFinished()
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        $z0 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mVerificationCompleted>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mVerificationCompleted> = 1;

        $z1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mIntegrityVerificationCompleted>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: void handleReturnCode()>();

     label1:
        return;
    }

    public boolean lambda$handleReturnCode$0$PackageManagerService$InstallParams(long, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        long l0;
        java.lang.String r1;
        int i1;
        android.content.pm.ApplicationInfo $r3;
        com.android.server.pm.PackageManagerService $r4;
        com.android.server.pm.parsing.PackageParser2$Callback $r5;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r3 = new android.content.pm.ApplicationInfo;

        specialinvoke $r3.<android.content.pm.ApplicationInfo: void <init>()>();

        $r3.<android.content.pm.ApplicationInfo: java.lang.String packageName> = r1;

        $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion> = i1;

        $r4 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r5 = $r4.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback>;

        $z0 = virtualinvoke $r5.<com.android.server.pm.parsing.PackageParser2$Callback: boolean isChangeEnabled(long,android.content.pm.ApplicationInfo)>(l0, $r3);

        return $z0;
    }

    void populateInstallerExtras(android.content.Intent)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        android.content.Intent r1;
        com.android.server.pm.PackageManagerService$VerificationInfo r2, $r7, $r9, $r10, $r11, $r13, $r15, $r18;
        com.android.server.pm.InstallSource $r3;
        java.lang.String $r4;
        android.net.Uri $r6, $r8, $r16, $r19;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        r1 := @parameter0: android.content.Intent;

        $r3 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.InstallSource installSource>;

        $r4 = $r3.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.VERIFICATION_INSTALLER_PACKAGE", $r4);

        r2 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        if r2 == null goto label4;

        $r6 = r2.<com.android.server.pm.PackageManagerService$VerificationInfo: android.net.Uri originatingUri>;

        if $r6 == null goto label1;

        $r18 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $r19 = $r18.<com.android.server.pm.PackageManagerService$VerificationInfo: android.net.Uri originatingUri>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.ORIGINATING_URI", $r19);

     label1:
        $r7 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $r8 = $r7.<com.android.server.pm.PackageManagerService$VerificationInfo: android.net.Uri referrer>;

        if $r8 == null goto label2;

        $r15 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $r16 = $r15.<com.android.server.pm.PackageManagerService$VerificationInfo: android.net.Uri referrer>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.REFERRER", $r16);

     label2:
        $r9 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $i0 = $r9.<com.android.server.pm.PackageManagerService$VerificationInfo: int originatingUid>;

        if $i0 < 0 goto label3;

        $r13 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $i3 = $r13.<com.android.server.pm.PackageManagerService$VerificationInfo: int originatingUid>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.ORIGINATING_UID", $i3);

     label3:
        $r10 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $i1 = $r10.<com.android.server.pm.PackageManagerService$VerificationInfo: int installerUid>;

        if $i1 < 0 goto label4;

        $r11 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        $i2 = $r11.<com.android.server.pm.PackageManagerService$VerificationInfo: int installerUid>;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_INSTALLER_UID", $i2);

     label4:
        return;
    }

    void sendIntegrityVerificationRequest(int, android.content.pm.PackageInfoLite, com.android.server.pm.PackageVerificationState)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        int i0, $i2, $i4;
        long l1, $l3;
        com.android.server.pm.PackageManagerService $r1, $r15, $r17, $r18;
        boolean $z0;
        android.content.Intent $r2;
        java.io.File $r3;
        com.android.server.pm.PackageManagerService$OriginInfo $r4;
        java.lang.String $r5, $r10;
        android.net.Uri $r6;
        com.android.server.pm.PackageManagerService$Injector $r16;
        android.content.Context $r19;
        android.os.UserHandle $r20;
        android.os.Bundle $r21;
        com.android.server.pm.PackageManagerService$InstallParams$2 $r22;
        android.content.pm.PackageInfoLite r23;
        com.android.server.pm.PackageVerificationState r24;
        com.android.server.DeviceIdleInternal r26;
        android.app.BroadcastOptions r27;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        i0 := @parameter0: int;

        r23 := @parameter1: android.content.pm.PackageInfoLite;

        r24 := @parameter2: com.android.server.pm.PackageVerificationState;

        $r1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$3000(com.android.server.pm.PackageManagerService)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke r24.<com.android.server.pm.PackageVerificationState: void setIntegrityVerificationResult(int)>(1);

        return;

     label1:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_NEEDS_INTEGRITY_VERIFICATION");

        $r3 = new java.io.File;

        $r4 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r5 = $r4.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String resolvedPath>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r5);

        $r6 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r3);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r6, "application/vnd.android.package-archive");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(1342177281);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_ID", i0);

        $r10 = r23.<android.content.pm.PackageInfoLite: java.lang.String packageName>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.PACKAGE_NAME", $r10);

        $i2 = r23.<android.content.pm.PackageInfoLite: int versionCode>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.VERSION_CODE", $i2);

        $l3 = virtualinvoke r23.<android.content.pm.PackageInfoLite: long getLongVersionCode()>();

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("android.intent.extra.LONG_VERSION_CODE", $l3);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: void populateInstallerExtras(android.content.Intent)>($r2);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>("android");

        $r15 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r16 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector access$100(com.android.server.pm.PackageManagerService)>($r15);

        r26 = virtualinvoke $r16.<com.android.server.pm.PackageManagerService$Injector: com.android.server.DeviceIdleInternal getLocalDeviceIdleController()>();

        $r17 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        l1 = staticinvoke <com.android.server.pm.PackageManagerService: long access$000(com.android.server.pm.PackageManagerService)>($r17);

        $i4 = staticinvoke <android.os.Process: int myUid()>();

        interfaceinvoke r26.<com.android.server.DeviceIdleInternal: void addPowerSaveTempWhitelistAppDirect(int,long,boolean,java.lang.String)>($i4, l1, 0, "integrity component");

        r27 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        virtualinvoke r27.<android.app.BroadcastOptions: void setTemporaryAppWhitelistDuration(long)>(l1);

        $r18 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r19 = $r18.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r20 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $r21 = virtualinvoke r27.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        $r22 = new com.android.server.pm.PackageManagerService$InstallParams$2;

        specialinvoke $r22.<com.android.server.pm.PackageManagerService$InstallParams$2: void <init>(com.android.server.pm.PackageManagerService$InstallParams,int)>(r0, i0);

        virtualinvoke $r19.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r2, $r20, null, -1, $r21, $r22, null, 0, null, null);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "integrity_verification", i0);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mIntegrityVerificationCompleted> = 0;

        return;
    }

    int sendPackageVerificationRequest(int, android.content.pm.PackageInfoLite, com.android.server.pm.PackageVerificationState)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        int i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, i17, i18, i19, i21;
        boolean z0, $z1, z3, z4;
        java.util.List r1, r56;
        com.android.server.DeviceIdleInternal r2;
        long l2, $l11;
        android.content.ComponentName r3, $r33;
        android.os.UserHandle $r5, r50, r51;
        com.android.server.pm.PackageManagerService $r6, $r8, $r21, $r28, $r29, $r31, $r35, $r37, $r45, r53, $r58, r60;
        java.lang.String $r7, $r17, $r24, $r32, $r36, $r42, r52, $r59;
        com.android.server.pm.PackageManagerService$InstallArgs $r9, $r11;
        android.content.pm.PackageParser$SigningDetails $r10;
        com.android.server.pm.PackageManagerService$OriginInfo $r12, $r16;
        android.content.Intent $r13, $r43;
        java.io.File $r15;
        android.net.Uri $r18;
        com.android.server.pm.PackageManagerService$Injector $r30;
        android.content.Context $r38, $r46;
        android.os.Bundle $r39, $r47;
        com.android.server.pm.PackageManagerService$InstallParams$3 $r40;
        java.lang.Object $r41;
        android.content.pm.PackageInfoLite r48;
        com.android.server.pm.PackageVerificationState r49;
        com.android.server.pm.PackageManagerService$VerificationInfo r54;
        android.app.BroadcastOptions r57;
        byte b20;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        i0 := @parameter0: int;

        r48 := @parameter1: android.content.pm.PackageInfoLite;

        r49 := @parameter2: com.android.server.pm.PackageVerificationState;

        r50 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        r51 = r50;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        if r50 != $r5 goto label01;

        r51 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        r52 = $r6.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        i17 = -1;

        if r52 != null goto label02;

        i18 = -1;

        goto label03;

     label02:
        r53 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r7 = r53.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i3 = virtualinvoke r51.<android.os.UserHandle: int getIdentifier()>();

        i18 = virtualinvoke r53.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>($r7, 268435456, $i3);

     label03:
        virtualinvoke r49.<com.android.server.pm.PackageVerificationState: void setRequiredVerifierUid(int)>(i18);

        r54 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$VerificationInfo verificationInfo>;

        if r54 != null goto label04;

        goto label05;

     label04:
        i17 = r54.<com.android.server.pm.PackageManagerService$VerificationInfo: int installerUid>;

     label05:
        $r8 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $i4 = virtualinvoke r51.<android.os.UserHandle: int getIdentifier()>();

        $i5 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$3200(com.android.server.pm.PackageManagerService,android.content.pm.PackageInfoLite,int,int,int)>($r8, r48, $i4, $i5, i17);

        $r9 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$InstallArgs mArgs>;

        $r10 = $r9.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $i6 = $r10.<android.content.pm.PackageParser$SigningDetails: int signatureSchemeVersion>;

        if $i6 != 4 goto label06;

        z3 = 1;

        goto label07;

     label06:
        z3 = 0;

     label07:
        $r11 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$InstallArgs mArgs>;

        $i7 = $r11.<com.android.server.pm.PackageManagerService$InstallArgs: int mDataLoaderType>;

        if $i7 != 2 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        $r12 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z1 = $r12.<com.android.server.pm.PackageManagerService$OriginInfo: boolean existing>;

        if $z1 != 0 goto label18;

        if z0 == 0 goto label18;

        if z4 == 0 goto label11;

        if z3 != 0 goto label10;

        goto label11;

     label10:
        goto label18;

     label11:
        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_NEEDS_VERIFICATION");

        virtualinvoke $r13.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r15 = new java.io.File;

        $r16 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r17 = $r16.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String resolvedPath>;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r17);

        $r18 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r15);

        virtualinvoke $r13.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r18, "application/vnd.android.package-archive");

        virtualinvoke $r13.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        $r21 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $i8 = virtualinvoke r51.<android.os.UserHandle: int getIdentifier()>();

        r1 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List access$3300(com.android.server.pm.PackageManagerService,android.content.Intent,java.lang.String,int,int,boolean)>($r21, $r13, "application/vnd.android.package-archive", 0, $i8, 0);

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_ID", i0);

        $i9 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_INSTALL_FLAGS", $i9);

        $r24 = r48.<android.content.pm.PackageInfoLite: java.lang.String packageName>;

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.VERIFICATION_PACKAGE_NAME", $r24);

        $i10 = r48.<android.content.pm.PackageInfoLite: int versionCode>;

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_VERSION_CODE", $i10);

        $l11 = virtualinvoke r48.<android.content.pm.PackageInfoLite: long getLongVersionCode()>();

        virtualinvoke $r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("android.content.pm.extra.VERIFICATION_LONG_VERSION_CODE", $l11);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$InstallParams: void populateInstallerExtras(android.content.Intent)>($r13);

        $r28 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        r56 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List access$3400(com.android.server.pm.PackageManagerService,android.content.pm.PackageInfoLite,java.util.List,com.android.server.pm.PackageVerificationState)>($r28, r48, r1, r49);

        $r29 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r30 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector access$100(com.android.server.pm.PackageManagerService)>($r29);

        r2 = virtualinvoke $r30.<com.android.server.pm.PackageManagerService$Injector: com.android.server.DeviceIdleInternal getLocalDeviceIdleController()>();

        $r31 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        l2 = staticinvoke <com.android.server.pm.PackageManagerService: long access$000(com.android.server.pm.PackageManagerService)>($r31);

        r57 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        virtualinvoke r57.<android.app.BroadcastOptions: void setTemporaryAppWhitelistDuration(long)>(l2);

        if r56 == null goto label15;

        i19 = interfaceinvoke r56.<java.util.List: int size()>();

        if i19 != 0 goto label12;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Additional verifiers required, but none installed.");

        b20 = -22;

        goto label16;

     label12:
        i21 = 0;

        b20 = 1;

     label13:
        if i21 >= i19 goto label14;

        $r41 = interfaceinvoke r56.<java.util.List: java.lang.Object get(int)>(i21);

        r3 = (android.content.ComponentName) $r41;

        $i14 = staticinvoke <android.os.Process: int myUid()>();

        $r42 = virtualinvoke r3.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i15 = virtualinvoke r51.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r2.<com.android.server.DeviceIdleInternal: void addPowerSaveTempWhitelistApp(int,java.lang.String,long,int,boolean,java.lang.String)>($i14, $r42, l2, $i15, 0, "package verifier");

        $r43 = new android.content.Intent;

        specialinvoke $r43.<android.content.Intent: void <init>(android.content.Intent)>($r13);

        virtualinvoke $r43.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r3);

        $r45 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r46 = $r45.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r47 = virtualinvoke r57.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        virtualinvoke $r46.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.os.Bundle)>($r43, r51, null, $r47);

        i21 = i21 + 1;

        goto label13;

     label14:
        goto label16;

     label15:
        b20 = 1;

     label16:
        $r58 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r59 = $r58.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        if $r59 == null goto label17;

        r60 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r32 = r60.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $r33 = staticinvoke <com.android.server.pm.PackageManagerService: android.content.ComponentName access$3500(com.android.server.pm.PackageManagerService,java.lang.String,java.util.List)>(r60, $r32, r1);

        virtualinvoke $r13.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r33);

        $i12 = staticinvoke <android.os.Process: int myUid()>();

        $r35 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r36 = $r35.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i13 = virtualinvoke r51.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r2.<com.android.server.DeviceIdleInternal: void addPowerSaveTempWhitelistApp(int,java.lang.String,long,int,boolean,java.lang.String)>($i12, $r36, l2, $i13, 0, "package verifier");

        $r37 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService this$0>;

        $r38 = $r37.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r39 = virtualinvoke r57.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        $r40 = new com.android.server.pm.PackageManagerService$InstallParams$3;

        specialinvoke $r40.<com.android.server.pm.PackageManagerService$InstallParams$3: void <init>(com.android.server.pm.PackageManagerService$InstallParams,int)>(r0, i0);

        virtualinvoke $r38.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,int,android.os.Bundle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r13, r51, "android.permission.PACKAGE_VERIFICATION_AGENT", -1, $r39, $r40, null, 0, null, null);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "verification", i0);

        r0.<com.android.server.pm.PackageManagerService$InstallParams: boolean mVerificationCompleted> = 0;

        goto label17;

     label17:
        goto label19;

     label18:
        virtualinvoke r49.<com.android.server.pm.PackageVerificationState: boolean setVerifierResponse(int,int)>(i18, 1);

        b20 = 1;

     label19:
        return b20;
    }

    void setReturnCode(int)
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        int i0, $i1;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet>;

        if $i1 != 1 goto label1;

        r0.<com.android.server.pm.PackageManagerService$InstallParams: int mRet> = i0;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        com.android.server.pm.PackageManagerService$InstallParams r0;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r4, $r11;
        com.android.server.pm.PackageManagerService$OriginInfo $r7;
        java.io.File $r8;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallParams;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstallParams{");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file=");

        $r7 = r0.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r8 = $r7.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
