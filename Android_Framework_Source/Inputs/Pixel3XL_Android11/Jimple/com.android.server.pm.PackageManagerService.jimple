public class com.android.server.pm.PackageManagerService extends android.content.pm.IPackageManager$Stub implements com.android.server.pm.PackageSender
{
    private static final java.lang.String ATTR_IS_GRANTED;
    private static final java.lang.String ATTR_PACKAGE_NAME;
    private static final java.lang.String ATTR_PERMISSION_NAME;
    private static final java.lang.String ATTR_REVOKE_ON_UPGRADE;
    private static final java.lang.String ATTR_USER_FIXED;
    private static final java.lang.String ATTR_USER_SET;
    private static final int BLUETOOTH_UID;
    private static final long BROADCAST_DELAY;
    private static final long BROADCAST_DELAY_DURING_STARTUP;
    static final int CHECK_PENDING_INTEGRITY_VERIFICATION;
    static final int CHECK_PENDING_VERIFICATION;
    static final boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE;
    public static final java.lang.String COMPRESSED_EXTENSION;
    static final boolean DEBUG_ABI_SELECTION;
    private static final boolean DEBUG_APP_DATA;
    private static final boolean DEBUG_BACKUP;
    private static final boolean DEBUG_BROADCASTS;
    public static final boolean DEBUG_COMPRESSION;
    public static final boolean DEBUG_DEXOPT;
    static final boolean DEBUG_DOMAIN_VERIFICATION;
    public static final boolean DEBUG_INSTALL;
    private static final boolean DEBUG_INSTANT;
    private static final boolean DEBUG_INTENT_MATCHING;
    private static final boolean DEBUG_PACKAGE_INFO;
    public static final boolean DEBUG_PACKAGE_SCANNING;
    public static final boolean DEBUG_PERMISSIONS;
    static final boolean DEBUG_PREFERRED;
    public static final boolean DEBUG_REMOVE;
    static final boolean DEBUG_SD_INSTALL;
    public static final boolean DEBUG_SETTINGS;
    private static final boolean DEBUG_SHARED_LIBRARIES;
    static final boolean DEBUG_UPGRADE;
    private static final boolean DEBUG_VERIFY;
    private static final long DEFAULT_ENABLE_ROLLBACK_TIMEOUT_MILLIS;
    private static final long DEFAULT_INTEGRITY_VERIFICATION_TIMEOUT;
    private static final boolean DEFAULT_INTEGRITY_VERIFY_ENABLE;
    private static final long DEFAULT_MANDATORY_FSTRIM_INTERVAL;
    private static final boolean DEFAULT_PACKAGE_PARSER_CACHE_ENABLED;
    private static final long DEFAULT_UNUSED_STATIC_SHARED_LIB_MIN_CACHE_PERIOD;
    private static final int DEFAULT_VERIFICATION_RESPONSE;
    private static final long DEFAULT_VERIFICATION_TIMEOUT;
    private static final boolean DEFAULT_VERIFY_ENABLE;
    static final int DEFERRED_NO_KILL_INSTALL_OBSERVER;
    static final int DEFERRED_NO_KILL_INSTALL_OBSERVER_DELAY_MS;
    static final int DEFERRED_NO_KILL_POST_DELETE;
    static final int DEFERRED_NO_KILL_POST_DELETE_DELAY_MS;
    private static final int[] EMPTY_INT_ARRAY;
    private static final boolean ENABLE_FREE_CACHE_V2;
    static final int ENABLE_ROLLBACK_STATUS;
    static final int ENABLE_ROLLBACK_TIMEOUT;
    private static final boolean FORCE_PACKAGE_PARSED_CACHE_ENABLED;
    private static final boolean HIDE_EPHEMERAL_APIS;
    static final int INIT_COPY;
    private static final java.lang.String[] INSTANT_APP_BROADCAST_PERMISSION;
    static final int INSTANT_APP_RESOLUTION_PHASE_TWO;
    static final int INTEGRITY_VERIFICATION_COMPLETE;
    static final int INTENT_FILTER_VERIFIED;
    private static final int LOG_UID;
    private static final int NETWORKSTACK_UID;
    private static final int NFC_UID;
    private static final java.lang.String PACKAGE_MIME_TYPE;
    private static final java.lang.String PACKAGE_SCHEME;
    static final int PACKAGE_VERIFIED;
    public static final java.lang.String PLATFORM_PACKAGE_NAME;
    static final int POST_INSTALL;
    private static final java.lang.String PRECOMPILE_LAYOUTS;
    private static final java.lang.String PROPERTY_ENABLE_ROLLBACK_TIMEOUT_MILLIS;
    private static final int RADIO_UID;
    private static final java.lang.String RANDOM_DIR_PREFIX;
    public static final int REASON_AB_OTA;
    public static final int REASON_BACKGROUND_DEXOPT;
    public static final int REASON_BOOT;
    public static final int REASON_FIRST_BOOT;
    public static final int REASON_INACTIVE_PACKAGE_DOWNGRADE;
    public static final int REASON_INSTALL;
    public static final int REASON_LAST;
    public static final int REASON_SHARED;
    public static final int REASON_UNKNOWN;
    static final int SCAN_AS_APK_IN_APEX;
    static final int SCAN_AS_FULL_APP;
    static final int SCAN_AS_INSTANT_APP;
    static final int SCAN_AS_ODM;
    static final int SCAN_AS_OEM;
    static final int SCAN_AS_PRIVILEGED;
    static final int SCAN_AS_PRODUCT;
    static final int SCAN_AS_SYSTEM;
    static final int SCAN_AS_SYSTEM_EXT;
    static final int SCAN_AS_VENDOR;
    static final int SCAN_AS_VIRTUAL_PRELOAD;
    static final int SCAN_BOOTING;
    static final int SCAN_DONT_KILL_APP;
    static final int SCAN_FIRST_BOOT_OR_UPGRADE;
    static final int SCAN_IGNORE_FROZEN;
    static final int SCAN_INITIAL;
    static final int SCAN_MOVE;
    static final int SCAN_NEW_INSTALL;
    static final int SCAN_NO_DEX;
    static final int SCAN_REQUIRE_KNOWN;
    static final int SCAN_UPDATE_SIGNATURE;
    static final int SCAN_UPDATE_TIME;
    private static final java.lang.String SD_ENCRYPTION_ALGORITHM;
    private static final java.lang.String SD_ENCRYPTION_KEYSTORE_NAME;
    static final int SEND_PENDING_BROADCAST;
    private static final int SE_UID;
    private static final int SHELL_UID;
    static final int START_INTENT_FILTER_VERIFICATIONS;
    private static final java.lang.String STATIC_SHARED_LIB_DELIMITER;
    public static final java.lang.String STUB_SUFFIX;
    public static final java.util.List SYSTEM_PARTITIONS;
    private static final int SYSTEM_RUNTIME_GRANT_MASK;
    static final java.lang.String TAG;
    private static final java.lang.String TAG_ALL_GRANTS;
    private static final java.lang.String TAG_DEFAULT_APPS;
    private static final java.lang.String TAG_GRANT;
    private static final java.lang.String TAG_INTENT_FILTER_VERIFICATION;
    private static final java.lang.String TAG_PERMISSION;
    private static final java.lang.String TAG_PERMISSION_BACKUP;
    private static final java.lang.String TAG_PREFERRED_BACKUP;
    private static final long THROW_EXCEPTION_ON_REQUIRE_INSTALL_PACKAGES_TO_ADD_INSTALLER_PACKAGE;
    private static final int TYPE_ACTIVITY;
    private static final int TYPE_PROVIDER;
    private static final int TYPE_RECEIVER;
    private static final int TYPE_SERVICE;
    private static final int TYPE_UNKNOWN;
    private static final int USER_RUNTIME_GRANT_MASK;
    static final long WATCHDOG_TIMEOUT;
    static final int WRITE_PACKAGE_LIST;
    static final int WRITE_PACKAGE_RESTRICTIONS;
    static final int WRITE_SETTINGS;
    static final int WRITE_SETTINGS_DELAY;
    private static final java.io.File sAppInstallDir;
    static final java.io.File sAppLib32InstallDir;
    private static final android.content.Intent sBrowserIntent;
    private static final java.util.Comparator sProviderInitOrderSorter;
    android.content.pm.ApplicationInfo mAndroidApplication;
    private final com.android.server.pm.ApexManager mApexManager;
    final java.lang.String mAppPredictionServicePackage;
    private final com.android.server.pm.AppsFilter mAppsFilter;
    final com.android.server.pm.dex.ArtManagerService mArtManagerService;
    final android.util.ArrayMap mAvailableFeatures;
    private java.io.File mCacheDir;
    final android.util.SparseArray mChangedPackages;
    int mChangedPackagesSequenceNumber;
    final android.util.SparseArray mChangedPackagesSequenceNumbers;
    private final com.android.server.pm.CompilerStats mCompilerStats;
    private final com.android.server.pm.ComponentResolver mComponentResolver;
    final java.lang.String mConfiguratorPackage;
    final android.content.Context mContext;
    android.content.ComponentName mCustomResolverComponentName;
    final int mDefParseFlags;
    private final android.util.SparseIntArray mDefaultPermissionsGrantedUsers;
    final java.lang.String mDefaultTextClassifierPackage;
    private final com.android.server.pm.dex.DexManager mDexManager;
    private boolean mDexOptDialogShown;
    private final java.util.List mDirsToScanAsSystem;
    private android.util.ArraySet mDirtyUsers;
    final java.lang.String mDocumenterPackage;
    private android.util.ArraySet mExistingPackages;
    private final android.util.ArrayMap mExpectingBetter;
    android.content.pm.PackageManagerInternal$ExternalSourcesPolicy mExternalSourcesPolicy;
    final boolean mFactoryTest;
    boolean mFirstBoot;
    final android.util.ArraySet mFrozenPackages;
    final android.os.Handler mHandler;
    final com.android.server.ServiceThread mHandlerThread;
    volatile boolean mHasSystemUidErrors;
    final java.lang.String mIncidentReportApproverPackage;
    private final android.os.incremental.IncrementalManager mIncrementalManager;
    private final com.android.server.pm.PackageManagerService$Injector mInjector;
    final java.lang.Object mInstallLock;
    final com.android.server.pm.Installer mInstaller;
    final com.android.server.pm.PackageInstallerService mInstallerService;
    android.content.pm.ActivityInfo mInstantAppInstallerActivity;
    final android.content.pm.ResolveInfo mInstantAppInstallerInfo;
    private final com.android.server.pm.InstantAppRegistry mInstantAppRegistry;
    final com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection;
    final android.content.ComponentName mInstantAppResolverSettingsComponent;
    final android.util.ArrayMap mInstrumentation;
    final android.util.SparseArray mIntentFilterVerificationStates;
    private int mIntentFilterVerificationToken;
    private final com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier;
    private final android.content.ComponentName mIntentFilterVerifierComponent;
    final boolean mIsPreNMR1Upgrade;
    final boolean mIsPreNUpgrade;
    final boolean mIsPreQUpgrade;
    private java.util.function.Predicate mIsSystemPackage;
    final boolean mIsUpgrade;
    final android.util.SparseIntArray mIsolatedOwners;
    private java.util.List mKeepUninstalledPackages;
    final android.util.ArraySet mLoadedVolumes;
    final java.lang.Object mLock;
    private boolean mMediaMounted;
    final android.util.DisplayMetrics mMetrics;
    private final com.android.server.pm.ModuleInfoProvider mModuleInfoProvider;
    private final com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks;
    int mNextInstallToken;
    private java.util.concurrent.atomic.AtomicInteger mNextMoveId;
    private final java.util.Map mNoKillInstallObservers;
    final boolean mOnlyCore;
    private final com.android.internal.content.om.OverlayConfig mOverlayConfig;
    private final java.util.ArrayList mPackageChangeObservers;
    private final com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer;
    private final android.util.ArraySet mPackageListObservers;
    final com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback;
    private final com.android.server.pm.PackageUsage mPackageUsage;
    final android.util.ArrayMap mPackages;
    final com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts;
    final android.util.SparseArray mPendingEnableRollback;
    private int mPendingEnableRollbackToken;
    final android.util.SparseArray mPendingVerification;
    private int mPendingVerificationToken;
    private final com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager;
    private final android.permission.IPermissionManager mPermissionManagerService;
    com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage;
    private final android.content.pm.PackageManagerInternal mPmInternal;
    private java.util.concurrent.Future mPrepareAppDataFuture;
    private final com.android.server.pm.ProcessLoggingHandler mProcessLoggingHandler;
    boolean mPromoteSystemApps;
    final android.util.ArraySet mProtectedBroadcasts;
    final com.android.server.pm.ProtectedPackages mProtectedPackages;
    final java.lang.String mRequiredInstallerPackage;
    final java.lang.String mRequiredPermissionControllerPackage;
    final java.lang.String mRequiredUninstallerPackage;
    final java.lang.String mRequiredVerifierPackage;
    final android.content.pm.ActivityInfo mResolveActivity;
    android.content.ComponentName mResolveComponentName;
    final android.content.pm.ResolveInfo mResolveInfo;
    boolean mResolverReplaced;
    final java.lang.String mRetailDemoPackage;
    final android.util.SparseArray mRunningInstalls;
    volatile boolean mSafeMode;
    final int mSdkVersion;
    final java.lang.String[] mSeparateProcesses;
    private long mServiceStartWithDelay;
    final java.lang.String mServicesExtensionPackageName;
    final com.android.server.pm.Settings mSettings;
    final java.lang.String mSetupWizardPackage;
    final android.util.ArrayMap mSharedLibraries;
    final java.lang.String mSharedSystemSharedLibraryPackageName;
    final android.util.ArrayMap mStaticLibsByDeclaringPackage;
    private android.os.storage.StorageEventListener mStorageListener;
    final java.lang.String mStorageManagerPackage;
    volatile boolean mSystemReady;
    final java.lang.String mSystemTextClassifierPackageName;
    final android.util.ArraySet mTransferredPackages;
    com.android.server.pm.UserManagerService mUserManager;
    private final android.util.SparseBooleanArray mUserNeedsBadging;
    private final com.android.server.pm.dex.ViewCompiler mViewCompiler;
    private volatile android.util.SparseBooleanArray mWebInstantAppsDisabled;
    final java.lang.String mWellbeingPackage;

    static void <clinit>()
    {
        boolean $z0, $z1, $z2;
        int[] $r1;
        android.content.Intent $r4, $r6, $r9, r20;
        android.net.Uri $r7;
        java.lang.String[] $r11;
        java.io.File $r13, $r15, r21, r22;
        com.android.server.pm.'-$$Lambda$jJA7F7L-4w56WZDbW9UayzZEbFw' $r16;
        java.util.ArrayList $r17;
        java.util.List $r18;
        com.android.server.pm.'-$$Lambda$PackageManagerService$3yxDU_uSU2kkdLuKkfPYVKvXKGw' $r19;
        java.util.function.Function r23;
        java.util.Comparator r24;

        <com.android.server.pm.PackageManagerService: int WRITE_SETTINGS_DELAY> = 10000;

        <com.android.server.pm.PackageManagerService: int WRITE_SETTINGS> = 13;

        <com.android.server.pm.PackageManagerService: int WRITE_PACKAGE_RESTRICTIONS> = 14;

        <com.android.server.pm.PackageManagerService: int WRITE_PACKAGE_LIST> = 19;

        <com.android.server.pm.PackageManagerService: long WATCHDOG_TIMEOUT> = 600000L;

        <com.android.server.pm.PackageManagerService: int USER_RUNTIME_GRANT_MASK> = 11;

        <com.android.server.pm.PackageManagerService: int TYPE_UNKNOWN> = 0;

        <com.android.server.pm.PackageManagerService: int TYPE_SERVICE> = 3;

        <com.android.server.pm.PackageManagerService: int TYPE_RECEIVER> = 2;

        <com.android.server.pm.PackageManagerService: int TYPE_PROVIDER> = 4;

        <com.android.server.pm.PackageManagerService: int TYPE_ACTIVITY> = 1;

        <com.android.server.pm.PackageManagerService: long THROW_EXCEPTION_ON_REQUIRE_INSTALL_PACKAGES_TO_ADD_INSTALLER_PACKAGE> = 150857253L;

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_PREFERRED_BACKUP> = "pa";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_PERMISSION_BACKUP> = "perm-grant-backup";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_PERMISSION> = "perm";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_INTENT_FILTER_VERIFICATION> = "iv";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_GRANT> = "grant";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_DEFAULT_APPS> = "da";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG_ALL_GRANTS> = "rt-grants";

        <com.android.server.pm.PackageManagerService: java.lang.String TAG> = "PackageManager";

        <com.android.server.pm.PackageManagerService: int SYSTEM_RUNTIME_GRANT_MASK> = 52;

        <com.android.server.pm.PackageManagerService: java.lang.String STUB_SUFFIX> = "-Stub";

        <com.android.server.pm.PackageManagerService: java.lang.String STATIC_SHARED_LIB_DELIMITER> = "_";

        <com.android.server.pm.PackageManagerService: int START_INTENT_FILTER_VERIFICATIONS> = 17;

        <com.android.server.pm.PackageManagerService: int SHELL_UID> = 2000;

        <com.android.server.pm.PackageManagerService: int SE_UID> = 1068;

        <com.android.server.pm.PackageManagerService: int SEND_PENDING_BROADCAST> = 1;

        <com.android.server.pm.PackageManagerService: java.lang.String SD_ENCRYPTION_KEYSTORE_NAME> = "AppsOnSD";

        <com.android.server.pm.PackageManagerService: java.lang.String SD_ENCRYPTION_ALGORITHM> = "AES";

        <com.android.server.pm.PackageManagerService: int SCAN_UPDATE_TIME> = 8;

        <com.android.server.pm.PackageManagerService: int SCAN_UPDATE_SIGNATURE> = 2;

        <com.android.server.pm.PackageManagerService: int SCAN_REQUIRE_KNOWN> = 128;

        <com.android.server.pm.PackageManagerService: int SCAN_NO_DEX> = 1;

        <com.android.server.pm.PackageManagerService: int SCAN_NEW_INSTALL> = 4;

        <com.android.server.pm.PackageManagerService: int SCAN_MOVE> = 256;

        <com.android.server.pm.PackageManagerService: int SCAN_INITIAL> = 512;

        <com.android.server.pm.PackageManagerService: int SCAN_IGNORE_FROZEN> = 2048;

        <com.android.server.pm.PackageManagerService: int SCAN_FIRST_BOOT_OR_UPGRADE> = 4096;

        <com.android.server.pm.PackageManagerService: int SCAN_DONT_KILL_APP> = 1024;

        <com.android.server.pm.PackageManagerService: int SCAN_BOOTING> = 16;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_VIRTUAL_PRELOAD> = 32768;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_VENDOR> = 524288;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_SYSTEM_EXT> = 2097152;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_SYSTEM> = 65536;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_PRODUCT> = 1048576;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_PRIVILEGED> = 131072;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_OEM> = 262144;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_ODM> = 4194304;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_INSTANT_APP> = 8192;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_FULL_APP> = 16384;

        <com.android.server.pm.PackageManagerService: int SCAN_AS_APK_IN_APEX> = 8388608;

        <com.android.server.pm.PackageManagerService: int REASON_UNKNOWN> = -1;

        <com.android.server.pm.PackageManagerService: int REASON_SHARED> = 6;

        <com.android.server.pm.PackageManagerService: int REASON_LAST> = 6;

        <com.android.server.pm.PackageManagerService: int REASON_INSTALL> = 2;

        <com.android.server.pm.PackageManagerService: int REASON_INACTIVE_PACKAGE_DOWNGRADE> = 5;

        <com.android.server.pm.PackageManagerService: int REASON_FIRST_BOOT> = 0;

        <com.android.server.pm.PackageManagerService: int REASON_BOOT> = 1;

        <com.android.server.pm.PackageManagerService: int REASON_BACKGROUND_DEXOPT> = 3;

        <com.android.server.pm.PackageManagerService: int REASON_AB_OTA> = 4;

        <com.android.server.pm.PackageManagerService: java.lang.String RANDOM_DIR_PREFIX> = "~~";

        <com.android.server.pm.PackageManagerService: int RADIO_UID> = 1001;

        <com.android.server.pm.PackageManagerService: java.lang.String PROPERTY_ENABLE_ROLLBACK_TIMEOUT_MILLIS> = "enable_rollback_timeout";

        <com.android.server.pm.PackageManagerService: java.lang.String PRECOMPILE_LAYOUTS> = "pm.precompile_layouts";

        <com.android.server.pm.PackageManagerService: int POST_INSTALL> = 9;

        <com.android.server.pm.PackageManagerService: java.lang.String PLATFORM_PACKAGE_NAME> = "android";

        <com.android.server.pm.PackageManagerService: int PACKAGE_VERIFIED> = 15;

        <com.android.server.pm.PackageManagerService: java.lang.String PACKAGE_SCHEME> = "package";

        <com.android.server.pm.PackageManagerService: java.lang.String PACKAGE_MIME_TYPE> = "application/vnd.android.package-archive";

        <com.android.server.pm.PackageManagerService: int NFC_UID> = 1027;

        <com.android.server.pm.PackageManagerService: int NETWORKSTACK_UID> = 1073;

        <com.android.server.pm.PackageManagerService: int LOG_UID> = 1007;

        <com.android.server.pm.PackageManagerService: int INTENT_FILTER_VERIFIED> = 18;

        <com.android.server.pm.PackageManagerService: int INTEGRITY_VERIFICATION_COMPLETE> = 25;

        <com.android.server.pm.PackageManagerService: int INSTANT_APP_RESOLUTION_PHASE_TWO> = 20;

        <com.android.server.pm.PackageManagerService: int INIT_COPY> = 5;

        <com.android.server.pm.PackageManagerService: boolean HIDE_EPHEMERAL_APIS> = 0;

        <com.android.server.pm.PackageManagerService: boolean FORCE_PACKAGE_PARSED_CACHE_ENABLED> = 0;

        <com.android.server.pm.PackageManagerService: int ENABLE_ROLLBACK_TIMEOUT> = 22;

        <com.android.server.pm.PackageManagerService: int ENABLE_ROLLBACK_STATUS> = 21;

        <com.android.server.pm.PackageManagerService: int DEFERRED_NO_KILL_POST_DELETE_DELAY_MS> = 3000;

        <com.android.server.pm.PackageManagerService: int DEFERRED_NO_KILL_POST_DELETE> = 23;

        <com.android.server.pm.PackageManagerService: int DEFERRED_NO_KILL_INSTALL_OBSERVER_DELAY_MS> = 500;

        <com.android.server.pm.PackageManagerService: int DEFERRED_NO_KILL_INSTALL_OBSERVER> = 24;

        <com.android.server.pm.PackageManagerService: boolean DEFAULT_VERIFY_ENABLE> = 1;

        <com.android.server.pm.PackageManagerService: long DEFAULT_VERIFICATION_TIMEOUT> = 10000L;

        <com.android.server.pm.PackageManagerService: int DEFAULT_VERIFICATION_RESPONSE> = 1;

        <com.android.server.pm.PackageManagerService: long DEFAULT_UNUSED_STATIC_SHARED_LIB_MIN_CACHE_PERIOD> = 7200000L;

        <com.android.server.pm.PackageManagerService: boolean DEFAULT_PACKAGE_PARSER_CACHE_ENABLED> = 1;

        <com.android.server.pm.PackageManagerService: long DEFAULT_MANDATORY_FSTRIM_INTERVAL> = 259200000L;

        <com.android.server.pm.PackageManagerService: boolean DEFAULT_INTEGRITY_VERIFY_ENABLE> = 1;

        <com.android.server.pm.PackageManagerService: long DEFAULT_INTEGRITY_VERIFICATION_TIMEOUT> = 30000L;

        <com.android.server.pm.PackageManagerService: long DEFAULT_ENABLE_ROLLBACK_TIMEOUT_MILLIS> = 10000L;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_VERIFY> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_UPGRADE> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_SHARED_LIBRARIES> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_SETTINGS> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_SD_INSTALL> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_REMOVE> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PREFERRED> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PERMISSIONS> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PACKAGE_SCANNING> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_PACKAGE_INFO> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_INTENT_MATCHING> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTALL> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_DOMAIN_VERIFICATION> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_DEXOPT> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_BROADCASTS> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_BACKUP> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_APP_DATA> = 0;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_ABI_SELECTION> = 0;

        <com.android.server.pm.PackageManagerService: java.lang.String COMPRESSED_EXTENSION> = ".gz";

        <com.android.server.pm.PackageManagerService: boolean CLEAR_RUNTIME_PERMISSIONS_ON_UPGRADE> = 0;

        <com.android.server.pm.PackageManagerService: int CHECK_PENDING_VERIFICATION> = 16;

        <com.android.server.pm.PackageManagerService: int CHECK_PENDING_INTEGRITY_VERIFICATION> = 26;

        <com.android.server.pm.PackageManagerService: long BROADCAST_DELAY_DURING_STARTUP> = 10000L;

        <com.android.server.pm.PackageManagerService: long BROADCAST_DELAY> = 1000L;

        <com.android.server.pm.PackageManagerService: int BLUETOOTH_UID> = 1002;

        <com.android.server.pm.PackageManagerService: java.lang.String ATTR_USER_SET> = "set";

        <com.android.server.pm.PackageManagerService: java.lang.String ATTR_USER_FIXED> = "fixed";

        <com.android.server.pm.PackageManagerService: java.lang.String ATTR_REVOKE_ON_UPGRADE> = "rou";

        <com.android.server.pm.PackageManagerService: java.lang.String ATTR_PERMISSION_NAME> = "name";

        <com.android.server.pm.PackageManagerService: java.lang.String ATTR_PACKAGE_NAME> = "pkg";

        <com.android.server.pm.PackageManagerService: java.lang.String ATTR_IS_GRANTED> = "g";

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_COMPRESSION> = $z0;

        $z1 = <android.os.Build: boolean IS_DEBUGGABLE>;

        <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT> = $z1;

        $z2 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("fw.free_cache_v2", 1);

        <com.android.server.pm.PackageManagerService: boolean ENABLE_FREE_CACHE_V2> = $z2;

        $r1 = newarray (int)[0];

        <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY> = $r1;

        r20 = new android.content.Intent;

        specialinvoke r20.<android.content.Intent: void <init>()>();

        <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent> = r20;

        virtualinvoke r20.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.VIEW");

        $r4 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.BROWSABLE");

        $r6 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        $r7 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("http:");

        virtualinvoke $r6.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r7);

        $r9 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        virtualinvoke $r9.<android.content.Intent: android.content.Intent addFlags(int)>(512);

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "android.permission.ACCESS_INSTANT_APPS";

        <com.android.server.pm.PackageManagerService: java.lang.String[] INSTANT_APP_BROADCAST_PERMISSION> = $r11;

        r21 = new java.io.File;

        $r13 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke r21.<java.io.File: void <init>(java.io.File,java.lang.String)>($r13, "app");

        <com.android.server.pm.PackageManagerService: java.io.File sAppInstallDir> = r21;

        r22 = new java.io.File;

        $r15 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke r22.<java.io.File: void <init>(java.io.File,java.lang.String)>($r15, "app-lib");

        <com.android.server.pm.PackageManagerService: java.io.File sAppLib32InstallDir> = r22;

        $r16 = <com.android.server.pm._$$Lambda$jJA7F7L_4w56WZDbW9UayzZEbFw: com.android.server.pm.'-$$Lambda$jJA7F7L-4w56WZDbW9UayzZEbFw' INSTANCE>;

        r23 = (java.util.function.Function) $r16;

        $r17 = staticinvoke <android.content.pm.PackagePartitions: java.util.ArrayList getOrderedPartitions(java.util.function.Function)>(r23);

        $r18 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r17);

        <com.android.server.pm.PackageManagerService: java.util.List SYSTEM_PARTITIONS> = $r18;

        $r19 = <com.android.server.pm._$$Lambda$PackageManagerService$3yxDU_uSU2kkdLuKkfPYVKvXKGw: com.android.server.pm.'-$$Lambda$PackageManagerService$3yxDU_uSU2kkdLuKkfPYVKvXKGw' INSTANCE>;

        r24 = (java.util.Comparator) $r19;

        <com.android.server.pm.PackageManagerService: java.util.Comparator sProviderInitOrderSorter> = r24;

        return;
    }

    public void <init>(com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService$TestParams)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$Injector r1;
        com.android.server.pm.PackageManagerService$TestParams r2;
        int $i0, $i1;
        android.util.ArrayMap $r3, $r5, $r13, $r14, $r15, $r46, $r88, $r89;
        android.util.SparseIntArray $r4, $r11;
        android.util.ArraySet $r6, $r7, $r10, $r16, $r17, $r29;
        android.util.SparseArray $r8, $r9, $r18, $r19, $r28, $r30;
        java.util.ArrayList $r12;
        java.util.concurrent.atomic.AtomicInteger $r20;
        android.util.SparseBooleanArray $r21, $r22;
        android.content.pm.ActivityInfo $r23;
        android.content.pm.ResolveInfo $r24, $r25;
        java.util.HashMap $r26;
        java.util.Map $r27;
        com.android.server.pm.PackageUsage $r31;
        com.android.server.pm.CompilerStats $r32;
        com.android.server.pm.PackageManagerService$1 $r33;
        com.android.server.pm._$$Lambda$PackageManagerService$pVdeIe13BPz2j1_uK6W_NugHu2Q $r34;
        com.android.server.pm.AppsFilter $r35;
        com.android.server.pm.ComponentResolver $r36;
        android.content.Context $r37;
        com.android.server.pm.Installer $r38;
        java.lang.Object $r39, $r40;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r41;
        com.android.server.pm.Settings $r42;
        com.android.server.pm.UserManagerService $r43;
        com.android.server.pm.ApexManager $r44;
        com.android.server.pm.dex.ArtManagerService $r45;
        com.android.server.pm.dex.DexManager $r47;
        java.util.List $r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.os.Handler $r49;
        com.android.server.ServiceThread $r50;
        android.os.incremental.IncrementalManager $r51;
        com.android.server.pm.PackageInstallerService $r52;
        com.android.server.pm.InstantAppRegistry $r53;
        com.android.server.pm.InstantAppResolverConnection $r54;
        android.content.ComponentName $r55, $r57, $r87;
        com.android.server.pm.PackageManagerService$IntentFilterVerifier $r56;
        android.util.DisplayMetrics $r58;
        com.android.server.pm.ModuleInfoProvider $r59;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r60;
        com.android.internal.content.om.OverlayConfig $r61;
        com.android.server.pm.PackageDexOptimizer $r62;
        com.android.server.pm.parsing.PackageParser2$Callback $r63;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r64;
        android.permission.IPermissionManager $r65;
        android.content.pm.PackageManagerInternal $r66;
        com.android.server.pm.ProcessLoggingHandler $r67;
        com.android.server.pm.ProtectedPackages $r68;
        java.lang.String[] $r69;
        com.android.server.pm.dex.ViewCompiler $r70;
        java.lang.String $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$Injector;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$TestParams;

        specialinvoke r0.<android.content.pm.IPackageManager$Stub: void <init>()>();

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        r0.<com.android.server.pm.PackageManagerService: int mSdkVersion> = $i0;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mIsolatedOwners> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter> = $r5;

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingPackages> = null;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages> = $r6;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages> = $r8;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackagesSequenceNumbers> = $r9;

        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers> = $r10;

        $r11 = new android.util.SparseIntArray;

        specialinvoke $r11.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mDefaultPermissionsGrantedUsers> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPackageChangeObservers> = $r12;

        $r13 = new android.util.ArrayMap;

        specialinvoke $r13.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries> = $r13;

        $r14 = new android.util.ArrayMap;

        specialinvoke $r14.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mStaticLibsByDeclaringPackage> = $r14;

        $r15 = new android.util.ArrayMap;

        specialinvoke $r15.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation> = $r15;

        $r16 = new android.util.ArraySet;

        specialinvoke $r16.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferredPackages> = $r16;

        $r17 = new android.util.ArraySet;

        specialinvoke $r17.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts> = $r17;

        $r18 = new android.util.SparseArray;

        specialinvoke $r18.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification> = $r18;

        $r19 = new android.util.SparseArray;

        specialinvoke $r19.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingEnableRollback> = $r19;

        $r20 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r20.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId> = $r20;

        $r21 = new android.util.SparseBooleanArray;

        specialinvoke $r21.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging> = $r21;

        r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = 0;

        r0.<com.android.server.pm.PackageManagerService: int mPendingEnableRollbackToken> = 0;

        $r22 = new android.util.SparseBooleanArray;

        specialinvoke $r22.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mWebInstantAppsDisabled> = $r22;

        $r23 = new android.content.pm.ActivityInfo;

        specialinvoke $r23.<android.content.pm.ActivityInfo: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity> = $r23;

        $r24 = new android.content.pm.ResolveInfo;

        specialinvoke $r24.<android.content.pm.ResolveInfo: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo> = $r24;

        r0.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced> = 0;

        r0.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken> = 0;

        $r25 = new android.content.pm.ResolveInfo;

        specialinvoke $r25.<android.content.pm.ResolveInfo: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo> = $r25;

        $r26 = new java.util.HashMap;

        specialinvoke $r26.<java.util.HashMap: void <init>()>();

        $r27 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r26);

        r0.<com.android.server.pm.PackageManagerService: java.util.Map mNoKillInstallObservers> = $r27;

        $r28 = new android.util.SparseArray;

        specialinvoke $r28.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mIntentFilterVerificationStates> = $r28;

        $r29 = new android.util.ArraySet;

        specialinvoke $r29.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers> = $r29;

        $r30 = new android.util.SparseArray;

        specialinvoke $r30.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mRunningInstalls> = $r30;

        r0.<com.android.server.pm.PackageManagerService: int mNextInstallToken> = 1;

        $r31 = new com.android.server.pm.PackageUsage;

        specialinvoke $r31.<com.android.server.pm.PackageUsage: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageUsage mPackageUsage> = $r31;

        $r32 = new com.android.server.pm.CompilerStats;

        specialinvoke $r32.<com.android.server.pm.CompilerStats: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats> = $r32;

        $r33 = new com.android.server.pm.PackageManagerService$1;

        specialinvoke $r33.<com.android.server.pm.PackageManagerService$1: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        r0.<com.android.server.pm.PackageManagerService: android.os.storage.StorageEventListener mStorageListener> = $r33;

        $r34 = new com.android.server.pm._$$Lambda$PackageManagerService$pVdeIe13BPz2j1_uK6W_NugHu2Q;

        specialinvoke $r34.<com.android.server.pm._$$Lambda$PackageManagerService$pVdeIe13BPz2j1_uK6W_NugHu2Q: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        r0.<com.android.server.pm.PackageManagerService: java.util.function.Predicate mIsSystemPackage> = $r34;

        r0.<com.android.server.pm.PackageManagerService: boolean mMediaMounted> = 0;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector> = r1;

        virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: void bootstrap(com.android.server.pm.PackageManagerService)>(r0);

        $r35 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.AppsFilter getAppsFilter()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter> = $r35;

        $r36 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.ComponentResolver getComponentResolver()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver> = $r36;

        $r37 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: android.content.Context getContext()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext> = $r37;

        $r38 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.Installer getInstaller()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller> = $r38;

        $r39 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: java.lang.Object getInstallLock()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock> = $r39;

        $r40 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: java.lang.Object getLock()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock> = $r40;

        $r41 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.permission.PermissionManagerServiceInternal getPermissionManagerServiceInternal()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager> = $r41;

        $r42 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.Settings getSettings()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings> = $r42;

        $r43 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.UserManagerService getUserManagerService()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager> = $r43;

        $r44 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.ApexManager apexManager>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager> = $r44;

        $r45 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.dex.ArtManagerService artManagerService>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService> = $r45;

        $r46 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.util.ArrayMap availableFeatures>;

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures> = $r46;

        $i1 = r2.<com.android.server.pm.PackageManagerService$TestParams: int defParseFlags>;

        r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = $i1;

        $r47 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.dex.DexManager dexManager>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager> = $r47;

        $r48 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.util.List dirsToScanAsSystem>;

        r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem> = $r48;

        $z0 = r2.<com.android.server.pm.PackageManagerService$TestParams: boolean factoryTest>;

        r0.<com.android.server.pm.PackageManagerService: boolean mFactoryTest> = $z0;

        $r49 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.os.Handler handler>;

        r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler> = $r49;

        $r50 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.ServiceThread handlerThread>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.ServiceThread mHandlerThread> = $r50;

        $r51 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.os.incremental.IncrementalManager incrementalManager>;

        r0.<com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager mIncrementalManager> = $r51;

        $r52 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.PackageInstallerService installerService>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService> = $r52;

        $r53 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.InstantAppRegistry instantAppRegistry>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry> = $r53;

        $r54 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.InstantAppResolverConnection instantAppResolverConnection>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection> = $r54;

        $r55 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.content.ComponentName instantAppResolverSettingsComponent>;

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mInstantAppResolverSettingsComponent> = $r55;

        $r56 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.PackageManagerService$IntentFilterVerifier intentFilterVerifier>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier> = $r56;

        $r57 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.content.ComponentName intentFilterVerifierComponent>;

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent> = $r57;

        $z1 = r2.<com.android.server.pm.PackageManagerService$TestParams: boolean isPreNmr1Upgrade>;

        r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNMR1Upgrade> = $z1;

        $z2 = r2.<com.android.server.pm.PackageManagerService$TestParams: boolean isPreNupgrade>;

        r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNUpgrade> = $z2;

        $z3 = r2.<com.android.server.pm.PackageManagerService$TestParams: boolean isPreQupgrade>;

        r0.<com.android.server.pm.PackageManagerService: boolean mIsPreQUpgrade> = $z3;

        $z4 = r2.<com.android.server.pm.PackageManagerService$TestParams: boolean isUpgrade>;

        r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade> = $z4;

        $r58 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.util.DisplayMetrics Metrics>;

        r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics> = $r58;

        $r59 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.ModuleInfoProvider moduleInfoProvider>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ModuleInfoProvider mModuleInfoProvider> = $r59;

        $r60 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.PackageManagerService$MoveCallbacks moveCallbacks>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks> = $r60;

        $z5 = r2.<com.android.server.pm.PackageManagerService$TestParams: boolean onlyCore>;

        r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore> = $z5;

        $r61 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.internal.content.om.OverlayConfig overlayConfig>;

        r0.<com.android.server.pm.PackageManagerService: com.android.internal.content.om.OverlayConfig mOverlayConfig> = $r61;

        $r62 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.PackageDexOptimizer packageDexOptimizer>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer> = $r62;

        $r63 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.parsing.PackageParser2$Callback packageParserCallback>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback> = $r63;

        $r64 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts pendingPackageBroadcasts>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts> = $r64;

        $r65 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.permission.IPermissionManager permissionManagerService>;

        r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService> = $r65;

        $r66 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.content.pm.PackageManagerInternal pmInternal>;

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal> = $r66;

        $r67 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.ProcessLoggingHandler processLoggingHandler>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProcessLoggingHandler mProcessLoggingHandler> = $r67;

        $r68 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.ProtectedPackages protectedPackages>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages> = $r68;

        $r69 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String[] separateProcesses>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = $r69;

        $r70 = r2.<com.android.server.pm.PackageManagerService$TestParams: com.android.server.pm.dex.ViewCompiler viewCompiler>;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ViewCompiler mViewCompiler> = $r70;

        $r71 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String requiredVerifierPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage> = $r71;

        $r72 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String requiredInstallerPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage> = $r72;

        $r73 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String requiredUninstallerPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredUninstallerPackage> = $r73;

        $r74 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String requiredPermissionControllerPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredPermissionControllerPackage> = $r74;

        $r75 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String setupWizardPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSetupWizardPackage> = $r75;

        $r76 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String storageManagerPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mStorageManagerPackage> = $r76;

        $r77 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String defaultTextClassifierPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mDefaultTextClassifierPackage> = $r77;

        $r78 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String systemTextClassifierPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSystemTextClassifierPackageName> = $r78;

        $r79 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String wellbeingPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mWellbeingPackage> = $r79;

        $r80 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String retailDemoPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRetailDemoPackage> = $r80;

        $r81 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String documenterPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mDocumenterPackage> = $r81;

        $r82 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String configuratorPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mConfiguratorPackage> = $r82;

        $r83 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String appPredictionServicePackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mAppPredictionServicePackage> = $r83;

        $r84 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String incidentReportApproverPackage>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mIncidentReportApproverPackage> = $r84;

        $r85 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String servicesExtensionPackageName>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mServicesExtensionPackageName> = $r85;

        $r86 = r2.<com.android.server.pm.PackageManagerService$TestParams: java.lang.String sharedSystemSharedLibraryPackageName>;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSharedSystemSharedLibraryPackageName> = $r86;

        $r87 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.content.ComponentName resolveComponentName>;

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName> = $r87;

        $r89 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r88 = r2.<com.android.server.pm.PackageManagerService$TestParams: android.util.ArrayMap packages>;

        virtualinvoke $r89.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r88);

        return;
    }

    public void <init>(com.android.server.pm.PackageManagerService$Injector, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z31, $z32, $z33, $z35, $z37, $z38, $z39, $z42, z43, z44, z45, z46, z47, z48, z49, z50, z51, z52, z53, z54, z55, z56, z57, z58, z59, $z62, $z63, $z65, z66, $z67, $z68, $z69, $z70, $z71;
        int i0, i1, i2, $i3, $i6, $i9, $i10, $i19, $i20, $i21, $i29, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i40, $i41, $i42, $i43, $i46, $i48, $i52, $i54, $i57, $i60, $i61, $i64, $i65, $i66, $i67, $i68, $i69, $i72, i78, $i79, i80, i81, i83, i84, i85, i86, i87, i89, i90, i91, i92, i93, $i94, i95, i97, i98, i99, i100, i101, i102, i105, i106, i107, i108, i109, i110, i111, i112, i113, i114, i116, i118, i120, i121, i122, i123, i124, i126, i127, i128, i129, i130, i131, i132, i133;
        java.util.ArrayList r1, $r12, $r73, $r406, r454;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, $r179, $r260, r456, r466, r521;
        android.util.ArrayMap $r3, $r5, $r13, $r14, $r15, $r90, $r96, $r101, $r116, $r130, $r166, $r168, $r172, $r175, $r200, $r202, $r212, $r214, $r215, $r231, $r239, $r245, $r248, $r252, $r263, $r287, $r299, $r301, $r315, $r322, $r400, r419, $r475, $r486, $r498;
        android.util.SparseIntArray $r4, $r11;
        android.util.ArraySet $r6, $r7, $r10, $r16, $r17, $r29, $r194, $r305, r433;
        android.util.SparseArray $r8, $r9, $r18, $r19, $r28, $r30;
        java.util.concurrent.atomic.AtomicInteger $r20, $r99, $r201;
        android.util.SparseBooleanArray $r21, $r22;
        android.content.pm.ActivityInfo $r23;
        android.content.pm.ResolveInfo $r24, $r25;
        java.util.HashMap $r26, r528;
        java.util.Map $r27, $r499;
        com.android.server.pm.PackageUsage $r31, $r117;
        com.android.server.pm.CompilerStats $r32, $r118;
        com.android.server.pm.PackageManagerService$1 $r33;
        com.android.server.pm._$$Lambda$PackageManagerService$pVdeIe13BPz2j1_uK6W_NugHu2Q $r34;
        com.android.server.utils.TimingsTraceAndSlog $r35;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r36;
        java.lang.Object $r37, $r38, $r39, $r52, $r137, $r145, $r146, $r150, $r156, $r169, $r176, $r183, $r191, $r196, $r213, $r216, $r229, $r230, $r232, $r240, $r250, $r253, $r289, $r292, $r296, $r303, $r316, $r328, $r329, $r334, $r335, $r338, $r379, $r385, $r389, $r394, r413, r414, r446, r447, r452, r453, $r476, r530;
        long $l4, $l11, $l12, $l14, $l16, $l17, $l23, $l24, $l25, $l26, $l27, $l44, $l45, $l47, $l50, $l51, $l55, $l58, $l59, $l62, $l63, l88, l103, l104, l117, l119, $l125;
        android.content.Context $r41, $r51, $r132, $r135, $r139, $r149, $r164, $r380, $r382, $r387, $r402;
        android.util.DisplayMetrics $r42, $r398, r438;
        com.android.server.pm.Installer $r43, $r138, $r197, $r378, $r384, $r388, $r395;
        com.android.server.pm.PackageManagerService$PackageManagerInternalImpl $r44;
        com.android.server.pm.UserManagerService $r45, $r129;
        com.android.server.pm.ComponentResolver $r46, $r489;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r47, $r124, $r271;
        com.android.server.pm.Settings $r48, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r86, $r89, $r92, $r100, $r115, $r127, $r165, $r167, $r171, $r174, $r184, $r222, $r233, $r247, $r255, $r257, $r273, $r298, $r300, $r314, $r319, $r321, $r325, $r474, $r500, $r515;
        android.os.IBinder $r49;
        android.permission.IPermissionManager $r50;
        android.os.incremental.IncrementalManager $r53;
        com.android.server.pm.PackageManagerService$2 $r54;
        com.android.server.pm.PackageManagerService$Injector $r55, $r85, $r180, $r192, r372, $r396, $r404;
        com.android.server.compat.PlatformCompat $r56;
        java.util.List $r74, $r75, $r78, $r88, $r97, $r143, $r182, $r221, $r228, $r291, $r295, r409, $r443, r464, r504, r511;
        java.lang.StringBuilder $r76, $r342, r432, r459, r460, r463, r467, r469, r473, r480, r482, r484, r485, r507, r508, r526, r532;
        java.lang.String $r80, $r93, $r94, $r110, $r113, $r122, $r123, $r125, $r147, $r155, $r157, $r159, $r160, $r161, $r162, $r163, $r170, $r173, $r177, $r178, $r190, $r195, $r198, $r199, $r211, $r220, $r227, $r237, $r251, $r254, $r256, $r262, $r266, $r269, $r270, $r272, $r275, $r278, $r284, $r286, $r290, $r304, $r307, $r310, $r312, $r318, $r324, $r332, $r337, $r340, $r345, $r353, $r355, $r359, $r361, r375, r420, r422, r427, r428, r429, $r462, r465, r468, r470, r478, $r487, $r488, $r490, $r491, $r492, $r493, $r494, $r495, $r496, $r497, r505, r518;
        com.android.server.ServiceThread $r81, r415;
        android.os.Looper $r82, $r392;
        com.android.server.Watchdog $r83;
        android.os.Handler $r84;
        android.os.UserManagerInternal $r87, $r181;
        java.io.File $r91, $r95, $r244, $r258, $r259, $r261, $r285, $r293, $r294, $r297, $r317, $r327, r430, $r439, r445, r450, r471, r479;
        com.android.internal.content.om.OverlayConfig $r98;
        float $f0, $f1;
        java.util.concurrent.Future $r126;
        android.content.pm.PackageInfo $r128;
        java.util.Collection $r131, $r246, $r249, $r302, $r501;
        com.android.server.pm.dex.DexManager $r133, $r381;
        com.android.server.pm.ModuleInfoProvider $r134;
        java.lang.Runtime $r136;
        android.content.res.Resources $r140, $r426;
        java.lang.Integer $r141;
        android.content.pm.ParceledListSlice $r142;
        android.content.ComponentName $r148, $r151, $r152, $r313, r516;
        com.android.server.pm.InstantAppRegistry $r158, r418;
        com.android.server.pm.PackageAbiHelper $r193;
        com.android.server.pm.PackageSetting $r320, r425, r435, r458, r461, r477, r513, r514, r522;
        java.lang.String[] $r330, $r331, $r341, r437;
        android.content.pm.SharedLibraryInfo $r333, r424;
        com.android.server.SystemConfig$SharedLibraryEntry $r336, r423;
        com.android.server.pm.ApexManager$ActiveApexInfo $r339;
        java.lang.Throwable $r346, $r348, $r349, $r350, $r356, $r362, $r363, $r364, $r365, $r366, $r367, $r368, $r369, $r371, r421, r535;
        com.android.server.pm.Installer$InstallerException $r347;
        com.android.server.pm.PackageManagerException $r351, $r357, $r370, r472;
        com.android.server.pm.PackageDexOptimizer $r377, $r383;
        com.android.server.pm.dex.ArtManagerService $r386;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r390;
        com.android.server.FgThread $r391;
        com.android.server.pm.dex.ViewCompiler $r393;
        android.hardware.display.DisplayManager $r397;
        com.android.server.SystemConfig r399;
        com.android.server.pm.ProtectedPackages $r401;
        com.android.server.pm.ApexManager $r403, $r408, $r442;
        com.android.server.pm.AppsFilter $r405;
        com.android.server.pm.PackageManagerService$ScanPartition r410, r444, r449, r481;
        com.android.server.pm.PackageManagerService$PackageHandler r416;
        com.android.server.pm.ProcessLoggingHandler r417;
        com.android.server.pm.Settings$VersionInfo r431;
        java.util.Iterator r434, r455, r457, r502, r509, r520;
        com.android.server.pm.parsing.PackageParser2 r436;
        com.android.server.pm.parsing.PackageParser2$Callback $r440;
        java.util.concurrent.ExecutorService r441;
        com.android.server.pm._$$Lambda$PackageManagerService$NOhDFtf63kwSrt001pe3Z5eI1EM r451;
        com.android.server.pm.SharedUserSetting r503;
        android.content.pm.UserInfo r510;
        com.android.server.pm._$$Lambda$PackageManagerService$_SI_LHw6Eiq8VNiFLLjJdCbGgSQ r512;
        com.android.server.pm.PackageManagerService$IntentVerifierProxy r517;
        int[] r519;
        com.android.server.pm._$$Lambda$PackageManagerService$uKFiJiR_QQI8RsVT7igWuZ6FwAA r523;
        com.android.server.pm.PackageInstallerService r524;
        android.util.Pair r525;
        com.android.server.pm.InstantAppResolverConnection r527;
        java.lang.IllegalStateException r531, r533;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r372 := @parameter0: com.android.server.pm.PackageManagerService$Injector;

        z43 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.content.pm.IPackageManager$Stub: void <init>()>();

        $i3 = <android.os.Build$VERSION: int SDK_INT>;

        r0.<com.android.server.pm.PackageManagerService: int mSdkVersion> = $i3;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mIsolatedOwners> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter> = $r5;

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingPackages> = null;

        $r6 = new android.util.ArraySet;

        specialinvoke $r6.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages> = $r6;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages> = $r8;

        $r9 = new android.util.SparseArray;

        specialinvoke $r9.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackagesSequenceNumbers> = $r9;

        $r10 = new android.util.ArraySet;

        specialinvoke $r10.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers> = $r10;

        $r11 = new android.util.SparseIntArray;

        specialinvoke $r11.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mDefaultPermissionsGrantedUsers> = $r11;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPackageChangeObservers> = $r12;

        $r13 = new android.util.ArrayMap;

        specialinvoke $r13.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries> = $r13;

        $r14 = new android.util.ArrayMap;

        specialinvoke $r14.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mStaticLibsByDeclaringPackage> = $r14;

        $r15 = new android.util.ArrayMap;

        specialinvoke $r15.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation> = $r15;

        $r16 = new android.util.ArraySet;

        specialinvoke $r16.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferredPackages> = $r16;

        $r17 = new android.util.ArraySet;

        specialinvoke $r17.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts> = $r17;

        $r18 = new android.util.SparseArray;

        specialinvoke $r18.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification> = $r18;

        $r19 = new android.util.SparseArray;

        specialinvoke $r19.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingEnableRollback> = $r19;

        $r20 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r20.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId> = $r20;

        $r21 = new android.util.SparseBooleanArray;

        specialinvoke $r21.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging> = $r21;

        r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = 0;

        r0.<com.android.server.pm.PackageManagerService: int mPendingEnableRollbackToken> = 0;

        $r22 = new android.util.SparseBooleanArray;

        specialinvoke $r22.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mWebInstantAppsDisabled> = $r22;

        $r23 = new android.content.pm.ActivityInfo;

        specialinvoke $r23.<android.content.pm.ActivityInfo: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity> = $r23;

        $r24 = new android.content.pm.ResolveInfo;

        specialinvoke $r24.<android.content.pm.ResolveInfo: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo> = $r24;

        r0.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced> = 0;

        r0.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken> = 0;

        $r25 = new android.content.pm.ResolveInfo;

        specialinvoke $r25.<android.content.pm.ResolveInfo: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo> = $r25;

        $r26 = new java.util.HashMap;

        specialinvoke $r26.<java.util.HashMap: void <init>()>();

        $r27 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r26);

        r0.<com.android.server.pm.PackageManagerService: java.util.Map mNoKillInstallObservers> = $r27;

        $r28 = new android.util.SparseArray;

        specialinvoke $r28.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mIntentFilterVerificationStates> = $r28;

        $r29 = new android.util.ArraySet;

        specialinvoke $r29.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers> = $r29;

        $r30 = new android.util.SparseArray;

        specialinvoke $r30.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mRunningInstalls> = $r30;

        r0.<com.android.server.pm.PackageManagerService: int mNextInstallToken> = 1;

        $r31 = new com.android.server.pm.PackageUsage;

        specialinvoke $r31.<com.android.server.pm.PackageUsage: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageUsage mPackageUsage> = $r31;

        $r32 = new com.android.server.pm.CompilerStats;

        specialinvoke $r32.<com.android.server.pm.CompilerStats: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats> = $r32;

        $r33 = new com.android.server.pm.PackageManagerService$1;

        specialinvoke $r33.<com.android.server.pm.PackageManagerService$1: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        r0.<com.android.server.pm.PackageManagerService: android.os.storage.StorageEventListener mStorageListener> = $r33;

        $r34 = new com.android.server.pm._$$Lambda$PackageManagerService$pVdeIe13BPz2j1_uK6W_NugHu2Q;

        specialinvoke $r34.<com.android.server.pm._$$Lambda$PackageManagerService$pVdeIe13BPz2j1_uK6W_NugHu2Q: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        r0.<com.android.server.pm.PackageManagerService: java.util.function.Predicate mIsSystemPackage> = $r34;

        r0.<com.android.server.pm.PackageManagerService: boolean mMediaMounted> = 0;

        staticinvoke <android.content.pm.PackageManager: void disableApplicationInfoCache()>();

        staticinvoke <android.content.pm.PackageManager: void disablePackageInfoCache()>();

        staticinvoke <android.content.pm.PackageManager: void corkPackageInfoCache()>();

        $r35 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String,long)>("PackageManagerTiming", 262144L);

        $r36 = new com.android.server.pm.PackageManagerService$PendingPackageBroadcasts;

        specialinvoke $r36.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts> = $r36;

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector> = r372;

        virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: void bootstrap(com.android.server.pm.PackageManagerService)>(r0);

        $r37 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: java.lang.Object getLock()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock> = $r37;

        $r38 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: java.lang.Object getInstallLock()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock> = $r38;

        $r39 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        staticinvoke <com.android.server.LockGuard: java.lang.Object installLock(java.lang.Object,int)>($r39, 3);

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3060, $l4);

        $i6 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i6 > 0 goto label001;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "**** ro.build.version.sdk not set!");

     label001:
        $r41 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: android.content.Context getContext()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext> = $r41;

        r0.<com.android.server.pm.PackageManagerService: boolean mFactoryTest> = z0;

        r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore> = z43;

        $r42 = new android.util.DisplayMetrics;

        specialinvoke $r42.<android.util.DisplayMetrics: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics> = $r42;

        $r43 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.Installer getInstaller()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller> = $r43;

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("createSubComponents");

        $r44 = new com.android.server.pm.PackageManagerService$PackageManagerInternalImpl;

        specialinvoke $r44.<com.android.server.pm.PackageManagerService$PackageManagerInternalImpl: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(r0, null);

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal> = $r44;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Landroid/content/pm/PackageManagerInternal;", $r44);

        $r45 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.UserManagerService getUserManagerService()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager> = $r45;

        $r46 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.ComponentResolver getComponentResolver()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver> = $r46;

        $r47 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.permission.PermissionManagerServiceInternal getPermissionManagerServiceInternal()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager> = $r47;

        $r48 = virtualinvoke r372.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.Settings getSettings()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings> = $r48;

        $r49 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("permissionmgr");

        $r50 = (android.permission.IPermissionManager) $r49;

        r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService> = $r50;

        $r51 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r52 = virtualinvoke $r51.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("incremental");

        $r53 = (android.os.incremental.IncrementalManager) $r52;

        r0.<com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager mIncrementalManager> = $r53;

        $r54 = new com.android.server.pm.PackageManagerService$2;

        $r55 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r56 = virtualinvoke $r55.<com.android.server.pm.PackageManagerService$Injector: com.android.server.compat.PlatformCompat getCompatibility()>();

        specialinvoke $r54.<com.android.server.pm.PackageManagerService$2: void <init>(com.android.server.pm.PackageManagerService,com.android.server.compat.PlatformCompat)>(r0, $r56);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback> = $r54;

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("addSharedUsers");

        $r57 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r57.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.system", 1000, 1, 8);

        $r59 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r59.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.phone", 1001, 1, 8);

        $r61 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r61.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.log", 1007, 1, 8);

        $r63 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r63.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.nfc", 1027, 1, 8);

        $r65 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r65.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.bluetooth", 1002, 1, 8);

        $r67 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r67.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.shell", 2000, 1, 8);

        $r69 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r69.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.se", 1068, 1, 8);

        $r71 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r71.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int,int)>("android.uid.networkstack", 1073, 1, 8);

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        r375 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("debug.separate_processes");

        if r375 == null goto label003;

        $i72 = virtualinvoke r375.<java.lang.String: int length()>();

        if $i72 <= 0 goto label003;

        $r340 = "*";

        $z42 = virtualinvoke $r340.<java.lang.String: boolean equals(java.lang.Object)>(r375);

        if $z42 == 0 goto label002;

        r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = 2;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = null;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Running with debug.separate_processes: * (ALL)");

        goto label004;

     label002:
        r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = 0;

        $r341 = virtualinvoke r375.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = $r341;

        $r342 = new java.lang.StringBuilder;

        specialinvoke $r342.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r342.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running with debug.separate_processes: ");

        virtualinvoke $r342.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r375);

        $r345 = virtualinvoke $r342.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r345);

        goto label004;

     label003:
        r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags> = 0;

        r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses> = null;

     label004:
        $r377 = new com.android.server.pm.PackageDexOptimizer;

        $r378 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r379 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        $r380 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        specialinvoke $r377.<com.android.server.pm.PackageDexOptimizer: void <init>(com.android.server.pm.Installer,java.lang.Object,android.content.Context,java.lang.String)>($r378, $r379, $r380, "*dexopt*");

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer> = $r377;

        $r381 = new com.android.server.pm.dex.DexManager;

        $r382 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r383 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        $r384 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r385 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        specialinvoke $r381.<com.android.server.pm.dex.DexManager: void <init>(android.content.Context,android.content.pm.IPackageManager,com.android.server.pm.PackageDexOptimizer,com.android.server.pm.Installer,java.lang.Object)>($r382, r0, $r383, $r384, $r385);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager> = $r381;

        $r386 = new com.android.server.pm.dex.ArtManagerService;

        $r387 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r388 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r389 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        specialinvoke $r386.<com.android.server.pm.dex.ArtManagerService: void <init>(android.content.Context,android.content.pm.IPackageManager,com.android.server.pm.Installer,java.lang.Object)>($r387, r0, $r388, $r389);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService> = $r386;

        $r390 = new com.android.server.pm.PackageManagerService$MoveCallbacks;

        $r391 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r392 = virtualinvoke $r391.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r390.<com.android.server.pm.PackageManagerService$MoveCallbacks: void <init>(android.os.Looper)>($r392);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks> = $r390;

        $r393 = new com.android.server.pm.dex.ViewCompiler;

        $r394 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        $r395 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        specialinvoke $r393.<com.android.server.pm.dex.ViewCompiler: void <init>(java.lang.Object,com.android.server.pm.Installer)>($r394, $r395);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ViewCompiler mViewCompiler> = $r393;

        $r396 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r397 = virtualinvoke $r396.<com.android.server.pm.PackageManagerService$Injector: android.hardware.display.DisplayManager getDisplayManager()>();

        $r398 = r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        staticinvoke <com.android.server.pm.PackageManagerService: void getDefaultDisplayMetrics(android.hardware.display.DisplayManager,android.util.DisplayMetrics)>($r397, $r398);

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("get system config");

        r399 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r400 = virtualinvoke r399.<com.android.server.SystemConfig: android.util.ArrayMap getAvailableFeatures()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures> = $r400;

        staticinvoke <android.app.ApplicationPackageManager: void invalidateHasSystemFeatureCache()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r401 = new com.android.server.pm.ProtectedPackages;

        $r402 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        specialinvoke $r401.<com.android.server.pm.ProtectedPackages: void <init>(android.content.Context)>($r402);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages> = $r401;

        $r403 = staticinvoke <com.android.server.pm.ApexManager: com.android.server.pm.ApexManager getInstance()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager> = $r403;

        $r404 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r405 = virtualinvoke $r404.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.AppsFilter getAppsFilter()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter> = $r405;

        $r406 = new java.util.ArrayList;

        specialinvoke $r406.<java.util.ArrayList: void <init>()>();

        $r408 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        r409 = virtualinvoke $r408.<com.android.server.pm.ApexManager: java.util.List getActiveApexInfos()>();

        i78 = 0;

     label005:
        $i79 = interfaceinvoke r409.<java.util.List: int size()>();

        if i78 >= $i79 goto label007;

        $r338 = interfaceinvoke r409.<java.util.List: java.lang.Object get(int)>(i78);

        $r339 = (com.android.server.pm.ApexManager$ActiveApexInfo) $r338;

        r410 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanPartition resolveApexToScanPartition(com.android.server.pm.ApexManager$ActiveApexInfo)>($r339);

        if r410 == null goto label006;

        interfaceinvoke $r406.<java.util.List: boolean add(java.lang.Object)>(r410);

     label006:
        i78 = i78 + 1;

        goto label005;

     label007:
        $r73 = new java.util.ArrayList;

        specialinvoke $r73.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem> = $r73;

        $r74 = <com.android.server.pm.PackageManagerService: java.util.List SYSTEM_PARTITIONS>;

        interfaceinvoke $r73.<java.util.List: boolean addAll(java.util.Collection)>($r74);

        $r75 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        interfaceinvoke $r75.<java.util.List: boolean addAll(java.util.Collection)>($r406);

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Directories scanned as system partitions: ");

        $r78 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r78);

        $r80 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r80);

        r413 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r413;

     label008:
        r414 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r414;

     label009:
        r415 = new com.android.server.ServiceThread;

        specialinvoke r415.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("PackageManager", 10, 1);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.ServiceThread mHandlerThread> = r415;

        virtualinvoke r415.<com.android.server.ServiceThread: void start()>();

        r416 = new com.android.server.pm.PackageManagerService$PackageHandler;

        $r81 = r0.<com.android.server.pm.PackageManagerService: com.android.server.ServiceThread mHandlerThread>;

        $r82 = virtualinvoke $r81.<com.android.server.ServiceThread: android.os.Looper getLooper()>();

        specialinvoke r416.<com.android.server.pm.PackageManagerService$PackageHandler: void <init>(com.android.server.pm.PackageManagerService,android.os.Looper)>(r0, $r82);

        r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler> = r416;

        r417 = new com.android.server.pm.ProcessLoggingHandler;

        specialinvoke r417.<com.android.server.pm.ProcessLoggingHandler: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProcessLoggingHandler mProcessLoggingHandler> = r417;

        $r83 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        $r84 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r83.<com.android.server.Watchdog: void addThread(android.os.Handler,long)>($r84, 600000L);

        r418 = new com.android.server.pm.InstantAppRegistry;

        specialinvoke r418.<com.android.server.pm.InstantAppRegistry: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry> = r418;

     label010:
        r419 = virtualinvoke r399.<com.android.server.SystemConfig: android.util.ArrayMap getSharedLibraries()>();

        i80 = virtualinvoke r419.<android.util.ArrayMap: int size()>();

     label011:
        i81 = 0;

     label012:
        if i81 >= i80 goto label016;

     label013:
        $r334 = virtualinvoke r419.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i81);

        r420 = (java.lang.String) $r334;

        $r335 = virtualinvoke r419.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i81);

        $r336 = (com.android.server.SystemConfig$SharedLibraryEntry) $r335;

        $r337 = $r336.<com.android.server.SystemConfig$SharedLibraryEntry: java.lang.String filename>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean addBuiltInSharedLibraryLocked(java.lang.String,java.lang.String)>($r337, r420);

     label014:
        i81 = i81 + 1;

        goto label012;

     label015:
        $r367 := @caughtexception;

        r421 = $r367;

        goto label765;

     label016:
        i83 = 0;

     label017:
        if i83 >= i80 goto label031;

     label018:
        $r328 = virtualinvoke r419.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i83);

        r422 = (java.lang.String) $r328;

        $r329 = virtualinvoke r419.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i83);

        r423 = (com.android.server.SystemConfig$SharedLibraryEntry) $r329;

     label019:
        $r330 = r423.<com.android.server.SystemConfig$SharedLibraryEntry: java.lang.String[] dependencies>;

        i84 = lengthof $r330;

     label020:
        i85 = 0;

     label021:
        if i85 >= i84 goto label028;

     label022:
        $r331 = r423.<com.android.server.SystemConfig$SharedLibraryEntry: java.lang.String[] dependencies>;

        $r332 = $r331[i85];

        r424 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>($r332, -1L);

     label023:
        if r424 == null goto label026;

     label024:
        $r333 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>(r422, -1L);

        virtualinvoke $r333.<android.content.pm.SharedLibraryInfo: void addDependency(android.content.pm.SharedLibraryInfo)>(r424);

     label025:
        goto label026;

     label026:
        i85 = i85 + 1;

        goto label021;

     label027:
        $r364 := @caughtexception;

        r421 = $r364;

        goto label765;

     label028:
        i83 = i83 + 1;

        goto label017;

     label029:
        $r363 := @caughtexception;

        r421 = $r363;

        goto label765;

     label030:
        $r348 := @caughtexception;

        r421 = $r348;

        goto label765;

     label031:
        staticinvoke <com.android.server.pm.SELinuxMMAC: boolean readInstallPolicy()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("loadFallbacks");

        staticinvoke <android.content.pm.FallbackCategoryProvider: void loadFallbacks()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("read user settings");

        $r86 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r85 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r87 = virtualinvoke $r85.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $r88 = virtualinvoke $r87.<android.os.UserManagerInternal: java.util.List getUsers(boolean)>(0);

        $z4 = virtualinvoke $r86.<com.android.server.pm.Settings: boolean readLPw(java.util.List)>($r88);

        if $z4 != 0 goto label033;

     label032:
        z44 = 1;

        goto label034;

     label033:
        z44 = 0;

     label034:
        r0.<com.android.server.pm.PackageManagerService: boolean mFirstBoot> = z44;

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r89 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r90 = $r89.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i86 = virtualinvoke $r90.<android.util.ArrayMap: int size()>();

     label035:
        i87 = i86 + -1;

     label036:
        if i87 < 0 goto label040;

     label037:
        $r314 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r315 = $r314.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r316 = virtualinvoke $r315.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i87);

        r425 = (com.android.server.pm.PackageSetting) $r316;

        $z38 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isExternal(com.android.server.pm.PackageSetting)>(r425);

        if $z38 != 0 goto label039;

        $r317 = r425.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        if $r317 == null goto label038;

        $r327 = r425.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z39 = virtualinvoke $r327.<java.io.File: boolean exists()>();

        if $z39 != 0 goto label039;

     label038:
        $r319 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r318 = r425.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r320 = virtualinvoke $r319.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r318);

        if $r320 == null goto label039;

        $r321 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r322 = $r321.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        virtualinvoke $r322.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i87);

        $r325 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r324 = r425.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r325.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>($r324);

     label039:
        i87 = i87 + -1;

        goto label036;

     label040:
        z45 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

     label041:
        if z45 != 0 goto label043;

     label042:
        $z37 = r0.<com.android.server.pm.PackageManagerService: boolean mFirstBoot>;

        if $z37 == 0 goto label043;

        staticinvoke <com.android.server.pm.PackageManagerService: void requestCopyPreoptedFiles()>();

     label043:
        $r426 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r427 = virtualinvoke $r426.<android.content.res.Resources: java.lang.String getString(int)>(17039848);

        z46 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r427);

     label044:
        if z46 != 0 goto label046;

     label045:
        $r313 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r427);

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName> = $r313;

     label046:
        l88 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3070, l88);

        r428 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("BOOTCLASSPATH");

        r429 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SYSTEMSERVERCLASSPATH");

     label047:
        if r428 != null goto label049;

     label048:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "No BOOTCLASSPATH found!");

     label049:
        if r429 != null goto label051;

     label050:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "No SYSTEMSERVERCLASSPATH found!");

     label051:
        r430 = new java.io.File;

        $r91 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke r430.<java.io.File: void <init>(java.io.File,java.lang.String)>($r91, "framework");

     label052:
        $r92 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r431 = virtualinvoke $r92.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getInternalVersion()>();

        $r94 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r93 = r431.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint>;

        $z5 = virtualinvoke $r94.<java.lang.String: boolean equals(java.lang.Object)>($r93);

        if $z5 != 0 goto label054;

     label053:
        z47 = 1;

        goto label055;

     label054:
        z47 = 0;

     label055:
        r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade> = z47;

     label056:
        if z47 == 0 goto label058;

     label057:
        r432 = new java.lang.StringBuilder;

        specialinvoke r432.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r432.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading from ");

        $r307 = r431.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint>;

        virtualinvoke r432.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r307);

        virtualinvoke r432.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r310 = <android.os.Build: java.lang.String FINGERPRINT>;

        virtualinvoke r432.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r310);

        $r312 = virtualinvoke r432.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(4, $r312);

     label058:
        z48 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

     label059:
        if z48 == 0 goto label062;

     label060:
        i89 = r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

     label061:
        if i89 > 22 goto label062;

        z49 = 1;

        goto label063;

     label062:
        z49 = 0;

     label063:
        r0.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps> = z49;

        z50 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

     label064:
        if z50 == 0 goto label067;

     label065:
        i90 = r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

     label066:
        if i90 >= 24 goto label067;

        z51 = 1;

        goto label068;

     label067:
        z51 = 0;

     label068:
        r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNUpgrade> = z51;

        z52 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

     label069:
        if z52 == 0 goto label072;

     label070:
        i91 = r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

     label071:
        if i91 >= 25 goto label072;

        z53 = 1;

        goto label073;

     label072:
        z53 = 0;

     label073:
        r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNMR1Upgrade> = z53;

        z54 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

     label074:
        if z54 == 0 goto label077;

     label075:
        i92 = r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

     label076:
        if i92 >= 29 goto label077;

        z55 = 1;

        goto label078;

     label077:
        z55 = 0;

     label078:
        r0.<com.android.server.pm.PackageManagerService: boolean mIsPreQUpgrade> = z55;

        z56 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

     label079:
        if z56 == 0 goto label084;

     label080:
        r433 = new android.util.ArraySet;

        $r298 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r299 = $r298.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i69 = virtualinvoke $r299.<android.util.ArrayMap: int size()>();

        specialinvoke r433.<android.util.ArraySet: void <init>(int)>($i69);

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingPackages> = r433;

        $r300 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r301 = $r300.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r302 = virtualinvoke $r301.<android.util.ArrayMap: java.util.Collection values()>();

        r434 = interfaceinvoke $r302.<java.util.Collection: java.util.Iterator iterator()>();

     label081:
        $z35 = interfaceinvoke r434.<java.util.Iterator: boolean hasNext()>();

        if $z35 == 0 goto label083;

        $r303 = interfaceinvoke r434.<java.util.Iterator: java.lang.Object next()>();

        r435 = (com.android.server.pm.PackageSetting) $r303;

        $r305 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingPackages>;

        $r304 = r435.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r305.<android.util.ArraySet: boolean add(java.lang.Object)>($r304);

     label082:
        goto label081;

     label083:
        goto label084;

     label084:
        $r95 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File preparePackageParserCache()>();

        r0.<com.android.server.pm.PackageManagerService: java.io.File mCacheDir> = $r95;

        z57 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

     label085:
        if z57 != 0 goto label089;

     label086:
        z58 = r0.<com.android.server.pm.PackageManagerService: boolean mFirstBoot>;

     label087:
        if z58 == 0 goto label088;

        goto label089;

     label088:
        i93 = 528;

        goto label090;

     label089:
        i93 = 528 | 4096;

     label090:
        $i94 = r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        i95 = $i94 | 16;

     label091:
        i0 = i93 | 65536;

     label092:
        r436 = new com.android.server.pm.parsing.PackageParser2;

        r437 = r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses>;

        z59 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

     label093:
        r438 = r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

     label094:
        $r439 = r0.<com.android.server.pm.PackageManagerService: java.io.File mCacheDir>;

        $r440 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback>;

        specialinvoke r436.<com.android.server.pm.parsing.PackageParser2: void <init>(java.lang.String[],boolean,android.util.DisplayMetrics,java.io.File,com.android.server.pm.parsing.PackageParser2$Callback)>(r437, z59, r438, $r439, $r440);

     label095:
        r441 = staticinvoke <com.android.server.pm.ParallelPackageParser: java.util.concurrent.ExecutorService makeExecutorService()>();

        $r442 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        virtualinvoke $r442.<com.android.server.pm.ApexManager: void scanApexPackagesTraced(com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r436, r441);

        $r443 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        i97 = interfaceinvoke $r443.<java.util.List: int size()>();

     label096:
        i98 = i97 + -1;

     label097:
        if i98 < 0 goto label106;

     label098:
        $r295 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        $r296 = interfaceinvoke $r295.<java.util.List: java.lang.Object get(int)>(i98);

        r444 = (com.android.server.pm.PackageManagerService$ScanPartition) $r296;

        $r297 = virtualinvoke r444.<com.android.server.pm.PackageManagerService$ScanPartition: java.io.File getOverlayFolder()>();

        if $r297 != null goto label100;

     label099:
        goto label103;

     label100:
        r445 = virtualinvoke r444.<com.android.server.pm.PackageManagerService$ScanPartition: java.io.File getOverlayFolder()>();

        i99 = r444.<com.android.server.pm.PackageManagerService$ScanPartition: int scanFlag>;

     label101:
        r446 = r414;

        r447 = r413;

     label102:
        $i68 = i0 | i99;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void scanDirTracedLI(java.io.File,int,int,long,com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r445, i95, $i68, 0L, r436, r441);

     label103:
        i98 = i98 + -1;

        goto label097;

     label104:
        $r346 := @caughtexception;

        r421 = $r346;

        r413 = r447;

        r414 = r446;

        goto label765;

     label105:
        $r368 := @caughtexception;

        r421 = $r368;

        goto label765;

     label106:
        $i9 = i0 | 1;

        $i10 = $i9 | 131072;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void scanDirTracedLI(java.io.File,int,int,long,com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r430, i95, $i10, 0L, r436, r441);

        $r96 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z6 = virtualinvoke $r96.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>("android");

        if $z6 == 0 goto label755;

        $r97 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        i100 = interfaceinvoke $r97.<java.util.List: int size()>();

     label107:
        i101 = 0;

     label108:
        if i101 >= i100 goto label116;

     label109:
        $r291 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        $r292 = interfaceinvoke $r291.<java.util.List: java.lang.Object get(int)>(i101);

        r449 = (com.android.server.pm.PackageManagerService$ScanPartition) $r292;

        $r293 = virtualinvoke r449.<com.android.server.pm.PackageManagerService$ScanPartition: java.io.File getPrivAppFolder()>();

        if $r293 == null goto label112;

        r450 = virtualinvoke r449.<com.android.server.pm.PackageManagerService$ScanPartition: java.io.File getPrivAppFolder()>();

        i102 = r449.<com.android.server.pm.PackageManagerService$ScanPartition: int scanFlag>;

     label110:
        $i66 = i0 | 131072;

        $i67 = i102 | $i66;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void scanDirTracedLI(java.io.File,int,int,long,com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r450, i95, $i67, 0L, r436, r441);

     label111:
        goto label112;

     label112:
        $r294 = virtualinvoke r449.<com.android.server.pm.PackageManagerService$ScanPartition: java.io.File getAppFolder()>();

        $i64 = r449.<com.android.server.pm.PackageManagerService$ScanPartition: int scanFlag>;

        $i65 = i0 | $i64;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void scanDirTracedLI(java.io.File,int,int,long,com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>($r294, i95, $i65, 0L, r436, r441);

     label113:
        i101 = i101 + 1;

        goto label108;

     label114:
        $r366 := @caughtexception;

        r421 = $r366;

        goto label770;

     label115:
        $r365 := @caughtexception;

        r421 = $r365;

        goto label762;

     label116:
        r451 = new com.android.server.pm._$$Lambda$PackageManagerService$NOhDFtf63kwSrt001pe3Z5eI1EM;

     label117:
        r452 = r413;

        r453 = r414;

     label118:
        specialinvoke r451.<com.android.server.pm._$$Lambda$PackageManagerService$NOhDFtf63kwSrt001pe3Z5eI1EM: void <init>(com.android.server.pm.PackageManagerService)>(r0);

     label119:
        r452 = r413;

        r453 = r414;

     label120:
        $r98 = staticinvoke <com.android.internal.content.om.OverlayConfig: com.android.internal.content.om.OverlayConfig initializeSystemInstance(com.android.internal.content.om.OverlayConfig$PackageProvider)>(r451);

        r0.<com.android.server.pm.PackageManagerService: com.android.internal.content.om.OverlayConfig mOverlayConfig> = $r98;

     label121:
        r452 = r413;

        r453 = r414;

     label122:
        r1 = new java.util.ArrayList;

     label123:
        r452 = r413;

        r453 = r414;

     label124:
        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label125:
        r452 = r413;

        r453 = r414;

     label126:
        r454 = new java.util.ArrayList;

     label127:
        r452 = r413;

        r453 = r414;

     label128:
        specialinvoke r454.<java.util.ArrayList: void <init>()>();

     label129:
        r452 = r413;

        r453 = r414;

     label130:
        $z7 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z7 != 0 goto label218;

     label131:
        r452 = r413;

        r453 = r414;

     label132:
        $r245 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r246 = virtualinvoke $r245.<android.util.ArrayMap: java.util.Collection values()>();

        r455 = interfaceinvoke $r246.<java.util.Collection: java.util.Iterator iterator()>();

     label133:
        r452 = r413;

        r453 = r414;

     label134:
        $z28 = interfaceinvoke r455.<java.util.Iterator: boolean hasNext()>();

        if $z28 == 0 goto label142;

     label135:
        r452 = r413;

        r453 = r414;

     label136:
        $r289 = interfaceinvoke r455.<java.util.Iterator: java.lang.Object next()>();

        r456 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r289;

     label137:
        r452 = r413;

        r453 = r414;

     label138:
        $z33 = interfaceinvoke r456.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z33 == 0 goto label141;

     label139:
        r452 = r413;

        r453 = r414;

     label140:
        $r290 = interfaceinvoke r456.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke r454.<java.util.List: boolean add(java.lang.Object)>($r290);

     label141:
        goto label133;

     label142:
        r452 = r413;

        r453 = r414;

     label143:
        $r247 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r248 = $r247.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r249 = virtualinvoke $r248.<android.util.ArrayMap: java.util.Collection values()>();

        r457 = interfaceinvoke $r249.<java.util.Collection: java.util.Iterator iterator()>();

     label144:
        r452 = r413;

        r453 = r414;

     label145:
        $z62 = interfaceinvoke r457.<java.util.Iterator: boolean hasNext()>();

        if $z62 == 0 goto label217;

     label146:
        r452 = r413;

        r453 = r414;

     label147:
        $r250 = interfaceinvoke r457.<java.util.Iterator: java.lang.Object next()>();

        r458 = (com.android.server.pm.PackageSetting) $r250;

     label148:
        r452 = r413;

        r453 = r414;

     label149:
        $i60 = r458.<com.android.server.pm.PackageSetting: int pkgFlags>;

        i132 = (int) 1;

        $i61 = $i60 & i132;

        if $i61 != 0 goto label151;

     label150:
        goto label144;

     label151:
        r452 = r413;

        r453 = r414;

     label152:
        $r252 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r251 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r253 = virtualinvoke $r252.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r251);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r253;

     label153:
        if r2 == null goto label183;

        r452 = r413;

        r453 = r414;

     label154:
        $r273 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r272 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z32 = virtualinvoke $r273.<com.android.server.pm.Settings: boolean isDisabledSystemPackageLPr(java.lang.String)>($r272);

        if $z32 == 0 goto label182;

     label155:
        r452 = r413;

        r453 = r414;

     label156:
        r459 = new java.lang.StringBuilder;

     label157:
        r452 = r413;

        r453 = r414;

     label158:
        specialinvoke r459.<java.lang.StringBuilder: void <init>()>();

     label159:
        r452 = r413;

        r453 = r414;

     label160:
        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting better updated system app for ");

     label161:
        r452 = r413;

        r453 = r414;

     label162:
        $r275 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r275);

     label163:
        r452 = r413;

        r453 = r414;

     label164:
        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; removing system app.  Last known codePath=");

     label165:
        r452 = r413;

        r453 = r414;

     label166:
        $r278 = r458.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r278);

     label167:
        r452 = r413;

        r453 = r414;

     label168:
        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", versionCode=");

     label169:
        r452 = r413;

        r453 = r414;

     label170:
        $l62 = r458.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l62);

     label171:
        r452 = r413;

        r453 = r414;

     label172:
        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; scanned versionCode=");

     label173:
        r452 = r413;

        r453 = r414;

     label174:
        $l63 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        virtualinvoke r459.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l63);

     label175:
        r452 = r413;

        r453 = r414;

     label176:
        $r284 = virtualinvoke r459.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r284);

     label177:
        r452 = r413;

        r453 = r414;

     label178:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r2, 1);

     label179:
        r452 = r413;

        r453 = r414;

     label180:
        $r287 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r286 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r285 = r458.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        virtualinvoke $r287.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r286, $r285);

     label181:
        goto label144;

     label182:
        goto label144;

     label183:
        r452 = r413;

        r453 = r414;

     label184:
        $r255 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r254 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z29 = virtualinvoke $r255.<com.android.server.pm.Settings: boolean isDisabledSystemPackageLPr(java.lang.String)>($r254);

        if $z29 != 0 goto label202;

     label185:
        r452 = r413;

        r453 = r414;

     label186:
        interfaceinvoke r457.<java.util.Iterator: void remove()>();

     label187:
        r452 = r413;

        r453 = r414;

     label188:
        r460 = new java.lang.StringBuilder;

     label189:
        r452 = r413;

        r453 = r414;

     label190:
        specialinvoke r460.<java.lang.StringBuilder: void <init>()>();

     label191:
        r452 = r413;

        r453 = r414;

     label192:
        virtualinvoke r460.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package ");

     label193:
        r452 = r413;

        r453 = r414;

     label194:
        $r266 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r460.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r266);

     label195:
        r452 = r413;

        r453 = r414;

     label196:
        virtualinvoke r460.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer exists; it\'s data will be wiped");

     label197:
        r452 = r413;

        r453 = r414;

     label198:
        $r269 = virtualinvoke r460.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r269);

     label199:
        r452 = r413;

        r453 = r414;

     label200:
        $r271 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r270 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r271.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>($r270, null);

     label201:
        goto label216;

     label202:
        r452 = r413;

        r453 = r414;

     label203:
        $r257 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r256 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r461 = virtualinvoke $r257.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r256);

     label204:
        r452 = r413;

        r453 = r414;

     label205:
        $r258 = r461.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        if $r258 == null goto label214;

     label206:
        r452 = r413;

        r453 = r414;

     label207:
        $r259 = r461.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $z31 = virtualinvoke $r259.<java.io.File: boolean exists()>();

        if $z31 == 0 goto label214;

     label208:
        r452 = r413;

        r453 = r414;

     label209:
        $r260 = r461.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r260 != null goto label211;

     label210:
        goto label214;

     label211:
        r452 = r413;

        r453 = r414;

     label212:
        $r263 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r262 = r461.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r261 = r461.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        virtualinvoke $r263.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r262, $r261);

     label213:
        goto label216;

     label214:
        r452 = r413;

        r453 = r414;

     label215:
        $r462 = r458.<com.android.server.pm.PackageSetting: java.lang.String name>;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r462);

     label216:
        goto label144;

     label217:
        goto label218;

     label218:
        r452 = r413;

        r453 = r414;

     label219:
        $r99 = <com.android.server.pm.parsing.PackageCacher: java.util.concurrent.atomic.AtomicInteger sCachedPackageReadCount>;

        i1 = virtualinvoke $r99.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label220:
        r452 = r413;

        r453 = r414;

     label221:
        $r100 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r100.<com.android.server.pm.Settings: void pruneSharedUsersLPw()>();

     label222:
        r452 = r413;

        r453 = r414;

     label223:
        $l11 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l103 = $l11 - l88;

     label224:
        r452 = r413;

        r453 = r414;

     label225:
        $r101 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i2 = virtualinvoke $r101.<android.util.ArrayMap: int size()>();

     label226:
        r452 = r413;

        r453 = r414;

     label227:
        r463 = new java.lang.StringBuilder;

     label228:
        r452 = r413;

        r453 = r414;

     label229:
        specialinvoke r463.<java.lang.StringBuilder: void <init>()>();

     label230:
        r452 = r413;

        r453 = r414;

     label231:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished scanning system apps. Time: ");

     label232:
        r452 = r413;

        r453 = r414;

     label233:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l103);

     label234:
        r452 = r413;

        r453 = r414;

     label235:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms, packageCount: ");

     label236:
        r452 = r413;

        r453 = r414;

     label237:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

     label238:
        r452 = r413;

        r453 = r414;

     label239:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , timePerPackage: ");

     label240:
        if i2 != 0 goto label241;

        l104 = 0L;

        goto label243;

     label241:
        r452 = r413;

        r453 = r414;

     label242:
        $l12 = (long) i2;

        l104 = l103 / $l12;

     label243:
        r452 = r413;

        r453 = r414;

     label244:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l104);

     label245:
        r452 = r413;

        r453 = r414;

     label246:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , cached: ");

     label247:
        r452 = r413;

        r453 = r414;

     label248:
        virtualinvoke r463.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

     label249:
        r452 = r413;

        r453 = r414;

     label250:
        $r110 = virtualinvoke r463.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r110);

     label251:
        r452 = r413;

        r453 = r414;

     label252:
        $z8 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z8 == 0 goto label255;

     label253:
        if i2 <= 0 goto label255;

        r452 = r413;

        r453 = r414;

     label254:
        $l58 = (long) i2;

        $l59 = l103 / $l58;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(239, 15, $l59);

     label255:
        r452 = r413;

        r453 = r414;

     label256:
        $z63 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z63 != 0 goto label262;

     label257:
        r452 = r413;

        r453 = r414;

     label258:
        $l55 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3080, $l55);

     label259:
        r452 = r413;

        r453 = r414;

     label260:
        $r244 = <com.android.server.pm.PackageManagerService: java.io.File sAppInstallDir>;

        $i57 = i93 | 128;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void scanDirTracedLI(java.io.File,int,int,long,com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>($r244, 0, $i57, 0L, r436, r441);

     label261:
        goto label262;

     label262:
        i105 = i93;

        r452 = r413;

        r453 = r414;

     label263:
        virtualinvoke r436.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label264:
        r452 = r413;

        r453 = r414;

     label265:
        r464 = interfaceinvoke r441.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

     label266:
        r452 = r413;

        r453 = r414;

     label267:
        $z9 = interfaceinvoke r464.<java.util.List: boolean isEmpty()>();

        if $z9 == 0 goto label741;

     label268:
        r452 = r413;

        r453 = r414;

     label269:
        $z10 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z10 != 0 goto label439;

     label270:
        r452 = r413;

        r453 = r414;

     label271:
        $i42 = interfaceinvoke r1.<java.util.List: int size()>();

        i133 = (int) 1;

        i106 = $i42 - i133;

     label272:
        i107 = i106;

     label273:
        if i107 < 0 goto label335;

        r452 = r413;

        r453 = r414;

     label274:
        $r230 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i107);

        r465 = (java.lang.String) $r230;

     label275:
        r452 = r413;

        r453 = r414;

     label276:
        $r231 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r232 = virtualinvoke $r231.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r465);

        r466 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r232;

     label277:
        r452 = r413;

        r453 = r414;

     label278:
        $r233 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r233.<com.android.server.pm.Settings: void removeDisabledSystemPackageLPw(java.lang.String)>(r465);

     label279:
        if r466 != null goto label292;

        r452 = r413;

        r453 = r414;

     label280:
        r467 = new java.lang.StringBuilder;

     label281:
        r452 = r413;

        r453 = r414;

     label282:
        specialinvoke r467.<java.lang.StringBuilder: void <init>()>();

     label283:
        r452 = r413;

        r453 = r414;

     label284:
        virtualinvoke r467.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated system package ");

     label285:
        r452 = r413;

        r453 = r414;

     label286:
        virtualinvoke r467.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r465);

     label287:
        r452 = r413;

        r453 = r414;

     label288:
        virtualinvoke r467.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer exists; removing its data");

     label289:
        r452 = r413;

        r453 = r414;

     label290:
        r468 = virtualinvoke r467.<java.lang.StringBuilder: java.lang.String toString()>();

     label291:
        goto label326;

     label292:
        r452 = r413;

        r453 = r414;

     label293:
        r469 = new java.lang.StringBuilder;

     label294:
        r452 = r413;

        r453 = r414;

     label295:
        specialinvoke r469.<java.lang.StringBuilder: void <init>()>();

     label296:
        r452 = r413;

        r453 = r414;

     label297:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated system package ");

     label298:
        r452 = r413;

        r453 = r414;

     label299:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r465);

     label300:
        r452 = r413;

        r453 = r414;

     label301:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer exists; rescanning package on data");

     label302:
        r452 = r413;

        r453 = r414;

     label303:
        r470 = virtualinvoke r469.<java.lang.StringBuilder: java.lang.String toString()>();

     label304:
        r452 = r413;

        r453 = r414;

     label305:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r466, 1);

     label306:
        r452 = r413;

        r453 = r414;

     label307:
        r471 = new java.io.File;

     label308:
        r452 = r413;

        r453 = r414;

     label309:
        $r237 = interfaceinvoke r466.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke r471.<java.io.File: void <init>(java.lang.String)>($r237);

     label310:
        r452 = r413;

        r453 = r414;

     label311:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage scanPackageTracedLI(java.io.File,int,int,long,android.os.UserHandle)>(r471, 0, i105, 0L, null);

     label312:
        goto label325;

     label313:
        $r370 := @caughtexception;

        r472 = $r370;

        goto label315;

     label314:
        $r357 := @caughtexception;

        r472 = $r357;

     label315:
        r452 = r413;

        r453 = r414;

     label316:
        r473 = new java.lang.StringBuilder;

     label317:
        r452 = r413;

        r453 = r414;

     label318:
        specialinvoke r473.<java.lang.StringBuilder: void <init>()>();

     label319:
        r452 = r413;

        r453 = r414;

     label320:
        virtualinvoke r473.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse updated, ex-system package: ");

     label321:
        r452 = r413;

        r453 = r414;

     label322:
        $r359 = virtualinvoke r472.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke r473.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r359);

     label323:
        r452 = r413;

        r453 = r414;

     label324:
        $r361 = virtualinvoke r473.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r361);

     label325:
        r468 = r470;

     label326:
        r452 = r413;

        r453 = r414;

     label327:
        $r474 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r475 = $r474.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r476 = virtualinvoke $r475.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r465);

        r477 = (com.android.server.pm.PackageSetting) $r476;

     label328:
        if r477 == null goto label332;

        r452 = r413;

        r453 = r414;

     label329:
        $r239 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r240 = virtualinvoke $r239.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r465);

        if $r240 != null goto label332;

     label330:
        r452 = r413;

        r453 = r414;

     label331:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageDataLIF(com.android.server.pm.PackageSetting,int[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,boolean)>(r477, null, null, 0, 0);

     label332:
        r452 = r413;

        r453 = r414;

     label333:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, r468);

     label334:
        i107 = i107 + -1;

        goto label273;

     label335:
        i108 = 5;

        i109 = 0;

     label336:
        r452 = r413;

        r453 = r414;

     label337:
        $r200 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $i43 = virtualinvoke $r200.<android.util.ArrayMap: int size()>();

        if i109 >= $i43 goto label400;

     label338:
        r452 = r413;

        r453 = r414;

     label339:
        $r212 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r213 = virtualinvoke $r212.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i109);

        r478 = (java.lang.String) $r213;

     label340:
        r452 = r413;

        r453 = r414;

     label341:
        $r214 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z25 = virtualinvoke $r214.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r478);

        if $z25 != 0 goto label399;

     label342:
        r452 = r413;

        r453 = r414;

     label343:
        $r215 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r216 = virtualinvoke $r215.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i109);

        r479 = (java.io.File) $r216;

     label344:
        r452 = r413;

        r453 = r414;

     label345:
        r480 = new java.lang.StringBuilder;

     label346:
        r452 = r413;

        r453 = r414;

     label347:
        specialinvoke r480.<java.lang.StringBuilder: void <init>()>();

     label348:
        r452 = r413;

        r453 = r414;

     label349:
        virtualinvoke r480.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected better ");

     label350:
        r452 = r413;

        r453 = r414;

     label351:
        virtualinvoke r480.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r478);

     label352:
        r452 = r413;

        r453 = r414;

     label353:
        virtualinvoke r480.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but never showed up; reverting to system");

     label354:
        r452 = r413;

        r453 = r414;

     label355:
        $r220 = virtualinvoke r480.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(i108, $r220);

     label356:
        r452 = r413;

        r453 = r414;

     label357:
        $r221 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        $i52 = interfaceinvoke $r221.<java.util.List: int size()>();

        i110 = $i52 - 1;

     label358:
        if i110 < 0 goto label371;

        r452 = r413;

        r453 = r414;

     label359:
        $r228 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        $r229 = interfaceinvoke $r228.<java.util.List: java.lang.Object get(int)>(i110);

        r481 = (com.android.server.pm.PackageManagerService$ScanPartition) $r229;

     label360:
        r452 = r413;

        r453 = r414;

     label361:
        $z26 = virtualinvoke r481.<com.android.server.pm.PackageManagerService$ScanPartition: boolean containsPrivApp(java.io.File)>(r479);

        if $z26 == 0 goto label365;

     label362:
        r452 = r413;

        r453 = r414;

     label363:
        i111 = r481.<com.android.server.pm.PackageManagerService$ScanPartition: int scanFlag>;

     label364:
        i112 = i95;

        $i54 = i0 | 131072;

        i113 = $i54 | i111;

        goto label372;

     label365:
        r452 = r413;

        r453 = r414;

     label366:
        $z27 = virtualinvoke r481.<com.android.server.pm.PackageManagerService$ScanPartition: boolean containsApp(java.io.File)>(r479);

        if $z27 == 0 goto label370;

     label367:
        r452 = r413;

        r453 = r414;

     label368:
        i114 = r481.<com.android.server.pm.PackageManagerService$ScanPartition: int scanFlag>;

     label369:
        i112 = i95;

        i113 = i0 | i114;

        goto label372;

     label370:
        i110 = i110 + -1;

        goto label358;

     label371:
        i112 = 0;

        i113 = 0;

     label372:
        if i113 != 0 goto label383;

        r452 = r413;

        r453 = r414;

     label373:
        r482 = new java.lang.StringBuilder;

     label374:
        r452 = r413;

        r453 = r414;

     label375:
        specialinvoke r482.<java.lang.StringBuilder: void <init>()>();

     label376:
        r452 = r413;

        r453 = r414;

     label377:
        virtualinvoke r482.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring unexpected fallback path ");

     label378:
        r452 = r413;

        r453 = r414;

     label379:
        virtualinvoke r482.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r479);

     label380:
        r452 = r413;

        r453 = r414;

     label381:
        $r227 = virtualinvoke r482.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r227);

     label382:
        i108 = 5;

        goto label399;

     label383:
        r452 = r413;

        r453 = r414;

     label384:
        $r222 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r222.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>(r478);

     label385:
        r452 = r413;

        r453 = r414;

     label386:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage scanPackageTracedLI(java.io.File,int,int,long,android.os.UserHandle)>(r479, i112, i113, 0L, null);

     label387:
        i108 = 5;

        goto label399;

     label388:
        $r351 := @caughtexception;

        r452 = r413;

        r453 = r414;

     label389:
        r484 = new java.lang.StringBuilder;

     label390:
        r452 = r413;

        r453 = r414;

     label391:
        specialinvoke r484.<java.lang.StringBuilder: void <init>()>();

     label392:
        r452 = r413;

        r453 = r414;

     label393:
        virtualinvoke r484.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse original system package: ");

     label394:
        r452 = r413;

        r453 = r414;

     label395:
        $r353 = virtualinvoke $r351.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke r484.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r353);

     label396:
        r452 = r413;

        r453 = r414;

     label397:
        $r355 = virtualinvoke r484.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r355);

     label398:
        i108 = 5;

        goto label399;

     label399:
        i109 = i109 + 1;

        goto label336;

     label400:
        r452 = r413;

        r453 = r414;

     label401:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void installSystemStubPackages(java.util.List,int)>(r454, i105);

     label402:
        r452 = r413;

        r453 = r414;

     label403:
        $r201 = <com.android.server.pm.parsing.PackageCacher: java.util.concurrent.atomic.AtomicInteger sCachedPackageReadCount>;

        i116 = virtualinvoke $r201.<java.util.concurrent.atomic.AtomicInteger: int get()>();

     label404:
        r452 = r413;

        r453 = r414;

     label405:
        $l44 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l45 = $l44 - l103;

        l117 = $l45 - l88;

     label406:
        r452 = r413;

        r453 = r414;

     label407:
        $r202 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i46 = virtualinvoke $r202.<android.util.ArrayMap: int size()>();

        i118 = $i46 - i2;

     label408:
        r452 = r413;

        r453 = r414;

     label409:
        r485 = new java.lang.StringBuilder;

     label410:
        r452 = r413;

        r453 = r414;

     label411:
        specialinvoke r485.<java.lang.StringBuilder: void <init>()>();

     label412:
        r452 = r413;

        r453 = r414;

     label413:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished scanning non-system apps. Time: ");

     label414:
        r452 = r413;

        r453 = r414;

     label415:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l117);

     label416:
        r452 = r413;

        r453 = r414;

     label417:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms, packageCount: ");

     label418:
        r452 = r413;

        r453 = r414;

     label419:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i118);

     label420:
        r452 = r413;

        r453 = r414;

     label421:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , timePerPackage: ");

     label422:
        if i118 != 0 goto label423;

        l119 = 0L;

        goto label425;

     label423:
        r452 = r413;

        r453 = r414;

     label424:
        $l47 = (long) i118;

        l119 = l117 / $l47;

     label425:
        r452 = r413;

        r453 = r414;

     label426:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l119);

     label427:
        r452 = r413;

        r453 = r414;

     label428:
        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" , cached: ");

     label429:
        r452 = r413;

        r453 = r414;

     label430:
        $i48 = i116 - i1;

        virtualinvoke r485.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i48);

     label431:
        r452 = r413;

        r453 = r414;

     label432:
        $r211 = virtualinvoke r485.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r211);

     label433:
        r452 = r413;

        r453 = r414;

     label434:
        $z24 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z24 == 0 goto label438;

     label435:
        if i118 <= 0 goto label438;

        r452 = r413;

        r453 = r414;

     label436:
        $l50 = (long) i118;

        $l51 = l117 / $l50;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(239, 14, $l51);

     label437:
        goto label439;

     label438:
        goto label439;

     label439:
        r452 = r413;

        r453 = r414;

     label440:
        $r486 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        virtualinvoke $r486.<android.util.ArrayMap: void clear()>();

     label441:
        r452 = r413;

        r453 = r414;

     label442:
        $r487 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getStorageManagerPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mStorageManagerPackage> = $r487;

     label443:
        r452 = r413;

        r453 = r414;

     label444:
        $r488 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getSetupWizardPackageNameImpl()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSetupWizardPackage> = $r488;

     label445:
        r452 = r413;

        r453 = r414;

     label446:
        $r489 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r489.<com.android.server.pm.ComponentResolver: void fixProtectedFilterPriorities()>();

     label447:
        r452 = r413;

        r453 = r414;

     label448:
        $r490 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getDefaultTextClassifierPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mDefaultTextClassifierPackage> = $r490;

     label449:
        r452 = r413;

        r453 = r414;

     label450:
        $r491 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getSystemTextClassifierPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSystemTextClassifierPackageName> = $r491;

     label451:
        r452 = r413;

        r453 = r414;

     label452:
        $r492 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getWellbeingPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mWellbeingPackage> = $r492;

     label453:
        r452 = r413;

        r453 = r414;

     label454:
        $r493 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getDocumenterPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mDocumenterPackage> = $r493;

     label455:
        r452 = r413;

        r453 = r414;

     label456:
        $r494 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getDeviceConfiguratorPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mConfiguratorPackage> = $r494;

     label457:
        r452 = r413;

        r453 = r414;

     label458:
        $r495 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getAppPredictionServicePackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mAppPredictionServicePackage> = $r495;

     label459:
        r452 = r413;

        r453 = r414;

     label460:
        $r496 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getIncidentReportApproverPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mIncidentReportApproverPackage> = $r496;

     label461:
        r452 = r413;

        r453 = r414;

     label462:
        $r497 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRetailDemoPackageName()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRetailDemoPackage> = $r497;

     label463:
        r452 = r413;

        r453 = r414;

     label464:
        $r498 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r499 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r498);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList updateAllSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.Map)>(null, null, $r499);

     label465:
        r452 = r413;

        r453 = r414;

     label466:
        $r500 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r501 = virtualinvoke $r500.<com.android.server.pm.Settings: java.util.Collection getAllSharedUsersLPw()>();

        r502 = interfaceinvoke $r501.<java.util.Collection: java.util.Iterator iterator()>();

     label467:
        r452 = r413;

        r453 = r414;

     label468:
        $z65 = interfaceinvoke r502.<java.util.Iterator: boolean hasNext()>();

        if $z65 == 0 goto label489;

     label469:
        r452 = r413;

        r453 = r414;

     label470:
        $r191 = interfaceinvoke r502.<java.util.Iterator: java.lang.Object next()>();

        r503 = (com.android.server.pm.SharedUserSetting) $r191;

     label471:
        r452 = r413;

        r453 = r414;

     label472:
        $r192 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r193 = virtualinvoke $r192.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.PackageAbiHelper getAbiHelper()>();

        $r194 = r503.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $r195 = interfaceinvoke $r193.<com.android.server.pm.PackageAbiHelper: java.lang.String getAdjustedAbiForSharedUser(java.util.Set,com.android.server.pm.parsing.pkg.AndroidPackage)>($r194, null);

        r504 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List applyAdjustedAbiToSharedUser(com.android.server.pm.SharedUserSetting,com.android.server.pm.parsing.pkg.ParsedPackage,java.lang.String)>(r503, null, $r195);

     label473:
        if r504 == null goto label484;

        r452 = r413;

        r453 = r414;

     label474:
        $i40 = interfaceinvoke r504.<java.util.List: int size()>();

        if $i40 <= 0 goto label484;

     label475:
        r452 = r413;

        r453 = r414;

     label476:
        $i41 = interfaceinvoke r504.<java.util.List: int size()>();

        i120 = $i41 - 1;

     label477:
        if i120 < 0 goto label484;

        r452 = r413;

        r453 = r414;

     label478:
        $r196 = interfaceinvoke r504.<java.util.List: java.lang.Object get(int)>(i120);

        r505 = (java.lang.String) $r196;

     label479:
        r452 = r413;

        r453 = r414;

     label480:
        $r197 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r198 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPreferredInstructionSet()>();

        $r199 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getDexCodeInstructionSet(java.lang.String)>($r198);

        virtualinvoke $r197.<com.android.server.pm.Installer: void rmdex(java.lang.String,java.lang.String)>(r505, $r199);

     label481:
        goto label483;

     label482:
        $r347 := @caughtexception;

     label483:
        i120 = i120 + -1;

        goto label477;

     label484:
        r452 = r413;

        r453 = r414;

     label485:
        virtualinvoke r503.<com.android.server.pm.SharedUserSetting: void fixSeInfoLocked()>();

     label486:
        r452 = r413;

        r453 = r414;

     label487:
        virtualinvoke r503.<com.android.server.pm.SharedUserSetting: void updateProcesses()>();

     label488:
        goto label467;

     label489:
        r452 = r413;

        r453 = r414;

     label490:
        $r117 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageUsage mPackageUsage>;

        $r115 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r116 = $r115.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        virtualinvoke $r117.<com.android.server.pm.PackageUsage: void read(java.lang.Object)>($r116);

     label491:
        r452 = r413;

        r453 = r414;

     label492:
        $r118 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats>;

        virtualinvoke $r118.<com.android.server.pm.CompilerStats: void read()>();

     label493:
        r452 = r413;

        r453 = r414;

     label494:
        $l14 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3090, $l14);

     label495:
        r452 = r413;

        r453 = r414;

     label496:
        r507 = new java.lang.StringBuilder;

     label497:
        r452 = r413;

        r453 = r414;

     label498:
        specialinvoke r507.<java.lang.StringBuilder: void <init>()>();

     label499:
        r452 = r413;

        r453 = r414;

     label500:
        virtualinvoke r507.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time to scan packages: ");

     label501:
        r452 = r413;

        r453 = r414;

     label502:
        $l16 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l17 = $l16 - l88;

        $f0 = (float) $l17;

        $f1 = $f0 / 1000.0F;

        virtualinvoke r507.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

     label503:
        r452 = r413;

        r453 = r414;

     label504:
        virtualinvoke r507.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

     label505:
        r452 = r413;

        r453 = r414;

     label506:
        $r122 = virtualinvoke r507.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r122);

     label507:
        r452 = r413;

        r453 = r414;

     label508:
        $i20 = r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $i19 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i20 == $i19 goto label510;

     label509:
        z66 = 1;

        goto label511;

     label510:
        z66 = 0;

     label511:
        if z66 == 0 goto label527;

        r452 = r413;

        r453 = r414;

     label512:
        r508 = new java.lang.StringBuilder;

     label513:
        r452 = r413;

        r453 = r414;

     label514:
        specialinvoke r508.<java.lang.StringBuilder: void <init>()>();

     label515:
        r452 = r413;

        r453 = r414;

     label516:
        virtualinvoke r508.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Platform changed from ");

     label517:
        r452 = r413;

        r453 = r414;

     label518:
        $i37 = r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        virtualinvoke r508.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i37);

     label519:
        r452 = r413;

        r453 = r414;

     label520:
        virtualinvoke r508.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

     label521:
        r452 = r413;

        r453 = r414;

     label522:
        $i38 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        virtualinvoke r508.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i38);

     label523:
        r452 = r413;

        r453 = r414;

     label524:
        virtualinvoke r508.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; regranting permissions for internal storage");

     label525:
        r452 = r413;

        r453 = r414;

     label526:
        $r190 = virtualinvoke r508.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r190);

     label527:
        r452 = r413;

        r453 = r414;

     label528:
        $r124 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r123 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        virtualinvoke $r124.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updateAllPermissions(java.lang.String,boolean)>($r123, z66);

     label529:
        r452 = r413;

        r453 = r414;

     label530:
        $i21 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        r431.<com.android.server.pm.Settings$VersionInfo: int sdkVersion> = $i21;

     label531:
        r452 = r413;

        r453 = r414;

     label532:
        $z11 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z11 != 0 goto label548;

     label533:
        r452 = r413;

        r453 = r414;

     label534:
        $z22 = r0.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps>;

        if $z22 != 0 goto label537;

     label535:
        r452 = r413;

        r453 = r414;

     label536:
        $z23 = r0.<com.android.server.pm.PackageManagerService: boolean mFirstBoot>;

        if $z23 == 0 goto label548;

     label537:
        r452 = r413;

        r453 = r414;

     label538:
        $r180 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r181 = virtualinvoke $r180.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $r182 = virtualinvoke $r181.<android.os.UserManagerInternal: java.util.List getUsers(boolean)>(1);

        r509 = interfaceinvoke $r182.<java.util.List: java.util.Iterator iterator()>();

     label539:
        r452 = r413;

        r453 = r414;

     label540:
        $z67 = interfaceinvoke r509.<java.util.Iterator: boolean hasNext()>();

        if $z67 == 0 goto label548;

     label541:
        r452 = r413;

        r453 = r414;

     label542:
        $r183 = interfaceinvoke r509.<java.util.Iterator: java.lang.Object next()>();

        r510 = (android.content.pm.UserInfo) $r183;

     label543:
        r452 = r413;

        r453 = r414;

     label544:
        $r184 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i35 = r510.<android.content.pm.UserInfo: int id>;

        virtualinvoke $r184.<com.android.server.pm.Settings: void applyDefaultPreferredAppsLPw(int)>($i35);

     label545:
        r452 = r413;

        r453 = r414;

     label546:
        $i36 = r510.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void primeDomainVerificationsLPw(int)>($i36);

     label547:
        goto label539;

     label548:
        r452 = r413;

        r453 = r414;

     label549:
        $z68 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z68 == 0 goto label551;

     label550:
        i121 = 1;

        goto label552;

     label551:
        i121 = 3;

     label552:
        r452 = r413;

        r453 = r414;

     label553:
        $r125 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        r511 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List reconcileAppsDataLI(java.lang.String,int,int,boolean,boolean)>($r125, 0, i121, 1, 1);

     label554:
        r452 = r413;

        r453 = r414;

     label555:
        r512 = new com.android.server.pm._$$Lambda$PackageManagerService$_SI_LHw6Eiq8VNiFLLjJdCbGgSQ;

     label556:
        r452 = r413;

        r453 = r414;

     label557:
        specialinvoke r512.<com.android.server.pm._$$Lambda$PackageManagerService$_SI_LHw6Eiq8VNiFLLjJdCbGgSQ: void <init>(com.android.server.pm.PackageManagerService,java.util.List,int)>(r0, r511, i121);

     label558:
        r452 = r413;

        r453 = r414;

     label559:
        $r126 = staticinvoke <com.android.server.SystemServerInitThreadPool: java.util.concurrent.Future submit(java.lang.Runnable,java.lang.String)>(r512, "prepareAppData");

        r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.Future mPrepareAppDataFuture> = $r126;

     label560:
        r452 = r413;

        r453 = r414;

     label561:
        $z12 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z12 == 0 goto label578;

     label562:
        r452 = r413;

        r453 = r414;

     label563:
        $z20 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z20 != 0 goto label578;

     label564:
        r452 = r413;

        r453 = r414;

     label565:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Build fingerprint changed; clearing code caches");

     label566:
        i122 = 0;

     label567:
        r452 = r413;

        r453 = r414;

     label568:
        $r171 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r172 = $r171.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i34 = virtualinvoke $r172.<android.util.ArrayMap: int size()>();

        if i122 >= $i34 goto label576;

     label569:
        r452 = r413;

        r453 = r414;

     label570:
        $r174 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r175 = $r174.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r176 = virtualinvoke $r175.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i122);

        r513 = (com.android.server.pm.PackageSetting) $r176;

     label571:
        r452 = r413;

        r453 = r414;

     label572:
        $r178 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $r177 = r513.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $z21 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r178, $r177);

        if $z21 == 0 goto label575;

     label573:
        r452 = r413;

        r453 = r414;

     label574:
        $r179 = r513.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>($r179, -1, 131111);

     label575:
        i122 = i122 + 1;

        goto label567;

     label576:
        r452 = r413;

        r453 = r414;

     label577:
        $r173 = <android.os.Build: java.lang.String FINGERPRINT>;

        r431.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint> = $r173;

     label578:
        r452 = r413;

        r453 = r414;

     label579:
        $z69 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z69 != 0 goto label596;

     label580:
        r452 = r413;

        r453 = r414;

     label581:
        $z18 = r0.<com.android.server.pm.PackageManagerService: boolean mIsPreQUpgrade>;

        if $z18 == 0 goto label596;

     label582:
        r452 = r413;

        r453 = r414;

     label583:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Whitelisting all existing apps to hide their icons");

     label584:
        r452 = r413;

        r453 = r414;

     label585:
        $r165 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r166 = $r165.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i123 = virtualinvoke $r166.<android.util.ArrayMap: int size()>();

     label586:
        i124 = 0;

     label587:
        if i124 >= i123 goto label595;

        r452 = r413;

        r453 = r414;

     label588:
        $r167 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r168 = $r167.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r169 = virtualinvoke $r168.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i124);

        r514 = (com.android.server.pm.PackageSetting) $r169;

     label589:
        r452 = r413;

        r453 = r414;

     label590:
        $i31 = r514.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i32 = $i31 & 1;

        if $i32 == 0 goto label592;

     label591:
        goto label594;

     label592:
        r452 = r413;

        r453 = r414;

     label593:
        $r170 = <android.content.pm.PackageManager: java.lang.String APP_DETAILS_ACTIVITY_CLASS_NAME>;

        virtualinvoke r514.<com.android.server.pm.PackageSetting: boolean disableComponentLPw(java.lang.String,int)>($r170, 0);

     label594:
        i124 = i124 + 1;

        goto label587;

     label595:
        goto label596;

     label596:
        r452 = r413;

        r453 = r414;

     label597:
        r0.<com.android.server.pm.PackageManagerService: boolean mPromoteSystemApps> = 0;

     label598:
        r452 = r413;

        r453 = r414;

     label599:
        r431.<com.android.server.pm.Settings$VersionInfo: int databaseVersion> = 3;

     label600:
        r452 = r413;

        r453 = r414;

     label601:
        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("write settings");

     label602:
        r452 = r413;

        r453 = r414;

     label603:
        $r515 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r515.<com.android.server.pm.Settings: void writeLPr()>();

     label604:
        r452 = r413;

        r453 = r414;

     label605:
        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

     label606:
        r452 = r413;

        r453 = r414;

     label607:
        $l125 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3100, $l125);

     label608:
        r452 = r413;

        r453 = r414;

     label609:
        $z70 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        if $z70 != 0 goto label634;

     label610:
        r452 = r413;

        r453 = r414;

     label611:
        $r159 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredButNotReallyRequiredVerifierLPr()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage> = $r159;

     label612:
        r452 = r413;

        r453 = r414;

     label613:
        $r160 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredInstallerLPr()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage> = $r160;

     label614:
        r452 = r413;

        r453 = r414;

     label615:
        $r161 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredUninstallerLPr()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredUninstallerPackage> = $r161;

     label616:
        r452 = r413;

        r453 = r414;

     label617:
        r516 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getIntentFilterVerifierComponentNameLPr()>();

     label618:
        r452 = r413;

        r453 = r414;

     label619:
        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent> = r516;

     label620:
        if r516 == null goto label627;

        r452 = r413;

        r453 = r414;

     label621:
        r517 = new com.android.server.pm.PackageManagerService$IntentVerifierProxy;

     label622:
        r452 = r413;

        r453 = r414;

     label623:
        $r164 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        specialinvoke r517.<com.android.server.pm.PackageManagerService$IntentVerifierProxy: void <init>(com.android.server.pm.PackageManagerService,android.content.Context,android.content.ComponentName)>(r0, $r164, r516);

     label624:
        r452 = r413;

        r453 = r414;

     label625:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier> = r517;

     label626:
        goto label629;

     label627:
        r452 = r413;

        r453 = r414;

     label628:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier> = null;

     label629:
        r452 = r413;

        r453 = r414;

     label630:
        $r162 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredServicesExtensionPackageLPr()>();

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mServicesExtensionPackageName> = $r162;

     label631:
        r452 = r413;

        r453 = r414;

     label632:
        $r163 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredSharedLibraryLPr(java.lang.String,int)>("android.ext.shared", -1);

        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSharedSystemSharedLibraryPackageName> = $r163;

     label633:
        goto label648;

     label634:
        r452 = r413;

        r453 = r414;

     label635:
        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage> = null;

     label636:
        r452 = r413;

        r453 = r414;

     label637:
        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage> = null;

     label638:
        r452 = r413;

        r453 = r414;

     label639:
        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredUninstallerPackage> = null;

     label640:
        r452 = r413;

        r453 = r414;

     label641:
        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent> = null;

     label642:
        r452 = r413;

        r453 = r414;

     label643:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier> = null;

     label644:
        r452 = r413;

        r453 = r414;

     label645:
        r0.<com.android.server.pm.PackageManagerService: java.lang.String mServicesExtensionPackageName> = null;

     label646:
        r452 = r413;

        r453 = r414;

     label647:
        r0.<com.android.server.pm.PackageManagerService: java.lang.String mSharedSystemSharedLibraryPackageName> = null;

     label648:
        r452 = r413;

        r453 = r414;

     label649:
        r518 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getRequiredPermissionControllerLPr()>();

     label650:
        r452 = r413;

        r453 = r414;

     label651:
        r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredPermissionControllerPackage> = r518;

     label652:
        r452 = r413;

        r453 = r414;

     label653:
        $r127 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r128 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r518, 0, 0);

        $l23 = virtualinvoke $r128.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        virtualinvoke $r127.<com.android.server.pm.Settings: void setPermissionControllerVersion(long)>($l23);

     label654:
        r452 = r413;

        r453 = r414;

     label655:
        $r129 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r519 = virtualinvoke $r129.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label656:
        r452 = r413;

        r453 = r414;

     label657:
        $r130 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r131 = virtualinvoke $r130.<android.util.ArrayMap: java.util.Collection values()>();

        r520 = interfaceinvoke $r131.<java.util.Collection: java.util.Iterator iterator()>();

     label658:
        r452 = r413;

        r453 = r414;

     label659:
        $z71 = interfaceinvoke r520.<java.util.Iterator: boolean hasNext()>();

        if $z71 == 0 goto label681;

     label660:
        r452 = r413;

        r453 = r414;

     label661:
        $r156 = interfaceinvoke r520.<java.util.Iterator: java.lang.Object next()>();

        r521 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r156;

     label662:
        r452 = r413;

        r453 = r414;

     label663:
        $z15 = interfaceinvoke r521.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z15 == 0 goto label665;

     label664:
        goto label658;

     label665:
        r452 = r413;

        r453 = r414;

     label666:
        i126 = lengthof r519;

     label667:
        i127 = 0;

     label668:
        if i127 >= i126 goto label680;

        i128 = r519[i127];

        r452 = r413;

        r453 = r414;

     label669:
        $r157 = interfaceinvoke r521.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r522 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r157);

     label670:
        if r522 == null goto label679;

        r452 = r413;

        r453 = r414;

     label671:
        $z16 = virtualinvoke r522.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i128);

        if $z16 == 0 goto label678;

     label672:
        r452 = r413;

        r453 = r414;

     label673:
        $z17 = virtualinvoke r522.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i128);

        if $z17 != 0 goto label675;

     label674:
        goto label679;

     label675:
        r452 = r413;

        r453 = r414;

     label676:
        $r158 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i29 = r522.<com.android.server.pm.PackageSetting: int appId>;

        virtualinvoke $r158.<com.android.server.pm.InstantAppRegistry: void addInstantAppLPw(int,int)>(i128, $i29);

     label677:
        goto label679;

     label678:
        goto label679;

     label679:
        i127 = i127 + 1;

        goto label668;

     label680:
        goto label658;

     label681:
        r452 = r413;

        r453 = r414;

     label682:
        r523 = new com.android.server.pm._$$Lambda$PackageManagerService$uKFiJiR_QQI8RsVT7igWuZ6FwAA;

     label683:
        r452 = r413;

        r453 = r414;

     label684:
        specialinvoke r523.<com.android.server.pm._$$Lambda$PackageManagerService$uKFiJiR_QQI8RsVT7igWuZ6FwAA: void <init>(com.android.server.pm.PackageManagerService)>(r0);

     label685:
        r452 = r413;

        r453 = r414;

     label686:
        r524 = new com.android.server.pm.PackageInstallerService;

     label687:
        r452 = r413;

        r453 = r414;

     label688:
        $r132 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        specialinvoke r524.<com.android.server.pm.PackageInstallerService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService,java.util.function.Supplier)>($r132, r0, r523);

     label689:
        r452 = r413;

        r453 = r414;

     label690:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService> = r524;

     label691:
        r452 = r413;

        r453 = r414;

     label692:
        r525 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.util.Pair getInstantAppResolverLPr()>();

     label693:
        if r525 == null goto label714;

        r452 = r413;

        r453 = r414;

     label694:
        $z14 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z14 == 0 goto label705;

     label695:
        r452 = r413;

        r453 = r414;

     label696:
        r526 = new java.lang.StringBuilder;

     label697:
        r452 = r413;

        r453 = r414;

     label698:
        specialinvoke r526.<java.lang.StringBuilder: void <init>()>();

     label699:
        r452 = r413;

        r453 = r414;

     label700:
        virtualinvoke r526.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set ephemeral resolver: ");

     label701:
        r452 = r413;

        r453 = r414;

     label702:
        virtualinvoke r526.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r525);

     label703:
        r452 = r413;

        r453 = r414;

     label704:
        $r155 = virtualinvoke r526.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r155);

     label705:
        r452 = r413;

        r453 = r414;

     label706:
        r527 = new com.android.server.pm.InstantAppResolverConnection;

     label707:
        r452 = r413;

        r453 = r414;

     label708:
        $r149 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r145 = r525.<android.util.Pair: java.lang.Object first>;

        $r148 = (android.content.ComponentName) $r145;

        $r146 = r525.<android.util.Pair: java.lang.Object second>;

        $r147 = (java.lang.String) $r146;

        specialinvoke r527.<com.android.server.pm.InstantAppResolverConnection: void <init>(android.content.Context,android.content.ComponentName,java.lang.String)>($r149, $r148, $r147);

     label709:
        r452 = r413;

        r453 = r414;

     label710:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection> = r527;

     label711:
        r452 = r413;

        r453 = r414;

     label712:
        $r150 = r525.<android.util.Pair: java.lang.Object first>;

        $r151 = (android.content.ComponentName) $r150;

        $r152 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getInstantAppResolverSettingsLPr(android.content.ComponentName)>($r151);

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mInstantAppResolverSettingsComponent> = $r152;

     label713:
        goto label718;

     label714:
        r452 = r413;

        r453 = r414;

     label715:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection> = null;

     label716:
        r452 = r413;

        r453 = r414;

     label717:
        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mInstantAppResolverSettingsComponent> = null;

     label718:
        r452 = r413;

        r453 = r414;

     label719:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateInstantAppInstallerLocked(java.lang.String)>(null);

     label720:
        r452 = r413;

        r453 = r414;

     label721:
        r528 = new java.util.HashMap;

     label722:
        r452 = r413;

        r453 = r414;

     label723:
        specialinvoke r528.<java.util.HashMap: void <init>()>();

     label724:
        r452 = r413;

        r453 = r414;

     label725:
        i129 = lengthof r519;

     label726:
        i130 = 0;

     label727:
        if i130 >= i129 goto label730;

        i131 = r519[i130];

        r452 = r413;

        r453 = r414;

     label728:
        $r141 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i131);

        $r142 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>(0, i131);

        $r143 = virtualinvoke $r142.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        interfaceinvoke r528.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r141, $r143);

     label729:
        i130 = i130 + 1;

        goto label727;

     label730:
        r452 = r413;

        r453 = r414;

     label731:
        $r133 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        virtualinvoke $r133.<com.android.server.pm.dex.DexManager: void load(java.util.Map)>(r528);

     label732:
        r452 = r413;

        r453 = r414;

     label733:
        $z13 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z13 == 0 goto label736;

     label734:
        r452 = r413;

        r453 = r414;

     label735:
        $l26 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l27 = $l26 - l88;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(239, 13, $l27);

     label736:
        r452 = r413;

        r453 = r414;

     label737:
        exitmonitor r414;

     label738:
        r530 = r413;

     label739:
        exitmonitor r413;

     label740:
        $r134 = new com.android.server.pm.ModuleInfoProvider;

        $r135 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        specialinvoke $r134.<com.android.server.pm.ModuleInfoProvider: void <init>(android.content.Context,android.content.pm.IPackageManager)>($r135, r0);

        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ModuleInfoProvider mModuleInfoProvider> = $r134;

        staticinvoke <android.content.pm.PackageManager: void uncorkPackageInfoCache()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("GC");

        $r136 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r136.<java.lang.Runtime: void gc()>();

        virtualinvoke $r35.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r138 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r137 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        virtualinvoke $r138.<com.android.server.pm.Installer: void setWarnIfHeld(java.lang.Object)>($r137);

        $r139 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r140 = virtualinvoke $r139.<android.content.Context: android.content.res.Resources getResources()>();

        staticinvoke <android.content.pm.PackageParser: void readConfigUseRoundIcon(android.content.res.Resources)>($r140);

        $l24 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l25 = $l24 + 60000L;

        r0.<com.android.server.pm.PackageManagerService: long mServiceStartWithDelay> = $l25;

        return;

     label741:
        r452 = r413;

        r453 = r414;

     label742:
        r531 = new java.lang.IllegalStateException;

     label743:
        r452 = r413;

        r453 = r414;

     label744:
        r532 = new java.lang.StringBuilder;

     label745:
        r452 = r413;

        r453 = r414;

     label746:
        specialinvoke r532.<java.lang.StringBuilder: void <init>()>();

     label747:
        r452 = r413;

        r453 = r414;

     label748:
        virtualinvoke r532.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not all tasks finished before calling close: ");

     label749:
        r452 = r413;

        r453 = r414;

     label750:
        virtualinvoke r532.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r464);

     label751:
        r452 = r413;

        r453 = r414;

     label752:
        $r113 = virtualinvoke r532.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r531.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r113);

     label753:
        r452 = r413;

        r453 = r414;

     label754:
        throw r531;

     label755:
        r452 = r413;

        r453 = r414;

     label756:
        r533 = new java.lang.IllegalStateException;

     label757:
        r452 = r413;

        r453 = r414;

     label758:
        specialinvoke r533.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to load frameworks package; check log for warnings");

     label759:
        r452 = r413;

        r453 = r414;

     label760:
        throw r533;

     label761:
        $r350 := @caughtexception;

        r421 = $r350;

     label762:
        goto label765;

     label763:
        $r356 := @caughtexception;

        r421 = $r356;

        goto label765;

     label764:
        $r362 := @caughtexception;

        r421 = $r362;

     label765:
        r452 = r413;

        r453 = r414;

     label766:
        exitmonitor r414;

     label767:
        r530 = r413;

     label768:
        throw r421;

     label769:
        $r371 := @caughtexception;

        r421 = $r371;

        r414 = r453;

        r413 = r452;

     label770:
        goto label765;

     label771:
        $r369 := @caughtexception;

        r535 = $r369;

     label772:
        r530 = r413;

     label773:
        exitmonitor r413;

     label774:
        throw r535;

     label775:
        $r349 := @caughtexception;

        r535 = $r349;

        r413 = r530;

        goto label772;

        catch java.lang.Throwable from label008 to label009 with label771;
        catch java.lang.Throwable from label009 to label010 with label764;
        catch java.lang.Throwable from label010 to label011 with label764;
        catch java.lang.Throwable from label013 to label014 with label015;
        catch java.lang.Throwable from label018 to label019 with label030;
        catch java.lang.Throwable from label019 to label020 with label029;
        catch java.lang.Throwable from label022 to label023 with label027;
        catch java.lang.Throwable from label024 to label025 with label027;
        catch java.lang.Throwable from label031 to label032 with label763;
        catch java.lang.Throwable from label034 to label035 with label763;
        catch java.lang.Throwable from label037 to label038 with label027;
        catch java.lang.Throwable from label038 to label039 with label027;
        catch java.lang.Throwable from label040 to label041 with label763;
        catch java.lang.Throwable from label042 to label043 with label027;
        catch java.lang.Throwable from label043 to label044 with label763;
        catch java.lang.Throwable from label045 to label046 with label027;
        catch java.lang.Throwable from label046 to label047 with label763;
        catch java.lang.Throwable from label048 to label049 with label027;
        catch java.lang.Throwable from label050 to label051 with label027;
        catch java.lang.Throwable from label051 to label052 with label763;
        catch java.lang.Throwable from label052 to label053 with label763;
        catch java.lang.Throwable from label055 to label056 with label763;
        catch java.lang.Throwable from label057 to label058 with label027;
        catch java.lang.Throwable from label058 to label059 with label763;
        catch java.lang.Throwable from label060 to label061 with label027;
        catch java.lang.Throwable from label063 to label064 with label763;
        catch java.lang.Throwable from label065 to label066 with label027;
        catch java.lang.Throwable from label068 to label069 with label763;
        catch java.lang.Throwable from label070 to label071 with label027;
        catch java.lang.Throwable from label073 to label074 with label763;
        catch java.lang.Throwable from label075 to label076 with label027;
        catch java.lang.Throwable from label078 to label079 with label763;
        catch java.lang.Throwable from label080 to label081 with label027;
        catch java.lang.Throwable from label081 to label082 with label027;
        catch java.lang.Throwable from label084 to label085 with label763;
        catch java.lang.Throwable from label086 to label087 with label027;
        catch java.lang.Throwable from label090 to label091 with label763;
        catch java.lang.Throwable from label092 to label093 with label763;
        catch java.lang.Throwable from label093 to label094 with label763;
        catch java.lang.Throwable from label094 to label095 with label763;
        catch java.lang.Throwable from label095 to label096 with label763;
        catch java.lang.Throwable from label098 to label099 with label105;
        catch java.lang.Throwable from label100 to label101 with label105;
        catch java.lang.Throwable from label102 to label103 with label104;
        catch java.lang.Throwable from label106 to label107 with label761;
        catch java.lang.Throwable from label109 to label110 with label115;
        catch java.lang.Throwable from label110 to label111 with label114;
        catch java.lang.Throwable from label112 to label113 with label114;
        catch java.lang.Throwable from label116 to label117 with label114;
        catch java.lang.Throwable from label118 to label119 with label769;
        catch java.lang.Throwable from label120 to label121 with label769;
        catch java.lang.Throwable from label122 to label123 with label769;
        catch java.lang.Throwable from label124 to label125 with label769;
        catch java.lang.Throwable from label126 to label127 with label769;
        catch java.lang.Throwable from label128 to label129 with label769;
        catch java.lang.Throwable from label130 to label131 with label769;
        catch java.lang.Throwable from label132 to label133 with label769;
        catch java.lang.Throwable from label134 to label135 with label769;
        catch java.lang.Throwable from label136 to label137 with label769;
        catch java.lang.Throwable from label138 to label139 with label769;
        catch java.lang.Throwable from label140 to label141 with label769;
        catch java.lang.Throwable from label143 to label144 with label769;
        catch java.lang.Throwable from label145 to label146 with label769;
        catch java.lang.Throwable from label147 to label148 with label769;
        catch java.lang.Throwable from label149 to label150 with label769;
        catch java.lang.Throwable from label152 to label153 with label769;
        catch java.lang.Throwable from label154 to label155 with label769;
        catch java.lang.Throwable from label156 to label157 with label769;
        catch java.lang.Throwable from label158 to label159 with label769;
        catch java.lang.Throwable from label160 to label161 with label769;
        catch java.lang.Throwable from label162 to label163 with label769;
        catch java.lang.Throwable from label164 to label165 with label769;
        catch java.lang.Throwable from label166 to label167 with label769;
        catch java.lang.Throwable from label168 to label169 with label769;
        catch java.lang.Throwable from label170 to label171 with label769;
        catch java.lang.Throwable from label172 to label173 with label769;
        catch java.lang.Throwable from label174 to label175 with label769;
        catch java.lang.Throwable from label176 to label177 with label769;
        catch java.lang.Throwable from label178 to label179 with label769;
        catch java.lang.Throwable from label180 to label181 with label769;
        catch java.lang.Throwable from label184 to label185 with label769;
        catch java.lang.Throwable from label186 to label187 with label769;
        catch java.lang.Throwable from label188 to label189 with label769;
        catch java.lang.Throwable from label190 to label191 with label769;
        catch java.lang.Throwable from label192 to label193 with label769;
        catch java.lang.Throwable from label194 to label195 with label769;
        catch java.lang.Throwable from label196 to label197 with label769;
        catch java.lang.Throwable from label198 to label199 with label769;
        catch java.lang.Throwable from label200 to label201 with label769;
        catch java.lang.Throwable from label203 to label204 with label769;
        catch java.lang.Throwable from label205 to label206 with label769;
        catch java.lang.Throwable from label207 to label208 with label769;
        catch java.lang.Throwable from label209 to label210 with label769;
        catch java.lang.Throwable from label212 to label213 with label769;
        catch java.lang.Throwable from label215 to label216 with label769;
        catch java.lang.Throwable from label219 to label220 with label769;
        catch java.lang.Throwable from label221 to label222 with label769;
        catch java.lang.Throwable from label223 to label224 with label769;
        catch java.lang.Throwable from label225 to label226 with label769;
        catch java.lang.Throwable from label227 to label228 with label769;
        catch java.lang.Throwable from label229 to label230 with label769;
        catch java.lang.Throwable from label231 to label232 with label769;
        catch java.lang.Throwable from label233 to label234 with label769;
        catch java.lang.Throwable from label235 to label236 with label769;
        catch java.lang.Throwable from label237 to label238 with label769;
        catch java.lang.Throwable from label239 to label240 with label769;
        catch java.lang.Throwable from label242 to label243 with label769;
        catch java.lang.Throwable from label244 to label245 with label769;
        catch java.lang.Throwable from label246 to label247 with label769;
        catch java.lang.Throwable from label248 to label249 with label769;
        catch java.lang.Throwable from label250 to label251 with label769;
        catch java.lang.Throwable from label252 to label253 with label769;
        catch java.lang.Throwable from label254 to label255 with label769;
        catch java.lang.Throwable from label256 to label257 with label769;
        catch java.lang.Throwable from label258 to label259 with label769;
        catch java.lang.Throwable from label260 to label261 with label769;
        catch java.lang.Throwable from label263 to label264 with label769;
        catch java.lang.Throwable from label265 to label266 with label769;
        catch java.lang.Throwable from label267 to label268 with label769;
        catch java.lang.Throwable from label269 to label270 with label769;
        catch java.lang.Throwable from label271 to label272 with label769;
        catch java.lang.Throwable from label274 to label275 with label769;
        catch java.lang.Throwable from label276 to label277 with label769;
        catch java.lang.Throwable from label278 to label279 with label769;
        catch java.lang.Throwable from label280 to label281 with label769;
        catch java.lang.Throwable from label282 to label283 with label769;
        catch java.lang.Throwable from label284 to label285 with label769;
        catch java.lang.Throwable from label286 to label287 with label769;
        catch java.lang.Throwable from label288 to label289 with label769;
        catch java.lang.Throwable from label290 to label291 with label769;
        catch java.lang.Throwable from label293 to label294 with label769;
        catch java.lang.Throwable from label295 to label296 with label769;
        catch java.lang.Throwable from label297 to label298 with label769;
        catch java.lang.Throwable from label299 to label300 with label769;
        catch java.lang.Throwable from label301 to label302 with label769;
        catch java.lang.Throwable from label303 to label304 with label769;
        catch java.lang.Throwable from label305 to label306 with label769;
        catch com.android.server.pm.PackageManagerException from label307 to label308 with label314;
        catch java.lang.Throwable from label307 to label308 with label769;
        catch com.android.server.pm.PackageManagerException from label309 to label310 with label314;
        catch java.lang.Throwable from label309 to label310 with label769;
        catch com.android.server.pm.PackageManagerException from label311 to label312 with label313;
        catch java.lang.Throwable from label311 to label312 with label769;
        catch java.lang.Throwable from label316 to label317 with label769;
        catch java.lang.Throwable from label318 to label319 with label769;
        catch java.lang.Throwable from label320 to label321 with label769;
        catch java.lang.Throwable from label322 to label323 with label769;
        catch java.lang.Throwable from label324 to label325 with label769;
        catch java.lang.Throwable from label327 to label328 with label769;
        catch java.lang.Throwable from label329 to label330 with label769;
        catch java.lang.Throwable from label331 to label332 with label769;
        catch java.lang.Throwable from label333 to label334 with label769;
        catch java.lang.Throwable from label337 to label338 with label769;
        catch java.lang.Throwable from label339 to label340 with label769;
        catch java.lang.Throwable from label341 to label342 with label769;
        catch java.lang.Throwable from label343 to label344 with label769;
        catch java.lang.Throwable from label345 to label346 with label769;
        catch java.lang.Throwable from label347 to label348 with label769;
        catch java.lang.Throwable from label349 to label350 with label769;
        catch java.lang.Throwable from label351 to label352 with label769;
        catch java.lang.Throwable from label353 to label354 with label769;
        catch java.lang.Throwable from label355 to label356 with label769;
        catch java.lang.Throwable from label357 to label358 with label769;
        catch java.lang.Throwable from label359 to label360 with label769;
        catch java.lang.Throwable from label361 to label362 with label769;
        catch java.lang.Throwable from label363 to label364 with label769;
        catch java.lang.Throwable from label366 to label367 with label769;
        catch java.lang.Throwable from label368 to label369 with label769;
        catch java.lang.Throwable from label373 to label374 with label769;
        catch java.lang.Throwable from label375 to label376 with label769;
        catch java.lang.Throwable from label377 to label378 with label769;
        catch java.lang.Throwable from label379 to label380 with label769;
        catch java.lang.Throwable from label381 to label382 with label769;
        catch java.lang.Throwable from label384 to label385 with label769;
        catch com.android.server.pm.PackageManagerException from label386 to label387 with label388;
        catch java.lang.Throwable from label386 to label387 with label769;
        catch java.lang.Throwable from label389 to label390 with label769;
        catch java.lang.Throwable from label391 to label392 with label769;
        catch java.lang.Throwable from label393 to label394 with label769;
        catch java.lang.Throwable from label395 to label396 with label769;
        catch java.lang.Throwable from label397 to label398 with label769;
        catch java.lang.Throwable from label401 to label402 with label769;
        catch java.lang.Throwable from label403 to label404 with label769;
        catch java.lang.Throwable from label405 to label406 with label769;
        catch java.lang.Throwable from label407 to label408 with label769;
        catch java.lang.Throwable from label409 to label410 with label769;
        catch java.lang.Throwable from label411 to label412 with label769;
        catch java.lang.Throwable from label413 to label414 with label769;
        catch java.lang.Throwable from label415 to label416 with label769;
        catch java.lang.Throwable from label417 to label418 with label769;
        catch java.lang.Throwable from label419 to label420 with label769;
        catch java.lang.Throwable from label421 to label422 with label769;
        catch java.lang.Throwable from label424 to label425 with label769;
        catch java.lang.Throwable from label426 to label427 with label769;
        catch java.lang.Throwable from label428 to label429 with label769;
        catch java.lang.Throwable from label430 to label431 with label769;
        catch java.lang.Throwable from label432 to label433 with label769;
        catch java.lang.Throwable from label434 to label435 with label769;
        catch java.lang.Throwable from label436 to label437 with label769;
        catch java.lang.Throwable from label440 to label441 with label769;
        catch java.lang.Throwable from label442 to label443 with label769;
        catch java.lang.Throwable from label444 to label445 with label769;
        catch java.lang.Throwable from label446 to label447 with label769;
        catch java.lang.Throwable from label448 to label449 with label769;
        catch java.lang.Throwable from label450 to label451 with label769;
        catch java.lang.Throwable from label452 to label453 with label769;
        catch java.lang.Throwable from label454 to label455 with label769;
        catch java.lang.Throwable from label456 to label457 with label769;
        catch java.lang.Throwable from label458 to label459 with label769;
        catch java.lang.Throwable from label460 to label461 with label769;
        catch java.lang.Throwable from label462 to label463 with label769;
        catch java.lang.Throwable from label464 to label465 with label769;
        catch java.lang.Throwable from label466 to label467 with label769;
        catch java.lang.Throwable from label468 to label469 with label769;
        catch java.lang.Throwable from label470 to label471 with label769;
        catch java.lang.Throwable from label472 to label473 with label769;
        catch java.lang.Throwable from label474 to label475 with label769;
        catch java.lang.Throwable from label476 to label477 with label769;
        catch java.lang.Throwable from label478 to label479 with label769;
        catch com.android.server.pm.Installer$InstallerException from label480 to label481 with label482;
        catch java.lang.Throwable from label480 to label481 with label769;
        catch java.lang.Throwable from label485 to label486 with label769;
        catch java.lang.Throwable from label487 to label488 with label769;
        catch java.lang.Throwable from label490 to label491 with label769;
        catch java.lang.Throwable from label492 to label493 with label769;
        catch java.lang.Throwable from label494 to label495 with label769;
        catch java.lang.Throwable from label496 to label497 with label769;
        catch java.lang.Throwable from label498 to label499 with label769;
        catch java.lang.Throwable from label500 to label501 with label769;
        catch java.lang.Throwable from label502 to label503 with label769;
        catch java.lang.Throwable from label504 to label505 with label769;
        catch java.lang.Throwable from label506 to label507 with label769;
        catch java.lang.Throwable from label508 to label509 with label769;
        catch java.lang.Throwable from label512 to label513 with label769;
        catch java.lang.Throwable from label514 to label515 with label769;
        catch java.lang.Throwable from label516 to label517 with label769;
        catch java.lang.Throwable from label518 to label519 with label769;
        catch java.lang.Throwable from label520 to label521 with label769;
        catch java.lang.Throwable from label522 to label523 with label769;
        catch java.lang.Throwable from label524 to label525 with label769;
        catch java.lang.Throwable from label526 to label527 with label769;
        catch java.lang.Throwable from label528 to label529 with label769;
        catch java.lang.Throwable from label530 to label531 with label769;
        catch java.lang.Throwable from label532 to label533 with label769;
        catch java.lang.Throwable from label534 to label535 with label769;
        catch java.lang.Throwable from label536 to label537 with label769;
        catch java.lang.Throwable from label538 to label539 with label769;
        catch java.lang.Throwable from label540 to label541 with label769;
        catch java.lang.Throwable from label542 to label543 with label769;
        catch java.lang.Throwable from label544 to label545 with label769;
        catch java.lang.Throwable from label546 to label547 with label769;
        catch java.lang.Throwable from label549 to label550 with label769;
        catch java.lang.Throwable from label553 to label554 with label769;
        catch java.lang.Throwable from label555 to label556 with label769;
        catch java.lang.Throwable from label557 to label558 with label769;
        catch java.lang.Throwable from label559 to label560 with label769;
        catch java.lang.Throwable from label561 to label562 with label769;
        catch java.lang.Throwable from label563 to label564 with label769;
        catch java.lang.Throwable from label565 to label566 with label769;
        catch java.lang.Throwable from label568 to label569 with label769;
        catch java.lang.Throwable from label570 to label571 with label769;
        catch java.lang.Throwable from label572 to label573 with label769;
        catch java.lang.Throwable from label574 to label575 with label769;
        catch java.lang.Throwable from label577 to label578 with label769;
        catch java.lang.Throwable from label579 to label580 with label769;
        catch java.lang.Throwable from label581 to label582 with label769;
        catch java.lang.Throwable from label583 to label584 with label769;
        catch java.lang.Throwable from label585 to label586 with label769;
        catch java.lang.Throwable from label588 to label589 with label769;
        catch java.lang.Throwable from label590 to label591 with label769;
        catch java.lang.Throwable from label593 to label594 with label769;
        catch java.lang.Throwable from label597 to label598 with label769;
        catch java.lang.Throwable from label599 to label600 with label769;
        catch java.lang.Throwable from label601 to label602 with label769;
        catch java.lang.Throwable from label603 to label604 with label769;
        catch java.lang.Throwable from label605 to label606 with label769;
        catch java.lang.Throwable from label607 to label608 with label769;
        catch java.lang.Throwable from label609 to label610 with label769;
        catch java.lang.Throwable from label611 to label612 with label769;
        catch java.lang.Throwable from label613 to label614 with label769;
        catch java.lang.Throwable from label615 to label616 with label769;
        catch java.lang.Throwable from label617 to label618 with label769;
        catch java.lang.Throwable from label619 to label620 with label769;
        catch java.lang.Throwable from label621 to label622 with label769;
        catch java.lang.Throwable from label623 to label624 with label769;
        catch java.lang.Throwable from label625 to label626 with label769;
        catch java.lang.Throwable from label628 to label629 with label769;
        catch java.lang.Throwable from label630 to label631 with label769;
        catch java.lang.Throwable from label632 to label633 with label769;
        catch java.lang.Throwable from label635 to label636 with label769;
        catch java.lang.Throwable from label637 to label638 with label769;
        catch java.lang.Throwable from label639 to label640 with label769;
        catch java.lang.Throwable from label641 to label642 with label769;
        catch java.lang.Throwable from label643 to label644 with label769;
        catch java.lang.Throwable from label645 to label646 with label769;
        catch java.lang.Throwable from label647 to label648 with label769;
        catch java.lang.Throwable from label649 to label650 with label769;
        catch java.lang.Throwable from label651 to label652 with label769;
        catch java.lang.Throwable from label653 to label654 with label769;
        catch java.lang.Throwable from label655 to label656 with label769;
        catch java.lang.Throwable from label657 to label658 with label769;
        catch java.lang.Throwable from label659 to label660 with label769;
        catch java.lang.Throwable from label661 to label662 with label769;
        catch java.lang.Throwable from label663 to label664 with label769;
        catch java.lang.Throwable from label666 to label667 with label769;
        catch java.lang.Throwable from label669 to label670 with label769;
        catch java.lang.Throwable from label671 to label672 with label769;
        catch java.lang.Throwable from label673 to label674 with label769;
        catch java.lang.Throwable from label676 to label677 with label769;
        catch java.lang.Throwable from label682 to label683 with label769;
        catch java.lang.Throwable from label684 to label685 with label769;
        catch java.lang.Throwable from label686 to label687 with label769;
        catch java.lang.Throwable from label688 to label689 with label769;
        catch java.lang.Throwable from label690 to label691 with label769;
        catch java.lang.Throwable from label692 to label693 with label769;
        catch java.lang.Throwable from label694 to label695 with label769;
        catch java.lang.Throwable from label696 to label697 with label769;
        catch java.lang.Throwable from label698 to label699 with label769;
        catch java.lang.Throwable from label700 to label701 with label769;
        catch java.lang.Throwable from label702 to label703 with label769;
        catch java.lang.Throwable from label704 to label705 with label769;
        catch java.lang.Throwable from label706 to label707 with label769;
        catch java.lang.Throwable from label708 to label709 with label769;
        catch java.lang.Throwable from label710 to label711 with label769;
        catch java.lang.Throwable from label712 to label713 with label769;
        catch java.lang.Throwable from label715 to label716 with label769;
        catch java.lang.Throwable from label717 to label718 with label769;
        catch java.lang.Throwable from label719 to label720 with label769;
        catch java.lang.Throwable from label721 to label722 with label769;
        catch java.lang.Throwable from label723 to label724 with label769;
        catch java.lang.Throwable from label725 to label726 with label769;
        catch java.lang.Throwable from label728 to label729 with label769;
        catch java.lang.Throwable from label731 to label732 with label769;
        catch java.lang.Throwable from label733 to label734 with label769;
        catch java.lang.Throwable from label735 to label736 with label769;
        catch java.lang.Throwable from label737 to label738 with label769;
        catch java.lang.Throwable from label739 to label740 with label775;
        catch java.lang.Throwable from label742 to label743 with label769;
        catch java.lang.Throwable from label744 to label745 with label769;
        catch java.lang.Throwable from label746 to label747 with label769;
        catch java.lang.Throwable from label748 to label749 with label769;
        catch java.lang.Throwable from label750 to label751 with label769;
        catch java.lang.Throwable from label752 to label753 with label769;
        catch java.lang.Throwable from label754 to label755 with label769;
        catch java.lang.Throwable from label756 to label757 with label769;
        catch java.lang.Throwable from label758 to label759 with label769;
        catch java.lang.Throwable from label760 to label761 with label769;
        catch java.lang.Throwable from label766 to label767 with label769;
        catch java.lang.Throwable from label768 to label769 with label775;
        catch java.lang.Throwable from label773 to label774 with label775;
    }

    static long access$000(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $l0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getVerificationTimeout()>();

        return $l0;
    }

    static com.android.server.pm.PackageManagerService$Injector access$100(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$Injector $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        return $r1;
    }

    static int access$1000(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        int $i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getDefaultIntegrityVerificationResponse()>();

        return $i0;
    }

    static void access$1100(com.android.server.pm.PackageManagerService, int, int, boolean, java.lang.String, boolean, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean z0, z1;
        java.lang.String r1;
        java.util.List r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r1 := @parameter4: java.lang.String;

        z1 := @parameter5: boolean;

        r2 := @parameter6: java.util.List;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void verifyIntentFiltersIfNeeded(int,int,boolean,java.lang.String,boolean,java.util.List)>(i0, i1, z0, r1, z1, r2);

        return;
    }

    static com.android.server.pm.PackageManagerService$IntentFilterVerifier access$1200(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$IntentFilterVerifier $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier>;

        return $r1;
    }

    static void access$1300(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void reconcileApps(java.lang.String)>(r1);

        return;
    }

    static void access$1400(com.android.server.pm.PackageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void loadPrivatePackages(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    static void access$1500(com.android.server.pm.PackageManagerService, android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void unloadPrivatePackages(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    static boolean access$200(android.content.pm.parsing.component.ParsedIntentInfo)
    {
        android.content.pm.parsing.component.ParsedIntentInfo r0;
        boolean $z0;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedIntentInfo;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasValidDomains(android.content.pm.parsing.component.ParsedIntentInfo)>(r0);

        return $z0;
    }

    static com.android.server.pm.PackageManagerService$PackageInstalledInfo access$2200(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageInstalledInfo createPackageInstalledInfo(int)>(i0);

        return $r1;
    }

    static void access$2300(com.android.server.pm.PackageManagerService, boolean, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        java.util.List r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.util.List;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void processInstallRequestsAsync(boolean,java.util.List)>(z0, r1);

        return;
    }

    static boolean access$2400()
    {
        boolean $z0;

        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        return $z0;
    }

    static int access$2500(com.android.server.pm.PackageManagerService, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int fixUpInstallReason(java.lang.String,int,int)>(r1, i0, i1);

        return $i2;
    }

    static void access$2600(com.android.server.pm.parsing.pkg.AndroidPackage, android.content.pm.PackageInfoLite) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        android.content.pm.PackageInfoLite r1;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: android.content.pm.PackageInfoLite;

        staticinvoke <com.android.server.pm.PackageManagerService: void checkDowngrade(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.PackageInfoLite)>(r0, r1);

        return;
    }

    static com.android.server.pm.PackageManagerService$InstallArgs access$2700(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$InstallParams r1;
        com.android.server.pm.PackageManagerService$InstallArgs $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(com.android.server.pm.PackageManagerService$InstallParams)>(r1);

        return $r2;
    }

    static int access$2808(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 = r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken>;

        $i1 = i0 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = $i1;

        return i0;
    }

    static int access$2908(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 = r0.<com.android.server.pm.PackageManagerService: int mPendingEnableRollbackToken>;

        $i1 = i0 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mPendingEnableRollbackToken> = $i1;

        return i0;
    }

    static void access$300(com.android.server.pm.PackageManagerService, java.lang.String, boolean, java.util.ArrayList, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r3;
        boolean z0;
        java.util.ArrayList r2;
        int i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.util.ArrayList;

        i0 := @parameter4: int;

        r3 := @parameter5: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageChangedBroadcast(java.lang.String,boolean,java.util.ArrayList,int,java.lang.String)>(r1, z0, r2, i0, r3);

        return;
    }

    static boolean access$3000(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isIntegrityVerificationEnabled()>();

        return $z0;
    }

    static long access$3100(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        long $l0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $l0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getIntegrityVerificationTimeout()>();

        return $l0;
    }

    static boolean access$3200(com.android.server.pm.PackageManagerService, android.content.pm.PackageInfoLite, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.PackageInfoLite r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.pm.PackageInfoLite;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isVerificationEnabled(android.content.pm.PackageInfoLite,int,int,int)>(r1, i0, i1, i2);

        return $z0;
    }

    static java.util.List access$3300(com.android.server.pm.PackageManagerService, android.content.Intent, java.lang.String, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1;
        boolean z0;
        java.util.List $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceiversInternal(android.content.Intent,java.lang.String,int,int,boolean)>(r1, r2, i0, i1, z0);

        return $r3;
    }

    static java.util.List access$3400(com.android.server.pm.PackageManagerService, android.content.pm.PackageInfoLite, java.util.List, com.android.server.pm.PackageVerificationState)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.PackageInfoLite r1;
        java.util.List r2, $r4;
        com.android.server.pm.PackageVerificationState r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.pm.PackageInfoLite;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: com.android.server.pm.PackageVerificationState;

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List matchVerifiers(android.content.pm.PackageInfoLite,java.util.List,com.android.server.pm.PackageVerificationState)>(r1, r2, r3);

        return $r4;
    }

    static android.content.ComponentName access$3500(com.android.server.pm.PackageManagerService, java.lang.String, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        java.util.List r2;
        android.content.ComponentName $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.List;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName matchComponentForVerifier(java.lang.String,java.util.List)>(r1, r2);

        return $r3;
    }

    static void access$3600(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallArgs, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$InstallArgs r1;
        int i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: com.android.server.pm.PackageManagerService$InstallArgs;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void processPendingInstall(com.android.server.pm.PackageManagerService$InstallArgs,int)>(r1, i0);

        return;
    }

    static java.io.File access$3700(com.android.server.pm.PackageManagerService, java.io.File, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.File r1, $r3;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.io.File getNextCodePath(java.io.File,java.lang.String)>(r1, r2);

        return $r3;
    }

    static android.os.incremental.IncrementalManager access$3800(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.incremental.IncrementalManager $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager mIncrementalManager>;

        return $r1;
    }

    static void access$400(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$PackageInstalledInfo, boolean, boolean, boolean, java.lang.String[], java.util.List, int, boolean, java.lang.String, android.content.pm.IPackageInstallObserver2, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r1;
        boolean z0, z1, z2, z3;
        java.lang.String[] r2;
        java.util.List r3;
        int i0, i1;
        java.lang.String r4;
        android.content.pm.IPackageInstallObserver2 r5;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r2 := @parameter5: java.lang.String[];

        r3 := @parameter6: java.util.List;

        i0 := @parameter7: int;

        z3 := @parameter8: boolean;

        r4 := @parameter9: java.lang.String;

        r5 := @parameter10: android.content.pm.IPackageInstallObserver2;

        i1 := @parameter11: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void handlePackagePostInstall(com.android.server.pm.PackageManagerService$PackageInstalledInfo,boolean,boolean,boolean,java.lang.String[],java.util.List,int,boolean,java.lang.String,android.content.pm.IPackageInstallObserver2,int)>(r1, z0, z1, z2, r2, r3, i0, z3, r4, r5, i1);

        return;
    }

    static int[] access$4300()
    {
        int[] $r0;

        $r0 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        return $r0;
    }

    static boolean access$4600(com.android.server.pm.PackageManagerService, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean clearApplicationUserDataLIF(java.lang.String,int)>(r1, i0);

        return $z0;
    }

    static com.android.server.pm.InstantAppRegistry access$4700(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.InstantAppRegistry $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        return $r1;
    }

    static void access$4800(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUserInternalLocked(int)>(i0);

        return;
    }

    static android.util.SparseBooleanArray access$4900(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.SparseBooleanArray $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mWebInstantAppsDisabled>;

        return $r1;
    }

    static void access$500(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyInstallObserver(java.lang.String)>(r1);

        return;
    }

    static void access$5000(com.android.server.pm.PackageManagerService, java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0, i1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,int,java.lang.String)>(r1, i0, i1, r2);

        return;
    }

    static com.android.server.pm.PackageManagerService$MoveCallbacks access$5300(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        return $r1;
    }

    static void access$5400(com.android.server.pm.PackageManagerService, java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void logAppMovedStorage(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static java.util.ArrayList access$5700(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPackageChangeObservers>;

        return $r1;
    }

    static com.android.server.pm.ModuleInfoProvider access$5800(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.ModuleInfoProvider $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ModuleInfoProvider mModuleInfoProvider>;

        return $r1;
    }

    static java.util.List access$5900(com.android.server.pm.PackageManagerService, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getInstalledApplicationsListInternal(int,int,int)>(i0, i1, i2);

        return $r1;
    }

    static android.util.ArraySet access$600(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        return $r1;
    }

    static java.lang.String access$6000(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        return $r1;
    }

    static boolean access$6100(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r1, i0, i1);

        return $z0;
    }

    static java.lang.String access$6200(com.android.server.pm.PackageManagerService, java.lang.String, long)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r2;
        long l0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>(r1, l0);

        return $r2;
    }

    static java.lang.String[] access$6300(com.android.server.pm.PackageManagerService, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        java.lang.String[] $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUidInternal(int,int)>(i0, i1);

        return $r1;
    }

    static android.util.ArraySet access$6400(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        return $r1;
    }

    static java.lang.String[] access$6500(com.android.server.pm.PackageManagerService, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1, $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String[];

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] dropNonSystemPackages(java.lang.String[])>(r1);

        return $r2;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal access$6600(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        return $r1;
    }

    static java.util.List access$6700(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: java.util.List mKeepUninstalledPackages>;

        return $r1;
    }

    static java.util.List access$6702(com.android.server.pm.PackageManagerService, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.util.List;

        r0.<com.android.server.pm.PackageManagerService: java.util.List mKeepUninstalledPackages> = r1;

        return r1;
    }

    static void access$6800(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void deletePackageIfUnusedLPr(java.lang.String)>(r1);

        return;
    }

    static android.content.pm.PackageInfo access$6900(com.android.server.pm.PackageManagerService, java.lang.String, long, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        long l0;
        int i1, i2, i3;
        android.content.pm.PackageInfo $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoInternal(java.lang.String,long,int,int,int)>(r1, l0, i1, i2, i3);

        return $r2;
    }

    static int access$7000(com.android.server.pm.PackageManagerService, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, $i3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUidInternal(java.lang.String,int,int,int)>(r1, i0, i1, i2);

        return $i3;
    }

    static android.content.pm.ApplicationInfo access$7100(com.android.server.pm.PackageManagerService, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.content.pm.ApplicationInfo $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfoInternal(java.lang.String,int,int,int)>(r1, i0, i1, i2);

        return $r2;
    }

    static android.content.pm.ActivityInfo access$7200(com.android.server.pm.PackageManagerService, android.content.ComponentName, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2;
        android.content.pm.ActivityInfo $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfoInternal(android.content.ComponentName,int,int,int)>(r1, i0, i1, i2);

        return $r2;
    }

    static java.util.List access$7300(com.android.server.pm.PackageManagerService, android.content.Intent, java.lang.String, int, int, int, int, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, i2, i3;
        boolean z0, z1;
        java.util.List $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int,int,int,boolean,boolean)>(r1, r2, i0, i1, i2, i3, z0, z1);

        return $r3;
    }

    static java.util.List access$7400(com.android.server.pm.PackageManagerService, android.content.Intent, java.lang.String, int, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, i2;
        boolean z0;
        java.util.List $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentServicesInternal(android.content.Intent,java.lang.String,int,int,int,boolean)>(r1, r2, i0, i1, i2, z0);

        return $r3;
    }

    static android.content.ComponentName access$7500(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.content.ComponentName $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getDefaultHomeActivity(int)>(i0);

        return $r1;
    }

    static boolean access$7600(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean userNeedsBadging(int)>(i0);

        return $z0;
    }

    static void access$7700(com.android.server.pm.PackageManagerService, android.content.pm.AuxiliaryResolveInfo, android.content.Intent, java.lang.String, java.lang.String, java.lang.String, boolean, android.os.Bundle, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.AuxiliaryResolveInfo r1;
        android.content.Intent r2;
        java.lang.String r3, r4, r5;
        boolean z0;
        android.os.Bundle r6;
        int i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.pm.AuxiliaryResolveInfo;

        r2 := @parameter2: android.content.Intent;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: java.lang.String;

        z0 := @parameter6: boolean;

        r6 := @parameter7: android.os.Bundle;

        i0 := @parameter8: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void requestInstantAppResolutionPhaseTwo(android.content.pm.AuxiliaryResolveInfo,android.content.Intent,java.lang.String,java.lang.String,java.lang.String,boolean,android.os.Bundle,int)>(r1, r2, r3, r4, r5, z0, r6, i0);

        return;
    }

    static boolean access$7800(com.android.server.pm.PackageManagerService, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantAppInternal(java.lang.String,int,int)>(r1, i0, i1);

        return $z0;
    }

    static com.android.server.pm.AppsFilter access$7900(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.AppsFilter $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        return $r1;
    }

    static int access$800(com.android.server.pm.PackageManagerService, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.UserHandle r1;
        int $i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.os.UserHandle;

        $i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getDefaultVerificationResponse(android.os.UserHandle)>(r1);

        return $i0;
    }

    static java.io.File access$8000(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: java.io.File mCacheDir>;

        return $r1;
    }

    static com.android.server.pm.ApexManager access$8100(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.ApexManager $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        return $r1;
    }

    static android.content.pm.PackageInfo access$8200(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int i0, i1;
        android.content.pm.PackageInfo $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r1, i0, i1);

        return $r2;
    }

    static android.content.pm.SharedLibraryInfo access$8300(com.android.server.pm.PackageManagerService, java.lang.String, long)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        long l0;
        android.content.pm.SharedLibraryInfo $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>(r1, l0);

        return $r2;
    }

    static java.util.List access$8400(com.android.server.pm.PackageManagerService, android.content.pm.SharedLibraryInfo, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.SharedLibraryInfo r1;
        int i0, i1;
        java.util.List $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.pm.SharedLibraryInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getPackagesUsingSharedLibraryLPr(android.content.pm.SharedLibraryInfo,int,int)>(r1, i0, i1);

        return $r2;
    }

    static android.content.pm.ResolveInfo access$8500(com.android.server.pm.PackageManagerService, android.content.Intent, java.lang.String, int, int, int, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, i2, i3;
        boolean z0;
        android.content.pm.ResolveInfo $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        z0 := @parameter6: boolean;

        i3 := @parameter7: int;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntentInternal(android.content.Intent,java.lang.String,int,int,int,boolean,int)>(r1, r2, i0, i1, i2, z0, i3);

        return $r3;
    }

    static android.content.pm.ResolveInfo access$8600(com.android.server.pm.PackageManagerService, android.content.Intent, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, i2;
        android.content.pm.ResolveInfo $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveServiceInternal(android.content.Intent,java.lang.String,int,int,int)>(r1, r2, i0, i1, i2);

        return $r3;
    }

    static android.content.pm.ProviderInfo access$8700(com.android.server.pm.PackageManagerService, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        android.content.pm.ProviderInfo $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo resolveContentProviderInternal(java.lang.String,int,int)>(r1, i0, i1);

        return $r2;
    }

    static int access$8800(com.android.server.pm.PackageManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>(i0);

        return $i1;
    }

    static int access$8900(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int $i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        $i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageTargetSdkVersionLockedLPr(java.lang.String)>(r1);

        return $i0;
    }

    static void access$900(com.android.server.pm.PackageManagerService, int, android.net.Uri, int, java.lang.String, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.UserHandle r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        r1 := @parameter2: android.net.Uri;

        i1 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        i2 := @parameter5: int;

        r3 := @parameter6: android.os.UserHandle;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void broadcastPackageVerified(int,android.net.Uri,int,java.lang.String,int,android.os.UserHandle)>(i0, r1, i1, r2, i2, r3);

        return;
    }

    static boolean access$9000(com.android.server.pm.PackageManagerService, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i0, i1);

        return $z0;
    }

    static boolean access$9100(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageSetting, int, android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int i0, i1, i2;
        android.content.ComponentName r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        r2 := @parameter3: android.content.ComponentName;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r1, i0, r2, i1, i2);

        return $z0;
    }

    static void access$9200(com.android.server.pm.PackageManagerService, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyPackageUseLocked(java.lang.String,int)>(r1, i0);

        return;
    }

    static android.util.SparseArray access$9300(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray getAppsWithSharedUserIdsLocked()>();

        return $r1;
    }

    static java.lang.String[] access$9400(com.android.server.pm.PackageManagerService, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        java.lang.String[] $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] getSharedUserPackagesForPackageLocked(java.lang.String,int)>(r1, i0);

        return $r2;
    }

    static void access$9500(com.android.server.pm.PackageManagerService, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void setEnableRollbackCode(int,int)>(i0, i1);

        return;
    }

    static java.lang.String access$9600(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.pm.PackageManagerService;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>(r1);

        return $r2;
    }

    private boolean addBuiltInSharedLibraryLocked(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        boolean $z0;
        android.content.pm.SharedLibraryInfo $r3;
        android.content.pm.VersionedPackage $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean nonStaticSharedLibExistsLocked(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r3 = new android.content.pm.SharedLibraryInfo;

        $r4 = new android.content.pm.VersionedPackage;

        specialinvoke $r4.<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>("android", 0L);

        specialinvoke $r3.<android.content.pm.SharedLibraryInfo: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String,long,int,android.content.pm.VersionedPackage,java.util.List,java.util.List)>(r1, null, null, r2, -1L, 0, $r4, null, null);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void commitSharedLibraryInfoLocked(android.content.pm.SharedLibraryInfo)>($r3);

        return 1;
    }

    private com.android.server.pm.parsing.pkg.AndroidPackage addForInitLI(com.android.server.pm.parsing.pkg.ParsedPackage, int, int, long, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i3, $i15;
        long l2, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12;
        com.android.server.pm.PackageManagerService$ScanRequest r1, $r118, $r120;
        com.android.server.pm.Settings $r2, $r5, $r10, $r20, $r113, $r126, $r128, $r134, $r153;
        java.lang.String $r3, $r4, $r6, $r7, $r11, $r32, $r35, $r40, $r43, $r45, $r48, $r55, $r58, $r60, $r61, $r62, $r63, $r64, $r71, $r73, $r74, $r77, $r80, $r87, $r88, $r93, $r100, $r103, $r105, $r106, $r107, $r108, $r109, $r112, $r115, $r116, $r124, $r125, $r127, $r133, r148, r151, r167, r177;
        com.android.server.pm.PackageSetting $r8, $r12, $r18, $r119, $r121, $r122, $r129, r149, r150, r154;
        com.android.server.pm.parsing.pkg.AndroidPackage $r9, $r117, $r123, $r156;
        java.util.Map $r13, $r17, $r19, r179;
        android.util.ArrayMap $r14, $r15, $r89;
        com.android.server.pm.Settings$VersionInfo $r16;
        com.android.server.pm.KeySetManagerService $r21;
        java.lang.Object $r22, r147, r159, r161, r172, r176, r182;
        com.android.server.pm.UserManagerService $r23;
        com.android.server.pm.PackageManagerService$ReconciledPackage $r24;
        int[] $r25;
        boolean $z1, $z2, $z3, $z5, $z6, $z7, z8, z9, z10, z11, z12, $z13, $z14, z15, z16, z17, z18, z20, $z21, z23, z24;
        android.content.pm.PackageParser$SigningDetails $r27, $r29, $r67, $r68;
        com.android.server.pm.PackageSignatures $r28, $r66;
        java.lang.StringBuilder $r30, $r46, $r69, $r75, $r91, r152;
        java.lang.String[] $r65, $r110;
        com.android.server.pm.PackageManagerException $r86, $r141;
        com.android.server.pm.PackageManagerService$InstallArgs $r111, r171;
        byte $b13;
        java.lang.Throwable $r135, $r136, $r137, $r138, $r139, $r140, $r142, $r143, $r144, r168;
        com.android.server.pm.parsing.pkg.ParsedPackage r145;
        android.os.UserHandle r146;
        com.android.server.pm.SharedUserSetting r155;
        com.android.server.pm.PackageManagerService$Injector $r157;
        com.android.server.pm.PackageManagerService$ScanResult r158, r175;
        com.android.server.pm.PackageManagerService$PackageFreezer r166;
        com.android.server.pm.PackageManagerService$ReconcileRequest r178;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r145 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r146 := @parameter4: android.os.UserHandle;

        z8 = 0;

        $i3 = i0 & 16;

        if $i3 == 0 goto label001;

        z9 = 1;

        goto label002;

     label001:
        z9 = 0;

     label002:
        r147 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r147;

     label003:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getRealPackage()>();

        r148 = virtualinvoke $r2.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>($r3);

        $r4 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getRealPackageName(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r145, r148);

        if $r4 == null goto label004;

        staticinvoke <com.android.server.pm.PackageManagerService: void ensurePackageRenamed(com.android.server.pm.parsing.pkg.ParsedPackage,java.lang.String)>(r145, r148);

     label004:
        r149 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getOriginalPackageLocked(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r145, r148);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r150 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r6);

     label005:
        if r149 != null goto label006;

        goto label007;

     label006:
        r150 = r149;

     label007:
        if r150 == null goto label008;

        z10 = 1;

        goto label009;

     label008:
        z10 = 0;

     label009:
        if z10 == 0 goto label012;

     label010:
        r151 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

     label011:
        goto label013;

     label012:
        r151 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

     label013:
        if z9 == 0 goto label015;

        if z10 != 0 goto label015;

     label014:
        $r128 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r129 = virtualinvoke $r128.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>(r151);

        if $r129 == null goto label015;

        r152 = new java.lang.StringBuilder;

        specialinvoke r152.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inconsistent package setting of updated system app for ");

        virtualinvoke r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r151);

        virtualinvoke r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". To recover it, enable the system appand install it as non-updated system app.");

        $r133 = virtualinvoke r152.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r133);

        $r134 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r134.<com.android.server.pm.Settings: void removeDisabledSystemPackageLPw(java.lang.String)>(r151);

     label015:
        $r153 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r154 = virtualinvoke $r153.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>(r151);

     label016:
        if r154 == null goto label017;

        z11 = 1;

        goto label018;

     label017:
        z11 = 0;

     label018:
        $r7 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getSharedUserId()>();

        if $r7 == null goto label020;

        $r126 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r127 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getSharedUserId()>();

        r155 = virtualinvoke $r126.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>($r127, 0, 0, 1);

     label019:
        goto label021;

     label020:
        r155 = null;

     label021:
        if z9 == 0 goto label028;

        if z11 == 0 goto label027;

     label022:
        $r117 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage>;

        if $r117 == null goto label024;

        $r123 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage>;

        $r124 = interfaceinvoke $r123.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r125 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r124, $r125);

        if $z7 == 0 goto label024;

     label023:
        z12 = 1;

        goto label025;

     label024:
        z12 = 0;

     label025:
        r1 = new com.android.server.pm.PackageManagerService$ScanRequest;

        specialinvoke r1.<com.android.server.pm.PackageManagerService$ScanRequest: void <init>(com.android.server.pm.parsing.pkg.ParsedPackage,com.android.server.pm.SharedUserSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,java.lang.String,int,int,boolean,android.os.UserHandle,java.lang.String)>(r145, r155, null, r154, null, null, null, i0, i1, z12, r146, null);

        $r156 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage>;

        staticinvoke <com.android.server.pm.PackageManagerService: void applyPolicy(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r145, i0, i1, $r156, 1);

        $r157 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $z13 = r0.<com.android.server.pm.PackageManagerService: boolean mFactoryTest>;

        r158 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanResult scanPackageOnlyLI(com.android.server.pm.PackageManagerService$ScanRequest,com.android.server.pm.PackageManagerService$Injector,boolean,long)>(r1, $r157, $z13, -1L);

        $z14 = r158.<com.android.server.pm.PackageManagerService$ScanResult: boolean existingSettingCopied>;

        if $z14 == 0 goto label028;

        $r118 = r158.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r119 = $r118.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        if $r119 == null goto label028;

        $r120 = r158.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r122 = $r120.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        $r121 = r158.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        virtualinvoke $r122.<com.android.server.pm.PackageSetting: void updateFrom(com.android.server.pm.PackageSetting)>($r121);

     label026:
        goto label028;

     label027:
        goto label028;

     label028:
        exitmonitor r147;

     label029:
        if z10 == 0 goto label030;

        $r115 = r150.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r116 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        $z6 = virtualinvoke $r115.<java.lang.String: boolean equals(java.lang.Object)>($r116);

        if $z6 != 0 goto label030;

        z15 = 1;

        goto label031;

     label030:
        z15 = 0;

     label031:
        if z10 == 0 goto label032;

        $l11 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        $l12 = r150.<com.android.server.pm.PackageSetting: long versionCode>;

        $b13 = $l11 cmp $l12;

        if $b13 <= 0 goto label032;

        z16 = 1;

        goto label033;

     label032:
        z16 = 0;

     label033:
        if z9 == 0 goto label034;

        if z11 == 0 goto label034;

        if z15 == 0 goto label034;

        if z16 == 0 goto label034;

        z17 = 1;

        goto label035;

     label034:
        z17 = 0;

     label035:
        if z17 == 0 goto label046;

        r159 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r159;

     label036:
        $r89 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r88 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r89.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r88);

        exitmonitor r159;

     label037:
        $r91 = new java.lang.StringBuilder;

        specialinvoke $r91.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package updated; name: ");

        $r93 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r93);

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $l9 = r150.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $l10 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r100 = r150.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r103 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r103);

        $r105 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r105);

        $r108 = r150.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r109 = r150.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $r107 = r150.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r106 = r150.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        $r110 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r107, $r106);

        $r111 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(java.lang.String,java.lang.String,java.lang.String[])>($r108, $r109, $r110);

        virtualinvoke $r111.<com.android.server.pm.PackageManagerService$InstallArgs: void cleanUpResourcesLI()>();

        r161 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r161;

     label038:
        $r113 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r112 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r113.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>($r112);

        exitmonitor r161;

     label039:
        goto label046;

     label040:
        $r144 := @caughtexception;

     label041:
        exitmonitor r161;

     label042:
        throw $r144;

     label043:
        $r143 := @caughtexception;

     label044:
        exitmonitor r159;

     label045:
        throw $r143;

     label046:
        if z9 == 0 goto label048;

        if z11 == 0 goto label048;

        if z17 == 0 goto label047;

        goto label048;

     label047:
        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r77 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r80 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: updated version ");

        $l7 = r150.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" better than this ");

        $l8 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r86 = new com.android.server.pm.PackageManagerException;

        $r87 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r86.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(5, $r87);

        throw $r86;

     label048:
        if z9 == 0 goto label049;

        z18 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        goto label050;

     label049:
        z18 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isApkVerificationForced(com.android.server.pm.PackageSetting)>(r150);

     label050:
        if z9 != 0 goto label052;

        if z18 == 0 goto label051;

        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canSkipForcedPackageVerification(com.android.server.pm.parsing.pkg.AndroidPackage)>(r145);

        if $z5 == 0 goto label051;

        goto label052;

     label051:
        goto label053;

     label052:
        z8 = 1;

     label053:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void collectCertificatesLI(com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.ParsedPackage,boolean,boolean)>(r150, r145, z18, z8);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void maybeClearProfilesForUpgradesLI(com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage)>(r150, r145);

        if z9 == 0 goto label074;

        if z11 != 0 goto label074;

        if z10 == 0 goto label074;

        $z1 = virtualinvoke r150.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z1 != 0 goto label073;

        $r27 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r28 = r150.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r29 = $r28.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z2 = virtualinvoke $r27.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r29, 1);

        if $z2 != 0 goto label066;

        $r66 = r150.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r67 = $r66.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r68 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z3 = virtualinvoke $r67.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r68, 8);

        if $z3 != 0 goto label065;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package signature mismatch; name: ");

        $r71 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r73);

        $r74 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r166 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,java.lang.String)>($r74, "scanPackageInternalLI");

     label054:
        r167 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

     label055:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean deletePackageLIF(java.lang.String,android.os.UserHandle,boolean,int[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean,com.android.server.pm.parsing.pkg.ParsedPackage)>(r167, null, 1, null, 0, null, 0, null);

     label056:
        if r166 == null goto label057;

        virtualinvoke r166.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label057:
        z20 = 0;

        goto label075;

     label058:
        $r135 := @caughtexception;

        r168 = $r135;

        goto label060;

     label059:
        $r136 := @caughtexception;

        r168 = $r136;

     label060:
        if r166 == null goto label064;

     label061:
        virtualinvoke r166.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label062:
        goto label064;

     label063:
        $r138 := @caughtexception;

        virtualinvoke r168.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r138);

     label064:
        throw r168;

     label065:
        goto label066;

     label066:
        if z16 == 0 goto label072;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package enabled; name: ");

        $r48 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $l5 = r150.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $l6 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r55 = r150.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ");

        $r58 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r60);

        $r63 = r150.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r64 = r150.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $r62 = r150.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r61 = r150.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        $r65 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r62, $r61);

        r171 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(java.lang.String,java.lang.String,java.lang.String[])>($r63, $r64, $r65);

        r172 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r172;

     label067:
        virtualinvoke r171.<com.android.server.pm.PackageManagerService$InstallArgs: void cleanUpResourcesLI()>();

        exitmonitor r172;

     label068:
        goto label074;

     label069:
        $r140 := @caughtexception;

     label070:
        exitmonitor r172;

     label071:
        throw $r140;

     label072:
        z20 = 1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package disabled; name: ");

        $r32 = r150.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; old: ");

        $r35 = r150.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $l4 = r150.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; new: ");

        $r40 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r43 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(4, $r45);

        goto label075;

     label073:
        goto label074;

     label074:
        z20 = 0;

     label075:
        $i15 = i1 | 2;

        r175 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanResult scanPackageNewLI(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,long,android.os.UserHandle,java.lang.String)>(r145, i0, $i15, l2, r146, null);

        $z21 = r175.<com.android.server.pm.PackageManagerService$ScanResult: boolean success>;

        if $z21 == 0 goto label095;

        r176 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r176;

        z23 = 0;

     label076:
        $r12 = r175.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        r177 = $r12.<com.android.server.pm.PackageSetting: java.lang.String name>;

     label077:
        z23 = 0;

     label078:
        r178 = new com.android.server.pm.PackageManagerService$ReconcileRequest;

     label079:
        z23 = 0;

     label080:
        $r13 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r177, r175);

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r15 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r16 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r145);

        $r17 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r177, $r16);

        $r18 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getSharedLibLatestVersionSetting(com.android.server.pm.PackageManagerService$ScanResult)>(r175);

        $r19 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r177, $r18);

        specialinvoke r178.<com.android.server.pm.PackageManagerService$ReconcileRequest: void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,com.android.server.pm.PackageManagerService$1)>($r13, $r14, $r15, $r17, $r19, null);

     label081:
        z23 = 0;

     label082:
        $r20 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r21 = $r20.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        r179 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.Map reconcilePackagesLocked(com.android.server.pm.PackageManagerService$ReconcileRequest,com.android.server.pm.KeySetManagerService)>(r178, $r21);

     label083:
        z23 = 0;

     label084:
        z24 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean optimisticallyRegisterAppId(com.android.server.pm.PackageManagerService$ScanResult)>(r175);

     label085:
        z23 = z24;

     label086:
        $r22 = interfaceinvoke r179.<java.util.Map: java.lang.Object get(java.lang.Object)>(r177);

        $r24 = (com.android.server.pm.PackageManagerService$ReconciledPackage) $r22;

        $r23 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r25 = virtualinvoke $r23.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage commitReconciledScanResultLocked(com.android.server.pm.PackageManagerService$ReconciledPackage,int[])>($r24, $r25);

     label087:
        exitmonitor r176;

     label088:
        goto label095;

     label089:
        $r142 := @caughtexception;

        goto label093;

     label090:
        $r141 := @caughtexception;

        if z23 == 0 goto label092;

     label091:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)>(r175);

     label092:
        throw $r141;

     label093:
        exitmonitor r176;

     label094:
        throw $r142;

     label095:
        if z20 == 0 goto label101;

        r182 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r182;

     label096:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = interfaceinvoke r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r10.<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String,boolean)>($r11, 1);

        exitmonitor r182;

     label097:
        goto label101;

     label098:
        $r137 := @caughtexception;

     label099:
        exitmonitor r182;

     label100:
        throw $r137;

     label101:
        $r8 = r175.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r9 = $r8.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        return $r9;

     label102:
        $r139 := @caughtexception;

     label103:
        exitmonitor r147;

     label104:
        throw $r139;

        catch java.lang.Throwable from label003 to label004 with label102;
        catch java.lang.Throwable from label004 to label005 with label102;
        catch java.lang.Throwable from label010 to label011 with label102;
        catch java.lang.Throwable from label012 to label013 with label102;
        catch java.lang.Throwable from label014 to label015 with label102;
        catch java.lang.Throwable from label015 to label016 with label102;
        catch java.lang.Throwable from label018 to label019 with label102;
        catch java.lang.Throwable from label022 to label023 with label102;
        catch java.lang.Throwable from label025 to label026 with label102;
        catch java.lang.Throwable from label028 to label029 with label102;
        catch java.lang.Throwable from label036 to label037 with label043;
        catch java.lang.Throwable from label038 to label039 with label040;
        catch java.lang.Throwable from label041 to label042 with label040;
        catch java.lang.Throwable from label044 to label045 with label043;
        catch java.lang.Throwable from label054 to label055 with label059;
        catch java.lang.Throwable from label055 to label056 with label058;
        catch java.lang.Throwable from label061 to label062 with label063;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label070 to label071 with label069;
        catch com.android.server.pm.PackageManagerException from label076 to label077 with label090;
        catch java.lang.Throwable from label076 to label077 with label089;
        catch com.android.server.pm.PackageManagerException from label078 to label079 with label090;
        catch java.lang.Throwable from label078 to label079 with label089;
        catch com.android.server.pm.PackageManagerException from label080 to label081 with label090;
        catch java.lang.Throwable from label080 to label081 with label089;
        catch com.android.server.pm.PackageManagerException from label082 to label083 with label090;
        catch java.lang.Throwable from label082 to label083 with label089;
        catch com.android.server.pm.PackageManagerException from label084 to label085 with label090;
        catch java.lang.Throwable from label084 to label085 with label089;
        catch com.android.server.pm.PackageManagerException from label086 to label087 with label090;
        catch java.lang.Throwable from label086 to label087 with label089;
        catch java.lang.Throwable from label087 to label088 with label089;
        catch java.lang.Throwable from label091 to label092 with label089;
        catch java.lang.Throwable from label092 to label093 with label089;
        catch java.lang.Throwable from label093 to label094 with label089;
        catch java.lang.Throwable from label096 to label097 with label098;
        catch java.lang.Throwable from label099 to label100 with label098;
        catch java.lang.Throwable from label103 to label104 with label102;
    }

    private void addPackageHoldingPermissions(java.util.ArrayList, com.android.server.pm.PackageSetting, java.lang.String[], boolean[], int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.ArrayList r1;
        java.lang.String[] r2, $r5, $r7;
        boolean[] r3;
        com.android.server.pm.permission.PermissionsState r4;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10;
        boolean $z1, $z2;
        java.lang.String $r6, $r8;
        com.android.server.pm.PackageSetting r9;
        android.content.pm.PackageInfo r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.ArrayList;

        r9 := @parameter1: com.android.server.pm.PackageSetting;

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: boolean[];

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 = 0;

        r4 = virtualinvoke r9.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        i7 = 0;

     label01:
        $i0 = lengthof r2;

        if i7 >= $i0 goto label04;

        $r8 = r2[i7];

        $z2 = virtualinvoke r4.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>($r8, i5);

        if $z2 == 0 goto label02;

        r3[i7] = 1;

        i6 = i6 + 1;

        goto label03;

     label02:
        r3[i7] = 0;

     label03:
        i7 = i7 + 1;

        goto label01;

     label04:
        if i6 != 0 goto label05;

        return;

     label05:
        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r9, i4, i5);

        if r10 == null goto label10;

        $i1 = i4 & 4096;

        if $i1 != 0 goto label09;

        $i2 = lengthof r2;

        if i6 != $i2 goto label06;

        r10.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions> = r2;

        goto label09;

     label06:
        $r5 = newarray (java.lang.String)[i6];

        r10.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions> = $r5;

        i8 = 0;

        i9 = 0;

     label07:
        $i3 = lengthof r2;

        if i9 >= $i3 goto label09;

        i10 = i8;

        $z1 = r3[i9];

        if $z1 == 0 goto label08;

        $r7 = r10.<android.content.pm.PackageInfo: java.lang.String[] requestedPermissions>;

        $r6 = r2[i9];

        $r7[i8] = $r6;

        i10 = i8 + 1;

     label08:
        i9 = i9 + 1;

        i8 = i10;

        goto label07;

     label09:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

     label10:
        return;
    }

    private void addPreferredActivityInternal(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, boolean, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i6;
        android.content.ComponentName[] r1;
        android.content.ComponentName r2;
        boolean z0, $z1;
        com.android.server.pm.PreferredIntentResolver r3;
        com.android.server.pm.PreferredActivity r4;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        android.content.Context $r6, $r8;
        com.android.server.pm.Settings $r7;
        java.lang.StringBuilder $r9;
        java.lang.String $r12, r15;
        java.lang.Throwable $r13;
        android.content.IntentFilter r14;
        java.lang.Object r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.ComponentName[];

        r2 := @parameter3: android.content.ComponentName;

        z0 := @parameter4: boolean;

        i1 := @parameter5: int;

        r15 := @parameter6: java.lang.String;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i2, i1, 1, 0, "add preferred activity");

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS");

        if $i3 == 0 goto label2;

        $i6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>(i2);

        if $i6 >= 8 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring addPreferredActivity() from uid ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r12);

        return;

     label1:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

     label2:
        $i4 = virtualinvoke r14.<android.content.IntentFilter: int countActions()>();

        if $i4 != 0 goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot set a preferred activity with no filter actions");

        return;

     label3:
        r17 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r17;

     label4:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r3 = virtualinvoke $r7.<com.android.server.pm.Settings: com.android.server.pm.PreferredIntentResolver editPreferredActivitiesLPw(int)>(i1);

        r4 = new com.android.server.pm.PreferredActivity;

        specialinvoke r4.<com.android.server.pm.PreferredActivity: void <init>(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean)>(r14, i0, r1, r2, z0);

        virtualinvoke r3.<com.android.server.pm.PreferredIntentResolver: void addFilter(java.lang.Object)>(r4);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i1);

        exitmonitor r17;

     label5:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>(i1);

        if $z1 != 0 goto label6;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(i1);

     label6:
        return;

     label7:
        $r13 := @caughtexception;

     label8:
        exitmonitor r17;

     label9:
        throw $r13;

        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void addSharedLibraryLPr(com.android.server.pm.parsing.pkg.AndroidPackage, java.util.Set, android.content.pm.SharedLibraryInfo, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, r4, r6, r23;
        java.util.Set r2;
        android.content.pm.SharedLibraryInfo r3;
        com.android.server.pm.PackageSetting r5, r7, r24;
        java.lang.String $r8, $r10, $r13, $r18, $r19, $r20, $r21, $r22;
        android.util.ArrayMap $r9;
        java.lang.Object $r11;
        com.android.server.pm.Settings $r12;
        java.util.List $r14, $r17;
        com.android.server.pm.'-$$Lambda$PLzRNNUpYHZlGNIn1ofLtN374Ow' $r15;
        com.android.server.pm.pkg.PackageStateUnserialized $r16;
        boolean $z2, $z3;
        java.util.function.BiConsumer r25;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: java.util.Set;

        r3 := @parameter2: android.content.pm.SharedLibraryInfo;

        r4 := @parameter3: com.android.server.pm.parsing.pkg.AndroidPackage;

        r5 := @parameter4: com.android.server.pm.PackageSetting;

        $r8 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        if $r8 == null goto label1;

        $r22 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r22);

        return;

     label1:
        $r9 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        r6 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r11;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r7 = virtualinvoke $r12.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r13);

        r23 = r6;

        r24 = r7;

        if r4 == null goto label3;

        r23 = r6;

        r24 = r7;

        $r18 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r19 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z2 == 0 goto label3;

        if r6 == null goto label2;

        r23 = r6;

        r24 = r7;

        $r20 = interfaceinvoke r6.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r21 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z3 == 0 goto label3;

     label2:
        r24 = r5;

        r23 = r4;

     label3:
        if r23 == null goto label4;

        $r14 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.util.List getAllCodePaths(com.android.server.pm.parsing.pkg.AndroidPackage)>(r23);

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        $r15 = <com.android.server.pm._$$Lambda$PLzRNNUpYHZlGNIn1ofLtN374Ow: com.android.server.pm.'-$$Lambda$PLzRNNUpYHZlGNIn1ofLtN374Ow' INSTANCE>;

        r25 = (java.util.function.BiConsumer) $r15;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void applyDefiningSharedLibraryUpdateLocked(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.SharedLibraryInfo,java.util.function.BiConsumer)>(r1, r3, r25);

        if r24 == null goto label4;

        $r16 = virtualinvoke r24.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $r17 = virtualinvoke $r16.<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryFiles()>();

        interfaceinvoke r2.<java.util.Set: boolean addAll(java.util.Collection)>($r17);

     label4:
        return;
    }

    private static boolean addSharedLibraryToPackageVersionMap(java.util.Map, android.content.pm.SharedLibraryInfo)
    {
        java.util.Map r0;
        android.content.pm.SharedLibraryInfo r1;
        java.lang.String r2;
        boolean $z0;
        android.util.LongSparseArray $r3, $r6, $r8;
        java.lang.Object $r5, $r7;
        long $l0, $l2;
        int $i1, $i3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: android.content.pm.SharedLibraryInfo;

        r2 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: int getType()>();

        if $i1 == 2 goto label1;

        return 0;

     label1:
        $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r8 = (android.util.LongSparseArray) $r7;

        $l2 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $i3 = virtualinvoke $r8.<android.util.LongSparseArray: int indexOfKey(long)>($l2);

        if $i3 < 0 goto label3;

        return 0;

     label2:
        $r3 = new android.util.LongSparseArray;

        specialinvoke $r3.<android.util.LongSparseArray: void <init>()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r3);

     label3:
        $r5 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r6 = (android.util.LongSparseArray) $r5;

        $l0 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        virtualinvoke $r6.<android.util.LongSparseArray: void put(long,java.lang.Object)>($l0, r1);

        return 1;
    }

    private int adjustScanFlags(int, com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting, android.os.UserHandle, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.UserHandle r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, $i26, i27, $i28;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.String $r3, $r5;
        com.android.server.pm.Settings $r4, $r6;
        android.util.ArrayMap $r7;
        java.lang.Object $r8, r22;
        com.android.server.pm.PackageSetting $r9, r17, r18;
        com.android.server.pm.PackageSignatures $r10;
        android.content.pm.PackageParser$SigningDetails $r11, $r13;
        android.content.pm.Signature[] $r12, $r14;
        com.android.server.pm.PackageManagerException $r15;
        java.lang.Throwable $r16;
        com.android.server.pm.SharedUserSetting r19, r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i15 := @parameter0: int;

        r17 := @parameter1: com.android.server.pm.PackageSetting;

        r18 := @parameter2: com.android.server.pm.PackageSetting;

        r1 := @parameter3: android.os.UserHandle;

        r2 := @parameter4: com.android.server.pm.parsing.pkg.AndroidPackage;

        $i0 = i15 & 4;

        if $i0 == 0 goto label01;

        if r18 != null goto label01;

        if r17 == null goto label01;

        $z4 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z4 == 0 goto label01;

        r18 = r17;

        goto label01;

     label01:
        i16 = i15;

        if r18 == null goto label07;

        i17 = i15 | 65536;

        i18 = i17;

        $i3 = r18.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i4 = $i3 & 8;

        if $i4 == 0 goto label02;

        i18 = i17 | 131072;

     label02:
        i19 = i18;

        $i5 = r18.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i6 = $i5 & 131072;

        if $i6 == 0 goto label03;

        i19 = i18 | 262144;

     label03:
        i20 = i19;

        $i7 = r18.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i8 = $i7 & 262144;

        if $i8 == 0 goto label04;

        i20 = i19 | 524288;

     label04:
        i21 = i20;

        $i9 = r18.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i10 = $i9 & 524288;

        if $i10 == 0 goto label05;

        i21 = i20 | 1048576;

     label05:
        i22 = i21;

        $i11 = r18.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i12 = $i11 & 2097152;

        if $i12 == 0 goto label06;

        i22 = i21 | 2097152;

     label06:
        i16 = i22;

        $i13 = r18.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i14 = $i13 & 1073741824;

        if $i14 == 0 goto label07;

        i16 = i22 | 4194304;

     label07:
        i23 = i16;

        if r17 == null goto label11;

        if r1 != null goto label08;

        i24 = 0;

        goto label09;

     label08:
        i24 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

     label09:
        i25 = i16;

        $z2 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i24);

        if $z2 == 0 goto label10;

        i25 = i16 | 8192;

     label10:
        i23 = i25;

        $z3 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean getVirtulalPreload(int)>(i24);

        if $z3 == 0 goto label11;

        i23 = i25 | 32768;

     label11:
        $i26 = 524288 & i23;

        if $i26 == 0 goto label12;

        $i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getVendorPartitionVersion()>();

        if $i2 >= 28 goto label12;

        z5 = 1;

        goto label13;

     label12:
        z5 = 0;

     label13:
        i27 = i23;

        $i28 = i23 & 131072;

        if $i28 != 0 goto label25;

        i27 = i23;

        $z0 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

        if $z0 != 0 goto label25;

        i27 = i23;

        $r3 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        if $r3 == null goto label25;

        i27 = i23;

        if z5 != 0 goto label25;

        r19 = null;

     label14:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        r20 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>($r5, 0, 0, 0);

     label15:
        r19 = r20;

        goto label17;

     label16:
        $r15 := @caughtexception;

     label17:
        i27 = i23;

        if r19 == null goto label25;

        i27 = i23;

        $z1 = virtualinvoke r19.<com.android.server.pm.SharedUserSetting: boolean isPrivileged()>();

        if $z1 == 0 goto label25;

        r22 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r22;

        i27 = i23;

     label18:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>("android");

        $r9 = (com.android.server.pm.PackageSetting) $r8;

        $r10 = $r9.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r11 = $r10.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r12 = $r11.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r13 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r14 = $r13.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r12, $r14);

        if $i1 == 0 goto label20;

     label19:
        i27 = i23 | 131072;

     label20:
        exitmonitor r22;

     label21:
        goto label25;

     label22:
        $r16 := @caughtexception;

     label23:
        exitmonitor r22;

     label24:
        throw $r16;

     label25:
        return i27;

        catch com.android.server.pm.PackageManagerException from label14 to label15 with label16;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private boolean allHavePackage(java.util.List, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        java.lang.String r2, $r4;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.Object $r3;
        android.content.pm.ResolveInfo r5;
        android.content.pm.ActivityInfo r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        i1 = 0;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label2:
        if i1 >= i0 goto label7;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r5 = (android.content.pm.ResolveInfo) $r3;

        if r5 == null goto label3;

        r6 = r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        goto label4;

     label3:
        r6 = null;

     label4:
        if r6 == null goto label6;

        $r4 = r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label5;

        goto label6;

     label5:
        i1 = i1 + 1;

        goto label2;

     label6:
        return 0;

     label7:
        return 1;
    }

    private static boolean apkHasCode(java.lang.String)
    {
        android.util.jar.StrictJarFile r0, r7, r8;
        java.lang.Throwable $r1, $r2, $r3, $r4, $r5;
        java.lang.String r6;
        boolean z0;
        java.util.zip.ZipEntry r10;

        r6 := @parameter0: java.lang.String;

        z0 = 0;

        r7 = null;

        r8 = null;

     label01:
        r0 = new android.util.jar.StrictJarFile;

     label02:
        r7 = null;

        r8 = null;

     label03:
        specialinvoke r0.<android.util.jar.StrictJarFile: void <init>(java.lang.String,boolean,boolean)>(r6, 0, 0);

     label04:
        r7 = r0;

        r8 = r0;

     label05:
        r10 = virtualinvoke r0.<android.util.jar.StrictJarFile: java.util.zip.ZipEntry findEntry(java.lang.String)>("classes.dex");

     label06:
        if r10 == null goto label07;

        z0 = 1;

     label07:
        virtualinvoke r0.<android.util.jar.StrictJarFile: void close()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

        goto label08;

     label10:
        return z0;

     label11:
        $r5 := @caughtexception;

        if r7 == null goto label15;

     label12:
        virtualinvoke r7.<android.util.jar.StrictJarFile: void close()>();

     label13:
        goto label15;

     label14:
        $r1 := @caughtexception;

     label15:
        throw $r5;

     label16:
        $r2 := @caughtexception;

        if r8 == null goto label20;

     label17:
        virtualinvoke r8.<android.util.jar.StrictJarFile: void close()>();

     label18:
        goto label20;

     label19:
        $r4 := @caughtexception;

        goto label20;

     label20:
        return 0;

        catch java.io.IOException from label01 to label02 with label16;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.io.IOException from label03 to label04 with label16;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.io.IOException from label17 to label18 with label19;
    }

    private static java.util.List applyAdjustedAbiToSharedUser(com.android.server.pm.SharedUserSetting, com.android.server.pm.parsing.pkg.ParsedPackage, java.lang.String)
    {
        com.android.server.pm.parsing.pkg.ParsedPackage r0;
        java.lang.String r1, $r6, $r9, $r10, $r12, $r13;
        java.util.Iterator r2;
        com.android.server.pm.PackageSetting r3;
        android.util.ArraySet $r4;
        java.lang.Object $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage $r7, $r8;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r11, r15, r16;
        com.android.server.pm.SharedUserSetting r14;

        r14 := @parameter0: com.android.server.pm.SharedUserSetting;

        r0 := @parameter1: com.android.server.pm.parsing.pkg.ParsedPackage;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrimaryCpuAbi(java.lang.String)>(r1);

     label1:
        $r4 = r14.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        r2 = virtualinvoke $r4.<android.util.ArraySet: java.util.Iterator iterator()>();

        r15 = null;

     label2:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.PackageSetting) $r5;

        if r0 == null goto label3;

        r16 = r15;

        $r12 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r13 = r3.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label6;

     label3:
        $r6 = r3.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        if $r6 == null goto label4;

        goto label2;

     label4:
        r3.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString> = r1;

        r16 = r15;

        $r7 = r3.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r7 == null goto label6;

        r16 = r15;

        $r8 = r3.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r9 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>($r8);

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, $r9);

        if $z0 != 0 goto label6;

        r16 = r15;

        if r15 != null goto label5;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r16 = $r11;

     label5:
        $r10 = r3.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        interfaceinvoke r16.<java.util.List: boolean add(java.lang.Object)>($r10);

     label6:
        r15 = r16;

        goto label2;

     label7:
        return r15;
    }

    private void applyDefiningSharedLibraryUpdateLocked(com.android.server.pm.parsing.pkg.AndroidPackage, android.content.pm.SharedLibraryInfo, java.util.function.BiConsumer)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.SharedLibraryInfo r1, r10, r11;
        java.util.function.BiConsumer r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r7, $r8;
        java.util.List $r5;
        java.lang.Object $r6;
        long $l0;
        com.android.server.pm.parsing.pkg.AndroidPackage r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: android.content.pm.SharedLibraryInfo;

        r2 := @parameter2: java.util.function.BiConsumer;

        $z0 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>(r9);

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r4 == null goto label2;

        $r8 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $l0 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>($r8, $l0);

        if r10 == null goto label1;

        interfaceinvoke r2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r10, r1);

     label1:
        goto label5;

     label2:
        $r5 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        r11 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>($r7, -1L);

        if r11 == null goto label4;

        interfaceinvoke r2.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r11, r1);

     label4:
        goto label3;

     label5:
        return;
    }

    private void applyMimeGroupChanges(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        com.android.server.pm.ComponentResolver $r3;
        boolean $z0;
        android.content.pm.PackageManagerInternal $r4;
        com.android.server.pm._$$Lambda$PackageManagerService$3G4n_u5tb7KcICFv_OHxfyTY_W4 $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.ComponentResolver: boolean updateMimeGroup(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        $r5 = new com.android.server.pm._$$Lambda$PackageManagerService$3G4n_u5tb7KcICFv_OHxfyTY_W4;

        specialinvoke $r5.<com.android.server.pm._$$Lambda$PackageManagerService$3G4n_u5tb7KcICFv_OHxfyTY_W4: void <init>(com.android.server.pm.PackageManagerService,java.lang.String)>(r0, r1);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

     label1:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        virtualinvoke $r4.<android.content.pm.PackageManagerInternal: void writeSettings(boolean)>(0);

        return;
    }

    private static void applyPolicy(com.android.server.pm.parsing.pkg.ParsedPackage, int, int, com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.parsing.pkg.ParsedPackage r0, $r2, $r3, $r4, $r5, $r6, $r12, $r13, r24, r25, r26, r27, r28;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean z0, $z2, $z3, $z4, z5, z6, z7, z8, z9, z10, z11, $z12;
        java.lang.String $r9, $r10, $r21;
        android.content.pm.PackageParser$SigningDetails $r15, $r17;
        android.content.pm.Signature[] $r16, $r18;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter4: boolean;

        $i2 = 65536 & i1;

        if $i2 == 0 goto label02;

        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSystem(boolean)>(1);

        $z3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isDirectBootAware()>();

        if $z3 == 0 goto label01;

        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setAllComponentsDirectBootAware(boolean)>(1);

     label01:
        $r21 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        $z4 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean compressedFileExists(java.lang.String)>($r21);

        if $z4 == 0 goto label03;

        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setStub(boolean)>(1);

        goto label03;

     label02:
        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage clearProtectedBroadcasts()>();

        $r3 = interfaceinvoke $r2.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setCoreApp(boolean)>(0);

        $r4 = interfaceinvoke $r3.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPersistent(boolean)>(0);

        $r5 = interfaceinvoke $r4.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setDefaultToDeviceProtectedStorage(boolean)>(0);

        $r6 = interfaceinvoke $r5.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setDirectBootAware(boolean)>(0);

        interfaceinvoke $r6.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage capPermissionPriorities()>();

     label03:
        $i10 = i1 & 131072;

        if $i10 != 0 goto label04;

        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage markNotActivitiesAsNotExportedIfSingleUser()>();

     label04:
        $i3 = 131072 & i1;

        if $i3 == 0 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        r24 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrivileged(boolean)>(z5);

        $i4 = 262144 & i1;

        if $i4 == 0 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        r25 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setOem(boolean)>(z6);

        $i5 = 524288 & i1;

        if $i5 == 0 goto label09;

        z7 = 1;

        goto label10;

     label09:
        z7 = 0;

     label10:
        r26 = interfaceinvoke r25.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setVendor(boolean)>(z7);

        $i6 = 1048576 & i1;

        if $i6 == 0 goto label11;

        z8 = 1;

        goto label12;

     label11:
        z8 = 0;

     label12:
        r27 = interfaceinvoke r26.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setProduct(boolean)>(z8);

        $i7 = 2097152 & i1;

        if $i7 == 0 goto label13;

        z9 = 1;

        goto label14;

     label13:
        z9 = 0;

     label14:
        r28 = interfaceinvoke r27.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSystemExt(boolean)>(z9);

        $i8 = 4194304 & i1;

        if $i8 == 0 goto label15;

        z10 = 1;

        goto label16;

     label15:
        z10 = 0;

     label16:
        interfaceinvoke r28.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setOdm(boolean)>(z10);

        $r9 = "android";

        $r10 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 != 0 goto label18;

        if r1 == null goto label17;

        $r15 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r16 = $r15.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r17 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r18 = $r17.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i9 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r16, $r18);

        if $i9 != 0 goto label17;

        goto label18;

     label17:
        z11 = 0;

        goto label19;

     label18:
        z11 = 1;

     label19:
        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSignedWithPlatformKey(boolean)>(z11);

        $z12 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isSystem()>();

        if $z12 != 0 goto label20;

        $r12 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage clearOriginalPackages()>();

        $r13 = interfaceinvoke $r12.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setRealPackage(java.lang.String)>(null);

        interfaceinvoke $r13.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage clearAdoptPermissions()>();

     label20:
        staticinvoke <com.android.server.pm.parsing.library.PackageBackwardCompatibility: void modifySharedLibraries(com.android.server.pm.parsing.pkg.ParsedPackage,boolean)>(r0, z0);

        return;
    }

    private java.util.List applyPostContentProviderResolutionFilter(java.util.List, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        java.lang.String r2, $r11, $r13, $r17, $r26, $r27, $r30, $r34;
        int i0, i1, $i2, $i3, $i4, $i7, i8;
        android.content.pm.ResolveInfo r3, $r19, $r20;
        com.android.server.pm.SettingBase r4;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5;
        android.content.pm.ProviderInfo $r6, $r9, $r10, $r12, $r14, $r16, $r22, $r23, $r25, $r33;
        android.content.pm.ApplicationInfo $r7, $r15, $r24;
        java.lang.String[] $r18;
        android.content.pm.AuxiliaryResolveInfo $r21;
        long $l5;
        android.content.IntentFilter $r28;
        android.content.pm.ComponentInfo $r29;
        com.android.server.pm.Settings $r32;
        com.android.server.pm.AppsFilter $r35;
        com.android.server.pm.PackageSetting r36;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i8 = $i2 - 1;

     label1:
        if i8 < 0 goto label7;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        r3 = (android.content.pm.ResolveInfo) $r5;

        if r2 != null goto label2;

        $r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i7 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        r4 = virtualinvoke $r32.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>($i7);

        $r33 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r34 = $r33.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        r36 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r34, 0);

        $r35 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $z4 = virtualinvoke $r35.<com.android.server.pm.AppsFilter: boolean shouldFilterApplication(int,com.android.server.pm.SettingBase,com.android.server.pm.PackageSetting,int)>(i1, r4, r36, i0);

        if $z4 != 0 goto label2;

        goto label6;

     label2:
        $r6 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r7 = $r6.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        z0 = virtualinvoke $r7.<android.content.pm.ApplicationInfo: boolean isInstantApp()>();

        if z0 == 0 goto label4;

        $r10 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r11 = $r10.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label4;

        $r12 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r13 = $r12.<android.content.pm.ProviderInfo: java.lang.String splitName>;

        if $r13 == null goto label6;

        $r14 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r15 = $r14.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r18 = $r15.<android.content.pm.ApplicationInfo: java.lang.String[] splitNames>;

        $r16 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r17 = $r16.<android.content.pm.ProviderInfo: java.lang.String splitName>;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r18, $r17);

        if $z2 != 0 goto label6;

        $z3 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z3 == 0 goto label3;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Adding ephemeral installer to the ResolveInfo list");

     label3:
        $r19 = new android.content.pm.ResolveInfo;

        $r20 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        specialinvoke $r19.<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>($r20);

        $r21 = new android.content.pm.AuxiliaryResolveInfo;

        $r22 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r27 = $r22.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r23 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r24 = $r23.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $l5 = $r24.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r25 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $r26 = $r25.<android.content.pm.ProviderInfo: java.lang.String splitName>;

        specialinvoke $r21.<android.content.pm.AuxiliaryResolveInfo: void <init>(android.content.ComponentName,java.lang.String,long,java.lang.String)>(null, $r27, $l5, $r26);

        $r19.<android.content.pm.ResolveInfo: android.content.pm.AuxiliaryResolveInfo auxiliaryInfo> = $r21;

        $r28 = new android.content.IntentFilter;

        specialinvoke $r28.<android.content.IntentFilter: void <init>()>();

        $r19.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = $r28;

        $r29 = virtualinvoke r3.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r30 = $r29.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        $r19.<android.content.pm.ResolveInfo: java.lang.String resolvePackageName> = $r30;

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i8, $r19);

        goto label6;

     label4:
        if z0 != 0 goto label5;

        $r9 = r3.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        $i3 = $r9.<android.content.pm.ProviderInfo: int flags>;

        $i4 = $i3 & 1048576;

        if $i4 == 0 goto label5;

        goto label6;

     label5:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i8);

     label6:
        i8 = i8 + -1;

        goto label1;

     label7:
        return r1;
    }

    private java.util.List applyPostResolutionFilter(java.util.List, java.lang.String, boolean, int, boolean, int, android.content.Intent)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        java.lang.String r2, $r6, $r10, $r14, $r18, $r22, $r29, $r35, $r36, $r39, $r42;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z12;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, i9, $i10, $i11;
        android.content.Intent r3;
        java.lang.Object $r4;
        android.content.pm.ActivityInfo $r5, $r8, $r13, $r16, $r17, $r19, $r21, $r24, $r28, $r31, $r32, $r34, $r41, $r50;
        android.content.pm.ApplicationInfo $r9, $r20, $r33;
        android.content.ComponentName $r11, $r30;
        com.android.server.pm.Settings $r12;
        com.android.server.pm.AppsFilter $r15;
        java.lang.String[] $r23;
        android.content.pm.ResolveInfo $r25, $r26, r46;
        android.content.pm.AuxiliaryResolveInfo $r27;
        long $l5;
        android.content.IntentFilter $r37;
        android.content.pm.ComponentInfo $r38;
        com.android.server.pm.SettingBase r48;
        com.android.server.pm.PackageSetting r49;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        i1 := @parameter5: int;

        r3 := @parameter6: android.content.Intent;

        z10 = virtualinvoke r3.<android.content.Intent: boolean isWebIntent()>();

        if z10 == 0 goto label01;

        $z9 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean areWebInstantAppsDisabled(int)>(i1);

        if $z9 == 0 goto label01;

        z12 = 1;

        goto label02;

     label01:
        z12 = 0;

     label02:
        $i8 = interfaceinvoke r1.<java.util.List: int size()>();

        i9 = $i8 - 1;

     label03:
        if i9 < 0 goto label16;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i9);

        r46 = (android.content.pm.ResolveInfo) $r4;

        $z2 = r46.<android.content.pm.ResolveInfo: boolean isInstantAppAvailable>;

        if $z2 == 0 goto label04;

        if z12 == 0 goto label04;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i9);

        goto label15;

     label04:
        if z0 == 0 goto label08;

        $r16 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r16 == null goto label08;

        $r17 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r18 = $r17.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        if $r18 == null goto label08;

        $r19 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r20 = $r19.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r23 = $r20.<android.content.pm.ApplicationInfo: java.lang.String[] splitNames>;

        $r21 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r22 = $r21.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        $z7 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r23, $r22);

        if $z7 != 0 goto label07;

        $r24 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        if $r24 != null goto label05;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i9);

        goto label15;

     label05:
        if z12 == 0 goto label06;

        $r41 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r42 = $r41.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z8 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>($r42, i1);

        if $z8 == 0 goto label06;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i9);

        goto label15;

     label06:
        $r25 = new android.content.pm.ResolveInfo;

        $r26 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        specialinvoke $r25.<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>($r26);

        $r27 = new android.content.pm.AuxiliaryResolveInfo;

        $r28 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r29 = $r28.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r30 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName findInstallFailureActivity(java.lang.String,int,int)>($r29, i0, i1);

        $r31 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r36 = $r31.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r32 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r33 = $r32.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $l5 = $r33.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r34 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r35 = $r34.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        specialinvoke $r27.<android.content.pm.AuxiliaryResolveInfo: void <init>(android.content.ComponentName,java.lang.String,long,java.lang.String)>($r30, $r36, $l5, $r35);

        $r25.<android.content.pm.ResolveInfo: android.content.pm.AuxiliaryResolveInfo auxiliaryInfo> = $r27;

        $r37 = new android.content.IntentFilter;

        specialinvoke $r37.<android.content.IntentFilter: void <init>()>();

        $r25.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = $r37;

        $r38 = virtualinvoke r46.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r39 = $r38.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        $r25.<android.content.pm.ResolveInfo: java.lang.String resolvePackageName> = $r39;

        $i6 = virtualinvoke r46.<android.content.pm.ResolveInfo: int resolveLabelResId()>();

        $r25.<android.content.pm.ResolveInfo: int labelRes> = $i6;

        $i7 = virtualinvoke r46.<android.content.pm.ResolveInfo: int resolveIconResId()>();

        $r25.<android.content.pm.ResolveInfo: int icon> = $i7;

        $r25.<android.content.pm.ResolveInfo: boolean isInstantAppAvailable> = 1;

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i9, $r25);

        goto label15;

     label07:
        goto label08;

     label08:
        if r2 != null goto label10;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        r48 = virtualinvoke $r12.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>($i4);

        $r13 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r14 = $r13.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        r49 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r14, 0);

        if z1 != 0 goto label15;

        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $z6 = virtualinvoke $r15.<com.android.server.pm.AppsFilter: boolean shouldFilterApplication(int,com.android.server.pm.SettingBase,com.android.server.pm.PackageSetting,int)>(i0, r48, r49, i1);

        if $z6 != 0 goto label09;

        goto label15;

     label09:
        goto label14;

     label10:
        $r5 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label11;

        goto label15;

     label11:
        if z1 == 0 goto label13;

        $z5 = virtualinvoke r3.<android.content.Intent: boolean isWebIntent()>();

        if $z5 != 0 goto label12;

        $i2 = virtualinvoke r3.<android.content.Intent: int getFlags()>();

        $i3 = $i2 & 2048;

        if $i3 == 0 goto label13;

     label12:
        $r10 = virtualinvoke r3.<android.content.Intent: java.lang.String getPackage()>();

        if $r10 != null goto label13;

        $r11 = virtualinvoke r3.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r11 != null goto label13;

        goto label15;

     label13:
        $r50 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $i10 = $r50.<android.content.pm.ActivityInfo: int flags>;

        $i11 = $i10 & 1048576;

        if $i11 == 0 goto label14;

        $r8 = r46.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = $r8.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z4 = virtualinvoke $r9.<android.content.pm.ApplicationInfo: boolean isInstantApp()>();

        if $z4 != 0 goto label14;

        goto label15;

     label14:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i9);

     label15:
        i9 = i9 + -1;

        goto label03;

     label16:
        return r1;
    }

    private java.util.List applyPostServiceResolutionFilter(java.util.List, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        java.lang.String r2, $r11, $r13, $r17, $r26, $r27, $r30, $r34;
        int i0, i1, $i2, $i3, $i4, $i7, i8;
        android.content.pm.ResolveInfo r3, $r19, $r20;
        com.android.server.pm.PackageSetting r4;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5;
        android.content.pm.ServiceInfo $r6, $r9, $r10, $r12, $r14, $r16, $r22, $r23, $r25, $r33;
        android.content.pm.ApplicationInfo $r7, $r15, $r24;
        java.lang.String[] $r18;
        android.content.pm.AuxiliaryResolveInfo $r21;
        long $l5;
        android.content.IntentFilter $r28;
        android.content.pm.ComponentInfo $r29;
        com.android.server.pm.Settings $r32;
        com.android.server.pm.AppsFilter $r35;
        com.android.server.pm.SettingBase r36;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i8 = $i2 - 1;

     label1:
        if i8 < 0 goto label7;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i8);

        r3 = (android.content.pm.ResolveInfo) $r5;

        if r2 != null goto label2;

        $r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $i7 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        r36 = virtualinvoke $r32.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>($i7);

        $r33 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r34 = $r33.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r34, 0);

        $r35 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $z4 = virtualinvoke $r35.<com.android.server.pm.AppsFilter: boolean shouldFilterApplication(int,com.android.server.pm.SettingBase,com.android.server.pm.PackageSetting,int)>(i1, r36, r4, i0);

        if $z4 != 0 goto label2;

        goto label6;

     label2:
        $r6 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r7 = $r6.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        z0 = virtualinvoke $r7.<android.content.pm.ApplicationInfo: boolean isInstantApp()>();

        if z0 == 0 goto label4;

        $r10 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r11 = $r10.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label4;

        $r12 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r13 = $r12.<android.content.pm.ServiceInfo: java.lang.String splitName>;

        if $r13 == null goto label6;

        $r14 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r15 = $r14.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r18 = $r15.<android.content.pm.ApplicationInfo: java.lang.String[] splitNames>;

        $r16 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r17 = $r16.<android.content.pm.ServiceInfo: java.lang.String splitName>;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r18, $r17);

        if $z2 != 0 goto label6;

        $z3 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z3 == 0 goto label3;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Adding ephemeral installer to the ResolveInfo list");

     label3:
        $r19 = new android.content.pm.ResolveInfo;

        $r20 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        specialinvoke $r19.<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>($r20);

        $r21 = new android.content.pm.AuxiliaryResolveInfo;

        $r22 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r27 = $r22.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r23 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r24 = $r23.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $l5 = $r24.<android.content.pm.ApplicationInfo: long longVersionCode>;

        $r25 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r26 = $r25.<android.content.pm.ServiceInfo: java.lang.String splitName>;

        specialinvoke $r21.<android.content.pm.AuxiliaryResolveInfo: void <init>(android.content.ComponentName,java.lang.String,long,java.lang.String)>(null, $r27, $l5, $r26);

        $r19.<android.content.pm.ResolveInfo: android.content.pm.AuxiliaryResolveInfo auxiliaryInfo> = $r21;

        $r28 = new android.content.IntentFilter;

        specialinvoke $r28.<android.content.IntentFilter: void <init>()>();

        $r19.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = $r28;

        $r29 = virtualinvoke r3.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r30 = $r29.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        $r19.<android.content.pm.ResolveInfo: java.lang.String resolvePackageName> = $r30;

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i8, $r19);

        goto label6;

     label4:
        if z0 != 0 goto label5;

        $r9 = r3.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $i3 = $r9.<android.content.pm.ServiceInfo: int flags>;

        $i4 = $i3 & 1048576;

        if $i4 == 0 goto label5;

        goto label6;

     label5:
        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i8);

     label6:
        i8 = i8 + -1;

        goto label1;

     label7:
        return r1;
    }

    private boolean areWebInstantAppsDisabled(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.util.SparseBooleanArray $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mWebInstantAppsDisabled>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        return $z0;
    }

    static java.lang.String arrayToString(int[])
    {
        int[] r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        int $i0, $i1, i2;

        r0 := @parameter0: int[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        if r0 == null goto label3;

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label3;

        if i2 <= 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $i1 = r0[i2];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static void assertCodePolicy(com.android.server.pm.parsing.pkg.AndroidPackage) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        boolean $z0, $z1, $z2, $z3, z4;
        java.lang.String[] $r1, $r2, $r4, $r8;
        int $i0, $i1, $i2, i3;
        int[] $r3;
        java.lang.String $r5, $r9, $r13, $r14, $r17, $r21;
        java.lang.StringBuilder $r6, $r15;
        com.android.server.pm.PackageManagerException $r12, $r20;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isHasCode()>();

        if $z0 == 0 goto label2;

        $r14 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean apkHasCode(java.lang.String)>($r14);

        if $z3 == 0 goto label1;

        goto label2;

     label1:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r17 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" code is missing");

        $r20 = new com.android.server.pm.PackageManagerException;

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r21);

        throw $r20;

     label2:
        $r1 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r1);

        if $z1 != 0 goto label8;

        i3 = 0;

     label3:
        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $i0 = lengthof $r2;

        if i3 >= $i0 goto label8;

        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int[] getSplitFlags()>();

        $i1 = $r3[i3];

        $i2 = $i1 & 4;

        if $i2 == 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        z4 = 0;

     label5:
        if z4 == 0 goto label7;

        $r4 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $r5 = $r4[i3];

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean apkHasCode(java.lang.String)>($r5);

        if $z2 == 0 goto label6;

        goto label7;

     label6:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r8 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $r9 = $r8[i3];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" code is missing");

        $r12 = new com.android.server.pm.PackageManagerException;

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, $r13);

        throw $r12;

     label7:
        i3 = i3 + 1;

        goto label3;

     label8:
        return;
    }

    private static java.lang.Object assertNotNull(java.lang.Object, java.lang.String) throws com.android.server.pm.PackageManagerException
    {
        java.lang.Object r0;
        java.lang.String r1;
        com.android.server.pm.PackageManagerException $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        return r0;

     label1:
        $r2 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r2.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-110, r1);

        throw $r2;
    }

    private void assertPackageIsValid(com.android.server.pm.parsing.pkg.AndroidPackage, int, int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i26, $i27, $i28, $i29, i42, i45, $i48, $i49, i50;
        java.lang.Object r1, $r82, $r155, $r156;
        long l2, l3, l4, $l30, $l33, $l34, $l36, $l37, l43, l44, $l46;
        com.android.server.pm.PackageSetting r2, r212, r220, r224;
        java.lang.String $r3, $r6, $r8, $r12, $r15, $r20, $r22, $r24, $r34, $r37, $r40, $r51, $r54, $r56, $r61, $r63, $r68, $r72, $r74, $r77, $r79, $r92, $r95, $r98, $r99, $r101, $r104, $r107, $r114, $r116, $r118, $r121, $r122, $r123, $r125, $r128, $r131, $r134, $r135, $r136, $r138, $r140, $r143, $r152, $r154, $r159, $r161, $r163, $r166, $r169, $r171, r208, $r215, $r223;
        com.android.server.pm.PackageManagerException $r4, $r11, $r172, r178, r180, r182, r185, r186, r187, r188, r189, r190, r191, r192, r193, r194, r195, r196, r197, r198, r199, r201, r203, r206, r213, r216, r221, r225, r227;
        com.android.server.pm.ApexManager $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, z21, z22, z24, z26;
        java.lang.StringBuilder $r7, r177, r181, r200, r202, r204, r207, r214, r217, r218, r219, r222, r226, r228;
        com.android.server.pm.Settings $r13, $r23, $r41, $r78, $r80, $r115;
        com.android.server.pm.KeySetManagerService $r14;
        android.content.pm.PackageParser$SigningDetails $r16, $r26, $r27, $r29, $r31, $r43, $r44, $r46, $r48, $r84, $r85, $r87, $r89;
        com.android.server.pm.PackageSignatures $r25, $r28, $r42, $r45, $r83, $r86;
        android.content.pm.Signature[] $r30, $r32, $r47, $r49, $r88, $r90;
        com.android.internal.content.om.OverlayConfig $r69, $r71;
        android.util.ArrayMap $r81, $r113, $r153, $r158, $r160;
        java.util.List $r108, $r109, $r110, $r111, $r141, $r142, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r151;
        com.android.server.pm.ComponentResolver $r112;
        byte $b31, $b32, $b35, $b47;
        android.content.pm.VersionedPackage $r157;
        android.content.pm.ApplicationInfo $r167;
        java.lang.Throwable $r173, $r174, $r175, r179;
        com.android.server.pm.parsing.pkg.AndroidPackage r176;
        android.util.LongSparseArray r183;
        android.content.pm.SharedLibraryInfo r184;
        java.util.Map r205;
        com.android.server.pm.SharedUserSetting r209, r210;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r176 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i42 := @parameter1: int;

        i0 := @parameter2: int;

        $i5 = i42 & 64;

        if $i5 == 0 goto label001;

        staticinvoke <com.android.server.pm.PackageManagerService: void assertCodePolicy(com.android.server.pm.parsing.pkg.AndroidPackage)>(r176);

     label001:
        $r3 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        if $r3 == null goto label123;

        z21 = 1;

        $i6 = i0 & 16;

        if $i6 != 0 goto label002;

        z22 = 1;

        goto label003;

     label002:
        z22 = 0;

     label003:
        $i7 = i0 & 4096;

        if $i7 == 0 goto label004;

        goto label005;

     label004:
        z21 = 0;

     label005:
        if z22 != 0 goto label006;

        if z21 == 0 goto label007;

     label006:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        $r6 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r5.<com.android.server.pm.ApexManager: boolean isApexPackage(java.lang.String)>($r6);

        if $z0 != 0 goto label122;

     label007:
        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r13.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke $r14.<com.android.server.pm.KeySetManagerService: void assertScannedPackageValid(com.android.server.pm.parsing.pkg.AndroidPackage)>(r176);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label008:
        $r15 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        z24 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("android");

     label009:
        if z24 == 0 goto label014;

     label010:
        $r167 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        if $r167 != null goto label012;

     label011:
        goto label014;

     label012:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "*************************************************");

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Core android package being redefined.  Skipping.");

        r177 = new java.lang.StringBuilder;

        specialinvoke r177.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r177.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" codePath=");

        $r169 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        virtualinvoke r177.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169);

        $r171 = virtualinvoke r177.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r171);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "*************************************************");

        r178 = new com.android.server.pm.PackageManagerException;

        specialinvoke r178.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-5, "Core android package being redefined.  Skipping.");

        throw r178;

     label013:
        $r175 := @caughtexception;

        r179 = $r175;

        goto label119;

     label014:
        $i8 = i0 & 4;

        if $i8 != 0 goto label018;

     label015:
        $r160 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r161 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z20 = virtualinvoke $r160.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r161);

        if $z20 != 0 goto label017;

     label016:
        goto label018;

     label017:
        r180 = new com.android.server.pm.PackageManagerException;

        r181 = new java.lang.StringBuilder;

        specialinvoke r181.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r163 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r163);

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already installed.  Skipping duplicate.");

        $r166 = virtualinvoke r181.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r180.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-5, $r166);

        throw r180;

     label018:
        z26 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStaticSharedLibrary()>();

     label019:
        if z26 == 0 goto label071;

        $i27 = i0 & 4;

        if $i27 != 0 goto label023;

     label020:
        $r158 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r159 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

        $z19 = virtualinvoke $r158.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r159);

        if $z19 != 0 goto label022;

     label021:
        goto label023;

     label022:
        r182 = new com.android.server.pm.PackageManagerException;

        specialinvoke r182.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Duplicate static shared lib provider package");

        throw r182;

     label023:
        $i28 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i28 < 26 goto label070;

     label024:
        $i29 = i0 & 8192;

        if $i29 != 0 goto label069;

     label025:
        $r141 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getOriginalPackages()>();

        $z9 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r141);

        if $z9 == 0 goto label068;

     label026:
        $r142 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        $z10 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r142);

        if $z10 == 0 goto label067;

     label027:
        $r143 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        if $r143 != null goto label066;

     label028:
        $r144 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        $z11 = interfaceinvoke $r144.<java.util.List: boolean isEmpty()>();

        if $z11 == 0 goto label065;

     label029:
        $r145 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getServices()>();

        $z12 = interfaceinvoke $r145.<java.util.List: boolean isEmpty()>();

        if $z12 == 0 goto label064;

     label030:
        $r146 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProviders()>();

        $z13 = interfaceinvoke $r146.<java.util.List: boolean isEmpty()>();

        if $z13 == 0 goto label063;

     label031:
        $r147 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getReceivers()>();

        $z14 = interfaceinvoke $r147.<java.util.List: boolean isEmpty()>();

        if $z14 == 0 goto label062;

     label032:
        $r148 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissionGroups()>();

        $z15 = interfaceinvoke $r148.<java.util.List: boolean isEmpty()>();

        if $z15 == 0 goto label061;

     label033:
        $r149 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getAttributions()>();

        $z16 = interfaceinvoke $r149.<java.util.List: boolean isEmpty()>();

        if $z16 == 0 goto label060;

     label034:
        $r150 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getPermissions()>();

        $z17 = interfaceinvoke $r150.<java.util.List: boolean isEmpty()>();

        if $z17 == 0 goto label059;

     label035:
        $r151 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProtectedBroadcasts()>();

        $z18 = interfaceinvoke $r151.<java.util.List: boolean isEmpty()>();

        if $z18 == 0 goto label058;

     label036:
        $r152 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getOverlayTarget()>();

        if $r152 != null goto label057;

     label037:
        l43 = -9223372036854775808L;

        l44 = 9223372036854775807L;

     label038:
        $r153 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r154 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $r155 = virtualinvoke $r153.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r154);

        r183 = (android.util.LongSparseArray) $r155;

     label039:
        if r183 == null goto label054;

     label040:
        i1 = virtualinvoke r183.<android.util.LongSparseArray: int size()>();

     label041:
        i45 = 0;

     label042:
        if i45 >= i1 goto label053;

     label043:
        $r156 = virtualinvoke r183.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i45);

        r184 = (android.content.pm.SharedLibraryInfo) $r156;

     label044:
        $r157 = virtualinvoke r184.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        l2 = virtualinvoke $r157.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

     label045:
        l3 = virtualinvoke r184.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

     label046:
        l4 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

     label047:
        $b32 = l3 cmp l4;

        if $b32 >= 0 goto label050;

     label048:
        $l37 = l2 + 1L;

        l43 = staticinvoke <java.lang.Math: long max(long,long)>(l43, $l37);

     label049:
        goto label051;

     label050:
        $l33 = virtualinvoke r184.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $l34 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

        $b35 = $l33 cmp $l34;

        if $b35 <= 0 goto label052;

        $l36 = l2 - 1L;

        l44 = staticinvoke <java.lang.Math: long min(long,long)>(l44, $l36);

     label051:
        i45 = i45 + 1;

        goto label042;

     label052:
        l44 = l2;

        l43 = l2;

        goto label054;

     label053:
        goto label054;

     label054:
        $l46 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        $b47 = $l46 cmp l43;

        if $b47 < 0 goto label056;

        $l30 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        $b31 = $l30 cmp l44;

        if $b31 > 0 goto label056;

     label055:
        goto label071;

     label056:
        r185 = new com.android.server.pm.PackageManagerException;

        specialinvoke r185.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared lib version codes must be ordered as lib versions");

        throw r185;

     label057:
        r186 = new com.android.server.pm.PackageManagerException;

        specialinvoke r186.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot be overlay targets");

        throw r186;

     label058:
        r187 = new com.android.server.pm.PackageManagerException;

        specialinvoke r187.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare protected broadcasts");

        throw r187;

     label059:
        r188 = new com.android.server.pm.PackageManagerException;

        specialinvoke r188.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare permissions");

        throw r188;

     label060:
        r189 = new com.android.server.pm.PackageManagerException;

        specialinvoke r189.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare features");

        throw r189;

     label061:
        r190 = new com.android.server.pm.PackageManagerException;

        specialinvoke r190.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare permission groups");

        throw r190;

     label062:
        r191 = new com.android.server.pm.PackageManagerException;

        specialinvoke r191.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare broadcast receivers");

        throw r191;

     label063:
        r192 = new com.android.server.pm.PackageManagerException;

        specialinvoke r192.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare content providers");

        throw r192;

     label064:
        r193 = new com.android.server.pm.PackageManagerException;

        specialinvoke r193.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare services");

        throw r193;

     label065:
        r194 = new com.android.server.pm.PackageManagerException;

        specialinvoke r194.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Static shared libs cannot declare activities");

        throw r194;

     label066:
        r195 = new com.android.server.pm.PackageManagerException;

        specialinvoke r195.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Packages declaring static-shared libs cannot declare shared users");

        throw r195;

     label067:
        r196 = new com.android.server.pm.PackageManagerException;

        specialinvoke r196.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Packages declaring static-shared libs cannot declare dynamic libs");

        throw r196;

     label068:
        r197 = new com.android.server.pm.PackageManagerException;

        specialinvoke r197.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Packages declaring static-shared libs cannot be renamed");

        throw r197;

     label069:
        r198 = new com.android.server.pm.PackageManagerException;

        specialinvoke r198.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Packages declaring static-shared libs cannot be instant apps");

        throw r198;

     label070:
        r199 = new com.android.server.pm.PackageManagerException;

        specialinvoke r199.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>("Packages declaring static-shared libs must target O SDK or higher");

        throw r199;

     label071:
        $i9 = i0 & 128;

        if $i9 == 0 goto label080;

     label072:
        $r113 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mExpectingBetter>;

        $r114 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z6 = virtualinvoke $r113.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r114);

        if $z6 == 0 goto label074;

        r200 = new java.lang.StringBuilder;

        specialinvoke r200.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relax SCAN_REQUIRE_KNOWN requirement for package ");

        $r138 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r138);

        $r140 = virtualinvoke r200.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r140);

     label073:
        goto label080;

     label074:
        $r115 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r116 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r2 = virtualinvoke $r115.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r116);

     label075:
        if r2 == null goto label079;

     label076:
        $r122 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r123 = r2.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $z7 = virtualinvoke $r122.<java.lang.String: boolean equals(java.lang.Object)>($r123);

        if $z7 == 0 goto label078;

        $r135 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r136 = r2.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $z8 = virtualinvoke $r135.<java.lang.String: boolean equals(java.lang.Object)>($r136);

        if $z8 == 0 goto label078;

     label077:
        goto label080;

     label078:
        r201 = new com.android.server.pm.PackageManagerException;

        r202 = new java.lang.StringBuilder;

        specialinvoke r202.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r125 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125);

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found at ");

        $r128 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r128);

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but expected at ");

        $r131 = r2.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r131);

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring.");

        $r134 = virtualinvoke r202.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r201.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-23, $r134);

        throw r201;

     label079:
        r203 = new com.android.server.pm.PackageManagerException;

        r204 = new java.lang.StringBuilder;

        specialinvoke r204.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r118 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r118);

        virtualinvoke r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found; ignoring.");

        $r121 = virtualinvoke r204.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r203.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-19, $r121);

        throw r203;

     label080:
        $i48 = i0 & 4;

        if $i48 == 0 goto label082;

     label081:
        $r112 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r112.<com.android.server.pm.ComponentResolver: void assertProvidersNotDefined(com.android.server.pm.parsing.pkg.AndroidPackage)>(r176);

     label082:
        r205 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getProcesses()>();

        $z1 = interfaceinvoke r205.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label085;

        $r99 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getProcessName()>();

        $z5 = interfaceinvoke r205.<java.util.Map: boolean containsKey(java.lang.Object)>($r99);

        if $z5 == 0 goto label084;

        $r108 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageProcesses(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.List,java.util.Map,java.lang.String)>(r176, $r108, r205, "activity");

        $r109 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getServices()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageProcesses(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.List,java.util.Map,java.lang.String)>(r176, $r109, r205, "service");

        $r110 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getReceivers()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageProcesses(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.List,java.util.Map,java.lang.String)>(r176, $r110, r205, "receiver");

        $r111 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProviders()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageProcesses(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.List,java.util.Map,java.lang.String)>(r176, $r111, r205, "provider");

     label083:
        goto label085;

     label084:
        r206 = new com.android.server.pm.PackageManagerException;

        r207 = new java.lang.StringBuilder;

        specialinvoke r207.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t install because application tag\'s process attribute ");

        $r101 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getProcessName()>();

        virtualinvoke r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r101);

        virtualinvoke r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in package ");

        $r104 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r104);

        virtualinvoke r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not included in the <processes> list");

        $r107 = virtualinvoke r207.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r206.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-122, $r107);

        throw r206;

     label085:
        $z2 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

        if $z2 != 0 goto label094;

        r208 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

     label086:
        if r208 == null goto label094;

        r209 = null;

     label087:
        $r78 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r79 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        r210 = virtualinvoke $r78.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>($r79, 0, 0, 0);

     label088:
        r209 = r210;

        goto label090;

     label089:
        $r172 := @caughtexception;

     label090:
        if r209 == null goto label094;

     label091:
        $z4 = virtualinvoke r209.<com.android.server.pm.SharedUserSetting: boolean isPrivileged()>();

        if $z4 == 0 goto label094;

        $r80 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r81 = $r80.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r82 = virtualinvoke $r81.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>("android");

        r212 = (com.android.server.pm.PackageSetting) $r82;

        $r83 = r212.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r85 = $r83.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r84 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r85 == $r84 goto label094;

        $r86 = r212.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r87 = $r86.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r88 = $r87.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r89 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r90 = $r89.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i26 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r88, $r90);

        if $i26 != 0 goto label093;

     label092:
        goto label094;

     label093:
        r213 = new com.android.server.pm.PackageManagerException;

        r214 = new java.lang.StringBuilder;

        specialinvoke r214.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Apps that share a user with a privileged app must themselves be marked as privileged. ");

        $r92 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92);

        virtualinvoke r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shares privileged user ");

        $r95 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        virtualinvoke r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r95);

        virtualinvoke r214.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r98 = virtualinvoke r214.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r213.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r98);

        throw r213;

     label094:
        $r215 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getOverlayTarget()>();

        if $r215 == null goto label112;

     label095:
        $i12 = 65536 & i0;

        if $i12 == 0 goto label104;

        $i16 = i42 & 16;

        if $i16 != 0 goto label099;

     label096:
        $r69 = r0.<com.android.server.pm.PackageManagerService: com.android.internal.content.om.OverlayConfig mOverlayConfig>;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>($r69, "Parsing non-system dir before overlay configs are initialized");

        $r71 = r0.<com.android.server.pm.PackageManagerService: com.android.internal.content.om.OverlayConfig mOverlayConfig>;

        $r72 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r71.<com.android.internal.content.om.OverlayConfig: boolean isMutable(java.lang.String)>($r72);

        if $z3 == 0 goto label098;

     label097:
        goto label112;

     label098:
        r216 = new com.android.server.pm.PackageManagerException;

        r217 = new java.lang.StringBuilder;

        specialinvoke r217.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overlay ");

        $r74 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        virtualinvoke r217.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is static and cannot be upgraded.");

        $r77 = virtualinvoke r217.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r216.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r77);

        throw r216;

     label099:
        $i17 = 524288 & i0;

        if $i17 == 0 goto label102;

     label100:
        $i22 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        $i23 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getVendorPartitionVersion()>();

        if $i22 >= $i23 goto label112;

        r218 = new java.lang.StringBuilder;

        specialinvoke r218.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System overlay ");

        $r63 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        virtualinvoke r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" targets an SDK below the required SDK level of vendor overlays (");

        $i24 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getVendorPartitionVersion()>();

        virtualinvoke r218.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        virtualinvoke r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). This will become an install error in a future release");

        $r68 = virtualinvoke r218.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r68);

     label101:
        goto label112;

     label102:
        $i18 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        $i19 = <android.os.Build$VERSION: int SDK_INT>;

        if $i18 >= $i19 goto label112;

        r219 = new java.lang.StringBuilder;

        specialinvoke r219.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System overlay ");

        $r56 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        virtualinvoke r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" targets an SDK below the required SDK level of system overlays (");

        $i20 = <android.os.Build$VERSION: int SDK_INT>;

        virtualinvoke r219.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        virtualinvoke r219.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("). This will become an install error in a future release");

        $r61 = virtualinvoke r219.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r61);

     label103:
        goto label112;

     label104:
        $i13 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i13 >= 29 goto label107;

        $r41 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r220 = virtualinvoke $r41.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>("android");

        $r42 = r220.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r44 = $r42.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r43 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r44 == $r43 goto label107;

        $r45 = r220.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r46 = $r45.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r47 = $r46.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r48 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r49 = $r48.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i15 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r47, $r49);

        if $i15 != 0 goto label106;

     label105:
        goto label107;

     label106:
        r221 = new com.android.server.pm.PackageManagerException;

        r222 = new java.lang.StringBuilder;

        specialinvoke r222.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overlay ");

        $r51 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        virtualinvoke r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must target Q or later, or be signed with the platform certificate");

        $r54 = virtualinvoke r222.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r221.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r54);

        throw r221;

     label107:
        $r223 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getOverlayTargetName()>();

        if $r223 != null goto label112;

        $r23 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getOverlayTarget()>();

        r224 = virtualinvoke $r23.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r24);

     label108:
        if r224 == null goto label112;

     label109:
        $r25 = r224.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r27 = $r25.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r26 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r27 == $r26 goto label112;

        $r28 = r224.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r29 = $r28.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r30 = $r29.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r31 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r32 = $r31.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i14 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r30, $r32);

        if $i14 != 0 goto label111;

     label110:
        goto label112;

     label111:
        r225 = new com.android.server.pm.PackageManagerException;

        r226 = new java.lang.StringBuilder;

        specialinvoke r226.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Overlay ");

        $r34 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and target ");

        $r37 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getOverlayTarget()>();

        virtualinvoke r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signed with different certificates, and the overlay lacks <overlay android:targetName>");

        $r40 = virtualinvoke r226.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r225.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r40);

        throw r225;

     label112:
        $i49 = i42 & 16;

        if $i49 != 0 goto label116;

     label113:
        $i10 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        i50 = staticinvoke <android.util.apk.ApkSignatureVerifier: int getMinimumSignatureSchemeVersionForTargetSdk(int)>($i10);

        $r16 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $i11 = $r16.<android.content.pm.PackageParser$SigningDetails: int signatureSchemeVersion>;

        if $i11 < i50 goto label115;

     label114:
        goto label116;

     label115:
        r227 = new com.android.server.pm.PackageManagerException;

        r228 = new java.lang.StringBuilder;

        specialinvoke r228.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No signature found in package of version ");

        virtualinvoke r228.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i50);

        virtualinvoke r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or newer for package ");

        $r20 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke r228.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r227.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-103, $r22);

        throw r227;

     label116:
        exitmonitor r1;

     label117:
        return;

     label118:
        $r174 := @caughtexception;

        r179 = $r174;

     label119:
        exitmonitor r1;

     label120:
        throw r179;

     label121:
        $r173 := @caughtexception;

        r179 = $r173;

        goto label119;

     label122:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = interfaceinvoke r176.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is an APEX package and can\'t be installed as an APK.");

        $r11 = new com.android.server.pm.PackageManagerException;

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-5, $r12);

        throw $r11;

     label123:
        $r4 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r4.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Code and resource paths haven\'t been set correctly");

        throw $r4;

        catch java.lang.Throwable from label008 to label009 with label118;
        catch java.lang.Throwable from label010 to label011 with label013;
        catch java.lang.Throwable from label012 to label013 with label013;
        catch java.lang.Throwable from label015 to label016 with label013;
        catch java.lang.Throwable from label017 to label018 with label013;
        catch java.lang.Throwable from label018 to label019 with label118;
        catch java.lang.Throwable from label020 to label021 with label013;
        catch java.lang.Throwable from label022 to label023 with label013;
        catch java.lang.Throwable from label023 to label024 with label118;
        catch java.lang.Throwable from label025 to label026 with label118;
        catch java.lang.Throwable from label026 to label027 with label118;
        catch java.lang.Throwable from label027 to label028 with label118;
        catch java.lang.Throwable from label028 to label029 with label118;
        catch java.lang.Throwable from label029 to label030 with label118;
        catch java.lang.Throwable from label030 to label031 with label118;
        catch java.lang.Throwable from label031 to label032 with label118;
        catch java.lang.Throwable from label032 to label033 with label118;
        catch java.lang.Throwable from label033 to label034 with label118;
        catch java.lang.Throwable from label034 to label035 with label118;
        catch java.lang.Throwable from label035 to label036 with label118;
        catch java.lang.Throwable from label036 to label037 with label118;
        catch java.lang.Throwable from label038 to label039 with label118;
        catch java.lang.Throwable from label040 to label041 with label118;
        catch java.lang.Throwable from label043 to label044 with label118;
        catch java.lang.Throwable from label044 to label045 with label118;
        catch java.lang.Throwable from label045 to label046 with label118;
        catch java.lang.Throwable from label046 to label047 with label118;
        catch java.lang.Throwable from label048 to label049 with label121;
        catch java.lang.Throwable from label050 to label051 with label121;
        catch java.lang.Throwable from label054 to label055 with label121;
        catch java.lang.Throwable from label056 to label057 with label121;
        catch java.lang.Throwable from label057 to label058 with label121;
        catch java.lang.Throwable from label058 to label059 with label121;
        catch java.lang.Throwable from label059 to label060 with label121;
        catch java.lang.Throwable from label060 to label061 with label121;
        catch java.lang.Throwable from label061 to label062 with label121;
        catch java.lang.Throwable from label062 to label063 with label121;
        catch java.lang.Throwable from label063 to label064 with label121;
        catch java.lang.Throwable from label064 to label065 with label121;
        catch java.lang.Throwable from label065 to label066 with label121;
        catch java.lang.Throwable from label066 to label067 with label121;
        catch java.lang.Throwable from label067 to label068 with label121;
        catch java.lang.Throwable from label068 to label069 with label121;
        catch java.lang.Throwable from label069 to label070 with label121;
        catch java.lang.Throwable from label070 to label071 with label121;
        catch java.lang.Throwable from label072 to label073 with label121;
        catch java.lang.Throwable from label074 to label075 with label121;
        catch java.lang.Throwable from label076 to label077 with label121;
        catch java.lang.Throwable from label078 to label079 with label121;
        catch java.lang.Throwable from label079 to label080 with label121;
        catch java.lang.Throwable from label081 to label082 with label121;
        catch java.lang.Throwable from label082 to label083 with label121;
        catch java.lang.Throwable from label084 to label085 with label121;
        catch java.lang.Throwable from label085 to label086 with label121;
        catch com.android.server.pm.PackageManagerException from label087 to label088 with label089;
        catch java.lang.Throwable from label087 to label088 with label121;
        catch java.lang.Throwable from label091 to label092 with label121;
        catch java.lang.Throwable from label093 to label094 with label121;
        catch java.lang.Throwable from label094 to label095 with label121;
        catch java.lang.Throwable from label096 to label097 with label121;
        catch java.lang.Throwable from label098 to label099 with label121;
        catch java.lang.Throwable from label100 to label101 with label121;
        catch java.lang.Throwable from label102 to label103 with label121;
        catch java.lang.Throwable from label104 to label105 with label121;
        catch java.lang.Throwable from label106 to label107 with label121;
        catch java.lang.Throwable from label107 to label108 with label121;
        catch java.lang.Throwable from label109 to label110 with label121;
        catch java.lang.Throwable from label111 to label112 with label121;
        catch java.lang.Throwable from label113 to label114 with label121;
        catch java.lang.Throwable from label115 to label116 with label121;
        catch java.lang.Throwable from label116 to label117 with label121;
        catch java.lang.Throwable from label119 to label120 with label121;
    }

    private void assertPackageKnownAndInstalled(java.lang.String, java.lang.String, int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1, $r6;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.PackageManagerException r3, r29, r32;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.lang.String $r10, $r11, $r17, $r19, $r24, r26, r27, r28;
        boolean $z0, $z1;
        java.lang.Throwable $r25;
        java.lang.StringBuilder r30, r31, r33;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r26 := @parameter0: java.lang.String;

        r27 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r28 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String normalizePackageNameLPr(java.lang.String)>(r27);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r28);

        r2 = (com.android.server.pm.PackageSetting) $r6;

     label02:
        if r2 == null goto label07;

     label03:
        $r11 = r2.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r26, $r11);

        if $z0 == 0 goto label06;

        $z1 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z1 == 0 goto label05;

        exitmonitor r1;

     label04:
        return;

     label05:
        r29 = new com.android.server.pm.PackageManagerException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not installed for user ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r24 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r24);

        throw r29;

     label06:
        r3 = new com.android.server.pm.PackageManagerException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found on unknown volume ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected volume ");

        $r17 = r2.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r19);

        throw r3;

     label07:
        r32 = new com.android.server.pm.PackageManagerException;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unknown");

        $r10 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r32.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r10);

        throw r32;

     label08:
        $r25 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void assertPackageProcesses(com.android.server.pm.parsing.pkg.AndroidPackage, java.util.List, java.util.Map, java.lang.String) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.util.Map r2;
        java.lang.String r3, $r6, $r11, $r14, $r17, $r21;
        android.content.pm.parsing.component.ParsedMainComponent r4;
        int $i0, i1;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.StringBuilder $r7;
        com.android.server.pm.PackageManagerException $r20;
        java.util.List r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r22 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.lang.String;

        if r22 != null goto label1;

        return;

     label1:
        $i0 = interfaceinvoke r22.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r5 = interfaceinvoke r22.<java.util.List: java.lang.Object get(int)>(i1);

        r4 = (android.content.pm.parsing.component.ParsedMainComponent) $r5;

        $r6 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getProcessName()>();

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        i1 = i1 + -1;

        goto label2;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t install because ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getClassName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'s process attribute ");

        $r14 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedMainComponent: java.lang.String getProcessName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in package ");

        $r17 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not included in the <processes> list");

        $r20 = new com.android.server.pm.PackageManagerException;

        $r21 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-122, $r21);

        throw $r20;

     label4:
        return;
    }

    private int bestDomainVerificationStatus(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        float $f0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 3 goto label1;

        return i1;

     label1:
        if i1 != 3 goto label2;

        return i0;

     label2:
        $f0 = staticinvoke <android.util.MathUtils: float max(int,int)>(i0, i1);

        $i2 = (int) $f0;

        return $i2;
    }

    private void broadcastPackageVerified(int, android.net.Uri, int, java.lang.String, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        android.net.Uri r1;
        java.lang.String r2;
        android.os.UserHandle r3;
        android.content.Intent $r5;
        android.content.Context $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.Uri;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.UserHandle;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_VERIFIED");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>(r1, "application/vnd.android.package-archive");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(1);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_ID", i0);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.VERIFICATION_RESULT", i1);

        if r2 == null goto label1;

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.content.pm.extra.EXTRA_VERIFICATION_ROOT_HASH", r2);

     label1:
        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.DATA_LOADER_TYPE", i2);

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>($r5, r3, "android.permission.PACKAGE_VERIFICATION_AGENT");

        return;
    }

    private boolean canRequestPackageInstallsInternal(java.lang.String, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean $z1, $z2, $z3, $z4, z5, z6;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r1;
        java.lang.String[] $r2;
        com.android.server.pm.UserManagerService $r3, $r4;
        java.lang.StringBuilder $r5, $r11, $r16;
        java.lang.SecurityException $r9, $r21;
        java.lang.String $r10, $r15, $r22, r23;
        android.content.pm.ApplicationInfo r25;
        android.content.pm.PackageManagerInternal$ExternalSourcesPolicy r28;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r23 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z5 := @parameter3: boolean;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r23, 0, i1);

        if i2 == i3 goto label02;

        if i2 == 0 goto label02;

        if i2 != 1000 goto label01;

        goto label02;

     label01:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller uid ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own package ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r21 = new java.lang.SecurityException;

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.SecurityException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label02:
        r25 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r23, i0, i1);

        if r25 != null goto label03;

        return 0;

     label03:
        $i4 = r25.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i4 >= 26 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>(r23, i1);

        if $z1 == 0 goto label05;

        return 0;

     label05:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String[] getAppOpPermissionPackages(java.lang.String,int)>("android.permission.REQUEST_INSTALL_PACKAGES", i2);

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r2, r23);

        if $z2 != 0 goto label07;

        if z5 != 0 goto label06;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need to declare ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.REQUEST_INSTALL_PACKAGES");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to call this api");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r15);

        return 0;

     label06:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Need to declare ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.REQUEST_INSTALL_PACKAGES");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to call this api");

        $r9 = new java.lang.SecurityException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label07:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z3 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("no_install_unknown_sources", i1);

        if $z3 != 0 goto label11;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z4 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("no_install_unknown_sources_globally", i1);

        if $z4 == 0 goto label08;

        goto label11;

     label08:
        r28 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal$ExternalSourcesPolicy mExternalSourcesPolicy>;

        if r28 == null goto label10;

        z6 = 0;

        $i5 = interfaceinvoke r28.<android.content.pm.PackageManagerInternal$ExternalSourcesPolicy: int getPackageTrustedToInstallApps(java.lang.String,int)>(r23, i3);

        if $i5 != 0 goto label09;

        z6 = 1;

     label09:
        return z6;

     label10:
        return 0;

     label11:
        return 0;
    }

    private boolean canSkipForcedApkVerification(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        byte[] r1;
        java.lang.Object r2;
        boolean $z0, $z1;
        com.android.server.pm.Installer $r3;
        java.lang.Throwable $r4, $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isLegacyApkVerityEnabled()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.android.server.security.VerityUtils: boolean hasFsverity(java.lang.String)>(r6);

        return $z1;

     label1:
        r1 = staticinvoke <com.android.server.security.VerityUtils: byte[] generateApkVerityRootHash(java.lang.String)>(r6);

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r2;

     label4:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r3.<com.android.server.pm.Installer: void assertFsverityRootHashMatches(java.lang.String,byte[])>(r6, r1);

        exitmonitor r2;

     label5:
        return 1;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r4;

     label9:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Error in fsverity check. Fallback to full apk verification.", $r5);

        return 0;

        catch com.android.server.pm.Installer$InstallerException from label1 to label2 with label9;
        catch java.io.IOException from label1 to label2 with label9;
        catch java.security.DigestException from label1 to label2 with label9;
        catch java.security.NoSuchAlgorithmException from label1 to label2 with label9;
        catch com.android.server.pm.Installer$InstallerException from label3 to label4 with label9;
        catch java.io.IOException from label3 to label4 with label9;
        catch java.security.DigestException from label3 to label4 with label9;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label9;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch com.android.server.pm.Installer$InstallerException from label8 to label9 with label9;
        catch java.io.IOException from label8 to label9 with label9;
        catch java.security.DigestException from label8 to label9 with label9;
        catch java.security.NoSuchAlgorithmException from label8 to label9 with label9;
    }

    private boolean canSkipForcedPackageVerification(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0, i1;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r1 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canSkipForcedApkVerification(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r4 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r4);

        if $z1 != 0 goto label4;

        i1 = 0;

     label2:
        $i0 = lengthof r4;

        if i1 >= $i0 goto label4;

        $r2 = r4[i1];

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canSkipForcedApkVerification(java.lang.String)>($r2);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 1;
    }

    private boolean[] canSuspendPackageForUserInternal(java.lang.String[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i2, $i3, i15;
        boolean[] r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        long l1;
        java.lang.String r2, r3, r4, $r7, $r8, $r9, $r10, $r14, $r17, $r21, $r23, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60;
        com.android.server.pm.parsing.pkg.AndroidPackage r5;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        com.android.server.pm.ProtectedPackages $r11;
        android.util.ArrayMap $r12;
        java.lang.Object $r13, r71;
        com.android.server.pm.Settings $r24;
        java.lang.Throwable $r61, $r62;
        java.lang.String[] r63;
        java.lang.StringBuilder r64, r65, r66, r67, r68, r69, r70, r72, r73, r74, r75;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r63 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $i2 = lengthof r63;

        r1 = newarray (boolean)[$i2];

        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerDeviceOrProfileOwner(int)>(i0);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getActiveLauncherPackageName(int)>(i0);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        r3 = virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultDialer(int)>(i0);

     label02:
        i15 = 0;

     label03:
        $i3 = lengthof r63;

        if i15 >= $i3 goto label37;

     label04:
        r1[i15] = 0;

        r4 = r63[i15];

     label05:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdmin(java.lang.String,int)>(r4, i0);

        if $z1 == 0 goto label07;

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": has an active device admin");

        $r60 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r60);

     label06:
        goto label33;

     label07:
        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label09;

        r65 = new java.lang.StringBuilder;

        specialinvoke r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": contains the active launcher");

        $r56 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r56);

     label08:
        goto label33;

     label09:
        $r7 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage>;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label11;

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": required for package installation");

        $r52 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r52);

     label10:
        goto label33;

     label11:
        $r8 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredUninstallerPackage>;

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label13;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": required for package uninstallation");

        $r48 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r48);

     label12:
        goto label33;

     label13:
        $r9 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $z5 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label15;

        r68 = new java.lang.StringBuilder;

        specialinvoke r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": required for package verification");

        $r44 = virtualinvoke r68.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r44);

     label14:
        goto label33;

     label15:
        $z6 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z6 == 0 goto label17;

        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": is the default dialer");

        $r40 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r40);

     label16:
        goto label33;

     label17:
        $r10 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredPermissionControllerPackage>;

        $z7 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z7 == 0 goto label19;

        r70 = new java.lang.StringBuilder;

        specialinvoke r70.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": required for permissions management");

        $r36 = virtualinvoke r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r36);

     label18:
        goto label33;

     label19:
        r71 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r71;

     label20:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        $z8 = virtualinvoke $r11.<com.android.server.pm.ProtectedPackages: boolean isPackageStateProtected(int,java.lang.String)>(i0, r4);

        if $z8 == 0 goto label22;

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": protected package");

        $r32 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r32);

        exitmonitor r71;

     label21:
        goto label33;

     label22:
        if z0 != 0 goto label25;

     label23:
        $r24 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z11 = virtualinvoke $r24.<com.android.server.pm.Settings: boolean getBlockUninstallLPr(int,java.lang.String)>(i0, r4);

        if $z11 == 0 goto label25;

        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package \"");

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": blocked by admin");

        $r28 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r28);

        exitmonitor r71;

     label24:
        goto label33;

     label25:
        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r13;

     label26:
        if r5 == null goto label29;

     label27:
        $z10 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStaticSharedLibrary()>();

        if $z10 == 0 goto label29;

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend package: ");

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" providing static shared library: ");

        $r21 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        exitmonitor r71;

     label28:
        goto label33;

     label29:
        exitmonitor r71;

     label30:
        $r14 = "android";

        $z9 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z9 == 0 goto label32;

        r75 = new java.lang.StringBuilder;

        specialinvoke r75.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend the platform package: ");

        virtualinvoke r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

     label31:
        goto label33;

     label32:
        r1[i15] = 1;

     label33:
        i15 = i15 + 1;

        goto label03;

     label34:
        $r61 := @caughtexception;

     label35:
        exitmonitor r71;

     label36:
        throw $r61;

     label37:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r1;

     label38:
        $r62 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r62;

        catch java.lang.Throwable from label01 to label02 with label38;
        catch java.lang.Throwable from label03 to label04 with label38;
        catch java.lang.Throwable from label05 to label06 with label38;
        catch java.lang.Throwable from label07 to label08 with label38;
        catch java.lang.Throwable from label09 to label10 with label38;
        catch java.lang.Throwable from label11 to label12 with label38;
        catch java.lang.Throwable from label13 to label14 with label38;
        catch java.lang.Throwable from label15 to label16 with label38;
        catch java.lang.Throwable from label17 to label18 with label38;
        catch java.lang.Throwable from label19 to label20 with label38;
        catch java.lang.Throwable from label20 to label21 with label34;
        catch java.lang.Throwable from label23 to label24 with label34;
        catch java.lang.Throwable from label25 to label26 with label34;
        catch java.lang.Throwable from label27 to label28 with label34;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.lang.Throwable from label30 to label31 with label38;
        catch java.lang.Throwable from label35 to label36 with label34;
        catch java.lang.Throwable from label36 to label37 with label38;
    }

    private boolean canViewInstantApps(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3;
        android.content.Context $r1, $r2;
        boolean $z0, $z1;
        java.lang.String $r3, r5;
        android.content.ComponentName r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 10000 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_INSTANT_APPS");

        if $i2 != 0 goto label2;

        return 1;

     label2:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.VIEW_INSTANT_APPS");

        if $i3 != 0 goto label4;

        r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getDefaultHomeActivity(int)>(i1);

        if r4 == null goto label3;

        $r3 = virtualinvoke r4.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>($r3, i0);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        r5 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mAppPredictionServicePackage>;

        if r5 == null goto label4;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r5, i0);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private static void checkDowngrade(com.android.server.pm.parsing.pkg.AndroidPackage, android.content.pm.PackageInfoLite) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        android.content.pm.PackageInfoLite r1;
        java.lang.String r2, $r9, $r16, $r33;
        int i0, $i4, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18;
        long $l1, $l2, $l5, $l6, $l7;
        byte $b3, $b8;
        java.lang.StringBuilder $r3, $r10, $r23;
        com.android.server.pm.PackageManagerException $r8, $r15, $r32;
        java.lang.String[] $r17, $r18, $r19, $r20;
        boolean $z0;
        int[] $r21, $r22, $r27, $r30;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: android.content.pm.PackageInfoLite;

        $l1 = virtualinvoke r1.<android.content.pm.PackageInfoLite: long getLongVersionCode()>();

        $l2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label6;

        $l6 = virtualinvoke r1.<android.content.pm.PackageInfoLite: long getLongVersionCode()>();

        $l7 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label5;

        $i9 = r1.<android.content.pm.PackageInfoLite: int baseRevisionCode>;

        $i10 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getBaseRevisionCode()>();

        if $i9 < $i10 goto label4;

        $r17 = r1.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r17);

        if $z0 != 0 goto label5;

        i18 = 0;

     label1:
        $r18 = r1.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames>;

        $i13 = lengthof $r18;

        if i18 >= $i13 goto label5;

        $r19 = r1.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames>;

        r2 = $r19[i18];

        $r20 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitNames()>();

        i0 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($r20, r2);

        if i0 == -1 goto label3;

        $r21 = r1.<android.content.pm.PackageInfoLite: int[] splitRevisionCodes>;

        $i14 = $r21[i18];

        $r22 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int[] getSplitRevisionCodes()>();

        $i15 = $r22[i0];

        if $i14 < $i15 goto label2;

        goto label3;

     label2:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update split ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" revision code ");

        $r27 = r1.<android.content.pm.PackageInfoLite: int[] splitRevisionCodes>;

        $i16 = $r27[i18];

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than current ");

        $r30 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int[] getSplitRevisionCodes()>();

        $i17 = $r30[i0];

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r32 = new com.android.server.pm.PackageManagerException;

        $r33 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-25, $r33);

        throw $r32;

     label3:
        i18 = i18 + 1;

        goto label1;

     label4:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update base revision code ");

        $i11 = r1.<android.content.pm.PackageInfoLite: int baseRevisionCode>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than current ");

        $i12 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getBaseRevisionCode()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r15 = new com.android.server.pm.PackageManagerException;

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-25, $r16);

        throw $r15;

     label5:
        return;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update version code ");

        $i4 = r1.<android.content.pm.PackageInfoLite: int versionCode>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is older than current ");

        $l5 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r8 = new com.android.server.pm.PackageManagerException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-25, $r9);

        throw $r8;
    }

    private void checkPackageFrozen(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        android.util.ArraySet $r2;
        boolean $z0;
        java.lang.Throwable $r6, r10;
        java.lang.String r7, r9;
        java.lang.StringBuilder r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r7);

        if $z0 != 0 goto label2;

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to be frozen!");

        r9 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r10 = new java.lang.Throwable;

        specialinvoke r10.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", r9, r10);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private int checkSignaturesInternal(android.content.pm.PackageParser$SigningDetails, android.content.pm.PackageParser$SigningDetails)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.Signature[] $r1, $r2, $r3, $r5, r9, r10, r11, r12;
        boolean $z0, $z1, $z2, $z3;
        android.content.pm.Signature $r4, $r6;
        android.content.pm.PackageParser$SigningDetails r7, r8;
        byte b0;
        int i1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: android.content.pm.PackageParser$SigningDetails;

        r8 := @parameter1: android.content.pm.PackageParser$SigningDetails;

        b0 = 1;

        if r7 != null goto label03;

        if r8 != null goto label01;

        goto label02;

     label01:
        b0 = -1;

     label02:
        return b0;

     label03:
        if r8 != null goto label04;

        return -2;

     label04:
        $r2 = r7.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r1 = r8.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        i1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>($r2, $r1);

        if i1 != 0 goto label05;

        return i1;

     label05:
        $z0 = virtualinvoke r7.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z0 != 0 goto label06;

        $z3 = virtualinvoke r8.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z3 == 0 goto label11;

     label06:
        $z1 = virtualinvoke r7.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z1 == 0 goto label07;

        r9 = newarray (android.content.pm.Signature)[1];

        $r5 = r7.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] pastSigningCertificates>;

        $r6 = $r5[0];

        r9[0] = $r6;

        r10 = r9;

        goto label08;

     label07:
        r10 = r7.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

     label08:
        $z2 = virtualinvoke r8.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z2 == 0 goto label09;

        r11 = newarray (android.content.pm.Signature)[1];

        $r3 = r8.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] pastSigningCertificates>;

        $r4 = $r3[0];

        r11[0] = $r4;

        r12 = r11;

        goto label10;

     label09:
        r12 = r8.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

     label10:
        i1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(r10, r12);

     label11:
        return i1;
    }

    private android.content.pm.ResolveInfo chooseBestActivity(android.content.Intent, java.lang.String, int, int, java.util.List, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i20, $i21, $i22, i24, i25, i26, i27;
        android.content.pm.ResolveInfo r1, r2, $r5, $r6, $r22, $r46, r51, r52, $r62;
        java.lang.Object $r3, $r4, $r21, $r24, $r30, $r45, $r61;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, z9;
        android.content.pm.ActivityInfo $r7, $r8, $r9, $r11, $r13, $r16, $r17, $r18, $r23, $r25, $r27, $r33, $r39, $r57, $r59;
        java.lang.String $r10, $r34, $r40, $r44, r48, r53, r55;
        android.os.Bundle $r12, $r14, $r15;
        android.content.pm.ApplicationInfo $r19, $r20, $r26, r56, $r58, $r60;
        com.android.server.pm.Settings $r28;
        android.util.ArrayMap $r29;
        com.android.server.pm.PackageSetting $r31;
        long $l18, $l19;
        java.lang.StringBuilder $r32;
        android.content.Intent r47;
        java.util.List r49;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r47 := @parameter0: android.content.Intent;

        r48 := @parameter1: java.lang.String;

        i24 := @parameter2: int;

        i0 := @parameter3: int;

        r49 := @parameter4: java.util.List;

        i1 := @parameter5: int;

        z7 := @parameter6: boolean;

        if r49 == null goto label20;

        i2 = interfaceinvoke r49.<java.util.List: int size()>();

        if i2 != 1 goto label01;

        $r45 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(0);

        $r46 = (android.content.pm.ResolveInfo) $r45;

        return $r46;

     label01:
        if i2 <= 1 goto label20;

        $i3 = virtualinvoke r47.<android.content.Intent: int getFlags()>();

        $i4 = $i3 & 8;

        if $i4 == 0 goto label02;

        z8 = 1;

        goto label03;

     label02:
        z8 = 0;

     label03:
        $r3 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(0);

        r1 = (android.content.pm.ResolveInfo) $r3;

        $r4 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(1);

        r2 = (android.content.pm.ResolveInfo) $r4;

        if z8 == 0 goto label04;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = r1.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r34 = $r33.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i21 = r1.<android.content.pm.ResolveInfo: int priority>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vs ");

        $r39 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r40 = $r39.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $i22 = r2.<android.content.pm.ResolveInfo: int priority>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r44 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r44);

     label04:
        $i6 = r1.<android.content.pm.ResolveInfo: int priority>;

        $i5 = r2.<android.content.pm.ResolveInfo: int priority>;

        if $i6 != $i5 goto label19;

        $i8 = r1.<android.content.pm.ResolveInfo: int preferredOrder>;

        $i7 = r2.<android.content.pm.ResolveInfo: int preferredOrder>;

        if $i8 != $i7 goto label19;

        $z1 = r1.<android.content.pm.ResolveInfo: boolean isDefault>;

        $z0 = r2.<android.content.pm.ResolveInfo: boolean isDefault>;

        if $z1 == $z0 goto label05;

        goto label19;

     label05:
        $i9 = r1.<android.content.pm.ResolveInfo: int priority>;

        r51 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int,boolean)>(r47, r48, i24, r49, $i9, 1, 0, z8, i1, z7);

        if r51 == null goto label06;

        return r51;

     label06:
        i25 = 0;

        i26 = 0;

     label07:
        if i26 >= i2 goto label10;

        $r24 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(i26);

        r52 = (android.content.pm.ResolveInfo) $r24;

        i27 = i25;

        $z5 = r52.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

        if $z5 == 0 goto label08;

        i27 = i25 + 1;

     label08:
        $r25 = r52.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r26 = $r25.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z6 = virtualinvoke $r26.<android.content.pm.ApplicationInfo: boolean isInstantApp()>();

        if $z6 == 0 goto label09;

        $r27 = r52.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r53 = $r27.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r28 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r29 = $r28.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r30 = virtualinvoke $r29.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r53);

        $r31 = (com.android.server.pm.PackageSetting) $r30;

        $l18 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>($r31, i1);

        $l19 = $l18 >> 32;

        $i20 = (int) $l19;

        if $i20 == 4 goto label09;

        return r52;

     label09:
        i26 = i26 + 1;

        i25 = i27;

        goto label07;

     label10:
        $i10 = i0 & 2;

        if $i10 == 0 goto label11;

        return null;

     label11:
        $r5 = new android.content.pm.ResolveInfo;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        specialinvoke $r5.<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>($r6);

        if i25 != i2 goto label12;

        z9 = 1;

        goto label13;

     label12:
        z9 = 0;

     label13:
        $r5.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI> = z9;

        $r7 = new android.content.pm.ActivityInfo;

        $r8 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        specialinvoke $r7.<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>($r8);

        $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r7;

        $r9 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r10 = virtualinvoke r47.<android.content.Intent: java.lang.String getAction()>();

        $i11 = staticinvoke <com.android.internal.app.ResolverActivity: int getLabelRes(java.lang.String)>($r10);

        $r9.<android.content.pm.ActivityInfo: int labelRes> = $i11;

        r55 = virtualinvoke r47.<android.content.Intent: java.lang.String getPackage()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r55);

        if $z2 != 0 goto label16;

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean allHavePackage(java.util.List,java.lang.String)>(r49, r55);

        if $z3 == 0 goto label16;

        $r21 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(0);

        $r22 = (android.content.pm.ResolveInfo) $r21;

        $r23 = $r22.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r56 = $r23.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r5.<android.content.pm.ResolveInfo: java.lang.String resolvePackageName> = r55;

        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean userNeedsBadging(int)>(i1);

        if $z4 == 0 goto label14;

        $r5.<android.content.pm.ResolveInfo: boolean noResourceId> = 1;

        goto label15;

     label14:
        $i15 = r56.<android.content.pm.ApplicationInfo: int icon>;

        $r5.<android.content.pm.ResolveInfo: int icon> = $i15;

     label15:
        $i16 = r56.<android.content.pm.ApplicationInfo: int icon>;

        $r5.<android.content.pm.ResolveInfo: int iconResourceId> = $i16;

        $i17 = r56.<android.content.pm.ApplicationInfo: int labelRes>;

        $r5.<android.content.pm.ResolveInfo: int labelRes> = $i17;

        goto label16;

     label16:
        $r57 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r58 = new android.content.pm.ApplicationInfo;

        $r59 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r60 = $r59.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        specialinvoke $r58.<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>($r60);

        $r57.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r58;

        if i1 == 0 goto label17;

        $r17 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r20 = $r17.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r18 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r19 = $r18.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i12 = $r19.<android.content.pm.ApplicationInfo: int uid>;

        $i13 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i12);

        $i14 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i1, $i13);

        $r20.<android.content.pm.ApplicationInfo: int uid> = $i14;

     label17:
        $r11 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r12 = $r11.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r12 != null goto label18;

        $r16 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r15 = new android.os.Bundle;

        specialinvoke $r15.<android.os.Bundle: void <init>()>();

        $r16.<android.content.pm.ActivityInfo: android.os.Bundle metaData> = $r15;

     label18:
        $r13 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r14 = $r13.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        virtualinvoke $r14.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.dock_home", 1);

        return $r5;

     label19:
        $r61 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>(0);

        $r62 = (android.content.pm.ResolveInfo) $r61;

        return $r62;

     label20:
        return null;
    }

    private void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$ScanResult r1;
        com.android.server.pm.PackageSetting $r2, $r3;
        int $i0, $i1;
        com.android.server.pm.Settings $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$ScanResult;

        $r2 = r1.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $i0 = $r2.<com.android.server.pm.PackageSetting: int appId>;

        if $i0 <= 0 goto label1;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = r1.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $i1 = $r3.<com.android.server.pm.PackageSetting: int appId>;

        virtualinvoke $r4.<com.android.server.pm.Settings: void removeAppIdLPw(int)>($i1);

     label1:
        return;
    }

    private void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, i1, $i2;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package was null!", $r2);

        return;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i0, i1);

        $i2 = 131072 & i1;

        if $i2 != 0 goto label2;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, -1);

     label2:
        return;
    }

    private void clearAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i4, i5;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.String $r5, $r8, $r9, $r11;
        java.lang.Object $r6, r14;
        com.android.server.pm.Installer $r7;
        com.android.server.pm.Installer$InstallerException $r10;
        java.lang.Throwable $r12;
        com.android.server.pm.parsing.pkg.AndroidPackage r13;
        int[] r15;
        long l6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        r14 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = interfaceinvoke r13.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r1 = (com.android.server.pm.PackageSetting) $r6;

        exitmonitor r14;

     label02:
        r15 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int[] resolveUserIds(int)>(i4);

        i1 = lengthof r15;

        i5 = 0;

     label03:
        if i5 >= i1 goto label09;

        i2 = r15[i5];

        if r1 == null goto label04;

        l6 = virtualinvoke r1.<com.android.server.pm.PackageSetting: long getCeDataInode(int)>(i2);

        goto label05;

     label04:
        l6 = 0L;

     label05:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r8 = interfaceinvoke r13.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        $r9 = interfaceinvoke r13.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r7.<com.android.server.pm.Installer: void clearAppData(java.lang.String,java.lang.String,int,int,long)>($r8, $r9, i2, i0, l6);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r11);

     label08:
        i5 = i5 + 1;

        goto label03;

     label09:
        return;

     label10:
        $r12 := @caughtexception;

     label11:
        exitmonitor r14;

     label12:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch com.android.server.pm.Installer$InstallerException from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void clearAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0;
        com.android.server.pm.dex.ArtManagerService $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r3 = new java.lang.Throwable;

        specialinvoke $r3.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package was null!", $r3);

        return;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService>;

        virtualinvoke $r2.<com.android.server.pm.dex.ArtManagerService: void clearAppProfiles(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        return;
    }

    private boolean clearApplicationUserDataLIF(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i4;
        java.lang.Object r1, $r5, $r8;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r20;
        com.android.server.pm.PackageSetting r3;
        android.util.ArrayMap $r4, $r7;
        com.android.server.pm.Settings $r6;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r9;
        com.android.server.pm.PackageManagerService$Injector $r10, $r12;
        android.os.UserManagerInternal $r11, r22;
        boolean $z0, $z1;
        java.lang.StringBuilder $r13;
        java.lang.String $r17, r19;
        java.lang.Throwable $r18;
        byte b5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r19 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r19 != null goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Attempt to delete null packageName.");

        return 0;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r19);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r19);

        r3 = (com.android.server.pm.PackageSetting) $r8;

     label03:
        r20 = r2;

        if r2 != null goto label05;

        r20 = r2;

        if r3 == null goto label05;

     label04:
        r20 = r3.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label05:
        exitmonitor r1;

     label06:
        if r20 != null goto label07;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package named \'");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t exist.");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

        return 0;

     label07:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r9.<com.android.server.pm.permission.PermissionManagerServiceInternal: void resetRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r20, i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r20, i0, 7);

        $i1 = interfaceinvoke r20.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r11 = virtualinvoke $r10.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void removeKeystoreDataIfNeeded(android.os.UserManagerInternal,int,int)>($r11, i0, i4);

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r22 = virtualinvoke $r12.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $z0 = virtualinvoke r22.<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>(i0);

        if $z0 == 0 goto label08;

        b5 = 3;

        goto label10;

     label08:
        $z1 = virtualinvoke r22.<android.os.UserManagerInternal: boolean isUserRunning(int)>(i0);

        if $z1 == 0 goto label09;

        b5 = 1;

        goto label10;

     label09:
        b5 = 0;

     label10:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataContentsLIF(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int,int)>(r20, r3, i0, b5);

        return 1;

     label11:
        $r18 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r18;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void clearDefaultBrowserIfNeededForUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        r2 = virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultBrowser(int)>(i0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultBrowser(java.lang.String,boolean,boolean,int)>(null, 1, 1, i0);

     label1:
        return;
    }

    private void clearIntentFilterVerificationsLPw(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        android.util.ArrayMap $r1, $r2;
        java.lang.Object $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i1 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        $r4 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

        $r5 = interfaceinvoke $r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(java.lang.String,int,boolean)>($r5, i0, 1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private void clearPackagePreferredActivities(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        android.util.SparseBooleanArray $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;
        java.lang.Object r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new android.util.SparseBooleanArray;

        specialinvoke $r1.<android.util.SparseBooleanArray: void <init>()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivitiesLPw(java.lang.String,android.util.SparseBooleanArray,int)>(r3, $r1, i0);

        $i1 = virtualinvoke $r1.<android.util.SparseBooleanArray: int size()>();

        if $i1 <= 0 goto label6;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateDefaultHomeNotLocked(android.util.SparseBooleanArray)>($r1);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(i0);

        r5 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r5;

     label2:
        goto label6;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r5;

     label5:
        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void clearPackagePreferredActivitiesLPw(java.lang.String, android.util.SparseBooleanArray, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r19;
        android.util.SparseBooleanArray r2;
        int i0, i1, $i2, $i3, i4, i5;
        com.android.server.pm.PreferredIntentResolver r3;
        java.util.Iterator r4;
        com.android.server.pm.PreferredActivity r5, $r14;
        com.android.server.pm.Settings $r6, $r8, $r10;
        android.util.SparseArray $r7, $r9, $r11;
        java.lang.Object $r12, $r13, $r15;
        java.util.ArrayList $r16, r21, r22, r23;
        com.android.server.pm.PreferredComponent $r17, $r20;
        android.content.ComponentName $r18;
        boolean $z1, $z2, $z3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.util.SparseBooleanArray;

        i0 := @parameter2: int;

        r21 = null;

        i4 = 0;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i2 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        if i4 >= $i2 goto label11;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        i1 = virtualinvoke $r9.<android.util.SparseArray: int keyAt(int)>(i4);

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r3 = (com.android.server.pm.PreferredIntentResolver) $r12;

        if i0 == -1 goto label02;

        if i0 == i1 goto label02;

        r22 = r21;

        goto label10;

     label02:
        r4 = virtualinvoke r3.<com.android.server.pm.PreferredIntentResolver: java.util.Iterator filterIterator()>();

     label03:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.pm.PreferredActivity) $r15;

        if r1 == null goto label04;

        r23 = r21;

        $r17 = r5.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r18 = $r17.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r19 = virtualinvoke $r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label06;

        r23 = r21;

        $r20 = r5.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z2 = $r20.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z2 == 0 goto label06;

     label04:
        r23 = r21;

        if r21 != null goto label05;

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r23 = $r16;

     label05:
        virtualinvoke r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label06:
        r21 = r23;

        goto label03;

     label07:
        r22 = r21;

        if r21 == null goto label10;

        i5 = 0;

     label08:
        $i3 = virtualinvoke r21.<java.util.ArrayList: int size()>();

        if i5 >= $i3 goto label09;

        $r13 = virtualinvoke r21.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r14 = (com.android.server.pm.PreferredActivity) $r13;

        virtualinvoke r3.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>($r14);

        i5 = i5 + 1;

        goto label08;

     label09:
        virtualinvoke r2.<android.util.SparseBooleanArray: void put(int,boolean)>(i1, 1);

        r22 = r21;

     label10:
        i4 = i4 + 1;

        r21 = r22;

        goto label01;

     label11:
        return;
    }

    private void clearPackageStateForUserLIF(com.android.server.pm.PackageSetting, int, com.android.server.pm.PackageManagerService$PackageRemovedInfo, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r1;
        int i0, i1, i2, $i3, $i4, i5, i6, $i7;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        java.lang.String $r3, $r6, $r8, $r9, $r10, $r13;
        android.util.ArrayMap $r4;
        java.lang.Object $r5, r18;
        com.android.server.pm.InstallSource $r7;
        com.android.server.pm.PackageManagerService$Injector $r11;
        android.os.UserManagerInternal $r12;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r14;
        com.android.server.pm.UserManagerService $r15;
        java.lang.Throwable $r16;
        com.android.server.pm.PackageSetting r17;
        int[] r19;
        boolean z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r17 := @parameter0: com.android.server.pm.PackageSetting;

        i5 := @parameter1: int;

        r1 := @parameter2: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        i0 := @parameter3: int;

        r18 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r18;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        exitmonitor r18;

     label02:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        if i5 != -1 goto label03;

        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r19 = virtualinvoke $r15.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        goto label04;

     label03:
        r19 = newarray (int)[1];

        r19[0] = i5;

     label04:
        i1 = lengthof r19;

        i6 = 0;

     label05:
        if i6 >= i1 goto label07;

        i2 = r19[i6];

        $i3 = i0 & 1;

        if $i3 != 0 goto label06;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r2, i2, 7);

     label06:
        $r10 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearDefaultBrowserIfNeededForUser(java.lang.String,int)>($r10, i2);

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r12 = virtualinvoke $r11.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $i4 = r17.<com.android.server.pm.PackageSetting: int appId>;

        staticinvoke <com.android.server.pm.PackageManagerService: void removeKeystoreDataIfNeeded(android.os.UserManagerInternal,int,int)>($r12, i2, $i4);

        $r13 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String,int)>($r13, i2);

        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r14.<com.android.server.pm.permission.PermissionManagerServiceInternal: void resetRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r2, i2);

        i6 = i6 + 1;

        goto label05;

     label07:
        if r1 == null goto label09;

        $r6 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = $r6;

        $r7 = r17.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        $r8 = $r7.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String installerPackageName> = $r8;

        z1 = 0;

        if r2 == null goto label08;

        z1 = 0;

        $r9 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r9 == null goto label08;

        z1 = 1;

     label08:
        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isStaticSharedLib> = z1;

        $i7 = r17.<com.android.server.pm.PackageSetting: int appId>;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId> = $i7;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers> = r19;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] broadcastUsers> = r19;

     label09:
        return;

     label10:
        $r16 := @caughtexception;

     label11:
        exitmonitor r18;

     label12:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void clearRolesAndRestorePermissionsForNewUserInstall(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        boolean $z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2, $r3;
        android.os.UserHandle $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean packageIsBrowser(java.lang.String,int)>(r1, i1);

        if $z0 == 0 goto label1;

        if i0 == 2 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultBrowser(java.lang.String,boolean,boolean,int)>(null, 1, 1, i1);

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void restoreDelayedRuntimePermissions(java.lang.String,android.os.UserHandle)>(r1, $r4);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>(i1);

        return;
    }

    private java.util.List collectAbsoluteCodePaths()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r6;
        int i0, i1;
        com.android.server.pm.Settings $r2, $r4;
        android.util.ArrayMap $r3, $r5;
        com.android.server.pm.PackageSetting $r7;
        java.io.File $r8;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        java.util.ArrayList r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r7 = (com.android.server.pm.PackageSetting) $r6;

        $r8 = $r7.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>($r9);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return r11;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void collectCertificatesLI(com.android.server.pm.PackageSetting, com.android.server.pm.parsing.pkg.ParsedPackage, boolean, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.ParsedPackage r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.String $r5, $r7, $r8, $r25, $r33, $r34, $r37, r38;
        long $l1, l6;
        byte $b2;
        com.android.server.pm.PackageSignatures $r9, $r15, $r18, $r21;
        android.content.pm.PackageParser$SigningDetails $r10, $r16, $r19, $r20, $r22, $r39;
        android.content.pm.Signature[] $r11, $r17;
        int $i4, $i5;
        java.io.File $r24;
        android.content.pm.PackageParser$PackageParserException $r26;
        com.android.server.pm.PackageManagerException $r27;
        java.lang.Throwable $r28;
        com.android.server.pm.PackageSetting r29;
        com.android.server.pm.Settings$VersionInfo r30;
        java.lang.StringBuilder $r31, $r35;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r29 := @parameter0: com.android.server.pm.PackageSetting;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.ParsedPackage;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $z2 = r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNMR1Upgrade>;

        if $z2 == 0 goto label01;

        $r24 = new java.io.File;

        $r25 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>($r25);

        l6 = virtualinvoke $r24.<java.io.File: long lastModified()>();

        goto label02;

     label01:
        l6 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: long getLastModifiedTime(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label02:
        r30 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        if r29 == null goto label04;

        if z0 != 0 goto label04;

        $r7 = r29.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r8 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label04;

        $l1 = r29.<com.android.server.pm.PackageSetting: long timeStamp>;

        $b2 = $l1 cmp l6;

        if $b2 != 0 goto label04;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isCompatSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)>(r30);

        if $z4 != 0 goto label04;

        $z5 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isRecoverSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)>(r30);

        if $z5 != 0 goto label04;

        $r9 = r29.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r10 = $r9.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r11 = $r10.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        if $r11 == null goto label03;

        $r15 = r29.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r16 = $r15.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r17 = $r16.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i4 = lengthof $r17;

        if $i4 == 0 goto label03;

        $r18 = r29.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r19 = $r18.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $i5 = $r19.<android.content.pm.PackageParser$SigningDetails: int signatureSchemeVersion>;

        if $i5 == 0 goto label03;

        $r20 = new android.content.pm.PackageParser$SigningDetails;

        $r21 = r29.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r22 = $r21.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        specialinvoke $r20.<android.content.pm.PackageParser$SigningDetails: void <init>(android.content.pm.PackageParser$SigningDetails)>($r22);

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSigningDetails(android.content.pm.PackageParser$SigningDetails)>($r20);

        return;

     label03:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PackageSetting for ");

        $r33 = r29.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is missing signatures.  Collecting certs again to recover them.");

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r34);

        goto label07;

     label04:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r37 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed; collecting certs");

        if z0 == 0 goto label05;

        r38 = " (forced)";

        goto label06;

     label05:
        r38 = "";

     label06:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        $r5 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r5);

     label07:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "collectCertificates");

     label08:
        $r39 = staticinvoke <android.content.pm.parsing.ParsingPackageUtils: android.content.pm.PackageParser$SigningDetails getSigningDetails(android.content.pm.parsing.ParsingPackageRead,boolean)>(r1, z1);

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSigningDetails(android.content.pm.PackageParser$SigningDetails)>($r39);

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label10:
        $r28 := @caughtexception;

        goto label13;

     label11:
        $r26 := @caughtexception;

     label12:
        $r27 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>($r26);

        throw $r27;

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r28;

        catch android.content.pm.PackageParser$PackageParserException from label07 to label08 with label11;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch android.content.pm.PackageParser$PackageParserException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    private static java.util.ArrayList collectSharedLibraryInfos(com.android.server.pm.parsing.pkg.AndroidPackage, java.util.Map, java.util.Map, java.util.Map) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.util.Map r1, r2, r3;
        java.util.List $r4, $r5, $r6, $r7, $r9, $r13;
        boolean $z0, $z1, $z2;
        java.lang.String $r8, $r12, $r14;
        int $i0, $i1, $i2;
        long[] $r10;
        java.lang.String[][] $r11;
        java.util.ArrayList r15, r16, r17;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.util.Map;

        if r0 != null goto label1;

        return null;

     label1:
        r15 = null;

        $r4 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesLibraries()>();

        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r13 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesLibraries()>();

        $r14 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        r15 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.ArrayList collectSharedLibraryInfos(java.util.List,long[],java.lang.String[][],java.lang.String,boolean,int,java.util.ArrayList,java.util.Map,java.util.Map,java.util.Map)>($r13, null, null, $r14, 1, $i2, null, r1, r2, r3);

     label2:
        r16 = r15;

        $r5 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesStaticLibraries()>();

        $z1 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        $r9 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesStaticLibraries()>();

        $r10 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: long[] getUsesStaticLibrariesVersions()>();

        $r11 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[][] getUsesStaticLibrariesCertDigests()>();

        $r12 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i1 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        r16 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.ArrayList collectSharedLibraryInfos(java.util.List,long[],java.lang.String[][],java.lang.String,boolean,int,java.util.ArrayList,java.util.Map,java.util.Map,java.util.Map)>($r9, $r10, $r11, $r12, 1, $i1, r15, r1, r2, r3);

     label3:
        r17 = r16;

        $r6 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesOptionalLibraries()>();

        $z2 = interfaceinvoke $r6.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label4;

        $r7 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesOptionalLibraries()>();

        $r8 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        r17 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.ArrayList collectSharedLibraryInfos(java.util.List,long[],java.lang.String[][],java.lang.String,boolean,int,java.util.ArrayList,java.util.Map,java.util.Map,java.util.Map)>($r7, null, null, $r8, 0, $i0, r16, r1, r2, r3);

     label4:
        return r17;
    }

    private static java.util.ArrayList collectSharedLibraryInfos(java.util.List, long[], java.lang.String[][], java.lang.String, boolean, int, java.util.ArrayList, java.util.Map, java.util.Map, java.util.Map) throws com.android.server.pm.PackageManagerException
    {
        long[] r0;
        java.lang.String[][] r1;
        java.lang.String r2, $r19, $r20, $r27, $r28, $r35, $r44, $r45, $r46, $r52, $r61, r64;
        boolean z0, $z2, $z3;
        int i0, i1, i2, $i7, $i8, $i9, i10, i12;
        java.util.Map r3, r4, r5;
        android.content.pm.SharedLibraryInfo r6;
        java.lang.String[] r7, r68;
        java.lang.Object $r8, $r21;
        java.util.ArrayList $r9, r63, r74;
        long $l3, $l4, $l6, l11;
        byte $b5;
        java.lang.StringBuilder $r10, $r22, $r30, $r39, $r47, $r54;
        com.android.server.pm.PackageManagerException $r18, $r26, $r34, $r43, $r51, $r60;
        byte[] $r29;
        android.content.pm.Signature[] $r36, $r37, $r53;
        android.content.pm.Signature $r38;
        java.util.List r62;
        com.android.server.pm.parsing.pkg.AndroidPackage r66;
        android.content.pm.PackageParser$SigningDetails r67;

        r62 := @parameter0: java.util.List;

        r0 := @parameter1: long[];

        r1 := @parameter2: java.lang.String[][];

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        r63 := @parameter6: java.util.ArrayList;

        r3 := @parameter7: java.util.Map;

        r4 := @parameter8: java.util.Map;

        r5 := @parameter9: java.util.Map;

        i1 = interfaceinvoke r62.<java.util.List: int size()>();

        i10 = 0;

     label01:
        if i10 >= i1 goto label21;

        $r8 = interfaceinvoke r62.<java.util.List: java.lang.Object get(int)>(i10);

        r64 = (java.lang.String) $r8;

        if r0 == null goto label02;

        l11 = r0[i10];

        goto label03;

     label02:
        l11 = -1L;

     label03:
        r6 = staticinvoke <com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfo(java.lang.String,long,java.util.Map,java.util.Map)>(r64, l11, r4, r5);

        if r6 != null goto label05;

        if z0 != 0 goto label04;

        goto label20;

     label04:
        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires unavailable shared library ");

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; failing!");

        $r60 = new com.android.server.pm.PackageManagerException;

        $r61 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r61);

        throw $r60;

     label05:
        if r0 == null goto label18;

        if r1 == null goto label18;

        $l3 = virtualinvoke r6.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $l4 = r0[i10];

        $b5 = $l3 cmp $l4;

        if $b5 != 0 goto label17;

        $r20 = virtualinvoke r6.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        $r21 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20);

        r66 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r21;

        if r66 != null goto label06;

        r67 = null;

        goto label07;

     label06:
        r67 = interfaceinvoke r66.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

     label07:
        if r67 == null goto label16;

        r7 = r1[i10];

        $i7 = lengthof r7;

        if $i7 <= 1 goto label14;

        if i0 < 27 goto label08;

        $r53 = r67.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        r68 = staticinvoke <android.util.PackageUtils: java.lang.String[] computeSignaturesSha256Digests(android.content.pm.Signature[])>($r53);

        goto label09;

     label08:
        $r36 = newarray (android.content.pm.Signature)[1];

        $r37 = r67.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r38 = $r37[0];

        $r36[0] = $r38;

        r68 = staticinvoke <android.util.PackageUtils: java.lang.String[] computeSignaturesSha256Digests(android.content.pm.Signature[])>($r36);

     label09:
        $i9 = lengthof r7;

        $i8 = lengthof r68;

        if $i9 != $i8 goto label13;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r68);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r7);

        i2 = lengthof r68;

        i12 = 0;

     label10:
        if i12 >= i2 goto label12;

        $r46 = r68[i12];

        $r45 = r7[i12];

        $z3 = virtualinvoke $r46.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r45);

        if $z3 == 0 goto label11;

        i12 = i12 + 1;

        goto label10;

     label11:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires differently signed static shared library; failing!");

        $r51 = new com.android.server.pm.PackageManagerException;

        $r52 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r52);

        throw $r51;

     label12:
        goto label18;

     label13:
        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires differently signed static shared library; failing!");

        $r43 = new com.android.server.pm.PackageManagerException;

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r44);

        throw $r43;

     label14:
        $r28 = r7[0];

        $r29 = staticinvoke <libcore.util.HexEncoding: byte[] decode(java.lang.String,boolean)>($r28, 0);

        $z2 = virtualinvoke r67.<android.content.pm.PackageParser$SigningDetails: boolean hasSha256Certificate(byte[])>($r29);

        if $z2 == 0 goto label15;

        goto label18;

     label15:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires differently signed static shared library; failing!");

        $r34 = new com.android.server.pm.PackageManagerException;

        $r35 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r35);

        throw $r34;

     label16:
        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires unavailable static shared library; failing!");

        $r26 = new com.android.server.pm.PackageManagerException;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r27);

        throw $r26;

     label17:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires unavailable static shared library ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $l6 = virtualinvoke r6.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; failing!");

        $r18 = new com.android.server.pm.PackageManagerException;

        $r19 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, $r19);

        throw $r18;

     label18:
        r74 = r63;

        if r63 != null goto label19;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r74 = $r9;

     label19:
        virtualinvoke r74.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        r63 = r74;

     label20:
        i10 = i10 + 1;

        goto label01;

     label21:
        return r63;
    }

    private void commitPackageSettings(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, int, boolean, com.android.server.pm.PackageManagerService$ReconciledPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, z8, z9;
        java.lang.String r1, $r7, $r22, $r27, $r30, $r33, $r35, $r38, $r42, $r53, $r55, $r73, $r74, $r75, $r76, $r91;
        java.util.Map r2;
        java.util.List $r4, $r14, $r15, $r19, $r20, $r44;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i10, $i11, i13, i14, $i15, i16, i17;
        com.android.server.pm.Settings $r5, $r9;
        android.util.ArrayMap $r6, $r16, $r23;
        com.android.server.pm.KeySetManagerService $r10;
        com.android.server.pm.ComponentResolver $r11;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r12, $r13;
        java.util.Set $r17;
        android.util.ArraySet $r18, r122;
        java.lang.Object $r21, $r41, $r45, r92, r96, r99, r104, r127;
        android.content.ComponentName $r24, r90, r94;
        com.android.server.pm.PackageManagerService$PrepareResult $r39, r111;
        com.android.server.pm.ApexManager $r40;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r43, $r102;
        android.content.pm.SharedLibraryInfo $r46;
        android.content.pm.ApplicationInfo $r47, $r48, $r49, $r54, $r71, r93;
        android.content.pm.ActivityInfo $r50, $r52, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r72;
        java.lang.Class $r51;
        android.content.pm.ResolveInfo $r67, $r68, $r69, $r70;
        java.lang.Throwable $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, r107, r126;
        com.android.server.pm.PackageManagerException $r85;
        com.android.server.pm.parsing.pkg.AndroidPackage r86, r87, r103;
        com.android.server.pm.PackageSetting r88;
        com.android.server.pm.PackageManagerService$ReconciledPackage r89;
        java.util.Iterator r97;
        java.util.ArrayList r100, r101, r124;
        com.android.server.pm.AppsFilter $r113;
        java.lang.StringBuilder r114, r116, r119;
        android.content.pm.parsing.component.ParsedInstrumentation r121;
        com.android.server.pm._$$Lambda$PackageManagerService$PPALVjzIAqON2FdZv5soozZSLq8 r125;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r86 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r87 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r88 := @parameter2: com.android.server.pm.PackageSetting;

        i13 := @parameter3: int;

        z0 := @parameter4: boolean;

        r89 := @parameter5: com.android.server.pm.PackageManagerService$ReconciledPackage;

        r1 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r90 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        if r90 == null goto label01;

        $r75 = virtualinvoke r90.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r76 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z6 = virtualinvoke $r75.<java.lang.String: boolean equals(java.lang.Object)>($r76);

        if $z6 == 0 goto label01;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void setUpCustomResolverActivity(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r86, r88);

     label01:
        $r91 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z7 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z7 == 0 goto label08;

        r92 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r92;

     label02:
        r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage> = r86;

        r93 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication> = r93;

        $i10 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r86, r88);

        r93.<android.content.pm.ApplicationInfo: int flags> = $i10;

        $r47 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $i11 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r86, r88);

        $r47.<android.content.pm.ApplicationInfo: int privateFlags> = $i11;

        $r48 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        virtualinvoke $r48.<android.content.pm.ApplicationInfo: void initForUser(int)>(0);

        $z5 = r0.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced>;

        if $z5 != 0 goto label03;

        $r50 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r49 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r50.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = $r49;

        $r52 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r51 = class "Lcom/android/internal/app/ResolverActivity;";

        $r53 = virtualinvoke $r51.<java.lang.Class: java.lang.String getName()>();

        $r52.<android.content.pm.ActivityInfo: java.lang.String name> = $r53;

        $r56 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r54 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r55 = $r54.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r56.<android.content.pm.ActivityInfo: java.lang.String packageName> = $r55;

        $r57 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r57.<android.content.pm.ActivityInfo: java.lang.String processName> = "system:ui";

        $r58 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r58.<android.content.pm.ActivityInfo: int launchMode> = 0;

        $r59 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r59.<android.content.pm.ActivityInfo: int documentLaunchMode> = 3;

        $r60 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r60.<android.content.pm.ActivityInfo: int flags> = 32;

        $r61 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r61.<android.content.pm.ActivityInfo: int theme> = 16974374;

        $r62 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r62.<android.content.pm.ActivityInfo: boolean exported> = 1;

        $r63 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r63.<android.content.pm.ActivityInfo: boolean enabled> = 1;

        $r64 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r64.<android.content.pm.ActivityInfo: int resizeMode> = 2;

        $r65 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r65.<android.content.pm.ActivityInfo: int configChanges> = 3504;

        $r67 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r66 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r67.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r66;

        $r68 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r68.<android.content.pm.ResolveInfo: int priority> = 0;

        $r69 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r69.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        $r70 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r70.<android.content.pm.ResolveInfo: int match> = 0;

        r94 = new android.content.ComponentName;

        $r71 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r74 = $r71.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r72 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r73 = $r72.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke r94.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r74, $r73);

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName> = r94;

     label03:
        exitmonitor r92;

     label04:
        goto label08;

     label05:
        $r82 := @caughtexception;

     label06:
        exitmonitor r92;

     label07:
        throw $r82;

     label08:
        r96 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r96;

     label09:
        $r4 = r89.<com.android.server.pm.PackageManagerService$ReconciledPackage: java.util.List allowedSharedLibraryInfos>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r4);

        if $z1 != 0 goto label22;

        $r44 = r89.<com.android.server.pm.PackageManagerService$ReconciledPackage: java.util.List allowedSharedLibraryInfos>;

        r97 = interfaceinvoke $r44.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z4 = interfaceinvoke r97.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label12;

        $r45 = interfaceinvoke r97.<java.util.Iterator: java.lang.Object next()>();

        $r46 = (android.content.pm.SharedLibraryInfo) $r45;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void commitSharedLibraryInfoLocked(android.content.pm.SharedLibraryInfo)>($r46);

     label11:
        goto label10;

     label12:
        r2 = staticinvoke <com.android.server.pm.PackageManagerService$ReconciledPackage: java.util.Map access$2000(com.android.server.pm.PackageManagerService$ReconciledPackage)>(r89);

     label13:
        r99 = r96;

     label14:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.Map)>(r86, r88, null, null, r2);

     label15:
        goto label18;

     label16:
        $r85 := @caughtexception;

        r99 = r96;

     label17:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "updateSharedLibrariesLPr failed: ", $r85);

     label18:
        $i9 = i13 & 16;

        if $i9 != 0 goto label21;

        r99 = r96;

     label19:
        r100 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList updateAllSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.Map)>(r86, r88, r2);

     label20:
        r101 = r100;

        goto label23;

     label21:
        goto label22;

     label22:
        r101 = null;

     label23:
        exitmonitor r96;

     label24:
        $r102 = r89.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        if $r102 == null goto label25;

        $r43 = r89.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r43.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.util.ArrayList libraryConsumers> = r101;

     label25:
        $i0 = i13 & 16;

        if $i0 == 0 goto label26;

        goto label29;

     label26:
        $i1 = i13 & 1024;

        if $i1 == 0 goto label27;

        goto label29;

     label27:
        $i2 = i13 & 2048;

        if $i2 == 0 goto label28;

        goto label29;

     label28:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void checkPackageFrozen(java.lang.String)>(r1);

     label29:
        if r101 == null goto label31;

        i14 = 0;

     label30:
        $i7 = virtualinvoke r101.<java.util.ArrayList: int size()>();

        if i14 >= $i7 goto label31;

        $r41 = virtualinvoke r101.<java.util.ArrayList: java.lang.Object get(int)>(i14);

        r103 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r41;

        $r42 = interfaceinvoke r103.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i8 = interfaceinvoke r103.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>($r42, $i8, "update lib");

        i14 = i14 + 1;

        goto label30;

     label31:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "updateSettings");

        r104 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r104;

     label32:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void insertPackageSettingLPw(com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage)>(r88, r86);

     label33:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r86);

     label34:
        $i3 = 8388608 & i13;

        if $i3 == 0 goto label38;

     label35:
        $r40 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        virtualinvoke $r40.<com.android.server.pm.ApexManager: void registerApkInApex(com.android.server.pm.parsing.pkg.AndroidPackage)>(r86);

     label36:
        goto label38;

     label37:
        $r80 := @caughtexception;

        r107 = $r80;

        goto label77;

     label38:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r9.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke $r10.<com.android.server.pm.KeySetManagerService: void addScannedPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)>(r86);

     label39:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r11.<com.android.server.pm.ComponentResolver: void addAllComponents(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r86, z0);

     label40:
        r111 = r89.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

     label41:
        if r111 == null goto label44;

     label42:
        $r39 = r89.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

        z8 = $r39.<com.android.server.pm.PackageManagerService$PrepareResult: boolean replace>;

     label43:
        if z8 == 0 goto label44;

        z9 = 1;

        goto label45;

     label44:
        z9 = 0;

     label45:
        $r113 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        virtualinvoke $r113.<com.android.server.pm.AppsFilter: void addPackage(com.android.server.pm.PackageSetting,boolean)>(r88, z9);

     label46:
        $i15 = i13 & 8192;

        if $i15 == 0 goto label49;

     label47:
        r114 = new java.lang.StringBuilder;

        specialinvoke r114.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission groups from package ");

        $r35 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: instant apps cannot define new permission groups.");

        $r38 = virtualinvoke r114.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r38);

     label48:
        goto label50;

     label49:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r12.<com.android.server.pm.permission.PermissionManagerServiceInternal: void addAllPermissionGroups(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r86, z0);

     label50:
        $i4 = i13 & 8192;

        if $i4 == 0 goto label53;

     label51:
        r116 = new java.lang.StringBuilder;

        specialinvoke r116.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permissions from package ");

        $r30 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored: instant apps cannot define new permissions.");

        $r33 = virtualinvoke r116.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r33);

     label52:
        goto label54;

     label53:
        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r13.<com.android.server.pm.permission.PermissionManagerServiceInternal: void addAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r86, z0);

     label54:
        $r14 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getInstrumentations()>();

        i16 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r14);

     label55:
        i17 = 0;

        r119 = null;

     label56:
        if i17 >= i16 goto label66;

     label57:
        $r20 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getInstrumentations()>();

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i17);

        r121 = (android.content.pm.parsing.component.ParsedInstrumentation) $r21;

     label58:
        $r22 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r121.<android.content.pm.parsing.component.ParsedInstrumentation: void setPackageName(java.lang.String)>($r22);

        $r23 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r24 = virtualinvoke r121.<android.content.pm.parsing.component.ParsedInstrumentation: android.content.ComponentName getComponentName()>();

        virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r121);

     label59:
        if z0 == 0 goto label65;

        if r119 != null goto label62;

     label60:
        r119 = new java.lang.StringBuilder;

        specialinvoke r119.<java.lang.StringBuilder: void <init>(int)>(256);

     label61:
        goto label63;

     label62:
        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label63:
        $r27 = virtualinvoke r121.<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getName()>();

        virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label64:
        goto label65;

     label65:
        i17 = i17 + 1;

        goto label56;

     label66:
        $r15 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProtectedBroadcasts()>();

        $z2 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label72;

        r122 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts>;

        entermonitor r122;

     label67:
        $r18 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts>;

        $r19 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProtectedBroadcasts()>();

        virtualinvoke $r18.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r19);

        exitmonitor r122;

     label68:
        goto label72;

     label69:
        $r78 := @caughtexception;

     label70:
        exitmonitor r122;

     label71:
        throw $r78;

     label72:
        if r87 == null goto label74;

     label73:
        r124 = new java.util.ArrayList;

        $r16 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r17 = virtualinvoke $r16.<android.util.ArrayMap: java.util.Set keySet()>();

        specialinvoke r124.<java.util.ArrayList: void <init>(java.util.Collection)>($r17);

        r125 = new com.android.server.pm._$$Lambda$PackageManagerService$PPALVjzIAqON2FdZv5soozZSLq8;

        specialinvoke r125.<com.android.server.pm._$$Lambda$PackageManagerService$PPALVjzIAqON2FdZv5soozZSLq8: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.ArrayList)>(r0, r86, r87, r124);

        staticinvoke <android.os.AsyncTask: void execute(java.lang.Runnable)>(r125);

     label74:
        exitmonitor r104;

     label75:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label76:
        $r83 := @caughtexception;

        r107 = $r83;

     label77:
        exitmonitor r104;

     label78:
        throw r107;

     label79:
        $r81 := @caughtexception;

        r107 = $r81;

        goto label77;

     label80:
        $r84 := @caughtexception;

        r126 = $r84;

        r127 = r96;

        goto label82;

     label81:
        $r79 := @caughtexception;

        r126 = $r79;

        r127 = r96;

     label82:
        r99 = r127;

     label83:
        exitmonitor r127;

     label84:
        throw r126;

     label85:
        $r77 := @caughtexception;

        r126 = $r77;

        r127 = r99;

        goto label82;

        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label81;
        catch java.lang.Throwable from label10 to label11 with label81;
        catch java.lang.Throwable from label12 to label13 with label81;
        catch com.android.server.pm.PackageManagerException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label85;
        catch java.lang.Throwable from label17 to label18 with label85;
        catch java.lang.Throwable from label19 to label20 with label85;
        catch java.lang.Throwable from label23 to label24 with label80;
        catch java.lang.Throwable from label32 to label33 with label76;
        catch java.lang.Throwable from label33 to label34 with label76;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label76;
        catch java.lang.Throwable from label39 to label40 with label76;
        catch java.lang.Throwable from label40 to label41 with label76;
        catch java.lang.Throwable from label42 to label43 with label37;
        catch java.lang.Throwable from label45 to label46 with label76;
        catch java.lang.Throwable from label47 to label48 with label37;
        catch java.lang.Throwable from label49 to label50 with label76;
        catch java.lang.Throwable from label51 to label52 with label37;
        catch java.lang.Throwable from label53 to label54 with label76;
        catch java.lang.Throwable from label54 to label55 with label76;
        catch java.lang.Throwable from label57 to label58 with label76;
        catch java.lang.Throwable from label58 to label59 with label79;
        catch java.lang.Throwable from label60 to label61 with label79;
        catch java.lang.Throwable from label62 to label63 with label79;
        catch java.lang.Throwable from label63 to label64 with label79;
        catch java.lang.Throwable from label66 to label67 with label79;
        catch java.lang.Throwable from label67 to label68 with label69;
        catch java.lang.Throwable from label70 to label71 with label69;
        catch java.lang.Throwable from label71 to label72 with label79;
        catch java.lang.Throwable from label73 to label74 with label79;
        catch java.lang.Throwable from label74 to label75 with label79;
        catch java.lang.Throwable from label77 to label78 with label79;
        catch java.lang.Throwable from label83 to label84 with label85;
    }

    private void commitPackagesLocked(com.android.server.pm.PackageManagerService$CommitRequest)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$CommitRequest r1;
        java.util.Iterator r2;
        com.android.server.pm.PackageManagerService$ReconciledPackage r3;
        com.android.server.pm.parsing.pkg.ParsedPackage r4;
        java.lang.String r5, $r20, $r35, $r39, $r40, $r46, $r52, $r56, $r57, $r58, $r59;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r6, $r71;
        int[] r7, $r14, $r16, $r17, $r25, $r53, $r74, $r77;
        int i0, $i1, $i4, $i5, $i6;
        java.util.Map $r8;
        java.util.Collection $r9;
        boolean $z0, $z1, $z2, $z3, $z7, $z8, z9;
        java.lang.Object $r10, $r19, $r36, $r42, $r80;
        com.android.server.pm.PackageManagerService$ScanResult $r11;
        com.android.server.pm.PackageManagerService$ScanRequest $r12;
        com.android.server.pm.PackageManagerService$PrepareResult $r13, $r30, $r32;
        com.android.server.pm.UserManagerService $r15;
        android.util.ArrayMap $r18, $r24, $r34, $r41, $r79;
        long $l2, $l3;
        com.android.server.pm.PackageSetting $r21, $r22, $r26, r66, r70, r72, r81;
        com.android.server.pm.Settings $r23, $r31, $r38, $r78;
        com.android.server.pm.AppsFilter $r27;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r28, $r54, $r55, r73;
        android.util.SparseArray $r29;
        com.android.server.pm.parsing.pkg.AndroidPackage $r33, r65, $r75;
        com.android.server.pm.PackageManagerService$InstallArgs $r37, $r61, $r76;
        java.util.Set $r43, $r45, $r48;
        java.lang.String[] $r44, $r47, $r49, $r60;
        android.util.ArraySet $r50;
        java.util.ArrayList $r51;
        com.android.server.pm.PackageManagerService$SystemDeleteException $r62, $r64, r68;
        java.lang.RuntimeException $r63;
        com.android.server.pm.PackageManagerService$DeletePackageAction r67;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$CommitRequest;

        $r8 = r1.<com.android.server.pm.PackageManagerService$CommitRequest: java.util.Map reconciledPackages>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.PackageManagerService$ReconciledPackage) $r10;

        $r11 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$ScanResult scanResult>;

        $r12 = $r11.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r4 = $r12.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        r5 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r6 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r13 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

        $z1 = $r13.<com.android.server.pm.PackageManagerService$PrepareResult: boolean replace>;

        if $z1 == 0 goto label17;

        $r18 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r65 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r19;

        $r20 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r66 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r20);

        $r21 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        $l2 = r66.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $r21.<com.android.server.pm.PackageSetting: long firstInstallTime> = $l2;

        $r22 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r22.<com.android.server.pm.PackageSetting: long lastUpdateTime> = $l3;

        $r28 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r27 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $r26 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        $r25 = r1.<com.android.server.pm.PackageManagerService$CommitRequest: int[] mAllUsers>;

        $r23 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = $r23.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r29 = virtualinvoke $r27.<com.android.server.pm.AppsFilter: android.util.SparseArray getVisibilityWhitelist(com.android.server.pm.PackageSetting,int[],android.util.ArrayMap)>($r26, $r25, $r24);

        $r28.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray broadcastWhitelist> = $r29;

        $r30 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

        $z2 = $r30.<com.android.server.pm.PackageManagerService$PrepareResult: boolean system>;

        if $z2 == 0 goto label03;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r65, 1);

        $z7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean disableSystemPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)>(r65);

        if $z7 != 0 goto label02;

        $r55 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r56 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r57 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $r58 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r65, r66);

        $r59 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r65, r66);

        $r60 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r58, $r59);

        $r61 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(java.lang.String,java.lang.String,java.lang.String[])>($r56, $r57, $r60);

        $r55.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args> = $r61;

        goto label17;

     label02:
        $r54 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r54.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args> = null;

        goto label17;

     label03:
        r67 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$DeletePackageAction deletePackageAction>;

        r7 = r1.<com.android.server.pm.PackageManagerService$CommitRequest: int[] mAllUsers>;

     label04:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void executeDeletePackageLIF(com.android.server.pm.PackageManagerService$DeletePackageAction,java.lang.String,boolean,int[],boolean,com.android.server.pm.parsing.pkg.ParsedPackage)>(r67, r5, 1, r7, 0, r4);

     label05:
        goto label09;

     label06:
        $r64 := @caughtexception;

        r68 = $r64;

        goto label08;

     label07:
        $r62 := @caughtexception;

        r68 = $r62;

     label08:
        $z8 = <android.os.Build: boolean IS_ENG>;

        if $z8 != 0 goto label16;

     label09:
        $z3 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z3 == 0 goto label10;

        i0 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $r51 = new java.util.ArrayList;

        specialinvoke $r51.<java.util.ArrayList: void <init>(int)>(1);

        $r52 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r51.<java.util.ArrayList: boolean add(java.lang.Object)>($r52);

        $r53 = newarray (int)[1];

        $r53[0] = i0;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>(0, 1, $r51, $r53, null);

        goto label10;

     label10:
        $r31 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r34 = $r31.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r32 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

        $r33 = $r32.<com.android.server.pm.PackageManagerService$PrepareResult: com.android.server.pm.parsing.pkg.AndroidPackage existingPackage>;

        $r35 = interfaceinvoke $r33.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r36 = virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r35);

        r70 = (com.android.server.pm.PackageSetting) $r36;

        $r37 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        $i4 = $r37.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $i5 = $i4 & 1;

        if $i5 != 0 goto label12;

        $r43 = r70.<com.android.server.pm.PackageSetting: java.util.Set mOldCodePaths>;

        if $r43 != null goto label11;

        $r50 = new android.util.ArraySet;

        specialinvoke $r50.<android.util.ArraySet: void <init>()>();

        r70.<com.android.server.pm.PackageSetting: java.util.Set mOldCodePaths> = $r50;

     label11:
        $r45 = r70.<com.android.server.pm.PackageSetting: java.util.Set mOldCodePaths>;

        $r44 = newarray (java.lang.String)[1];

        $r46 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r44[0] = $r46;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r45, $r44);

        $r47 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        if $r47 == null goto label13;

        $r48 = r70.<com.android.server.pm.PackageSetting: java.util.Set mOldCodePaths>;

        $r49 = interfaceinvoke r65.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r48, $r49);

        goto label13;

     label12:
        r70.<com.android.server.pm.PackageSetting: java.util.Set mOldCodePaths> = null;

     label13:
        $r71 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i6 = $r71.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i6 != 1 goto label17;

        $r38 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r39 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r72 = virtualinvoke $r38.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r39);

        if r72 == null goto label17;

        r73 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r41 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r40 = r72.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r42 = virtualinvoke $r41.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r40);

        if $r42 != null goto label14;

        z9 = 1;

        goto label15;

     label14:
        z9 = 0;

     label15:
        r73.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean removedForAllUsers> = z9;

        goto label17;

     label16:
        $r63 = new java.lang.RuntimeException;

        specialinvoke $r63.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected failure", r68);

        throw $r63;

     label17:
        $r74 = r1.<com.android.server.pm.PackageManagerService$CommitRequest: int[] mAllUsers>;

        $r75 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage commitReconciledScanResultLocked(com.android.server.pm.PackageManagerService$ReconciledPackage,int[])>(r3, $r74);

        $r76 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        $r77 = r1.<com.android.server.pm.PackageManagerService$CommitRequest: int[] mAllUsers>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSettingsLI(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageManagerService$InstallArgs,int[],com.android.server.pm.PackageManagerService$PackageInstalledInfo)>($r75, $r76, $r77, r6);

        $r78 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r79 = $r78.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r80 = virtualinvoke $r79.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r81 = (com.android.server.pm.PackageSetting) $r80;

        if r81 == null goto label18;

        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r16 = virtualinvoke $r15.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r17 = virtualinvoke r81.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r16, 1);

        r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers> = $r17;

        virtualinvoke r81.<com.android.server.pm.PackageSetting: void setUpdateAvailable(boolean)>(0);

     label18:
        $i1 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i1 != 1 goto label19;

        $r14 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>(r81, $r14);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateInstantAppInstallerLocked(java.lang.String)>(r5);

     label19:
        goto label01;

     label20:
        return;

        catch com.android.server.pm.PackageManagerService$SystemDeleteException from label03 to label04 with label07;
        catch com.android.server.pm.PackageManagerService$SystemDeleteException from label04 to label05 with label06;
    }

    private com.android.server.pm.parsing.pkg.AndroidPackage commitReconciledScanResultLocked(com.android.server.pm.PackageManagerService$ReconciledPackage, int[])
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$ReconciledPackage r1;
        com.android.server.pm.parsing.pkg.ParsedPackage r2, $r71;
        com.android.server.pm.parsing.pkg.AndroidPackage r3, r86;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, i10, i11, i12;
        android.os.UserHandle r4;
        java.lang.String r5, $r7, $r8, $r21, $r22, $r31, $r33, $r36, $r42, $r45, $r47, $r49, $r56, $r57, $r59, r89, r93;
        com.android.server.pm.PackageSetting r6, $r9, $r61, $r62, $r64, $r65, $r68, $r69, r77, r78, r80, r90;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7, $z10, z11;
        com.android.server.pm.PackageManagerService$InstallArgs $r10, $r46, $r53, $r82;
        com.android.server.pm.Settings $r12, $r14, $r26, $r34, $r48, $r55;
        java.util.ArrayList $r13, $r43;
        android.content.pm.PackageParser$SigningDetails $r15, $r40;
        com.android.server.pm.PackageSignatures $r16, $r41, $r52;
        java.util.List $r17, $r23, $r24, r79;
        com.android.server.pm.InstantAppRegistry $r18;
        java.lang.Object $r19, $r25, $r51;
        com.android.server.pm.Installer $r20;
        java.lang.StringBuilder $r27;
        com.android.server.pm.permission.PermissionSettings $r35;
        java.lang.Boolean $r37;
        com.android.server.pm.SharedUserSetting $r38, $r39, $r54, $r63, $r66, $r67, $r70, $r81;
        android.util.ArraySet $r44, $r60;
        android.util.ArrayMap $r50;
        com.android.server.pm.Installer$InstallerException $r73;
        int[] r74;
        com.android.server.pm.PackageManagerService$ScanResult r75;
        com.android.server.pm.PackageManagerService$ScanRequest r76;
        com.android.server.pm.InstallSource r83, r84;
        com.android.server.pm.KeySetManagerService r88;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$ReconciledPackage;

        r74 := @parameter1: int[];

        r75 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$ScanResult scanResult>;

        r76 = r75.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r2 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r7 = "android";

        $r8 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label01;

        $i9 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        $r71 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setVersionCode(int)>($i9);

        interfaceinvoke $r71.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setVersionCodeMajor(int)>(0);

     label01:
        r3 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.AndroidPackage oldPkg>;

        i0 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: int parseFlags>;

        i1 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: int scanFlags>;

        r77 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting oldPkgSetting>;

        r78 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting originalPkgSetting>;

        r4 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: android.os.UserHandle user>;

        r5 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: java.lang.String realPkgName>;

        r79 = r75.<com.android.server.pm.PackageManagerService$ScanResult: java.util.List changedAbiCodePath>;

        $r9 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        if $r9 == null goto label02;

        $r62 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        $r63 = $r62.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r63 == null goto label02;

        $r64 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        $r67 = $r64.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r65 = r75.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r66 = $r65.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r67 == $r66 goto label02;

        $r68 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        $r70 = $r68.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r69 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        virtualinvoke $r70.<com.android.server.pm.SharedUserSetting: boolean removePackage(com.android.server.pm.PackageSetting)>($r69);

     label02:
        $z10 = r75.<com.android.server.pm.PackageManagerService$ScanResult: boolean existingSettingCopied>;

        if $z10 == 0 goto label03;

        r80 = r76.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        $r61 = r75.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        virtualinvoke r80.<com.android.server.pm.PackageSetting: void updateFrom(com.android.server.pm.PackageSetting)>($r61);

        goto label04;

     label03:
        r80 = r75.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        if r78 == null goto label04;

        $r55 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r56 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getRealPackage()>();

        $r57 = r78.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r55.<com.android.server.pm.Settings: java.lang.String addRenamedPackageLPw(java.lang.String,java.lang.String)>($r56, $r57);

        $r60 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferredPackages>;

        $r59 = r78.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r60.<android.util.ArraySet: boolean add(java.lang.Object)>($r59);

        goto label04;

     label04:
        $r81 = r80.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r81 == null goto label05;

        $r54 = r80.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        virtualinvoke $r54.<com.android.server.pm.SharedUserSetting: void addPackage(com.android.server.pm.PackageSetting)>(r80);

     label05:
        $r10 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        if $r10 == null goto label06;

        $r53 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        $z7 = $r53.<com.android.server.pm.PackageManagerService$InstallArgs: boolean forceQueryableOverride>;

        if $z7 == 0 goto label06;

        r80.<com.android.server.pm.PackageSetting: boolean forceQueryableOverride> = 1;

     label06:
        $r82 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        if $r82 == null goto label09;

        $r46 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        r83 = $r46.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.InstallSource installSource>;

        $r47 = r83.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        if $r47 == null goto label07;

        $r48 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r50 = $r48.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r49 = r83.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        $r51 = virtualinvoke $r50.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r49);

        r6 = (com.android.server.pm.PackageSetting) $r51;

        r84 = r83;

        if r6 == null goto label08;

        $r52 = r6.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        r84 = virtualinvoke r83.<com.android.server.pm.InstallSource: com.android.server.pm.InstallSource setInitiatingPackageSignatures(com.android.server.pm.PackageSignatures)>($r52);

        goto label08;

     label07:
        r84 = r83;

     label08:
        virtualinvoke r80.<com.android.server.pm.PackageSetting: void setInstallSource(com.android.server.pm.InstallSource)>(r84);

        goto label09;

     label09:
        $i2 = r80.<com.android.server.pm.PackageSetting: int appId>;

        interfaceinvoke r2.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setUid(int)>($i2);

        r86 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.AndroidPackage hideAsFinal()>();

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r12.<com.android.server.pm.Settings: void writeUserRestrictionsLPw(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting)>(r80, r77);

        if r5 == null goto label10;

        $r44 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferredPackages>;

        $r45 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r44.<android.util.ArraySet: boolean add(java.lang.Object)>($r45);

     label10:
        $r13 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: java.util.ArrayList collectedSharedLibraryInfos>;

        if $r13 == null goto label11;

        $r43 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: java.util.ArrayList collectedSharedLibraryInfos>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void executeSharedLibrariesUpdateLPr(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.ArrayList,int[])>(r86, r80, null, null, $r43, r74);

        goto label11;

     label11:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r88 = $r14.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $z1 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: boolean removeAppKeySetData>;

        if $z1 == 0 goto label12;

        $r42 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r88.<com.android.server.pm.KeySetManagerService: void removeAppKeySetDataLPw(java.lang.String)>($r42);

     label12:
        $z2 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: boolean sharedUserSignaturesChanged>;

        if $z2 == 0 goto label13;

        $r38 = r80.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r37 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r38.<com.android.server.pm.SharedUserSetting: java.lang.Boolean signaturesChanged> = $r37;

        $r39 = r80.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r41 = $r39.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r40 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $r41.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r40;

     label13:
        $r16 = r80.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r15 = r1.<com.android.server.pm.PackageManagerService$ReconciledPackage: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $r16.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r15;

        $r17 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getAdoptPermissions()>();

        $z3 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z3 != 0 goto label17;

        $r23 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getAdoptPermissions()>();

        $i7 = interfaceinvoke $r23.<java.util.List: int size()>();

        i10 = $i7 - 1;

     label14:
        if i10 < 0 goto label16;

        $r24 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getAdoptPermissions()>();

        $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i10);

        r89 = (java.lang.String) $r25;

        $r26 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r90 = virtualinvoke $r26.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r89);

        if r90 == null goto label15;

        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage)>(r90, r86);

        if $z5 == 0 goto label15;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adopting permissions from ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r89);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r31 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r33);

        $r34 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r35 = $r34.<com.android.server.pm.Settings: com.android.server.pm.permission.PermissionSettings mPermissions>;

        $r36 = interfaceinvoke r86.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r35.<com.android.server.pm.permission.PermissionSettings: void transferPermissions(java.lang.String,java.lang.String)>(r89, $r36);

        goto label15;

     label15:
        i10 = i10 + -1;

        goto label14;

     label16:
        goto label17;

     label17:
        if r79 == null goto label23;

        $i5 = interfaceinvoke r79.<java.util.List: int size()>();

        if $i5 <= 0 goto label23;

        $i6 = interfaceinvoke r79.<java.util.List: int size()>();

        i11 = $i6 - 1;

     label18:
        if i11 < 0 goto label23;

        $r19 = interfaceinvoke r79.<java.util.List: java.lang.Object get(int)>(i11);

        r93 = (java.lang.String) $r19;

     label19:
        $r20 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r21 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getPreferredInstructionSet()>();

        $r22 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String getDexCodeInstructionSet(java.lang.String)>($r21);

        virtualinvoke $r20.<com.android.server.pm.Installer: void rmdex(java.lang.String,java.lang.String)>(r93, $r22);

     label20:
        goto label22;

     label21:
        $r73 := @caughtexception;

     label22:
        i11 = i11 + -1;

        goto label18;

     label23:
        if r4 != null goto label24;

        i12 = 0;

        goto label25;

     label24:
        i12 = virtualinvoke r4.<android.os.UserHandle: int getIdentifier()>();

     label25:
        $i3 = -2147483648 & i0;

        if $i3 == 0 goto label26;

        z11 = 1;

        goto label27;

     label26:
        z11 = 0;

     label27:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void commitPackageSettings(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int,boolean,com.android.server.pm.PackageManagerService$ReconciledPackage)>(r86, r3, r80, i1, z11, r1);

        $z4 = virtualinvoke r80.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i12);

        if $z4 == 0 goto label28;

        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i4 = r80.<com.android.server.pm.PackageSetting: int appId>;

        virtualinvoke $r18.<com.android.server.pm.InstantAppRegistry: void addInstantAppLPw(int,int)>(i12, $i4);

     label28:
        return r86;

        catch com.android.server.pm.Installer$InstallerException from label19 to label20 with label21;
    }

    private void commitSharedLibraryInfoLocked(android.content.pm.SharedLibraryInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.SharedLibraryInfo r1;
        java.lang.String r2, r13;
        android.util.ArrayMap $r3, $r6, $r9;
        java.lang.Object $r4;
        android.content.pm.VersionedPackage $r5;
        int $i0;
        long $l1;
        android.util.LongSparseArray $r8, r11, r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.SharedLibraryInfo;

        r2 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r11 = (android.util.LongSparseArray) $r4;

        r12 = r11;

        if r11 != null goto label1;

        $r8 = new android.util.LongSparseArray;

        specialinvoke $r8.<android.util.LongSparseArray: void <init>()>();

        r12 = $r8;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8);

     label1:
        $r5 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        r13 = virtualinvoke $r5.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: int getType()>();

        if $i0 != 2 goto label2;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mStaticLibsByDeclaringPackage>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r12);

     label2:
        $l1 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        virtualinvoke r12.<android.util.LongSparseArray: void put(long,java.lang.Object)>($l1, r1);

        return;
    }

    static void configurePackageComponents(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        android.util.ArrayMap r1;
        com.android.server.SystemConfig $r2;
        java.lang.String $r3, $r10, $r15, $r20, $r25;
        java.util.List $r4, $r5, $r6, $r7, $r8, $r13, $r18, $r23;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.Object $r9, $r11, $r14, $r16, $r19, $r21, $r24, $r26;
        boolean $z0, $z1, $z2, $z3;
        android.content.pm.parsing.component.ParsedActivity r28, r30;
        java.lang.Boolean r29, r31, r33, r35;
        android.content.pm.parsing.component.ParsedProvider r32;
        android.content.pm.parsing.component.ParsedService r34;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r1 = virtualinvoke $r2.<com.android.server.SystemConfig: android.util.ArrayMap getComponentsEnabledStates(java.lang.String)>($r3);

        if r1 != null goto label01;

        return;

     label01:
        $r4 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        $i0 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r4);

        i4 = $i0 - 1;

     label02:
        if i4 < 0 goto label04;

        $r23 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        $r24 = interfaceinvoke $r23.<java.util.List: java.lang.Object get(int)>(i4);

        r28 = (android.content.pm.parsing.component.ParsedActivity) $r24;

        $r25 = virtualinvoke r28.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getName()>();

        $r26 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r25);

        r29 = (java.lang.Boolean) $r26;

        if r29 == null goto label03;

        $z3 = virtualinvoke r29.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r28.<android.content.pm.parsing.component.ParsedActivity: android.content.pm.parsing.component.ParsedMainComponent setEnabled(boolean)>($z3);

     label03:
        i4 = i4 + -1;

        goto label02;

     label04:
        $r5 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getReceivers()>();

        $i1 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r5);

        i5 = $i1 - 1;

     label05:
        if i5 < 0 goto label07;

        $r18 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getReceivers()>();

        $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i5);

        r30 = (android.content.pm.parsing.component.ParsedActivity) $r19;

        $r20 = virtualinvoke r30.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getName()>();

        $r21 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r20);

        r31 = (java.lang.Boolean) $r21;

        if r31 == null goto label06;

        $z2 = virtualinvoke r31.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r30.<android.content.pm.parsing.component.ParsedActivity: android.content.pm.parsing.component.ParsedMainComponent setEnabled(boolean)>($z2);

     label06:
        i5 = i5 + -1;

        goto label05;

     label07:
        $r6 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProviders()>();

        $i2 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r6);

        i6 = $i2 - 1;

     label08:
        if i6 < 0 goto label10;

        $r13 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProviders()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i6);

        r32 = (android.content.pm.parsing.component.ParsedProvider) $r14;

        $r15 = virtualinvoke r32.<android.content.pm.parsing.component.ParsedProvider: java.lang.String getName()>();

        $r16 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r15);

        r33 = (java.lang.Boolean) $r16;

        if r33 == null goto label09;

        $z1 = virtualinvoke r33.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r32.<android.content.pm.parsing.component.ParsedProvider: android.content.pm.parsing.component.ParsedMainComponent setEnabled(boolean)>($z1);

     label09:
        i6 = i6 + -1;

        goto label08;

     label10:
        $r7 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getServices()>();

        $i3 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r7);

        i7 = $i3 - 1;

     label11:
        if i7 < 0 goto label13;

        $r8 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getServices()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i7);

        r34 = (android.content.pm.parsing.component.ParsedService) $r9;

        $r10 = virtualinvoke r34.<android.content.pm.parsing.component.ParsedService: java.lang.String getName()>();

        $r11 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        r35 = (java.lang.Boolean) $r11;

        if r35 == null goto label12;

        $z0 = virtualinvoke r35.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r34.<android.content.pm.parsing.component.ParsedService: android.content.pm.parsing.component.ParsedMainComponent setEnabled(boolean)>($z0);

     label12:
        i7 = i7 + -1;

        goto label11;

     label13:
        return;
    }

    private android.content.pm.ResolveInfo createForwardingResolveInfo(com.android.server.pm.CrossProfileIntentFilter, android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.CrossProfileIntentFilter r1;
        java.lang.String r2;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        com.android.server.pm.ComponentResolver $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.content.pm.ResolveInfo $r5, $r8;
        android.content.pm.ActivityInfo $r6;
        android.content.pm.ApplicationInfo $r7;
        android.content.Intent r9;
        java.util.List r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.CrossProfileIntentFilter;

        r9 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        i5 := @parameter3: int;

        i0 := @parameter4: int;

        i1 = virtualinvoke r1.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r10 = virtualinvoke $r3.<com.android.server.pm.ComponentResolver: java.util.List queryActivities(android.content.Intent,java.lang.String,int,int)>(r9, r2, i5, i1);

        if r10 == null goto label3;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isUserEnabled(int)>(i1);

        if $z0 == 0 goto label3;

        $i2 = interfaceinvoke r10.<java.util.List: int size()>();

        i6 = $i2 - 1;

     label1:
        if i6 < 0 goto label3;

        $r4 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i6);

        $r5 = (android.content.pm.ResolveInfo) $r4;

        $r6 = $r5.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = $r6.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r7.<android.content.pm.ApplicationInfo: int flags>;

        $i4 = $i3 & 1073741824;

        if $i4 != 0 goto label2;

        $r8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo createForwardingResolveInfoUnchecked(android.content.IntentFilter,int,int)>(r1, i0, i1);

        return $r8;

     label2:
        i6 = i6 + -1;

        goto label1;

     label3:
        return null;
    }

    private android.content.pm.ResolveInfo createForwardingResolveInfoUnchecked(android.content.IntentFilter, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        long l2;
        boolean z0;
        android.content.pm.ResolveInfo $r2;
        com.android.server.pm.UserManagerService $r3;
        android.content.pm.UserInfo $r4;
        android.content.ComponentName $r5;
        android.content.pm.ApplicationInfo $r6;
        java.lang.String $r7, r10;
        java.lang.Throwable $r8;
        android.content.IntentFilter r9;
        android.content.pm.ActivityInfo r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new android.content.pm.ResolveInfo;

        specialinvoke $r2.<android.content.pm.ResolveInfo: void <init>()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r4 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(i1);

        z0 = virtualinvoke $r4.<android.content.pm.UserInfo: boolean isManagedProfile()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        if z0 == 0 goto label3;

        r10 = <com.android.internal.app.IntentForwarderActivity: java.lang.String FORWARD_INTENT_TO_MANAGED_PROFILE>;

        goto label4;

     label3:
        r10 = <com.android.internal.app.IntentForwarderActivity: java.lang.String FORWARD_INTENT_TO_PARENT>;

     label4:
        $r5 = new android.content.ComponentName;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        $r7 = $r6.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        specialinvoke $r5.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r7, r10);

        r11 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>($r5, 0, i0);

        if z0 != 0 goto label5;

        r11.<android.content.pm.ActivityInfo: int showUserIcon> = i1;

        $r2.<android.content.pm.ResolveInfo: boolean noResourceId> = 1;

     label5:
        $r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = r11;

        $r2.<android.content.pm.ResolveInfo: int priority> = 0;

        $r2.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        $r2.<android.content.pm.ResolveInfo: int match> = 0;

        $r2.<android.content.pm.ResolveInfo: boolean isDefault> = 1;

        $r2.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = r9;

        $r2.<android.content.pm.ResolveInfo: int targetUserId> = i1;

        return $r2;

     label6:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    private com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$InstallParams r1;
        com.android.server.pm.PackageManagerService$MoveInfo $r2;
        com.android.server.pm.PackageManagerService$FileInstallArgs $r3;
        com.android.server.pm.PackageManagerService$MoveInstallArgs $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$InstallParams;

        $r2 = r1.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$MoveInfo move>;

        if $r2 == null goto label1;

        $r4 = new com.android.server.pm.PackageManagerService$MoveInstallArgs;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$MoveInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>(r0, r1);

        return $r4;

     label1:
        $r3 = new com.android.server.pm.PackageManagerService$FileInstallArgs;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>(r0, r1);

        return $r3;
    }

    private com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(java.lang.String, java.lang.String, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        java.lang.String[] r3;
        com.android.server.pm.PackageManagerService$FileInstallArgs $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        $r4 = new com.android.server.pm.PackageManagerService$FileInstallArgs;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String,java.lang.String[])>(r0, r1, r2, r3);

        return $r4;
    }

    private com.android.server.pm.PackageManagerService$PackageInstalledInfo createPackageInstalledInfo(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r2 = new com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        specialinvoke $r2.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void <init>()>();

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setReturnCode(int)>(i0);

        $r2.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid> = -1;

        $r2.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg> = null;

        $r2.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo> = null;

        return $r2;
    }

    private java.io.File decompressPackage(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.File r1, $r6, r29, r44, r47;
        int i0, $i2, $i3, $i4, $i5, $i6, i8, i9, i10, i11, i12;
        boolean $z0, $z1;
        java.lang.String $r5, $r8, $r13, $r18, $r25, r26, r27, r30, r31;
        java.lang.Throwable $r14, $r15, $r19;
        java.io.File[] r28;
        com.android.internal.content.NativeLibraryHelper$Handle r37, r38, r39;
        java.lang.StringBuilder r45, r46, r48, r49;
        android.system.ErrnoException r50;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r26 := @parameter0: java.lang.String;

        r27 := @parameter1: java.lang.String;

        r28 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.io.File[] getCompressedFiles(java.lang.String)>(r27);

        if r28 == null goto label56;

        $i2 = lengthof r28;

        if $i2 != 0 goto label01;

        goto label56;

     label01:
        $r6 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(null);

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.io.File getNextCodePath(java.io.File,java.lang.String)>($r6, r26);

        i8 = 1;

        i9 = 1;

     label02:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void makeDirRecursive(java.io.File,int)>(r1, 493);

     label03:
        i9 = 1;

     label04:
        i0 = lengthof r28;

     label05:
        i10 = 0;

     label06:
        i9 = i8;

        if i10 >= i0 goto label32;

        r29 = r28[i10];

        i9 = i8;

     label07:
        r30 = virtualinvoke r29.<java.io.File: java.lang.String getName()>();

     label08:
        i9 = i8;

     label09:
        $i3 = virtualinvoke r30.<java.lang.String: int length()>();

        $r8 = ".gz";

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i5 = $i3 - $i4;

        r31 = virtualinvoke r30.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label10:
        i9 = i8;

     label11:
        r44 = new java.io.File;

     label12:
        i9 = i8;

     label13:
        specialinvoke r44.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r31);

     label14:
        i9 = i8;

     label15:
        i8 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int decompressFile(java.io.File,java.io.File)>(r29, r44);

     label16:
        if i8 == 1 goto label31;

        i9 = i8;

     label17:
        r45 = new java.lang.StringBuilder;

     label18:
        i9 = i8;

     label19:
        specialinvoke r45.<java.lang.StringBuilder: void <init>()>();

     label20:
        i9 = i8;

     label21:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decompress; pkg: ");

     label22:
        i9 = i8;

     label23:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

     label24:
        i9 = i8;

     label25:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", file: ");

     label26:
        i9 = i8;

     label27:
        virtualinvoke r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

     label28:
        i9 = i8;

     label29:
        $r13 = virtualinvoke r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r13);

     label30:
        i9 = i8;

        goto label32;

     label31:
        i10 = i10 + 1;

        goto label06;

     label32:
        goto label34;

     label33:
        $r19 := @caughtexception;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decompress; pkg: ");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", err: ");

        r50 = (android.system.ErrnoException) $r19;

        $i6 = r50.<android.system.ErrnoException: int errno>;

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r25 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r25);

     label34:
        i11 = i9;

        if i9 != 1 goto label53;

        r47 = new java.io.File;

        specialinvoke r47.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "lib");

        r37 = null;

        r38 = null;

     label35:
        r39 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>(r1);

     label36:
        r38 = r39;

        r37 = r39;

     label37:
        i12 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String,boolean)>(r39, r47, null, 0);

     label38:
        r37 = r39;

     label39:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r37);

        i11 = i12;

        goto label53;

     label40:
        $r14 := @caughtexception;

        goto label52;

     label41:
        $r15 := @caughtexception;

        r38 = r37;

     label42:
        r48 = new java.lang.StringBuilder;

     label43:
        r38 = r37;

     label44:
        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

     label45:
        r38 = r37;

     label46:
        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to extract native libraries; pkg: ");

     label47:
        r38 = r37;

     label48:
        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

     label49:
        r38 = r37;

     label50:
        $r18 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r18);

     label51:
        i12 = -110;

        goto label39;

     label52:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r38);

        throw $r14;

     label53:
        if i11 == 1 goto label55;

        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label54;

        return null;

     label54:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeCodePathLI(java.io.File)>(r1);

        return null;

     label55:
        return r1;

     label56:
        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_COMPRESSION>;

        if $z0 == 0 goto label57;

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No files to decompress: ");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r5 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r5);

        goto label57;

     label57:
        return null;

        catch android.system.ErrnoException from label02 to label03 with label33;
        catch android.system.ErrnoException from label04 to label05 with label33;
        catch android.system.ErrnoException from label07 to label08 with label33;
        catch android.system.ErrnoException from label09 to label10 with label33;
        catch android.system.ErrnoException from label11 to label12 with label33;
        catch android.system.ErrnoException from label13 to label14 with label33;
        catch android.system.ErrnoException from label15 to label16 with label33;
        catch android.system.ErrnoException from label17 to label18 with label33;
        catch android.system.ErrnoException from label19 to label20 with label33;
        catch android.system.ErrnoException from label21 to label22 with label33;
        catch android.system.ErrnoException from label23 to label24 with label33;
        catch android.system.ErrnoException from label25 to label26 with label33;
        catch android.system.ErrnoException from label27 to label28 with label33;
        catch android.system.ErrnoException from label29 to label30 with label33;
        catch java.io.IOException from label35 to label36 with label41;
        catch java.lang.Throwable from label35 to label36 with label40;
        catch java.io.IOException from label37 to label38 with label41;
        catch java.lang.Throwable from label37 to label38 with label40;
        catch java.lang.Throwable from label42 to label43 with label40;
        catch java.lang.Throwable from label44 to label45 with label40;
        catch java.lang.Throwable from label46 to label47 with label40;
        catch java.lang.Throwable from label48 to label49 with label40;
        catch java.lang.Throwable from label50 to label51 with label40;
    }

    private void deleteInstalledPackageLIF(com.android.server.pm.PackageSetting, boolean, int, int[], com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1;
        int i0, $i1;
        int[] r1;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r2;
        java.lang.Object r3;
        java.lang.String $r4, $r5, $r6, $r7;
        java.lang.String[] $r8;
        com.android.server.pm.PackageManagerService$InstallArgs $r9;
        java.lang.Throwable $r10;
        com.android.server.pm.PackageSetting r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: com.android.server.pm.PackageSetting;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r1 := @parameter3: int[];

        r2 := @parameter4: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        z1 := @parameter5: boolean;

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

        if r2 == null goto label2;

     label1:
        $i1 = r11.<com.android.server.pm.PackageSetting: int appId>;

        r2.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid> = $i1;

     label2:
        exitmonitor r3;

     label3:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageDataLIF(com.android.server.pm.PackageSetting,int[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,boolean)>(r11, r1, r2, i0, z1);

        if z0 == 0 goto label4;

        if r2 == null goto label4;

        $r6 = r11.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

        $r7 = r11.<com.android.server.pm.PackageSetting: java.lang.String resourcePathString>;

        $r5 = r11.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r4 = r11.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        $r8 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r5, $r4);

        $r9 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgsForExisting(java.lang.String,java.lang.String,java.lang.String[])>($r6, $r7, $r8);

        r2.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args> = $r9;

     label4:
        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r3;

     label7:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void deletePackageIfUnusedLPr(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        com.android.server.pm.UserManagerService $r6;
        int[] $r7;
        boolean $z0;
        com.android.server.pm._$$Lambda$PackageManagerService$2LJuxrdU5DWIRpDkTbzKA8U7iIc $r8;
        android.os.Handler $r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.pm.PackageSetting) $r5;

        if r2 != null goto label1;

        return;

     label1:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r7 = virtualinvoke $r6.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $z0 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean isAnyInstalled(int[])>($r7);

        if $z0 != 0 goto label2;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r8 = new com.android.server.pm._$$Lambda$PackageManagerService$2LJuxrdU5DWIRpDkTbzKA8U7iIc;

        specialinvoke $r8.<com.android.server.pm._$$Lambda$PackageManagerService$2LJuxrdU5DWIRpDkTbzKA8U7iIc: void <init>(com.android.server.pm.PackageManagerService,java.lang.String)>(r0, r1);

        virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r8);

     label2:
        return;
    }

    private boolean deletePackageLIF(java.lang.String, android.os.UserHandle, boolean, int[], int, com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean, com.android.server.pm.parsing.pkg.ParsedPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1;
        int[] r1;
        int i0;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r2;
        com.android.server.pm.parsing.pkg.ParsedPackage r3;
        java.lang.Object r4, $r7;
        com.android.server.pm.PackageSetting r5, r16;
        com.android.server.pm.Settings $r6, $r8;
        java.lang.Throwable $r9, $r10, $r11, r19;
        com.android.server.pm.PackageManagerService$SystemDeleteException $r12;
        java.lang.String r13;
        android.os.UserHandle r14;
        android.util.ArrayMap r15;
        com.android.server.pm.PackageManagerService$DeletePackageAction r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: android.os.UserHandle;

        z0 := @parameter2: boolean;

        r1 := @parameter3: int[];

        i0 := @parameter4: int;

        r2 := @parameter5: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        z1 := @parameter6: boolean;

        r3 := @parameter7: com.android.server.pm.parsing.pkg.ParsedPackage;

        r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r15 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

     label02:
        $r7 = virtualinvoke r15.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r5 = (com.android.server.pm.PackageSetting) $r7;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r16 = virtualinvoke $r8.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(com.android.server.pm.PackageSetting)>(r5);

     label03:
        r17 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$DeletePackageAction mayDeletePackageLocked(com.android.server.pm.PackageManagerService$PackageRemovedInfo,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,int,android.os.UserHandle)>(r2, r5, r16, i0, r14);

        exitmonitor r4;

     label04:
        if r17 != null goto label05;

        return 0;

     label05:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void executeDeletePackageLIF(com.android.server.pm.PackageManagerService$DeletePackageAction,java.lang.String,boolean,int[],boolean,com.android.server.pm.parsing.pkg.ParsedPackage)>(r17, r13, z0, r1, z1, r3);

     label06:
        return 1;

     label07:
        $r12 := @caughtexception;

        return 0;

     label08:
        $r10 := @caughtexception;

        r19 = $r10;

        goto label10;

     label09:
        $r11 := @caughtexception;

        r19 = $r11;

     label10:
        exitmonitor r4;

     label11:
        throw r19;

     label12:
        $r9 := @caughtexception;

        r19 = $r9;

        goto label10;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch com.android.server.pm.PackageManagerService$SystemDeleteException from label05 to label06 with label07;
        catch java.lang.Throwable from label10 to label11 with label12;
    }

    private void deletePackageVersionedInternal(android.content.pm.VersionedPackage, android.content.pm.IPackageDeleteObserver2, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.IPackageDeleteObserver2 r1;
        int i0, i1, i2, i4, $i7, $i8, $i9;
        boolean z0, $z1, $z3, $z6, z8, z9, $z10;
        java.lang.String r2, r3, $r11;
        long l3, $l5;
        android.content.Context r4, $r5;
        java.lang.StringBuilder $r8;
        com.android.server.pm._$$Lambda$PackageManagerService$DGKtboZ8nQsf5vNtV6OV1mKlUzI $r12;
        android.os.Handler $r13, $r15, $r17, $r20;
        com.android.server.pm._$$Lambda$PackageManagerService$xOTF_2VN_vZVAwIrcTsru_Pzgtk $r14;
        com.android.server.pm._$$Lambda$PackageManagerService$oKk4bZ54P3wJ25u1SNq04m4_YSM $r16;
        com.android.server.pm.UserManagerService $r18;
        com.android.server.pm._$$Lambda$PackageManagerService$PdxdtDp8dTEapvZRK8270C1IYbU $r19;
        java.lang.Throwable $r21, $r22, r27;
        android.content.pm.VersionedPackage r23;
        java.lang.Object r24;
        int[] r25;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r23 := @parameter0: android.content.pm.VersionedPackage;

        r1 := @parameter1: android.content.pm.IPackageDeleteObserver2;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z8 := @parameter4: boolean;

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_PACKAGES", null);

        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i2, i0);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r23);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $l5 = virtualinvoke r23.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        staticinvoke <com.android.internal.util.Preconditions: long checkArgumentInRange(long,long,long,java.lang.String)>($l5, -1L, 9223372036854775807L, "versionCode must be >= -1");

        r2 = virtualinvoke r23.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        l3 = virtualinvoke r23.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        r24 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r24;

     label01:
        r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>(r2, l3);

        exitmonitor r24;

     label02:
        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isOrphaned(java.lang.String)>(r3);

        if $z1 != 0 goto label03;

        if z8 != 0 goto label03;

        $z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerAllowedToSilentlyUninstall(int,java.lang.String)>(i4, r3);

        if $z6 != 0 goto label03;

        $r20 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r19 = new com.android.server.pm._$$Lambda$PackageManagerService$PdxdtDp8dTEapvZRK8270C1IYbU;

        specialinvoke $r19.<com.android.server.pm._$$Lambda$PackageManagerService$PdxdtDp8dTEapvZRK8270C1IYbU: void <init>(java.lang.String,android.content.pm.IPackageDeleteObserver2)>(r2, r1);

        virtualinvoke $r20.<android.os.Handler: boolean post(java.lang.Runnable)>($r19);

        return;

     label03:
        $i9 = i1 & 2;

        if $i9 == 0 goto label04;

        z9 = 1;

        goto label05;

     label04:
        z9 = 0;

     label05:
        if z9 == 0 goto label06;

        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r25 = virtualinvoke $r18.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        goto label07;

     label06:
        r25 = newarray (int)[1];

        r25[0] = i0;

     label07:
        $i7 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i4);

        if $i7 != i0 goto label08;

        if z9 == 0 goto label09;

        $i8 = lengthof r25;

        if $i8 <= 1 goto label09;

     label08:
        r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deletePackage for user ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r11);

     label09:
        $z10 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(i0, "no_uninstall_apps");

        if $z10 == 0 goto label10;

        $r17 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r16 = new com.android.server.pm._$$Lambda$PackageManagerService$oKk4bZ54P3wJ25u1SNq04m4_YSM;

        specialinvoke $r16.<com.android.server.pm._$$Lambda$PackageManagerService$oKk4bZ54P3wJ25u1SNq04m4_YSM: void <init>(android.content.pm.IPackageDeleteObserver2,java.lang.String)>(r1, r2);

        virtualinvoke $r17.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

        return;

     label10:
        if z9 != 0 goto label11;

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean getBlockUninstallForUser(java.lang.String,int)>(r3, i0);

        if $z3 == 0 goto label11;

        $r15 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r14 = new com.android.server.pm._$$Lambda$PackageManagerService$xOTF_2VN_vZVAwIrcTsru_Pzgtk;

        specialinvoke $r14.<com.android.server.pm._$$Lambda$PackageManagerService$xOTF_2VN_vZVAwIrcTsru_Pzgtk: void <init>(android.content.pm.IPackageDeleteObserver2,java.lang.String)>(r1, r2);

        virtualinvoke $r15.<android.os.Handler: boolean post(java.lang.Runnable)>($r14);

        return;

     label11:
        $r13 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r12 = new com.android.server.pm._$$Lambda$PackageManagerService$DGKtboZ8nQsf5vNtV6OV1mKlUzI;

        specialinvoke $r12.<com.android.server.pm._$$Lambda$PackageManagerService$DGKtboZ8nQsf5vNtV6OV1mKlUzI: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,boolean,boolean,long,int,int,int[],android.content.pm.IPackageDeleteObserver2,java.lang.String)>(r0, r3, i2, z0, z9, l3, i0, i1, r25, r1, r2);

        virtualinvoke $r13.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

        return;

     label12:
        $r22 := @caughtexception;

        r27 = $r22;

     label13:
        exitmonitor r24;

     label14:
        throw r27;

     label15:
        $r21 := @caughtexception;

        r27 = $r21;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    private void deleteSystemPackageLIF(com.android.server.pm.PackageManagerService$DeletePackageAction, com.android.server.pm.PackageSetting, int[], int, com.android.server.pm.PackageManagerService$PackageRemovedInfo, boolean) throws com.android.server.pm.PackageManagerService$SystemDeleteException
    {
        com.android.server.pm.PackageManagerService r0;
        int[] r1, $r14, r33;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r2;
        boolean z0, $z1, $z2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3, $r6, $r9, $r25;
        com.android.server.pm.PackageSetting r4, r31, r34, r39;
        java.lang.String r5, $r12, $r18, $r21, $r23, $r28;
        long $l1, $l2;
        byte $b3;
        com.android.server.pm.permission.PermissionsState $r7;
        com.android.server.pm.Settings $r10, $r26;
        android.util.ArrayMap $r11, $r27;
        java.lang.Object $r13, $r29, r32;
        java.lang.Throwable $r15, $r24;
        com.android.server.pm.PackageManagerException $r16;
        com.android.server.pm.PackageManagerService$DeletePackageAction r30;
        int i5, i6;
        java.lang.StringBuilder r37;
        com.android.server.pm.PackageManagerService$SystemDeleteException r38;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r30 := @parameter0: com.android.server.pm.PackageManagerService$DeletePackageAction;

        r31 := @parameter1: com.android.server.pm.PackageSetting;

        r1 := @parameter2: int[];

        i5 := @parameter3: int;

        r2 := @parameter4: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        z0 := @parameter5: boolean;

        if r1 == null goto label01;

        if r2 == null goto label01;

        $r14 = r2.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] origUsers>;

        if $r14 == null goto label01;

        goto label01;

     label01:
        r3 = r31.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r4 = r30.<com.android.server.pm.PackageManagerService$DeletePackageAction: com.android.server.pm.PackageSetting disabledPs>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", "Deleting system pkg from data partition");

        if r2 == null goto label02;

        r2.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isRemovedPackageSystemUpdate> = 1;

     label02:
        $l2 = r4.<com.android.server.pm.PackageSetting: long versionCode>;

        $l1 = r31.<com.android.server.pm.PackageSetting: long versionCode>;

        $b3 = $l2 cmp $l1;

        if $b3 >= 0 goto label03;

        i6 = i5 & -2;

        goto label04;

     label03:
        i6 = i5 | 1;

     label04:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void deleteInstalledPackageLIF(com.android.server.pm.PackageSetting,boolean,int,int[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(r31, 1, i6, r1, r2, z0);

        r32 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r32;

     label05:
        $r6 = r4.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enableSystemPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)>($r6);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removeNativeBinariesLI(com.android.server.pm.PackageSetting)>(r31);

        exitmonitor r32;

     label06:
        r5 = r4.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

     label07:
        if r2 != null goto label08;

        r33 = null;

        goto label09;

     label08:
        r33 = r2.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] origUsers>;

     label09:
        $r7 = virtualinvoke r31.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage installPackageFromSystemLIF(java.lang.String,int[],int[],com.android.server.pm.permission.PermissionsState,boolean)>(r5, r1, r33, $r7, z0);

     label10:
        $r9 = r4.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z1 = interfaceinvoke $r9.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z1 == 0 goto label11;

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r12 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r13 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r12);

        r34 = (com.android.server.pm.PackageSetting) $r13;

        if r34 == null goto label11;

        virtualinvoke r34.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(2, 0, "android");

     label11:
        return;

     label12:
        $r24 := @caughtexception;

        goto label15;

     label13:
        $r16 := @caughtexception;

     label14:
        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore system package:");

        $r18 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = virtualinvoke $r16.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        r38 = new com.android.server.pm.PackageManagerService$SystemDeleteException;

        specialinvoke r38.<com.android.server.pm.PackageManagerService$SystemDeleteException: void <init>(com.android.server.pm.PackageManagerException,com.android.server.pm.PackageManagerService$1)>($r16, null);

        throw r38;

     label15:
        $r25 = r4.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z2 = interfaceinvoke $r25.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z2 == 0 goto label16;

        $r26 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r27 = $r26.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r28 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r29 = virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r28);

        r39 = (com.android.server.pm.PackageSetting) $r29;

        if r39 == null goto label16;

        virtualinvoke r39.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(2, 0, "android");

     label16:
        throw $r24;

     label17:
        $r15 := @caughtexception;

     label18:
        exitmonitor r32;

     label19:
        throw $r15;

        catch java.lang.Throwable from label05 to label06 with label17;
        catch com.android.server.pm.PackageManagerException from label06 to label07 with label13;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch com.android.server.pm.PackageManagerException from label08 to label09 with label13;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch com.android.server.pm.PackageManagerException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label14 to label15 with label12;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void destroyAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, i1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package was null!", $r2);

        return;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i0, i1);

        return;
    }

    private void destroyAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, i5;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.String $r5, $r8, $r9, $r11, $r13;
        java.lang.Object $r6, r16;
        com.android.server.pm.Installer $r7;
        com.android.server.pm.dex.DexManager $r10;
        com.android.server.pm.Installer$InstallerException $r12;
        java.lang.Throwable $r14;
        com.android.server.pm.parsing.pkg.AndroidPackage r15;
        int[] r17;
        long l6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r16 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = interfaceinvoke r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r1 = (com.android.server.pm.PackageSetting) $r6;

        exitmonitor r16;

     label02:
        r17 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int[] resolveUserIds(int)>(i0);

        i2 = lengthof r17;

        i5 = 0;

     label03:
        if i5 >= i2 goto label09;

        i3 = r17[i5];

        if r1 == null goto label04;

        l6 = virtualinvoke r1.<com.android.server.pm.PackageSetting: long getCeDataInode(int)>(i3);

        goto label05;

     label04:
        l6 = 0L;

     label05:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r8 = interfaceinvoke r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        $r9 = interfaceinvoke r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r7.<com.android.server.pm.Installer: void destroyAppData(java.lang.String,java.lang.String,int,int,long)>($r8, $r9, i3, i1, l6);

     label06:
        goto label08;

     label07:
        $r12 := @caughtexception;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r13);

     label08:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r11 = interfaceinvoke r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r10.<com.android.server.pm.dex.DexManager: void notifyPackageDataDestroyed(java.lang.String,int)>($r11, i0);

        i5 = i5 + 1;

        goto label03;

     label09:
        return;

     label10:
        $r14 := @caughtexception;

     label11:
        exitmonitor r16;

     label12:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch com.android.server.pm.Installer$InstallerException from label05 to label06 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void destroyAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        if r1 != null goto label1;

        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package was null!", $r2);

        return;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppProfilesLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        return;
    }

    private void destroyAppProfilesLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.Installer $r1;
        java.lang.String $r2, $r4;
        com.android.server.pm.Installer$InstallerException $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r2 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r1.<com.android.server.pm.Installer: void destroyAppProfiles(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r4);

     label4:
        return;

        catch com.android.server.pm.Installer$InstallerException from label1 to label2 with label3;
    }

    private void disableSkuSpecificApps()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1, r11;
        int i0, $i1, i2;
        android.content.Context $r2, $r4;
        android.content.res.Resources $r3, $r5;
        boolean $z0, $z1, $z2, $z4;
        com.android.server.pm.PackageManagerService$Injector $r6;
        android.os.UserManagerInternal $r7;
        java.util.List $r8;
        java.lang.Object $r9;
        android.content.pm.UserInfo $r10;
        java.lang.String r12, r13;
        java.util.Iterator r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236013);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r11 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236012);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        r12 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.boot.hardware.sku");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r12);

        if $z1 != 0 goto label2;

        $z4 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r11, r12);

        if $z4 == 0 goto label2;

        return;

     label2:
        i0 = lengthof r1;

        i2 = 0;

     label3:
        if i2 >= i0 goto label6;

        r13 = r1[i2];

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void setSystemAppHiddenUntilInstalled(java.lang.String,boolean)>(r13, 1);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $r8 = virtualinvoke $r7.<android.os.UserManagerInternal: java.util.List getUsers(boolean)>(0);

        r14 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.content.pm.UserInfo) $r9;

        $i1 = $r10.<android.content.pm.UserInfo: int id>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean setSystemAppInstallState(java.lang.String,boolean,int)>(r13, 0, $i1);

        goto label4;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        return;
    }

    private boolean disableSystemPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.Settings $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r2.<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String,boolean)>($r3, 1);

        return $z0;
    }

    private void doSendBroadcast(android.app.IActivityManager, java.lang.String, java.lang.String, android.os.Bundle, int, java.lang.String, android.content.IIntentReceiver, int[], boolean, android.util.SparseArray)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, r4;
        android.os.Bundle r3;
        int i0, i1, i2, i3, $i5, $i6, $i7, i8, $i9;
        android.content.IIntentReceiver r5;
        int[] r6, r18;
        boolean z0, z1;
        android.util.SparseArray r7;
        android.app.ActivityManagerInternal r9;
        android.content.Intent $r10;
        java.lang.Object $r13;
        android.app.IActivityManager r17;
        android.net.Uri r19;
        java.lang.String[] r20;
        com.android.server.pm.PackageManagerService$Injector $r21;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r17 := @parameter0: android.app.IActivityManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        i0 := @parameter4: int;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: android.content.IIntentReceiver;

        r6 := @parameter7: int[];

        z0 := @parameter8: boolean;

        r7 := @parameter9: android.util.SparseArray;

        i1 = lengthof r6;

        i8 = 0;

     label01:
        if i8 >= i1 goto label13;

        i2 = r6[i8];

        r18 = null;

        if r2 == null goto label02;

        r19 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", r2, null);

        goto label03;

     label02:
        r19 = null;

     label03:
        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>(r1, r19);

        if z0 == 0 goto label04;

        r20 = <com.android.server.pm.PackageManagerService: java.lang.String[] INSTANT_APP_BROADCAST_PERMISSION>;

        goto label05;

     label04:
        r20 = null;

     label05:
        if r3 == null goto label06;

        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r3);

     label06:
        if r4 == null goto label07;

        virtualinvoke $r10.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r4);

     label07:
        i3 = virtualinvoke $r10.<android.content.Intent: int getIntExtra(java.lang.String,int)>("android.intent.extra.UID", -1);

        if i3 <= 0 goto label08;

        $i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i3);

        if $i5 == i2 goto label08;

        $i6 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i3);

        $i7 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i2, $i6);

        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.UID", $i7);

        goto label08;

     label08:
        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.user_handle", i2);

        $i9 = i0 | 67108864;

        virtualinvoke $r10.<android.content.Intent: android.content.Intent addFlags(int)>($i9);

        $r21 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r9 = virtualinvoke $r21.<com.android.server.pm.PackageManagerService$Injector: android.app.ActivityManagerInternal getActivityManagerInternal()>();

        if r5 == null goto label09;

        z1 = 1;

        goto label10;

     label09:
        z1 = 0;

     label10:
        if r7 != null goto label11;

        goto label12;

     label11:
        $r13 = virtualinvoke r7.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r18 = (int[]) $r13;

     label12:
        virtualinvoke r9.<android.app.ActivityManagerInternal: int broadcastIntent(android.content.Intent,android.content.IIntentReceiver,java.lang.String[],boolean,int,int[])>($r10, r5, r20, z1, i2, r18);

        i8 = i8 + 1;

        goto label01;

     label13:
        return;
    }

    private java.lang.String[] dropNonSystemPackages(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1, $r5, $r7;
        java.util.function.Predicate $r2;
        com.android.server.pm.'-$$Lambda$PackageManagerService$U47f17sf-Z0eef3W2xgzUB-ecR4' $r3;
        java.lang.Object[] $r4, $r6;
        java.util.function.IntFunction r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String[];

        $r3 = <com.android.server.pm._$$Lambda$PackageManagerService$U47f17sf_Z0eef3W2xgzUB_ecR4: com.android.server.pm.'-$$Lambda$PackageManagerService$U47f17sf-Z0eef3W2xgzUB-ecR4' INSTANCE>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: java.util.function.Predicate mIsSystemPackage>;

        r8 = (java.util.function.IntFunction) $r3;

        $r4 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] filter(java.lang.Object[],java.util.function.IntFunction,java.util.function.Predicate)>(r1, r8, $r2);

        $r5 = (java.lang.String[]) $r4;

        $r6 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] emptyIfNull(java.lang.Object[],java.lang.Class)>($r5, class "Ljava/lang/String;");

        $r7 = (java.lang.String[]) $r6;

        return $r7;
    }

    private void dumpCompilerStatsLPr(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r24;
        android.util.ArrayMap $r5, $r16;
        java.lang.Object $r6, $r17, r25;
        java.lang.String $r9, $r12, $r14, $r21, r23;
        java.io.PrintWriter r22;
        java.util.Iterator r27;
        boolean $z0;
        com.android.server.pm.CompilerStats$PackageStats r29;
        com.android.internal.util.IndentingPrintWriter r30;
        java.lang.StringBuilder r31, r32;
        java.util.Collection r33;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r22 := @parameter0: java.io.PrintWriter;

        r23 := @parameter1: java.lang.String;

        r30 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r30.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r22, "  ");

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Compiler stats:");

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        if r23 == null goto label2;

        $r16 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r17 = virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r23);

        r24 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r17;

        if r24 == null goto label1;

        r25 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r24);

        goto label3;

     label1:
        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find package: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r21 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r21);

        return;

     label2:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        r25 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Collection values()>();

     label3:
        r33 = (java.util.Collection) r25;

        r27 = interfaceinvoke r33.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r6;

        r32 = new java.lang.StringBuilder;

        specialinvoke r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r9 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r12);

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r14 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r29 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats$PackageStats getCompilerPackageStats(java.lang.String)>($r14);

        if r29 != null goto label5;

        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("(No recorded stats)");

        goto label6;

     label5:
        virtualinvoke r29.<com.android.server.pm.CompilerStats$PackageStats: void dump(com.android.internal.util.IndentingPrintWriter)>(r30);

     label6:
        virtualinvoke r30.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label4;

     label7:
        return;
    }

    private void dumpDexoptStateLPr(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.Settings $r5, $r23;
        android.util.ArrayMap $r6, $r24;
        java.lang.Object $r7, $r25, r33;
        com.android.server.pm.parsing.pkg.AndroidPackage $r8, $r16, $r18;
        java.lang.String $r11, $r14, $r20, $r29, r31;
        com.android.server.pm.PackageDexOptimizer $r17;
        com.android.server.pm.dex.DexManager $r19;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo $r21;
        java.io.PrintWriter r30;
        com.android.server.pm.PackageSetting r32, r36;
        java.util.Iterator r35;
        boolean $z0;
        com.android.internal.util.IndentingPrintWriter r37;
        java.lang.StringBuilder r38, r39;
        java.util.Collection r40;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r30 := @parameter0: java.io.PrintWriter;

        r31 := @parameter1: java.lang.String;

        r37 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke r37.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r30, "  ");

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Dexopt state:");

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        if r31 == null goto label2;

        $r23 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = $r23.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r25 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r31);

        r32 = (com.android.server.pm.PackageSetting) $r25;

        if r32 == null goto label1;

        r33 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r32);

        goto label3;

     label1:
        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find package: ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r29 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r29);

        return;

     label2:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        r33 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

     label3:
        r40 = (java.util.Collection) r33;

        r35 = interfaceinvoke r40.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.android.server.pm.PackageSetting) $r7;

        $r8 = r36.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r8 != null goto label5;

        goto label4;

     label5:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r11 = r36.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r14);

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        $r18 = r36.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r16 = r36.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r20 = interfaceinvoke $r16.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r21 = virtualinvoke $r19.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>($r20);

        virtualinvoke $r17.<com.android.server.pm.PackageDexOptimizer: void dumpDexoptState(com.android.internal.util.IndentingPrintWriter,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo)>(r37, $r18, r36, $r21);

        virtualinvoke r37.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label4;

     label6:
        return;
    }

    private java.lang.String dumpDomainString(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.ParceledListSlice $r1, $r2;
        android.util.ArraySet $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r4, r13, r23;
        java.lang.Object $r5, $r8, $r10;
        boolean $z0, $z1, $z2, $z4, $z5, $z7;
        java.util.ArrayList $r9;
        android.content.pm.IntentFilterVerificationInfo $r11;
        java.util.Set $r12;
        java.util.List r14, r15;
        java.util.Iterator r17, r18, r22;
        android.content.IntentFilter r19;
        java.lang.StringBuilder $r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)>(r13);

        r14 = virtualinvoke $r1.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        $r2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)>(r13);

        r15 = virtualinvoke $r2.<android.content.pm.ParceledListSlice: java.util.List getList()>();

        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        $i0 = interfaceinvoke r14.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        r17 = interfaceinvoke r14.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z5 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label2;

        $r10 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (android.content.pm.IntentFilterVerificationInfo) $r10;

        $r12 = virtualinvoke $r11.<android.content.pm.IntentFilterVerificationInfo: java.util.Set getDomains()>();

        virtualinvoke $r3.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r12);

        goto label1;

     label2:
        if r15 == null goto label6;

        $i2 = interfaceinvoke r15.<java.util.List: int size()>();

        if $i2 <= 0 goto label6;

        r18 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (android.content.IntentFilter) $r8;

        $z1 = virtualinvoke r19.<android.content.IntentFilter: boolean hasCategory(java.lang.String)>("android.intent.category.BROWSABLE");

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke r19.<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>("http");

        if $z2 != 0 goto label4;

        $z4 = virtualinvoke r19.<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>("https");

        if $z4 == 0 goto label5;

     label4:
        $r9 = virtualinvoke r19.<android.content.IntentFilter: java.util.ArrayList getHostsList()>();

        virtualinvoke $r3.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r9);

     label5:
        goto label3;

     label6:
        $r20 = new java.lang.StringBuilder;

        $i3 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        $i4 = $i3 * 16;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(int)>($i4);

        r22 = virtualinvoke $r3.<android.util.ArraySet: java.util.Iterator iterator()>();

     label7:
        $z7 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label9;

        $r5 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r5;

        $i1 = virtualinvoke $r20.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label8;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label8:
        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        goto label7;

     label9:
        $r4 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void dumpFeaturesProto(android.util.proto.ProtoOutputStream)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArrayMap r1, $r2, $r3;
        int i0, i1;
        java.lang.Object $r4;
        android.content.pm.FeatureInfo $r5;
        java.lang.Throwable $r6;
        android.util.proto.ProtoOutputStream r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: android.util.proto.ProtoOutputStream;

        r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r5 = (android.content.pm.FeatureInfo) $r4;

        virtualinvoke $r5.<android.content.pm.FeatureInfo: void dumpDebug(android.util.proto.ProtoOutputStream,long)>(r7, 2246267895812L);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void dumpProto(java.io.FileDescriptor)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r3, $r4;
        android.util.proto.ProtoOutputStream $r2;
        int $i0, $i1;
        android.content.ComponentName $r5, $r8;
        com.android.server.pm.Settings $r6, $r7;
        java.lang.Throwable $r9;
        java.io.FileDescriptor r10;
        java.lang.Object r12;
        long l2, l3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.io.FileDescriptor;

        $r2 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r2.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r10);

        r12 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r12;

     label1:
        l2 = virtualinvoke $r2.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268033L);

        $r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333441L, $r3);

        $r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>($r4, 268435456, 0);

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i0);

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        if $r5 == null goto label3;

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        r1 = virtualinvoke $r8.<android.content.ComponentName: java.lang.String getPackageName()>();

        l3 = virtualinvoke $r2.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268034L);

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333441L, r1);

     label2:
        $i1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r1, 268435456, 0);

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i1);

        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void end(long)>(l3);

     label3:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void dumpSharedLibrariesProto(android.util.proto.ProtoOutputStream)>($r2);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void dumpFeaturesProto(android.util.proto.ProtoOutputStream)>($r2);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r6.<com.android.server.pm.Settings: void dumpPackagesProto(android.util.proto.ProtoOutputStream)>($r2);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void dumpSharedUsersProto(android.util.proto.ProtoOutputStream)>($r2);

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void dumpCriticalInfo(android.util.proto.ProtoOutputStream)>($r2);

        exitmonitor r12;

     label4:
        virtualinvoke $r2.<android.util.proto.ProtoOutputStream: void flush()>();

        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r12;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void dumpSharedLibrariesProto(android.util.proto.ProtoOutputStream)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.proto.ProtoOutputStream r1;
        int i0, i1, i3, i4;
        android.content.pm.SharedLibraryInfo r2;
        long l2;
        android.util.ArrayMap $r3, $r4, $r6;
        java.lang.Object $r5, $r7, $r8;
        java.lang.String $r9, $r10, $r11, $r12, r13;
        android.util.LongSparseArray r14;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label9;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        r13 = (java.lang.String) $r5;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (android.util.LongSparseArray) $r7;

        if r14 != null goto label2;

        goto label8;

     label2:
        i1 = virtualinvoke r14.<android.util.LongSparseArray: int size()>();

        i4 = 0;

     label3:
        if i4 >= i1 goto label8;

        $r8 = virtualinvoke r14.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i4);

        r2 = (android.content.pm.SharedLibraryInfo) $r8;

        l2 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895811L);

        $r9 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333441L, $r9);

        $r10 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        if $r10 == null goto label4;

        z0 = 1;

        goto label5;

     label4:
        z0 = 0;

     label5:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366146L, z0);

        if z0 == 0 goto label6;

        $r12 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, $r12);

        goto label7;

     label6:
        $r11 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333444L, $r11);

     label7:
        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l2);

        i4 = i4 + 1;

        goto label3;

     label8:
        i3 = i3 + 1;

        goto label1;

     label9:
        return;
    }

    private boolean enableCompressedPackage(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1, $r20, $r33, $r44, r52, r60, r61, r70, r72;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r49;
        java.lang.String $r3, $r7, $r10, $r11, $r14, $r15, $r19, $r27, $r29, $r32, $r43;
        android.util.ArrayMap $r4, $r18, $r31, $r42;
        java.util.Map $r5;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        com.android.server.pm.Settings $r8, $r17, $r21, $r30, $r34, $r41, $r45;
        com.android.server.pm.dex.DexManager $r9;
        java.lang.String[] $r12;
        com.android.server.pm.PackageManagerException $r13, $r24, $r25;
        java.lang.Throwable $r22, $r23, $r35, $r36, $r37, $r38, $r39, $r40, $r46, $r47, $r48, r63;
        com.android.server.pm.PackageSetting r50, r62, r71, r73;
        com.android.server.pm.PackageManagerService$PackageFreezer r51, r59;
        java.lang.StringBuilder r69;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r49 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r50 := @parameter1: com.android.server.pm.PackageSetting;

        i0 = r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r1;

     label01:
        $r3 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r51 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,java.lang.String)>($r3, "setEnabledSetting");

     label02:
        $i1 = i0 | -2147483648;

        $i2 = $i1 | 64;

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage installStubPackageLI(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r49, $i2, 0);

        r52 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r52;

     label03:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataAfterInstallLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

     label04:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r4);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.Map)>(r2, r50, null, null, $r5);

     label05:
        goto label08;

     label06:
        $r24 := @caughtexception;

     label07:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "updateAllSharedLibrariesLPw failed: ", $r24);

     label08:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r7 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>($r7, r2);

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r52;

     label09:
        if r51 == null goto label11;

     label10:
        virtualinvoke r51.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label11:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r2, -1, 39);

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r10 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r11 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r12 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        virtualinvoke $r9.<com.android.server.pm.dex.DexManager: void notifyPackageUpdated(java.lang.String,java.lang.String,java.lang.String[])>($r10, $r11, $r12);

        exitmonitor r1;

     label12:
        return 1;

     label13:
        $r36 := @caughtexception;

     label14:
        exitmonitor r52;

     label15:
        throw $r36;

     label16:
        $r46 := @caughtexception;

        if r51 == null goto label21;

     label17:
        virtualinvoke r51.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label18:
        goto label21;

     label19:
        $r38 := @caughtexception;

     label20:
        virtualinvoke $r46.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r38);

     label21:
        throw $r46;

     label22:
        $r22 := @caughtexception;

        goto label70;

     label23:
        $r13 := @caughtexception;

     label24:
        $r14 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r59 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,java.lang.String)>($r14, "setEnabledSetting");

     label25:
        r60 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r60;

     label26:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enableSystemPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)>(r49);

        exitmonitor r60;

     label27:
        $r15 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage installPackageFromSystemLIF(java.lang.String,int[],int[],com.android.server.pm.permission.PermissionsState,boolean)>($r15, null, null, null, 1);

     label28:
        if r59 == null goto label30;

     label29:
        virtualinvoke r59.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label30:
        r61 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r61;

     label31:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r18 = $r17.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r19 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r20 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r19);

        r62 = (com.android.server.pm.PackageSetting) $r20;

     label32:
        if r62 == null goto label34;

     label33:
        virtualinvoke r62.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(2, 0, "android");

     label34:
        $r21 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r21.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r61;

     label35:
        goto label56;

     label36:
        $r39 := @caughtexception;

        r63 = $r39;

     label37:
        exitmonitor r61;

     label38:
        throw r63;

     label39:
        $r37 := @caughtexception;

     label40:
        exitmonitor r60;

     label41:
        throw $r37;

     label42:
        $r48 := @caughtexception;

        if r59 == null goto label47;

     label43:
        virtualinvoke r59.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label44:
        goto label47;

     label45:
        $r23 := @caughtexception;

     label46:
        virtualinvoke $r48.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

     label47:
        throw $r48;

     label48:
        $r40 := @caughtexception;

        goto label61;

     label49:
        $r25 := @caughtexception;

     label50:
        r69 = new java.lang.StringBuilder;

        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore system package:");

        $r27 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r29, $r25);

     label51:
        r70 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r70;

     label52:
        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r31 = $r30.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r32 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r33 = virtualinvoke $r31.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r32);

        r71 = (com.android.server.pm.PackageSetting) $r33;

     label53:
        if r71 == null goto label55;

     label54:
        virtualinvoke r71.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(2, 0, "android");

     label55:
        $r34 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r34.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r70;

     label56:
        exitmonitor r1;

     label57:
        return 0;

     label58:
        $r35 := @caughtexception;

        r63 = $r35;

     label59:
        exitmonitor r70;

     label60:
        goto label38;

     label61:
        r72 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r72;

     label62:
        $r41 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r42 = $r41.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r43 = interfaceinvoke r49.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r44 = virtualinvoke $r42.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r43);

        r73 = (com.android.server.pm.PackageSetting) $r44;

     label63:
        if r73 == null goto label65;

     label64:
        virtualinvoke r73.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(2, 0, "android");

     label65:
        $r45 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r45.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r72;

     label66:
        throw $r40;

     label67:
        $r47 := @caughtexception;

        r63 = $r47;

     label68:
        exitmonitor r72;

     label69:
        goto label38;

     label70:
        exitmonitor r1;

     label71:
        throw $r22;

        catch com.android.server.pm.PackageManagerException from label01 to label02 with label23;
        catch java.lang.Throwable from label01 to label02 with label22;
        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch com.android.server.pm.PackageManagerException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch com.android.server.pm.PackageManagerException from label10 to label11 with label23;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch com.android.server.pm.PackageManagerException from label20 to label21 with label23;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch com.android.server.pm.PackageManagerException from label21 to label22 with label23;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch com.android.server.pm.PackageManagerException from label24 to label25 with label49;
        catch java.lang.Throwable from label24 to label25 with label48;
        catch java.lang.Throwable from label25 to label26 with label42;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Throwable from label27 to label28 with label42;
        catch com.android.server.pm.PackageManagerException from label29 to label30 with label49;
        catch java.lang.Throwable from label29 to label30 with label48;
        catch java.lang.Throwable from label30 to label31 with label22;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label37 to label38 with label36;
        catch java.lang.Throwable from label38 to label39 with label22;
        catch java.lang.Throwable from label40 to label41 with label39;
        catch java.lang.Throwable from label41 to label42 with label42;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch com.android.server.pm.PackageManagerException from label46 to label47 with label49;
        catch java.lang.Throwable from label46 to label47 with label48;
        catch com.android.server.pm.PackageManagerException from label47 to label48 with label49;
        catch java.lang.Throwable from label47 to label48 with label48;
        catch java.lang.Throwable from label50 to label51 with label48;
        catch java.lang.Throwable from label51 to label52 with label22;
        catch java.lang.Throwable from label52 to label53 with label58;
        catch java.lang.Throwable from label54 to label55 with label58;
        catch java.lang.Throwable from label55 to label56 with label58;
        catch java.lang.Throwable from label56 to label57 with label22;
        catch java.lang.Throwable from label59 to label60 with label58;
        catch java.lang.Throwable from label61 to label62 with label22;
        catch java.lang.Throwable from label62 to label63 with label67;
        catch java.lang.Throwable from label64 to label65 with label67;
        catch java.lang.Throwable from label65 to label66 with label67;
        catch java.lang.Throwable from label66 to label67 with label22;
        catch java.lang.Throwable from label68 to label69 with label67;
        catch java.lang.Throwable from label70 to label71 with label22;
    }

    private void enableSystemPackageLPw(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.Settings $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>($r3);

        return;
    }

    private void enforceAdjustRuntimePermissionsPolicyOrUpgradeRuntimePermissions(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r12;
        android.content.Context $r3, $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY");

        if $i0 == 0 goto label2;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.UPGRADE_RUNTIME_PERMISSIONS");

        if $i1 != 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.ADJUST_RUNTIME_PERMISSIONS_POLICY");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.UPGRADE_RUNTIME_PERMISSIONS");

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        return;
    }

    private void enforceCanSetPackagesSuspendedAsUser(java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, $r13, r14;
        int i0, i1, i2, $i3, $i4;
        com.android.server.pm.ProtectedPackages $r3;
        android.content.Context $r4;
        java.lang.StringBuilder $r5;
        java.lang.SecurityException $r12;
        boolean $z0, z1, z2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r14 := @parameter3: java.lang.String;

        if i0 == 0 goto label8;

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i3 != 1000 goto label1;

        goto label8;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        r2 = virtualinvoke $r3.<com.android.server.pm.ProtectedPackages: java.lang.String getDeviceOwnerOrProfileOwnerPackage(int)>(i1);

        z1 = 0;

        if r2 == null goto label2;

        $i4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r2, 0, i1);

        if $i4 != i0 goto label2;

        return;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SUSPEND_APPS", r14);

        i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r1, 0, i1);

        if i2 != i0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        if i0 != 2000 goto label5;

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i2, i0);

        if $z0 == 0 goto label5;

        z1 = 1;

        goto label5;

     label5:
        if z1 != 0 goto label7;

        if z2 == 0 goto label6;

        goto label7;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling package ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in user ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not belong to calling uid ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = new java.lang.SecurityException;

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label7:
        return;

     label8:
        return;
    }

    private void enforceOwnerRights(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r8, $r16;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder $r2, $r10;
        java.lang.IllegalArgumentException $r7;
        android.content.pm.ApplicationInfo $r9;
        boolean $z0;
        java.lang.SecurityException $r15;
        android.content.pm.PackageInfo r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i2 != 1000 goto label1;

        return;

     label1:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r17 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r1, 0, i1);

        if r17 == null goto label3;

        $r9 = r17.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r9.<android.content.pm.ApplicationInfo: int uid>;

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i3, i0);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own package ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = new java.lang.SecurityException;

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.SecurityException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on user ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private static void enforceSystemOrRoot(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        java.lang.SecurityException $r1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 1000 goto label2;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label2:
        return;
    }

    private static void enforceSystemOrRootOrShell(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        java.lang.SecurityException $r1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 1000 goto label2;

        if i0 == 0 goto label2;

        if i0 != 2000 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>(r0);

        throw $r1;

     label2:
        return;
    }

    private static void ensurePackageRenamed(com.android.server.pm.parsing.pkg.ParsedPackage, java.lang.String)
    {
        com.android.server.pm.parsing.pkg.ParsedPackage r0;
        java.lang.String r1, $r3;
        java.util.List $r2;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getOriginalPackages()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPackageName(java.lang.String)>(r1);

        return;

     label2:
        return;
    }

    private java.lang.String ensureSystemPackageName(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        android.content.pm.PackageInfo $r1, r7;
        java.lang.Object[] $r2;
        android.content.pm.ApplicationInfo $r3;
        int $i1;
        java.lang.Integer $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        if r6 != null goto label1;

        return null;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r6, 2097152, 0);

        if $r1 != null goto label6;

        r7 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r6, 0, 0);

     label3:
        if r7 == null goto label5;

     label4:
        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = "145981139";

        $r3 = r7.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r3.<android.content.pm.ApplicationInfo: int uid>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[1] = $r4;

        $r2[2] = "";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r2);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r6;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    private java.lang.String[] ensureSystemPackageNames(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1, $r4;
        int i0, i1;
        com.android.server.pm.'-$$Lambda$PackageManagerService$YHVD9fSfoszBkmlqzmswh1u_y_M' $r2;
        java.lang.Object[] $r3;
        java.lang.String $r5, $r6;
        java.util.function.IntFunction r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        return null;

     label1:
        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r5 = r1[i1];

        $r6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r5);

        r1[i1] = $r6;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r2 = <com.android.server.pm._$$Lambda$PackageManagerService$YHVD9fSfoszBkmlqzmswh1u_y_M: com.android.server.pm.'-$$Lambda$PackageManagerService$YHVD9fSfoszBkmlqzmswh1u_y_M' INSTANCE>;

        r7 = (java.util.function.IntFunction) $r2;

        $r3 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] filterNotNull(java.lang.Object[],java.util.function.IntFunction)>(r1, r7);

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    private void executeDeletePackageLIF(com.android.server.pm.PackageManagerService$DeletePackageAction, java.lang.String, boolean, int[], boolean, com.android.server.pm.parsing.pkg.ParsedPackage) throws com.android.server.pm.PackageManagerService$SystemDeleteException
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1, z2, $z3, $z4, z5, z6, z7;
        com.android.server.pm.PackageSetting r1;
        android.os.UserHandle r2;
        java.lang.Object r3, $r6, r18;
        java.lang.String $r4, r14;
        android.util.ArrayMap $r5;
        com.android.server.pm.permission.PermissionsState $r7;
        com.android.server.pm.UserManagerService $r8;
        int[] $r9, r15, r21, r22;
        com.android.server.pm.Settings $r10;
        int $i0, i1, i2, i3, i4, i5;
        java.lang.Throwable $r11, $r12;
        com.android.server.pm.PackageManagerService$DeletePackageAction r13;
        com.android.server.pm.parsing.pkg.ParsedPackage r16;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: com.android.server.pm.PackageManagerService$DeletePackageAction;

        r14 := @parameter1: java.lang.String;

        z5 := @parameter2: boolean;

        r15 := @parameter3: int[];

        z0 := @parameter4: boolean;

        r16 := @parameter5: com.android.server.pm.parsing.pkg.ParsedPackage;

        r1 = r13.<com.android.server.pm.PackageManagerService$DeletePackageAction: com.android.server.pm.PackageSetting deletingPs>;

        r17 = r13.<com.android.server.pm.PackageManagerService$DeletePackageAction: com.android.server.pm.PackageManagerService$PackageRemovedInfo outInfo>;

        r2 = r13.<com.android.server.pm.PackageManagerService$DeletePackageAction: android.os.UserHandle user>;

        i1 = r13.<com.android.server.pm.PackageManagerService$DeletePackageAction: int flags>;

        z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(r1);

        if r2 != null goto label01;

        i2 = -1;

        goto label02;

     label01:
        i2 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

     label02:
        if z1 == 0 goto label03;

        $i0 = i1 & 4;

        if $i0 == 0 goto label23;

     label03:
        if i2 == -1 goto label23;

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label04:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void markPackageUninstalledForUserLPw(com.android.server.pm.PackageSetting,android.os.UserHandle)>(r1, r2);

     label05:
        if z1 != 0 goto label12;

     label06:
        z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldKeepUninstalledPackageLPr(java.lang.String)>(r14);

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r9 = virtualinvoke $r8.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $z4 = virtualinvoke r1.<com.android.server.pm.PackageSetting: boolean isAnyInstalled(int[])>($r9);

        if $z4 != 0 goto label10;

     label07:
        if z2 == 0 goto label08;

        goto label10;

     label08:
        virtualinvoke r1.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, i2);

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r10.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r1);

     label09:
        z6 = 0;

        goto label11;

     label10:
        z6 = 1;

     label11:
        goto label13;

     label12:
        z6 = 1;

     label13:
        exitmonitor r3;

     label14:
        if z6 == 0 goto label23;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackageStateForUserLIF(com.android.server.pm.PackageSetting,int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,int)>(r1, i2, r17, i1);

        r18 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r18;

     label15:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(android.os.UserHandle)>(r2);

        exitmonitor r18;

     label16:
        return;

     label17:
        $r11 := @caughtexception;

     label18:
        exitmonitor r18;

     label19:
        throw $r11;

     label20:
        $r12 := @caughtexception;

     label21:
        exitmonitor r3;

     label22:
        throw $r12;

     label23:
        if z1 == 0 goto label24;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void deleteSystemPackageLIF(com.android.server.pm.PackageManagerService$DeletePackageAction,com.android.server.pm.PackageSetting,int[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(r13, r1, r15, i1, r17, z0);

        goto label25;

     label24:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void deleteInstalledPackageLIF(com.android.server.pm.PackageSetting,boolean,int,int[],com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)>(r1, z5, i1, r15, r17, z0);

     label25:
        if r17 == null goto label26;

        r21 = r17.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers>;

        goto label27;

     label26:
        r21 = null;

     label27:
        r22 = r21;

        if r21 != null goto label28;

        r22 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int[] resolveUserIds(int)>(i2);

     label28:
        i3 = lengthof r22;

        z7 = 0;

        i4 = 0;

     label29:
        if i4 >= i3 goto label31;

        i5 = r22[i4];

        $r7 = virtualinvoke r1.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z3 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>("android.permission.SUSPEND_APPS", i5);

        if $z3 == 0 goto label30;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void unsuspendForSuspendingPackage(java.lang.String,int)>(r14, i5);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeAllDistractingPackageRestrictions(int)>(i5);

     label30:
        i4 = i4 + 1;

        goto label29;

     label31:
        if r17 == null goto label33;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r4);

        if $r6 != null goto label32;

        z7 = 1;

     label32:
        r17.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean removedForAllUsers> = z7;

     label33:
        return;

        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    private void executePostCommitSteps(com.android.server.pm.PackageManagerService$CommitRequest)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.Iterator r2;
        com.android.server.pm.PackageManagerService$ReconciledPackage r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;
        java.lang.String r5, $r36, $r37, $r40, $r45, $r46;
        boolean z1, $z2, $z3, $z4, $z5, $z6, $z9, z10, z11, z12, $z13;
        android.util.ArraySet $r7;
        java.util.Map $r8;
        java.util.Collection $r9;
        java.lang.Object $r10;
        com.android.server.pm.PackageManagerService$ScanResult $r11, r51;
        com.android.server.pm.PackageManagerService$ScanRequest $r12, $r30;
        int $i0, $i1, $i2, $i4, $i5, i6;
        com.android.server.pm.PackageSetting $r13, $r22, r52;
        android.os.incremental.IncrementalManager $r14, $r39;
        com.android.server.pm.PackageManagerService$PrepareResult $r15, $r16;
        com.android.server.pm.PackageManagerService$InstallArgs $r17, $r21, $r31;
        android.os.UserHandle $r18;
        com.android.server.pm.dex.ArtManagerService $r19;
        int[] $r20;
        com.android.server.pm.pkg.PackageStateUnserialized $r23, $r24;
        com.android.server.pm.PackageDexOptimizer $r26;
        com.android.server.pm.CompilerStats$PackageStats $r27;
        com.android.server.pm.dex.DexManager $r28, $r35;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo $r29;
        com.android.server.pm.dex.ViewCompiler $r32;
        android.content.Context $r33;
        android.content.ContentResolver $r34;
        java.lang.String[] $r38;
        java.lang.StringBuilder $r41;
        java.lang.IllegalArgumentException $r44;
        com.android.server.pm.PackageManagerService$CommitRequest r47;
        android.os.incremental.IncrementalStorage r48;
        short s7;
        com.android.server.pm.dex.DexoptOptions $r50;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r47 := @parameter0: com.android.server.pm.PackageManagerService$CommitRequest;

        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        $r8 = r47.<com.android.server.pm.PackageManagerService$CommitRequest: java.util.Map reconciledPackages>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label20;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.PackageManagerService$ReconciledPackage) $r10;

        $r11 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$ScanResult scanResult>;

        $r12 = $r11.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        i6 = $r12.<com.android.server.pm.PackageManagerService$ScanRequest: int scanFlags>;

        $i0 = i6 & 8192;

        if $i0 == 0 goto label02;

        z10 = 1;

        goto label03;

     label02:
        z10 = 0;

     label03:
        $r13 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        r4 = $r13.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r5 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager mIncrementalManager>;

        if $r14 == null goto label04;

        $r46 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        $z9 = staticinvoke <android.os.incremental.IncrementalManager: boolean isIncrementalPath(java.lang.String)>($r46);

        if $z9 == 0 goto label04;

        z11 = 1;

        goto label05;

     label04:
        z11 = 0;

     label05:
        if z11 == 0 goto label07;

        $r39 = r0.<com.android.server.pm.PackageManagerService: android.os.incremental.IncrementalManager mIncrementalManager>;

        $r40 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        r48 = virtualinvoke $r39.<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage openStorage(java.lang.String)>($r40);

        if r48 == null goto label06;

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r48);

        goto label07;

     label06:
        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Install: null storage for incremental package ");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r44 = new java.lang.IllegalArgumentException;

        $r45 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r44.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r45);

        throw $r44;

     label07:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataAfterInstallLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r4);

        $r15 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

        $z3 = $r15.<com.android.server.pm.PackageManagerService$PrepareResult: boolean clearCodeCache>;

        if $z3 == 0 goto label08;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r4, -1, 39);

     label08:
        $r16 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PrepareResult prepareResult>;

        $z4 = $r16.<com.android.server.pm.PackageManagerService$PrepareResult: boolean replace>;

        if $z4 == 0 goto label09;

        $r35 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r36 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r37 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r38 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        virtualinvoke $r35.<com.android.server.pm.dex.DexManager: void notifyPackageUpdated(java.lang.String,java.lang.String,java.lang.String[])>($r36, $r37, $r38);

     label09:
        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService>;

        $r17 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        $r18 = $r17.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $i1 = virtualinvoke $r18.<android.os.UserHandle: int getIdentifier()>();

        $r20 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int[] resolveUserIds(int)>($i1);

        virtualinvoke $r19.<com.android.server.pm.dex.ArtManagerService: void prepareAppProfiles(com.android.server.pm.parsing.pkg.AndroidPackage,int[],boolean)>(r4, $r20, 1);

        if z10 == 0 goto label10;

        $r33 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r34 = virtualinvoke $r33.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i5 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r34, "instant_app_dexopt_enabled", 0);

        if $i5 == 0 goto label11;

     label10:
        $z5 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isDebuggable()>();

        if $z5 != 0 goto label11;

        if z11 != 0 goto label11;

        z12 = 1;

        goto label12;

     label11:
        z12 = 0;

     label12:
        if z12 == 0 goto label19;

        $z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("pm.precompile_layouts", 0);

        if $z6 == 0 goto label13;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "compileLayouts");

        $r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ViewCompiler mViewCompiler>;

        virtualinvoke $r32.<com.android.server.pm.dex.ViewCompiler: boolean compileLayouts(com.android.server.pm.parsing.pkg.AndroidPackage)>(r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label13:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "dexopt");

        s7 = 1028;

        $r21 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        $i2 = $r21.<com.android.server.pm.PackageManagerService$InstallArgs: int installReason>;

        if $i2 == 2 goto label14;

        $r31 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$InstallArgs installArgs>;

        $i4 = $r31.<com.android.server.pm.PackageManagerService$InstallArgs: int installReason>;

        if $i4 != 3 goto label15;

     label14:
        s7 = 1028 | 2048;

     label15:
        $r50 = new com.android.server.pm.dex.DexoptOptions;

        specialinvoke $r50.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,int)>(r5, 2, s7);

        r51 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$ScanResult scanResult>;

        $z13 = r51.<com.android.server.pm.PackageManagerService$ScanResult: boolean existingSettingCopied>;

        if $z13 == 0 goto label16;

        $r30 = r51.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r52 = $r30.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        goto label17;

     label16:
        r52 = r51.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

     label17:
        if r52 != null goto label18;

        r52 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        goto label18;

     label18:
        $r22 = r3.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        $r23 = virtualinvoke $r22.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z1 = virtualinvoke $r23.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        $r24 = virtualinvoke r52.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        virtualinvoke $r24.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUpdatedSystemApp(boolean)>(z1);

        $r26 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        $r27 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats$PackageStats getOrCreateCompilerPackageStats(com.android.server.pm.parsing.pkg.AndroidPackage)>(r4);

        $r28 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r29 = virtualinvoke $r28.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>(r5);

        virtualinvoke $r26.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.lang.String[],com.android.server.pm.CompilerStats$PackageStats,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo,com.android.server.pm.dex.DexoptOptions)>(r4, r52, null, $r27, $r29, $r50);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        goto label19;

     label19:
        staticinvoke <com.android.server.pm.BackgroundDexOptService: void notifyPackageChanged(java.lang.String)>(r5);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyPackageChangeObserversOnUpdate(com.android.server.pm.PackageManagerService$ReconciledPackage)>(r3);

        goto label01;

     label20:
        staticinvoke <com.android.internal.content.NativeLibraryHelper: void waitForNativeBinariesExtraction(android.util.ArraySet)>($r7);

        return;
    }

    private void executeSharedLibrariesUpdateLPr(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, java.util.ArrayList, int[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.ArrayList r1, r36;
        int[] r2, r30;
        java.util.Iterator r4, r31;
        com.android.server.pm.'-$$Lambda$PackageManagerService$EQHzRzxse-rtXNIoVfzT15c8LHI' $r5;
        com.android.server.pm.pkg.PackageStateUnserialized $r6, $r8, $r11, $r14;
        java.util.List $r7, $r9;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i3, $i5, $i6, i7, i8, i9, i10;
        java.lang.Object $r17, $r24;
        java.lang.String $r18, $r19, $r23;
        long $l2;
        android.content.pm.SharedLibraryInfo $r25, r32;
        com.android.server.pm.parsing.pkg.AndroidPackage r26, r28;
        com.android.server.pm.PackageSetting r27, r29, r33;
        java.util.LinkedHashSet r35;
        java.lang.StringBuilder r37;
        java.util.function.BiConsumer r38;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r26 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r27 := @parameter1: com.android.server.pm.PackageSetting;

        r28 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r29 := @parameter3: com.android.server.pm.PackageSetting;

        r1 := @parameter4: java.util.ArrayList;

        r2 := @parameter5: int[];

        $r5 = <com.android.server.pm._$$Lambda$PackageManagerService$EQHzRzxse_rtXNIoVfzT15c8LHI: com.android.server.pm.'-$$Lambda$PackageManagerService$EQHzRzxse-rtXNIoVfzT15c8LHI' INSTANCE>;

        r38 = (java.util.function.BiConsumer) $r5;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void applyDefiningSharedLibraryUpdateLocked(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.SharedLibraryInfo,java.util.function.BiConsumer)>(r26, null, r38);

        if r1 == null goto label12;

        $r11 = virtualinvoke r27.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        virtualinvoke $r11.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUsesLibraryInfos(java.util.List)>(r1);

        r35 = new java.util.LinkedHashSet;

        specialinvoke r35.<java.util.LinkedHashSet: void <init>()>();

        r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r24 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r25 = (android.content.pm.SharedLibraryInfo) $r24;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void addSharedLibraryLPr(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Set,android.content.pm.SharedLibraryInfo,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r26, r35, $r25, r28, r29);

        goto label01;

     label02:
        $r14 = virtualinvoke r27.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        r36 = new java.util.ArrayList;

        specialinvoke r36.<java.util.ArrayList: void <init>(java.util.Collection)>(r35);

        virtualinvoke $r14.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUsesLibraryFiles(java.util.List)>(r36);

        $i0 = lengthof r2;

        r30 = newarray (int)[$i0];

        i7 = 0;

        i8 = 0;

     label03:
        $i1 = lengthof r2;

        if i8 >= $i1 goto label05;

        i9 = i7;

        $i5 = r2[i8];

        $z2 = virtualinvoke r27.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>($i5);

        if $z2 == 0 goto label04;

        $i6 = r2[i8];

        r30[i7] = $i6;

        i9 = i7 + 1;

     label04:
        i8 = i8 + 1;

        i7 = i9;

        goto label03;

     label05:
        r31 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label06:
        $z3 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r17 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (android.content.pm.SharedLibraryInfo) $r17;

        $z1 = virtualinvoke r32.<android.content.pm.SharedLibraryInfo: boolean isStatic()>();

        if $z1 != 0 goto label07;

        goto label06;

     label07:
        $r18 = virtualinvoke r32.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        $l2 = virtualinvoke r32.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $r19 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String toStaticSharedLibraryPackageName(java.lang.String,long)>($r18, $l2);

        r33 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r19);

        if r33 != null goto label08;

        r37 = new java.lang.StringBuilder;

        specialinvoke r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shared lib without setting: ");

        virtualinvoke r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r23 = virtualinvoke r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PackageManager", $r23);

        goto label06;

     label08:
        i10 = 0;

     label09:
        if i10 >= i7 goto label10;

        $i3 = r30[i10];

        virtualinvoke r33.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, $i3);

        i10 = i10 + 1;

        goto label09;

     label10:
        goto label06;

     label11:
        goto label13;

     label12:
        $r6 = virtualinvoke r27.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r8 = virtualinvoke $r6.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUsesLibraryInfos(java.util.List)>($r7);

        $r9 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        virtualinvoke $r8.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUsesLibraryFiles(java.util.List)>($r9);

     label13:
        return;
    }

    private java.util.List filterCandidatesWithDomainPreferredActivitiesLPr(android.content.Intent, int, java.util.List, com.android.server.pm.PackageManagerService$CrossProfileDomainInfo, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        java.lang.Object r7, $r19, $r25, $r28, $r32;
        android.content.pm.ResolveInfo r8, $r26, $r27, r70, r71;
        boolean z0, $z5, $z7, $z9, z18, z19;
        long l0, $l14, $l15;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, $i13, i20, i21, i22, i23, $i24, i25, i26, i27, i28, i29;
        java.util.ArrayList $r9, $r10, $r11, $r12, $r13, $r14;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r15;
        java.lang.String $r18, $r21, $r24, $r35, $r37, $r40, $r42, $r45, $r47, $r50, $r54, r62, r69;
        android.content.pm.ActivityInfo $r20, $r29, $r34, $r39, $r44, $r49;
        com.android.server.pm.Settings $r30;
        android.util.ArrayMap $r31;
        java.lang.Throwable $r55, $r56, $r57, r74;
        android.content.Intent r58;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo r59;
        com.android.server.pm.PackageSetting r63;
        java.lang.StringBuilder r64, r65, r66, r67, r72, r73;
        java.util.Iterator r68;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r58 := @parameter0: android.content.Intent;

        i20 := @parameter1: int;

        r1 := @parameter2: java.util.List;

        r59 := @parameter3: com.android.server.pm.PackageManagerService$CrossProfileDomainInfo;

        i21 := @parameter4: int;

        $i3 = virtualinvoke r58.<android.content.Intent: int getFlags()>();

        $i4 = $i3 & 8;

        if $i4 == 0 goto label01;

        z18 = 1;

        goto label02;

     label01:
        z18 = 0;

     label02:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r7 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r7;

     label03:
        i22 = interfaceinvoke r1.<java.util.List: int size()>();

     label04:
        i23 = 0;

     label05:
        if i23 >= i22 goto label32;

     label06:
        $r28 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i23);

        r8 = (android.content.pm.ResolveInfo) $r28;

        $r29 = r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r62 = $r29.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r31 = $r30.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r32 = virtualinvoke $r31.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r62);

        r63 = (com.android.server.pm.PackageSetting) $r32;

     label07:
        if r63 == null goto label31;

     label08:
        z0 = r8.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

     label09:
        if z0 == 0 goto label12;

     label10:
        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label11:
        goto label31;

     label12:
        l0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>(r63, i21);

     label13:
        $l14 = l0 >> 32;

        i1 = (int) $l14;

        $l15 = l0 & -1L;

        i2 = (int) $l15;

        if i1 != 2 goto label18;

        if z18 == 0 goto label16;

     label14:
        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  + always: ");

        $r49 = r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r50 = $r49.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : linkgen=");

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r54 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r54);

     label15:
        goto label16;

     label16:
        r8.<android.content.pm.ResolveInfo: int preferredOrder> = i2;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label17:
        goto label31;

     label18:
        if i1 != 3 goto label22;

        if z18 == 0 goto label20;

     label19:
        r65 = new java.lang.StringBuilder;

        specialinvoke r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  + never: ");

        $r44 = r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r45 = $r44.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r47);

     label20:
        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label21:
        goto label31;

     label22:
        if i1 != 4 goto label26;

        if z18 == 0 goto label24;

     label23:
        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  + always-ask: ");

        $r39 = r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r40 = $r39.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r42);

     label24:
        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label25:
        goto label31;

     label26:
        if i1 == 0 goto label27;

        if i1 != 1 goto label31;

        goto label27;

     label27:
        if z18 == 0 goto label29;

     label28:
        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  + ask: ");

        $r34 = r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r35 = $r34.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r37);

     label29:
        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

     label30:
        goto label31;

     label31:
        i23 = i23 + 1;

        goto label05;

     label32:
        z19 = 0;

     label33:
        $i5 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        if $i5 <= 0 goto label35;

        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r10);

     label34:
        goto label39;

     label35:
        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r11);

     label36:
        if r59 == null goto label38;

     label37:
        $i13 = r59.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        if $i13 == 3 goto label38;

        $r27 = r59.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r27);

     label38:
        z19 = 1;

     label39:
        $i24 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if $i24 <= 0 goto label44;

        r68 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label40:
        $z9 = interfaceinvoke r68.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label42;

        $r25 = interfaceinvoke r68.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (android.content.pm.ResolveInfo) $r25;

        $r26.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

     label41:
        goto label40;

     label42:
        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r12);

     label43:
        z19 = 1;

     label44:
        if z19 == 0 goto label77;

        $i6 = i20 & 131072;

        if $i6 == 0 goto label47;

     label45:
        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r14);

     label46:
        goto label72;

     label47:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        r69 = virtualinvoke $r15.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultBrowser(int)>(i21);

     label48:
        i25 = 0;

        r70 = null;

     label49:
        i26 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

     label50:
        i27 = 0;

     label51:
        if i27 >= i26 goto label65;

     label52:
        $r19 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i27);

        r71 = (android.content.pm.ResolveInfo) $r19;

     label53:
        i28 = i25;

     label54:
        $i9 = r71.<android.content.pm.ResolveInfo: int priority>;

        if $i9 <= i25 goto label55;

        i28 = r71.<android.content.pm.ResolveInfo: int priority>;

     label55:
        $r20 = r71.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r21 = $r20.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z7 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r69);

        if $z7 == 0 goto label64;

     label56:
        if r70 == null goto label60;

     label57:
        $i12 = r70.<android.content.pm.ResolveInfo: int priority>;

        $i11 = r71.<android.content.pm.ResolveInfo: int priority>;

        if $i12 >= $i11 goto label59;

     label58:
        goto label60;

     label59:
        goto label64;

     label60:
        if z18 == 0 goto label63;

     label61:
        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Considering default browser match ");

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r71);

        $r24 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r24);

     label62:
        goto label63;

     label63:
        r70 = r71;

        goto label64;

     label64:
        i27 = i27 + 1;

        i25 = i28;

        goto label51;

     label65:
        if r70 == null goto label71;

     label66:
        $i7 = r70.<android.content.pm.ResolveInfo: int priority>;

        if $i7 < i25 goto label71;

        $z5 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r69);

        if $z5 != 0 goto label71;

     label67:
        if z18 == 0 goto label69;

     label68:
        r73 = new java.lang.StringBuilder;

        specialinvoke r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default browser match ");

        virtualinvoke r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70);

        $r18 = virtualinvoke r73.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r18);

     label69:
        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r70);

     label70:
        goto label72;

     label71:
        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r14);

     label72:
        i29 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

     label73:
        if i29 != 0 goto label76;

     label74:
        virtualinvoke $r9.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke $r9.<java.util.ArrayList: boolean removeAll(java.util.Collection)>($r13);

     label75:
        goto label77;

     label76:
        goto label77;

     label77:
        exitmonitor r7;

     label78:
        return $r9;

     label79:
        $r55 := @caughtexception;

        r74 = $r55;

        goto label81;

     label80:
        $r57 := @caughtexception;

        r74 = $r57;

     label81:
        exitmonitor r7;

     label82:
        throw r74;

     label83:
        $r56 := @caughtexception;

        r74 = $r56;

        goto label81;

        catch java.lang.Throwable from label03 to label04 with label80;
        catch java.lang.Throwable from label06 to label07 with label79;
        catch java.lang.Throwable from label08 to label09 with label79;
        catch java.lang.Throwable from label10 to label11 with label80;
        catch java.lang.Throwable from label12 to label13 with label79;
        catch java.lang.Throwable from label14 to label15 with label79;
        catch java.lang.Throwable from label16 to label17 with label79;
        catch java.lang.Throwable from label19 to label20 with label79;
        catch java.lang.Throwable from label20 to label21 with label79;
        catch java.lang.Throwable from label23 to label24 with label79;
        catch java.lang.Throwable from label24 to label25 with label79;
        catch java.lang.Throwable from label28 to label29 with label79;
        catch java.lang.Throwable from label29 to label30 with label79;
        catch java.lang.Throwable from label33 to label34 with label79;
        catch java.lang.Throwable from label35 to label36 with label79;
        catch java.lang.Throwable from label37 to label38 with label79;
        catch java.lang.Throwable from label39 to label40 with label79;
        catch java.lang.Throwable from label40 to label41 with label79;
        catch java.lang.Throwable from label42 to label43 with label79;
        catch java.lang.Throwable from label45 to label46 with label79;
        catch java.lang.Throwable from label47 to label48 with label79;
        catch java.lang.Throwable from label49 to label50 with label79;
        catch java.lang.Throwable from label52 to label53 with label79;
        catch java.lang.Throwable from label54 to label55 with label79;
        catch java.lang.Throwable from label55 to label56 with label79;
        catch java.lang.Throwable from label57 to label58 with label79;
        catch java.lang.Throwable from label61 to label62 with label79;
        catch java.lang.Throwable from label66 to label67 with label79;
        catch java.lang.Throwable from label68 to label69 with label79;
        catch java.lang.Throwable from label69 to label70 with label79;
        catch java.lang.Throwable from label71 to label72 with label79;
        catch java.lang.Throwable from label72 to label73 with label79;
        catch java.lang.Throwable from label74 to label75 with label83;
        catch java.lang.Throwable from label77 to label78 with label83;
        catch java.lang.Throwable from label81 to label82 with label83;
    }

    private java.util.List filterIfNotSystemUser(java.util.List, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        int $i0, $i1, $i2, i3, i4;
        java.lang.Object $r2;
        android.content.pm.ResolveInfo $r3;
        android.content.pm.ActivityInfo $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        i3 := @parameter1: int;

        if i3 != 0 goto label1;

        return r1;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i4 = $i0 - 1;

     label2:
        if i4 < 0 goto label4;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4);

        $r3 = (android.content.pm.ResolveInfo) $r2;

        $r4 = $r3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $i1 = $r4.<android.content.pm.ActivityInfo: int flags>;

        $i2 = $i1 & 536870912;

        if $i2 == 0 goto label3;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i4);

     label3:
        i4 = i4 + -1;

        goto label2;

     label4:
        return r1;
    }

    private boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1, r16;
        android.content.pm.SharedLibraryInfo r2;
        java.lang.String[] r3, $r11;
        int $i0, $i2, $i3, $i7, i8, i9, i10, i11, i12, i13, i14;
        com.android.server.pm.parsing.pkg.AndroidPackage $r4, $r5, $r6, $r8, $r13;
        boolean $z0, $z1;
        java.lang.String $r7, $r9, $r12, r15;
        long $l1, $l4, $l5;
        com.android.server.pm.Settings $r10;
        long[] $r14;
        byte $b6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        $i0 = i10 & 67108864;

        if $i0 == 0 goto label03;

        i11 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i8);

        if i11 == 1000 goto label02;

        if i11 == 2000 goto label02;

        if i11 != 0 goto label01;

        goto label02;

     label01:
        $i7 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", i8);

        if $i7 != 0 goto label03;

        return 0;

     label02:
        return 0;

     label03:
        if r1 == null goto label12;

        $r4 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r4 == null goto label12;

        $r5 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z0 = interfaceinvoke $r5.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStaticSharedLibrary()>();

        if $z0 != 0 goto label04;

        goto label12;

     label04:
        $r6 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r7 = interfaceinvoke $r6.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $r8 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $l1 = interfaceinvoke $r8.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>($r7, $l1);

        if r2 != null goto label05;

        return 0;

     label05:
        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i8);

        $i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i9, $i2);

        r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>($i3);

        if r3 != null goto label06;

        return 1;

     label06:
        i12 = lengthof r3;

        i13 = 0;

     label07:
        if i13 >= i12 goto label11;

        r15 = r3[i13];

        $r9 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z1 == 0 goto label08;

        return 0;

     label08:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r16 = virtualinvoke $r10.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r15);

        if r16 == null goto label10;

        $r11 = r16.<com.android.server.pm.PackageSetting: java.lang.String[] usesStaticLibraries>;

        $r12 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        i14 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($r11, $r12);

        if i14 >= 0 goto label09;

        goto label10;

     label09:
        $r13 = r16.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r14 = interfaceinvoke $r13.<com.android.server.pm.parsing.pkg.AndroidPackage: long[] getUsesStaticLibrariesVersions()>();

        $l4 = $r14[i14];

        $l5 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $b6 = $l4 cmp $l5;

        if $b6 != 0 goto label10;

        return 0;

     label10:
        i13 = i13 + 1;

        goto label07;

     label11:
        return 1;

     label12:
        return 0;
    }

    private android.content.ComponentName findInstallFailureActivity(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r7, $r10;
        android.content.pm.ResolveInfo r2;
        android.content.Intent $r3;
        java.lang.Object $r5;
        android.content.pm.ActivityInfo $r6, $r9;
        android.content.ComponentName $r8;
        int i0, i1, i2, i3;
        java.util.List r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INSTALL_FAILURE");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r1);

        r12 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int,int,int,boolean,boolean)>($r3, null, 0, 0, i0, i1, 0, 0);

        i2 = interfaceinvoke r12.<java.util.List: int size()>();

        if i2 <= 0 goto label3;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $r5 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (android.content.pm.ResolveInfo) $r5;

        $r6 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = $r6.<android.content.pm.ActivityInfo: java.lang.String splitName>;

        if $r7 == null goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r8 = new android.content.ComponentName;

        $r9 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r10 = $r9.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r8.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r1, $r10);

        return $r8;

     label3:
        return null;
    }

    private android.content.pm.ResolveInfo findPersistentPreferredActivityLP(android.content.Intent, java.lang.String, int, java.util.List, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, $i4, $i8, $i10, i12, $i13, i14;
        java.util.List r1, r38;
        boolean z0, $z1, $z2, z3;
        com.android.server.pm.PersistentPreferredActivity r2;
        com.android.server.pm.Settings $r3;
        android.util.SparseArray $r4;
        java.lang.Object $r5, $r6, $r7;
        android.content.pm.ActivityInfo $r8, $r13, $r18, $r22, r42;
        android.content.pm.ApplicationInfo $r9, $r10;
        java.lang.String $r11, $r12, $r14, $r15, $r19, $r23, $r25, $r33, r36, r40;
        java.lang.StringBuilder $r16, $r27;
        android.util.LogPrinter $r26, $r34;
        android.content.ComponentName $r31, $r41;
        android.content.Intent r35;
        com.android.server.pm.PersistentPreferredIntentResolver r37;
        android.content.pm.ResolveInfo r43;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r35 := @parameter0: android.content.Intent;

        r36 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.List;

        z0 := @parameter4: boolean;

        i1 := @parameter5: int;

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r37 = (com.android.server.pm.PersistentPreferredIntentResolver) $r5;

        if z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Looking for presistent preferred activities...");

     label01:
        if r37 == null goto label04;

        $i10 = 65536 & i0;

        if $i10 == 0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        r38 = virtualinvoke r37.<com.android.server.pm.PersistentPreferredIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(r35, r36, z3, i1);

        goto label05;

     label04:
        r38 = null;

     label05:
        if r38 == null goto label20;

        $i4 = interfaceinvoke r38.<java.util.List: int size()>();

        if $i4 <= 0 goto label20;

        i3 = interfaceinvoke r38.<java.util.List: int size()>();

        i12 = 0;

     label06:
        if i12 >= i3 goto label19;

        $r6 = interfaceinvoke r38.<java.util.List: java.lang.Object get(int)>(i12);

        r2 = (com.android.server.pm.PersistentPreferredActivity) $r6;

        if z0 == 0 goto label09;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking PersistentPreferredActivity ds=");

        $i8 = virtualinvoke r2.<com.android.server.pm.PersistentPreferredActivity: int countDataSchemes()>();

        if $i8 <= 0 goto label07;

        r40 = virtualinvoke r2.<com.android.server.pm.PersistentPreferredActivity: java.lang.String getDataScheme(int)>(0);

        goto label08;

     label07:
        r40 = "<none>";

     label08:
        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  component=");

        $r31 = r2.<com.android.server.pm.PersistentPreferredActivity: android.content.ComponentName mComponent>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r33);

        $r34 = new android.util.LogPrinter;

        specialinvoke $r34.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke r2.<com.android.server.pm.PersistentPreferredActivity: void dump(android.util.Printer,java.lang.String)>($r34, "  ");

     label09:
        $r41 = r2.<com.android.server.pm.PersistentPreferredActivity: android.content.ComponentName mComponent>;

        $i13 = i0 | 512;

        r42 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>($r41, $i13, i1);

        if z0 == 0 goto label11;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Found persistent preferred activity:");

        if r42 == null goto label10;

        $r26 = new android.util.LogPrinter;

        specialinvoke $r26.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke r42.<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>($r26, "  ");

        goto label11;

     label10:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "  null");

     label11:
        if r42 != null goto label12;

        goto label18;

     label12:
        i14 = 0;

     label13:
        if i14 >= i2 goto label18;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i14);

        r43 = (android.content.pm.ResolveInfo) $r7;

        $r8 = r43.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = $r8.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = $r9.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r10 = r42.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r11 = $r10.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z1 != 0 goto label14;

        goto label15;

     label14:
        $r13 = r43.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r15 = $r13.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r14 = r42.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 != 0 goto label16;

     label15:
        i14 = i14 + 1;

        goto label13;

     label16:
        if z0 == 0 goto label17;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning persistent preferred activity: ");

        $r18 = r43.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r19 = $r18.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r22 = r43.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r23 = $r22.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r25);

     label17:
        return r43;

     label18:
        i12 = i12 + 1;

        goto label06;

     label19:
        goto label20;

     label20:
        return null;
    }

    private static java.util.List findSharedLibraries(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.pkg.PackageStateUnserialized $r2, $r7;
        java.util.List $r3, $r4, $r8;
        boolean $z0, $z1;
        java.util.ArrayList $r5;
        java.util.HashSet $r6;
        java.lang.Object $r9;
        android.content.pm.SharedLibraryInfo $r10;
        com.android.server.pm.PackageSetting r11;
        java.util.Iterator r12;

        r11 := @parameter0: com.android.server.pm.PackageSetting;

        $r2 = virtualinvoke r11.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $r3 = virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryInfos()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r7 = virtualinvoke r11.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $r8 = virtualinvoke $r7.<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryInfos()>();

        r12 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.content.pm.SharedLibraryInfo) $r9;

        staticinvoke <com.android.server.pm.PackageManagerService: void findSharedLibrariesRecursive(android.content.pm.SharedLibraryInfo,java.util.ArrayList,java.util.Set)>($r10, $r5, $r6);

        goto label1;

     label2:
        return $r5;

     label3:
        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r4;
    }

    private static void findSharedLibrariesRecursive(android.content.pm.SharedLibraryInfo, java.util.ArrayList, java.util.Set)
    {
        java.util.ArrayList r0;
        java.util.Set r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z3;
        java.util.List $r4, $r5;
        java.lang.Object $r6;
        android.content.pm.SharedLibraryInfo $r7, r8;
        java.util.Iterator r9;

        r8 := @parameter0: android.content.pm.SharedLibraryInfo;

        r0 := @parameter1: java.util.ArrayList;

        r1 := @parameter2: java.util.Set;

        $r2 = virtualinvoke r8.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke r8.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r3);

        virtualinvoke r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r8);

        $r4 = virtualinvoke r8.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke r8.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.content.pm.SharedLibraryInfo) $r6;

        staticinvoke <com.android.server.pm.PackageManagerService: void findSharedLibrariesRecursive(android.content.pm.SharedLibraryInfo,java.util.ArrayList,java.util.Set)>($r7, r0, r1);

        goto label1;

     label2:
        return;
    }

    static java.lang.String fixProcessName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        return r0;

     label1:
        return r1;
    }

    private int fixUpInstallReason(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0, i1, $i2, $i3;
        com.android.server.pm.ProtectedPackages $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", i0);

        if $i2 != 0 goto label1;

        return i1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r2 = virtualinvoke $r3.<com.android.server.pm.ProtectedPackages: java.lang.String getDeviceOwnerOrProfileOwnerPackage(int)>($i3);

        if r2 == null goto label2;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        if i1 != 1 goto label3;

        return 0;

     label3:
        return i1;
    }

    private void flushPackageRestrictionsAsUserInternalLocked(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.Settings $r1;
        android.util.ArraySet $r2, $r4;
        java.lang.Integer $r3;
        boolean $z1;
        android.os.Handler $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r1.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(i0);

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>($r3);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        $z1 = virtualinvoke $r4.<android.util.ArraySet: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(14);

     label1:
        return;
    }

    private android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0, $z1, $z2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage $r6, $r7, $r9;
        android.content.pm.PackageUserState $r8;
        java.lang.String $r10, r12;
        android.content.pm.ApplicationInfo $r11, r14;
        android.content.pm.PackageInfo r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        r1 = (com.android.server.pm.PackageSetting) $r5;

        if r1 == null goto label7;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r1, i1, i2, i0);

        if $z1 == 0 goto label2;

        return null;

     label2:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r1, i1, i2);

        if $z2 == 0 goto label3;

        return null;

     label3:
        $r6 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r6 != null goto label5;

        r13 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r1, i0, i2);

        if r13 == null goto label4;

        $r11 = r13.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        return $r11;

     label4:
        return null;

     label5:
        $r7 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r8 = virtualinvoke r1.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i2);

        r14 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>($r7, i0, $r8, i2, r1);

        if r14 == null goto label6;

        $r9 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveExternalPackageNameLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>($r9);

        r14.<android.content.pm.ApplicationInfo: java.lang.String packageName> = $r10;

     label6:
        return r14;

     label7:
        return null;
    }

    private android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i7, $i8, $i10, $i11, $i12, i15;
        android.content.pm.PackageUserState r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.pm.PackageInfo $r4, r18;
        java.lang.String $r5, $r8, $r9, $r10, r20, r22;
        long $l4, $l5, $l6, $l9, $l13, $l14;
        com.android.server.pm.SharedUserSetting $r6, $r12;
        android.content.pm.ApplicationInfo $r7, $r11, r19;
        java.util.List $r13;
        com.android.server.pm.PackageSetting r14;
        com.android.server.pm.permission.PermissionsState r15;
        int[] r16;
        java.util.Set r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: com.android.server.pm.PackageSetting;

        i15 := @parameter1: int;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        if r14 != null goto label02;

        return null;

     label02:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r14, $i1, i0);

        if $z1 == 0 goto label03;

        return null;

     label03:
        $i2 = i15 & 8192;

        if $i2 == 0 goto label04;

        $z4 = virtualinvoke r14.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z4 == 0 goto label04;

        i15 = i15 | 4194304;

        goto label04;

     label04:
        r1 = virtualinvoke r14.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        r2 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if r2 == null goto label10;

        r15 = virtualinvoke r14.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $i12 = i15 & 256;

        if $i12 != 0 goto label05;

        r16 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        goto label06;

     label05:
        r16 = virtualinvoke r15.<com.android.server.pm.permission.PermissionsState: int[] computeGids(int)>(i0);

     label06:
        $r13 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r13);

        if $z3 == 0 goto label07;

        r17 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        goto label08;

     label07:
        r17 = virtualinvoke r15.<com.android.server.pm.permission.PermissionsState: java.util.Set getPermissions(int)>(i0);

     label08:
        $l14 = r14.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $l13 = r14.<com.android.server.pm.PackageSetting: long lastUpdateTime>;

        r18 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.PackageInfo generate(com.android.server.pm.parsing.pkg.AndroidPackage,int[],int,long,long,java.util.Set,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r2, r16, i15, $l14, $l13, r17, r1, i0, r14);

        if r18 != null goto label09;

        return null;

     label09:
        r19 = r18.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r20 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveExternalPackageNameLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>(r2);

        r19.<android.content.pm.ApplicationInfo: java.lang.String packageName> = r20;

        r18.<android.content.pm.PackageInfo: java.lang.String packageName> = r20;

        return r18;

     label10:
        $i3 = i15 & 8192;

        if $i3 == 0 goto label13;

        $z2 = virtualinvoke r1.<android.content.pm.PackageUserState: boolean isAvailable(int)>(i15);

        if $z2 == 0 goto label13;

        $r4 = new android.content.pm.PackageInfo;

        specialinvoke $r4.<android.content.pm.PackageInfo: void <init>()>();

        $r5 = r14.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r4.<android.content.pm.PackageInfo: java.lang.String packageName> = $r5;

        $l4 = r14.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke $r4.<android.content.pm.PackageInfo: void setLongVersionCode(long)>($l4);

        $r6 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r6 == null goto label11;

        $r12 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        r22 = $r12.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        goto label12;

     label11:
        r22 = null;

     label12:
        $r4.<android.content.pm.PackageInfo: java.lang.String sharedUserId> = r22;

        $l5 = r14.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $r4.<android.content.pm.PackageInfo: long firstInstallTime> = $l5;

        $l6 = r14.<com.android.server.pm.PackageSetting: long lastUpdateTime>;

        $r4.<android.content.pm.PackageInfo: long lastUpdateTime> = $l6;

        $r7 = new android.content.pm.ApplicationInfo;

        specialinvoke $r7.<android.content.pm.ApplicationInfo: void <init>()>();

        $r8 = r14.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r7.<android.content.pm.ApplicationInfo: java.lang.String packageName> = $r8;

        $i7 = r14.<com.android.server.pm.PackageSetting: int appId>;

        $i8 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i7);

        $r7.<android.content.pm.ApplicationInfo: int uid> = $i8;

        $r9 = r14.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r7.<android.content.pm.ApplicationInfo: java.lang.String primaryCpuAbi> = $r9;

        $r10 = r14.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        $r7.<android.content.pm.ApplicationInfo: java.lang.String secondaryCpuAbi> = $r10;

        $l9 = r14.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke $r7.<android.content.pm.ApplicationInfo: void setVersionCode(long)>($l9);

        $i10 = r14.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $r7.<android.content.pm.ApplicationInfo: int flags> = $i10;

        $i11 = r14.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $r7.<android.content.pm.ApplicationInfo: int privateFlags> = $i11;

        $r11 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.ApplicationInfo,int,android.content.pm.PackageUserState,int)>($r7, i15, r1, i0);

        $r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo> = $r11;

        return $r4;

     label13:
        return null;
    }

    private java.lang.String getActiveLauncherPackageName(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.content.Intent $r1;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        java.lang.String $r5, r9;
        android.content.pm.ActivityInfo $r6;
        android.content.pm.ResolveInfo r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r4);

        r8 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>($r1, $r5, 65536, i0);

        if r8 != null goto label1;

        r9 = null;

        goto label2;

     label1:
        $r6 = r8.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r9 = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

     label2:
        return r9;
    }

    private android.content.pm.ActivityInfo getActivityInfoInternal(android.content.ComponentName, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.Object r1, $r8;
        android.content.pm.parsing.component.ParsedActivity r2;
        com.android.server.pm.PackageSetting r3;
        com.android.server.pm.UserManagerService $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.pm.ComponentResolver $r5;
        android.util.ArrayMap $r6;
        java.lang.String $r7, $r12;
        android.content.ComponentName $r9, r16;
        com.android.server.pm.Settings $r10, $r11;
        android.content.pm.PackageUserState $r13, r20;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r14;
        java.lang.Throwable $r15;
        com.android.server.pm.parsing.pkg.AndroidPackage r17;
        android.content.pm.ActivityInfo r18, r19, r21;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: android.content.ComponentName;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i4, i1);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isRecentsAccessingChildProfiles(int,int)>($i2, i1);

        if $z1 != 0 goto label02;

        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r14.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i3, i1, 0, 0, "get activity info");

     label02:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r2 = virtualinvoke $r5.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedActivity getActivity(android.content.ComponentName)>(r16);

     label04:
        if r2 != null goto label05;

        r17 = null;

        goto label06;

     label05:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getPackageName()>();

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r7);

        r17 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r8;

     label06:
        if r17 == null goto label15;

     label07:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z3 = virtualinvoke $r10.<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedMainComponent,int,int)>(r17, r2, i5, i1);

        if $z3 == 0 goto label15;

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = virtualinvoke r16.<android.content.ComponentName: java.lang.String getPackageName()>();

        r3 = virtualinvoke $r11.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r12);

     label08:
        if r3 != null goto label11;

     label09:
        exitmonitor r1;

     label10:
        return null;

     label11:
        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r3, i0, r16, 1, i1);

        if $z4 == 0 goto label13;

        exitmonitor r1;

     label12:
        return null;

     label13:
        $r13 = virtualinvoke r3.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i1);

        r18 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ActivityInfo generateActivityInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedActivity,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r17, r2, i5, $r13, i1, r3);

        exitmonitor r1;

     label14:
        return r18;

     label15:
        $r9 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName>;

        $z2 = virtualinvoke $r9.<android.content.ComponentName: boolean equals(java.lang.Object)>(r16);

        if $z2 == 0 goto label17;

        r19 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        r20 = new android.content.pm.PackageUserState;

        specialinvoke r20.<android.content.pm.PackageUserState: void <init>()>();

        r21 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.ActivityInfo,int,android.content.pm.PackageUserState,int)>(r19, i5, r20, i1);

        exitmonitor r1;

     label16:
        return r21;

     label17:
        exitmonitor r1;

     label18:
        return null;

     label19:
        $r15 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r15;

        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private static java.util.List getAllowedSharedLibInfos(com.android.server.pm.PackageManagerService$ScanResult, java.util.Map)
    {
        java.util.Map r0;
        com.android.server.pm.parsing.pkg.ParsedPackage r1;
        boolean z0, $z1, $z2, $z4, z5, $z6;
        java.util.Iterator r3;
        com.android.server.pm.PackageManagerService$ScanRequest $r4, $r40, $r42, $r43;
        android.content.pm.SharedLibraryInfo $r5, $r6, $r45, r51;
        com.android.server.pm.PackageSetting $r7, $r41, r49;
        com.android.server.pm.pkg.PackageStateUnserialized $r8;
        java.util.ArrayList $r9;
        java.util.List $r10, $r11, $r22, $r39, $r44, $r46, $r47;
        int $i0;
        java.lang.Object $r12;
        java.lang.StringBuilder $r13, $r23, $r32;
        java.lang.String $r15, $r20, $r25, $r30, $r34, $r37, r52;
        com.android.server.pm.parsing.pkg.AndroidPackage $r21, $r31, $r38;
        com.android.server.pm.PackageManagerService$ScanResult r48;

        r48 := @parameter0: com.android.server.pm.PackageManagerService$ScanResult;

        r0 := @parameter1: java.util.Map;

        $r4 = r48.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r1 = $r4.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r5 = r48.<com.android.server.pm.PackageManagerService$ScanResult: android.content.pm.SharedLibraryInfo staticSharedLibraryInfo>;

        if $r5 != null goto label01;

        $r47 = r48.<com.android.server.pm.PackageManagerService$ScanResult: java.util.List dynamicSharedLibraryInfos>;

        if $r47 != null goto label01;

        return null;

     label01:
        $r6 = r48.<com.android.server.pm.PackageManagerService$ScanResult: android.content.pm.SharedLibraryInfo staticSharedLibraryInfo>;

        if $r6 == null goto label02;

        $r45 = r48.<com.android.server.pm.PackageManagerService$ScanResult: android.content.pm.SharedLibraryInfo staticSharedLibraryInfo>;

        $r46 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r45);

        return $r46;

     label02:
        $z1 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isSystem()>();

        if $z1 == 0 goto label03;

        $r44 = r48.<com.android.server.pm.PackageManagerService$ScanResult: java.util.List dynamicSharedLibraryInfos>;

        if $r44 == null goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        if z5 != 0 goto label05;

        return null;

     label05:
        $r7 = r48.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r8 = virtualinvoke $r7.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z0 = virtualinvoke $r8.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if z0 == 0 goto label07;

        $r40 = r48.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r41 = $r40.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting disabledPkgSetting>;

        if $r41 != null goto label06;

        $r43 = r48.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r49 = $r43.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting oldPkgSetting>;

        goto label08;

     label06:
        $r42 = r48.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r49 = $r42.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting disabledPkgSetting>;

        goto label08;

     label07:
        r49 = null;

     label08:
        if z0 == 0 goto label10;

        $r31 = r49.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r31 == null goto label09;

        $r38 = r49.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r39 = interfaceinvoke $r38.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        if $r39 != null goto label10;

     label09:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r34 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" declares libraries that are not declared on the system image; skipping");

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r37);

        return null;

     label10:
        $r9 = new java.util.ArrayList;

        $r10 = r48.<com.android.server.pm.PackageManagerService$ScanResult: java.util.List dynamicSharedLibraryInfos>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i0);

        $r11 = r48.<com.android.server.pm.PackageManagerService$ScanResult: java.util.List dynamicSharedLibraryInfos>;

        r3 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label14;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r51 = (android.content.pm.SharedLibraryInfo) $r12;

        r52 = virtualinvoke r51.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        if z0 == 0 goto label12;

        $r21 = r49.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r22 = interfaceinvoke $r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        $z4 = interfaceinvoke $r22.<java.util.List: boolean contains(java.lang.Object)>(r52);

        if $z4 != 0 goto label12;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r25 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" declares library ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is not declared on system image; skipping");

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r30);

        goto label11;

     label12:
        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean sharedLibExists(java.lang.String,long,java.util.Map)>(r52, -1L, r0);

        if $z2 == 0 goto label13;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r15 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" declares library ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that already exists; skipping");

        $r20 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r20);

        goto label11;

     label13:
        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r51);

        goto label11;

     label14:
        return $r9;
    }

    private android.content.pm.ApplicationInfo getApplicationInfoInternal(java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.Object r1, $r4, $r10;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.util.ArrayMap $r3, $r9;
        java.lang.String $r5, $r6, $r12, r15, r16;
        com.android.server.pm.ApexManager $r7;
        com.android.server.pm.Settings $r8;
        android.content.pm.PackageUserState $r11;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r13;
        java.lang.Throwable $r14;
        com.android.server.pm.parsing.pkg.AndroidPackage r17;
        com.android.server.pm.PackageSetting r18;
        android.content.pm.ApplicationInfo r19, r21, r22, r23;
        byte b9;
        android.content.pm.PackageInfo r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForApplication(int,int)>(i8, i1);

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isRecentsAccessingChildProfiles(int,int)>($i3, i1);

        if $z1 != 0 goto label02;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r13.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i7, i1, 0, 0, "get application info");

     label02:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        r16 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>(r15, -1L);

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label04:
        if r17 == null goto label18;

     label05:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r18 = (com.android.server.pm.PackageSetting) $r10;

     label06:
        if r18 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r18, i0, i1, i2);

        if $z4 == 0 goto label11;

        exitmonitor r1;

     label10:
        return null;

     label11:
        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r18, i0, i1);

        if $z5 == 0 goto label13;

        exitmonitor r1;

     label12:
        return null;

     label13:
        $r11 = virtualinvoke r18.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i1);

        r19 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r17, i2, $r11, i1, r18);

     label14:
        if r19 == null goto label16;

     label15:
        $r12 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveExternalPackageNameLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>(r17);

        r19.<android.content.pm.ApplicationInfo: java.lang.String packageName> = $r12;

     label16:
        exitmonitor r1;

     label17:
        return r19;

     label18:
        $i4 = 1073741824 & i2;

        if $i4 == 0 goto label25;

        b9 = 1;

        $i6 = 1048576 & i2;

        if $i6 == 0 goto label19;

        b9 = 2;

     label19:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        r20 = virtualinvoke $r7.<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r16, b9);

     label20:
        if r20 != null goto label23;

     label21:
        exitmonitor r1;

     label22:
        return null;

     label23:
        r21 = r20.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        exitmonitor r1;

     label24:
        return r21;

     label25:
        $r5 = "android";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r16);

        if $z2 != 0 goto label32;

        $r6 = "system";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r16);

        if $z3 == 0 goto label27;

     label26:
        goto label32;

     label27:
        $i5 = 4202496 & i2;

        if $i5 == 0 goto label30;

     label28:
        r22 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String,int,int,int)>(r16, i2, i0, i1);

        exitmonitor r1;

     label29:
        return r22;

     label30:
        exitmonitor r1;

     label31:
        return null;

     label32:
        r23 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo mAndroidApplication>;

        exitmonitor r1;

     label33:
        return r23;

     label34:
        $r14 := @caughtexception;

     label35:
        exitmonitor r1;

     label36:
        throw $r14;

        catch java.lang.Throwable from label03 to label04 with label34;
        catch java.lang.Throwable from label05 to label06 with label34;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.Throwable from label09 to label10 with label34;
        catch java.lang.Throwable from label11 to label12 with label34;
        catch java.lang.Throwable from label13 to label14 with label34;
        catch java.lang.Throwable from label15 to label16 with label34;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.Throwable from label19 to label20 with label34;
        catch java.lang.Throwable from label21 to label22 with label34;
        catch java.lang.Throwable from label23 to label24 with label34;
        catch java.lang.Throwable from label25 to label26 with label34;
        catch java.lang.Throwable from label28 to label29 with label34;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label35 to label36 with label34;
    }

    private android.util.SparseArray getAppsWithSharedUserIdsLocked()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r2, $r7;
        java.util.Iterator r3;
        android.util.SparseArray $r4;
        com.android.server.pm.Settings $r5;
        java.util.Collection $r6;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        com.android.server.pm.SharedUserSetting r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.Settings: java.util.Collection getAllSharedUsersLPw()>();

        r3 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.pm.SharedUserSetting) $r7;

        $i0 = r10.<com.android.server.pm.SharedUserSetting: int userId>;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        $r8 = r10.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i1, $r8);

     label3:
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        return $r4;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private int[] getBlockUninstallForUsers(java.lang.String, int[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int[] r2, r3, r4;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        r3 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = r2[i2];

        r4 = r3;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean getBlockUninstallForUser(java.lang.String,int)>(r1, i1);

        if $z0 == 0 goto label2;

        r4 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r3, i1);

     label2:
        i2 = i2 + 1;

        r3 = r4;

        goto label1;

     label3:
        return r3;
    }

    private com.android.server.pm.PackageManagerService$CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(android.content.Intent, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, $i4, $i7, $i8, i9, i10;
        com.android.server.pm.UserManagerService $r1;
        boolean $z0, $z1, $z2;
        com.android.server.pm.ComponentResolver $r2;
        java.lang.Object $r3, $r7;
        android.content.pm.ActivityInfo $r4;
        com.android.server.pm.Settings $r5;
        android.util.ArrayMap $r6;
        long $l5, $l6;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo $r8, r14;
        android.content.IntentFilter $r9;
        android.content.pm.ResolveInfo $r10, r15;
        android.content.Intent r11;
        java.lang.String r12, r16;
        java.util.List r13;
        com.android.server.pm.PackageSetting r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: android.content.Intent;

        r12 := @parameter1: java.lang.String;

        i9 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("allow_parent_profile_app_linking", i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r13 = virtualinvoke $r2.<com.android.server.pm.ComponentResolver: java.util.List queryActivities(android.content.Intent,java.lang.String,int,int)>(r11, r12, i9, i1);

        if r13 == null goto label10;

        $z1 = interfaceinvoke r13.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        goto label10;

     label02:
        r14 = null;

        i2 = interfaceinvoke r13.<java.util.List: int size()>();

        i10 = 0;

     label03:
        if i10 >= i2 goto label08;

        $r3 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i10);

        r15 = (android.content.pm.ResolveInfo) $r3;

        $z2 = r15.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

        if $z2 == 0 goto label04;

        goto label07;

     label04:
        $r4 = r15.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r16 = $r4.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (com.android.server.pm.PackageSetting) $r7;

        if r17 != null goto label05;

        goto label07;

     label05:
        $l5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>(r17, i1);

        $l6 = $l5 >> 32;

        i3 = (int) $l6;

        if r14 != null goto label06;

        $r8 = new com.android.server.pm.PackageManagerService$CrossProfileDomainInfo;

        specialinvoke $r8.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: void <init>(com.android.server.pm.PackageManagerService$1)>(null);

        r14 = $r8;

        $r9 = new android.content.IntentFilter;

        specialinvoke $r9.<android.content.IntentFilter: void <init>()>();

        $r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo createForwardingResolveInfoUnchecked(android.content.IntentFilter,int,int)>($r9, i0, i1);

        $r8.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo> = $r10;

        $r8.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus> = i3;

        goto label07;

     label06:
        $i7 = r14.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        $i8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int bestDomainVerificationStatus(int,int)>(i3, $i7);

        r14.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus> = $i8;

     label07:
        i10 = i10 + 1;

        goto label03;

     label08:
        if r14 == null goto label09;

        $i4 = r14.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: int bestDomainVerificationStatus>;

        if $i4 != 3 goto label09;

        return null;

     label09:
        return r14;

     label10:
        return null;
    }

    private static void getDefaultDisplayMetrics(android.hardware.display.DisplayManager, android.util.DisplayMetrics)
    {
        android.hardware.display.DisplayManager r0;
        android.util.DisplayMetrics r1;
        android.view.Display $r2;

        r0 := @parameter0: android.hardware.display.DisplayManager;

        r1 := @parameter1: android.util.DisplayMetrics;

        $r2 = virtualinvoke r0.<android.hardware.display.DisplayManager: android.view.Display getDisplay(int)>(0);

        virtualinvoke $r2.<android.view.Display: void getMetrics(android.util.DisplayMetrics)>(r1);

        return;
    }

    private android.content.ComponentName getDefaultHomeActivity(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, i3, i4, i5, i6;
        android.content.pm.ResolveInfo r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        android.content.pm.ActivityInfo $r5;
        android.content.ComponentName r6, r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i3 := @parameter0: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r6 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivitiesAsUser(java.util.List,int)>($r3, i3);

        if r6 == null goto label1;

        return r6;

     label1:
        i4 = -2147483648;

        r7 = null;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i5 = 0;

     label2:
        if i5 >= i0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (android.content.pm.ResolveInfo) $r4;

        $i1 = r2.<android.content.pm.ResolveInfo: int priority>;

        if $i1 <= i4 goto label3;

        $r5 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r7 = virtualinvoke $r5.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

        i6 = r2.<android.content.pm.ResolveInfo: int priority>;

        goto label4;

     label3:
        i6 = i4;

        $i2 = r2.<android.content.pm.ResolveInfo: int priority>;

        if $i2 != i4 goto label4;

        r7 = null;

        i6 = i4;

     label4:
        i5 = i5 + 1;

        i4 = i6;

        goto label2;

     label5:
        return r7;
    }

    private int getDefaultIntegrityVerificationResponse()
    {
        com.android.server.pm.PackageManagerService r0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        return -1;
    }

    private int getDefaultVerificationResponse(android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.UserHandle r1;
        com.android.server.pm.UserManagerService $r2;
        int $i0, $i1;
        boolean $z0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.os.UserHandle;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("ensure_verify_apps", $i0);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "verifier_default_response", 1);

        return $i1;
    }

    private java.lang.String getDeviceConfiguratorPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039877);

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    private java.lang.String getDocumenterPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent $r1;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r6;
        java.lang.String $r11, $r15, r17;
        java.lang.Object $r12;
        android.content.pm.ResolveInfo $r13;
        android.content.pm.ComponentInfo $r14;
        java.util.List r18;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.OPEN_DOCUMENT");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.OPENABLE");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setType(java.lang.String)>("*/*");

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r17 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r18 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r1, r17, 1835520, $i0);

        $i1 = interfaceinvoke r18.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $r12 = interfaceinvoke r18.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (android.content.pm.ResolveInfo) $r12;

        $r14 = virtualinvoke $r13.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r15 = $r14.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r15;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There should probably be exactly one documenter; found ");

        $i2 = interfaceinvoke r18.<java.util.List: int size()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": matches=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r11);

        return null;
    }

    private long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int i0, $i4;
        long l1, $l2, $l5, l6;
        byte $b3;
        android.content.pm.IntentFilterVerificationInfo $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        i0 := @parameter1: int;

        l1 = virtualinvoke r1.<com.android.server.pm.PackageSetting: long getDomainVerificationStatusForUser(int)>(i0);

        l6 = l1;

        $l2 = l1 >> 32;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label1;

        l6 = l1;

        $r2 = virtualinvoke r1.<com.android.server.pm.PackageSetting: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationInfo()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.server.pm.PackageSetting: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationInfo()>();

        $i4 = virtualinvoke $r3.<android.content.pm.IntentFilterVerificationInfo: int getStatus()>();

        $l5 = (long) $i4;

        l6 = $l5 << 32;

     label1:
        return l6;
    }

    static java.lang.String getEncryptKey()
    {
        android.security.SystemKeyStore $r0, $r1;
        java.lang.Throwable $r2, $r7;
        java.lang.StringBuilder $r3, $r8;
        java.lang.String $r6, $r11, r12, r13, r14;

     label1:
        $r0 = staticinvoke <android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()>();

        r12 = virtualinvoke $r0.<android.security.SystemKeyStore: java.lang.String retrieveKeyHexString(java.lang.String)>("AppsOnSD");

     label2:
        r13 = r12;

        if r12 != null goto label7;

     label3:
        $r1 = staticinvoke <android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()>();

        r14 = virtualinvoke $r1.<android.security.SystemKeyStore: java.lang.String generateNewKeyHexString(int,java.lang.String,java.lang.String)>(128, "AES", "AppsOnSD");

     label4:
        r13 = r14;

        if r14 != null goto label7;

     label5:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Failed to create encryption keys");

     label6:
        return null;

     label7:
        return r13;

     label8:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to retrieve encryption keys with exception: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r6);

        return null;

     label9:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create encryption keys with exception: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r11);

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label9;
        catch java.io.IOException from label1 to label2 with label8;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label9;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label9;
        catch java.io.IOException from label5 to label6 with label8;
    }

    private android.content.IntentFilter getHomeFilter()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.IntentFilter $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r2.<android.content.IntentFilter: void addCategory(java.lang.String)>("android.intent.category.HOME");

        virtualinvoke $r2.<android.content.IntentFilter: void addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        return $r2;
    }

    private android.content.Intent getHomeIntent()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        return $r2;
    }

    private com.android.server.pm.InstallSource getInstallSourceLocked(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        com.android.server.pm.InstallSource $r6, $r8;
        com.android.server.pm.ApexManager $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.pm.PackageSetting) $r5;

        if r2 != null goto label1;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        $z1 = virtualinvoke $r7.<com.android.server.pm.ApexManager: boolean isApexPackage(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        $r8 = <com.android.server.pm.InstallSource: com.android.server.pm.InstallSource EMPTY>;

        return $r8;

     label1:
        if r2 == null goto label3;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, i0, $i1);

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r6 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        return $r6;

     label3:
        return null;
    }

    private java.util.List getInstalledApplicationsListInternal(int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.Object r1, $r9, $r18;
        com.android.server.pm.PackageSetting r2, r36;
        java.lang.String $r3, $r10, $r12, $r20, $r24;
        com.android.server.pm.UserManagerService $r4;
        boolean $z0, $z1, $z2, $z4, $z6, $z7, z8, $z9, $z10;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        android.util.ArrayMap $r6, $r7, $r14, $r16;
        java.util.Collection $r8, $r17;
        android.content.pm.PackageUserState $r11, $r22;
        com.android.server.pm.Settings $r13, $r15;
        com.android.server.pm.parsing.pkg.AndroidPackage $r19, $r21, $r23, r35;
        java.util.List $r25, $r26;
        java.lang.Throwable $r27;
        java.util.ArrayList r28, r32, r33;
        java.util.Iterator r29, r34;
        android.content.pm.ApplicationInfo r30, r31, r37;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r3 == null goto label01;

        $r26 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r26;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label02;

        $r25 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r25;

     label02:
        i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForApplication(int,int)>(i8, i0);

        $i4 = 4202496 & i2;

        if $i4 == 0 goto label03;

        z8 = 1;

        goto label04;

     label03:
        z8 = 0;

     label04:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "get installed application info");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if z8 == 0 goto label23;

     label05:
        r28 = new java.util.ArrayList;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r13.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i7 = virtualinvoke $r14.<android.util.ArrayMap: int size()>();

        specialinvoke r28.<java.util.ArrayList: void <init>(int)>($i7);

        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r16 = $r15.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r17 = virtualinvoke $r16.<android.util.ArrayMap: java.util.Collection values()>();

        r29 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z9 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label22;

        $r18 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.pm.PackageSetting) $r18;

     label07:
        i9 = i2;

     label08:
        $z4 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z4 == 0 goto label10;

     label09:
        i9 = i2 | 4194304;

     label10:
        $r19 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r19 == null goto label18;

        $z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r2, i1, i0, i2);

        if $z6 == 0 goto label12;

     label11:
        goto label06;

     label12:
        $z7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, i1, i0);

        if $z7 == 0 goto label14;

     label13:
        goto label06;

     label14:
        $r21 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r22 = virtualinvoke r2.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        r30 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>($r21, i9, $r22, i0, r2);

     label15:
        r31 = r30;

        if r30 == null goto label19;

     label16:
        $r23 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r24 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveExternalPackageNameLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>($r23);

        r30.<android.content.pm.ApplicationInfo: java.lang.String packageName> = $r24;

     label17:
        r31 = r30;

        goto label19;

     label18:
        $r20 = r2.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r31 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String,int,int,int)>($r20, i9, i1, i0);

     label19:
        if r31 == null goto label21;

     label20:
        virtualinvoke r28.<java.util.ArrayList: boolean add(java.lang.Object)>(r31);

     label21:
        goto label06;

     label22:
        r32 = r28;

        goto label35;

     label23:
        r33 = new java.util.ArrayList;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i5 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        specialinvoke r33.<java.util.ArrayList: void <init>(int)>($i5);

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.util.Collection values()>();

        r34 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>();

     label24:
        r32 = r33;

     label25:
        $z10 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label35;

        $r9 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r9;

        $r10 = interfaceinvoke r35.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r36 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r10);

     label26:
        if r36 == null goto label34;

     label27:
        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r36, $i6, i0, i2);

        if $z1 == 0 goto label29;

     label28:
        goto label24;

     label29:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r36, i1, i0);

        if $z2 == 0 goto label31;

     label30:
        goto label24;

     label31:
        $r11 = virtualinvoke r36.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        r37 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r35, i2, $r11, i0, r36);

     label32:
        if r37 == null goto label34;

     label33:
        $r12 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveExternalPackageNameLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>(r35);

        r37.<android.content.pm.ApplicationInfo: java.lang.String packageName> = $r12;

        virtualinvoke r33.<java.util.ArrayList: boolean add(java.lang.Object)>(r37);

     label34:
        goto label24;

     label35:
        exitmonitor r1;

     label36:
        return r32;

     label37:
        $r27 := @caughtexception;

     label38:
        exitmonitor r1;

     label39:
        throw $r27;

        catch java.lang.Throwable from label05 to label06 with label37;
        catch java.lang.Throwable from label06 to label07 with label37;
        catch java.lang.Throwable from label08 to label09 with label37;
        catch java.lang.Throwable from label10 to label11 with label37;
        catch java.lang.Throwable from label12 to label13 with label37;
        catch java.lang.Throwable from label14 to label15 with label37;
        catch java.lang.Throwable from label16 to label17 with label37;
        catch java.lang.Throwable from label18 to label19 with label37;
        catch java.lang.Throwable from label20 to label21 with label37;
        catch java.lang.Throwable from label23 to label24 with label37;
        catch java.lang.Throwable from label25 to label26 with label37;
        catch java.lang.Throwable from label27 to label28 with label37;
        catch java.lang.Throwable from label29 to label30 with label37;
        catch java.lang.Throwable from label31 to label32 with label37;
        catch java.lang.Throwable from label33 to label34 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    private android.content.pm.ActivityInfo getInstantAppInstallerLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, i5, i6;
        java.lang.String r2, $r13, $r21, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String[] $r3, $r30, r31;
        android.content.Intent $r4;
        java.io.File $r6;
        android.net.Uri $r7;
        java.lang.StringBuilder $r9, $r26;
        java.lang.RuntimeException $r12;
        java.lang.Object $r14, $r18, $r23;
        android.content.pm.ResolveInfo $r15, r36;
        android.content.pm.ComponentInfo $r16;
        android.content.pm.ActivityInfo $r17, $r20;
        com.android.server.pm.Settings $r19;
        android.util.ArrayMap $r22;
        com.android.server.pm.permission.PermissionsState $r24;
        java.util.List r32, r33;
        java.util.Iterator r35;
        com.android.server.pm.PackageSetting r37;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $z0 = <android.os.Build: boolean IS_ENG>;

        if $z0 == 0 goto label01;

        $r30 = newarray (java.lang.String)[2];

        $r30[0] = "android.intent.action.INSTALL_INSTANT_APP_PACKAGE_TEST";

        $r30[1] = "android.intent.action.INSTALL_INSTANT_APP_PACKAGE";

        r31 = $r30;

        goto label02;

     label01:
        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "android.intent.action.INSTALL_INSTANT_APP_PACKAGE";

        r31 = $r3;

     label02:
        $z1 = <android.os.Build: boolean IS_ENG>;

        if $z1 != 0 goto label03;

        i5 = 1048576;

        goto label04;

     label03:
        i5 = 0;

     label04:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("foo.apk");

        $r7 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r6);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r7, "application/vnd.android.package-archive");

        r32 = null;

        i0 = lengthof r31;

        i6 = 0;

     label05:
        if i6 >= i0 goto label07;

        r2 = r31[i6];

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setAction(java.lang.String)>(r2);

        $i3 = 786944 | i5;

        r33 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r4, "application/vnd.android.package-archive", $i3, 0);

        r32 = r33;

        $z4 = interfaceinvoke r33.<java.util.List: boolean isEmpty()>();

        if $z4 == 0 goto label07;

        $z5 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z5 == 0 goto label06;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instant App installer not found with ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r29);

     label06:
        i6 = i6 + 1;

        r32 = r33;

        goto label05;

     label07:
        r35 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z6 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r18 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (android.content.pm.ResolveInfo) $r18;

        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r22 = $r19.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r20 = r36.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r21 = $r20.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r23 = virtualinvoke $r22.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r21);

        r37 = (com.android.server.pm.PackageSetting) $r23;

        if r37 == null goto label09;

        $r24 = virtualinvoke r37.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z2 = virtualinvoke $r24.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>("android.permission.INSTALL_PACKAGES", 0);

        if $z2 != 0 goto label08;

        $z3 = <android.os.Build: boolean IS_ENG>;

        if $z3 == 0 goto label09;

        goto label08;

     label09:
        interfaceinvoke r35.<java.util.Iterator: void remove()>();

        goto label08;

     label10:
        $i1 = interfaceinvoke r32.<java.util.List: int size()>();

        if $i1 != 0 goto label11;

        return null;

     label11:
        $i2 = interfaceinvoke r32.<java.util.List: int size()>();

        if $i2 != 1 goto label12;

        $r14 = interfaceinvoke r32.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (android.content.pm.ResolveInfo) $r14;

        $r16 = virtualinvoke $r15.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r17 = (android.content.pm.ActivityInfo) $r16;

        return $r17;

     label12:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There must be at most one ephemeral installer; found ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r12 = new java.lang.RuntimeException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    private java.lang.String getInstantAppPackageName(int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1, $z2;
        com.android.server.pm.Settings $r2;
        int $i0, i1, i2, i3;
        com.android.server.pm.parsing.pkg.AndroidPackage $r3;
        android.util.SparseIntArray $r4;
        java.lang.Throwable $r5;
        com.android.server.pm.SettingBase r6;
        java.lang.String r7;
        com.android.server.pm.PackageSetting r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i1 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i2 = i1;

     label01:
        $z1 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i1);

        if $z1 == 0 goto label02;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mIsolatedOwners>;

        i2 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int)>(i1);

     label02:
        i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r6 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i3);

        z0 = r6 instanceof com.android.server.pm.PackageSetting;

     label03:
        r7 = null;

        if z0 == 0 goto label08;

     label04:
        r8 = (com.android.server.pm.PackageSetting) r6;

     label05:
        $i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        $z2 = virtualinvoke r8.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>($i0);

        if $z2 == 0 goto label06;

        $r3 = r8.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r7 = interfaceinvoke $r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

     label06:
        exitmonitor r1;

     label07:
        return r7;

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private android.util.Pair getInstantAppResolverLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r2, $r15, $r21, $r27;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        int $i0, $i1, i7, i8, i9, i10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.content.Intent $r6;
        android.util.ArraySet $r7;
        java.util.List $r8, r29;
        java.lang.Object $r9;
        android.content.pm.ServiceInfo $r10, $r11, $r14;
        android.util.Pair $r12;
        android.content.ComponentName $r13;
        java.lang.StringBuilder $r16, $r22;
        java.lang.String[] r28;
        android.content.pm.ResolveInfo r30;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r28 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236031);

        $i0 = lengthof r28;

        if $i0 != 0 goto label02;

        $z7 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z7 != 0 goto label02;

        $z8 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z8 == 0 goto label01;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", "Ephemeral resolver NOT found; empty package list");

     label01:
        return null;

     label02:
        i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z0 != 0 goto label03;

        i8 = 1048576;

        goto label04;

     label03:
        i8 = 0;

     label04:
        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.RESOLVE_INSTANT_APP_PACKAGE");

        $i1 = i8 | 786432;

        r29 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentServicesInternal(android.content.Intent,java.lang.String,int,int,int,boolean)>($r6, null, $i1, 0, i7, 0);

        i9 = interfaceinvoke r29.<java.util.List: int size()>();

        if i9 != 0 goto label06;

        $z6 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z6 == 0 goto label05;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", "Ephemeral resolver NOT found; no matching intent filters");

     label05:
        return null;

     label06:
        $r7 = new android.util.ArraySet;

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r28);

        specialinvoke $r7.<android.util.ArraySet: void <init>(java.util.Collection)>($r8);

        i10 = 0;

     label07:
        if i10 >= i9 goto label12;

        $r9 = interfaceinvoke r29.<java.util.List: java.lang.Object get(int)>(i10);

        r30 = (android.content.pm.ResolveInfo) $r9;

        $r10 = r30.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        if $r10 != null goto label08;

        goto label09;

     label08:
        $r11 = r30.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        r2 = $r11.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z2 != 0 goto label10;

        $z4 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z4 != 0 goto label10;

        $z5 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z5 == 0 goto label09;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ephemeral resolver not in allowed package list; pkg: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", info:");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r27);

     label09:
        i10 = i10 + 1;

        goto label07;

     label10:
        $z3 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z3 == 0 goto label11;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ephemeral resolver found; pkg: ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", info:");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r21);

     label11:
        $r12 = new android.util.Pair;

        $r13 = new android.content.ComponentName;

        $r14 = r30.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r15 = $r14.<android.content.pm.ServiceInfo: java.lang.String name>;

        specialinvoke $r13.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r2, $r15);

        specialinvoke $r12.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r13, "android.intent.action.RESOLVE_INSTANT_APP_PACKAGE");

        return $r12;

     label12:
        $z1 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z1 == 0 goto label13;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Ephemeral resolver NOT found");

     label13:
        return null;
    }

    private android.content.ComponentName getInstantAppResolverSettingsLPr(android.content.ComponentName)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent $r1, $r2, $r4;
        java.lang.String $r3;
        boolean $z0;
        java.lang.Object $r5;
        android.content.pm.ResolveInfo $r6;
        android.content.pm.ComponentInfo $r7;
        android.content.ComponentName $r8, r9;
        java.util.List r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: android.content.ComponentName;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INSTANT_APP_RESOLVER_SETTINGS");

        $r2 = virtualinvoke $r1.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        $r3 = virtualinvoke r9.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r4 = virtualinvoke $r2.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r3);

        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r4, null, 786432, 0);

        $z0 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r5 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (android.content.pm.ResolveInfo) $r5;

        $r7 = virtualinvoke $r6.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r8 = virtualinvoke $r7.<android.content.pm.ComponentInfo: android.content.ComponentName getComponentName()>();

        return $r8;
    }

    private long getIntegrityVerificationTimeout()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        long $l0, $l1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, "app_integrity_verification_timeout", 30000L);

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l0, 30000L);

        return $l1;
    }

    private android.content.ComponentName getIntentFilterVerifierComponentNameLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        int i0, $i2, $i3, $i4, i5;
        android.content.pm.ResolveInfo r2, r9, r10;
        android.content.Intent $r3;
        android.content.pm.ComponentInfo $r4, $r7;
        android.content.ComponentName $r5;
        java.lang.Object $r6;
        java.lang.String $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INTENT_FILTER_NEEDS_VERIFICATION");

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceiversInternal(android.content.Intent,java.lang.String,int,int,boolean)>($r3, "application/vnd.android.package-archive", 1835008, 0, 0);

        r9 = null;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = 0;

     label1:
        if i5 >= i0 goto label5;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (android.content.pm.ResolveInfo) $r6;

        $r7 = virtualinvoke r2.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r8 = $r7.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        $i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>("android.permission.INTENT_FILTER_VERIFICATION_AGENT", $r8, 0);

        if $i2 == 0 goto label2;

        r10 = r9;

        goto label4;

     label2:
        if r9 == null goto label3;

        r10 = r9;

        $i4 = r2.<android.content.pm.ResolveInfo: int priority>;

        $i3 = r9.<android.content.pm.ResolveInfo: int priority>;

        if $i4 <= $i3 goto label4;

     label3:
        r10 = r2;

     label4:
        i5 = i5 + 1;

        r9 = r10;

        goto label1;

     label5:
        if r9 == null goto label6;

        $r4 = virtualinvoke r9.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r5 = virtualinvoke $r4.<android.content.pm.ComponentInfo: android.content.ComponentName getComponentName()>();

        return $r5;

     label6:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Intent filter verifier not found");

        return null;
    }

    private android.content.pm.SharedLibraryInfo getLatestSharedLibraVersionLPr(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        android.util.LongSparseArray r2;
        int i0, i6;
        long l1, $l3, l5, l7;
        android.util.ArrayMap $r3;
        java.lang.String $r4;
        java.lang.Object $r5, $r6;
        byte $b2, $b4;
        android.content.pm.SharedLibraryInfo $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $r5 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (android.util.LongSparseArray) $r5;

        if r2 != null goto label1;

        return null;

     label1:
        l5 = -1L;

        i0 = virtualinvoke r2.<android.util.LongSparseArray: int size()>();

        i6 = 0;

     label2:
        if i6 >= i0 goto label4;

        l1 = virtualinvoke r2.<android.util.LongSparseArray: long keyAt(int)>(i6);

        l7 = l5;

        $l3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

        $b4 = l1 cmp $l3;

        if $b4 >= 0 goto label3;

        l7 = staticinvoke <java.lang.Math: long max(long,long)>(l5, l1);

     label3:
        i6 = i6 + 1;

        l5 = l7;

        goto label2;

     label4:
        $b2 = l5 cmp 0L;

        if $b2 < 0 goto label5;

        $r6 = virtualinvoke r2.<android.util.LongSparseArray: java.lang.Object get(long)>(l5);

        $r7 = (android.content.pm.SharedLibraryInfo) $r6;

        return $r7;

     label5:
        return null;
    }

    private java.util.List getMatchingCrossProfileIntentFilters(android.content.Intent, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0;
        com.android.server.pm.CrossProfileIntentResolver r3;
        com.android.server.pm.Settings $r4;
        android.util.SparseArray $r5;
        java.lang.Object $r6;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.SparseArray mCrossProfileIntentResolvers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.pm.CrossProfileIntentResolver) $r6;

        if r3 == null goto label1;

        $r7 = virtualinvoke r3.<com.android.server.pm.CrossProfileIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(r1, r2, 0, i0);

        return $r7;

     label1:
        return null;
    }

    private java.io.File getNextCodePath(java.io.File, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r6, $r9, $r15, r20;
        byte[] r2;
        java.security.SecureRandom $r3;
        java.lang.StringBuilder $r4, $r10;
        java.io.File $r8, $r14, r16;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: java.io.File;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r2 = newarray (byte)[16];

     label1:
        virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("~~");

        $r6 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r2, 10);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = new java.io.File;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r16, $r9);

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r3.<java.security.SecureRandom: void nextBytes(byte[])>(r2);

        r20 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r2, 10);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r14 = new java.io.File;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, $r15);

        return $r14;

     label2:
        goto label1;
    }

    private java.lang.String getOatDir(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.pkg.PackageStateUnserialized $r2;
        boolean $z0, $z1, $z2;
        java.io.File $r3, $r5;
        java.lang.String $r4, $r6;
        com.android.server.pm.parsing.pkg.AndroidPackage r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        $r2 = virtualinvoke r1.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z0 = virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        $z1 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean canHaveOatDir(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r7, $z0);

        if $z1 != 0 goto label1;

        return null;

     label1:
        $r3 = new java.io.File;

        $r4 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $z2 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label2;

        $r5 = staticinvoke <com.android.server.pm.PackageDexOptimizer: java.io.File getOatDir(java.io.File)>($r3);

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        return $r6;

     label2:
        return null;
    }

    private com.android.server.pm.PackageSetting getOriginalPackageLocked(com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageSetting r2;
        boolean $z0, $z1, $z2;
        java.util.List $r3, $r5;
        int $i0, i2;
        com.android.server.pm.Settings $r4;
        java.lang.Object $r6;
        java.lang.String $r7, $r10, $r11, $r14, $r17, $r21, $r24, $r26, r27;
        com.android.server.pm.SharedUserSetting $r8, $r9, $r20;
        java.lang.StringBuilder $r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r27 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isPackageRenamed(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r1, r27);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getOriginalPackages()>();

        $i0 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r3);

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label6;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getOriginalPackages()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2);

        $r7 = (java.lang.String) $r6;

        r2 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r7);

        if r2 == null goto label5;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage)>(r2, r1);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $r8 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r8 == null goto label4;

        $r9 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r10 = $r9.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        $r11 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 != 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to migrate data from ");

        $r14 = r2.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r17 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": old uid ");

        $r20 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r21 = $r20.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" differs from ");

        $r24 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r26);

        goto label5;

     label4:
        return r2;

     label5:
        i2 = i2 + -1;

        goto label2;

     label6:
        return null;
    }

    private static int getPackageExternalStorageType(android.os.storage.VolumeInfo, boolean)
    {
        boolean z0, $z1, $z2;
        android.os.storage.VolumeInfo r0;
        android.os.storage.DiskInfo r1;

        r0 := @parameter0: android.os.storage.VolumeInfo;

        z0 := @parameter1: boolean;

        if r0 == null goto label3;

        r1 = virtualinvoke r0.<android.os.storage.VolumeInfo: android.os.storage.DiskInfo getDisk()>();

        if r1 == null goto label3;

        $z1 = virtualinvoke r1.<android.os.storage.DiskInfo: boolean isSd()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z2 = virtualinvoke r1.<android.os.storage.DiskInfo: boolean isUsb()>();

        if $z2 == 0 goto label2;

        return 2;

     label2:
        if z0 == 0 goto label3;

        return 3;

     label3:
        return 0;
    }

    private android.content.pm.PackageInfo getPackageInfoInternal(java.lang.String, long, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.Object r1, $r5, $r9;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        android.util.ArrayMap $r4, $r8;
        com.android.server.pm.ApexManager $r6, $r12;
        com.android.server.pm.Settings $r7, $r11;
        java.lang.String $r10, r14, r15;
        java.lang.Throwable $r13;
        android.content.pm.PackageInfo r16, r18, r21, r23, r24;
        com.android.server.pm.PackageSetting r17, r20, r22;
        com.android.server.pm.parsing.pkg.AndroidPackage r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i9 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i2);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i9, i2);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i4, i2, 0, 0, "get package info");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        r15 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>(r14, l0);

     label03:
        $i5 = 2097152 & i3;

        if $i5 == 0 goto label04;

        z8 = 1;

        goto label05;

     label04:
        z8 = 0;

     label05:
        if z8 == 0 goto label16;

        $i8 = i3 & 1073741824;

        if $i8 == 0 goto label08;

     label06:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        r16 = virtualinvoke $r12.<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r15, 2);

        exitmonitor r1;

     label07:
        return r16;

     label08:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r17 = virtualinvoke $r11.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>(r15);

     label09:
        if r17 == null goto label16;

     label10:
        $z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r17, i1, i2, i3);

        if $z6 == 0 goto label12;

        exitmonitor r1;

     label11:
        return null;

     label12:
        $z7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r17, i1, i2);

        if $z7 == 0 goto label14;

        exitmonitor r1;

     label13:
        return null;

     label14:
        r18 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r17, i3, i2);

        exitmonitor r1;

     label15:
        return r18;

     label16:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        r19 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

     label17:
        if z8 == 0 goto label20;

        if r19 == null goto label20;

     label18:
        $z5 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z5 != 0 goto label20;

        exitmonitor r1;

     label19:
        return null;

     label20:
        if r19 == null goto label28;

     label21:
        $r10 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r20 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r10);

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r20, i1, i2, i3);

        if $z3 == 0 goto label23;

        exitmonitor r1;

     label22:
        return null;

     label23:
        if r20 == null goto label26;

     label24:
        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r20, i1, i2);

        if $z4 == 0 goto label26;

        exitmonitor r1;

     label25:
        return null;

     label26:
        r21 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r20, i3, i2);

        exitmonitor r1;

     label27:
        return r21;

     label28:
        if z8 != 0 goto label39;

        $i7 = 4202496 & i3;

        if $i7 == 0 goto label39;

     label29:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        r22 = (com.android.server.pm.PackageSetting) $r9;

     label30:
        if r22 != null goto label33;

     label31:
        exitmonitor r1;

     label32:
        return null;

     label33:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r22, i1, i2, i3);

        if $z1 == 0 goto label35;

        exitmonitor r1;

     label34:
        return null;

     label35:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r22, i1, i2);

        if $z2 == 0 goto label37;

        exitmonitor r1;

     label36:
        return null;

     label37:
        r23 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r22, i3, i2);

        exitmonitor r1;

     label38:
        return r23;

     label39:
        $i6 = 1073741824 & i3;

        if $i6 == 0 goto label42;

     label40:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        r24 = virtualinvoke $r6.<com.android.server.pm.ApexManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r15, 1);

        exitmonitor r1;

     label41:
        return r24;

     label42:
        exitmonitor r1;

     label43:
        return null;

     label44:
        $r13 := @caughtexception;

     label45:
        exitmonitor r1;

     label46:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label44;
        catch java.lang.Throwable from label06 to label07 with label44;
        catch java.lang.Throwable from label08 to label09 with label44;
        catch java.lang.Throwable from label10 to label11 with label44;
        catch java.lang.Throwable from label12 to label13 with label44;
        catch java.lang.Throwable from label14 to label15 with label44;
        catch java.lang.Throwable from label16 to label17 with label44;
        catch java.lang.Throwable from label18 to label19 with label44;
        catch java.lang.Throwable from label21 to label22 with label44;
        catch java.lang.Throwable from label24 to label25 with label44;
        catch java.lang.Throwable from label26 to label27 with label44;
        catch java.lang.Throwable from label29 to label30 with label44;
        catch java.lang.Throwable from label31 to label32 with label44;
        catch java.lang.Throwable from label33 to label34 with label44;
        catch java.lang.Throwable from label35 to label36 with label44;
        catch java.lang.Throwable from label37 to label38 with label44;
        catch java.lang.Throwable from label40 to label41 with label44;
        catch java.lang.Throwable from label42 to label43 with label44;
        catch java.lang.Throwable from label45 to label46 with label44;
    }

    private com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1, $r4;
        com.android.server.pm.Settings $r2;
        android.util.ArrayMap $r3;
        java.lang.Throwable $r5;
        java.lang.String r6, r7;
        com.android.server.pm.PackageSetting r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameInternalLocked(java.lang.String,long,int)>(r6, -1L, i0);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.pm.PackageSetting) $r4;

        exitmonitor r1;

     label2:
        return r8;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean getPackageSizeInfoLI(java.lang.String, int, android.content.pm.PackageStats)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i2;
        com.android.server.pm.PackageSetting r1;
        long l1, $l5, $l6, $l7;
        com.android.server.pm.Installer r2;
        java.lang.String r3, $r12, $r15, r16, r20;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.lang.Object $r6, r18;
        java.lang.String[] $r7, $r9;
        long[] $r8;
        boolean $z0, $z1;
        java.lang.Throwable $r13;
        com.android.server.pm.Installer$InstallerException $r14;
        android.content.pm.PackageStats r17;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r17 := @parameter2: android.content.pm.PackageStats;

        r18 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r18;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r1 = (com.android.server.pm.PackageSetting) $r6;

     label02:
        if r1 != null goto label05;

     label03:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find settings for ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r12 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r12);

        exitmonitor r18;

     label04:
        return 0;

     label05:
        exitmonitor r18;

     label06:
        l1 = virtualinvoke r1.<com.android.server.pm.PackageSetting: long getCeDataInode(int)>(i0);

        r20 = r1.<com.android.server.pm.PackageSetting: java.lang.String codePathString>;

     label07:
        r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        r3 = r1.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        i2 = r1.<com.android.server.pm.PackageSetting: int appId>;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = r16;

        $r8 = newarray (long)[1];

        $r8[0] = l1;

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = r20;

        virtualinvoke r2.<com.android.server.pm.Installer: void getAppSize(java.lang.String,java.lang.String[],int,int,int,long[],java.lang.String[],android.content.pm.PackageStats)>(r3, $r7, i0, 0, i2, $r8, $r9, r17);

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(r1);

        if $z0 == 0 goto label08;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)>(r1);

        if $z1 != 0 goto label08;

        r17.<android.content.pm.PackageStats: long codeSize> = 0L;

     label08:
        $l5 = r17.<android.content.pm.PackageStats: long dataSize>;

        $l6 = r17.<android.content.pm.PackageStats: long cacheSize>;

        $l7 = $l5 - $l6;

        r17.<android.content.pm.PackageStats: long dataSize> = $l7;

     label09:
        return 1;

     label10:
        $r14 := @caughtexception;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r14);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

        return 0;

     label11:
        $r13 := @caughtexception;

     label12:
        exitmonitor r18;

     label13:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch com.android.server.pm.Installer$InstallerException from label07 to label08 with label10;
        catch com.android.server.pm.Installer$InstallerException from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private int getPackageTargetSdkVersionLockedLPr(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.String r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r2;

        if r4 == null goto label1;

        $i0 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        return $i0;

     label1:
        return 10000;
    }

    private int getPackageUidInternal(java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Object r1, $r4, $r7;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        android.util.ArrayMap $r3, $r6;
        com.android.server.pm.Settings $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r8, r11;
        com.android.server.pm.PackageSetting $r9, r12;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: java.lang.String;

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label02:
        if r2 == null goto label07;

     label03:
        $z2 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isMatchForSystemOnly(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r2, i5);

        if $z2 == 0 goto label07;

        $r8 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r9 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r8, i1);

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r9, i1, i0);

        if $z3 == 0 goto label05;

        exitmonitor r1;

     label04:
        return -1;

     label05:
        $i4 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i6 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i4);

        exitmonitor r1;

     label06:
        return i6;

     label07:
        $i2 = 4202496 & i5;

        if $i2 == 0 goto label12;

     label08:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.android.server.pm.PackageSetting) $r7;

     label09:
        if r12 == null goto label12;

     label10:
        $z0 = virtualinvoke r12.<com.android.server.pm.PackageSetting: boolean isMatch(int)>(i5);

        if $z0 == 0 goto label12;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r12, i1, i0);

        if $z1 != 0 goto label12;

        $i3 = r12.<com.android.server.pm.PackageSetting: int appId>;

        i7 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i3);

        exitmonitor r1;

     label11:
        return i7;

     label12:
        exitmonitor r1;

     label13:
        return -1;

     label14:
        $r10 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private java.lang.String[] getPackagesForUidInternal(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i2, i3, i4, i5, i6;
        java.lang.Object r1, $r9;
        java.util.Iterator r2;
        java.lang.String $r3, $r10, r18;
        com.android.server.pm.Settings $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.lang.String[] $r5, r14, r16;
        android.util.ArraySet $r6, $r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r11;
        com.android.server.pm.SettingBase r12;
        com.android.server.pm.SharedUserSetting r13;
        com.android.server.pm.PackageSetting r15, r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i3);

        if $r3 == null goto label01;

        z6 = 1;

        goto label02;

     label01:
        z6 = 0;

     label02:
        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r12 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i4);

        $z0 = r12 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label16;

     label04:
        if z6 == 0 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return null;

     label07:
        r13 = (com.android.server.pm.SharedUserSetting) r12;

        $r6 = r13.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $i1 = virtualinvoke $r6.<android.util.ArraySet: int size()>();

        r14 = newarray (java.lang.String)[$i1];

        $r7 = r13.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        r2 = virtualinvoke $r7.<android.util.ArraySet: java.util.Iterator iterator()>();

     label08:
        i5 = 0;

     label09:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label14;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.android.server.pm.PackageSetting) $r9;

     label10:
        i6 = i5;

     label11:
        $z5 = virtualinvoke r15.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z5 == 0 goto label13;

        $r10 = r15.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r14[i5] = $r10;

     label12:
        i6 = i5 + 1;

     label13:
        i5 = i6;

        goto label09;

     label14:
        $r8 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] trimToSize(java.lang.Object[],int)>(r14, i5);

        r16 = (java.lang.String[]) $r8;

        exitmonitor r1;

     label15:
        return r16;

     label16:
        $z1 = r12 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label17;

        r17 = (com.android.server.pm.PackageSetting) r12;

        $z2 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z2 == 0 goto label17;

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r17, i3, i0);

        if $z3 != 0 goto label17;

        r18 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        exitmonitor r1;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r18;

        return $r5;

     label17:
        exitmonitor r1;

     label18:
        return null;

     label19:
        $r11 := @caughtexception;

     label20:
        exitmonitor r1;

     label21:
        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    private java.util.List getPackagesUsingSharedLibraryLPr(android.content.pm.SharedLibraryInfo, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.SharedLibraryInfo r1;
        int i0, i1, i2, i3, i8;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.Settings $r3, $r5;
        android.util.ArrayMap $r4, $r6;
        java.lang.Object $r7;
        android.content.pm.PackageUserState $r8;
        boolean $z0, $z1, $z2, $z4, $z6;
        com.android.server.pm.parsing.pkg.AndroidPackage $r9, $r10, $r15, $r19, $r20, $r21;
        java.util.List $r11, $r16;
        android.content.pm.VersionedPackage $r12, $r28;
        long $l4, $l5, $l6, $l9;
        java.lang.String $r13, r25, r26, r27;
        java.util.ArrayList $r14, $r22, r23, r24;
        java.lang.String[] $r17;
        long[] $r18;
        byte $b7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.SharedLibraryInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r23 = null;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i2 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        i8 = 0;

     label01:
        if i8 >= i2 goto label13;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i8);

        r2 = (com.android.server.pm.PackageSetting) $r7;

        if r2 != null goto label02;

        r24 = r23;

        goto label12;

     label02:
        $r8 = virtualinvoke r2.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i1);

        $z0 = virtualinvoke $r8.<android.content.pm.PackageUserState: boolean isAvailable(int)>(i0);

        if $z0 != 0 goto label03;

        r24 = r23;

        goto label12;

     label03:
        r25 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        $z1 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: boolean isStatic()>();

        if $z1 == 0 goto label09;

        $r17 = r2.<com.android.server.pm.PackageSetting: java.lang.String[] usesStaticLibraries>;

        i3 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($r17, r25);

        if i3 >= 0 goto label04;

        r24 = r23;

        goto label12;

     label04:
        $r18 = r2.<com.android.server.pm.PackageSetting: long[] usesStaticLibrariesVersions>;

        $l5 = $r18[i3];

        $l6 = virtualinvoke r1.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $b7 = $l5 cmp $l6;

        if $b7 == 0 goto label05;

        r24 = r23;

        goto label12;

     label05:
        r24 = r23;

        if r23 != null goto label06;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        r24 = $r22;

     label06:
        r26 = r2.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r27 = r26;

        $r19 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r19 == null goto label07;

        r27 = r26;

        $r20 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z6 = interfaceinvoke $r20.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStaticSharedLibrary()>();

        if $z6 == 0 goto label07;

        $r21 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r27 = interfaceinvoke $r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

     label07:
        $r28 = new android.content.pm.VersionedPackage;

        $l9 = r2.<com.android.server.pm.PackageSetting: long versionCode>;

        specialinvoke $r28.<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>(r27, $l9);

        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>($r28);

     label08:
        goto label12;

     label09:
        r24 = r23;

        $r9 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r9 == null goto label08;

        $r10 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r11 = interfaceinvoke $r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesLibraries()>();

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.util.Collection,java.lang.Object)>($r11, r25);

        if $z2 != 0 goto label10;

        r24 = r23;

        $r15 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r16 = interfaceinvoke $r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesOptionalLibraries()>();

        $z4 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.util.Collection,java.lang.Object)>($r16, r25);

        if $z4 == 0 goto label12;

     label10:
        r24 = r23;

        if r23 != null goto label11;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r24 = $r14;

     label11:
        $r12 = new android.content.pm.VersionedPackage;

        $r13 = r2.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $l4 = r2.<com.android.server.pm.PackageSetting: long versionCode>;

        specialinvoke $r12.<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>($r13, $l4);

        interfaceinvoke r24.<java.util.List: boolean add(java.lang.Object)>($r12);

     label12:
        i8 = i8 + 1;

        r23 = r24;

        goto label01;

     label13:
        return r23;
    }

    private java.util.List getPersistentApplicationsInternal(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r2, $r7, $r11;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        java.util.ArrayList $r4;
        android.util.ArrayMap $r5, $r9;
        java.util.Collection $r6;
        boolean $z0, $z1, $z3, $z4, $z5, z6, z7, $z8;
        com.android.server.pm.Settings $r8;
        java.lang.String $r10;
        android.content.pm.PackageUserState $r12;
        java.lang.Throwable $r13;
        java.util.Iterator r14;
        com.android.server.pm.PackageSetting r15;
        android.content.pm.ApplicationInfo r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Collection values()>();

        r14 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label02:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label19;

        $r7 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r7;

     label03:
        z6 = 1;

        $i2 = 262144 & i0;

        if $i2 == 0 goto label06;

     label04:
        $z5 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isDirectBootAware()>();

        if $z5 != 0 goto label06;

     label05:
        z7 = 1;

        goto label07;

     label06:
        z7 = 0;

     label07:
        $i3 = 524288 & i0;

        if $i3 == 0 goto label10;

     label08:
        $z4 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isDirectBootAware()>();

        if $z4 == 0 goto label10;

     label09:
        goto label11;

     label10:
        z6 = 0;

     label11:
        $z8 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPersistent()>();

        if $z8 == 0 goto label18;

        $z1 = r0.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z1 == 0 goto label12;

        $z3 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z3 == 0 goto label18;

     label12:
        if z7 != 0 goto label13;

        if z6 == 0 goto label18;

     label13:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        r15 = (com.android.server.pm.PackageSetting) $r11;

     label14:
        if r15 == null goto label18;

     label15:
        $r12 = virtualinvoke r15.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i1);

        r16 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r3, i0, $r12, i1, r15);

     label16:
        if r16 == null goto label18;

     label17:
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r16);

     label18:
        goto label02;

     label19:
        exitmonitor r2;

     label20:
        return $r4;

     label21:
        $r13 := @caughtexception;

     label22:
        exitmonitor r2;

     label23:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    private static java.lang.String getPrebuildProfilePath(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r6;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".prof");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private android.content.pm.UserInfo getProfileParent(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        long l1;
        com.android.server.pm.UserManagerService $r1;
        java.lang.Throwable $r2;
        android.content.pm.UserInfo r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r3 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getProfileParent(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r3;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static java.lang.String getRealPackageName(com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isPackageRenamed(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r0, r1);

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getRealPackage()>();

        return $r2;

     label1:
        return null;
    }

    private java.lang.String getRequiredButNotReallyRequiredVerifierLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        android.content.Intent $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.RuntimeException $r7;
        java.lang.String $r8, $r12;
        java.lang.Object $r9;
        android.content.pm.ResolveInfo $r10;
        android.content.pm.ComponentInfo $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PACKAGE_NEEDS_VERIFICATION");

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceiversInternal(android.content.Intent,java.lang.String,int,int,boolean)>($r3, "application/vnd.android.package-archive", 1835008, 0, 0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (android.content.pm.ResolveInfo) $r9;

        $r11 = virtualinvoke $r10.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r12 = $r11.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r12;

     label1:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", "There should probably be a verifier, but, none were found");

        return null;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There must be exactly one verifier; found ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private java.lang.String getRequiredInstallerLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        android.content.Intent $r2;
        android.net.Uri $r4;
        int $i0;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r9, $r15;
        java.lang.String $r10, $r19;
        java.lang.Object $r11, $r16;
        android.content.pm.ResolveInfo $r12, $r17;
        android.content.pm.ActivityInfo $r13;
        android.content.pm.ApplicationInfo $r14;
        boolean $z0;
        android.content.pm.ComponentInfo $r18;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.INSTALL_PACKAGE");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://com.example/foo.apk");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r4, "application/vnd.android.package-archive");

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r2, "application/vnd.android.package-archive", 1835008, 0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r12 = (android.content.pm.ResolveInfo) $r11;

        $r13 = $r12.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r14 = $r13.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r14.<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>();

        if $z0 == 0 goto label1;

        $r16 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r17 = (android.content.pm.ResolveInfo) $r16;

        $r18 = virtualinvoke $r17.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r19 = $r18.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r19;

     label1:
        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.String)>("The installer must be a privileged app");

        throw $r15;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There must be exactly one installer; found ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private java.lang.String getRequiredPermissionControllerLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        android.content.Intent $r2;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.RuntimeException $r7, $r13;
        java.lang.String $r8, $r17;
        java.lang.Object $r9, $r14;
        android.content.pm.ResolveInfo $r10, $r15;
        android.content.pm.ActivityInfo $r11;
        android.content.pm.ApplicationInfo $r12;
        boolean $z0;
        android.content.pm.ComponentInfo $r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MANAGE_PERMISSIONS");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r2, null, 1835008, 0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (android.content.pm.ResolveInfo) $r9;

        $r11 = $r10.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r12 = $r11.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z0 = virtualinvoke $r12.<android.content.pm.ApplicationInfo: boolean isPrivilegedApp()>();

        if $z0 == 0 goto label1;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r15 = (android.content.pm.ResolveInfo) $r14;

        $r16 = virtualinvoke $r15.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r17 = $r16.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r17;

     label1:
        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("The permissions manager must be a privileged app");

        throw $r13;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There must be exactly one permissions manager; found ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private java.lang.String getRequiredServicesExtensionPackageLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r3;
        android.content.Context $r2;
        boolean $z0;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.String getString(int)>(17039946);

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r3);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Required services extension package is missing, check config_servicesExtensionPackage.");

        throw $r4;
    }

    private java.lang.String getRequiredSharedLibraryLPr(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1;
        long l1;
        java.lang.String $r4, $r7, r9, r11;
        java.lang.Throwable $r8;
        android.content.pm.SharedLibraryInfo r10;
        java.lang.IllegalStateException r12, r14;
        java.lang.StringBuilder r13, r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        l1 = (long) i0;

     label01:
        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>(r9, l1);

     label02:
        if r10 == null goto label08;

     label03:
        r11 = virtualinvoke r10.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

     label04:
        if r11 == null goto label07;

     label05:
        exitmonitor r1;

     label06:
        return r11;

     label07:
        r12 = new java.lang.IllegalStateException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a package for shared library ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r12;

     label08:
        r14 = new java.lang.IllegalStateException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing required shared library:");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r4 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4);

        throw r14;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private java.lang.String getRequiredUninstallerLPr()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.ResolveInfo r1;
        android.content.Intent $r2;
        android.net.Uri $r4;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r9;
        java.lang.String $r10, $r12, $r14, $r16;
        android.content.pm.ActivityInfo $r11;
        android.content.pm.ComponentInfo $r13, $r15;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.UNINSTALL_PACKAGE");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.DEFAULT");

        $r4 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", "foo.bar", null);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r4);

        r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>($r2, null, 1835008, 0);

        if r1 == null goto label1;

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r12 = $r11.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r13 = virtualinvoke r1.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r14 = $r13.<android.content.pm.ComponentInfo: java.lang.String name>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label1;

        $r15 = virtualinvoke r1.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r16 = $r15.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r16;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There must be exactly one uninstaller; found ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = new java.lang.RuntimeException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private java.lang.String getRetailDemoPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r10, r12;
        int i0, i2;
        android.content.pm.Signature r2;
        boolean z0, $z1, $z2;
        android.content.Context $r3, $r4;
        android.util.ArrayMap $r5;
        java.lang.Object $r6;
        android.content.pm.Signature[] $r7, r16;
        byte[] $r8, $r9;
        java.lang.Throwable $r11;
        com.android.server.pm.parsing.pkg.AndroidPackage r13;
        android.content.pm.PackageParser$SigningDetails r14;
        java.security.MessageDigest r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: java.lang.String getString(int)>(17039940);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r12 = virtualinvoke $r4.<android.content.Context: java.lang.String getString(int)>(17039941);

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 != 0 goto label11;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r12);

        if $z2 == 0 goto label01;

        goto label11;

     label01:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r13 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r6;

        if r13 == null goto label10;

        r14 = interfaceinvoke r13.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        if r14 == null goto label10;

        $r7 = r14.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        if $r7 == null goto label10;

     label02:
        r15 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        r16 = r14.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        i0 = lengthof r16;

     label03:
        i2 = 0;

     label04:
        if i2 >= i0 goto label08;

        r2 = r16[i2];

     label05:
        $r8 = virtualinvoke r2.<android.content.pm.Signature: byte[] toByteArray()>();

        $r9 = virtualinvoke r15.<java.security.MessageDigest: byte[] digest(byte[])>($r8);

        $r10 = staticinvoke <libcore.util.HexEncoding: java.lang.String encodeToString(byte[],boolean)>($r9, 0);

        z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r12, $r10);

     label06:
        if z0 == 0 goto label07;

        return r1;

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Unable to verify signatures as getting the retail demo package name", $r11);

     label10:
        return null;

     label11:
        return null;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label09;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label09;
    }

    private com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r2, $r5, $r8;
        com.android.server.pm.Settings$VersionInfo $r3, $r7, $r9;
        java.lang.String $r4, $r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 == 0 goto label1;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = virtualinvoke $r8.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getExternalVersion()>();

        return $r9;

     label1:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        $r7 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo findOrCreateVersion(java.lang.String)>($r6);

        return $r7;

     label2:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getInternalVersion()>();

        return $r3;
    }

    private java.lang.String getSetupWizardPackageNameImpl()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent $r2;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r4;
        java.lang.String $r9, $r13;
        java.lang.Object $r10;
        android.content.pm.ResolveInfo $r11;
        android.content.pm.ComponentInfo $r12;
        java.util.List r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.SETUP_WIZARD");

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r15 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r2, null, 1835520, $i0);

        $i1 = interfaceinvoke r15.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $r10 = interfaceinvoke r15.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (android.content.pm.ResolveInfo) $r10;

        $r12 = virtualinvoke $r11.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r13 = $r12.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r13;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There should probably be exactly one setup wizard; found ");

        $i2 = interfaceinvoke r15.<java.util.List: int size()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": matches=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r9);

        return null;
    }

    private com.android.server.pm.PackageSetting getSharedLibLatestVersionSetting(com.android.server.pm.PackageManagerService$ScanResult)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        android.content.pm.SharedLibraryInfo r2;
        com.android.server.pm.PackageManagerService$ScanRequest $r3;
        com.android.server.pm.parsing.pkg.ParsedPackage $r4;
        com.android.server.pm.Settings $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        com.android.server.pm.PackageManagerService$ScanResult r8;
        com.android.server.pm.PackageSetting r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: com.android.server.pm.PackageManagerService$ScanResult;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r8.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r4 = $r3.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getLatestSharedLibraVersionLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>($r4);

     label2:
        r9 = null;

        if r2 == null goto label4;

     label3:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r9 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r6);

     label4:
        exitmonitor r1;

     label5:
        return r9;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static android.content.pm.SharedLibraryInfo getSharedLibraryInfo(java.lang.String, long, java.util.Map, java.util.Map)
    {
        long l0;
        java.util.Map r0, r8;
        android.util.LongSparseArray r1, r10;
        java.lang.Object $r2, $r3, $r5, $r6;
        android.content.pm.SharedLibraryInfo $r4, r9;
        java.lang.String r7;

        r7 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r0 := @parameter2: java.util.Map;

        r8 := @parameter3: java.util.Map;

        if r8 == null goto label2;

        $r5 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r1 = (android.util.LongSparseArray) $r5;

        r9 = null;

        if r1 == null goto label1;

        $r6 = virtualinvoke r1.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r9 = (android.content.pm.SharedLibraryInfo) $r6;

     label1:
        if r9 == null goto label2;

        return r9;

     label2:
        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r10 = (android.util.LongSparseArray) $r2;

        if r10 != null goto label3;

        return null;

     label3:
        $r3 = virtualinvoke r10.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        $r4 = (android.content.pm.SharedLibraryInfo) $r3;

        return $r4;
    }

    private android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String, long)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        long l0;
        android.util.ArrayMap $r2;
        android.content.pm.SharedLibraryInfo $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfo(java.lang.String,long,java.util.Map,java.util.Map)>(r1, l0, $r2, null);

        return $r3;
    }

    private java.lang.String[] getSharedUserPackagesForPackageLocked(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i2, i3;
        com.android.server.pm.PackageSetting r1, r11;
        com.android.server.pm.Settings $r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4, $r8;
        java.lang.String[] $r5, r13, r15;
        boolean $z0, $z1, $z2;
        com.android.server.pm.SharedUserSetting $r6;
        java.lang.Object[] $r7;
        java.lang.String $r9, r10;
        android.util.ArraySet r12;
        java.util.Iterator r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.android.server.pm.PackageSetting) $r4;

        if r11 == null goto label7;

        $z0 = virtualinvoke r11.<com.android.server.pm.PackageSetting: boolean isSharedUser()>();

        if $z0 != 0 goto label1;

        goto label7;

     label1:
        $r6 = r11.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        r12 = $r6.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $i1 = virtualinvoke r12.<android.util.ArraySet: int size()>();

        r13 = newarray (java.lang.String)[$i1];

        r14 = virtualinvoke r12.<android.util.ArraySet: java.util.Iterator iterator()>();

        i2 = 0;

     label2:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.pm.PackageSetting) $r8;

        i3 = i2;

        $z2 = virtualinvoke r1.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z2 == 0 goto label3;

        $r9 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r13[i2] = $r9;

        i3 = i2 + 1;

     label3:
        i2 = i3;

        goto label2;

     label4:
        $r7 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] trimToSize(java.lang.Object[],int)>(r13, i2);

        r15 = (java.lang.String[]) $r7;

        if r15 == null goto label5;

        goto label6;

     label5:
        r15 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

     label6:
        return r15;

     label7:
        $r5 = <libcore.util.EmptyArray: java.lang.String[] STRING>;

        return $r5;
    }

    private java.lang.String getStorageManagerPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        android.content.Intent $r2;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r3;
        java.lang.String $r8, $r12;
        java.lang.Object $r9;
        android.content.pm.ResolveInfo $r10;
        android.content.pm.ComponentInfo $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.os.storage.action.MANAGE_STORAGE");

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r2, null, 1835520, $i0);

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (android.content.pm.ResolveInfo) $r9;

        $r11 = virtualinvoke $r10.<android.content.pm.ResolveInfo: android.content.pm.ComponentInfo getComponentInfo()>();

        $r12 = $r11.<android.content.pm.ComponentInfo: java.lang.String packageName>;

        return $r12;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There should probably be exactly one storage manager; found ");

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": matches=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r8);

        return null;
    }

    private android.os.Bundle getSuspendedPackageAppExtrasInternal(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r4, $r10;
        com.android.server.pm.Settings $r2;
        android.util.ArrayMap $r3, $r8, $r9;
        java.lang.String $r7, r14;
        boolean $z0;
        int $i0, $i1, i2, i3;
        android.os.PersistableBundle $r11, $r12;
        java.lang.Throwable $r13;
        com.android.server.pm.PackageSetting r15;
        android.content.pm.PackageUserState r16;
        android.os.Bundle r17;
        android.content.pm.PackageUserState$SuspendParams r18;
        java.lang.IllegalArgumentException r19;
        java.lang.StringBuilder r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r15 = (com.android.server.pm.PackageSetting) $r4;

     label02:
        if r15 == null goto label14;

     label03:
        r16 = virtualinvoke r15.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i2);

        r17 = new android.os.Bundle;

        specialinvoke r17.<android.os.Bundle: void <init>()>();

        $z0 = r16.<android.content.pm.PackageUserState: boolean suspended>;

        if $z0 == 0 goto label09;

     label04:
        i3 = 0;

     label05:
        $r8 = r16.<android.content.pm.PackageUserState: android.util.ArrayMap suspendParams>;

        $i1 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

        if i3 >= $i1 goto label09;

        $r9 = r16.<android.content.pm.PackageUserState: android.util.ArrayMap suspendParams>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r18 = (android.content.pm.PackageUserState$SuspendParams) $r10;

     label06:
        if r18 == null goto label08;

     label07:
        $r11 = r18.<android.content.pm.PackageUserState$SuspendParams: android.os.PersistableBundle appExtras>;

        if $r11 == null goto label08;

        $r12 = r18.<android.content.pm.PackageUserState$SuspendParams: android.os.PersistableBundle appExtras>;

        virtualinvoke r17.<android.os.Bundle: void putAll(android.os.PersistableBundle)>($r12);

     label08:
        i3 = i3 + 1;

        goto label05;

     label09:
        $i0 = virtualinvoke r17.<android.os.Bundle: int size()>();

        if $i0 <= 0 goto label11;

     label10:
        goto label12;

     label11:
        r17 = null;

     label12:
        exitmonitor r1;

     label13:
        return r17;

     label14:
        r19 = new java.lang.IllegalArgumentException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown target package: ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r7 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r19;

     label15:
        $r13 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label14 to label15 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private int getUidForVerifier(android.content.pm.VerifierInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int i0, $i1;
        java.lang.String $r3, $r15, $r18, $r20, $r23;
        android.util.ArrayMap $r4;
        android.content.pm.PackageParser$SigningDetails $r6, $r8;
        android.content.pm.Signature[] $r7, $r9;
        android.content.pm.Signature $r10;
        java.security.PublicKey $r11, $r12;
        byte[] $r13, r28;
        boolean $z0;
        java.lang.Throwable $r24, $r25;
        android.content.pm.VerifierInfo r26;
        java.lang.StringBuilder r27, r29;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r26 := @parameter0: android.content.pm.VerifierInfo;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = r26.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return -1;

     label05:
        $r6 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r7 = $r6.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i1 = lengthof $r7;

        if $i1 == 1 goto label07;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verifier package ");

        $r20 = r26.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has more than one signature; ignoring");

        $r23 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r23);

        exitmonitor r1;

     label06:
        return -1;

     label07:
        $r8 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r9 = $r8.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r10 = $r9[0];

        $r11 = virtualinvoke $r10.<android.content.pm.Signature: java.security.PublicKey getPublicKey()>();

        r28 = interfaceinvoke $r11.<java.security.PublicKey: byte[] getEncoded()>();

     label08:
        $r12 = r26.<android.content.pm.VerifierInfo: java.security.PublicKey publicKey>;

        $r13 = interfaceinvoke $r12.<java.security.PublicKey: byte[] getEncoded()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r13, r28);

        if $z0 != 0 goto label10;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Verifier package ");

        $r15 = r26.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have the expected public key; ignoring");

        $r18 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r18);

        exitmonitor r1;

     label09:
        return -1;

     label10:
        i0 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        exitmonitor r1;

     label11:
        return i0;

     label12:
        $r24 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        return -1;

     label15:
        $r25 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r25;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.security.cert.CertificateException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private int getUidTargetSdkVersionLockedLPr(int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1, r12;
        int i0, $i1, i2, i3, i4, i5;
        com.android.server.pm.Settings $r2;
        boolean $z0, $z1, $z2;
        com.android.server.pm.parsing.pkg.AndroidPackage $r3, $r4, $r7, $r8;
        android.util.ArraySet $r5;
        java.lang.Object $r6;
        com.android.server.pm.SettingBase r9;
        com.android.server.pm.SharedUserSetting r10;
        java.util.Iterator r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i2 := @parameter0: int;

        i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r9 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i3);

        $z0 = r9 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label4;

        r10 = (com.android.server.pm.SharedUserSetting) r9;

        i4 = 10000;

        $r5 = r10.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        r11 = virtualinvoke $r5.<android.util.ArraySet: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.pm.PackageSetting) $r6;

        i5 = i4;

        $r7 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r7 == null goto label2;

        $r8 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        i0 = interfaceinvoke $r8.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        i5 = i4;

        if i0 >= i4 goto label2;

        i5 = i0;

     label2:
        i4 = i5;

        goto label1;

     label3:
        return i4;

     label4:
        $z1 = r9 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label5;

        r12 = (com.android.server.pm.PackageSetting) r9;

        $r3 = r12.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r3 == null goto label5;

        $r4 = r12.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $i1 = interfaceinvoke $r4.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        return $i1;

     label5:
        return 10000;
    }

    private int getUnknownSourcesSettings()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "install_non_market_apps", -1);

        return $i0;
    }

    private int getVendorPartitionVersion()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        boolean $z0, $z1;
        java.lang.Throwable $r3;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.vndk.version");

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label4;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = <android.os.Build$VERSION: java.lang.String[] ACTIVE_CODENAMES>;

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r4, r1);

        if $z1 == 0 goto label4;

        return 10000;

     label4:
        return 28;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private long getVerificationTimeout()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        long $l0, $l1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, "verifier_timeout", 10000L);

        $l1 = staticinvoke <java.lang.Math: long max(long,long)>($l0, 10000L);

        return $l1;
    }

    private void handlePackagePostInstall(com.android.server.pm.PackageManagerService$PackageInstalledInfo, boolean, boolean, boolean, java.lang.String[], java.util.List, int, boolean, java.lang.String, android.content.pm.IPackageInstallObserver2, int)
    {
        com.android.server.pm.PackageManagerService r0, r70, r97;
        boolean z0, z1, z2, $z4, $z6, $z8, $z9, $z10, $z11, z12, z13, z14, z15, z16, z17, z18, z19, z20, $z21, z22;
        android.content.pm.IPackageInstallObserver2 r1;
        java.lang.String r2, $r6, $r9, $r20, $r22, $r26, $r28, $r37, $r43, $r44, $r57, $r59, r69, r74, r75, r96, r98, r99;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i17, i18, i19, i20, i21, i22, $i23, i24, i25, i26, i27, i28, i29, $i30, i31, i32, i33;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r3, $r4, $r7, $r13, $r41, $r46, $r53, $r58, $r110;
        com.android.server.pm.parsing.pkg.AndroidPackage $r5, $r8, $r24, $r27, $r35, $r39, $r40, $r48, $r51, $r78, $r101, $r102, r108;
        java.util.ArrayList $r10, $r17, $r18, $r21, $r103;
        dalvik.system.VMRuntime $r11;
        com.android.server.pm.dex.DexManager $r12;
        com.android.server.pm.PackageManagerService$Injector $r14, $r33;
        com.android.server.pm.UserManagerService $r15;
        java.lang.Object $r19, r76, r94, r112;
        java.util.List $r23, r68;
        com.android.server.pm.ProcessLoggingHandler $r25;
        com.android.server.pm.AppsFilter $r29;
        com.android.server.pm.PackageSetting $r30, r71, r85, r87;
        com.android.server.pm.Settings $r31;
        android.util.ArrayMap $r32;
        android.os.storage.StorageManager $r34;
        java.util.UUID $r36;
        android.os.storage.VolumeInfo $r38;
        android.util.SparseArray $r42, r95;
        int[] $r45, $r47, $r52, $r79, r80, r81, r82, r83, $r84, r86, r88, r89, r91, $r105, r109;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r49, $r50, r73;
        java.lang.StringBuilder $r54;
        java.lang.Throwable $r60, $r61, $r62, $r63, $r64, $r65, r106, r116;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r66, r107, r114;
        java.lang.String[] r67;
        com.android.server.pm.InstantAppRegistry $r77;
        android.os.Bundle $r92;
        com.android.server.pm.PackageManagerService$InstallArgs r111;
        android.content.pm.PackageInfo r115;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r66 := @parameter0: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        z12 := @parameter1: boolean;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r67 := @parameter4: java.lang.String[];

        r68 := @parameter5: java.util.List;

        i17 := @parameter6: int;

        z2 := @parameter7: boolean;

        r69 := @parameter8: java.lang.String;

        r1 := @parameter9: android.content.pm.IPackageInstallObserver2;

        i18 := @parameter10: int;

        r70 = r0;

        $i3 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i3 != 1 goto label01;

        z13 = 1;

        goto label02;

     label01:
        z13 = 0;

     label02:
        $r3 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r3 == null goto label03;

        $r58 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r59 = $r58.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage>;

        if $r59 == null goto label03;

        z14 = 1;

        goto label04;

     label03:
        z14 = 0;

     label04:
        r2 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name>;

        if z13 == 0 goto label05;

        r71 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r2);

        goto label06;

     label05:
        r71 = null;

     label06:
        if z13 == 0 goto label07;

        if r71 != null goto label07;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was removed before handlePackagePostInstall could be executed");

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r57);

        r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = -23;

        r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String returnMsg> = "Package was removed before install could complete.";

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.content.pm.IPackageInstallObserver2)>(r66, r1);

        return;

     label07:
        if z13 == 0 goto label82;

        $r4 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r4 == null goto label08;

        $r53 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        virtualinvoke $r53.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendPackageRemovedBroadcasts(boolean)>(z0);

     label08:
        if r68 == null goto label09;

        $z11 = interfaceinvoke r68.<java.util.List: boolean isEmpty()>();

        if $z11 != 0 goto label09;

        $r50 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r51 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r52 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        $i15 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke $r50.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setWhitelistedRestrictedPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.util.List,int,int)>($r51, $r52, r68, $i15, 2);

     label09:
        if i17 == 0 goto label10;

        if i17 != 1 goto label13;

     label10:
        r73 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r5 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r74 = interfaceinvoke $r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        if i17 != 1 goto label11;

        z15 = 1;

        goto label12;

     label11:
        z15 = 0;

     label12:
        $i4 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r73.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setAutoRevokeWhitelisted(java.lang.String,boolean,int)>(r74, z15, $i4);

     label13:
        if z12 == 0 goto label14;

        i19 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r49 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r48 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r47 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        virtualinvoke $r49.<com.android.server.pm.permission.PermissionManagerServiceInternal: void grantRequestedRuntimePermissions(com.android.server.pm.parsing.pkg.AndroidPackage,int[],java.lang.String[],int)>($r48, $r47, r67, i19);

        goto label14;

     label14:
        $r6 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String installerPackageName>;

        if $r6 == null goto label15;

        r75 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String installerPackageName>;

        goto label17;

     label15:
        $r7 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r7 == null goto label16;

        $r46 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        r75 = $r46.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String installerPackageName>;

        goto label17;

     label16:
        r75 = null;

     label17:
        r76 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r76;

     label18:
        $r77 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $r78 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r79 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        virtualinvoke $r77.<com.android.server.pm.InstantAppRegistry: void onPackageInstalledLPw(com.android.server.pm.parsing.pkg.AndroidPackage,int[])>($r78, $r79);

        exitmonitor r76;

     label19:
        r80 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        r81 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        r82 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        r83 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        $r84 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        if $r84 == null goto label21;

        $r45 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        $i14 = lengthof $r45;

        if $i14 != 0 goto label20;

        goto label21;

     label20:
        z16 = 0;

        goto label22;

     label21:
        z16 = 1;

     label22:
        r85 = r71;

        r86 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        i0 = lengthof r86;

        i20 = 0;

        r87 = r71;

        r88 = r81;

        r89 = r82;

     label23:
        if i20 >= i0 goto label33;

        i1 = r86[i20];

        z17 = virtualinvoke r85.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if z16 == 0 goto label25;

        if z17 == 0 goto label24;

        r88 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r88, i1);

        goto label32;

     label24:
        r80 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r80, i1);

        goto label32;

     label25:
        r91 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        i2 = lengthof r91;

        i21 = 0;

     label26:
        z18 = 1;

        if i21 >= i2 goto label28;

        $i13 = r91[i21];

        if $i13 != i1 goto label27;

        z18 = 0;

        goto label28;

     label27:
        i21 = i21 + 1;

        goto label26;

     label28:
        if z18 == 0 goto label30;

        if z17 == 0 goto label29;

        r88 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r88, i1);

        goto label32;

     label29:
        r80 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r80, i1);

        goto label32;

     label30:
        if z17 == 0 goto label31;

        r83 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r83, i1);

        goto label32;

     label31:
        r89 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r89, i1);

     label32:
        i20 = i20 + 1;

        goto label23;

     label33:
        $r8 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r9 = interfaceinvoke $r8.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r9 != null goto label57;

        $r25 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProcessLoggingHandler mProcessLoggingHandler>;

        $r24 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r26 = interfaceinvoke $r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        virtualinvoke $r25.<com.android.server.pm.ProcessLoggingHandler: void invalidateProcessLoggingBaseApkHash(java.lang.String)>($r26);

        $i12 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid>;

        i22 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i12);

        $r27 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z6 = interfaceinvoke $r27.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z6 != 0 goto label35;

        if z1 == 0 goto label34;

        goto label35;

     label34:
        z19 = 0;

        goto label36;

     label35:
        z19 = 1;

     label36:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageAddedForNewUsers(java.lang.String,boolean,boolean,int,int[],int[],int)>(r2, z19, z1, i22, r80, r88, i18);

        $r92 = new android.os.Bundle;

        specialinvoke $r92.<android.os.Bundle: void <init>(int)>(1);

        $i23 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid>;

        virtualinvoke $r92.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.UID", $i23);

        if z14 == 0 goto label37;

        virtualinvoke $r92.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.REPLACING", 1);

     label37:
        virtualinvoke $r92.<android.os.Bundle: void putInt(java.lang.String,int)>("android.content.pm.extra.DATA_LOADER_TYPE", i18);

        r94 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r94;

     label38:
        $r29 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $r28 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name>;

        $r30 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r28, 1000);

        $r31 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r32 = $r31.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        r95 = virtualinvoke $r29.<com.android.server.pm.AppsFilter: android.util.SparseArray getVisibilityWhitelist(com.android.server.pm.PackageSetting,int[],android.util.ArrayMap)>($r30, r89, $r32);

     label39:
        exitmonitor r94;

     label40:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_ADDED", r2, $r92, 0, null, null, r89, r83, r95);

        if r75 == null goto label41;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_ADDED", r2, $r92, 0, r75, null, r89, r83, null);

        goto label41;

     label41:
        r96 = r75;

        r97 = r0;

        r98 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        if r98 == null goto label42;

        $z10 = virtualinvoke r98.<java.lang.String: boolean equals(java.lang.Object)>(r75);

        if $z10 != 0 goto label42;

        z20 = 1;

        goto label43;

     label42:
        z20 = 0;

     label43:
        if z20 == 0 goto label44;

        $r44 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_ADDED", r2, $r92, 0, $r44, null, r89, r83, null);

     label44:
        r99 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage>;

        if r99 == null goto label45;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_ADDED", r2, $r92, 16777216, r99, null, r80, r83, null);

     label45:
        if z14 == 0 goto label48;

        $r41 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r42 = $r41.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray broadcastWhitelist>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_REPLACED", r2, $r92, 0, null, null, r89, r83, $r42);

        if r96 == null goto label46;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_REPLACED", r2, $r92, 0, r96, null, r89, r83, null);

     label46:
        if z20 == 0 goto label47;

        $r43 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_REPLACED", r2, $r92, 0, $r43, null, r89, r83, null);

     label47:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.MY_PACKAGE_REPLACED", null, null, 0, r2, null, r89, r83, null);

        goto label49;

     label48:
        if z2 == 0 goto label49;

        $r40 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z9 = interfaceinvoke $r40.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z9 != 0 goto label49;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendFirstLaunchBroadcast(java.lang.String,java.lang.String,int[],int[])>(r2, r69, r80, r88);

        goto label49;

     label49:
        $r101 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z21 = interfaceinvoke $r101.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z21 == 0 goto label51;

        if z14 != 0 goto label50;

        $r33 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r34 = virtualinvoke $r33.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r35 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r36 = interfaceinvoke $r35.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.UUID getStorageUuid()>();

        $r37 = virtualinvoke $r36.<java.util.UUID: java.lang.String toString()>();

        $r38 = virtualinvoke $r34.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>($r37);

        $r39 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z8 = interfaceinvoke $r39.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        i24 = staticinvoke <com.android.server.pm.PackageManagerService: int getPackageExternalStorageType(android.os.storage.VolumeInfo,boolean)>($r38, $z8);

        if i24 == 0 goto label50;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,java.lang.String)>(181, i24, r2);

     label50:
        $r102 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        i25 = interfaceinvoke $r102.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $r103 = new java.util.ArrayList;

        specialinvoke $r103.<java.util.ArrayList: void <init>(int)>(1);

        virtualinvoke $r103.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r105 = newarray (int)[1];

        $r105[0] = i25;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,int[],android.content.IIntentReceiver)>(1, 1, $r103, $r105, null);

        goto label60;

     label51:
        goto label60;

     label52:
        $r65 := @caughtexception;

        r106 = $r65;

        goto label54;

     label53:
        $r60 := @caughtexception;

        r106 = $r60;

     label54:
        exitmonitor r94;

     label55:
        throw r106;

     label56:
        $r64 := @caughtexception;

        r106 = $r64;

        goto label54;

     label57:
        r107 = r66;

        r97 = r0;

        $r10 = r107.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.util.ArrayList libraryConsumers>;

        $z4 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r10);

        if $z4 != 0 goto label60;

        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r15 = virtualinvoke $r14.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.UserManagerService getUserManagerService()>();

        virtualinvoke $r15.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i26 = 0;

     label58:
        $r17 = r107.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.util.ArrayList libraryConsumers>;

        $i10 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        if i26 >= $i10 goto label59;

        $r18 = r107.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.util.ArrayList libraryConsumers>;

        $r19 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>(i26);

        r108 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r19;

        $r20 = interfaceinvoke r108.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r21 = new java.util.ArrayList;

        $r22 = interfaceinvoke r108.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r22);

        specialinvoke $r21.<java.util.ArrayList: void <init>(java.util.Collection)>($r23);

        $i11 = interfaceinvoke r108.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageChangedBroadcast(java.lang.String,boolean,java.util.ArrayList,int,java.lang.String)>($r20, 0, $r21, $i11, null);

        i26 = i26 + 1;

        goto label58;

     label59:
        r66 = r107;

        r97 = r0;

        goto label60;

     label60:
        r109 = r80;

        if r80 == null goto label63;

        $i8 = lengthof r80;

        if $i8 <= 0 goto label63;

        i27 = lengthof r80;

        i28 = 0;

     label61:
        if i28 >= i27 goto label62;

        i29 = r109[i28];

        $i9 = virtualinvoke r87.<com.android.server.pm.PackageSetting: int getInstallReason(int)>(i29);

        specialinvoke r97.<com.android.server.pm.PackageManagerService: void clearRolesAndRestorePermissionsForNewUserInstall(java.lang.String,int,int)>(r2, $i9, i29);

        i28 = i28 + 1;

        goto label61;

     label62:
        goto label63;

     label63:
        if z16 == 0 goto label64;

        if z14 != 0 goto label64;

        $i7 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid>;

        virtualinvoke r97.<com.android.server.pm.PackageManagerService: void notifyPackageAdded(java.lang.String,int)>(r2, $i7);

        goto label65;

     label64:
        $i5 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid>;

        virtualinvoke r97.<com.android.server.pm.PackageManagerService: void notifyPackageChanged(java.lang.String,int)>(r2, $i5);

     label65:
        $i30 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getUnknownSourcesSettings()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(3110, $i30);

        $r110 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r110 == null goto label66;

        $r13 = r66.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        r111 = $r13.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args>;

        goto label67;

     label66:
        r111 = null;

     label67:
        if r111 == null goto label74;

        if z0 != 0 goto label68;

        specialinvoke r97.<com.android.server.pm.PackageManagerService: void scheduleDeferredNoKillPostDelete(com.android.server.pm.PackageManagerService$InstallArgs)>(r111);

        goto label75;

     label68:
        r112 = r97.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r112;

     label69:
        virtualinvoke r111.<com.android.server.pm.PackageManagerService$InstallArgs: boolean doPostDeleteLI(boolean)>(1);

        exitmonitor r112;

     label70:
        goto label75;

     label71:
        $r61 := @caughtexception;

     label72:
        exitmonitor r112;

     label73:
        throw $r61;

     label74:
        $r11 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r11.<dalvik.system.VMRuntime: void requestConcurrentGC()>();

     label75:
        i31 = lengthof r109;

        i32 = 0;

     label76:
        r114 = r66;

        r70 = r97;

        if i32 >= i31 goto label83;

        i33 = r109[i32];

        r115 = virtualinvoke r97.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r2, 0, i33);

        if r115 == null goto label77;

        $r12 = r97.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        virtualinvoke $r12.<com.android.server.pm.dex.DexManager: void notifyPackageInstalled(android.content.pm.PackageInfo,int)>(r115, i33);

     label77:
        i32 = i32 + 1;

        goto label76;

     label78:
        $r63 := @caughtexception;

        r116 = $r63;

     label79:
        exitmonitor r76;

     label80:
        throw r116;

     label81:
        $r62 := @caughtexception;

        r116 = $r62;

        goto label79;

     label82:
        r114 = r66;

     label83:
        if z13 == 0 goto label84;

        if z14 == 0 goto label84;

        if z0 != 0 goto label84;

        z22 = 1;

        goto label85;

     label84:
        z22 = 0;

     label85:
        if z22 == 0 goto label86;

        specialinvoke r70.<com.android.server.pm.PackageManagerService: void scheduleDeferredNoKillInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.content.pm.IPackageInstallObserver2)>(r114, r1);

        goto label87;

     label86:
        specialinvoke r70.<com.android.server.pm.PackageManagerService: void notifyInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.content.pm.IPackageInstallObserver2)>(r114, r1);

     label87:
        return;

        catch java.lang.Throwable from label18 to label19 with label78;
        catch java.lang.Throwable from label38 to label39 with label53;
        catch java.lang.Throwable from label39 to label40 with label52;
        catch java.lang.Throwable from label54 to label55 with label56;
        catch java.lang.Throwable from label69 to label70 with label71;
        catch java.lang.Throwable from label72 to label73 with label71;
        catch java.lang.Throwable from label79 to label80 with label81;
    }

    private boolean hasNonNegativePriority(java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        int i0, $i1;
        java.lang.Object $r2;
        android.content.pm.ResolveInfo $r3;
        boolean z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        z1 = 0;

        if i0 <= 0 goto label1;

        z1 = 0;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (android.content.pm.ResolveInfo) $r2;

        $i1 = $r3.<android.content.pm.ResolveInfo: int priority>;

        if $i1 < 0 goto label1;

        z1 = 1;

     label1:
        return z1;
    }

    private static boolean hasString(java.util.List, java.util.List)
    {
        java.util.List r0, r1;
        int $i0, $i1, i2, i3;
        java.lang.Object $r2, $r4;
        java.lang.String $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        if r0 == null goto label7;

        if r1 != null goto label1;

        goto label7;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i2 = $i0 - 1;

     label2:
        if i2 < 0 goto label6;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = $i1 - 1;

     label3:
        if i3 < 0 goto label5;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (java.lang.String) $r2;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i3 = i3 + -1;

        goto label3;

     label5:
        i2 = i2 + -1;

        goto label2;

     label6:
        return 0;

     label7:
        return 0;
    }

    private static boolean hasValidDomains(android.content.pm.parsing.component.ParsedIntentInfo)
    {
        android.content.pm.parsing.component.ParsedIntentInfo r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: android.content.pm.parsing.component.ParsedIntentInfo;

        $z0 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedIntentInfo: boolean hasCategory(java.lang.String)>("android.intent.category.BROWSABLE");

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedIntentInfo: boolean hasDataScheme(java.lang.String)>("http");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.content.pm.parsing.component.ParsedIntentInfo: boolean hasDataScheme(java.lang.String)>("https");

        if $z2 == 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    private com.android.server.pm.parsing.pkg.AndroidPackage installPackageFromSystemLIF(java.lang.String, int[], int[], com.android.server.pm.permission.PermissionsState, boolean) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int[] r1, r2;
        com.android.server.pm.permission.PermissionsState r3, $r16;
        boolean z0, z1, $z2, $z3, $z4, z6, z8;
        int i0, i1, $i2, $i3, i5, i6, i7, $i8, $i9, i10;
        java.io.File $r4;
        java.util.List $r5, $r17;
        com.android.server.pm.Settings $r6, $r12, $r13, $r14, $r15, $r30;
        android.util.ArrayMap $r7, $r33;
        java.lang.String $r8, $r11, $r22, $r24, r26, $r31;
        java.lang.Object $r9, $r18, r37;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r10;
        com.android.server.pm.PackageManagerException $r19;
        java.lang.StringBuilder $r20;
        java.lang.Throwable $r25;
        com.android.server.pm.PackageManagerService$ScanPartition r28;
        com.android.server.pm.parsing.pkg.AndroidPackage r29;
        com.android.server.pm.PackageSetting r32, r38;
        java.util.Map $r34;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r26 := @parameter0: java.lang.String;

        r1 := @parameter1: int[];

        r2 := @parameter2: int[];

        r3 := @parameter3: com.android.server.pm.permission.PermissionsState;

        z0 := @parameter4: boolean;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r26);

        i5 = r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        $r5 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        i6 = $i2 - 1;

     label01:
        if i6 < 0 goto label04;

        $r17 = r0.<com.android.server.pm.PackageManagerService: java.util.List mDirsToScanAsSystem>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i6);

        r28 = (com.android.server.pm.PackageManagerService$ScanPartition) $r18;

        $z3 = virtualinvoke r28.<com.android.server.pm.PackageManagerService$ScanPartition: boolean containsFile(java.io.File)>($r4);

        if $z3 == 0 goto label03;

        $i3 = r28.<com.android.server.pm.PackageManagerService$ScanPartition: int scanFlag>;

        i7 = 65536 | $i3;

        $z4 = virtualinvoke r28.<com.android.server.pm.PackageManagerService$ScanPartition: boolean containsPrivApp(java.io.File)>($r4);

        if $z4 == 0 goto label02;

        i7 = i7 | 131072;

        goto label05;

     label02:
        goto label05;

     label03:
        i6 = i6 + -1;

        goto label01;

     label04:
        i7 = 65536;

     label05:
        $i8 = i5 | 1;

        $i9 = $i8 | 16;

        r29 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage scanPackageTracedLI(java.io.File,int,int,long,android.os.UserHandle)>($r4, $i9, i7, 0L, null);

        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r31 = interfaceinvoke r29.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r32 = virtualinvoke $r30.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r31);

     label06:
        $r33 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r34 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r33);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.Map)>(r29, r32, null, null, $r34);

     label07:
        goto label09;

     label08:
        $r19 := @caughtexception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAllSharedLibrariesLPw failed: ");

        $r22 = virtualinvoke $r19.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r24);

     label09:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataAfterInstallLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r29);

        r37 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r37;

     label10:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = interfaceinvoke r29.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r9 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        r38 = (com.android.server.pm.PackageSetting) $r9;

     label11:
        if r3 == null goto label13;

     label12:
        $r16 = virtualinvoke r38.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        virtualinvoke $r16.<com.android.server.pm.permission.PermissionsState: void copyFrom(com.android.server.pm.permission.PermissionsState)>(r3);

     label13:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r11 = interfaceinvoke r29.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r10.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>($r11, r29);

     label14:
        if r1 == null goto label15;

        if r2 == null goto label15;

        z6 = 1;

        goto label16;

     label15:
        z6 = 0;

     label16:
        if z6 == 0 goto label32;

        z8 = 0;

     label17:
        i0 = lengthof r1;

     label18:
        i10 = 0;

     label19:
        if i10 >= i0 goto label28;

        i1 = r1[i10];

     label20:
        z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r2, i1);

     label21:
        $z2 = virtualinvoke r38.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i1);

        if z1 == $z2 goto label23;

     label22:
        z8 = 1;

     label23:
        virtualinvoke r38.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(z1, i1);

     label24:
        if z1 == 0 goto label26;

     label25:
        virtualinvoke r38.<com.android.server.pm.PackageSetting: void setUninstallReason(int,int)>(0, i1);

     label26:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r15.<com.android.server.pm.Settings: void writeRuntimePermissionsForUserLPr(int,boolean)>(i1, 0);

     label27:
        i10 = i10 + 1;

        goto label19;

     label28:
        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r13.<com.android.server.pm.Settings: void writeAllUsersPackageRestrictionsLPr()>();

     label29:
        if z8 == 0 goto label32;

     label30:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r14.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r38);

     label31:
        goto label32;

     label32:
        if z0 == 0 goto label34;

     label33:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r12.<com.android.server.pm.Settings: void writeLPr()>();

     label34:
        exitmonitor r37;

     label35:
        return r29;

     label36:
        $r25 := @caughtexception;

     label37:
        exitmonitor r37;

     label38:
        throw $r25;

        catch com.android.server.pm.PackageManagerException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label36;
        catch java.lang.Throwable from label12 to label13 with label36;
        catch java.lang.Throwable from label13 to label14 with label36;
        catch java.lang.Throwable from label17 to label18 with label36;
        catch java.lang.Throwable from label20 to label21 with label36;
        catch java.lang.Throwable from label21 to label22 with label36;
        catch java.lang.Throwable from label23 to label24 with label36;
        catch java.lang.Throwable from label25 to label26 with label36;
        catch java.lang.Throwable from label26 to label27 with label36;
        catch java.lang.Throwable from label28 to label29 with label36;
        catch java.lang.Throwable from label30 to label31 with label36;
        catch java.lang.Throwable from label33 to label34 with label36;
        catch java.lang.Throwable from label34 to label35 with label36;
        catch java.lang.Throwable from label37 to label38 with label36;
    }

    private void installPackagesLI(java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i18, $i19, $i20, $i21, $i22, $i23, $i28, $i33, $i34, i39, i48, i50;
        android.os.UserHandle r4, $r41, $r132;
        android.util.ArrayMap $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, r244, r245, r301;
        com.android.server.pm.Settings $r13;
        com.android.server.pm.KeySetManagerService $r14;
        com.android.server.pm.UserManagerService $r15;
        int[] $r16;
        java.lang.Object $r32, $r42, $r82, $r89, $r94, $r109, $r116, $r121, $r123, $r136, $r143, $r148, $r160, $r165, $r172, $r177, $r213, $r220, $r225, r260, r304;
        android.content.pm.PackageParser$SigningDetails $r33, $r124;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r34, $r36, $r43, $r45, $r51, $r83, $r85, $r86, $r87, $r110, $r112, $r113, $r114, $r125, $r127, $r137, $r139, $r140, $r141, $r162, $r166, $r168, $r169, $r170, $r206, $r209, $r211, $r214, $r216, $r217, $r218, r255, r261, $r277;
        com.android.server.pm.parsing.pkg.AndroidPackage $r35, $r37, $r58, $r63, $r66, $r71, $r76, $r126, $r128;
        com.android.server.pm.PackageManagerService$OriginInfo $r38, $r129;
        java.io.File $r39, $r130;
        java.lang.String $r40, $r48, $r59, $r64, $r72, $r77, $r80, $r92, $r119, $r131, $r146, $r175, $r207, $r208, $r210, $r223, r256, r258, r310, r335;
        com.android.server.pm.PackageManagerService$InstallArgs $r44, $r46, $r53, $r55, $r56, r309, r334;
        com.android.server.pm.InstallSource $r47;
        com.android.server.pm.parsing.pkg.ParsedPackage $r49, $r91, $r118, $r145, $r174, $r222, r257;
        com.android.server.pm.PackageSetting $r57, $r62, $r65, $r70, $r75, r274;
        java.lang.Boolean $r60, $r93, $r95, $r120, $r122, $r147, $r149, $r176, $r178, $r224, $r226;
        com.android.server.pm.Settings$VersionInfo $r67;
        android.content.pm.SharedLibraryInfo $r69;
        java.util.Collection $r81, $r108, $r135, $r164, $r212;
        boolean $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, z19, z21, z23, z26, $z29, $z31;
        com.android.server.pm.PackageManagerService$PackageFreezer $r84, $r88, $r111, $r115, $r138, $r142, $r167, $r171, $r215, $r219;
        com.android.server.pm.PackageManagerService$ScanRequest $r90, $r117, $r144, $r173, $r221;
        java.lang.Throwable $r106, $r107, $r133, $r189, $r190, $r191, $r192, $r193, $r194, $r195, $r196, $r198, $r199, $r200, $r201, $r237, $r238, $r239, r275, r288;
        com.android.server.pm.PackageManagerService$ReconcileFailure $r134;
        com.android.server.pm.PackageManagerService$InstallRequest $r161, r253, r272, r287, r299, r308, r330, r333, r341;
        com.android.server.pm.PackageManagerException $r163, $r197, $r202, $r203, $r204, r273;
        com.android.server.pm.PackageManagerService$PrepareFailure $r205;
        java.util.List r240;
        java.util.Iterator r250, r269, r271, r284, r286, r296, r298, r307, r320, r327, r329, r332, r338, r340;
        com.android.server.pm.PackageManagerService$PrepareResult r254;
        long l40;
        com.android.server.pm.PackageManagerService$ScanResult r259, r270, r285, r297, r328, r339;
        java.lang.StringBuilder r262;
        com.android.server.pm.PackageManagerService$ReconcileRequest r300;
        java.util.Map r302, r305;
        com.android.server.pm.PackageManagerService$CommitRequest r306;
        java.lang.String[] r311, r336;
        android.net.Uri r312, r337;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r240 := @parameter0: java.util.List;

        $r5 = new android.util.ArrayMap;

        $i1 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r5.<android.util.ArrayMap: void <init>(int)>($i1);

        $r6 = new android.util.ArrayMap;

        $i2 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r6.<android.util.ArrayMap: void <init>(int)>($i2);

        $r7 = new android.util.ArrayMap;

        $i3 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r7.<android.util.ArrayMap: void <init>(int)>($i3);

        $r8 = new android.util.ArrayMap;

        $i4 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r8.<android.util.ArrayMap: void <init>(int)>($i4);

        $r9 = new android.util.ArrayMap;

        $i5 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r9.<android.util.ArrayMap: void <init>(int)>($i5);

        $r10 = new android.util.ArrayMap;

        $i6 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r10.<android.util.ArrayMap: void <init>(int)>($i6);

        $r11 = new android.util.ArrayMap;

        $i7 = interfaceinvoke r240.<java.util.List: int size()>();

        specialinvoke $r11.<android.util.ArrayMap: void <init>(int)>($i7);

        r244 = $r11;

        z19 = 0;

        r245 = $r11;

     label001:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "installPackagesLI");

     label002:
        r245 = $r11;

     label003:
        r250 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label004:
        r245 = $r11;

     label005:
        z21 = interfaceinvoke r250.<java.util.Iterator: boolean hasNext()>();

     label006:
        if z21 == 0 goto label072;

     label007:
        $r42 = interfaceinvoke r250.<java.util.Iterator: java.lang.Object next()>();

        r253 = (com.android.server.pm.PackageManagerService$InstallRequest) $r42;

     label008:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "preparePackage");

        $r44 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $r43 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        r254 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PrepareResult preparePackageLI(com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>($r44, $r43);

     label009:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label010:
        $r45 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        virtualinvoke $r45.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setReturnCode(int)>(1);

        r255 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

     label011:
        $r46 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $r47 = $r46.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.InstallSource installSource>;

        $r48 = $r47.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        r255.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String installerPackageName> = $r48;

        $r49 = r254.<com.android.server.pm.PackageManagerService$PrepareResult: com.android.server.pm.parsing.pkg.ParsedPackage packageToScan>;

        r256 = interfaceinvoke $r49.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r256, r254);

        $r51 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r256, $r51);

        $r53 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r256, $r53);

     label012:
        r257 = r254.<com.android.server.pm.PackageManagerService$PrepareResult: com.android.server.pm.parsing.pkg.ParsedPackage packageToScan>;

        i39 = r254.<com.android.server.pm.PackageManagerService$PrepareResult: int parseFlags>;

        i0 = r254.<com.android.server.pm.PackageManagerService$PrepareResult: int scanFlags>;

        l40 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r55 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        r4 = $r55.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $r56 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        r258 = $r56.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String abiOverride>;

     label013:
        r259 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanResult scanPackageTracedLI(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,long,android.os.UserHandle,java.lang.String)>(r257, i39, i0, l40, r4, r258);

        $r57 = r259.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r58 = $r57.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r59 = interfaceinvoke $r58.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r260 = interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, r259);

     label014:
        if r260 == null goto label026;

     label015:
        r261 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        r262 = new java.lang.StringBuilder;

        specialinvoke r262.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate package ");

        $r75 = r259.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r76 = $r75.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r77 = interfaceinvoke $r76.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r77);

        virtualinvoke r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in multi-package install request.");

        $r80 = virtualinvoke r262.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r261.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-5, $r80);

     label016:
        goto label017;

     label017:
        $r81 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r269 = interfaceinvoke $r81.<java.util.Collection: java.util.Iterator iterator()>();

     label018:
        $z3 = interfaceinvoke r269.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label020;

        $r89 = interfaceinvoke r269.<java.util.Iterator: java.lang.Object next()>();

        r270 = (com.android.server.pm.PackageManagerService$ScanResult) $r89;

        $r90 = r270.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r91 = $r90.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r92 = interfaceinvoke $r91.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r93 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r94 = interfaceinvoke $r11.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r92, $r93);

        $r95 = (java.lang.Boolean) $r94;

        $z5 = virtualinvoke $r95.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 == 0 goto label019;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)>(r270);

     label019:
        goto label018;

     label020:
        r271 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label021:
        $z4 = interfaceinvoke r271.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label024;

        $r82 = interfaceinvoke r271.<java.util.Iterator: java.lang.Object next()>();

        r272 = (com.android.server.pm.PackageManagerService$InstallRequest) $r82;

        $r83 = r272.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r84 = $r83.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        if $r84 == null goto label022;

        $r87 = r272.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r88 = $r87.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        virtualinvoke $r88.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label022:
        $r85 = r272.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i13 = $r85.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i13 != 1 goto label023;

        $r86 = r272.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r86.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 0;

        goto label023;

     label023:
        goto label021;

     label024:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label025:
        $r202 := @caughtexception;

        r273 = $r202;

        goto label039;

     label026:
        z23 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean optimisticallyRegisterAppId(com.android.server.pm.PackageManagerService$ScanResult)>(r259);

     label027:
        $r60 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z23);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r256, $r60);

        $r62 = r259.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r63 = $r62.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r64 = interfaceinvoke $r63.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r65 = r259.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r66 = $r65.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r67 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>($r66);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, $r67);

        $r69 = r259.<com.android.server.pm.PackageManagerService$ScanResult: android.content.pm.SharedLibraryInfo staticSharedLibraryInfo>;

        if $r69 == null goto label031;

     label028:
        r274 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getSharedLibLatestVersionSetting(com.android.server.pm.PackageManagerService$ScanResult)>(r259);

     label029:
        if r274 == null goto label031;

     label030:
        $r70 = r259.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r71 = $r70.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r72 = interfaceinvoke $r71.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r72, r274);

     label031:
        goto label004;

     label032:
        $r203 := @caughtexception;

        r273 = $r203;

        goto label039;

     label033:
        $r195 := @caughtexception;

        r275 = $r195;

        goto label124;

     label034:
        $r197 := @caughtexception;

        r273 = $r197;

        goto label039;

     label035:
        $r199 := @caughtexception;

        r275 = $r199;

        goto label124;

     label036:
        $r204 := @caughtexception;

        r273 = $r204;

        goto label039;

     label037:
        $r200 := @caughtexception;

        r275 = $r200;

        goto label124;

     label038:
        $r163 := @caughtexception;

        r273 = $r163;

     label039:
        $r277 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        virtualinvoke $r277.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,com.android.server.pm.PackageManagerException)>("Scanning Failed.", r273);

     label040:
        goto label041;

     label041:
        $r164 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r284 = interfaceinvoke $r164.<java.util.Collection: java.util.Iterator iterator()>();

     label042:
        $z13 = interfaceinvoke r284.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label044;

        $r172 = interfaceinvoke r284.<java.util.Iterator: java.lang.Object next()>();

        r285 = (com.android.server.pm.PackageManagerService$ScanResult) $r172;

        $r173 = r285.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r174 = $r173.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r175 = interfaceinvoke $r174.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r176 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r177 = interfaceinvoke $r11.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r175, $r176);

        $r178 = (java.lang.Boolean) $r177;

        $z15 = virtualinvoke $r178.<java.lang.Boolean: boolean booleanValue()>();

        if $z15 == 0 goto label043;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)>(r285);

     label043:
        goto label042;

     label044:
        r286 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label045:
        $z14 = interfaceinvoke r286.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label048;

        $r165 = interfaceinvoke r286.<java.util.Iterator: java.lang.Object next()>();

        r287 = (com.android.server.pm.PackageManagerService$InstallRequest) $r165;

        $r166 = r287.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r167 = $r166.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        if $r167 == null goto label046;

        $r170 = r287.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r171 = $r170.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        virtualinvoke $r171.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label046:
        $r168 = r287.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i28 = $r168.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i28 != 1 goto label047;

        $r169 = r287.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r169.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 0;

     label047:
        goto label045;

     label048:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label049:
        $r238 := @caughtexception;

        r275 = $r238;

        goto label124;

     label050:
        $r191 := @caughtexception;

        r275 = $r191;

        goto label071;

     label051:
        $r107 := @caughtexception;

        r275 = $r107;

        goto label071;

     label052:
        $r192 := @caughtexception;

        r288 = $r192;

        goto label067;

     label053:
        $r205 := @caughtexception;

     label054:
        $r206 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i33 = $r205.<com.android.server.pm.PackageManagerService$PrepareFailure: int error>;

        $r207 = virtualinvoke $r205.<com.android.server.pm.PackageManagerService$PrepareFailure: java.lang.String getMessage()>();

        virtualinvoke $r206.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>($i33, $r207);

        $r209 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r208 = $r205.<com.android.server.pm.PackageManagerService$PrepareFailure: java.lang.String conflictingPackage>;

        $r209.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPackage> = $r208;

        $r211 = r253.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r210 = $r205.<com.android.server.pm.PackageManagerService$PrepareFailure: java.lang.String conflictingPermission>;

        $r211.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPermission> = $r210;

     label055:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label056:
        goto label057;

     label057:
        $r212 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r296 = interfaceinvoke $r212.<java.util.Collection: java.util.Iterator iterator()>();

     label058:
        $z16 = interfaceinvoke r296.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label060;

        $r220 = interfaceinvoke r296.<java.util.Iterator: java.lang.Object next()>();

        r297 = (com.android.server.pm.PackageManagerService$ScanResult) $r220;

        $r221 = r297.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r222 = $r221.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r223 = interfaceinvoke $r222.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r224 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r225 = interfaceinvoke $r11.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r223, $r224);

        $r226 = (java.lang.Boolean) $r225;

        $z18 = virtualinvoke $r226.<java.lang.Boolean: boolean booleanValue()>();

        if $z18 == 0 goto label059;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)>(r297);

     label059:
        goto label058;

     label060:
        r298 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label061:
        $z17 = interfaceinvoke r298.<java.util.Iterator: boolean hasNext()>();

        if $z17 == 0 goto label064;

        $r213 = interfaceinvoke r298.<java.util.Iterator: java.lang.Object next()>();

        r299 = (com.android.server.pm.PackageManagerService$InstallRequest) $r213;

        $r214 = r299.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r215 = $r214.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        if $r215 == null goto label062;

        $r218 = r299.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r219 = $r218.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        virtualinvoke $r219.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label062:
        $r216 = r299.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i34 = $r216.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i34 != 1 goto label063;

        $r217 = r299.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r217.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 0;

     label063:
        goto label061;

     label064:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label065:
        $r237 := @caughtexception;

        r275 = $r237;

        goto label124;

     label066:
        $r190 := @caughtexception;

        r288 = $r190;

     label067:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label068:
        throw r288;

     label069:
        $r189 := @caughtexception;

        r275 = $r189;

        goto label124;

     label070:
        $r133 := @caughtexception;

        r275 = $r133;

     label071:
        goto label124;

     label072:
        r300 = new com.android.server.pm.PackageManagerService$ReconcileRequest;

        r301 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        r302 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r12);

     label073:
        specialinvoke r300.<com.android.server.pm.PackageManagerService$ReconcileRequest: void <init>(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map,com.android.server.pm.PackageManagerService$1)>($r5, $r6, $r7, $r8, r301, r302, $r9, $r10, null);

        r304 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r304;

     label074:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "reconcilePackages");

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r13.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        r305 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.Map reconcilePackagesLocked(com.android.server.pm.PackageManagerService$ReconcileRequest,com.android.server.pm.KeySetManagerService)>(r300, $r14);

     label075:
        z26 = 0;

     label076:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label077:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "commitPackages");

        r306 = new com.android.server.pm.PackageManagerService$CommitRequest;

        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r16 = virtualinvoke $r15.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        specialinvoke r306.<com.android.server.pm.PackageManagerService$CommitRequest: void <init>(java.util.Map,int[],com.android.server.pm.PackageManagerService$1)>(r305, $r16, null);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void commitPackagesLocked(com.android.server.pm.PackageManagerService$CommitRequest)>(r306);

     label078:
        z26 = 1;

     label079:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label080:
        z26 = 1;

     label081:
        exitmonitor r304;

     label082:
        z19 = 1;

     label083:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void executePostCommitSteps(com.android.server.pm.PackageManagerService$CommitRequest)>(r306);

     label084:
        r307 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label085:
        $z29 = interfaceinvoke r307.<java.util.Iterator: boolean hasNext()>();

        if $z29 == 0 goto label088;

        $r32 = interfaceinvoke r307.<java.util.Iterator: java.lang.Object next()>();

        r308 = (com.android.server.pm.PackageManagerService$InstallRequest) $r32;

        r309 = r308.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $i9 = r309.<com.android.server.pm.PackageManagerService$InstallArgs: int mDataLoaderType>;

        if $i9 == 2 goto label086;

        goto label085;

     label086:
        $r33 = r309.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $i10 = $r33.<android.content.pm.PackageParser$SigningDetails: int signatureSchemeVersion>;

        if $i10 == 4 goto label087;

        goto label085;

     label087:
        $r34 = r308.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r35 = $r34.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r310 = interfaceinvoke $r35.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r36 = r308.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r37 = $r36.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r311 = interfaceinvoke $r37.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $r38 = r309.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r39 = $r38.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File resolvedFile>;

        r312 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r39);

        i48 = r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken>;

        $i11 = i48 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = $i11;

        $r40 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.lang.String buildVerificationRootHashString(java.lang.String,java.lang.String[])>(r310, r311);

        $i12 = r309.<com.android.server.pm.PackageManagerService$InstallArgs: int mDataLoaderType>;

        $r41 = virtualinvoke r309.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void broadcastPackageVerified(int,android.net.Uri,int,java.lang.String,int,android.os.UserHandle)>(i48, r312, 1, $r40, $i12, $r41);

        goto label085;

     label088:
        goto label089;

     label089:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label090:
        $r198 := @caughtexception;

        z26 = 0;

     label091:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label092:
        z26 = 0;

     label093:
        throw $r198;

     label094:
        $r239 := @caughtexception;

        goto label112;

     label095:
        $r134 := @caughtexception;

        goto label096;

     label096:
        r320 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label097:
        $z9 = interfaceinvoke r320.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label099;

        $r160 = interfaceinvoke r320.<java.util.Iterator: java.lang.Object next()>();

        $r161 = (com.android.server.pm.PackageManagerService$InstallRequest) $r160;

        $r162 = $r161.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        virtualinvoke $r162.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(java.lang.String,com.android.server.pm.PackageManagerException)>("Reconciliation failed...", $r134);

     label098:
        goto label097;

     label099:
        z26 = 0;

     label100:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label101:
        z26 = 0;

     label102:
        exitmonitor r304;

     label103:
        goto label104;

     label104:
        $r135 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r327 = interfaceinvoke $r135.<java.util.Collection: java.util.Iterator iterator()>();

     label105:
        $z10 = interfaceinvoke r327.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label107;

        $r143 = interfaceinvoke r327.<java.util.Iterator: java.lang.Object next()>();

        r328 = (com.android.server.pm.PackageManagerService$ScanResult) $r143;

        $r144 = r328.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r145 = $r144.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r146 = interfaceinvoke $r145.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r147 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r148 = interfaceinvoke $r11.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r146, $r147);

        $r149 = (java.lang.Boolean) $r148;

        $z12 = virtualinvoke $r149.<java.lang.Boolean: boolean booleanValue()>();

        if $z12 == 0 goto label106;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)>(r328);

     label106:
        goto label105;

     label107:
        r329 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label108:
        $z11 = interfaceinvoke r329.<java.util.Iterator: boolean hasNext()>();

        if $z11 == 0 goto label111;

        $r136 = interfaceinvoke r329.<java.util.Iterator: java.lang.Object next()>();

        r330 = (com.android.server.pm.PackageManagerService$InstallRequest) $r136;

        $r137 = r330.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r138 = $r137.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        if $r138 == null goto label109;

        $r141 = r330.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r142 = $r141.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        virtualinvoke $r142.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label109:
        $r139 = r330.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i23 = $r139.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i23 != 1 goto label110;

        $r140 = r330.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r140.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 0;

     label110:
        goto label108;

     label111:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label112:
        z26 = 0;

     label113:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label114:
        z26 = 0;

     label115:
        throw $r239;

     label116:
        $r106 := @caughtexception;

     label117:
        exitmonitor r304;

     label118:
        z19 = z26;

     label119:
        throw $r106;

     label120:
        $r193 := @caughtexception;

        r275 = $r193;

        goto label124;

     label121:
        $r194 := @caughtexception;

        r275 = $r194;

        goto label124;

     label122:
        $r201 := @caughtexception;

        r275 = $r201;

        goto label124;

     label123:
        $r196 := @caughtexception;

        r275 = $r196;

        r244 = r245;

     label124:
        if z19 == 0 goto label129;

        r332 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label125:
        $z31 = interfaceinvoke r332.<java.util.Iterator: boolean hasNext()>();

        if $z31 == 0 goto label128;

        $r123 = interfaceinvoke r332.<java.util.Iterator: java.lang.Object next()>();

        r333 = (com.android.server.pm.PackageManagerService$InstallRequest) $r123;

        r334 = r333.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $i19 = r334.<com.android.server.pm.PackageManagerService$InstallArgs: int mDataLoaderType>;

        if $i19 == 2 goto label126;

        goto label125;

     label126:
        $r124 = r334.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.PackageParser$SigningDetails signingDetails>;

        $i20 = $r124.<android.content.pm.PackageParser$SigningDetails: int signatureSchemeVersion>;

        if $i20 == 4 goto label127;

        goto label125;

     label127:
        $r125 = r333.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r126 = $r125.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r335 = interfaceinvoke $r126.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r127 = r333.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r128 = $r127.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r336 = interfaceinvoke $r128.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $r129 = r334.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r130 = $r129.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File resolvedFile>;

        r337 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>($r130);

        i50 = r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken>;

        $i21 = i50 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mPendingVerificationToken> = $i21;

        $r131 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.lang.String buildVerificationRootHashString(java.lang.String,java.lang.String[])>(r335, r336);

        $i22 = r334.<com.android.server.pm.PackageManagerService$InstallArgs: int mDataLoaderType>;

        $r132 = virtualinvoke r334.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle getUser()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void broadcastPackageVerified(int,android.net.Uri,int,java.lang.String,int,android.os.UserHandle)>(i50, r337, 1, $r131, $i22, $r132);

        goto label125;

     label128:
        goto label136;

     label129:
        $r108 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        r338 = interfaceinvoke $r108.<java.util.Collection: java.util.Iterator iterator()>();

     label130:
        $z6 = interfaceinvoke r338.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label132;

        $r116 = interfaceinvoke r338.<java.util.Iterator: java.lang.Object next()>();

        r339 = (com.android.server.pm.PackageManagerService$ScanResult) $r116;

        $r117 = r339.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r118 = $r117.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r119 = interfaceinvoke $r118.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r120 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r121 = interfaceinvoke r244.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r119, $r120);

        $r122 = (java.lang.Boolean) $r121;

        $z8 = virtualinvoke $r122.<java.lang.Boolean: boolean booleanValue()>();

        if $z8 == 0 goto label131;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void cleanUpAppIdCreation(com.android.server.pm.PackageManagerService$ScanResult)>(r339);

     label131:
        goto label130;

     label132:
        r340 = interfaceinvoke r240.<java.util.List: java.util.Iterator iterator()>();

     label133:
        $z7 = interfaceinvoke r340.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label136;

        $r109 = interfaceinvoke r340.<java.util.Iterator: java.lang.Object next()>();

        r341 = (com.android.server.pm.PackageManagerService$InstallRequest) $r109;

        $r110 = r341.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r111 = $r110.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        if $r111 == null goto label134;

        $r114 = r341.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r115 = $r114.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        virtualinvoke $r115.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label134:
        $r112 = r341.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i18 = $r112.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i18 != 1 goto label135;

        $r113 = r341.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r113.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode> = 0;

     label135:
        goto label133;

     label136:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw r275;

        catch java.lang.Throwable from label001 to label002 with label123;
        catch java.lang.Throwable from label003 to label004 with label123;
        catch java.lang.Throwable from label005 to label006 with label123;
        catch java.lang.Throwable from label007 to label008 with label070;
        catch com.android.server.pm.PackageManagerService$PrepareFailure from label008 to label009 with label053;
        catch java.lang.Throwable from label008 to label009 with label052;
        catch java.lang.Throwable from label009 to label010 with label051;
        catch java.lang.Throwable from label010 to label011 with label051;
        catch java.lang.Throwable from label011 to label012 with label050;
        catch com.android.server.pm.PackageManagerException from label012 to label013 with label038;
        catch java.lang.Throwable from label012 to label013 with label037;
        catch com.android.server.pm.PackageManagerException from label013 to label014 with label036;
        catch java.lang.Throwable from label013 to label014 with label035;
        catch com.android.server.pm.PackageManagerException from label015 to label016 with label025;
        catch java.lang.Throwable from label015 to label016 with label035;
        catch com.android.server.pm.PackageManagerException from label026 to label027 with label034;
        catch java.lang.Throwable from label026 to label027 with label033;
        catch com.android.server.pm.PackageManagerException from label027 to label028 with label032;
        catch java.lang.Throwable from label027 to label028 with label033;
        catch com.android.server.pm.PackageManagerException from label028 to label029 with label032;
        catch java.lang.Throwable from label028 to label029 with label033;
        catch com.android.server.pm.PackageManagerException from label030 to label031 with label032;
        catch java.lang.Throwable from label030 to label031 with label033;
        catch java.lang.Throwable from label039 to label040 with label049;
        catch java.lang.Throwable from label054 to label055 with label066;
        catch java.lang.Throwable from label055 to label056 with label065;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label068 to label069 with label069;
        catch java.lang.Throwable from label072 to label073 with label122;
        catch java.lang.Throwable from label073 to label074 with label121;
        catch com.android.server.pm.PackageManagerService$ReconcileFailure from label074 to label075 with label095;
        catch java.lang.Throwable from label074 to label075 with label094;
        catch java.lang.Throwable from label076 to label077 with label116;
        catch java.lang.Throwable from label077 to label078 with label090;
        catch java.lang.Throwable from label079 to label080 with label116;
        catch java.lang.Throwable from label081 to label082 with label116;
        catch java.lang.Throwable from label083 to label084 with label120;
        catch java.lang.Throwable from label091 to label092 with label116;
        catch java.lang.Throwable from label093 to label094 with label116;
        catch java.lang.Throwable from label096 to label097 with label094;
        catch java.lang.Throwable from label097 to label098 with label094;
        catch java.lang.Throwable from label100 to label101 with label116;
        catch java.lang.Throwable from label102 to label103 with label116;
        catch java.lang.Throwable from label113 to label114 with label116;
        catch java.lang.Throwable from label115 to label116 with label116;
        catch java.lang.Throwable from label117 to label118 with label116;
        catch java.lang.Throwable from label119 to label120 with label120;
    }

    private void installPackagesTracedLI(java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Throwable $r1;
        java.util.List r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r2 := @parameter0: java.util.List;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "installPackages");

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void installPackagesLI(java.util.List)>(r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private com.android.server.pm.parsing.pkg.AndroidPackage installStubPackageLI(com.android.server.pm.parsing.pkg.AndroidPackage, int, int) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean $z0;
        java.lang.String $r2, $r3, $r6, $r9, $r11, $r14, $r16, $r20, $r22;
        java.lang.StringBuilder $r4, $r12, $r18;
        com.android.server.pm.PackageManagerException $r8, $r17;
        com.android.server.pm.Settings $r10;
        java.lang.Throwable $r23;
        com.android.server.pm.parsing.pkg.AndroidPackage r24, r28;
        java.io.File r26;
        java.lang.Object r27;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r24 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_COMPRESSION>;

        if $z0 == 0 goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Uncompressing system stub; pkg: ");

        $r14 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r16);

     label01:
        $r2 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r3 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        r26 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.io.File decompressPackage(java.lang.String,java.lang.String)>($r2, $r3);

        if r26 == null goto label10;

        r27 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r27;

     label02:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r10.<com.android.server.pm.Settings: boolean disableSystemPackageLPw(java.lang.String,boolean)>($r11, 1);

        exitmonitor r27;

     label03:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageLI(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r24, 1);

     label04:
        r28 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage scanPackageTracedLI(java.io.File,int,int,long,android.os.UserHandle)>(r26, i0, i1, 0L, null);

     label05:
        return r28;

     label06:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install compressed system package:");

        $r20 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r22, $r17);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeCodePathLI(java.io.File)>(r26);

        throw $r17;

     label07:
        $r23 := @caughtexception;

     label08:
        exitmonitor r27;

     label09:
        throw $r23;

     label10:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to decompress stub at ");

        $r6 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = new com.android.server.pm.PackageManagerException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.server.pm.PackageManagerException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch com.android.server.pm.PackageManagerException from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private void installSystemStubPackages(java.util.List, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        int $i0, $i1, $i2, i4, i5, i6;
        java.lang.Object $r2, $r5, $r11, $r14, $r17;
        com.android.server.pm.Settings $r3, $r12, $r15;
        android.util.ArrayMap $r4, $r13, $r16;
        com.android.server.pm.PackageSetting $r6, r31;
        java.lang.StringBuilder $r7, $r24;
        java.lang.String $r10, $r26, $r28, r29, r34;
        boolean $z0;
        com.android.server.pm.PackageManagerException $r23;
        com.android.server.pm.parsing.pkg.AndroidPackage r30;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        i4 := @parameter1: int;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = $i0 - 1;

     label01:
        if i5 < 0 goto label08;

        $r11 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r29 = (java.lang.String) $r11;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z0 = virtualinvoke $r12.<com.android.server.pm.Settings: boolean isDisabledSystemPackageLPr(java.lang.String)>(r29);

        if $z0 == 0 goto label02;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i5);

        goto label07;

     label02:
        $r13 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r29);

        r30 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r14;

        if r30 != null goto label03;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i5);

        goto label07;

     label03:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r16 = $r15.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r17 = virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r29);

        r31 = (com.android.server.pm.PackageSetting) $r17;

        if r31 == null goto label04;

        $i2 = virtualinvoke r31.<com.android.server.pm.PackageSetting: int getEnabled(int)>(0);

        if $i2 != 3 goto label04;

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i5);

        goto label07;

     label04:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage installStubPackageLI(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r30, 0, i4);

        virtualinvoke r31.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(0, 0, "android");

        interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i5);

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse uncompressed system package: ");

        $r26 = virtualinvoke $r23.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r28);

     label07:
        i5 = i5 + -1;

        goto label01;

     label08:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i6 = $i1 - 1;

     label09:
        if i6 < 0 goto label10;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r34 = (java.lang.String) $r2;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r34);

        $r6 = (com.android.server.pm.PackageSetting) $r5;

        virtualinvoke $r6.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(2, 0, "android");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stub disabled; pkg: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r10);

        i6 = i6 + -1;

        goto label09;

     label10:
        return;

        catch com.android.server.pm.PackageManagerException from label04 to label05 with label06;
    }

    private void installWhitelistedSystemPackages()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z1, $z2;
        android.util.ArraySet $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingPackages>;

        $z2 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean installWhitelistedSystemPackages(boolean,boolean,android.util.ArraySet)>($z0, $z1, $r4);

        if $z2 == 0 goto label2;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(-1);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean isCallerAllowedToSilentlyUninstall(int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1, r2, r3, r4, r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        if i0 == 2000 goto label7;

        if i0 == 0 goto label7;

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        if $i2 != 1000 goto label1;

        goto label7;

     label1:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>(r2);

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>($r1, 0, i1);

        if i0 != $i3 goto label2;

        return 1;

     label2:
        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        if r3 == null goto label3;

        $i7 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r3, 0, i1);

        if i0 != $i7 goto label3;

        return 1;

     label3:
        r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredUninstallerPackage>;

        if r4 == null goto label4;

        $i6 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r4, 0, i1);

        if i0 != $i6 goto label4;

        return 1;

     label4:
        r5 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mStorageManagerPackage>;

        if r5 == null goto label5;

        $i5 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r5, 0, i1);

        if i0 != $i5 goto label5;

        return 1;

     label5:
        $i4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS", i0);

        if $i4 != 0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        return 1;
    }

    private boolean isCallerDeviceOrProfileOwner(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1;
        com.android.server.pm.ProtectedPackages $r2;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        z0 = 1;

        if i1 != 1000 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        r1 = virtualinvoke $r2.<com.android.server.pm.ProtectedPackages: java.lang.String getDeviceOwnerOrProfileOwnerPackage(int)>(i0);

        if r1 == null goto label4;

        $i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUidInternal(java.lang.String,int,int,int)>(r1, 0, i0, i1);

        if i1 != $i2 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;

     label4:
        return 0;
    }

    private boolean isCallerSameApp(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        java.lang.String r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r2;

        if r4 == null goto label1;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i2 = interfaceinvoke r4.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        if $i1 != $i2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isCompatSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)
    {
        com.android.server.pm.Settings$VersionInfo r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.Settings$VersionInfo;

        $i0 = r0.<com.android.server.pm.Settings$VersionInfo: int databaseVersion>;

        if $i0 >= 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isCompatSignatureUpdateNeeded(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.Settings$VersionInfo $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isCompatSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)>($r2);

        return $z0;
    }

    private boolean isComponentVisibleToInstantApp(android.content.ComponentName)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isComponentVisibleToInstantApp(android.content.ComponentName,int)>(r1, 1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isComponentVisibleToInstantApp(android.content.ComponentName,int)>(r1, 3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isComponentVisibleToInstantApp(android.content.ComponentName,int)>(r1, 4);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean isComponentVisibleToInstantApp(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z3, z4, z5, z6, z7, z8, z9, z10, z11;
        com.android.server.pm.ComponentResolver $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        android.content.ComponentName r5;
        android.content.pm.parsing.component.ParsedActivity r6, r7;
        android.content.pm.parsing.component.ParsedService r8;
        android.content.pm.parsing.component.ParsedProvider r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: android.content.ComponentName;

        i12 := @parameter1: int;

        z4 = 1;

        if i12 != 1 goto label08;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r6 = virtualinvoke $r4.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedActivity getActivity(android.content.ComponentName)>(r5);

        if r6 != null goto label01;

        return 0;

     label01:
        $i8 = virtualinvoke r6.<android.content.pm.parsing.component.ParsedActivity: int getFlags()>();

        $i9 = 1048576 & $i8;

        if $i9 == 0 goto label02;

        z5 = 1;

        goto label03;

     label02:
        z5 = 0;

     label03:
        $i10 = virtualinvoke r6.<android.content.pm.parsing.component.ParsedActivity: int getFlags()>();

        $i11 = 2097152 & $i10;

        if $i11 != 0 goto label04;

        z6 = 1;

        goto label05;

     label04:
        z6 = 0;

     label05:
        if z5 == 0 goto label06;

        if z6 == 0 goto label06;

        goto label07;

     label06:
        z4 = 0;

     label07:
        return z4;

     label08:
        if i12 != 2 goto label16;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r7 = virtualinvoke $r3.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedActivity getReceiver(android.content.ComponentName)>(r5);

        if r7 != null goto label09;

        return 0;

     label09:
        $i4 = virtualinvoke r7.<android.content.pm.parsing.component.ParsedActivity: int getFlags()>();

        $i5 = 1048576 & $i4;

        if $i5 == 0 goto label10;

        z7 = 1;

        goto label11;

     label10:
        z7 = 0;

     label11:
        $i6 = virtualinvoke r7.<android.content.pm.parsing.component.ParsedActivity: int getFlags()>();

        $i7 = 2097152 & $i6;

        if $i7 != 0 goto label12;

        z8 = 1;

        goto label13;

     label12:
        z8 = 0;

     label13:
        if z7 == 0 goto label14;

        if z8 != 0 goto label14;

        z9 = 1;

        goto label15;

     label14:
        z9 = 0;

     label15:
        return z9;

     label16:
        if i12 != 3 goto label19;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r8 = virtualinvoke $r2.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedService getService(android.content.ComponentName)>(r5);

        if r8 == null goto label17;

        $i2 = virtualinvoke r8.<android.content.pm.parsing.component.ParsedService: int getFlags()>();

        $i3 = 1048576 & $i2;

        if $i3 == 0 goto label17;

        z10 = 1;

        goto label18;

     label17:
        z10 = 0;

     label18:
        return z10;

     label19:
        if i12 != 4 goto label22;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r9 = virtualinvoke $r1.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedProvider getProvider(android.content.ComponentName)>(r5);

        if r9 == null goto label20;

        $i0 = virtualinvoke r9.<android.content.pm.parsing.component.ParsedProvider: int getFlags()>();

        $i1 = 1048576 & $i0;

        if $i1 == 0 goto label20;

        z11 = 1;

        goto label21;

     label20:
        z11 = 0;

     label21:
        return z11;

     label22:
        if i12 != 0 goto label23;

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isComponentVisibleToInstantApp(android.content.ComponentName)>(r5);

        return $z3;

     label23:
        return 0;
    }

    private static boolean isExternal(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        $i0 = r0.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isExternalMediaAvailable()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mMediaMounted>;

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean isHomeIntent(android.content.Intent)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String $r2, $r3;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        $r2 = "android.intent.action.MAIN";

        $r3 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.intent.category.HOME");

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r1.<android.content.Intent: boolean hasCategory(java.lang.String)>("android.intent.category.DEFAULT");

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    private boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent, int, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        int i0, i1;
        java.lang.String r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $z0 = virtualinvoke r1.<android.content.Intent: boolean isImplicitImageCaptureIntent()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isPersistentPreferredActivitySetByDpm(android.content.Intent,int,java.lang.String,int)>(r1, i0, r2, i1);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isInstantAppInternal(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r1, $r5;
        com.android.server.pm.PackageSetting r2;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        com.android.server.pm.InstantAppRegistry $r6;
        android.util.SparseIntArray $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i4 = i3;

     label01:
        $z1 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i3);

        if $z1 == 0 goto label02;

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mIsolatedOwners>;

        i4 = virtualinvoke $r7.<android.util.SparseIntArray: int get(int)>(i3);

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r2 = (com.android.server.pm.PackageSetting) $r5;

     label03:
        if r2 == null goto label06;

     label04:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r9, i4);

        if $z2 != 0 goto label05;

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i4, i0);

        if $z3 != 0 goto label05;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i4);

        $i2 = r2.<com.android.server.pm.PackageSetting: int appId>;

        $z4 = virtualinvoke $r6.<com.android.server.pm.InstantAppRegistry: boolean isInstantAccessGranted(int,int,int)>(i0, $i1, $i2);

        if $z4 == 0 goto label06;

     label05:
        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        if z5 == 0 goto label10;

     label08:
        z0 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

        exitmonitor r1;

     label09:
        return z0;

     label10:
        exitmonitor r1;

     label11:
        return 0;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private boolean isInstantAppResolutionAllowed(android.content.Intent, java.util.List, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i8, $i9, $i10, i11, i12;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.content.pm.ResolveInfo r1;
        java.lang.String r2, $r9, $r17, $r22, $r23;
        com.android.server.pm.PackageSetting r3;
        com.android.server.pm.InstantAppResolverConnection $r4;
        android.content.pm.ActivityInfo $r5, $r11;
        android.content.ComponentName $r6;
        android.net.Uri $r7, $r8;
        java.lang.Object $r10, $r14, r27;
        com.android.server.pm.Settings $r12;
        android.util.ArrayMap $r13;
        long $l5, $l6;
        java.lang.Throwable $r24;
        android.content.Intent r25;
        java.util.List r26;
        java.lang.StringBuilder r28, r29;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r25 := @parameter0: android.content.Intent;

        r26 := @parameter1: java.util.List;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection>;

        if $r4 != null goto label01;

        return 0;

     label01:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        if $r5 != null goto label02;

        return 0;

     label02:
        $r6 = virtualinvoke r25.<android.content.Intent: android.content.ComponentName getComponent()>();

        if $r6 == null goto label03;

        return 0;

     label03:
        $i2 = virtualinvoke r25.<android.content.Intent: int getFlags()>();

        $i3 = $i2 & 512;

        if $i3 == 0 goto label04;

        return 0;

     label04:
        if z0 != 0 goto label05;

        $r23 = virtualinvoke r25.<android.content.Intent: java.lang.String getPackage()>();

        if $r23 == null goto label05;

        return 0;

     label05:
        $z1 = virtualinvoke r25.<android.content.Intent: boolean isWebIntent()>();

        if $z1 != 0 goto label08;

        if r26 == null goto label06;

        $i10 = interfaceinvoke r26.<java.util.List: int size()>();

        if $i10 != 0 goto label07;

     label06:
        $i8 = virtualinvoke r25.<android.content.Intent: int getFlags()>();

        $i9 = $i8 & 2048;

        if $i9 != 0 goto label10;

     label07:
        return 0;

     label08:
        $r7 = virtualinvoke r25.<android.content.Intent: android.net.Uri getData()>();

        if $r7 == null goto label30;

        $r8 = virtualinvoke r25.<android.content.Intent: android.net.Uri getData()>();

        $r9 = virtualinvoke $r8.<android.net.Uri: java.lang.String getHost()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r9);

        if $z2 == 0 goto label09;

        goto label30;

     label09:
        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean areWebInstantAppsDisabled(int)>(i0);

        if $z3 == 0 goto label10;

        return 0;

     label10:
        r27 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r27;

        if r26 != null goto label11;

        i11 = 0;

        goto label12;

     label11:
        i11 = interfaceinvoke r26.<java.util.List: int size()>();

     label12:
        i12 = 0;

     label13:
        if i12 >= i11 goto label25;

     label14:
        $r10 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(i12);

        r1 = (android.content.pm.ResolveInfo) $r10;

        $r11 = r1.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r2 = $r11.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.pm.PackageSetting) $r14;

     label15:
        if r3 == null goto label24;

     label16:
        $z4 = r1.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

        if $z4 != 0 goto label21;

        $l5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>(r3, i0);

        $l6 = $l5 >> 32;

        i1 = (int) $l6;

     label17:
        if i1 == 2 goto label18;

        if i1 != 4 goto label21;

     label18:
        $z7 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z7 == 0 goto label19;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DENY instant app; pkg: ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", status: ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r22 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r22);

     label19:
        exitmonitor r27;

     label20:
        return 0;

     label21:
        $z5 = virtualinvoke r3.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

        if $z5 == 0 goto label24;

        $z6 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z6 == 0 goto label22;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DENY instant app installed; pkg: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r17 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r17);

     label22:
        exitmonitor r27;

     label23:
        return 0;

     label24:
        i12 = i12 + 1;

        goto label13;

     label25:
        exitmonitor r27;

     label26:
        return 1;

     label27:
        $r24 := @caughtexception;

     label28:
        exitmonitor r27;

     label29:
        throw $r24;

     label30:
        return 0;

        catch java.lang.Throwable from label11 to label12 with label27;
        catch java.lang.Throwable from label14 to label15 with label27;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label22 to label23 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
    }

    private boolean isIntegrityVerificationEnabled()
    {
        com.android.server.pm.PackageManagerService r0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        return 1;
    }

    private boolean isPackageDeviceAdmin(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.app.admin.IDevicePolicyManager r1;
        boolean z0, $z1;
        android.os.IBinder $r2;
        int $i0, i1, i2, $i3;
        com.android.server.pm.UserManagerService $r3;
        android.os.RemoteException $r4;
        java.lang.String r5, r7;
        android.content.ComponentName r6;
        int[] r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("device_policy");

        r1 = staticinvoke <android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)>($r2);

        if r1 == null goto label16;

     label01:
        r6 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: android.content.ComponentName getDeviceOwnerComponent(boolean)>(0);

     label02:
        if r6 != null goto label03;

        r7 = null;

        goto label04;

     label03:
        r7 = virtualinvoke r6.<android.content.ComponentName: java.lang.String getPackageName()>();

     label04:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label06;

     label05:
        return 1;

     label06:
        if i1 != -1 goto label09;

     label07:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r8 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label08:
        goto label11;

     label09:
        r8 = newarray (int)[1];

     label10:
        r8[0] = i1;

     label11:
        i2 = 0;

     label12:
        $i3 = lengthof r8;

        if i2 >= $i3 goto label16;

        $i0 = r8[i2];

        z0 = interfaceinvoke r1.<android.app.admin.IDevicePolicyManager: boolean packageHasActiveAdmins(java.lang.String,int)>(r5, $i0);

     label13:
        if z0 == 0 goto label14;

        return 1;

     label14:
        i2 = i2 + 1;

        goto label12;

     label15:
        $r4 := @caughtexception;

        goto label16;

     label16:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.os.RemoteException from label04 to label05 with label15;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch android.os.RemoteException from label12 to label13 with label15;
    }

    private static boolean isPackageRenamed(com.android.server.pm.parsing.pkg.AndroidPackage, java.lang.String)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.lang.String r1;
        java.util.List $r2;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getOriginalPackages()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private boolean isPersistentPreferredActivitySetByDpm(android.content.Intent, int, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1;
        com.android.server.pm.PersistentPreferredIntentResolver r2;
        com.android.server.pm.Settings $r3;
        android.util.SparseArray $r4;
        java.lang.Object $r5, $r7, r10;
        com.android.server.pm.PersistentPreferredActivity $r8;
        boolean $z0, z1, $z2;
        android.content.Intent r9;
        java.util.Iterator r11;
        java.util.ArrayList r12;
        java.util.List r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.pm.PersistentPreferredIntentResolver) $r5;

        if r2 == null goto label3;

        $i2 = 65536 & i1;

        if $i2 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r10 = virtualinvoke r2.<com.android.server.pm.PersistentPreferredIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(r9, r1, z1, i0);

        goto label4;

     label3:
        r12 = new java.util.ArrayList;

        specialinvoke r12.<java.util.ArrayList: void <init>()>();

        r10 = r12;

     label4:
        r13 = (java.util.List) r10;

        r11 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.server.pm.PersistentPreferredActivity) $r7;

        $z0 = $r8.<com.android.server.pm.PersistentPreferredActivity: boolean mIsSetByDpm>;

        if $z0 == 0 goto label6;

        return 1;

     label6:
        goto label5;

     label7:
        return 0;
    }

    private boolean isRecentsAccessingChildProfiles(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i2, i3, i4;
        long l1;
        boolean z0, $z1;
        com.android.server.pm.PackageManagerService$Injector $r2;
        com.android.server.wm.ActivityTaskManagerInternal $r3;
        com.android.server.pm.UserManagerService $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService$Injector: com.android.server.wm.ActivityTaskManagerInternal getActivityTaskManagerInternal()>();

        $z1 = virtualinvoke $r3.<com.android.server.wm.ActivityTaskManagerInternal: boolean isCallerRecents(int)>(i3);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i3);

        i2 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

     label3:
        if i2 == i4 goto label4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label4:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        z0 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean isSameProfileGroup(int,int)>(i4, i0);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    private static boolean isRecoverSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)
    {
        com.android.server.pm.Settings$VersionInfo r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.Settings$VersionInfo;

        $i0 = r0.<com.android.server.pm.Settings$VersionInfo: int databaseVersion>;

        if $i0 >= 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isRecoverSignatureUpdateNeeded(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.Settings$VersionInfo $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings$VersionInfo getSettingsVersionForPackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isRecoverSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)>($r2);

        return $z0;
    }

    private boolean isSuspendAllowedForUser(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        boolean $z0, $z1, $z2, z3;
        com.android.server.pm.UserManagerService $r1, $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerDeviceOrProfileOwner(int)>(i0);

        if $z0 != 0 goto label2;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("no_control_apps", i0);

        if $z1 != 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z2 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean hasUserRestriction(java.lang.String,int)>("no_uninstall_apps", i0);

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private static boolean isSystemApp(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        int i0, $i1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        i0 = r0.<com.android.server.pm.PackageSetting: int pkgFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        int $i0, $i1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        $i0 = r0.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 128;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isUserEnabled(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        long l1;
        com.android.server.pm.UserManagerService $r1;
        java.lang.Throwable $r2;
        android.content.pm.UserInfo r3;
        boolean z0, z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r3 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label2:
        if r3 == null goto label5;

     label3:
        z0 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isEnabled()>();

     label4:
        if z0 == 0 goto label5;

        z1 = 1;

        goto label6;

     label5:
        z1 = 0;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z1;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    private boolean isVerificationEnabled(android.content.pm.PackageInfoLite, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object r1, $r12;
        java.lang.String $r2, $r3, $r6, $r10;
        boolean $z0, $z1, $z2, $z3, z4;
        com.android.server.pm.PackageManagerService$Injector $r4;
        android.app.AppOpsManager $r5;
        android.content.Context $r7;
        android.content.ContentResolver $r8;
        com.android.server.pm.Settings $r9;
        android.util.ArrayMap $r11;
        java.lang.Throwable $r13, $r14;
        android.content.pm.PackageInfoLite r15;
        android.content.pm.ActivityInfo r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: android.content.pm.PackageInfoLite;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z4 = 0;

        $i3 = i1 & 32;

        if $i3 == 0 goto label11;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(i0, "ensure_verify_apps");

        if $z1 == 0 goto label01;

        return 1;

     label01:
        $i6 = i1 & 524288;

        if $i6 == 0 goto label09;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = r15.<android.content.pm.PackageInfoLite: java.lang.String packageName>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        if $r12 != null goto label04;

        exitmonitor r1;

     label03:
        return 1;

     label04:
        exitmonitor r1;

     label05:
        $z2 = r15.<android.content.pm.PackageInfoLite: boolean debuggable>;

        $z3 = $z2 ^ 1;

        return $z3;

     label06:
        $r13 := @caughtexception;

     label07:
        exitmonitor r1;

     label08:
        throw $r13;

     label09:
        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i7 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r8, "verifier_verify_adb_installs", 1);

        if $i7 == 0 goto label10;

        z4 = 1;

     label10:
        return z4;

     label11:
        $i4 = i1 & 524288;

        if $i4 == 0 goto label12;

        return 0;

     label12:
        $i5 = i1 & 2048;

        if $i5 == 0 goto label16;

        r17 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        if r17 == null goto label16;

        $r3 = r17.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label16;

     label13:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$Injector: android.app.AppOpsManager getAppOpsManager()>();

        $r6 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke $r5.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i2, $r6);

     label14:
        return 0;

     label15:
        $r14 := @caughtexception;

     label16:
        return 1;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch java.lang.SecurityException from label13 to label14 with label15;
    }

    private void killApplication(java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        java.lang.String r1, r5;
        long l2;
        android.app.IActivityManager r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label2:
        if r2 == null goto label6;

     label3:
        interfaceinvoke r2.<android.app.IActivityManager: void killApplication(java.lang.String,int,int,java.lang.String)>(r5, i0, i1, r1);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label3 to label4 with label7;
    }

    private void killApplication(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,int,java.lang.String)>(r1, i0, -1, r2);

        return;
    }

    static void lambda$deletePackageVersionedInternal$23(java.lang.String, android.content.pm.IPackageDeleteObserver2)
    {
        android.content.pm.IPackageDeleteObserver2 r0;
        android.content.Intent r1;
        android.net.Uri $r2;
        android.os.IBinder $r4;
        android.os.RemoteException $r6;
        java.lang.String r7;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: android.content.pm.IPackageDeleteObserver2;

     label1:
        r1 = new android.content.Intent;

        specialinvoke r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.UNINSTALL_PACKAGE");

        $r2 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", r7, null);

        virtualinvoke r1.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r2);

        $r4 = interfaceinvoke r0.<android.content.pm.IPackageDeleteObserver2: android.os.IBinder asBinder()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>("android.content.pm.extra.CALLBACK", $r4);

        interfaceinvoke r0.<android.content.pm.IPackageDeleteObserver2: void onUserActionRequired(android.content.Intent)>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$deletePackageVersionedInternal$24(android.content.pm.IPackageDeleteObserver2, java.lang.String)
    {
        java.lang.String r0;
        android.os.RemoteException $r1;
        android.content.pm.IPackageDeleteObserver2 r2;

        r2 := @parameter0: android.content.pm.IPackageDeleteObserver2;

        r0 := @parameter1: java.lang.String;

     label1:
        interfaceinvoke r2.<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>(r0, -3, null);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void lambda$deletePackageVersionedInternal$25(android.content.pm.IPackageDeleteObserver2, java.lang.String)
    {
        java.lang.String r0;
        android.os.RemoteException $r1;
        android.content.pm.IPackageDeleteObserver2 r2;

        r2 := @parameter0: android.content.pm.IPackageDeleteObserver2;

        r0 := @parameter1: java.lang.String;

     label1:
        interfaceinvoke r2.<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>(r0, -4, null);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static java.lang.String[] lambda$dropNonSystemPackages$34(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    static java.lang.String[] lambda$ensureSystemPackageNames$36(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    static void lambda$executeSharedLibrariesUpdateLPr$14(android.content.pm.SharedLibraryInfo, android.content.pm.SharedLibraryInfo)
    {
        android.content.pm.SharedLibraryInfo r0, r1;

        r0 := @parameter0: android.content.pm.SharedLibraryInfo;

        r1 := @parameter1: android.content.pm.SharedLibraryInfo;

        virtualinvoke r0.<android.content.pm.SharedLibraryInfo: void clearDependencies()>();

        return;
    }

    static com.android.server.pm.ComponentResolver lambda$main$0(java.lang.Object, com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService)
    {
        java.lang.Object r0;
        com.android.server.pm.PackageManagerService$Injector r1;
        com.android.server.pm.PackageManagerService r2;
        com.android.server.pm.ComponentResolver $r3;
        com.android.server.pm.UserManagerService $r4;
        android.content.pm.PackageManagerInternal $r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: com.android.server.pm.PackageManagerService$Injector;

        r2 := @parameter2: com.android.server.pm.PackageManagerService;

        $r3 = new com.android.server.pm.ComponentResolver;

        $r4 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.UserManagerService getUserManagerService()>();

        $r5 = r2.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        specialinvoke $r3.<com.android.server.pm.ComponentResolver: void <init>(com.android.server.pm.UserManagerService,android.content.pm.PackageManagerInternal,java.lang.Object)>($r4, $r5, r0);

        return $r3;
    }

    static com.android.server.pm.permission.PermissionManagerServiceInternal lambda$main$1(android.content.Context, java.lang.Object, com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService)
    {
        android.content.Context r0;
        java.lang.Object r1;
        com.android.server.pm.PackageManagerService$Injector r2;
        com.android.server.pm.PackageManagerService r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: com.android.server.pm.PackageManagerService$Injector;

        r3 := @parameter3: com.android.server.pm.PackageManagerService;

        $r4 = staticinvoke <com.android.server.pm.permission.PermissionManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal create(android.content.Context,java.lang.Object)>(r0, r1);

        return $r4;
    }

    static com.android.server.pm.UserManagerService lambda$main$2(android.content.Context, com.android.server.pm.Installer, java.lang.Object, boolean, java.lang.Object, com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService)
    {
        android.content.Context r0;
        com.android.server.pm.Installer r1;
        java.lang.Object r2, r3;
        boolean z0;
        com.android.server.pm.PackageManagerService$Injector r4;
        com.android.server.pm.PackageManagerService r5;
        com.android.server.pm.UserManagerService $r6;
        com.android.server.pm.UserDataPreparer $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.pm.Installer;

        r2 := @parameter2: java.lang.Object;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.Object;

        r4 := @parameter5: com.android.server.pm.PackageManagerService$Injector;

        r5 := @parameter6: com.android.server.pm.PackageManagerService;

        $r6 = new com.android.server.pm.UserManagerService;

        $r7 = new com.android.server.pm.UserDataPreparer;

        specialinvoke $r7.<com.android.server.pm.UserDataPreparer: void <init>(com.android.server.pm.Installer,java.lang.Object,android.content.Context,boolean)>(r1, r2, r0, z0);

        specialinvoke $r6.<com.android.server.pm.UserManagerService: void <init>(android.content.Context,com.android.server.pm.PackageManagerService,com.android.server.pm.UserDataPreparer,java.lang.Object)>(r0, r5, $r7, r3);

        return $r6;
    }

    static com.android.server.pm.Settings lambda$main$3(java.lang.Object, com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService)
    {
        java.lang.Object r0;
        com.android.server.pm.PackageManagerService$Injector r1;
        com.android.server.pm.PackageManagerService r2;
        com.android.server.pm.Settings $r3;
        java.io.File $r4;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        com.android.server.pm.permission.PermissionSettings $r6;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: com.android.server.pm.PackageManagerService$Injector;

        r2 := @parameter2: com.android.server.pm.PackageManagerService;

        $r3 = new com.android.server.pm.Settings;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r5 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.permission.PermissionManagerServiceInternal getPermissionManagerServiceInternal()>();

        $r6 = virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: com.android.server.pm.permission.PermissionSettings getPermissionSettings()>();

        specialinvoke $r3.<com.android.server.pm.Settings: void <init>(java.io.File,com.android.server.pm.permission.PermissionSettings,java.lang.Object)>($r4, $r6, r0);

        return $r3;
    }

    static com.android.server.pm.AppsFilter lambda$main$4(com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService$Injector r0;
        com.android.server.pm.PackageManagerService r1;
        android.content.pm.PackageManagerInternal $r2;
        com.android.server.pm.AppsFilter $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$Injector;

        r1 := @parameter1: com.android.server.pm.PackageManagerService;

        $r2 = r1.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $r3 = staticinvoke <com.android.server.pm.AppsFilter: com.android.server.pm.AppsFilter create(android.content.pm.PackageManagerInternal,com.android.server.pm.PackageManagerService$Injector)>($r2, r0);

        return $r3;
    }

    static com.android.server.compat.PlatformCompat lambda$main$5(com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService$Injector r0;
        com.android.server.pm.PackageManagerService r1;
        android.os.IBinder $r2;
        com.android.server.compat.PlatformCompat $r3;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$Injector;

        r1 := @parameter1: com.android.server.pm.PackageManagerService;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("platform_compat");

        $r3 = (com.android.server.compat.PlatformCompat) $r2;

        return $r3;
    }

    static void lambda$main$6(com.android.server.pm.PackageManagerService, java.lang.String)
    {
        java.lang.String r0, r4, $r14, $r19, $r22, r30;
        java.lang.Object r1, r26;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        com.android.server.pm.Settings $r5;
        com.android.server.pm.PackageManagerService$Injector $r6;
        com.android.server.compat.PlatformCompat $r7;
        boolean $z0;
        com.android.server.pm.pkg.PackageStateUnserialized $r15;
        java.lang.Throwable $r23, $r24;
        com.android.server.pm.PackageManagerService r25;
        java.lang.StringBuilder r27, r29, r31;
        com.android.server.pm.SharedUserSetting r28;

        r25 := @parameter0: com.android.server.pm.PackageManagerService;

        r0 := @parameter1: java.lang.String;

        r1 = r25.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r1;

     label01:
        r26 = r25.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r26;

     label02:
        $r5 = r25.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r2 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r0);

     label03:
        if r2 != null goto label07;

     label04:
        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find package setting ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r22 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r22);

        exitmonitor r26;

     label05:
        exitmonitor r1;

     label06:
        return;

     label07:
        r3 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r28 = virtualinvoke r2.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        r4 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r3, r2);

        exitmonitor r26;

     label08:
        if r3 != null goto label11;

     label09:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find package ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r19 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r19);

        exitmonitor r1;

     label10:
        return;

     label11:
        $r6 = r25.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r7 = virtualinvoke $r6.<com.android.server.pm.PackageManagerService$Injector: com.android.server.compat.PlatformCompat getCompatibility()>();

        r30 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.SharedUserSetting,com.android.server.compat.PlatformCompat)>(r3, r28, $r7);

        $z0 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 != 0 goto label12;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating seInfo for package ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        $r14 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r14);

        $r15 = virtualinvoke r2.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        virtualinvoke $r15.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setOverrideSeInfo(java.lang.String)>(r30);

        specialinvoke r25.<com.android.server.pm.PackageManagerService: void prepareAppDataAfterInstallLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r3);

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r23 := @caughtexception;

     label15:
        exitmonitor r26;

     label16:
        throw $r23;

     label17:
        $r24 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r24;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    static void lambda$new$7(java.util.function.BiConsumer, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        java.util.function.BiConsumer r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean $z0;
        java.lang.Boolean $r2;

        r0 := @parameter0: java.util.function.BiConsumer;

        r1 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        $z0 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke r0.<java.util.function.BiConsumer: void accept(java.lang.Object,java.lang.Object)>(r1, $r2);

        return;
    }

    static void lambda$postPreferredActivityChangedBroadcast$29(int)
    {
        int i0;
        android.app.IActivityManager r0;
        android.content.Intent $r1;
        android.os.RemoteException $r4;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.ACTION_PREFERRED_ACTIVITY_CHANGED");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.user_handle", i0);

        virtualinvoke $r1.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

     label2:
        interfaceinvoke r0.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, null, $r1, null, null, 0, null, null, null, -1, null, 0, 0, i0);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    static void lambda$registerDexModule$13(android.content.pm.IDexModuleRegisterCallback, java.lang.String, com.android.server.pm.dex.DexManager$RegisterDexModuleResult)
    {
        java.lang.String r0, $r1, $r6;
        boolean $z0;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        android.content.pm.IDexModuleRegisterCallback r7;
        com.android.server.pm.dex.DexManager$RegisterDexModuleResult r8;

        r7 := @parameter0: android.content.pm.IDexModuleRegisterCallback;

        r0 := @parameter1: java.lang.String;

        r8 := @parameter2: com.android.server.pm.dex.DexManager$RegisterDexModuleResult;

     label1:
        $z0 = r8.<com.android.server.pm.dex.DexManager$RegisterDexModuleResult: boolean success>;

        $r1 = r8.<com.android.server.pm.dex.DexManager$RegisterDexModuleResult: java.lang.String message>;

        interfaceinvoke r7.<android.content.pm.IDexModuleRegisterCallback: void onDexModuleRegistered(java.lang.String,boolean,java.lang.String)>(r0, $z0, $r1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to callback after module registration ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r6, $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static int lambda$static$17(android.content.pm.ProviderInfo, android.content.pm.ProviderInfo)
    {
        android.content.pm.ProviderInfo r0, r1;
        int i0, i1;
        byte b2;

        r0 := @parameter0: android.content.pm.ProviderInfo;

        r1 := @parameter1: android.content.pm.ProviderInfo;

        i1 = r0.<android.content.pm.ProviderInfo: int initOrder>;

        i0 = r1.<android.content.pm.ProviderInfo: int initOrder>;

        if i1 <= i0 goto label1;

        b2 = -1;

        goto label3;

     label1:
        if i1 >= i0 goto label2;

        b2 = 1;

        goto label3;

     label2:
        b2 = 0;

     label3:
        return b2;
    }

    private void loadPrivatePackages(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.storage.VolumeInfo r1;
        com.android.server.pm._$$Lambda$PackageManagerService$vyKDCUt14soSFqmBBfd52n5w5qM $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r2 = new com.android.server.pm._$$Lambda$PackageManagerService$vyKDCUt14soSFqmBBfd52n5w5qM;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$PackageManagerService$vyKDCUt14soSFqmBBfd52n5w5qM: void <init>(com.android.server.pm.PackageManagerService,android.os.storage.VolumeInfo)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void loadPrivatePackagesInner(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r18, $r27, $r30, $r40, $r42, $r47, $r63, $r64;
        com.android.server.pm.Settings$VersionInfo r4;
        com.android.server.pm.PackageSetting r5;
        java.lang.StringBuilder r6, $r44, r74;
        boolean $z0, $z1, $z3, $z4, $z7, $z8, z9, $z10;
        java.util.ArrayList $r7, $r8;
        com.android.server.pm.Settings $r9, $r10, $r16;
        com.android.server.pm.PackageManagerService$Injector $r11, $r12;
        com.android.server.pm.UserManagerService $r13;
        java.util.List $r14, r55;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i13;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r15;
        android.util.ArraySet $r17;
        java.lang.Object $r19, $r28, $r29, r54, r57, r59, r69, r73;
        com.android.server.pm.PackageManagerService$PackageFreezer $r20, $r31;
        com.android.server.pm.parsing.pkg.AndroidPackage $r32, $r33;
        java.lang.Throwable $r34, $r43, $r48, $r49, $r50, $r52, r60;
        com.android.server.pm.PackageManagerException $r35, $r51, r61;
        java.io.File $r37, r58;
        android.os.storage.VolumeInfo r53;
        java.util.Iterator r56, r67, r75;
        android.os.storage.StorageManager r65;
        android.os.UserManagerInternal r66;
        android.content.pm.UserInfo r68;
        byte b14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r53 := @parameter0: android.os.storage.VolumeInfo;

        r1 = r53.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Loading internal storage is probably a mistake; ignoring");

        return;

     label01:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        i13 = r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        r54 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r54;

     label02:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r4 = virtualinvoke $r9.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo findOrCreateVersion(java.lang.String)>(r1);

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r55 = virtualinvoke $r10.<com.android.server.pm.Settings: java.util.List getVolumePackagesLPr(java.lang.String)>(r1);

        exitmonitor r54;

     label03:
        r56 = interfaceinvoke r55.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label37;

        $r29 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.pm.PackageSetting) $r29;

        $r30 = r5.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r31 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,java.lang.String)>($r30, "loadPrivatePackagesInner");

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r31);

        r57 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r57;

     label05:
        r58 = r5.<com.android.server.pm.PackageSetting: java.io.File codePath>;

     label06:
        r59 = r57;

     label07:
        $i9 = i13 | 8;

        $r32 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage scanPackageTracedLI(java.io.File,int,int,long,android.os.UserHandle)>(r58, $i9, 512, 0L, null);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r32);

     label08:
        goto label27;

     label09:
        $r50 := @caughtexception;

        r60 = $r50;

        r57 = r59;

        goto label34;

     label10:
        $r35 := @caughtexception;

        r61 = $r35;

        goto label13;

     label11:
        $r48 := @caughtexception;

        r60 = $r48;

        goto label34;

     label12:
        $r51 := @caughtexception;

        r61 = $r51;

     label13:
        r59 = r57;

     label14:
        r6 = new java.lang.StringBuilder;

     label15:
        r59 = r57;

     label16:
        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

     label17:
        r59 = r57;

     label18:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to scan ");

     label19:
        r59 = r57;

     label20:
        $r37 = r5.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

     label21:
        r59 = r57;

     label22:
        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

     label23:
        r59 = r57;

     label24:
        $r40 = virtualinvoke r61.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

     label25:
        r59 = r57;

     label26:
        $r42 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r42);

     label27:
        r59 = r57;

     label28:
        $r63 = <android.os.Build: java.lang.String FINGERPRINT>;

        $r64 = r4.<com.android.server.pm.Settings$VersionInfo: java.lang.String fingerprint>;

        $z7 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>($r64);

        if $z7 != 0 goto label31;

     label29:
        r59 = r57;

     label30:
        $r33 = r5.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>($r33, -1, 131111);

     label31:
        r59 = r57;

     label32:
        exitmonitor r57;

     label33:
        goto label04;

     label34:
        r59 = r57;

     label35:
        exitmonitor r57;

     label36:
        throw r60;

     label37:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r65 = virtualinvoke $r11.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r66 = virtualinvoke $r12.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r14 = virtualinvoke $r13.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(0);

        r67 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label38:
        $z8 = interfaceinvoke r67.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label48;

        $r28 = interfaceinvoke r67.<java.util.Iterator: java.lang.Object next()>();

        r68 = (android.content.pm.UserInfo) $r28;

        $i4 = r68.<android.content.pm.UserInfo: int id>;

        $z3 = virtualinvoke r66.<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>($i4);

        if $z3 == 0 goto label39;

        b14 = 3;

        goto label40;

     label39:
        $i5 = r68.<android.content.pm.UserInfo: int id>;

        $z4 = virtualinvoke r66.<android.os.UserManagerInternal: boolean isUserRunning(int)>($i5);

        if $z4 == 0 goto label38;

        b14 = 1;

     label40:
        $i7 = r68.<android.content.pm.UserInfo: int id>;

        $i6 = r68.<android.content.pm.UserInfo: int serialNumber>;

        virtualinvoke r65.<android.os.storage.StorageManager: void prepareUserStorage(java.lang.String,int,int,int)>(r1, $i7, $i6, b14);

        r69 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r69;

     label41:
        $i8 = r68.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void reconcileAppsDataLI(java.lang.String,int,int,boolean)>(r1, $i8, b14, 1);

        exitmonitor r69;

     label42:
        goto label47;

     label43:
        $r49 := @caughtexception;

     label44:
        exitmonitor r69;

     label45:
        throw $r49;

     label46:
        $r43 := @caughtexception;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare storage: ");

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r43);

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r47);

     label47:
        goto label38;

     label48:
        r73 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r73;

     label49:
        $i1 = r4.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        $i0 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        if $i1 == $i0 goto label51;

     label50:
        z9 = 1;

        goto label52;

     label51:
        z9 = 0;

     label52:
        if z9 == 0 goto label54;

     label53:
        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Platform changed from ");

        $i2 = r4.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $i3 = r0.<com.android.server.pm.PackageManagerService: int mSdkVersion>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; regranting permissions for ");

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r27 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(4, $r27);

     label54:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r15.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updateAllPermissions(java.lang.String,boolean)>(r1, z9);

        virtualinvoke r4.<com.android.server.pm.Settings$VersionInfo: void forceCurrent()>();

        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r16.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r73;

     label55:
        r75 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label56:
        $z10 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label57;

        $r19 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (com.android.server.pm.PackageManagerService$PackageFreezer) $r19;

        virtualinvoke $r20.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

        goto label56;

     label57:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,android.content.IIntentReceiver)>(1, 0, $r8, null);

        $r17 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes>;

        $r18 = virtualinvoke r53.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        virtualinvoke $r17.<android.util.ArraySet: boolean add(java.lang.Object)>($r18);

        return;

     label58:
        $r34 := @caughtexception;

     label59:
        exitmonitor r73;

     label60:
        throw $r34;

     label61:
        $r52 := @caughtexception;

     label62:
        exitmonitor r54;

     label63:
        throw $r52;

        catch java.lang.Throwable from label02 to label03 with label61;
        catch com.android.server.pm.PackageManagerException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch com.android.server.pm.PackageManagerException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label14 to label15 with label09;
        catch java.lang.Throwable from label16 to label17 with label09;
        catch java.lang.Throwable from label18 to label19 with label09;
        catch java.lang.Throwable from label20 to label21 with label09;
        catch java.lang.Throwable from label22 to label23 with label09;
        catch java.lang.Throwable from label24 to label25 with label09;
        catch java.lang.Throwable from label26 to label27 with label09;
        catch java.lang.Throwable from label28 to label29 with label09;
        catch java.lang.Throwable from label30 to label31 with label09;
        catch java.lang.Throwable from label32 to label33 with label09;
        catch java.lang.Throwable from label35 to label36 with label09;
        catch java.lang.IllegalStateException from label40 to label41 with label46;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label44 to label45 with label43;
        catch java.lang.IllegalStateException from label45 to label46 with label46;
        catch java.lang.Throwable from label49 to label50 with label58;
        catch java.lang.Throwable from label53 to label54 with label58;
        catch java.lang.Throwable from label54 to label55 with label58;
        catch java.lang.Throwable from label59 to label60 with label58;
        catch java.lang.Throwable from label62 to label63 with label61;
    }

    private void logAppMovedStorage(java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int i0;
        android.util.ArrayMap $r3;
        com.android.server.pm.PackageManagerService$Injector $r5;
        android.os.storage.StorageManager $r6;
        java.util.UUID $r7;
        java.lang.String $r8, r11;
        android.os.storage.VolumeInfo $r9;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

        exitmonitor r1;

     label2:
        if r2 != null goto label3;

        return;

     label3:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r7 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.UUID getStorageUuid()>();

        $r8 = virtualinvoke $r7.<java.util.UUID: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>($r8);

        $z1 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        i0 = staticinvoke <com.android.server.pm.PackageManagerService: int getPackageExternalStorageType(android.os.storage.VolumeInfo,boolean)>($r9, $z1);

        if z0 != 0 goto label4;

        $z3 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z3 == 0 goto label4;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,java.lang.String)>(183, i0, 1, r11);

        goto label5;

     label4:
        if z0 == 0 goto label5;

        $z2 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        if $z2 != 0 goto label5;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,int,java.lang.String)>(183, i0, 2, r11);

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static com.android.server.pm.PackageManagerService main(android.content.Context, com.android.server.pm.Installer, boolean, boolean)
    {
        boolean z0, z1;
        com.android.server.pm.'-$$Lambda$PackageManagerService$Wnf5zZuMJLUQ4GfjHtUww4l7YUg' $r22;
        com.android.server.pm.'-$$Lambda$PackageManagerService$FFJwRezEfCP4utcPN2U9pjn2hIo' $r23;
        com.android.server.compat.PlatformCompat $r25;
        android.content.Context r29;
        com.android.server.pm.Installer r30;
        com.android.server.utils.TimingsTraceAndSlog r33;
        java.lang.Object r34, r35;
        com.android.server.pm.PackageAbiHelperImpl r36;
        com.android.server.pm._$$Lambda$PackageManagerService$imyTLGZ0HLyacORSu0iPTteivzY r37;
        com.android.server.pm._$$Lambda$PackageManagerService$i6CpetYRHYknkq8R3n1zFsH2Qng r38;
        com.android.server.pm._$$Lambda$PackageManagerService$xKD6SB7pISjc29qfmXIq5O_3OJw r39;
        com.android.server.pm._$$Lambda$PackageManagerService$cHQqBPj5vgOw_P7yhrKC9Ssq27g r40;
        com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer r41, r42, r43, r44, r45, r46, r47;
        com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer r48, r49, r50;
        com.android.server.pm.PackageManagerService$Injector r51;
        com.android.server.pm.PackageManagerService r52;
        com.android.server.pm._$$Lambda$PackageManagerService$JqISwjRG4Nrwn7K19yITMU1WH5g r53;
        com.android.server.pm.PackageManagerService$PackageManagerNative r54;
        com.android.server.pm.PackageManagerService$Injector$Producer r55, r56;

        r29 := @parameter0: android.content.Context;

        r30 := @parameter1: com.android.server.pm.Installer;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: void checkProperties()>();

        r33 = new com.android.server.utils.TimingsTraceAndSlog;

        specialinvoke r33.<com.android.server.utils.TimingsTraceAndSlog: void <init>(java.lang.String,long)>("PackageManagerTiming", 262144L);

        virtualinvoke r33.<com.android.server.utils.TimingsTraceAndSlog: void traceBegin(java.lang.String)>("create package manager");

        r34 = new java.lang.Object;

        specialinvoke r34.<java.lang.Object: void <init>()>();

        r35 = new java.lang.Object;

        specialinvoke r35.<java.lang.Object: void <init>()>();

        r51 = new com.android.server.pm.PackageManagerService$Injector;

        r36 = new com.android.server.pm.PackageAbiHelperImpl;

        specialinvoke r36.<com.android.server.pm.PackageAbiHelperImpl: void <init>()>();

        r37 = new com.android.server.pm._$$Lambda$PackageManagerService$imyTLGZ0HLyacORSu0iPTteivzY;

        specialinvoke r37.<com.android.server.pm._$$Lambda$PackageManagerService$imyTLGZ0HLyacORSu0iPTteivzY: void <init>(java.lang.Object)>(r34);

        r38 = new com.android.server.pm._$$Lambda$PackageManagerService$i6CpetYRHYknkq8R3n1zFsH2Qng;

        specialinvoke r38.<com.android.server.pm._$$Lambda$PackageManagerService$i6CpetYRHYknkq8R3n1zFsH2Qng: void <init>(android.content.Context,java.lang.Object)>(r29, r34);

        r39 = new com.android.server.pm._$$Lambda$PackageManagerService$xKD6SB7pISjc29qfmXIq5O_3OJw;

        specialinvoke r39.<com.android.server.pm._$$Lambda$PackageManagerService$xKD6SB7pISjc29qfmXIq5O_3OJw: void <init>(android.content.Context,com.android.server.pm.Installer,java.lang.Object,boolean,java.lang.Object)>(r29, r30, r35, z1, r34);

        r40 = new com.android.server.pm._$$Lambda$PackageManagerService$cHQqBPj5vgOw_P7yhrKC9Ssq27g;

        specialinvoke r40.<com.android.server.pm._$$Lambda$PackageManagerService$cHQqBPj5vgOw_P7yhrKC9Ssq27g: void <init>(java.lang.Object)>(r34);

        r41 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r41.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        r42 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r42.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        r43 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r43.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Lcom/android/server/DeviceIdleInternal;");

        r44 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r44.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Landroid/os/storage/StorageManagerInternal;");

        r45 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r45.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        r46 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r46.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Lcom/android/server/policy/PermissionPolicyInternal;");

        r47 = new com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer;

        specialinvoke r47.<com.android.server.pm.PackageManagerService$Injector$LocalServicesProducer: void <init>(java.lang.Class)>(class "Lcom/android/server/storage/DeviceStorageMonitorInternal;");

        r48 = new com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer;

        specialinvoke r48.<com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer: void <init>(java.lang.Class)>(class "Landroid/hardware/display/DisplayManager;");

        r49 = new com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer;

        specialinvoke r49.<com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer: void <init>(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r50 = new com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer;

        specialinvoke r50.<com.android.server.pm.PackageManagerService$Injector$SystemServiceProducer: void <init>(java.lang.Class)>(class "Landroid/app/AppOpsManager;");

        $r23 = <com.android.server.pm._$$Lambda$PackageManagerService$FFJwRezEfCP4utcPN2U9pjn2hIo: com.android.server.pm.'-$$Lambda$PackageManagerService$FFJwRezEfCP4utcPN2U9pjn2hIo' INSTANCE>;

        $r22 = <com.android.server.pm._$$Lambda$PackageManagerService$Wnf5zZuMJLUQ4GfjHtUww4l7YUg: com.android.server.pm.'-$$Lambda$PackageManagerService$Wnf5zZuMJLUQ4GfjHtUww4l7YUg' INSTANCE>;

        r55 = (com.android.server.pm.PackageManagerService$Injector$Producer) $r23;

        r56 = (com.android.server.pm.PackageManagerService$Injector$Producer) $r22;

        specialinvoke r51.<com.android.server.pm.PackageManagerService$Injector: void <init>(android.content.Context,java.lang.Object,com.android.server.pm.Installer,java.lang.Object,com.android.server.pm.PackageAbiHelper,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer,com.android.server.pm.PackageManagerService$Injector$Producer)>(r29, r34, r30, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r55, r56);

        r52 = new com.android.server.pm.PackageManagerService;

        specialinvoke r52.<com.android.server.pm.PackageManagerService: void <init>(com.android.server.pm.PackageManagerService$Injector,boolean,boolean)>(r51, z1, z0);

        virtualinvoke r33.<com.android.server.utils.TimingsTraceAndSlog: void traceEnd()>();

        $r25 = virtualinvoke r51.<com.android.server.pm.PackageManagerService$Injector: com.android.server.compat.PlatformCompat getCompatibility()>();

        r53 = new com.android.server.pm._$$Lambda$PackageManagerService$JqISwjRG4Nrwn7K19yITMU1WH5g;

        specialinvoke r53.<com.android.server.pm._$$Lambda$PackageManagerService$JqISwjRG4Nrwn7K19yITMU1WH5g: void <init>(com.android.server.pm.PackageManagerService)>(r52);

        virtualinvoke $r25.<com.android.server.compat.PlatformCompat: boolean registerListener(long,com.android.server.compat.CompatChange$ChangeListener)>(143539591L, r53);

        specialinvoke r52.<com.android.server.pm.PackageManagerService: void installWhitelistedSystemPackages()>();

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("package", r52);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r52);

        r54 = new com.android.server.pm.PackageManagerService$PackageManagerNative;

        specialinvoke r54.<com.android.server.pm.PackageManagerService$PackageManagerNative: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>(r52, null);

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("package_native", r54);

        return r52;
    }

    private void markPackageUninstalledForUserLPw(com.android.server.pm.PackageSetting, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int[] r2, r7;
        int i0, i1, $i2, $i3, $i4, i5;
        com.android.server.pm.UserManagerService $r3;
        com.android.server.pm.Settings $r4;
        android.content.pm.PackageUserState $r5;
        android.os.UserHandle r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        r6 := @parameter1: android.os.UserHandle;

        if r6 == null goto label2;

        $i3 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        if $i3 != -1 goto label1;

        goto label2;

     label1:
        r2 = newarray (int)[1];

        $i4 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        r2[0] = $i4;

        r7 = r2;

        goto label3;

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r7 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label3:
        i0 = lengthof r7;

        i5 = 0;

     label4:
        if i5 >= i0 goto label5;

        i1 = r7[i5];

        $r5 = virtualinvoke r1.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i1);

        $i2 = $r5.<android.content.pm.PackageUserState: int domainVerificationStatus>;

        virtualinvoke r1.<com.android.server.pm.PackageSetting: void setUserState(int,long,int,boolean,boolean,boolean,boolean,int,boolean,android.util.ArrayMap,boolean,boolean,java.lang.String,android.util.ArraySet,android.util.ArraySet,int,int,int,int,java.lang.String)>(i1, 0L, 0, 0, 1, 1, 0, 0, 0, null, 0, 0, null, null, null, $i2, 0, 0, 0, null);

        i5 = i5 + 1;

        goto label4;

     label5:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r4.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r1);

        return;
    }

    private android.content.ComponentName matchComponentForVerifier(java.lang.String, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r4, $r5, $r9;
        java.util.List r2;
        int i0, i1;
        android.content.ComponentName $r3;
        java.lang.Object $r6;
        android.content.pm.ActivityInfo $r7, $r8, r10;
        boolean $z0;
        android.content.pm.ResolveInfo r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = 0;

     label1:
        r10 = null;

        if i1 >= i0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        r11 = (android.content.pm.ResolveInfo) $r6;

        $r7 = r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r7 != null goto label2;

        goto label3;

     label2:
        $r8 = r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label3;

        r10 = r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        if r10 != null goto label5;

        return null;

     label5:
        $r3 = new android.content.ComponentName;

        $r5 = r10.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r4 = r10.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r3.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r5, $r4);

        return $r3;
    }

    private java.util.List matchVerifiers(android.content.pm.PackageInfoLite, java.util.List, com.android.server.pm.PackageVerificationState)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.PackageInfoLite r1;
        java.util.List r2;
        com.android.server.pm.PackageVerificationState r3;
        int i0, i1, $i2, $i3, i4;
        android.content.pm.VerifierInfo r5;
        android.content.ComponentName r6;
        android.content.pm.VerifierInfo[] $r7, $r8, $r10;
        java.util.ArrayList $r9;
        java.lang.String $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.PackageInfoLite;

        r2 := @parameter1: java.util.List;

        r3 := @parameter2: com.android.server.pm.PackageVerificationState;

        $r7 = r1.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers>;

        $i2 = lengthof $r7;

        if $i2 != 0 goto label1;

        return null;

     label1:
        $r8 = r1.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers>;

        i0 = lengthof $r8;

        $r9 = new java.util.ArrayList;

        $i3 = i0 + 1;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i3);

        i4 = 0;

     label2:
        if i4 >= i0 goto label6;

        $r10 = r1.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers>;

        r5 = $r10[i4];

        $r11 = r5.<android.content.pm.VerifierInfo: java.lang.String packageName>;

        r6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName matchComponentForVerifier(java.lang.String,java.util.List)>($r11, r2);

        if r6 != null goto label3;

        goto label5;

     label3:
        i1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getUidForVerifier(android.content.pm.VerifierInfo)>(r5);

        if i1 != -1 goto label4;

        goto label5;

     label4:
        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r6);

        virtualinvoke r3.<com.android.server.pm.PackageVerificationState: void addSufficientVerifier(int)>(i1);

     label5:
        i4 = i4 + 1;

        goto label2;

     label6:
        return $r9;
    }

    private static com.android.server.pm.PackageManagerService$DeletePackageAction mayDeletePackageLocked(com.android.server.pm.PackageManagerService$PackageRemovedInfo, com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageSetting r0, r1;
        int i0, $i1, $i3;
        android.os.UserHandle r2;
        boolean $z0, z1, z2;
        java.lang.StringBuilder $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage $r5;
        java.lang.String $r6, $r8;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r9;
        com.android.server.pm.PackageManagerService$DeletePackageAction $r11;

        r9 := @parameter0: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        r0 := @parameter1: com.android.server.pm.PackageSetting;

        r1 := @parameter2: com.android.server.pm.PackageSetting;

        i0 := @parameter3: int;

        r2 := @parameter4: android.os.UserHandle;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(r0);

        if $z0 == 0 goto label7;

        z1 = 1;

        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if r2 == null goto label5;

        $i3 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        if $i3 != -1 goto label4;

        goto label5;

     label4:
        z1 = 0;

        goto label5;

     label5:
        if z2 == 0 goto label6;

        if z1 == 0 goto label7;

     label6:
        if r1 != null goto label7;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to delete unknown system package ");

        $r5 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r6 = interfaceinvoke $r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        return null;

     label7:
        $r11 = new com.android.server.pm.PackageManagerService$DeletePackageAction;

        specialinvoke $r11.<com.android.server.pm.PackageManagerService$DeletePackageAction: void <init>(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,android.os.UserHandle,com.android.server.pm.PackageManagerService$1)>(r0, r1, r9, i0, r2, null);

        return $r11;
    }

    private java.util.List maybeAddInstantAppInstaller(java.util.List, android.content.Intent, java.lang.String, int, int, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1, r3;
        android.content.Intent r2;
        int i0, $i1, $i4, $i5, $i6, $i7, $i10, i13, i14;
        boolean z0, z1, $z2, $z4, $z5, $z6, z7, z8, $z9, $z10;
        com.android.server.pm.Settings $r4, $r37;
        android.content.pm.ActivityInfo $r5, $r10, $r13, $r15, $r26, $r36;
        java.lang.String $r6, $r17, $r20, $r23, $r25, $r28, $r43, $r47, r48, r50, r54;
        android.util.ArrayMap $r7, $r38;
        java.lang.Object $r8, $r35, $r39;
        android.content.pm.PackageUserState $r9, $r14;
        android.content.pm.ResolveInfo $r11, $r12, r49;
        android.content.IntentFilter $r16, $r21, $r24;
        android.net.Uri $r18, $r19, $r22;
        android.content.pm.AuxiliaryResolveInfo $r27, r56;
        long $l3, $l8, $l9;
        java.util.UUID $r29;
        android.content.pm.InstantAppRequest $r30;
        android.content.pm.InstantAppResolveInfo$InstantAppDigest $r31;
        int[] $r32;
        com.android.server.pm.InstantAppResolverConnection $r33;
        com.android.server.pm.ComponentResolver $r34;
        java.lang.StringBuilder $r40, $r44;
        com.android.server.pm.PackageSetting r51, r58;
        android.content.pm.ApplicationInfo r57;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.content.Intent;

        r48 := @parameter2: java.lang.String;

        i13 := @parameter3: int;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        $i1 = i13 & 8388608;

        if $i1 == 0 goto label01;

        z7 = 1;

        goto label02;

     label01:
        z7 = 0;

     label02:
        if z7 != 0 goto label08;

        $r34 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $i4 = i13 | 64;

        $i5 = 8388608 | $i4;

        $i6 = $i5 | 16777216;

        r3 = virtualinvoke $r34.<com.android.server.pm.ComponentResolver: java.util.List queryActivities(android.content.Intent,java.lang.String,int,int)>(r2, r48, $i6, i0);

        $i7 = interfaceinvoke r3.<java.util.List: int size()>();

        i14 = $i7 - 1;

     label03:
        if i14 < 0 goto label08;

        $r35 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i14);

        r49 = (android.content.pm.ResolveInfo) $r35;

        $r36 = r49.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r50 = $r36.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r37 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r38 = $r37.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r39 = virtualinvoke $r38.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r50);

        r51 = (com.android.server.pm.PackageSetting) $r39;

        $z4 = virtualinvoke r51.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

        if $z4 == 0 goto label07;

        $l8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: long getDomainVerificationStatusLPr(com.android.server.pm.PackageSetting,int)>(r51, i0);

        $l9 = $l8 >> 32;

        $i10 = (int) $l9;

        if $i10 != 3 goto label05;

        $z6 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z6 == 0 goto label04;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instant app marked to never run; pkg: ");

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r47);

     label04:
        r49 = null;

        z8 = 1;

        goto label09;

     label05:
        $z5 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z5 == 0 goto label06;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found installed instant app; pkg: ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r43);

     label06:
        z8 = 0;

        goto label09;

     label07:
        i14 = i14 + -1;

        goto label03;

     label08:
        r49 = null;

        z8 = 0;

     label09:
        if z8 != 0 goto label11;

        if r49 != null goto label10;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "resolveEphemeral");

        $r29 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        r54 = virtualinvoke $r29.<java.util.UUID: java.lang.String toString()>();

        $r30 = new android.content.pm.InstantAppRequest;

        $r31 = staticinvoke <com.android.server.pm.InstantAppResolver: android.content.pm.InstantAppResolveInfo$InstantAppDigest parseDigest(android.content.Intent)>(r2);

        $r32 = virtualinvoke $r31.<android.content.pm.InstantAppResolveInfo$InstantAppDigest: int[] getDigestPrefixSecure()>();

        specialinvoke $r30.<android.content.pm.InstantAppRequest: void <init>(android.content.pm.AuxiliaryResolveInfo,android.content.Intent,java.lang.String,java.lang.String,java.lang.String,boolean,int,android.os.Bundle,boolean,int[],java.lang.String)>(null, r2, r48, null, null, z1, i0, null, z0, $r32, r54);

        $r33 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection>;

        r56 = staticinvoke <com.android.server.pm.InstantAppResolver: android.content.pm.AuxiliaryResolveInfo doInstantAppResolutionPhaseOne(com.android.server.pm.InstantAppResolverConnection,android.content.pm.InstantAppRequest)>($r33, $r30);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        goto label12;

     label10:
        $r26 = r49.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r57 = $r26.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r27 = new android.content.pm.AuxiliaryResolveInfo;

        $r28 = r57.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $l3 = r57.<android.content.pm.ApplicationInfo: long longVersionCode>;

        specialinvoke $r27.<android.content.pm.AuxiliaryResolveInfo: void <init>(android.content.ComponentName,java.lang.String,long,java.lang.String)>(null, $r28, $l3, null);

        r56 = $r27;

        goto label12;

     label11:
        r56 = null;

     label12:
        $z9 = virtualinvoke r2.<android.content.Intent: boolean isWebIntent()>();

        if $z9 == 0 goto label13;

        if r56 != null goto label13;

        return r1;

     label13:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r6);

        r58 = (com.android.server.pm.PackageSetting) $r8;

        if r58 == null goto label18;

        $r9 = virtualinvoke r58.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        $z2 = virtualinvoke $r9.<android.content.pm.PackageUserState: boolean isEnabled(android.content.pm.ComponentInfo,int)>($r10, 0);

        if $z2 != 0 goto label14;

        goto label18;

     label14:
        $r11 = new android.content.pm.ResolveInfo;

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        specialinvoke $r11.<android.content.pm.ResolveInfo: void <init>(android.content.pm.ResolveInfo)>($r12);

        $r13 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        $r14 = virtualinvoke r58.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        $r15 = staticinvoke <android.content.pm.PackageParser: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.ActivityInfo,int,android.content.pm.PackageUserState,int)>($r13, 0, $r14, i0);

        $r11.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r15;

        $r11.<android.content.pm.ResolveInfo: int match> = 5799936;

        $r16 = new android.content.IntentFilter;

        specialinvoke $r16.<android.content.IntentFilter: void <init>()>();

        $r11.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = $r16;

        $r17 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        if $r17 == null goto label15;

        $r24 = $r11.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        $r25 = virtualinvoke r2.<android.content.Intent: java.lang.String getAction()>();

        virtualinvoke $r24.<android.content.IntentFilter: void addAction(java.lang.String)>($r25);

     label15:
        $r18 = virtualinvoke r2.<android.content.Intent: android.net.Uri getData()>();

        if $r18 == null goto label16;

        $r19 = virtualinvoke r2.<android.content.Intent: android.net.Uri getData()>();

        $r20 = virtualinvoke $r19.<android.net.Uri: java.lang.String getPath()>();

        if $r20 == null goto label16;

        $r21 = $r11.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        $r22 = virtualinvoke r2.<android.content.Intent: android.net.Uri getData()>();

        $r23 = virtualinvoke $r22.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke $r21.<android.content.IntentFilter: void addDataPath(java.lang.String,int)>($r23, 0);

     label16:
        $r11.<android.content.pm.ResolveInfo: boolean isInstantAppAvailable> = 1;

        $r11.<android.content.pm.ResolveInfo: boolean isDefault> = 1;

        $r11.<android.content.pm.ResolveInfo: android.content.pm.AuxiliaryResolveInfo auxiliaryInfo> = r56;

        $z10 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z10 == 0 goto label17;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Adding ephemeral installer to the ResolveInfo list");

     label17:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        return r1;

     label18:
        return r1;
    }

    private void maybeClearProfilesForUpgradesLI(com.android.server.pm.PackageSetting, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        boolean $z0;
        long $l0, $l2;
        int $i1;
        byte $b3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        if r1 == null goto label3;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $l0 = r1.<com.android.server.pm.PackageSetting: long versionCode>;

        $i1 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: int getVersionCode()>();

        $l2 = (long) $i1;

        $b3 = $l0 cmp $l2;

        if $b3 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r2, -1);

        return;

     label3:
        return;
    }

    private boolean maybeMigrateAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0;
        boolean $z0, $z1, $z2;
        com.android.server.pm.Installer $r4;
        java.lang.String $r5, $r6, $r10, $r13, $r15;
        com.android.server.pm.Installer$InstallerException $r7;
        java.lang.StringBuilder $r8;
        byte b1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        $z0 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z0 == 0 goto label6;

        $z1 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z1 != 0 goto label6;

        $z2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isDefaultToDeviceProtectedStorage()>();

        if $z2 == 0 goto label1;

        b1 = 1;

        goto label2;

     label1:
        b1 = 2;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r4.<com.android.server.pm.Installer: void migrateAppData(java.lang.String,java.lang.String,int,int)>($r5, $r6, i0, b1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to migrate ");

        $r10 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r7.<com.android.server.pm.Installer$InstallerException: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r15);

     label5:
        return 1;

     label6:
        return 0;

        catch com.android.server.pm.Installer$InstallerException from label2 to label3 with label4;
    }

    private void movePackageInternal(java.lang.String, java.lang.String, int, int, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r3, r6, r7, $r16, $r19, $r22, $r24, $r30, $r33, $r56, r68, r79, r81;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i11, $i12, $i13, $i16, i17, i18, i19, i20, i21;
        android.os.storage.StorageManager r2;
        java.io.File r4, $r29, $r58, r76, r77, r83;
        com.android.server.pm.InstallSource r5;
        com.android.server.pm.PackageManagerService$PackageFreezer r8;
        long l4, $l8, $l14, $l15, l22;
        com.android.server.pm.PackageManagerService$Injector $r9;
        android.content.Context $r10, $r17;
        android.util.ArrayMap $r11, $r14;
        java.lang.Object $r12, $r15, $r45, $r46, r71;
        com.android.server.pm.Settings $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, $z10, $z11, $z12, z13, z14, z15, z16, z17, z18, z19;
        android.content.res.Resources $r18;
        android.util.ArraySet $r23;
        android.content.pm.ApplicationInfo $r25;
        java.lang.CharSequence $r26;
        com.android.server.pm.UserManagerService $r27;
        int[] $r28, r80;
        android.os.Bundle $r31;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r32, $r36;
        android.content.pm.PackageStats $r34;
        byte $b9, $b10;
        com.android.server.pm.PackageManagerException $r35, $r55, r74, r78, r89, $r97, r98, r99, r101, r102, r103;
        java.util.concurrent.CountDownLatch $r37;
        com.android.server.pm.PackageManagerService$9 $r38;
        android.os.Handler $r39, $r47;
        com.android.server.pm.PackageManagerService$InstallParams $r40;
        com.android.server.pm.PackageManagerService$OriginInfo $r41;
        android.content.pm.PackageParser$SigningDetails $r42;
        com.android.server.pm.PackageManagerService$HandlerParams $r43;
        java.lang.Thread $r48;
        com.android.server.pm._$$Lambda$PackageManagerService$PmwkzQu9rsYKerIyizl5HqTMOeY $r49;
        com.android.server.pm.PackageManagerService$MoveInfo $r50, r93;
        java.lang.StringBuilder $r51, r100;
        android.os.storage.VolumeInfo $r57, r84;
        java.lang.Throwable $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, r75, r90;
        android.os.UserHandle r69;
        android.content.pm.PackageManager r70;
        com.android.server.pm.parsing.pkg.AndroidPackage r72;
        com.android.server.pm.PackageSetting r73;
        com.android.server.pm.Installer r88;
        android.os.Message r95;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r68 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i17 := @parameter3: int;

        r69 := @parameter4: android.os.UserHandle;

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r2 = virtualinvoke $r9.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r70 = virtualinvoke $r10.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r71 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r71;

     label01:
        $r11 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r68);

        r72 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r12;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r13.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r68);

        r73 = (com.android.server.pm.PackageSetting) $r15;

     label02:
        if r72 == null goto label58;

        if r73 == null goto label58;

     label03:
        $i5 = virtualinvoke r69.<android.os.UserHandle: int getIdentifier()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r73, i17, $i5);

        if $z0 != 0 goto label57;

        $z1 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 != 0 goto label56;

        $r16 = "private";

        z13 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        $r17 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: android.content.res.Resources getResources()>();

        z14 = virtualinvoke $r18.<android.content.res.Resources: boolean getBoolean(int)>(17891340);

     label04:
        if z13 == 0 goto label07;

        if z14 == 0 goto label05;

        goto label07;

     label05:
        r74 = new com.android.server.pm.PackageManagerException;

        specialinvoke r74.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-9, "3rd party apps are not allowed on internal storage");

        throw r74;

     label06:
        $r64 := @caughtexception;

        r75 = $r64;

        goto label60;

     label07:
        r3 = r73.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        r76 = new java.io.File;

        $r19 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke r76.<java.io.File: void <init>(java.lang.String)>($r19);

        r77 = new java.io.File;

        specialinvoke r77.<java.io.File: void <init>(java.io.File,java.lang.String)>(r76, "oat");

        $z2 = virtualinvoke r76.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label55;

        $z3 = virtualinvoke r77.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label55;

        $z4 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r3, r1);

        if $z4 != 0 goto label54;

        z15 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

     label08:
        if z15 != 0 goto label12;

     label09:
        $z12 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdminOnAnyUser(java.lang.String)>(r68);

        if $z12 != 0 goto label11;

     label10:
        goto label12;

     label11:
        r78 = new com.android.server.pm.PackageManagerException;

        specialinvoke r78.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-8, "Device admin cannot be moved");

        throw r78;

     label12:
        $r23 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages>;

        z16 = virtualinvoke $r23.<android.util.ArraySet: boolean contains(java.lang.Object)>(r68);

     label13:
        if z16 != 0 goto label53;

     label14:
        z17 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isExternalStorage()>();

        r4 = new java.io.File;

        $r24 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke r4.<java.io.File: void <init>(java.lang.String)>($r24);

        r5 = r73.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        r6 = r73.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

        $i6 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i6);

        r7 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r72, r73);

        $r25 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        $r26 = virtualinvoke r70.<android.content.pm.PackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>($r25);

        r79 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        i2 = interfaceinvoke r72.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        r8 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,java.lang.String)>(r68, "movePackageInternal");

        $r27 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r28 = virtualinvoke $r27.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        r80 = virtualinvoke r73.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r28, 1);

        $r29 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        $r30 = virtualinvoke $r29.<java.io.File: java.lang.String getName()>();

        z18 = virtualinvoke $r30.<java.lang.String: boolean startsWith(java.lang.String)>("~~");

     label15:
        if z18 == 0 goto label18;

     label16:
        $r58 = virtualinvoke r4.<java.io.File: java.io.File getParentFile()>();

        r81 = virtualinvoke $r58.<java.io.File: java.lang.String getAbsolutePath()>();

     label17:
        goto label19;

     label18:
        r81 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

     label19:
        exitmonitor r71;

     label20:
        $r31 = new android.os.Bundle;

        specialinvoke $r31.<android.os.Bundle: void <init>()>();

        virtualinvoke $r31.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.PACKAGE_NAME", r68);

        virtualinvoke $r31.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.TITLE", r79);

        $r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5100(com.android.server.pm.PackageManagerService$MoveCallbacks,int,android.os.Bundle)>($r32, i0, $r31);

        $r33 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z5 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r33, r1);

        if $z5 == 0 goto label21;

        r83 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(r1);

        z19 = 1;

        goto label23;

     label21:
        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>("primary_physical", r1);

        if $z6 == 0 goto label22;

        $r57 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo getPrimaryPhysicalVolume()>();

        r83 = virtualinvoke $r57.<android.os.storage.VolumeInfo: java.io.File getPath()>();

        z19 = 0;

        goto label23;

     label22:
        r84 = virtualinvoke r2.<android.os.storage.StorageManager: android.os.storage.VolumeInfo findVolumeByUuid(java.lang.String)>(r1);

        if r84 == null goto label51;

        $i7 = virtualinvoke r84.<android.os.storage.VolumeInfo: int getType()>();

        if $i7 != 1 goto label51;

        $z7 = virtualinvoke r84.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z7 == 0 goto label50;

        r83 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(r1);

        z19 = 1;

     label23:
        if z19 == 0 goto label28;

        i18 = lengthof r80;

        i19 = 0;

     label24:
        if i19 >= i18 goto label27;

        i3 = r80[i19];

        $z10 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z10 == 0 goto label26;

        $z11 = staticinvoke <android.os.storage.StorageManager: boolean isUserKeyUnlocked(int)>(i3);

        if $z11 == 0 goto label25;

        goto label26;

     label25:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be unlocked");

        $r55 = new com.android.server.pm.PackageManagerException;

        $r56 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-10, $r56);

        throw $r55;

     label26:
        i19 = i19 + 1;

        goto label24;

     label27:
        goto label28;

     label28:
        $r34 = new android.content.pm.PackageStats;

        specialinvoke $r34.<android.content.pm.PackageStats: void <init>(java.lang.String,int)>(null, -1);

        r88 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        entermonitor r88;

     label29:
        i20 = lengthof r80;

     label30:
        i21 = 0;

     label31:
        if i21 >= i20 goto label38;

     label32:
        $i16 = r80[i21];

        $z9 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean getPackageSizeInfoLI(java.lang.String,int,android.content.pm.PackageStats)>(r68, $i16, $r34);

        if $z9 == 0 goto label34;

     label33:
        i21 = i21 + 1;

        goto label31;

     label34:
        virtualinvoke r8.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

        r89 = new com.android.server.pm.PackageManagerException;

     label35:
        specialinvoke r89.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Failed to measure package size");

        throw r89;

     label36:
        $r63 := @caughtexception;

        r90 = $r63;

        goto label47;

     label37:
        $r60 := @caughtexception;

        r90 = $r60;

        goto label47;

     label38:
        exitmonitor r88;

     label39:
        l4 = virtualinvoke r83.<java.io.File: long getUsableSpace()>();

        if z19 == 0 goto label40;

        $l15 = $r34.<android.content.pm.PackageStats: long codeSize>;

        $l14 = $r34.<android.content.pm.PackageStats: long dataSize>;

        l22 = $l15 + $l14;

        goto label41;

     label40:
        l22 = $r34.<android.content.pm.PackageStats: long codeSize>;

     label41:
        $l8 = virtualinvoke r2.<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)>(r83);

        $b9 = l22 cmp $l8;

        if $b9 > 0 goto label44;

        $r36 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5200(com.android.server.pm.PackageManagerService$MoveCallbacks,int,int)>($r36, i0, 10);

        $r37 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r37.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r38 = new com.android.server.pm.PackageManagerService$9;

        specialinvoke $r38.<com.android.server.pm.PackageManagerService$9: void <init>(com.android.server.pm.PackageManagerService,java.util.concurrent.CountDownLatch,com.android.server.pm.PackageManagerService$PackageFreezer,int,java.lang.String,boolean)>(r0, $r37, r8, i0, r68, z17);

        if z19 == 0 goto label42;

        $r48 = new java.lang.Thread;

        $r49 = new com.android.server.pm._$$Lambda$PackageManagerService$PmwkzQu9rsYKerIyizl5HqTMOeY;

        specialinvoke $r49.<com.android.server.pm._$$Lambda$PackageManagerService$PmwkzQu9rsYKerIyizl5HqTMOeY: void <init>(com.android.server.pm.PackageManagerService,java.util.concurrent.CountDownLatch,long,java.io.File,long,int)>(r0, $r37, l4, r83, l22, i0);

        specialinvoke $r48.<java.lang.Thread: void <init>(java.lang.Runnable)>($r49);

        virtualinvoke $r48.<java.lang.Thread: void start()>();

        $r50 = new com.android.server.pm.PackageManagerService$MoveInfo;

        specialinvoke $r50.<com.android.server.pm.PackageManagerService$MoveInfo: void <init>(int,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String)>(i0, r3, r1, r68, i1, r7, i2, r81);

        r93 = $r50;

        goto label43;

     label42:
        r93 = null;

     label43:
        $r39 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r95 = virtualinvoke $r39.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        $r40 = new com.android.server.pm.PackageManagerService$InstallParams;

        $r41 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromExistingFile(java.io.File)>(r4);

        $b10 = 16 | 2;

        $r42 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        specialinvoke $r40.<com.android.server.pm.PackageManagerService$InstallParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$OriginInfo,com.android.server.pm.PackageManagerService$MoveInfo,android.content.pm.IPackageInstallObserver2,int,com.android.server.pm.InstallSource,java.lang.String,com.android.server.pm.PackageManagerService$VerificationInfo,android.os.UserHandle,java.lang.String,java.lang.String[],java.util.List,int,android.content.pm.PackageParser$SigningDetails,int,long,int)>(r0, $r41, r93, $r38, $b10, r5, r1, null, r69, r6, null, null, 3, $r42, 0, -1L, 0);

        $r43 = virtualinvoke $r40.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$HandlerParams setTraceMethod(java.lang.String)>("movePackage");

        $i11 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r40);

        virtualinvoke $r43.<com.android.server.pm.PackageManagerService$HandlerParams: com.android.server.pm.PackageManagerService$HandlerParams setTraceCookie(int)>($i11);

        r95.<android.os.Message: java.lang.Object obj> = $r40;

        $r45 = r95.<android.os.Message: java.lang.Object obj>;

        $i12 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r45);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "movePackage", $i12);

        $r46 = r95.<android.os.Message: java.lang.Object obj>;

        $i13 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r46);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "queueInstall", $i13);

        $r47 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r47.<android.os.Handler: boolean sendMessage(android.os.Message)>(r95);

        return;

     label44:
        virtualinvoke r8.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

        $r35 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r35.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Not enough free space to move");

        throw $r35;

     label45:
        $r61 := @caughtexception;

        r90 = $r61;

        goto label47;

     label46:
        $r66 := @caughtexception;

        r90 = $r66;

     label47:
        exitmonitor r88;

     label48:
        throw r90;

     label49:
        $r59 := @caughtexception;

        r90 = $r59;

        goto label47;

     label50:
        goto label51;

     label51:
        virtualinvoke r8.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

        $r97 = new com.android.server.pm.PackageManagerException;

        specialinvoke $r97.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Move location not mounted private volume");

        throw $r97;

     label52:
        $r62 := @caughtexception;

        r75 = $r62;

        goto label60;

     label53:
        r98 = new com.android.server.pm.PackageManagerException;

        specialinvoke r98.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-7, "Failed to move already frozen package");

        throw r98;

     label54:
        r99 = new com.android.server.pm.PackageManagerException;

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package already moved to ");

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r99.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, $r22);

        throw r99;

     label55:
        r101 = new com.android.server.pm.PackageManagerException;

        specialinvoke r101.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-6, "Move only supported for modern cluster style installs");

        throw r101;

     label56:
        r102 = new com.android.server.pm.PackageManagerException;

        specialinvoke r102.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-3, "Cannot move system application");

        throw r102;

     label57:
        goto label58;

     label58:
        r103 = new com.android.server.pm.PackageManagerException;

        specialinvoke r103.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-2, "Missing package");

        throw r103;

     label59:
        $r67 := @caughtexception;

        r75 = $r67;

     label60:
        exitmonitor r71;

     label61:
        throw r75;

     label62:
        $r65 := @caughtexception;

        r75 = $r65;

        goto label60;

        catch java.lang.Throwable from label01 to label02 with label59;
        catch java.lang.Throwable from label03 to label04 with label59;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label59;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label12 with label06;
        catch java.lang.Throwable from label12 to label13 with label59;
        catch java.lang.Throwable from label14 to label15 with label52;
        catch java.lang.Throwable from label16 to label17 with label06;
        catch java.lang.Throwable from label18 to label19 with label52;
        catch java.lang.Throwable from label19 to label20 with label52;
        catch java.lang.Throwable from label29 to label30 with label46;
        catch java.lang.Throwable from label32 to label33 with label37;
        catch java.lang.Throwable from label34 to label35 with label37;
        catch java.lang.Throwable from label35 to label36 with label36;
        catch java.lang.Throwable from label38 to label39 with label45;
        catch java.lang.Throwable from label47 to label48 with label49;
        catch java.lang.Throwable from label53 to label54 with label62;
        catch java.lang.Throwable from label54 to label55 with label62;
        catch java.lang.Throwable from label55 to label56 with label62;
        catch java.lang.Throwable from label56 to label57 with label62;
        catch java.lang.Throwable from label58 to label59 with label62;
        catch java.lang.Throwable from label60 to label61 with label62;
    }

    private boolean needsNetworkVerificationLPr(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.Settings $r1;
        java.lang.String r2;
        android.content.pm.IntentFilterVerificationInfo r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r3 = virtualinvoke $r1.<com.android.server.pm.Settings: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationLPr(java.lang.String)>(r2);

        if r3 != null goto label1;

        return 1;

     label1:
        i0 = virtualinvoke r3.<android.content.pm.IntentFilterVerificationInfo: int getStatus()>();

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 == 2 goto label2;

        return 0;

     label2:
        return 1;
    }

    private boolean nonStaticSharedLibExistsLocked(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        android.util.ArrayMap $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $z0 = staticinvoke <com.android.server.pm.PackageManagerService: boolean sharedLibExists(java.lang.String,long,java.util.Map)>(r1, -1L, $r2);

        return $z0;
    }

    private java.lang.String normalizePackageNameLPr(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r3;
        com.android.server.pm.Settings $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r1 = virtualinvoke $r2.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>(r3);

        if r1 == null goto label1;

        r3 = r1;

        goto label1;

     label1:
        return r3;
    }

    private void notifyInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo, android.content.pm.IPackageInstallObserver2)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.IPackageInstallObserver2 r1;
        android.os.Bundle r2;
        java.lang.String $r3, $r4;
        int $i0;
        android.os.RemoteException $r5;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        r1 := @parameter1: android.content.pm.IPackageInstallObserver2;

        if r1 == null goto label4;

     label1:
        r2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.os.Bundle extrasForInstallResult(com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(r6);

        $r4 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name>;

        $i0 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        $r3 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String returnMsg>;

        interfaceinvoke r1.<android.content.pm.IPackageInstallObserver2: void onPackageInstalled(java.lang.String,int,java.lang.String,android.os.Bundle)>($r4, $i0, $r3, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Observer no longer exists.");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyInstallObserver(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.Map $r1;
        java.lang.Object $r2, $r3, $r4;
        android.content.pm.IPackageInstallObserver2 $r5;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r6;
        java.lang.String r7;
        android.util.Pair r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.pm.PackageManagerService: java.util.Map mNoKillInstallObservers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7);

        r8 = (android.util.Pair) $r2;

        if r8 == null goto label1;

        $r3 = r8.<android.util.Pair: java.lang.Object first>;

        $r6 = (com.android.server.pm.PackageManagerService$PackageInstalledInfo) $r3;

        $r4 = r8.<android.util.Pair: java.lang.Object second>;

        $r5 = (android.content.pm.IPackageInstallObserver2) $r4;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo,android.content.pm.IPackageInstallObserver2)>($r6, $r5);

     label1:
        return;
    }

    private void notifyPackageChangeObservers(android.content.pm.PackageChangeEvent)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.ArrayList r1, $r3;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Throwable $r5, $r6;
        android.os.RemoteException $r7;
        android.content.pm.PackageChangeEvent r8;
        android.content.pm.IPackageChangeObserver r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: android.content.pm.PackageChangeEvent;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "notifyPackageChangeObservers");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPackageChangeObservers>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: java.util.ArrayList mPackageChangeObservers>;

        r2 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.content.pm.IPackageChangeObserver) $r4;

     label04:
        interfaceinvoke r9.<android.content.pm.IPackageChangeObserver: void onPackageChanged(android.content.pm.PackageChangeEvent)>(r8);

     label05:
        goto label08;

     label06:
        $r7 := @caughtexception;

     label07:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>("PackageManager", $r7);

     label08:
        goto label03;

     label09:
        exitmonitor r1;

     label10:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r6;

     label14:
        $r5 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    private void notifyPackageChangeObserversOnDelete(java.lang.String, long)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        long l0;
        android.content.pm.PackageChangeEvent $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = new android.content.pm.PackageChangeEvent;

        specialinvoke $r3.<android.content.pm.PackageChangeEvent: void <init>()>();

        $r3.<android.content.pm.PackageChangeEvent: java.lang.String packageName> = r1;

        $r3.<android.content.pm.PackageChangeEvent: long version> = l0;

        $r3.<android.content.pm.PackageChangeEvent: long lastUpdateTimeMillis> = 0L;

        $r3.<android.content.pm.PackageChangeEvent: boolean newInstalled> = 0;

        $r3.<android.content.pm.PackageChangeEvent: boolean dataRemoved> = 0;

        $r3.<android.content.pm.PackageChangeEvent: boolean isDeleted> = 1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyPackageChangeObservers(android.content.pm.PackageChangeEvent)>($r3);

        return;
    }

    private void notifyPackageChangeObserversOnUpdate(com.android.server.pm.PackageManagerService$ReconciledPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r3;
        android.content.pm.PackageChangeEvent $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage $r5;
        java.lang.String $r6;
        long $l0, $l1;
        boolean $z1, $z2, z3, z4;
        com.android.server.pm.PackageManagerService$ReconciledPackage r7;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: com.android.server.pm.PackageManagerService$ReconciledPackage;

        r1 = r7.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageSetting pkgSetting>;

        $r3 = r7.<com.android.server.pm.PackageManagerService$ReconciledPackage: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        r8 = $r3.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r4 = new android.content.pm.PackageChangeEvent;

        specialinvoke $r4.<android.content.pm.PackageChangeEvent: void <init>()>();

        $r5 = r1.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r6 = interfaceinvoke $r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r4.<android.content.pm.PackageChangeEvent: java.lang.String packageName> = $r6;

        $l0 = r1.<com.android.server.pm.PackageSetting: long versionCode>;

        $r4.<android.content.pm.PackageChangeEvent: long version> = $l0;

        $l1 = r1.<com.android.server.pm.PackageSetting: long lastUpdateTime>;

        $r4.<android.content.pm.PackageChangeEvent: long lastUpdateTimeMillis> = $l1;

        if r8 == null goto label2;

        $z2 = r8.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isUpdate>;

        if $z2 != 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        $r4.<android.content.pm.PackageChangeEvent: boolean newInstalled> = z3;

        if r8 == null goto label4;

        $z1 = r8.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean dataRemoved>;

        if $z1 == 0 goto label4;

        z4 = 1;

        goto label5;

     label4:
        z4 = 0;

     label5:
        $r4.<android.content.pm.PackageChangeEvent: boolean dataRemoved> = z4;

        $r4.<android.content.pm.PackageChangeEvent: boolean isDeleted> = 0;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyPackageChangeObservers(android.content.pm.PackageChangeEvent)>($r4);

        return;
    }

    private void notifyPackageUseLocked(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.Settings $r1;
        com.android.server.pm.pkg.PackageStateUnserialized $r2;
        long $l1;
        java.lang.String r4;
        com.android.server.pm.PackageSetting r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r5 = virtualinvoke $r1.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r4);

        if r5 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke r5.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setLastPackageUsageTimeInMills(int,long)>(i0, $l1);

        return;
    }

    static void onRestoreComplete(int, android.content.Context, android.content.IntentSender)
    {
        int i0, $i1;
        android.content.IntentSender r0;
        android.content.Intent $r2;
        android.content.IntentSender$SendIntentException $r4;
        android.content.Context r5;

        i0 := @parameter0: int;

        r5 := @parameter1: android.content.Context;

        r0 := @parameter2: android.content.IntentSender;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        $i1 = staticinvoke <android.content.pm.PackageManager: int installStatusToPublicStatus(int)>(i0);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.content.pm.extra.STATUS", $i1);

     label1:
        virtualinvoke r0.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>(r5, 0, $r2, null, null);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.content.IntentSender$SendIntentException from label1 to label2 with label3;
    }

    private boolean optimisticallyRegisterAppId(com.android.server.pm.PackageManagerService$ScanResult) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$ScanResult r1;
        boolean $z0, $z1;
        com.android.server.pm.PackageSetting $r2;
        com.android.server.pm.Settings $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$ScanResult;

        $z0 = r1.<com.android.server.pm.PackageManagerService$ScanResult: boolean existingSettingCopied>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = r1.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $z1 = virtualinvoke $r3.<com.android.server.pm.Settings: boolean registerAppIdLPw(com.android.server.pm.PackageSetting)>($r2);

        return $z1;

     label1:
        return 0;
    }

    private boolean packageIsBrowser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r7;
        java.util.List r2;
        int i0, $i1, i2, i3;
        android.content.pm.ResolveInfo r3;
        android.content.Intent $r4;
        java.lang.Object $r5;
        android.content.pm.ActivityInfo $r6;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $r4 = <com.android.server.pm.PackageManagerService: android.content.Intent sBrowserIntent>;

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r4, null, 131072, i2);

        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i3);

        r3 = (android.content.pm.ResolveInfo) $r5;

        $i1 = r3.<android.content.pm.ResolveInfo: int priority>;

        if $i1 < 0 goto label2;

        $r6 = r3.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r7 = $r6.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean performBackupManagerRestore(int, int, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i5;
        android.app.backup.IBackupManager r1;
        android.os.IBinder $r2;
        boolean $z0;
        java.lang.String $r6, $r8;
        com.android.server.pm.parsing.pkg.AndroidPackage $r7;
        java.lang.Exception $r9;
        android.os.RemoteException $r10;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r11 := @parameter2: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("backup");

        r1 = staticinvoke <android.app.backup.IBackupManager$Stub: android.app.backup.IBackupManager asInterface(android.os.IBinder)>($r2);

        if r1 == null goto label9;

        i5 = i0;

        if i0 != -1 goto label1;

        i5 = 0;

     label1:
        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "restore", i1);

     label2:
        $z0 = interfaceinvoke r1.<android.app.backup.IBackupManager: boolean isUserReadyForBackup(int)>(i5);

        if $z0 == 0 goto label4;

        $r7 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r8 = interfaceinvoke $r7.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke r1.<android.app.backup.IBackupManager: void restoreAtInstallForUser(int,java.lang.String,int)>(i5, $r8, i1);

     label3:
        goto label8;

     label4:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not ready. Restore at install didn\'t take place.");

        $r6 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r6);

     label5:
        return 0;

     label6:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Exception trying to enqueue restore", $r9);

        return 0;

     label7:
        $r10 := @caughtexception;

     label8:
        return 1;

     label9:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Backup Manager not found!");

        return 0;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch java.lang.Exception from label2 to label3 with label6;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private int performDexOptInternal(com.android.server.pm.dex.DexoptOptions)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageSetting r2;
        long l0;
        int i1;
        android.util.ArrayMap $r3, $r9;
        java.lang.String $r4, $r7;
        java.lang.Object $r5, r16, r17;
        com.android.server.pm.Settings $r6, $r8;
        com.android.server.pm.PackageUsage $r10;
        com.android.server.pm.CompilerStats $r11;
        java.lang.Throwable $r12, $r13, $r14;
        com.android.server.pm.dex.DexoptOptions r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: com.android.server.pm.dex.DexoptOptions;

        r16 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke r15.<com.android.server.pm.dex.DexoptOptions: java.lang.String getPackageName()>();

        $r5 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r4);

        r1 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = virtualinvoke r15.<com.android.server.pm.dex.DexoptOptions: java.lang.String getPackageName()>();

        r2 = virtualinvoke $r6.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r7);

     label02:
        if r1 == null goto label12;

        if r2 != null goto label03;

        goto label12;

     label03:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageUsage mPackageUsage>;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        virtualinvoke $r10.<com.android.server.pm.PackageUsage: boolean maybeWriteAsync(java.lang.Object)>($r9);

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats>;

        virtualinvoke $r11.<com.android.server.pm.CompilerStats: boolean maybeWriteAsync()>();

        exitmonitor r16;

     label04:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        r17 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r17;

     label06:
        i1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int performDexOptInternalWithDependenciesLI(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.dex.DexoptOptions)>(r1, r2, r15);

        exitmonitor r17;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return i1;

     label08:
        $r14 := @caughtexception;

     label09:
        exitmonitor r17;

     label10:
        throw $r14;

     label11:
        $r13 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r13;

     label12:
        exitmonitor r16;

     label13:
        return -1;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r16;

     label16:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    private int performDexOptInternalWithDependenciesLI(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, com.android.server.pm.dex.DexoptOptions)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1, r38;
        com.android.server.pm.dex.DexoptOptions r2, $r15;
        java.lang.String[] r3;
        java.util.Iterator r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r6, r33;
        java.lang.String $r7, $r8, $r9, $r10, $r13, $r16, $r17, $r18, $r21, $r24, $r27;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.pm.CompilerStats$PackageStats $r11, $r25;
        com.android.server.pm.dex.DexManager $r12, $r26, $r31;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo $r14, $r28;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.Object $r19, $r22, r37;
        android.util.ArrayMap $r20;
        com.android.server.pm.Settings $r23;
        com.android.server.pm.PackageDexOptimizer$ForcedUpdatePackageDexOptimizer $r29;
        com.android.server.pm.PackageDexOptimizer $r30, r34;
        java.lang.Throwable $r32;
        java.util.List r35;
        android.content.pm.SharedLibraryInfo r36;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r33 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        r2 := @parameter2: com.android.server.pm.dex.DexoptOptions;

        $r7 = "android";

        $r8 = interfaceinvoke r33.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label01;

        $r31 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $i5 = virtualinvoke $r31.<com.android.server.pm.dex.DexManager: int dexoptSystemServer(com.android.server.pm.dex.DexoptOptions)>(r2);

        return $i5;

     label01:
        $z1 = virtualinvoke r2.<com.android.server.pm.dex.DexoptOptions: boolean isForce()>();

        if $z1 == 0 goto label02;

        $r29 = new com.android.server.pm.PackageDexOptimizer$ForcedUpdatePackageDexOptimizer;

        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        specialinvoke $r29.<com.android.server.pm.PackageDexOptimizer$ForcedUpdatePackageDexOptimizer: void <init>(com.android.server.pm.PackageDexOptimizer)>($r30);

        r34 = $r29;

        goto label03;

     label02:
        r34 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

     label03:
        r35 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List findSharedLibraries(com.android.server.pm.PackageSetting)>(r1);

        $r9 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r33, r1);

        $r10 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r33, r1);

        r3 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r9, $r10);

        $z2 = interfaceinvoke r35.<java.util.Collection: boolean isEmpty()>();

        if $z2 != 0 goto label11;

        $r15 = new com.android.server.pm.dex.DexoptOptions;

        $r16 = virtualinvoke r2.<com.android.server.pm.dex.DexoptOptions: java.lang.String getPackageName()>();

        $i1 = virtualinvoke r2.<com.android.server.pm.dex.DexoptOptions: int getCompilationReason()>();

        $r17 = virtualinvoke r2.<com.android.server.pm.dex.DexoptOptions: java.lang.String getCompilerFilter()>();

        $r18 = virtualinvoke r2.<com.android.server.pm.dex.DexoptOptions: java.lang.String getSplitName()>();

        $i2 = virtualinvoke r2.<com.android.server.pm.dex.DexoptOptions: int getFlags()>();

        $i3 = $i2 | 64;

        specialinvoke $r15.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)>($r16, $i1, $r17, $r18, $i3);

        r5 = interfaceinvoke r35.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r36 = (android.content.pm.SharedLibraryInfo) $r19;

        r37 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r37;

     label05:
        $r20 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r21 = virtualinvoke r36.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        $r22 = virtualinvoke $r20.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r21);

        r6 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r22;

        $r23 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r24 = virtualinvoke r36.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r38 = virtualinvoke $r23.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r24);

        exitmonitor r37;

     label06:
        if r6 == null goto label07;

        if r38 == null goto label07;

        $r25 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats$PackageStats getOrCreateCompilerPackageStats(com.android.server.pm.parsing.pkg.AndroidPackage)>(r6);

        $r26 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r27 = interfaceinvoke r6.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r28 = virtualinvoke $r26.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>($r27);

        virtualinvoke r34.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.lang.String[],com.android.server.pm.CompilerStats$PackageStats,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo,com.android.server.pm.dex.DexoptOptions)>(r6, r38, r3, $r25, $r28, $r15);

     label07:
        goto label04;

     label08:
        $r32 := @caughtexception;

     label09:
        exitmonitor r37;

     label10:
        throw $r32;

     label11:
        $r11 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats$PackageStats getOrCreateCompilerPackageStats(com.android.server.pm.parsing.pkg.AndroidPackage)>(r33);

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $r13 = interfaceinvoke r33.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r14 = virtualinvoke $r12.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>($r13);

        $i0 = virtualinvoke r34.<com.android.server.pm.PackageDexOptimizer: int performDexOpt(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.lang.String[],com.android.server.pm.CompilerStats$PackageStats,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo,com.android.server.pm.dex.DexoptOptions)>(r33, r1, r3, $r11, $r14, r2);

        return $i0;

        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private int performDexOptTraced(com.android.server.pm.dex.DexoptOptions)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Throwable $r1;
        com.android.server.pm.dex.DexoptOptions r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r2 := @parameter0: com.android.server.pm.dex.DexoptOptions;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "dexopt");

     label1:
        i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int performDexOptInternal(com.android.server.pm.dex.DexoptOptions)>(r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return i0;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private int[] performDexOptUpgrade(java.util.List, boolean, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z14, $z15;
        int i0, i1, i2, $i5, i9, i10, i11, i12, i13, i14, i18;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, $r23, $r25;
        com.android.server.pm.Installer r2, $r29;
        int[] $r3;
        java.lang.Object $r4, r62;
        com.android.server.pm.dex.DexoptOptions $r5;
        java.lang.String $r6, $r10, $r18, $r20, $r22, $r26, $r27, $r28, $r30, $r31, $r32, $r36, $r39, $r46, $r49, r57, r58;
        java.lang.StringBuilder $r7, $r34, $r44;
        com.android.server.pm.dex.ArtManagerService $r11;
        android.app.IActivityManager $r12;
        android.content.Context $r13;
        android.content.res.Resources $r14;
        java.lang.Object[] $r15;
        java.lang.Integer $r16, $r17;
        java.io.File $r19, $r24;
        com.android.server.pm.Settings $r21;
        java.lang.Exception $r33, $r41, $r43, r59;
        android.os.RemoteException $r40;
        java.lang.Throwable $r42;
        java.util.List r50;
        java.util.Iterator r51;
        com.android.server.pm.PackageSetting r55;
        short s15, s17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r50 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        i9 = 0;

        i10 = 0;

        i11 = 0;

        i12 = 0;

        i1 = interfaceinvoke r50.<java.util.List: int size()>();

        r51 = interfaceinvoke r50.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z12 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label41;

        $r4 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r1 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

        i2 = i9 + 1;

        z14 = 0;

        $z2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        if $z2 != 0 goto label03;

        $z11 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        if $z11 == 0 goto label02;

        goto label03;

     label02:
        z14 = 0;

        goto label20;

     label03:
        $z3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z3 == 0 goto label19;

        $r19 = new java.io.File;

        $r20 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getPrebuildProfilePath(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>($r20);

        $z6 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label08;

     label04:
        $r29 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r30 = virtualinvoke $r19.<java.io.File: java.lang.String getAbsolutePath()>();

        $i5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $r31 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r32 = staticinvoke <android.content.pm.dex.ArtManager: java.lang.String getProfileName(java.lang.String)>(null);

        $z10 = virtualinvoke $r29.<com.android.server.pm.Installer: boolean copySystemProfile(java.lang.String,int,java.lang.String,java.lang.String)>($r30, $i5, $r31, $r32);

        if $z10 != 0 goto label07;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", "Installer failed to copy system profile!");

     label05:
        goto label07;

     label06:
        $r43 := @caughtexception;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy profile ");

        $r46 = virtualinvoke $r19.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r49 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r49, $r43);

     label07:
        z14 = 0;

        goto label20;

     label08:
        $r21 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r22 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r55 = virtualinvoke $r21.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r22);

        if r55 == null goto label18;

        $r23 = r55.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z7 = interfaceinvoke $r23.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z7 == 0 goto label18;

        $r24 = new java.io.File;

        $r25 = r55.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r26 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getPrebuildProfilePath(com.android.server.pm.parsing.pkg.AndroidPackage)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-Stub", "");

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>($r27);

        $z8 = virtualinvoke $r24.<java.io.File: boolean exists()>();

        if $z8 == 0 goto label17;

     label09:
        r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        r57 = virtualinvoke $r24.<java.io.File: java.lang.String getAbsolutePath()>();

        i13 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        r58 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

     label10:
        $r28 = staticinvoke <android.content.pm.dex.ArtManager: java.lang.String getProfileName(java.lang.String)>(null);

        $z9 = virtualinvoke r2.<com.android.server.pm.Installer: boolean copySystemProfile(java.lang.String,int,java.lang.String,java.lang.String)>(r57, i13, r58, $r28);

        if $z9 != 0 goto label12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", "Failed to copy system profile for stub package!");

     label11:
        goto label13;

     label12:
        z14 = 1;

     label13:
        goto label20;

     label14:
        $r33 := @caughtexception;

        r59 = $r33;

        goto label16;

     label15:
        $r41 := @caughtexception;

        r59 = $r41;

     label16:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy profile ");

        $r36 = virtualinvoke $r24.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r39, r59);

        z14 = 0;

        goto label20;

     label17:
        z14 = 0;

        goto label20;

     label18:
        z14 = 0;

        goto label20;

     label19:
        z14 = 0;

     label20:
        $z15 = staticinvoke <com.android.server.pm.PackageDexOptimizer: boolean canOptimizePackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        if $z15 != 0 goto label21;

        i11 = i11 + 1;

        i9 = i2;

        goto label01;

     label21:
        if z0 == 0 goto label31;

     label22:
        $r12 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r13 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $r15 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r15[0] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r15[1] = $r17;

        $r18 = virtualinvoke $r14.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(17039632, $r15);

        interfaceinvoke $r12.<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)>($r18, 1);

     label23:
        goto label25;

     label24:
        $r40 := @caughtexception;

     label25:
        r62 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r62;

     label26:
        r0.<com.android.server.pm.PackageManagerService: boolean mDexOptDialogShown> = 1;

        exitmonitor r62;

     label27:
        goto label31;

     label28:
        $r42 := @caughtexception;

     label29:
        exitmonitor r62;

     label30:
        throw $r42;

     label31:
        i14 = i0;

        if z14 == 0 goto label32;

        i14 = 3;

     label32:
        $z4 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("pm.precompile_layouts", 0);

        if $z4 == 0 goto label33;

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService>;

        virtualinvoke $r11.<com.android.server.pm.dex.ArtManagerService: boolean compileLayouts(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label33:
        if z1 == 0 goto label34;

        s15 = 4;

        goto label35;

     label34:
        s15 = 0;

     label35:
        s17 = s15;

        if i0 != 0 goto label36;

        s17 = s15 | 1024;

     label36:
        $r5 = new com.android.server.pm.dex.DexoptOptions;

        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        specialinvoke $r5.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,int)>($r6, i14, s17);

        i18 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int performDexOptTraced(com.android.server.pm.dex.DexoptOptions)>($r5);

        if i18 == -1 goto label39;

        if i18 == 0 goto label38;

        if i18 == 1 goto label37;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected dexopt return code ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r10);

        goto label40;

     label37:
        i10 = i10 + 1;

        goto label40;

     label38:
        i11 = i11 + 1;

        goto label40;

     label39:
        i12 = i12 + 1;

     label40:
        i9 = i2;

        goto label01;

     label41:
        $r3 = newarray (int)[3];

        $r3[0] = i10;

        $r3[1] = i11;

        $r3[2] = i12;

        return $r3;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label10 to label11 with label14;
        catch android.os.RemoteException from label22 to label23 with label24;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    private boolean performRollbackManagerRestore(int, int, com.android.server.pm.PackageManagerService$PackageInstalledInfo, com.android.server.pm.PackageManagerService$PostInstallData)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, i6, i7, i9;
        android.content.rollback.IRollbackManager r1;
        java.lang.String r2, $r18, r26;
        com.android.server.pm.Settings r3, $r8;
        com.android.server.pm.PackageSetting r4;
        android.os.IBinder $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage $r6, $r9;
        com.android.server.pm.UserManagerService $r7;
        com.android.server.pm.PackageManagerService$InstallArgs $r10, $r11, $r12;
        java.lang.Throwable $r13, $r19, $r20, r24;
        android.os.RemoteException $r14;
        java.lang.StringBuilder $r15;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r21;
        com.android.server.pm.PackageManagerService$PostInstallData r22;
        int[] r23, r25;
        long l8;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        r21 := @parameter2: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        r22 := @parameter3: com.android.server.pm.PackageManagerService$PostInstallData;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("rollback");

        r1 = staticinvoke <android.content.rollback.IRollbackManager$Stub: android.content.rollback.IRollbackManager asInterface(android.os.IBinder)>($r5);

        $r6 = r21.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r2 = interfaceinvoke $r6.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r23 = virtualinvoke $r7.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        entermonitor r3;

     label01:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r4 = virtualinvoke $r8.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r2);

     label02:
        if r4 == null goto label07;

     label03:
        i7 = r4.<com.android.server.pm.PackageSetting: int appId>;

     label04:
        l8 = virtualinvoke r4.<com.android.server.pm.PackageSetting: long getCeDataInode(int)>(i6);

     label05:
        i9 = i7;

        goto label08;

     label06:
        $r19 := @caughtexception;

        r24 = $r19;

        goto label19;

     label07:
        i9 = -1;

        l8 = -1L;

     label08:
        r25 = virtualinvoke r4.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>(r23, 1);

        exitmonitor r3;

     label09:
        if r22 == null goto label11;

        $r10 = r22.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$InstallArgs args>;

        if $r10 == null goto label11;

        $r11 = r22.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $i1 = $r11.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $i2 = $i1 & 262144;

        if $i2 != 0 goto label10;

        $r12 = r22.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $i3 = $r12.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $i4 = $i3 & 128;

        if $i4 == 0 goto label11;

     label10:
        z0 = 1;

        goto label12;

     label11:
        z0 = 0;

     label12:
        if r4 == null goto label16;

        if z0 == 0 goto label16;

        $r9 = r21.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r26 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>($r9, r4);

     label13:
        interfaceinvoke r1.<android.content.rollback.IRollbackManager: void snapshotAndRestoreUserData(java.lang.String,int[],int,long,java.lang.String,int)>(r2, r25, i9, l8, r26, i0);

     label14:
        return 1;

     label15:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error snapshotting/restoring user data: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageManager", $r18);

        return 0;

     label16:
        return 0;

     label17:
        $r20 := @caughtexception;

        r24 = $r20;

        goto label19;

     label18:
        $r13 := @caughtexception;

        r24 = $r13;

     label19:
        exitmonitor r3;

     label20:
        throw r24;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    private void postPreferredActivityChangedBroadcast(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm._$$Lambda$PackageManagerService$mozSqBaYzz4jQjwZjKIapdRXflc $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r1 = new com.android.server.pm._$$Lambda$PackageManagerService$mozSqBaYzz4jQjwZjKIapdRXflc;

        specialinvoke $r1.<com.android.server.pm._$$Lambda$PackageManagerService$mozSqBaYzz4jQjwZjKIapdRXflc: void <init>(int)>(i0);

        virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    private void prepareAppDataAfterInstallLIF(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        android.os.UserManagerInternal r2;
        android.os.storage.StorageManagerInternal r3;
        java.util.Iterator r4;
        com.android.server.pm.Settings $r5, $r9;
        android.util.ArrayMap $r6;
        java.lang.String $r7, $r15;
        java.lang.Object $r8, $r14, r18;
        com.android.server.pm.PackageManagerService$Injector $r10, $r11;
        com.android.server.pm.UserManagerService $r12;
        java.util.List $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable $r16;
        com.android.server.pm.parsing.pkg.AndroidPackage r17;
        android.content.pm.UserInfo r19;
        byte b8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r17 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r18 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r18;

     label01:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = interfaceinvoke r17.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r7);

        r1 = (com.android.server.pm.PackageSetting) $r8;

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r9.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r1);

        exitmonitor r18;

     label02:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r2 = virtualinvoke $r10.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r3 = virtualinvoke $r11.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManagerInternal getStorageManagerInternal()>();

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r13 = virtualinvoke $r12.<com.android.server.pm.UserManagerService: java.util.List getUsers(boolean)>(0);

        r4 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label07;

        $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (android.content.pm.UserInfo) $r14;

        $i0 = r19.<android.content.pm.UserInfo: int id>;

        $z0 = virtualinvoke r2.<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>($i0);

        if $z0 == 0 goto label04;

        b8 = 3;

        goto label05;

     label04:
        $i1 = r19.<android.content.pm.UserInfo: int id>;

        $z1 = virtualinvoke r2.<android.os.UserManagerInternal: boolean isUserRunning(int)>($i1);

        if $z1 == 0 goto label03;

        b8 = 1;

     label05:
        $i2 = r19.<android.content.pm.UserInfo: int id>;

        $z2 = virtualinvoke r1.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>($i2);

        if $z2 == 0 goto label06;

        $i3 = r19.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r17, $i3, b8);

        $i4 = r19.<android.content.pm.UserInfo: int id>;

        $z3 = virtualinvoke r2.<android.os.UserManagerInternal: boolean isUserUnlockingOrUnlocked(int)>($i4);

        if $z3 == 0 goto label06;

        $i5 = r19.<android.content.pm.UserInfo: int id>;

        $i6 = interfaceinvoke r17.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $i7 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i6);

        i9 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i5, $i7);

        $r15 = interfaceinvoke r17.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r3.<android.os.storage.StorageManagerInternal: void prepareAppDataAfterInstall(java.lang.String,int)>($r15, i9);

     label06:
        goto label03;

     label07:
        return;

     label08:
        $r16 := @caughtexception;

     label09:
        exitmonitor r18;

     label10:
        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void prepareAppDataAndMigrateLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, i1;
        boolean z0, $z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i0, i1);

        if z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean maybeMigrateAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r1, i0);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i0, i1);

     label1:
        return;
    }

    private void prepareAppDataContentsLIF(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageSetting r2;
        int i0, i1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r1 != null goto label1;

        $r3 = new java.lang.Throwable;

        specialinvoke $r3.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package was null!", $r3);

        return;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataContentsLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int,int)>(r1, r2, i0, i1);

        return;
    }

    private void prepareAppDataContentsLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1, r2, $r10, r13, r14;
        boolean $z0;
        com.android.server.pm.Installer $r3;
        com.android.server.pm.Installer$InstallerException $r4;
        java.lang.StringBuilder $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r11;
        com.android.server.pm.PackageSetting r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r12 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 = interfaceinvoke r11.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        r2 = interfaceinvoke r11.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i2 = i1 & 2;

        if $i2 == 0 goto label4;

        r13 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r11, r12);

        if r13 == null goto label4;

        $z0 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitAbi(java.lang.String)>(r13);

        if $z0 != 0 goto label4;

        r14 = interfaceinvoke r11.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getNativeLibraryDir()>();

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r3.<com.android.server.pm.Installer: void linkNativeLibraryDirectory(java.lang.String,java.lang.String,java.lang.String,int)>(r1, r2, r14, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to link native for ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r10);

     label4:
        return;

        catch com.android.server.pm.Installer$InstallerException from label1 to label2 with label3;
    }

    private void prepareAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        int i0, i1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package was null!", $r2);

        return;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r1, i0, i1);

        return;
    }

    private void prepareAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, i7, i9, $i11;
        com.android.server.pm.PackageSetting r1;
        java.lang.String r2, $r6, $r11, $r22, $r28, r33, r34, r36, r37;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.lang.Object $r7, r32, r45;
        java.lang.StringBuilder $r9, $r17, $r23;
        byte $b4;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r13, $r30;
        com.android.server.pm.Installer$InstallerException $r14, $r15, $r16, $r29, r39;
        com.android.server.pm.parsing.pkg.AndroidPackage r31;
        long l6, l8, l10;
        com.android.server.pm.Installer r38, r40;
        com.android.server.pm.dex.ArtManagerService $r44;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r31 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r32 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r32;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r7 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r6);

        r1 = (com.android.server.pm.PackageSetting) $r7;

        exitmonitor r32;

     label02:
        r33 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getVolumeUuid()>();

        r2 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i3 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        r34 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r31, r1);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r34);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r11 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSeInfoUser()>();

        if $r11 == null goto label03;

        r36 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSeInfoUser()>();

        goto label04;

     label03:
        r36 = "";

     label04:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        r37 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        l6 = -1L;

     label05:
        r38 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        i7 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

     label06:
        l8 = virtualinvoke r38.<com.android.server.pm.Installer: long createAppData(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>(r33, r2, i0, i1, i2, r37, i7);

     label07:
        l6 = l8;

        goto label21;

     label08:
        $r16 := @caughtexception;

        r39 = $r16;

        goto label10;

     label09:
        $r29 := @caughtexception;

        r39 = $r29;

     label10:
        $z1 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 == 0 goto label20;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create app data for ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but trying to recover: ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r28);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppDataLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r31, i0, i1);

     label11:
        r40 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        i9 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

     label12:
        l10 = virtualinvoke r40.<com.android.server.pm.Installer: long createAppData(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>(r33, r2, i0, i1, i2, r37, i9);

     label13:
        l6 = l10;

     label14:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(3, "Recovery succeeded!");

     label15:
        l6 = l10;

        goto label19;

     label16:
        $r14 := @caughtexception;

        goto label18;

     label17:
        $r15 := @caughtexception;

     label18:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(3, "Recovery failed!");

     label19:
        goto label21;

     label20:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create app data for ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r39);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r22);

        l6 = -1L;

     label21:
        $z2 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        if $z2 != 0 goto label22;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mFirstBoot>;

        if $z0 != 0 goto label22;

        if i0 == 0 goto label23;

     label22:
        $r44 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService>;

        virtualinvoke $r44.<com.android.server.pm.dex.ArtManagerService: void prepareAppProfiles(com.android.server.pm.parsing.pkg.AndroidPackage,int,boolean)>(r31, i0, 0);

     label23:
        $i11 = i1 & 2;

        if $i11 == 0 goto label30;

        $b4 = l6 cmp -1L;

        if $b4 == 0 goto label30;

        r45 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r45;

        if r1 == null goto label25;

     label24:
        virtualinvoke r1.<com.android.server.pm.PackageSetting: void setCeDataInode(long,int)>(l6, i0);

     label25:
        exitmonitor r45;

     label26:
        goto label30;

     label27:
        $r13 := @caughtexception;

     label28:
        exitmonitor r45;

     label29:
        throw $r13;

     label30:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataContentsLeafLIF(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int,int)>(r31, r1, i0, i1);

        return;

     label31:
        $r30 := @caughtexception;

     label32:
        exitmonitor r32;

     label33:
        throw $r30;

        catch java.lang.Throwable from label01 to label02 with label31;
        catch com.android.server.pm.Installer$InstallerException from label05 to label06 with label09;
        catch com.android.server.pm.Installer$InstallerException from label06 to label07 with label08;
        catch com.android.server.pm.Installer$InstallerException from label11 to label12 with label17;
        catch com.android.server.pm.Installer$InstallerException from label12 to label13 with label16;
        catch com.android.server.pm.Installer$InstallerException from label14 to label15 with label16;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label28 to label29 with label27;
        catch java.lang.Throwable from label32 to label33 with label31;
    }

    private com.android.server.pm.PackageManagerService$PrepareResult preparePackageLI(com.android.server.pm.PackageManagerService$InstallArgs, com.android.server.pm.PackageManagerService$PackageInstalledInfo) throws com.android.server.pm.PackageManagerService$PrepareFailure
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i26, $i28, $i29, $i30, $i32, $i35, $i36, $i37, $i38, $i40, $i42, $i47, i48, i54, i56, i57, i59, i60, i64, $i115, i116, i118, i119, i120, i121, i122, i123, $i124, i125, $i126, i127, i128, i129, i130, i131, i132, i133, i134, i135;
        com.android.server.pm.parsing.pkg.ParsedPackage r1, $r94;
        int[] r2, $r152, $r153, r461, r462;
        boolean z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, z27, z28, z29, z30, z32, z33, z34, z35, z36, z37, z38, z39, z40, z41, z64, z145, z146, z147, z148, z149, z150, $z151, z152, z154, z155, z158, z159, z160, z161, z162, z163, z164, z165, z166, z167, z168;
        java.io.File $r3, r445, r448;
        java.lang.String $r4, $r5, $r24, $r29, $r43, $r45, $r60, $r69, $r70, $r75, $r82, $r85, $r86, $r90, $r93, $r95, $r104, $r107, $r110, $r111, $r113, $r116, $r119, $r122, $r125, $r129, $r130, $r133, $r136, $r139, $r143, $r146, $r149, $r155, $r157, $r160, $r162, $r169, $r172, $r175, $r182, $r188, $r191, $r199, $r202, $r204, $r207, $r210, $r215, $r247, $r269, $r287, r306, r312, r313, r340, r405, r407, r410, r428, r447, r457, $r458, $r459, $r477, $r480, $r482, r498, r500;
        com.android.server.pm.PackageManagerService$MoveInfo $r6, $r16;
        com.android.server.pm.parsing.PackageParser2$Callback $r7;
        android.util.DisplayMetrics $r8;
        java.lang.String[] $r9, $r71, r446;
        android.content.pm.PackageParser$SigningDetails $r10, $r38, $r39, $r78, $r79, $r108, $r109, $r141, $r185, $r193, r307, r308, r327, r345;
        com.android.server.pm.Settings $r12, $r17, $r19, $r33, $r36, $r37, $r91, $r105, $r106, $r161, $r163, $r323;
        android.util.ArrayMap $r13, $r25, $r31, $r34, $r165, $r166, $r183, r401, $r412, r424;
        java.lang.Object $r14, $r32, $r35, $r87, $r92, $r102, $r167, r311, r328, r342, r355, r400, r408, $r413, $r418, $r420, r429, r499;
        java.util.List $r15, $r101, $r164;
        com.android.server.pm.PackageManagerService$PrepareFailure $r18, $r99, $r100, $r131, $r192, $r195, $r196, $r203, $r211, $r216, $r268, $r273, r316, r318, r325, r332, r373, r426, r434, r440, r450, r454, r466, r470, r490, r505, r509, $r515, r520;
        com.android.server.pm.PackageManagerService$PrepareResult $r30;
        com.android.server.pm.UserManagerService $r46, $r151;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r47, $r48, $r49, $r52, r474, $r475, $r476, $r478, r481, r483, r485;
        android.util.SparseArray $r50, $r53, r484, r486;
        java.lang.Integer $r51, $r54;
        android.os.UserHandle $r55, $r61, $r62, $r67, $r88;
        java.lang.StringBuilder $r63, $r173, $r186, $r197, $r205, $r212, $r265, r319, r326, r338, r363, r375, r389, r404, r435, r441, r451, r455, r469, r491, r506, r510;
        byte[] $r72, $r76, r443, r449;
        long $l23, $l24;
        byte $b25, b55;
        com.android.server.pm.pkg.PackageStateUnserialized $r89;
        char $c27, c49, c50, c51, c52, c53, c113, c114, $c117;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r103;
        com.android.server.pm.parsing.pkg.AndroidPackage $r154, r315, $r330, r414, r425, r430, r487;
        java.lang.Throwable $r217, $r218, $r219, $r220, $r221, $r222, $r224, $r225, $r226, $r227, $r228, $r229, $r230, $r231, $r232, $r233, $r236, $r237, $r238, $r239, $r240, $r241, $r242, $r243, $r244, $r248, $r249, $r251, $r252, $r253, $r254, $r255, $r256, $r257, $r258, $r259, $r261, $r262, $r263, $r264, $r270, $r271, $r275, $r276, $r277, $r278, $r279, $r280, $r281, $r283, $r284, $r285, $r288, $r289, $r290, $r291, $r292, $r293, $r294, $r296, $r297, r314, r359, r406, r427, r438, r507, r514, r519;
        android.content.pm.PackageParser$PackageParserException $r223, $r260, $r272, $r282, r309, r518;
        com.android.server.pm.PackageManagerException $r234, $r235, $r250, $r274, $r286, $r295, r331, r411;
        com.android.server.pm.PackageManagerService$InstallArgs r298;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r299, r422, r464, r472, r504;
        com.android.server.pm.parsing.PackageParser2 r303;
        com.android.server.pm.PackageSetting r320, r322, r344, r403, r409, r431, r432, r488, r489;
        android.content.pm.SharedLibraryInfo r321;
        com.android.server.pm.KeySetManagerService r324, r348, r433;
        android.content.pm.parsing.component.ParsedPermission r334;
        com.android.server.pm.permission.BasePermission r336;
        com.android.server.pm.PackageSignatures r357;
        com.android.server.pm.PackageManagerService$Injector $r415;
        com.android.server.pm.PackageAbiHelper r416;
        android.util.Pair r417;
        com.android.server.pm.PackageAbiHelper$Abis $r419;
        com.android.server.pm.PackageAbiHelper$NativeLibraryPaths $r421;
        com.android.server.pm.PackageManagerService$PackageFreezer r423, r437, r465, r468, r471, r473, r497, r503;
        java.security.MessageDigest r444;
        com.android.server.pm.InstallSource $r479;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r298 := @parameter0: com.android.server.pm.PackageManagerService$InstallArgs;

        r299 := @parameter1: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        i48 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: int installFlags>;

        $r3 = new java.io.File;

        $r4 = virtualinvoke r298.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String getCodePath()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        $r5 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String volumeUuid>;

        if $r5 == null goto label001;

        z27 = 1;

        goto label002;

     label001:
        z27 = 0;

     label002:
        $i1 = i48 & 2048;

        if $i1 == 0 goto label003;

        z28 = 1;

        goto label004;

     label003:
        z28 = 0;

     label004:
        $i2 = i48 & 16384;

        if $i2 == 0 goto label005;

        z29 = 1;

        goto label006;

     label005:
        z29 = 0;

     label006:
        $i3 = i48 & 65536;

        if $i3 == 0 goto label007;

        z30 = 1;

        goto label008;

     label007:
        z30 = 0;

     label008:
        c49 = 6;

        $r6 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MoveInfo move>;

        if $r6 == null goto label009;

        c49 = 6 | 512;

     label009:
        c50 = c49;

        $i4 = i48 & 4096;

        if $i4 == 0 goto label010;

        c50 = c49 | 1024;

     label010:
        c51 = c50;

        if z28 == 0 goto label011;

        c51 = c50 | 8192;

     label011:
        c52 = c51;

        if z29 == 0 goto label012;

        c52 = c51 | 16384;

     label012:
        c53 = c52;

        if z30 == 0 goto label013;

        c53 = c52 | 32768;

     label013:
        if z28 == 0 goto label015;

        if z27 != 0 goto label014;

        goto label015;

     label014:
        $r212 = new java.lang.StringBuilder;

        specialinvoke $r212.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible ephemeral install; external=");

        virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z27);

        $r215 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r215);

        $r216 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r216.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int)>(-116);

        throw $r216;

     label015:
        i54 = r0.<com.android.server.pm.PackageManagerService: int mDefParseFlags>;

        if z27 == 0 goto label016;

        b55 = 8;

        goto label017;

     label016:
        b55 = 0;

     label017:
        $i5 = i54 | -2147483648;

        $i6 = $i5 | 64;

        i0 = $i6 | b55;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "parsePackage");

     label018:
        r303 = new com.android.server.pm.parsing.PackageParser2;

        $r9 = r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses>;

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback>;

        specialinvoke r303.<com.android.server.pm.parsing.PackageParser2: void <init>(java.lang.String[],boolean,android.util.DisplayMetrics,java.io.File,com.android.server.pm.parsing.PackageParser2$Callback)>($r9, 0, $r8, null, $r7);

     label019:
        r1 = virtualinvoke r303.<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int,boolean)>($r3, i0, 0);

        staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: void validatePackageDexMetadata(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label020:
        virtualinvoke r303.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label021:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        if z28 == 0 goto label024;

        $i42 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: int getTargetSdkVersion()>();

        if $i42 < 26 goto label023;

        $r204 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getSharedUserId()>();

        if $r204 != null goto label022;

        goto label024;

     label022:
        $r205 = new java.lang.StringBuilder;

        specialinvoke $r205.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instant app package ");

        $r207 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r207);

        virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" may not declare sharedUserId.");

        $r210 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r210);

        $r211 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r211.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-116, "Instant app package may not declare a sharedUserId");

        throw $r211;

     label023:
        $r197 = new java.lang.StringBuilder;

        specialinvoke $r197.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instant app package ");

        $r199 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r199);

        virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not target at least O");

        $r202 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r202);

        $r203 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r203.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-116, "Instant app package must target at least O");

        throw $r203;

     label024:
        $z5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isStaticSharedLibrary()>();

        if $z5 == 0 goto label026;

        staticinvoke <com.android.server.pm.PackageManagerService: void renameStaticSharedLibraryPackage(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        if z27 != 0 goto label025;

        goto label026;

     label025:
        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Static shared libs can only be installed on internal storage.");

        $r196 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r196.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-19, "Packages declaring static-shared libs cannot be updated");

        throw $r196;

     label026:
        r306 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name> = r306;

        $z6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isTestOnly()>();

        if $z6 == 0 goto label028;

        $i40 = i48 & 4;

        if $i40 == 0 goto label027;

        goto label028;

     label027:
        $r195 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r195.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-15, "installPackageLI");

        throw $r195;

     label028:
        r307 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.PackageParser$SigningDetails signingDetails>;

        r308 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

     label029:
        if r307 == r308 goto label033;

     label030:
        $r193 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.PackageParser$SigningDetails signingDetails>;

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSigningDetails(android.content.pm.PackageParser$SigningDetails)>($r193);

     label031:
        goto label034;

     label032:
        $r282 := @caughtexception;

        r309 = $r282;

        goto label532;

     label033:
        $r10 = staticinvoke <android.content.pm.parsing.ParsingPackageUtils: android.content.pm.PackageParser$SigningDetails getSigningDetails(android.content.pm.parsing.ParsingPackageRead,boolean)>(r1, 0);

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSigningDetails(android.content.pm.PackageParser$SigningDetails)>($r10);

     label034:
        if z28 == 0 goto label036;

        $r185 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $i38 = $r185.<android.content.pm.PackageParser$SigningDetails: int signatureSchemeVersion>;

        if $i38 < 2 goto label035;

        goto label036;

     label035:
        $r186 = new java.lang.StringBuilder;

        specialinvoke $r186.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Instant app package ");

        $r188 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r188);

        virtualinvoke $r186.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not signed with at least APK Signature Scheme v2");

        $r191 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r191);

        $r192 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r192.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-116, "Instant app package must be signed with APK Signature Scheme v2 or greater");

        throw $r192;

     label036:
        z32 = 0;

        r311 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r311;

        $i7 = i48 & 2;

        if $i7 == 0 goto label061;

     label037:
        $r163 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r312 = virtualinvoke $r163.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>(r306);

     label038:
        $r164 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getOriginalPackages()>();

        z33 = interfaceinvoke $r164.<java.util.List: boolean contains(java.lang.Object)>(r312);

     label039:
        if z33 == 0 goto label043;

     label040:
        $r183 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z26 = virtualinvoke $r183.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r312);

        if $z26 == 0 goto label043;

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPackageName(java.lang.String)>(r312);

        r313 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

     label041:
        z32 = 1;

        goto label045;

     label042:
        $r277 := @caughtexception;

        r314 = $r277;

        goto label528;

     label043:
        $r165 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        z34 = virtualinvoke $r165.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r306);

     label044:
        r313 = r306;

        if z34 == 0 goto label045;

        z32 = 1;

        r313 = r306;

     label045:
        if z32 == 0 goto label058;

     label046:
        $r166 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r167 = virtualinvoke $r166.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r313);

        r315 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r167;

        i56 = interfaceinvoke r315.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        i57 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: int getTargetSdkVersion()>();

     label047:
        if i56 <= 22 goto label053;

        if i57 <= 22 goto label048;

        goto label053;

     label048:
        r316 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label049:
        $r173 = new java.lang.StringBuilder;

        specialinvoke $r173.<java.lang.StringBuilder: void <init>()>();

     label050:
        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r175 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r175);

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new target SDK ");

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i57);

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" doesn\'t support runtime permissions but the old target SDK ");

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i56);

        virtualinvoke $r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does.");

        $r182 = virtualinvoke $r173.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r316.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-26, $r182);

        throw r316;

     label051:
        $r289 := @caughtexception;

        r314 = $r289;

        goto label528;

     label052:
        $r280 := @caughtexception;

        r314 = $r280;

        goto label528;

     label053:
        $z25 = interfaceinvoke r315.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPersistent()>();

        if $z25 == 0 goto label058;

     label054:
        $i37 = i48 & 2097152;

        if $i37 == 0 goto label055;

        goto label058;

     label055:
        r318 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        r319 = new java.lang.StringBuilder;

        specialinvoke r319.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r319.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r169 = interfaceinvoke r315.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r319.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169);

        virtualinvoke r319.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a persistent app. Persistent apps are not updateable.");

        $r172 = virtualinvoke r319.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r318.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-2, $r172);

        throw r318;

     label056:
        $r217 := @caughtexception;

        r314 = $r217;

        goto label528;

     label057:
        $r285 := @caughtexception;

        r314 = $r285;

        goto label528;

     label058:
        r306 = r313;

        goto label062;

     label059:
        $r243 := @caughtexception;

        r314 = $r243;

        goto label528;

     label060:
        $r233 := @caughtexception;

        r314 = $r233;

        goto label528;

     label061:
        z32 = 0;

     label062:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r306);

        r320 = (com.android.server.pm.PackageSetting) $r14;

     label063:
        if r320 == null goto label103;

     label064:
        z35 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isStaticSharedLibrary()>();

     label065:
        if z35 == 0 goto label072;

     label066:
        r321 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getLatestSharedLibraVersionLPr(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label067:
        if r321 == null goto label070;

     label068:
        $r161 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r162 = virtualinvoke r321.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r322 = virtualinvoke $r161.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r162);

     label069:
        goto label073;

     label070:
        goto label072;

     label071:
        $r237 := @caughtexception;

        r314 = $r237;

        goto label528;

     label072:
        r322 = r320;

     label073:
        $r323 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r324 = $r323.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        z36 = virtualinvoke r324.<com.android.server.pm.KeySetManagerService: boolean shouldCheckUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,int)>(r322, c53);

     label074:
        if z36 == 0 goto label083;

     label075:
        $z24 = virtualinvoke r324.<com.android.server.pm.KeySetManagerService: boolean checkUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,com.android.server.pm.parsing.pkg.AndroidPackage)>(r322, r1);

        if $z24 == 0 goto label077;

     label076:
        goto label091;

     label077:
        r325 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label078:
        r326 = new java.lang.StringBuilder;

        specialinvoke r326.<java.lang.StringBuilder: void <init>()>();

     label079:
        virtualinvoke r326.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r157 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke r326.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r157);

        virtualinvoke r326.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upgrade keys do not match the previously installed version");

        $r160 = virtualinvoke r326.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r325.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-7, $r160);

        throw r325;

     label080:
        $r262 := @caughtexception;

        r314 = $r262;

        goto label528;

     label081:
        $r288 := @caughtexception;

        r314 = $r288;

        goto label528;

     label082:
        $r236 := @caughtexception;

        r314 = $r236;

        goto label528;

     label083:
        z37 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCompatSignatureUpdateNeeded(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        z38 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isRecoverSignatureUpdateNeeded(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label084:
        r327 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

     label085:
        $z23 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean verifySignatures(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,android.content.pm.PackageParser$SigningDetails,boolean,boolean)>(r322, null, r327, z37, z38);

        if $z23 == 0 goto label091;

        r328 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r328;

     label086:
        $r155 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke r324.<com.android.server.pm.KeySetManagerService: void removeAppKeySetDataLPw(java.lang.String)>($r155);

        exitmonitor r328;

     label087:
        goto label091;

     label088:
        $r249 := @caughtexception;

     label089:
        exitmonitor r328;

     label090:
        throw $r249;

     label091:
        $r330 = r320.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r330 == null goto label093;

        $r154 = r320.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        z39 = interfaceinvoke $r154.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

     label092:
        goto label094;

     label093:
        z39 = 0;

     label094:
        $r151 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r152 = virtualinvoke $r151.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r153 = virtualinvoke r320.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r152, 1);

        r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers> = $r153;

     label095:
        z40 = z39;

        goto label104;

     label096:
        $r281 := @caughtexception;

        r314 = $r281;

        goto label528;

     label097:
        $r295 := @caughtexception;

        r331 = $r295;

        goto label100;

     label098:
        $r276 := @caughtexception;

        r314 = $r276;

        goto label528;

     label099:
        $r286 := @caughtexception;

        r331 = $r286;

     label100:
        r332 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        $i47 = r331.<com.android.server.pm.PackageManagerException: int error>;

        $r287 = virtualinvoke r331.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        specialinvoke r332.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>($i47, $r287);

        throw r332;

     label101:
        $r239 := @caughtexception;

        r314 = $r239;

        goto label528;

     label102:
        $r227 := @caughtexception;

        r314 = $r227;

        goto label528;

     label103:
        z40 = 0;

     label104:
        z41 = z32;

     label105:
        $r15 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getPermissions()>();

        i59 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r15);

     label106:
        i60 = i59 - 1;

     label107:
        if i60 < 0 goto label185;

     label108:
        $r101 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getPermissions()>();

        $r102 = interfaceinvoke $r101.<java.util.List: java.lang.Object get(int)>(i60);

        r334 = (android.content.pm.parsing.component.ParsedPermission) $r102;

     label109:
        $r103 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r104 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        r336 = virtualinvoke $r103.<com.android.server.pm.permission.PermissionManagerServiceInternal: com.android.server.pm.permission.BasePermission getPermissionTEMP(java.lang.String)>($r104);

     label110:
        i64 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: int getProtectionLevel()>();

     label111:
        $i28 = i64 & 4096;

        if $i28 == 0 goto label115;

        if z40 != 0 goto label115;

     label112:
        r338 = new java.lang.StringBuilder;

        specialinvoke r338.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-System package ");

        $r143 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r143);

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempting to delcare ephemeral permission ");

        $r146 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r146);

        virtualinvoke r338.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; Removing ephemeral.");

        $r149 = virtualinvoke r338.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r149);

        $i35 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: int getProtectionLevel()>();

        $i36 = $i35 & -4097;

        virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermission setProtectionLevel(int)>($i36);

     label113:
        goto label115;

     label114:
        $r283 := @caughtexception;

        r314 = $r283;

        goto label528;

     label115:
        if r336 == null goto label183;

     label116:
        r340 = virtualinvoke r336.<com.android.server.pm.permission.BasePermission: java.lang.String getSourcePackageName()>();

     label117:
        r342 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

     label118:
        entermonitor r342;

     label119:
        $r105 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r344 = virtualinvoke $r105.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r340);

        exitmonitor r342;

     label120:
        if r344 != null goto label123;

     label121:
        r345 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

     label122:
        goto label124;

     label123:
        r345 = virtualinvoke r344.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

     label124:
        $r106 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r348 = $r106.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

     label125:
        $r107 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z16 = virtualinvoke r340.<java.lang.String: boolean equals(java.lang.Object)>($r107);

        if $z16 == 0 goto label129;

     label126:
        $z22 = virtualinvoke r348.<com.android.server.pm.KeySetManagerService: boolean shouldCheckUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,int)>(r344, c53);

        if $z22 == 0 goto label129;

     label127:
        z64 = virtualinvoke r348.<com.android.server.pm.KeySetManagerService: boolean checkUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,com.android.server.pm.parsing.pkg.AndroidPackage)>(r344, r1);

     label128:
        goto label143;

     label129:
        $r108 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z17 = virtualinvoke r345.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r108, 4);

        if $z17 == 0 goto label131;

     label130:
        z64 = 1;

        goto label143;

     label131:
        $r109 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z18 = virtualinvoke $r109.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>(r345, 4);

        if $z18 == 0 goto label142;

     label132:
        r355 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

     label133:
        entermonitor r355;

     label134:
        r357 = r344.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

     label135:
        $r141 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        r357.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r141;

     label136:
        exitmonitor r355;

     label137:
        z64 = 1;

        goto label143;

     label138:
        $r252 := @caughtexception;

        r359 = $r252;

        goto label140;

     label139:
        $r231 := @caughtexception;

        r359 = $r231;

     label140:
        exitmonitor r355;

     label141:
        throw r359;

     label142:
        z64 = 0;

     label143:
        if z64 != 0 goto label166;

     label144:
        $z21 = virtualinvoke r340.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z21 == 0 goto label155;

     label145:
        r363 = new java.lang.StringBuilder;

     label146:
        specialinvoke r363.<java.lang.StringBuilder: void <init>()>();

     label147:
        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

     label148:
        $r133 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r133);

     label149:
        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempting to redeclare system permission ");

     label150:
        $r136 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136);

     label151:
        virtualinvoke r363.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring new declaration");

     label152:
        $r139 = virtualinvoke r363.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r139);

     label153:
        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage removePermission(int)>(i60);

     label154:
        goto label183;

     label155:
        r373 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label156:
        r375 = new java.lang.StringBuilder;

     label157:
        specialinvoke r375.<java.lang.StringBuilder: void <init>()>();

     label158:
        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

     label159:
        $r122 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r122);

     label160:
        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attempting to redeclare permission ");

     label161:
        $r125 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125);

     label162:
        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already owned by ");

     label163:
        virtualinvoke r375.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r340);

     label164:
        $r129 = virtualinvoke r375.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r373.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-112, $r129);

     label165:
        $r130 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        $r131 = virtualinvoke r373.<com.android.server.pm.PackageManagerService$PrepareFailure: com.android.server.pm.PackageManagerService$PrepareFailure conflictsWithExistingPermission(java.lang.String,java.lang.String)>($r130, r340);

        throw $r131;

     label166:
        $r110 = "android";

        $r111 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z19 = virtualinvoke $r110.<java.lang.String: boolean equals(java.lang.Object)>($r111);

        if $z19 != 0 goto label183;

     label167:
        $i29 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: int getProtectionLevel()>();

        $i30 = $i29 & 15;

        if $i30 != 1 goto label183;

     label168:
        if r336 == null goto label183;

     label169:
        $z20 = virtualinvoke r336.<com.android.server.pm.permission.BasePermission: boolean isRuntime()>();

        if $z20 != 0 goto label183;

     label170:
        r389 = new java.lang.StringBuilder;

     label171:
        specialinvoke r389.<java.lang.StringBuilder: void <init>()>();

     label172:
        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

     label173:
        $r113 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

     label174:
        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to change a non-runtime permission ");

     label175:
        $r116 = virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: java.lang.String getName()>();

        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r116);

     label176:
        virtualinvoke r389.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to runtime; keeping old protection level");

     label177:
        $r119 = virtualinvoke r389.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r119);

     label178:
        $i32 = virtualinvoke r336.<com.android.server.pm.permission.BasePermission: int getProtectionLevel()>();

        virtualinvoke r334.<android.content.pm.parsing.component.ParsedPermission: android.content.pm.parsing.component.ParsedPermission setProtectionLevel(int)>($i32);

     label179:
        goto label183;

     label180:
        $r261 := @caughtexception;

     label181:
        exitmonitor r342;

     label182:
        throw $r261;

     label183:
        i60 = i60 + -1;

        goto label107;

     label184:
        $r232 := @caughtexception;

        r314 = $r232;

        goto label528;

     label185:
        exitmonitor r311;

     label186:
        if z40 == 0 goto label189;

        if z27 != 0 goto label188;

        if z28 != 0 goto label187;

        goto label189;

     label187:
        $r100 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r100.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-116, "Cannot update a system app with an instant app");

        throw $r100;

     label188:
        $r99 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r99.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-19, "Cannot install updates to system apps on sdcard");

        throw $r99;

     label189:
        $r16 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MoveInfo move>;

        if $r16 == null goto label205;

        $c27 = c53 | 1;

        c113 = $c27 | 256;

        r400 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r400;

     label190:
        $r91 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r401 = $r91.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

     label191:
        $r92 = virtualinvoke r401.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r306);

        r403 = (com.android.server.pm.PackageSetting) $r92;

     label192:
        if r403 != null goto label196;

     label193:
        r404 = new java.lang.StringBuilder;

        specialinvoke r404.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r404.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing settings for moved package ");

        virtualinvoke r404.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r306);

        r405 = virtualinvoke r404.<java.lang.StringBuilder: java.lang.String toString()>();

     label194:
        virtualinvoke r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setError(int,java.lang.String)>(-110, r405);

     label195:
        goto label196;

     label196:
        $r93 = r403.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r94 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrimaryCpuAbi(java.lang.String)>($r93);

        $r95 = r403.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        interfaceinvoke $r94.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSecondaryCpuAbi(java.lang.String)>($r95);

     label197:
        exitmonitor r400;

     label198:
        goto label233;

     label199:
        $r275 := @caughtexception;

        r406 = $r275;

        goto label204;

     label200:
        $r224 := @caughtexception;

        r406 = $r224;

     label201:
        exitmonitor r400;

     label202:
        throw r406;

     label203:
        $r226 := @caughtexception;

        r406 = $r226;

     label204:
        goto label201;

     label205:
        r407 = r306;

        c114 = c53 | 1;

     label206:
        $z7 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        if $z7 != 0 goto label208;

     label207:
        z145 = 1;

        goto label209;

     label208:
        z145 = 0;

     label209:
        r408 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r408;

     label210:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r409 = virtualinvoke $r17.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r407);

        exitmonitor r408;

     label211:
        if r409 == null goto label217;

     label212:
        $r90 = r409.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

        $z15 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r90);

        if $z15 == 0 goto label214;

     label213:
        goto label217;

     label214:
        r410 = r409.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

     label215:
        goto label218;

     label216:
        $r274 := @caughtexception;

        r411 = $r274;

        goto label523;

     label217:
        r410 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String abiOverride>;

     label218:
        if r409 == null goto label221;

     label219:
        $r89 = virtualinvoke r409.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z146 = virtualinvoke $r89.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

     label220:
        if z146 == 0 goto label221;

        z147 = 1;

        goto label222;

     label221:
        z147 = 0;

     label222:
        $r412 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r413 = virtualinvoke $r412.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r407);

        r414 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r413;

     label223:
        if r414 == null goto label226;

     label224:
        z148 = interfaceinvoke r414.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

     label225:
        if z148 == 0 goto label226;

        z149 = 1;

        goto label227;

     label226:
        z149 = 0;

     label227:
        $r415 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r416 = virtualinvoke $r415.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.PackageAbiHelper getAbiHelper()>();

     label228:
        if z147 != 0 goto label230;

        if z149 == 0 goto label229;

        goto label230;

     label229:
        z150 = 0;

        goto label231;

     label230:
        z150 = 1;

     label231:
        r417 = interfaceinvoke r416.<com.android.server.pm.PackageAbiHelper: android.util.Pair derivePackageAbi(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,boolean)>(r1, z150, r410, z145);

        $r418 = r417.<android.util.Pair: java.lang.Object first>;

        $r419 = (com.android.server.pm.PackageAbiHelper$Abis) $r418;

        virtualinvoke $r419.<com.android.server.pm.PackageAbiHelper$Abis: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        $r420 = r417.<android.util.Pair: java.lang.Object second>;

        $r421 = (com.android.server.pm.PackageAbiHelper$NativeLibraryPaths) $r420;

        virtualinvoke $r421.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

     label232:
        c113 = c114;

     label233:
        r422 = r299;

        $i115 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        $z151 = virtualinvoke r298.<com.android.server.pm.PackageManagerService$InstallArgs: boolean doRename(int,com.android.server.pm.parsing.pkg.ParsedPackage)>($i115, r1);

        if $z151 == 0 goto label515;

     label234:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void setUpFsVerityIfPossible(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label235:
        if z28 != 0 goto label236;

        $r88 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $i26 = virtualinvoke $r88.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void startIntentFilterVerifications(int,boolean,com.android.server.pm.parsing.pkg.AndroidPackage)>($i26, z41, r1);

        goto label236;

     label236:
        z152 = z41;

        r423 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForInstall(java.lang.String,int,java.lang.String)>(r306, i48, "installPackageLI");

        i116 = c113;

        if z41 == 0 goto label460;

     label237:
        z154 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isStaticSharedLibrary()>();

     label238:
        if z154 == 0 goto label250;

     label239:
        r424 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

     label240:
        $r86 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r87 = virtualinvoke r424.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r86);

        r425 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r87;

     label241:
        if r425 == null goto label247;

     label242:
        $l23 = interfaceinvoke r425.<com.android.server.pm.parsing.pkg.AndroidPackage: long getLongVersionCode()>();

        $l24 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        $b25 = $l23 cmp $l24;

        if $b25 != 0 goto label244;

     label243:
        goto label250;

     label244:
        r426 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label245:
        specialinvoke r426.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-5, "Packages declaring static-shared libs cannot be updated");

        throw r426;

     label246:
        $r256 := @caughtexception;

        r427 = $r256;

        z155 = 1;

        goto label512;

     label247:
        goto label250;

     label248:
        $r297 := @caughtexception;

        r427 = $r297;

        z155 = 1;

        goto label512;

     label249:
        $r255 := @caughtexception;

        r427 = $r255;

        z155 = 1;

        goto label512;

     label250:
        $c117 = c113 & 8192;

        if $c117 == 0 goto label251;

        z158 = 1;

        goto label252;

     label251:
        z158 = 0;

     label252:
        r428 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r429 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r429;

     label253:
        $r31 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r32 = virtualinvoke $r31.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r428);

        r430 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r32;

     label254:
        $r33 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r34 = $r33.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r35 = virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r428);

        r431 = (com.android.server.pm.PackageSetting) $r35;

     label255:
        $r36 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r432 = virtualinvoke $r36.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(com.android.server.pm.PackageSetting)>(r431);

        $r37 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r433 = $r37.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        z159 = virtualinvoke r433.<com.android.server.pm.KeySetManagerService: boolean shouldCheckUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,int)>(r431, c113);

     label256:
        if z159 == 0 goto label264;

     label257:
        $z14 = virtualinvoke r433.<com.android.server.pm.KeySetManagerService: boolean checkUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,com.android.server.pm.parsing.pkg.AndroidPackage)>(r431, r1);

        if $z14 == 0 goto label259;

     label258:
        goto label270;

     label259:
        r434 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label260:
        r435 = new java.lang.StringBuilder;

        specialinvoke r435.<java.lang.StringBuilder: void <init>()>();

     label261:
        virtualinvoke r435.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package not signed by keys specified by upgrade-keysets: ");

        virtualinvoke r435.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r428);

        $r85 = virtualinvoke r435.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r434.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-7, $r85);

        throw r434;

     label262:
        $r248 := @caughtexception;

        r437 = r423;

        r438 = $r248;

        z160 = 1;

        goto label452;

     label263:
        $r291 := @caughtexception;

        r437 = r423;

        r438 = $r291;

        z160 = 1;

        goto label452;

     label264:
        $r38 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r39 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        z161 = virtualinvoke $r38.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r39, 1);

     label265:
        if z161 != 0 goto label270;

     label266:
        $r78 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r79 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z13 = virtualinvoke $r78.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r79, 8);

        if $z13 == 0 goto label268;

     label267:
        goto label270;

     label268:
        r440 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        r441 = new java.lang.StringBuilder;

        specialinvoke r441.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r441.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package has a different signature: ");

        virtualinvoke r441.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r428);

        $r82 = virtualinvoke r441.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r440.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-7, $r82);

        throw r440;

     label269:
        $r230 := @caughtexception;

        r437 = r423;

        r438 = $r230;

        z160 = 1;

        goto label452;

     label270:
        r443 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: byte[] getRestrictUpdateHash()>();

     label271:
        if r443 == null goto label287;

     label272:
        z162 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

     label273:
        if z162 == 0 goto label287;

     label274:
        r444 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-512");

        r445 = new java.io.File;

        $r70 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getBaseCodePath()>();

        specialinvoke r445.<java.io.File: void <init>(java.lang.String)>($r70);

        staticinvoke <com.android.server.pm.PackageManagerService: void updateDigest(java.security.MessageDigest,java.io.File)>(r444, r445);

        $r71 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String[] getSplitCodePaths()>();

        $z11 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r71);

        if $z11 != 0 goto label279;

        r446 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String[] getSplitCodePaths()>();

        i118 = lengthof r446;

     label275:
        i119 = 0;

     label276:
        if i119 >= i118 goto label279;

        r447 = r446[i119];

     label277:
        r448 = new java.io.File;

        specialinvoke r448.<java.io.File: void <init>(java.lang.String)>(r447);

        staticinvoke <com.android.server.pm.PackageManagerService: void updateDigest(java.security.MessageDigest,java.io.File)>(r444, r448);

     label278:
        i119 = i119 + 1;

        goto label276;

     label279:
        r449 = virtualinvoke r444.<java.security.MessageDigest: byte[] digest()>();

     label280:
        $r72 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: byte[] getRestrictUpdateHash()>();

        $z12 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r72, r449);

        if $z12 == 0 goto label282;

        $r76 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: byte[] getRestrictUpdateHash()>();

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setRestrictUpdateHash(byte[])>($r76);

     label281:
        goto label287;

     label282:
        r450 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        r451 = new java.lang.StringBuilder;

        specialinvoke r451.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r451.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package fails restrict-update check: ");

        virtualinvoke r451.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r428);

        $r75 = virtualinvoke r451.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r450.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-2, $r75);

        throw r450;

     label283:
        $r244 := @caughtexception;

        goto label285;

     label284:
        $r290 := @caughtexception;

     label285:
        r454 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        r455 = new java.lang.StringBuilder;

        specialinvoke r455.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r455.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not compute hash: ");

        virtualinvoke r455.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r428);

        $r247 = virtualinvoke r455.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r454.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-2, $r247);

        throw r454;

     label286:
        $r220 := @caughtexception;

        r437 = r423;

        r438 = $r220;

        z160 = 1;

        goto label452;

     label287:
        r457 = null;

     label288:
        $r458 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        $r459 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getSharedUserId()>();

        z163 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r458, $r459);

     label289:
        if z163 != 0 goto label293;

     label290:
        r457 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

     label291:
        goto label293;

     label292:
        $r259 := @caughtexception;

        r437 = r423;

        r438 = $r259;

        z160 = 1;

        goto label452;

     label293:
        if r457 != null goto label429;

     label294:
        $r46 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r2 = virtualinvoke $r46.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        r461 = virtualinvoke r431.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>(r2, 1);

        r462 = virtualinvoke r431.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>(r2, 0);

     label295:
        if z158 == 0 goto label344;

     label296:
        $r55 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        if $r55 == null goto label318;

        $r61 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        i120 = virtualinvoke $r61.<android.os.UserHandle: int getIdentifier()>();

     label297:
        if i120 != -1 goto label298;

        goto label318;

     label298:
        $r62 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $i20 = virtualinvoke $r62.<android.os.UserHandle: int getIdentifier()>();

        $z10 = virtualinvoke r431.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>($i20);

        if $z10 == 0 goto label300;

     label299:
        goto label344;

     label300:
        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

     label301:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label302:
        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t replace full app with instant app: ");

     label303:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label304:
        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r428);

     label305:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label306:
        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user: ");

     label307:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label308:
        $r67 = r298.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $i21 = virtualinvoke $r67.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

     label309:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label310:
        $r69 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r69);

     label311:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label312:
        r466 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label313:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label314:
        specialinvoke r466.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int)>(-116);

     label315:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label316:
        throw r466;

     label317:
        $r251 := @caughtexception;

        r437 = r423;

        r438 = $r251;

        z160 = 1;

        goto label452;

     label318:
        r468 = r423;

        r464 = r299;

        z164 = 1;

        r465 = r423;

     label319:
        i121 = lengthof r2;

     label320:
        i122 = 0;

     label321:
        if i122 >= i121 goto label344;

        i123 = r2[i122];

        r464 = r299;

        z164 = 1;

        r465 = r468;

     label322:
        $z9 = virtualinvoke r431.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i123);

        if $z9 == 0 goto label324;

     label323:
        i122 = i122 + 1;

        goto label321;

     label324:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label325:
        r469 = new java.lang.StringBuilder;

     label326:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label327:
        specialinvoke r469.<java.lang.StringBuilder: void <init>()>();

     label328:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label329:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t replace full app with instant app: ");

     label330:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label331:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r428);

     label332:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label333:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user: ");

     label334:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label335:
        virtualinvoke r469.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i123);

     label336:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label337:
        $r60 = virtualinvoke r469.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r60);

     label338:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label339:
        r470 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label340:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label341:
        specialinvoke r470.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int)>(-116);

     label342:
        r464 = r299;

        z164 = 1;

        r465 = r468;

     label343:
        throw r470;

     label344:
        r471 = r423;

        r464 = r299;

        z164 = 1;

        r465 = r423;

     label345:
        exitmonitor r429;

     label346:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label347:
        r474 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

     label348:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label349:
        specialinvoke r474.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageSender)>(r0);

     label350:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label351:
        r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo> = r474;

     label352:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label353:
        $r475 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $i124 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        $r475.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid> = $i124;

     label354:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label355:
        $r476 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r477 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r476.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = $r477;

     label356:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label357:
        $r478 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r479 = r431.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        $r480 = $r479.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $r478.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String installerPackageName> = $r480;

     label358:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label359:
        r481 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

     label360:
        r472 = r299;

        z160 = 1;

        r473 = r423;

     label361:
        $r482 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getStaticSharedLibName()>();

        if $r482 == null goto label363;

     label362:
        z165 = 1;

        goto label364;

     label363:
        z165 = 0;

     label364:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label365:
        r481.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isStaticSharedLib> = z165;

     label366:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label367:
        $r47 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r47.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isUpdate> = 1;

     label368:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label369:
        $r48 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r48.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] origUsers> = r461;

     label370:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label371:
        r483 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

     label372:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label373:
        r484 = new android.util.SparseArray;

     label374:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label375:
        $i8 = lengthof r461;

        specialinvoke r484.<android.util.SparseArray: void <init>(int)>($i8);

     label376:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label377:
        r483.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray installReasons> = r484;

     label378:
        i125 = 0;

     label379:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label380:
        $i126 = lengthof r461;

        if i125 >= $i126 goto label384;

     label381:
        i127 = r461[i125];

        r472 = r299;

        z160 = 1;

        r473 = r471;

     label382:
        $r52 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r53 = $r52.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray installReasons>;

        $i18 = virtualinvoke r431.<com.android.server.pm.PackageSetting: int getInstallReason(int)>(i127);

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i18);

        virtualinvoke $r53.<android.util.SparseArray: void put(int,java.lang.Object)>(i127, $r54);

     label383:
        i125 = i125 + 1;

        goto label379;

     label384:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label385:
        r485 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

     label386:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label387:
        r486 = new android.util.SparseArray;

     label388:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label389:
        $i9 = lengthof r462;

        specialinvoke r486.<android.util.SparseArray: void <init>(int)>($i9);

     label390:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label391:
        r485.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray uninstallReasons> = r486;

     label392:
        i128 = 0;

     label393:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label394:
        $i10 = lengthof r462;

        if i128 >= $i10 goto label398;

     label395:
        i129 = r462[i128];

        r472 = r299;

        z160 = 1;

        r473 = r471;

     label396:
        $r49 = r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r50 = $r49.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray uninstallReasons>;

        $i17 = virtualinvoke r431.<com.android.server.pm.PackageSetting: int getUninstallReason(int)>(i129);

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i17);

        virtualinvoke $r50.<android.util.SparseArray: void put(int,java.lang.Object)>(i129, $r51);

     label397:
        i128 = i128 + 1;

        goto label393;

     label398:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label399:
        z166 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

     label400:
        if z166 == 0 goto label427;

        r472 = r299;

        z160 = 1;

        r473 = r471;

     label401:
        z1 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

     label402:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label403:
        z2 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isOem()>();

     label404:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label405:
        z3 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVendor()>();

     label406:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label407:
        z167 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isProduct()>();

     label408:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label409:
        z4 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isOdm()>();

     label410:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label411:
        z168 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystemExt()>();

     label412:
        if z1 == 0 goto label413;

        i130 = 131072;

        goto label414;

     label413:
        i130 = 0;

     label414:
        if z2 == 0 goto label415;

        i131 = 262144;

        goto label416;

     label415:
        i131 = 0;

     label416:
        if z3 == 0 goto label417;

        i132 = 524288;

        goto label418;

     label417:
        i132 = 0;

     label418:
        if z167 == 0 goto label419;

        i133 = 1048576;

        goto label420;

     label419:
        i133 = 0;

     label420:
        if z4 == 0 goto label421;

        i134 = 4194304;

        goto label422;

     label421:
        i134 = 0;

     label422:
        if z168 == 0 goto label423;

        i135 = 2097152;

        goto label424;

     label423:
        i135 = 0;

     label424:
        r472 = r299;

        z160 = 1;

        r473 = r471;

     label425:
        virtualinvoke r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setReturnCode(int)>(1);

     label426:
        $i11 = c113 | 65536;

        $i12 = $i11 | i130;

        $i13 = $i12 | i131;

        $i14 = $i13 | i132;

        $i15 = $i14 | i133;

        $i16 = $i15 | i134;

        i116 = $i16 | i135;

        goto label428;

     label427:
        z152 = 1;

     label428:
        r487 = r430;

        r488 = r432;

        r489 = r431;

        goto label466;

     label429:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label430:
        r490 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label431:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label432:
        r491 = new java.lang.StringBuilder;

     label433:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label434:
        specialinvoke r491.<java.lang.StringBuilder: void <init>()>();

     label435:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label436:
        virtualinvoke r491.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

     label437:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label438:
        virtualinvoke r491.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r457);

     label439:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label440:
        virtualinvoke r491.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tried to change user ");

     label441:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label442:
        $r43 = interfaceinvoke r430.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getSharedUserId()>();

        virtualinvoke r491.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

     label443:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label444:
        $r45 = virtualinvoke r491.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r490.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-8, $r45);

     label445:
        r464 = r299;

        z164 = 1;

        r465 = r423;

     label446:
        throw r490;

     label447:
        $r238 := @caughtexception;

        r437 = r423;

        r438 = $r238;

        z160 = 1;

        goto label452;

     label448:
        $r292 := @caughtexception;

        r437 = r423;

        r438 = $r292;

        z160 = 1;

        goto label452;

     label449:
        $r228 := @caughtexception;

        r437 = r423;

        r438 = $r228;

        z160 = 1;

        goto label452;

     label450:
        $r222 := @caughtexception;

        r437 = r423;

        r438 = $r222;

        z160 = 1;

        goto label452;

     label451:
        $r293 := @caughtexception;

        r437 = r423;

        r438 = $r293;

        z160 = 1;

     label452:
        r464 = r422;

        z164 = z160;

        r465 = r437;

     label453:
        exitmonitor r429;

     label454:
        r472 = r422;

        r473 = r437;

     label455:
        throw r438;

     label456:
        $r242 := @caughtexception;

        r427 = $r242;

        z155 = z160;

        r423 = r473;

        r422 = r472;

        goto label512;

     label457:
        $r229 := @caughtexception;

        r438 = $r229;

        r422 = r464;

        z160 = z164;

        r437 = r465;

        goto label452;

     label458:
        $r219 := @caughtexception;

        r427 = $r219;

        z155 = 1;

        goto label512;

     label459:
        $r225 := @caughtexception;

        r427 = $r225;

        z155 = 1;

        goto label512;

     label460:
        r497 = r423;

        r489 = null;

        r488 = null;

        z152 = 0;

     label461:
        r498 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r499 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r499;

     label462:
        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r500 = virtualinvoke $r19.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>(r498);

     label463:
        if r500 != null goto label487;

     label464:
        $r25 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z8 = virtualinvoke $r25.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r498);

        if $z8 != 0 goto label470;

        exitmonitor r499;

     label465:
        z166 = 0;

        r487 = null;

     label466:
        $r30 = new com.android.server.pm.PackageManagerService$PrepareResult;

        specialinvoke $r30.<com.android.server.pm.PackageManagerService$PrepareResult: void <init>(boolean,int,int,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.ParsedPackage,boolean,boolean,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,com.android.server.pm.PackageManagerService$1)>(z152, i116, i0, r487, r1, z152, z166, r489, r488, null);

     label467:
        r299.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer> = r423;

        goto label468;

     label468:
        return $r30;

     label469:
        $r240 := @caughtexception;

        r427 = $r240;

        z155 = 0;

        goto label512;

     label470:
        r503 = r423;

        r504 = r299;

     label471:
        r505 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label472:
        r503 = r423;

        r504 = r299;

     label473:
        r506 = new java.lang.StringBuilder;

     label474:
        r503 = r423;

        r504 = r299;

     label475:
        specialinvoke r506.<java.lang.StringBuilder: void <init>()>();

     label476:
        r503 = r423;

        r504 = r299;

     label477:
        virtualinvoke r506.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to re-install ");

     label478:
        r503 = r423;

        r504 = r299;

     label479:
        virtualinvoke r506.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r498);

     label480:
        r503 = r423;

        r504 = r299;

     label481:
        virtualinvoke r506.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without first uninstalling.");

     label482:
        r503 = r423;

        r504 = r299;

     label483:
        $r29 = virtualinvoke r506.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r505.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-1, $r29);

     label484:
        r503 = r423;

        r504 = r299;

     label485:
        throw r505;

     label486:
        $r270 := @caughtexception;

        r507 = $r270;

        r423 = r497;

        goto label506;

     label487:
        r503 = r423;

        r504 = r299;

     label488:
        r509 = new com.android.server.pm.PackageManagerService$PrepareFailure;

     label489:
        r503 = r423;

        r504 = r299;

     label490:
        r510 = new java.lang.StringBuilder;

     label491:
        r503 = r423;

        r504 = r299;

     label492:
        specialinvoke r510.<java.lang.StringBuilder: void <init>()>();

     label493:
        r503 = r423;

        r504 = r299;

     label494:
        virtualinvoke r510.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to re-install ");

     label495:
        r503 = r423;

        r504 = r299;

     label496:
        virtualinvoke r510.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r498);

     label497:
        r503 = r423;

        r504 = r299;

     label498:
        virtualinvoke r510.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without first uninstalling package running as ");

     label499:
        r503 = r423;

        r504 = r299;

     label500:
        virtualinvoke r510.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r500);

     label501:
        r503 = r423;

        r504 = r299;

     label502:
        $r24 = virtualinvoke r510.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r509.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-1, $r24);

     label503:
        r503 = r423;

        r504 = r299;

     label504:
        throw r509;

     label505:
        $r258 := @caughtexception;

        r507 = $r258;

        r423 = r497;

     label506:
        r503 = r423;

        r504 = r422;

     label507:
        exitmonitor r499;

     label508:
        throw r507;

     label509:
        $r296 := @caughtexception;

        r427 = $r296;

        z155 = 1;

        goto label512;

     label510:
        $r241 := @caughtexception;

        r507 = $r241;

        r423 = r503;

        r422 = r504;

        goto label506;

     label511:
        $r218 := @caughtexception;

        z155 = 1;

        r423 = r497;

        r427 = $r218;

     label512:
        r422.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer> = r423;

        if z155 == 0 goto label513;

        virtualinvoke r423.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label513:
        throw r427;

     label514:
        $r264 := @caughtexception;

        $r265 = new java.lang.StringBuilder;

        specialinvoke $r265.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r265.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to set up verity: ");

        virtualinvoke $r265.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r264);

        $r268 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        $r269 = virtualinvoke $r265.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r268.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-110, $r269);

        throw $r268;

     label515:
        $r18 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r18.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-4, "Failed rename");

        throw $r18;

     label516:
        $r234 := @caughtexception;

        r411 = $r234;

        goto label523;

     label517:
        $r294 := @caughtexception;

        r514 = $r294;

     label518:
        exitmonitor r408;

     label519:
        throw r514;

     label520:
        $r250 := @caughtexception;

        r411 = $r250;

        goto label523;

     label521:
        $r221 := @caughtexception;

        r514 = $r221;

        goto label518;

     label522:
        $r235 := @caughtexception;

        r411 = $r235;

     label523:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Error deriving application ABI", r411);

        $r515 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r515.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-110, "Error deriving application ABI");

        throw $r515;

     label524:
        $r253 := @caughtexception;

        r314 = $r253;

        goto label526;

     label525:
        $r284 := @caughtexception;

        r314 = $r284;

     label526:
        goto label528;

     label527:
        $r257 := @caughtexception;

        r314 = $r257;

     label528:
        exitmonitor r311;

     label529:
        throw r314;

     label530:
        $r279 := @caughtexception;

        r314 = $r279;

        goto label528;

     label531:
        $r272 := @caughtexception;

        r309 = $r272;

     label532:
        $r273 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r273.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(java.lang.String,java.lang.Exception)>("Failed collect during installPackageLI", r309);

        throw $r273;

     label533:
        $r271 := @caughtexception;

     label534:
        virtualinvoke r303.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label535:
        goto label538;

     label536:
        $r254 := @caughtexception;

     label537:
        virtualinvoke $r271.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r254);

     label538:
        throw $r271;

     label539:
        $r223 := @caughtexception;

        r518 = $r223;

        goto label542;

     label540:
        $r263 := @caughtexception;

        r519 = $r263;

        goto label544;

     label541:
        $r260 := @caughtexception;

        r518 = $r260;

     label542:
        r520 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke r520.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(java.lang.String,java.lang.Exception)>("Failed parse during installPackageLI", r518);

        throw r520;

     label543:
        $r278 := @caughtexception;

        r519 = $r278;

     label544:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw r519;

        catch android.content.pm.PackageParser$PackageParserException from label018 to label019 with label541;
        catch java.lang.Throwable from label018 to label019 with label540;
        catch java.lang.Throwable from label019 to label020 with label533;
        catch android.content.pm.PackageParser$PackageParserException from label020 to label021 with label541;
        catch java.lang.Throwable from label020 to label021 with label540;
        catch android.content.pm.PackageParser$PackageParserException from label028 to label029 with label531;
        catch android.content.pm.PackageParser$PackageParserException from label030 to label031 with label032;
        catch android.content.pm.PackageParser$PackageParserException from label033 to label034 with label531;
        catch java.lang.Throwable from label037 to label038 with label060;
        catch java.lang.Throwable from label038 to label039 with label059;
        catch java.lang.Throwable from label040 to label041 with label042;
        catch java.lang.Throwable from label043 to label044 with label059;
        catch java.lang.Throwable from label046 to label047 with label057;
        catch java.lang.Throwable from label048 to label049 with label052;
        catch java.lang.Throwable from label049 to label050 with label051;
        catch java.lang.Throwable from label050 to label051 with label056;
        catch java.lang.Throwable from label053 to label054 with label056;
        catch java.lang.Throwable from label055 to label056 with label056;
        catch java.lang.Throwable from label062 to label063 with label527;
        catch java.lang.Throwable from label064 to label065 with label102;
        catch java.lang.Throwable from label066 to label067 with label071;
        catch java.lang.Throwable from label068 to label069 with label071;
        catch java.lang.Throwable from label073 to label074 with label102;
        catch java.lang.Throwable from label075 to label076 with label082;
        catch java.lang.Throwable from label077 to label078 with label082;
        catch java.lang.Throwable from label078 to label079 with label081;
        catch java.lang.Throwable from label079 to label080 with label080;
        catch com.android.server.pm.PackageManagerException from label083 to label084 with label099;
        catch java.lang.Throwable from label083 to label084 with label098;
        catch com.android.server.pm.PackageManagerException from label084 to label085 with label099;
        catch java.lang.Throwable from label084 to label085 with label098;
        catch com.android.server.pm.PackageManagerException from label085 to label086 with label097;
        catch java.lang.Throwable from label085 to label086 with label101;
        catch java.lang.Throwable from label086 to label087 with label088;
        catch java.lang.Throwable from label089 to label090 with label088;
        catch com.android.server.pm.PackageManagerException from label090 to label091 with label097;
        catch java.lang.Throwable from label090 to label091 with label101;
        catch java.lang.Throwable from label091 to label092 with label101;
        catch java.lang.Throwable from label094 to label095 with label096;
        catch java.lang.Throwable from label100 to label101 with label101;
        catch java.lang.Throwable from label105 to label106 with label525;
        catch java.lang.Throwable from label108 to label109 with label184;
        catch java.lang.Throwable from label109 to label110 with label184;
        catch java.lang.Throwable from label110 to label111 with label184;
        catch java.lang.Throwable from label112 to label113 with label114;
        catch java.lang.Throwable from label116 to label117 with label184;
        catch java.lang.Throwable from label117 to label118 with label184;
        catch java.lang.Throwable from label118 to label119 with label184;
        catch java.lang.Throwable from label119 to label120 with label180;
        catch java.lang.Throwable from label121 to label122 with label114;
        catch java.lang.Throwable from label123 to label124 with label184;
        catch java.lang.Throwable from label124 to label125 with label184;
        catch java.lang.Throwable from label125 to label126 with label184;
        catch java.lang.Throwable from label126 to label127 with label184;
        catch java.lang.Throwable from label127 to label128 with label184;
        catch java.lang.Throwable from label129 to label130 with label184;
        catch java.lang.Throwable from label131 to label132 with label184;
        catch java.lang.Throwable from label132 to label133 with label184;
        catch java.lang.Throwable from label133 to label134 with label184;
        catch java.lang.Throwable from label134 to label135 with label139;
        catch java.lang.Throwable from label135 to label136 with label138;
        catch java.lang.Throwable from label136 to label137 with label138;
        catch java.lang.Throwable from label140 to label141 with label138;
        catch java.lang.Throwable from label141 to label142 with label184;
        catch java.lang.Throwable from label144 to label145 with label184;
        catch java.lang.Throwable from label145 to label146 with label184;
        catch java.lang.Throwable from label146 to label147 with label184;
        catch java.lang.Throwable from label147 to label148 with label184;
        catch java.lang.Throwable from label148 to label149 with label184;
        catch java.lang.Throwable from label149 to label150 with label184;
        catch java.lang.Throwable from label150 to label151 with label184;
        catch java.lang.Throwable from label151 to label152 with label184;
        catch java.lang.Throwable from label152 to label153 with label184;
        catch java.lang.Throwable from label153 to label154 with label184;
        catch java.lang.Throwable from label155 to label156 with label184;
        catch java.lang.Throwable from label156 to label157 with label184;
        catch java.lang.Throwable from label157 to label158 with label184;
        catch java.lang.Throwable from label158 to label159 with label184;
        catch java.lang.Throwable from label159 to label160 with label184;
        catch java.lang.Throwable from label160 to label161 with label184;
        catch java.lang.Throwable from label161 to label162 with label184;
        catch java.lang.Throwable from label162 to label163 with label184;
        catch java.lang.Throwable from label163 to label164 with label184;
        catch java.lang.Throwable from label164 to label165 with label184;
        catch java.lang.Throwable from label165 to label166 with label184;
        catch java.lang.Throwable from label166 to label167 with label184;
        catch java.lang.Throwable from label167 to label168 with label184;
        catch java.lang.Throwable from label169 to label170 with label184;
        catch java.lang.Throwable from label170 to label171 with label184;
        catch java.lang.Throwable from label171 to label172 with label184;
        catch java.lang.Throwable from label172 to label173 with label184;
        catch java.lang.Throwable from label173 to label174 with label184;
        catch java.lang.Throwable from label174 to label175 with label184;
        catch java.lang.Throwable from label175 to label176 with label184;
        catch java.lang.Throwable from label176 to label177 with label184;
        catch java.lang.Throwable from label177 to label178 with label184;
        catch java.lang.Throwable from label178 to label179 with label184;
        catch java.lang.Throwable from label181 to label182 with label180;
        catch java.lang.Throwable from label182 to label183 with label184;
        catch java.lang.Throwable from label185 to label186 with label524;
        catch java.lang.Throwable from label190 to label191 with label200;
        catch java.lang.Throwable from label191 to label192 with label199;
        catch java.lang.Throwable from label193 to label194 with label199;
        catch java.lang.Throwable from label194 to label195 with label203;
        catch java.lang.Throwable from label196 to label197 with label203;
        catch java.lang.Throwable from label197 to label198 with label203;
        catch java.lang.Throwable from label201 to label202 with label203;
        catch com.android.server.pm.PackageManagerException from label206 to label207 with label522;
        catch com.android.server.pm.PackageManagerException from label209 to label210 with label522;
        catch java.lang.Throwable from label210 to label211 with label517;
        catch com.android.server.pm.PackageManagerException from label212 to label213 with label216;
        catch com.android.server.pm.PackageManagerException from label214 to label215 with label216;
        catch com.android.server.pm.PackageManagerException from label217 to label218 with label522;
        catch com.android.server.pm.PackageManagerException from label219 to label220 with label216;
        catch com.android.server.pm.PackageManagerException from label222 to label223 with label522;
        catch com.android.server.pm.PackageManagerException from label224 to label225 with label216;
        catch com.android.server.pm.PackageManagerException from label227 to label228 with label522;
        catch com.android.server.pm.PackageManagerException from label231 to label232 with label516;
        catch com.android.server.pm.Installer$InstallerException from label234 to label235 with label514;
        catch java.io.IOException from label234 to label235 with label514;
        catch java.security.DigestException from label234 to label235 with label514;
        catch java.security.NoSuchAlgorithmException from label234 to label235 with label514;
        catch java.lang.Throwable from label237 to label238 with label459;
        catch java.lang.Throwable from label239 to label240 with label249;
        catch java.lang.Throwable from label240 to label241 with label248;
        catch java.lang.Throwable from label242 to label243 with label248;
        catch java.lang.Throwable from label244 to label245 with label248;
        catch java.lang.Throwable from label245 to label246 with label246;
        catch java.lang.Throwable from label252 to label253 with label458;
        catch java.lang.Throwable from label253 to label254 with label451;
        catch java.lang.Throwable from label254 to label255 with label450;
        catch java.lang.Throwable from label255 to label256 with label449;
        catch java.lang.Throwable from label257 to label258 with label263;
        catch java.lang.Throwable from label259 to label260 with label263;
        catch java.lang.Throwable from label260 to label261 with label262;
        catch java.lang.Throwable from label261 to label262 with label269;
        catch java.lang.Throwable from label264 to label265 with label448;
        catch java.lang.Throwable from label266 to label267 with label269;
        catch java.lang.Throwable from label268 to label269 with label269;
        catch java.lang.Throwable from label270 to label271 with label448;
        catch java.lang.Throwable from label272 to label273 with label286;
        catch java.security.NoSuchAlgorithmException from label274 to label275 with label284;
        catch java.io.IOException from label274 to label275 with label284;
        catch java.lang.Throwable from label274 to label275 with label286;
        catch java.security.NoSuchAlgorithmException from label277 to label278 with label283;
        catch java.io.IOException from label277 to label278 with label283;
        catch java.lang.Throwable from label277 to label278 with label292;
        catch java.security.NoSuchAlgorithmException from label279 to label280 with label283;
        catch java.io.IOException from label279 to label280 with label283;
        catch java.lang.Throwable from label279 to label280 with label292;
        catch java.lang.Throwable from label280 to label281 with label292;
        catch java.lang.Throwable from label282 to label283 with label292;
        catch java.lang.Throwable from label285 to label286 with label292;
        catch java.lang.Throwable from label288 to label289 with label447;
        catch java.lang.Throwable from label290 to label291 with label292;
        catch java.lang.Throwable from label294 to label295 with label447;
        catch java.lang.Throwable from label296 to label297 with label447;
        catch java.lang.Throwable from label298 to label299 with label317;
        catch java.lang.Throwable from label300 to label301 with label317;
        catch java.lang.Throwable from label302 to label303 with label457;
        catch java.lang.Throwable from label304 to label305 with label457;
        catch java.lang.Throwable from label306 to label307 with label457;
        catch java.lang.Throwable from label308 to label309 with label457;
        catch java.lang.Throwable from label310 to label311 with label457;
        catch java.lang.Throwable from label312 to label313 with label457;
        catch java.lang.Throwable from label314 to label315 with label457;
        catch java.lang.Throwable from label316 to label317 with label457;
        catch java.lang.Throwable from label319 to label320 with label457;
        catch java.lang.Throwable from label322 to label323 with label457;
        catch java.lang.Throwable from label325 to label326 with label457;
        catch java.lang.Throwable from label327 to label328 with label457;
        catch java.lang.Throwable from label329 to label330 with label457;
        catch java.lang.Throwable from label331 to label332 with label457;
        catch java.lang.Throwable from label333 to label334 with label457;
        catch java.lang.Throwable from label335 to label336 with label457;
        catch java.lang.Throwable from label337 to label338 with label457;
        catch java.lang.Throwable from label339 to label340 with label457;
        catch java.lang.Throwable from label341 to label342 with label457;
        catch java.lang.Throwable from label343 to label344 with label457;
        catch java.lang.Throwable from label345 to label346 with label457;
        catch java.lang.Throwable from label347 to label348 with label456;
        catch java.lang.Throwable from label349 to label350 with label456;
        catch java.lang.Throwable from label351 to label352 with label456;
        catch java.lang.Throwable from label353 to label354 with label456;
        catch java.lang.Throwable from label355 to label356 with label456;
        catch java.lang.Throwable from label357 to label358 with label456;
        catch java.lang.Throwable from label359 to label360 with label456;
        catch java.lang.Throwable from label361 to label362 with label456;
        catch java.lang.Throwable from label365 to label366 with label456;
        catch java.lang.Throwable from label367 to label368 with label456;
        catch java.lang.Throwable from label369 to label370 with label456;
        catch java.lang.Throwable from label371 to label372 with label456;
        catch java.lang.Throwable from label373 to label374 with label456;
        catch java.lang.Throwable from label375 to label376 with label456;
        catch java.lang.Throwable from label377 to label378 with label456;
        catch java.lang.Throwable from label380 to label381 with label456;
        catch java.lang.Throwable from label382 to label383 with label456;
        catch java.lang.Throwable from label385 to label386 with label456;
        catch java.lang.Throwable from label387 to label388 with label456;
        catch java.lang.Throwable from label389 to label390 with label456;
        catch java.lang.Throwable from label391 to label392 with label456;
        catch java.lang.Throwable from label394 to label395 with label456;
        catch java.lang.Throwable from label396 to label397 with label456;
        catch java.lang.Throwable from label399 to label400 with label456;
        catch java.lang.Throwable from label401 to label402 with label456;
        catch java.lang.Throwable from label403 to label404 with label456;
        catch java.lang.Throwable from label405 to label406 with label456;
        catch java.lang.Throwable from label407 to label408 with label456;
        catch java.lang.Throwable from label409 to label410 with label456;
        catch java.lang.Throwable from label411 to label412 with label456;
        catch java.lang.Throwable from label425 to label426 with label456;
        catch java.lang.Throwable from label430 to label431 with label457;
        catch java.lang.Throwable from label432 to label433 with label457;
        catch java.lang.Throwable from label434 to label435 with label457;
        catch java.lang.Throwable from label436 to label437 with label457;
        catch java.lang.Throwable from label438 to label439 with label457;
        catch java.lang.Throwable from label440 to label441 with label457;
        catch java.lang.Throwable from label442 to label443 with label457;
        catch java.lang.Throwable from label444 to label445 with label457;
        catch java.lang.Throwable from label446 to label447 with label457;
        catch java.lang.Throwable from label453 to label454 with label457;
        catch java.lang.Throwable from label455 to label456 with label456;
        catch java.lang.Throwable from label461 to label462 with label511;
        catch java.lang.Throwable from label462 to label463 with label505;
        catch java.lang.Throwable from label464 to label465 with label486;
        catch java.lang.Throwable from label466 to label467 with label469;
        catch java.lang.Throwable from label471 to label472 with label510;
        catch java.lang.Throwable from label473 to label474 with label510;
        catch java.lang.Throwable from label475 to label476 with label510;
        catch java.lang.Throwable from label477 to label478 with label510;
        catch java.lang.Throwable from label479 to label480 with label510;
        catch java.lang.Throwable from label481 to label482 with label510;
        catch java.lang.Throwable from label483 to label484 with label510;
        catch java.lang.Throwable from label485 to label486 with label510;
        catch java.lang.Throwable from label488 to label489 with label510;
        catch java.lang.Throwable from label490 to label491 with label510;
        catch java.lang.Throwable from label492 to label493 with label510;
        catch java.lang.Throwable from label494 to label495 with label510;
        catch java.lang.Throwable from label496 to label497 with label510;
        catch java.lang.Throwable from label498 to label499 with label510;
        catch java.lang.Throwable from label500 to label501 with label510;
        catch java.lang.Throwable from label502 to label503 with label510;
        catch java.lang.Throwable from label504 to label505 with label510;
        catch java.lang.Throwable from label507 to label508 with label510;
        catch java.lang.Throwable from label508 to label509 with label509;
        catch java.lang.Throwable from label518 to label519 with label521;
        catch com.android.server.pm.PackageManagerException from label519 to label520 with label520;
        catch java.lang.Throwable from label528 to label529 with label530;
        catch java.lang.Throwable from label534 to label535 with label536;
        catch android.content.pm.PackageParser$PackageParserException from label537 to label538 with label539;
        catch java.lang.Throwable from label537 to label538 with label543;
        catch android.content.pm.PackageParser$PackageParserException from label538 to label539 with label539;
        catch java.lang.Throwable from label538 to label539 with label543;
        catch java.lang.Throwable from label542 to label543 with label543;
    }

    private static java.io.File preparePackageParserCache()
    {
        java.io.File r0, $r4, $r5, r22, r25, r27;
        java.lang.String r1, $r3, $r9, $r10, $r13, $r15, $r18, $r20;
        int i0, i9;
        boolean $z0, $z1, $z2, $z3, $z4, $z7;
        java.lang.String[] $r2;
        long $l2, $l3;
        byte $b4;
        java.lang.StringBuilder $r6, $r11, $r16;
        java.io.File[] r21;

        $z0 = <android.os.Build: boolean IS_ENG>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        i9 = 0;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("pm.boot.disable_package_cache", 0);

        if $z1 == 0 goto label2;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "Disabling package parser cache due to system property.");

        return null;

     label2:
        r0 = staticinvoke <android.os.Environment: java.io.File getPackageCacheDirectory()>();

        $z2 = staticinvoke <android.os.FileUtils: boolean createDir(java.io.File)>(r0);

        if $z2 != 0 goto label3;

        return null;

     label3:
        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "ro.build.fingerprint";

        $r2[1] = "persist.sys.isolated_storage";

        $r2[2] = "sys.isolated_storage_snapshot";

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String digestOf(java.lang.String[])>($r2);

        r21 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>(r0);

        i0 = lengthof r21;

     label4:
        if i9 >= i0 goto label7;

        r22 = r21[i9];

        $r10 = virtualinvoke r22.<java.io.File: java.lang.String getName()>();

        $z7 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, $r10);

        if $z7 == 0 goto label5;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Keeping known cache ");

        $r18 = virtualinvoke r22.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r20);

        goto label6;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying unknown cache ");

        $r13 = virtualinvoke r22.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r15);

        staticinvoke <android.os.FileUtils: boolean deleteContentsAndDir(java.io.File)>(r22);

     label6:
        i9 = i9 + 1;

        goto label4;

     label7:
        r25 = staticinvoke <android.os.FileUtils: java.io.File createDir(java.io.File,java.lang.String)>(r0, r1);

        if r25 != null goto label8;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cache directory cannot be created - wiping base dir ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PackageManager", $r9);

        staticinvoke <android.os.FileUtils: boolean deleteContentsAndDir(java.io.File)>(r0);

        return null;

     label8:
        r27 = r25;

        $z3 = <android.os.Build: boolean IS_USERDEBUG>;

        if $z3 == 0 goto label9;

        r27 = r25;

        $r3 = <android.os.Build$VERSION: java.lang.String INCREMENTAL>;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("eng.");

        if $z4 == 0 goto label9;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Wiping cache directory because the system partition changed.");

        $r4 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "framework");

        r27 = r25;

        $l2 = virtualinvoke r25.<java.io.File: long lastModified()>();

        $l3 = virtualinvoke $r4.<java.io.File: long lastModified()>();

        $b4 = $l2 cmp $l3;

        if $b4 >= 0 goto label9;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>(r0);

        r27 = staticinvoke <android.os.FileUtils: java.io.File createDir(java.io.File,java.lang.String)>(r0, r1);

     label9:
        return r27;
    }

    private void primeDomainVerificationsLPw(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i3;
        java.util.Iterator r1, r3, r4;
        java.lang.String r2, $r15, $r21, $r35;
        android.content.pm.parsing.component.ParsedIntentInfo r5;
        com.android.server.SystemConfig $r6;
        android.util.ArraySet $r7, $r30, r38, r39;
        java.lang.Object $r8, $r10, $r25, $r28;
        android.util.ArrayMap $r9;
        java.lang.StringBuilder $r11, $r17, $r31;
        boolean $z0, $z1, $z3, $z4, $z6;
        java.util.List $r16, $r27;
        com.android.server.pm.Settings $r22, $r24;
        android.content.pm.IntentFilterVerificationInfo $r23;
        android.content.pm.parsing.component.ParsedActivity $r26;
        java.util.ArrayList $r29;
        com.android.server.pm.parsing.pkg.AndroidPackage r36;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r6 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        $r7 = virtualinvoke $r6.<com.android.server.SystemConfig: android.util.ArraySet getLinkedApps()>();

        r1 = virtualinvoke $r7.<android.util.ArraySet: java.util.Iterator iterator()>();

     label01:
        $z6 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r8;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r36 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

        if r36 == null goto label11;

        $z0 = interfaceinvoke r36.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z0 != 0 goto label02;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non-system app \'");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in sysconfig <app-link>");

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r35);

        goto label01;

     label02:
        r38 = null;

        $r16 = interfaceinvoke r36.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r25 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (android.content.pm.parsing.component.ParsedActivity) $r25;

        $r27 = virtualinvoke $r26.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        r4 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label07;

        $r28 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.parsing.component.ParsedIntentInfo) $r28;

        r39 = r38;

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasValidDomains(android.content.pm.parsing.component.ParsedIntentInfo)>(r5);

        if $z4 == 0 goto label06;

        r39 = r38;

        if r38 != null goto label05;

        $r30 = new android.util.ArraySet;

        specialinvoke $r30.<android.util.ArraySet: void <init>()>();

        r39 = $r30;

     label05:
        $r29 = virtualinvoke r5.<android.content.pm.parsing.component.ParsedIntentInfo: java.util.ArrayList getHostsList()>();

        virtualinvoke r39.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r29);

     label06:
        r38 = r39;

        goto label04;

     label07:
        goto label03;

     label08:
        if r38 == null goto label09;

        $i3 = virtualinvoke r38.<android.util.ArraySet: int size()>();

        if $i3 <= 0 goto label09;

        $r22 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r23 = virtualinvoke $r22.<com.android.server.pm.Settings: android.content.pm.IntentFilterVerificationInfo createIntentFilterVerificationIfNeededLPw(java.lang.String,android.util.ArraySet)>(r2, r38);

        virtualinvoke $r23.<android.content.pm.IntentFilterVerificationInfo: void setStatus(int)>(0);

        $r24 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r24.<com.android.server.pm.Settings: boolean updateIntentFilterVerificationStatusLPw(java.lang.String,int,int)>(r2, 2, i0);

        goto label10;

     label09:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sysconfig <app-link> package \'");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not handle web links");

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

     label10:
        goto label12;

     label11:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in sysconfig <app-link>");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

     label12:
        goto label01;

     label13:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

        return;
    }

    private void processInstallRequestsAsync(boolean, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        java.util.List r1;
        com.android.server.pm._$$Lambda$PackageManagerService$aXPYjiloRwQataUrx041SxBr5us $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r2 = new com.android.server.pm._$$Lambda$PackageManagerService$aXPYjiloRwQataUrx041SxBr5us;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$PackageManagerService$aXPYjiloRwQataUrx041SxBr5us: void <init>(com.android.server.pm.PackageManagerService,boolean,java.util.List)>(r0, z0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void processPendingInstall(com.android.server.pm.PackageManagerService$InstallArgs, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$InstallArgs r1;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r2;
        com.android.server.pm.PackageManagerService$MultiPackageInstallParams $r3, $r6;
        com.android.server.pm.PackageManagerService$InstallRequest $r4;
        java.util.List $r5;
        int i0, i1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageManagerService$InstallArgs;

        i0 := @parameter1: int;

        $r3 = r1.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MultiPackageInstallParams mMultiPackageInstallParams>;

        if $r3 == null goto label1;

        $r6 = r1.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.PackageManagerService$MultiPackageInstallParams mMultiPackageInstallParams>;

        virtualinvoke $r6.<com.android.server.pm.PackageManagerService$MultiPackageInstallParams: void tryProcessInstallRequest(com.android.server.pm.PackageManagerService$InstallArgs,int)>(r1, i0);

        goto label4;

     label1:
        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageInstalledInfo createPackageInstalledInfo(int)>(i0);

        i1 = r2.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        z0 = 1;

        if i1 != 1 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        $r4 = new com.android.server.pm.PackageManagerService$InstallRequest;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$InstallRequest: void <init>(com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$1)>(r1, r2, null);

        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r4);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void processInstallRequestsAsync(boolean,java.util.List)>(z0, $r5);

     label4:
        return;
    }

    private boolean pruneUnusedStaticSharedLibraries(long, long) throws java.io.IOException
    {
        com.android.server.pm.PackageManagerService r0;
        long l0, l1, l2, $l5, $l7, $l9, $l10, $l11, $l13;
        java.io.File r1;
        java.lang.Object r2, $r9, $r12, $r13;
        int i3, i4, $i6, i14, i17, i23, i24;
        android.util.LongSparseArray r3;
        android.content.pm.VersionedPackage r4, r51, r55;
        boolean z0, $z1;
        com.android.server.pm.PackageManagerService$Injector $r5;
        java.lang.String $r6, $r10, $r14, r42;
        com.android.server.pm.UserManagerService $r7;
        android.util.ArrayMap $r8, $r11;
        byte $b8, $b12;
        com.android.server.pm.Settings $r15;
        com.android.server.pm.parsing.pkg.AndroidPackage $r16;
        java.lang.Throwable $r17, $r18, $r19, $r20, $r21, $r22, r49;
        android.os.storage.StorageManager r24;
        java.util.ArrayList r26, r48;
        android.content.pm.SharedLibraryInfo r35;
        com.android.server.pm.PackageSetting r45;

        r0 := @this: com.android.server.pm.PackageManagerService;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r24 = virtualinvoke $r5.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r6 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        r1 = virtualinvoke r24.<android.os.storage.StorageManager: java.io.File findPathForUuid(java.lang.String)>($r6);

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        virtualinvoke $r7.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        i3 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

     label02:
        i14 = 0;

        r26 = null;

     label03:
        if i14 >= i3 goto label32;

     label04:
        $r11 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i14);

        r3 = (android.util.LongSparseArray) $r12;

     label05:
        if r3 != null goto label06;

        goto label30;

     label06:
        i4 = virtualinvoke r3.<android.util.LongSparseArray: int size()>();

     label07:
        i17 = 0;

     label08:
        if i17 >= i4 goto label30;

     label09:
        $r13 = virtualinvoke r3.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i17);

        r35 = (android.content.pm.SharedLibraryInfo) $r13;

     label10:
        $z1 = virtualinvoke r35.<android.content.pm.SharedLibraryInfo: boolean isStatic()>();

        if $z1 != 0 goto label12;

     label11:
        goto label30;

     label12:
        r4 = virtualinvoke r35.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

     label13:
        $r14 = virtualinvoke r4.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $l9 = virtualinvoke r4.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        r42 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>($r14, $l9);

     label14:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r45 = virtualinvoke $r15.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r42);

     label15:
        if r45 == null goto label29;

     label16:
        $l10 = r45.<com.android.server.pm.PackageSetting: long lastUpdateTime>;

        $l11 = l2 - $l10;

        $b12 = $l11 cmp l1;

        if $b12 >= 0 goto label18;

     label17:
        goto label29;

     label18:
        $r16 = r45.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        z0 = interfaceinvoke $r16.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

     label19:
        if z0 == 0 goto label20;

        goto label29;

     label20:
        r48 = r26;

        if r26 != null goto label24;

     label21:
        r48 = new java.util.ArrayList;

        specialinvoke r48.<java.util.ArrayList: void <init>()>();

     label22:
        goto label24;

     label23:
        $r17 := @caughtexception;

        r49 = $r17;

        goto label39;

     label24:
        r51 = new android.content.pm.VersionedPackage;

     label25:
        $l13 = virtualinvoke r4.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        specialinvoke r51.<android.content.pm.VersionedPackage: void <init>(java.lang.String,long)>(r42, $l13);

     label26:
        interfaceinvoke r48.<java.util.List: boolean add(java.lang.Object)>(r51);

     label27:
        r26 = r48;

        goto label29;

     label28:
        $r20 := @caughtexception;

        r49 = $r20;

        goto label39;

     label29:
        i17 = i17 + 1;

        goto label08;

     label30:
        i14 = i14 + 1;

        goto label03;

     label31:
        $r18 := @caughtexception;

        r49 = $r18;

        goto label39;

     label32:
        exitmonitor r2;

     label33:
        if r26 == null goto label36;

        i23 = interfaceinvoke r26.<java.util.List: int size()>();

        i24 = 0;

     label34:
        if i24 >= i23 goto label36;

        $r9 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(i24);

        r55 = (android.content.pm.VersionedPackage) $r9;

        $r10 = virtualinvoke r55.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $l5 = virtualinvoke r55.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        $i6 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>($r10, $l5, 0, 2);

        if $i6 != 1 goto label35;

        $l7 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b8 = $l7 cmp l0;

        if $b8 < 0 goto label35;

        return 1;

     label35:
        i24 = i24 + 1;

        goto label34;

     label36:
        return 0;

     label37:
        $r22 := @caughtexception;

        r49 = $r22;

        goto label39;

     label38:
        $r21 := @caughtexception;

        r49 = $r21;

     label39:
        exitmonitor r2;

     label40:
        throw r49;

     label41:
        $r19 := @caughtexception;

        r49 = $r19;

        goto label39;

        catch java.lang.Throwable from label01 to label02 with label38;
        catch java.lang.Throwable from label04 to label05 with label31;
        catch java.lang.Throwable from label06 to label07 with label31;
        catch java.lang.Throwable from label09 to label10 with label31;
        catch java.lang.Throwable from label10 to label11 with label31;
        catch java.lang.Throwable from label12 to label13 with label31;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label25 to label26 with label37;
        catch java.lang.Throwable from label26 to label27 with label37;
        catch java.lang.Throwable from label32 to label33 with label37;
        catch java.lang.Throwable from label39 to label40 with label41;
    }

    private android.content.pm.ResolveInfo queryCrossProfileIntents(java.util.List, android.content.Intent, java.lang.String, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        android.content.Intent r2;
        java.lang.String r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        boolean z0, $z1, z2, z3;
        android.util.SparseBooleanArray $r5;
        java.lang.Object $r6;
        com.android.server.pm.CrossProfileIntentFilter r7;
        android.content.pm.ResolveInfo r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.content.Intent;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        if r1 == null goto label8;

        $r5 = new android.util.SparseBooleanArray;

        specialinvoke $r5.<android.util.SparseBooleanArray: void <init>()>();

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i7 = 0;

     label1:
        if i7 >= i2 goto label8;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        r7 = (com.android.server.pm.CrossProfileIntentFilter) $r6;

        i3 = virtualinvoke r7.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        i8 = virtualinvoke r7.<com.android.server.pm.CrossProfileIntentFilter: int getFlags()>();

        z2 = 0;

        $i4 = i8 & 2;

        if $i4 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        $i5 = virtualinvoke r7.<com.android.server.pm.CrossProfileIntentFilter: int getFlags()>();

        $i6 = $i5 & 4;

        if $i6 == 0 goto label4;

        z2 = 1;

     label4:
        if z3 != 0 goto label7;

        $z1 = virtualinvoke $r5.<android.util.SparseBooleanArray: boolean get(int)>(i3);

        if $z1 != 0 goto label7;

        if z2 == 0 goto label5;

        if z0 != 0 goto label7;

     label5:
        r8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo createForwardingResolveInfo(com.android.server.pm.CrossProfileIntentFilter,android.content.Intent,java.lang.String,int,int)>(r7, r2, r3, i0, i1);

        if r8 == null goto label6;

        return r8;

     label6:
        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i3, 1);

     label7:
        i7 = i7 + 1;

        goto label1;

     label8:
        return null;
    }

    private java.util.List queryInstrumentationInternal(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        java.lang.Object r2, $r8, $r10;
        java.util.Iterator r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r4;
        java.util.ArrayList $r5;
        android.util.ArrayMap $r6, $r9;
        java.util.Collection $r7;
        boolean $z0, $z2;
        java.lang.String $r11, r13, r15;
        java.lang.Throwable $r12;
        android.content.pm.parsing.component.ParsedInstrumentation r14;
        com.android.server.pm.PackageSetting r16;
        android.content.pm.InstrumentationInfo r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (android.content.pm.parsing.component.ParsedInstrumentation) $r8;

     label03:
        if r13 == null goto label05;

     label04:
        $r11 = virtualinvoke r14.<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getTargetPackage()>();

        $z2 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z2 == 0 goto label10;

     label05:
        r15 = virtualinvoke r14.<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getPackageName()>();

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        r4 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

        r16 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r15);

     label06:
        if r4 == null goto label10;

     label07:
        r17 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.parsing.component.ParsedInstrumentation,com.android.server.pm.parsing.pkg.AndroidPackage,int,int,com.android.server.pm.PackageSetting)>(r14, r4, i0, i1, r16);

     label08:
        if r17 == null goto label10;

     label09:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r17);

     label10:
        goto label02;

     label11:
        exitmonitor r2;

     label12:
        return $r5;

     label13:
        $r12 := @caughtexception;

     label14:
        exitmonitor r2;

     label15:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private java.util.List queryIntentActivitiesInternal(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, $i2;
        java.util.List $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int,int,int,boolean,boolean)>(r1, r2, i0, 0, $i2, i1, 0, 1);

        return $r3;
    }

    private java.util.List queryIntentActivitiesInternal(android.content.Intent, java.lang.String, int, int, int, int, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0, r70;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22;
        boolean z0, z1, $z2, $z3, $z6, $z10, z11, $z12, z13, z14, z15, z16, z17, z18, z19, z20, z21, z22, z23, z24, z25, z26, z27, $z28, z29;
        java.lang.String r1, $r7, $r16, $r20, r43, r44;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, $r9;
        com.android.server.pm.UserManagerService $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        java.util.List $r5, $r10, $r11, $r13, $r14, $r23, $r51, r53, r56, r58, r64, r68, r69, r71, r79, r86, r87, r88, r89;
        java.util.Comparator $r6;
        android.content.pm.ResolveInfo $r12, r54, r65, r83;
        android.content.pm.ApplicationInfo $r17, $r19;
        com.android.server.pm.PackageSetting $r21, r77;
        android.content.Intent $r22, r42, r46;
        java.lang.Throwable $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, r59;
        android.content.ComponentName r45, r47;
        android.content.pm.ActivityInfo r49;
        java.lang.Object r52, r57, r72, r80, r81;
        com.android.server.pm.ComponentResolver r63, r78;
        android.content.pm.UserInfo r66;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo r67;
        java.util.ArrayList r82, r84, r85;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r42 := @parameter0: android.content.Intent;

        r43 := @parameter1: java.lang.String;

        i16 := @parameter2: int;

        i17 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        i18 = i1;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z2 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z2 != 0 goto label001;

        $r23 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r23;

     label001:
        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i1, 0, 0, "query intent activities");

        r44 = virtualinvoke r42.<android.content.Intent: java.lang.String getPackage()>();

        r45 = virtualinvoke r42.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r45 != null goto label002;

        $r22 = virtualinvoke r42.<android.content.Intent: android.content.Intent getSelector()>();

        if $r22 == null goto label002;

        r46 = virtualinvoke r42.<android.content.Intent: android.content.Intent getSelector()>();

        r47 = virtualinvoke r46.<android.content.Intent: android.content.ComponentName getComponent()>();

        goto label003;

     label002:
        r46 = r42;

        r47 = r45;

     label003:
        if r47 != null goto label005;

        if r44 == null goto label004;

        goto label005;

     label004:
        z11 = 0;

        goto label006;

     label005:
        z11 = 1;

     label006:
        $z12 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r46, i1, r43, i16);

        i19 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean,boolean)>(i16, i1, i0, z0, z11, $z12);

        if r47 == null goto label031;

        r82 = new java.util.ArrayList;

        specialinvoke r82.<java.util.ArrayList: void <init>(int)>(1);

        r49 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(r47, i19, i1);

        if r49 == null goto label030;

        $i7 = 8388608 & i19;

        if $i7 == 0 goto label007;

        z13 = 1;

        goto label008;

     label007:
        z13 = 0;

     label008:
        $i8 = 16777216 & i19;

        if $i8 == 0 goto label009;

        z14 = 1;

        goto label010;

     label009:
        z14 = 0;

     label010:
        $i9 = 33554432 & i19;

        if $i9 == 0 goto label011;

        z15 = 1;

        goto label012;

     label011:
        z15 = 0;

     label012:
        if r1 == null goto label013;

        z16 = 1;

        goto label014;

     label013:
        z16 = 0;

     label014:
        $r16 = virtualinvoke r47.<android.content.ComponentName: java.lang.String getPackageName()>();

        z17 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        $r17 = r49.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i10 = $r17.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i11 = $i10 & 128;

        if $i11 == 0 goto label015;

        z18 = 1;

        goto label016;

     label015:
        z18 = 0;

     label016:
        $i12 = r49.<android.content.pm.ActivityInfo: int flags>;

        $i13 = $i12 & 1048576;

        if $i13 == 0 goto label017;

        z19 = 1;

        goto label018;

     label017:
        z19 = 0;

     label018:
        if z19 == 0 goto label019;

        $i14 = r49.<android.content.pm.ActivityInfo: int flags>;

        $i15 = $i14 & 2097152;

        if $i15 != 0 goto label019;

        z20 = 1;

        goto label020;

     label019:
        z20 = 0;

     label020:
        if z19 == 0 goto label022;

        if z15 == 0 goto label021;

        if z20 != 0 goto label021;

        goto label022;

     label021:
        z21 = 0;

        goto label023;

     label022:
        z21 = 1;

     label023:
        if z17 != 0 goto label026;

        if z13 != 0 goto label024;

        if z16 != 0 goto label024;

        if z18 != 0 goto label025;

     label024:
        if z14 == 0 goto label026;

        if z16 == 0 goto label026;

        if z21 == 0 goto label026;

     label025:
        z22 = 1;

        goto label027;

     label026:
        z22 = 0;

     label027:
        if z0 != 0 goto label028;

        if z18 != 0 goto label028;

        if z16 != 0 goto label028;

        $r19 = r49.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r20 = $r19.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r21 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r20, 1000);

        $z10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r21, i0, i1);

        if $z10 == 0 goto label028;

        z23 = 1;

        goto label029;

     label028:
        z23 = 0;

     label029:
        if z22 != 0 goto label030;

        if z23 != 0 goto label030;

        r83 = new android.content.pm.ResolveInfo;

        specialinvoke r83.<android.content.pm.ResolveInfo: void <init>()>();

        r83.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = r49;

        interfaceinvoke r82.<java.util.List: boolean add(java.lang.Object)>(r83);

        goto label030;

     label030:
        $r51 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r82, r1, z1, i0, z0, i1, r46);

        return $r51;

     label031:
        z24 = 0;

        z25 = 0;

        r52 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r52;

        if r44 != null goto label086;

     label032:
        r53 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getMatchingCrossProfileIntentFilters(android.content.Intent,java.lang.String,int)>(r46, r43, i1);

        r54 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo querySkipCurrentProfileIntents(java.util.List,android.content.Intent,java.lang.String,int,int)>(r53, r46, r43, i19, i1);

     label033:
        if r54 == null goto label041;

     label034:
        r84 = new java.util.ArrayList;

        specialinvoke r84.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke r84.<java.util.List: boolean add(java.lang.Object)>(r54);

     label035:
        r56 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotSystemUser(java.util.List,int)>(r84, i1);

     label036:
        r57 = r52;

     label037:
        r58 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r56, r1, z1, i0, z0, i1, r46);

        exitmonitor r52;

     label038:
        return r58;

     label039:
        $r25 := @caughtexception;

        r59 = $r25;

        goto label116;

     label040:
        $r40 := @caughtexception;

        r59 = $r40;

        r57 = r52;

        goto label116;

     label041:
        r63 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

     label042:
        $r11 = virtualinvoke r63.<com.android.server.pm.ComponentResolver: java.util.List queryActivities(android.content.Intent,java.lang.String,int,int)>(r46, r43, i19, i1);

        r64 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotSystemUser(java.util.List,int)>($r11, i1);

        z25 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantAppResolutionAllowed(android.content.Intent,java.util.List,int,boolean)>(r46, r64, i1, 0);

        z26 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean hasNonNegativePriority(java.util.List)>(r64);

     label043:
        z27 = 0;

     label044:
        r65 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo queryCrossProfileIntents(java.util.List,android.content.Intent,java.lang.String,int,int,boolean)>(r53, r46, r43, i19, i1, z26);

     label045:
        if r65 == null goto label053;

     label046:
        $i5 = r65.<android.content.pm.ResolveInfo: int targetUserId>;

        $z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isUserEnabled(int)>($i5);

        if $z6 == 0 goto label053;

     label047:
        $r13 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r65);

        $r14 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotSystemUser(java.util.List,int)>($r13, i1);

        $i6 = interfaceinvoke $r14.<java.util.List: int size()>();

        if $i6 <= 0 goto label049;

     label048:
        z27 = 1;

     label049:
        if z27 == 0 goto label053;

     label050:
        interfaceinvoke r64.<java.util.List: boolean add(java.lang.Object)>(r65);

     label051:
        z24 = 1;

        goto label054;

     label052:
        $r41 := @caughtexception;

        r59 = $r41;

        r57 = r52;

        goto label116;

     label053:
        z24 = 0;

     label054:
        $z28 = virtualinvoke r46.<android.content.Intent: boolean hasWebURI()>();

        if $z28 == 0 goto label079;

        r66 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.UserInfo getProfileParent(int)>(i1);

     label055:
        if r66 == null goto label059;

     label056:
        $i4 = r66.<android.content.pm.UserInfo: int id>;

        r67 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(android.content.Intent,java.lang.String,int,int,int)>(r46, r43, i19, i1, $i4);

     label057:
        goto label060;

     label058:
        $r31 := @caughtexception;

        r59 = $r31;

        r57 = r52;

        goto label116;

     label059:
        r67 = null;

     label060:
        if r67 == null goto label069;

        if r65 == null goto label062;

     label061:
        interfaceinvoke r64.<java.util.List: boolean remove(java.lang.Object)>(r65);

     label062:
        $i3 = interfaceinvoke r64.<java.util.List: int size()>();

        if $i3 != 0 goto label067;

     label063:
        if z25 != 0 goto label067;

     label064:
        $r12 = r67.<com.android.server.pm.PackageManagerService$CrossProfileDomainInfo: android.content.pm.ResolveInfo resolveInfo>;

        interfaceinvoke r64.<java.util.List: boolean add(java.lang.Object)>($r12);

     label065:
        r68 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r64, r1, z1, i0, z0, i1, r46);

        exitmonitor r52;

     label066:
        return r68;

     label067:
        goto label074;

     label068:
        $r33 := @caughtexception;

        r59 = $r33;

        r57 = r52;

        goto label116;

     label069:
        i20 = interfaceinvoke r64.<java.util.List: int size()>();

     label070:
        if i20 > 1 goto label074;

        if z25 != 0 goto label074;

     label071:
        r69 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r64, r1, z1, i0, z0, i1, r46);

        exitmonitor r52;

     label072:
        return r69;

     label073:
        $r34 := @caughtexception;

        r59 = $r34;

        r57 = r52;

        goto label116;

     label074:
        r70 = r0;

        i21 = i0;

        i18 = i1;

     label075:
        r71 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List filterCandidatesWithDomainPreferredActivitiesLPr(android.content.Intent,int,java.util.List,com.android.server.pm.PackageManagerService$CrossProfileDomainInfo,int)>(r46, i19, r64, r67, i1);

     label076:
        r72 = r71;

        z24 = 1;

        goto label080;

     label077:
        $r38 := @caughtexception;

        r59 = $r38;

        r57 = r52;

        goto label116;

     label078:
        $r35 := @caughtexception;

        r59 = $r35;

        r57 = r52;

        goto label116;

     label079:
        i21 = i0;

        r70 = r0;

        r72 = r64;

     label080:
        goto label110;

     label081:
        $r27 := @caughtexception;

        r59 = $r27;

        r57 = r52;

        goto label116;

     label082:
        $r26 := @caughtexception;

        r59 = $r26;

        r57 = r52;

        goto label116;

     label083:
        $r30 := @caughtexception;

        r59 = $r30;

        r57 = r52;

        goto label116;

     label084:
        $r36 := @caughtexception;

        r59 = $r36;

        r57 = r52;

        goto label116;

     label085:
        $r37 := @caughtexception;

        r59 = $r37;

        r57 = r52;

        goto label116;

     label086:
        i21 = i0;

     label087:
        r77 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>(r44, 1000);

     label088:
        r72 = null;

        if r77 == null goto label099;

     label089:
        r2 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label090:
        if r2 == null goto label099;

        if z0 != 0 goto label095;

     label091:
        z29 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r77, i0, i1);

     label092:
        if z29 != 0 goto label093;

        goto label095;

     label093:
        goto label099;

     label094:
        $r28 := @caughtexception;

        r59 = $r28;

        r57 = r52;

        goto label116;

     label095:
        r78 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $r9 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r79 = interfaceinvoke $r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

     label096:
        $r10 = virtualinvoke r78.<com.android.server.pm.ComponentResolver: java.util.List queryActivities(android.content.Intent,java.lang.String,int,java.util.List,int)>(r46, r43, i19, r79, i1);

        r72 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List filterIfNotSystemUser(java.util.List,int)>($r10, i1);

     label097:
        goto label099;

     label098:
        $r32 := @caughtexception;

        r59 = $r32;

        r57 = r52;

        goto label116;

     label099:
        if r72 == null goto label104;

     label100:
        r86 = (java.util.List) r72;

        i22 = interfaceinvoke r86.<java.util.List: int size()>();

     label101:
        if i22 != 0 goto label102;

        goto label104;

     label102:
        r70 = r0;

        goto label110;

     label103:
        $r29 := @caughtexception;

        r59 = $r29;

        r57 = r52;

        goto label116;

     label104:
        r80 = r52;

     label105:
        z25 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantAppResolutionAllowed(android.content.Intent,java.util.List,int,boolean)>(r46, null, i1, 1);

     label106:
        if r72 != null goto label109;

        r80 = r52;

     label107:
        r85 = new java.util.ArrayList;

        specialinvoke r85.<java.util.ArrayList: void <init>()>();

        r72 = r85;

     label108:
        r70 = r0;

        goto label110;

     label109:
        r70 = r0;

     label110:
        r80 = r52;

     label111:
        exitmonitor r52;

     label112:
        r81 = r72;

        if z25 == 0 goto label113;

        $r7 = specialinvoke r70.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i21);

        $z3 = virtualinvoke r70.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>($r7, i18);

        r87 = (java.util.List) r72;

        r81 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List maybeAddInstantAppInstaller(java.util.List,android.content.Intent,java.lang.String,int,int,boolean,boolean)>(r87, r46, r43, i19, i1, z0, $z3);

     label113:
        if z24 == 0 goto label114;

        $r6 = <com.android.server.pm.ComponentResolver: java.util.Comparator RESOLVE_PRIORITY_SORTER>;

        r88 = (java.util.List) r81;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r88, $r6);

     label114:
        r89 = (java.util.List) r81;

        $r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r89, r1, z1, i0, z0, i1, r46);

        return $r5;

     label115:
        $r24 := @caughtexception;

        r59 = $r24;

        r57 = r52;

     label116:
        r80 = r57;

     label117:
        exitmonitor r57;

     label118:
        throw r59;

     label119:
        $r39 := @caughtexception;

        r59 = $r39;

        r57 = r80;

        goto label116;

        catch java.lang.Throwable from label032 to label033 with label085;
        catch java.lang.Throwable from label034 to label035 with label040;
        catch java.lang.Throwable from label035 to label036 with label040;
        catch java.lang.Throwable from label037 to label038 with label039;
        catch java.lang.Throwable from label041 to label042 with label084;
        catch java.lang.Throwable from label042 to label043 with label083;
        catch java.lang.Throwable from label044 to label045 with label082;
        catch java.lang.Throwable from label046 to label047 with label052;
        catch java.lang.Throwable from label047 to label048 with label052;
        catch java.lang.Throwable from label050 to label051 with label052;
        catch java.lang.Throwable from label054 to label055 with label081;
        catch java.lang.Throwable from label056 to label057 with label058;
        catch java.lang.Throwable from label061 to label062 with label058;
        catch java.lang.Throwable from label062 to label063 with label068;
        catch java.lang.Throwable from label064 to label065 with label068;
        catch java.lang.Throwable from label065 to label066 with label073;
        catch java.lang.Throwable from label069 to label070 with label078;
        catch java.lang.Throwable from label071 to label072 with label073;
        catch java.lang.Throwable from label075 to label076 with label077;
        catch java.lang.Throwable from label087 to label088 with label115;
        catch java.lang.Throwable from label089 to label090 with label098;
        catch java.lang.Throwable from label091 to label092 with label094;
        catch java.lang.Throwable from label095 to label096 with label098;
        catch java.lang.Throwable from label096 to label097 with label103;
        catch java.lang.Throwable from label100 to label101 with label103;
        catch java.lang.Throwable from label105 to label106 with label119;
        catch java.lang.Throwable from label107 to label108 with label119;
        catch java.lang.Throwable from label111 to label112 with label119;
        catch java.lang.Throwable from label117 to label118 with label119;
    }

    private java.util.List queryIntentActivityOptionsInternal(android.content.ComponentName, android.content.Intent[], java.lang.String[], android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1, $r36, r52;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, $i15, i16, i17, i18, i19, i20, i21, $i22, i23, i24;
        java.lang.String r2, $r11, $r13, $r14, $r15, $r28, $r29, $r34, $r35, $r38, $r39, r44, r49, r50, r53, r60;
        java.util.List r3, $r40;
        android.content.pm.ResolveInfo r4, $r8, $r10, $r25, r51, r56, r57, r58, r61;
        com.android.server.pm.UserManagerService $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        java.lang.Object $r7, $r9, $r17, $r20, $r21, $r26;
        android.content.pm.ApplicationInfo $r12, $r33, $r37;
        android.content.IntentFilter $r18, $r19, $r22, $r23, $r30;
        android.content.pm.ActivityInfo $r27, $r32, r54, r55, r62;
        android.content.Intent[] r41;
        java.lang.String[] r42;
        android.content.Intent r43, r48;
        java.util.Iterator r59;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r41 := @parameter1: android.content.Intent[];

        r42 := @parameter2: java.lang.String[];

        r43 := @parameter3: android.content.Intent;

        r44 := @parameter4: java.lang.String;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: boolean exists(int)>(i5);

        if $z0 != 0 goto label01;

        $r40 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r40;

     label01:
        i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r43, i5, r44, i4);

        i0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i4, i5, i6, 0, $z1);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i6, i5, 0, 0, "query intent activity options");

        r2 = virtualinvoke r43.<android.content.Intent: java.lang.String getAction()>();

        $i1 = i0 | 64;

        r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>(r43, r44, $i1, i5);

        i7 = 0;

        i8 = 0;

        if r41 == null goto label18;

        i9 = 0;

     label02:
        i7 = i8;

        $i3 = lengthof r41;

        if i9 >= $i3 goto label18;

        r48 = r41[i9];

        if r48 != null goto label03;

        goto label17;

     label03:
        r49 = virtualinvoke r48.<android.content.Intent: java.lang.String getAction()>();

        r50 = r49;

        if r2 == null goto label04;

        r50 = r49;

        $z9 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r49);

        if $z9 == 0 goto label04;

        r50 = null;

     label04:
        r51 = null;

        r52 = virtualinvoke r48.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r52 != null goto label08;

        if r42 == null goto label05;

        r53 = r42[i9];

        goto label06;

     label05:
        r53 = null;

     label06:
        r51 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>(r48, r53, i0, i5);

        if r51 != null goto label07;

        goto label17;

     label07:
        r54 = r51.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r36 = new android.content.ComponentName;

        $r37 = r54.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r39 = $r37.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r38 = r54.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r36.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r39, $r38);

        r52 = $r36;

        goto label09;

     label08:
        r55 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>(r52, i0, i5);

        r54 = r55;

        if r55 != null goto label09;

        goto label17;

     label09:
        i10 = interfaceinvoke r3.<java.util.List: int size()>();

        i11 = i8;

     label10:
        if i11 >= i10 goto label15;

        $r26 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i11);

        r4 = (android.content.pm.ResolveInfo) $r26;

        $r27 = r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r28 = $r27.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r29 = virtualinvoke r52.<android.content.ComponentName: java.lang.String getClassName()>();

        $z6 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z6 == 0 goto label11;

        $r32 = r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r33 = $r32.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r34 = $r33.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r35 = virtualinvoke r52.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z8 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z8 != 0 goto label12;

     label11:
        i12 = i10;

        i13 = i11;

        r56 = r51;

        if r50 == null goto label14;

        i12 = i10;

        i13 = i11;

        r56 = r51;

        $r30 = r4.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        $z7 = virtualinvoke $r30.<android.content.IntentFilter: boolean matchAction(java.lang.String)>(r50);

        if $z7 == 0 goto label14;

     label12:
        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i11);

        r56 = r51;

        if r51 != null goto label13;

        r56 = r4;

     label13:
        i13 = i11 - 1;

        i12 = i10 - 1;

     label14:
        i11 = i13 + 1;

        i10 = i12;

        r51 = r56;

        goto label10;

     label15:
        r57 = r51;

        if r51 != null goto label16;

        $r25 = new android.content.pm.ResolveInfo;

        specialinvoke $r25.<android.content.pm.ResolveInfo: void <init>()>();

        r57 = $r25;

        $r25.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = r54;

     label16:
        interfaceinvoke r3.<java.util.List: void add(int,java.lang.Object)>(i8, r57);

        r57.<android.content.pm.ResolveInfo: int specificIndex> = i9;

        i8 = i8 + 1;

     label17:
        i9 = i9 + 1;

        goto label02;

     label18:
        i14 = interfaceinvoke r3.<java.util.List: int size()>();

     label19:
        $i15 = i14 - 1;

        if i7 >= $i15 goto label28;

        $r17 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i7);

        r58 = (android.content.pm.ResolveInfo) $r17;

        $r18 = r58.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        if $r18 != null goto label20;

        goto label27;

     label20:
        $r19 = r58.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        r59 = virtualinvoke $r19.<android.content.IntentFilter: java.util.Iterator actionsIterator()>();

        i16 = i14;

        if r59 != null goto label21;

        goto label27;

     label21:
        $z10 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label26;

        $r20 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.lang.String) $r20;

        if r2 == null goto label22;

        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r60);

        if $z5 == 0 goto label22;

        goto label21;

     label22:
        i17 = i7 + 1;

     label23:
        if i17 >= i16 goto label25;

        $r21 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i17);

        r61 = (android.content.pm.ResolveInfo) $r21;

        i18 = i16;

        i19 = i17;

        $r22 = r61.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        if $r22 == null goto label24;

        i18 = i16;

        i19 = i17;

        $r23 = r61.<android.content.pm.ResolveInfo: android.content.IntentFilter filter>;

        $z4 = virtualinvoke $r23.<android.content.IntentFilter: boolean hasAction(java.lang.String)>(r60);

        if $z4 == 0 goto label24;

        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i17);

        i19 = i17 - 1;

        i18 = i16 - 1;

     label24:
        i17 = i19 + 1;

        i16 = i18;

        goto label23;

     label25:
        goto label21;

     label26:
        i14 = i16;

        $i2 = i0 & 64;

        if $i2 != 0 goto label27;

        r58.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = null;

        i14 = i16;

     label27:
        i7 = i7 + 1;

        goto label19;

     label28:
        if r1 == null goto label31;

        i20 = interfaceinvoke r3.<java.util.List: int size()>();

        i21 = 0;

     label29:
        if i21 >= i20 goto label31;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i21);

        $r10 = (android.content.pm.ResolveInfo) $r9;

        r62 = $r10.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r11 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r12 = r62.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r13 = $r12.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label30;

        $r14 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $r15 = r62.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z3 == 0 goto label30;

        interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i21);

        goto label31;

     label30:
        i21 = i21 + 1;

        goto label29;

     label31:
        $i22 = i0 & 64;

        if $i22 != 0 goto label33;

        i23 = interfaceinvoke r3.<java.util.List: int size()>();

        i24 = 0;

     label32:
        if i24 >= i23 goto label33;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i24);

        $r8 = (android.content.pm.ResolveInfo) $r7;

        $r8.<android.content.pm.ResolveInfo: android.content.IntentFilter filter> = null;

        i24 = i24 + 1;

        goto label32;

     label33:
        return r3;
    }

    private java.util.List queryIntentContentProvidersInternal(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String r1, $r8, $r12, r19, r25;
        boolean z0, $z1, $z3, z4, z5, z6, z7, z8, z9, z10;
        com.android.server.pm.UserManagerService $r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4, r24;
        com.android.server.pm.ComponentResolver $r5, r26;
        java.util.List $r6, $r15, r27, r28, r29, r31, r32, r33, r34;
        java.util.ArrayList $r7;
        android.content.pm.ApplicationInfo $r9, $r11;
        android.content.pm.ResolveInfo $r10;
        com.android.server.pm.PackageSetting $r13;
        android.content.Intent $r14, r18;
        java.lang.Throwable $r16, $r17, r35;
        android.content.ComponentName r20;
        android.content.pm.ProviderInfo r22;
        com.android.server.pm.parsing.pkg.AndroidPackage r30;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r18 := @parameter0: android.content.Intent;

        r19 := @parameter1: java.lang.String;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i8);

        if $z1 != 0 goto label01;

        $r15 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r15;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        i9 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i7, i8, i0, 0, 0);

        r20 = virtualinvoke r18.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r20 != null goto label02;

        $r14 = virtualinvoke r18.<android.content.Intent: android.content.Intent getSelector()>();

        if $r14 == null goto label02;

        r18 = virtualinvoke r18.<android.content.Intent: android.content.Intent getSelector()>();

        r20 = virtualinvoke r18.<android.content.Intent: android.content.ComponentName getComponent()>();

        goto label02;

     label02:
        if r20 == null goto label20;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(1);

        r22 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>(r20, i9, i8);

        if r22 == null goto label19;

        $i1 = 8388608 & i9;

        if $i1 == 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        $i2 = 16777216 & i9;

        if $i2 == 0 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        if r1 == null goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        $r8 = virtualinvoke r20.<android.content.ComponentName: java.lang.String getPackageName()>();

        z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        $r9 = r22.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r9.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i4 = $i3 & 128;

        if $i4 == 0 goto label09;

        z7 = 1;

        goto label10;

     label09:
        z7 = 0;

     label10:
        $i5 = r22.<android.content.pm.ProviderInfo: int flags>;

        $i6 = $i5 & 1048576;

        if $i6 != 0 goto label11;

        z8 = 1;

        goto label12;

     label11:
        z8 = 0;

     label12:
        if z0 != 0 goto label15;

        if z4 != 0 goto label13;

        if z6 != 0 goto label13;

        if z7 != 0 goto label14;

     label13:
        if z5 == 0 goto label15;

        if z6 == 0 goto label15;

        if z8 == 0 goto label15;

     label14:
        z9 = 1;

        goto label16;

     label15:
        z9 = 0;

     label16:
        if z7 != 0 goto label17;

        if z6 != 0 goto label17;

        $r11 = r22.<android.content.pm.ProviderInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r12 = $r11.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r13 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r12, 1000);

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r13, i0, i8);

        if $z3 == 0 goto label17;

        z10 = 1;

        goto label18;

     label17:
        z10 = 0;

     label18:
        if z9 != 0 goto label19;

        if z10 != 0 goto label19;

        $r10 = new android.content.pm.ResolveInfo;

        specialinvoke $r10.<android.content.pm.ResolveInfo: void <init>()>();

        $r10.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo> = r22;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r10);

     label19:
        return $r7;

     label20:
        r24 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r24;

     label21:
        r25 = virtualinvoke r18.<android.content.Intent: java.lang.String getPackage()>();

     label22:
        if r25 != null goto label30;

     label23:
        r26 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

     label24:
        r27 = virtualinvoke r26.<com.android.server.pm.ComponentResolver: java.util.List queryProviders(android.content.Intent,java.lang.String,int,int)>(r18, r19, i9, i8);

     label25:
        if r27 != null goto label28;

     label26:
        r28 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r24;

     label27:
        return r28;

     label28:
        r29 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostContentProviderResolutionFilter(java.util.List,java.lang.String,int,int)>(r27, r1, i8, i0);

        exitmonitor r24;

     label29:
        return r29;

     label30:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r25);

        r30 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label31:
        if r30 == null goto label38;

     label32:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $r6 = interfaceinvoke r30.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getProviders()>();

        r31 = virtualinvoke $r5.<com.android.server.pm.ComponentResolver: java.util.List queryProviders(android.content.Intent,java.lang.String,int,java.util.List,int)>(r18, r19, i9, $r6, i8);

     label33:
        if r31 != null goto label36;

     label34:
        r32 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r24;

     label35:
        return r32;

     label36:
        r33 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostContentProviderResolutionFilter(java.util.List,java.lang.String,int,int)>(r31, r1, i8, i0);

        exitmonitor r24;

     label37:
        return r33;

     label38:
        r34 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r24;

     label39:
        return r34;

     label40:
        $r16 := @caughtexception;

        r35 = $r16;

     label41:
        exitmonitor r24;

     label42:
        throw r35;

     label43:
        $r17 := @caughtexception;

        r35 = $r17;

        goto label41;

        catch java.lang.Throwable from label21 to label22 with label40;
        catch java.lang.Throwable from label23 to label24 with label40;
        catch java.lang.Throwable from label24 to label25 with label43;
        catch java.lang.Throwable from label26 to label27 with label43;
        catch java.lang.Throwable from label28 to label29 with label43;
        catch java.lang.Throwable from label30 to label31 with label43;
        catch java.lang.Throwable from label32 to label33 with label43;
        catch java.lang.Throwable from label34 to label35 with label43;
        catch java.lang.Throwable from label36 to label37 with label43;
        catch java.lang.Throwable from label38 to label39 with label43;
        catch java.lang.Throwable from label41 to label42 with label43;
    }

    private java.util.List queryIntentReceiversInternal(android.content.Intent, java.lang.String, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        boolean z0, z1, $z2, $z3, z5, z6, z7, z8, z9, z10, z11, z12, z13;
        java.lang.String r1, $r10, r17, r24;
        com.android.server.pm.UserManagerService $r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5, r23;
        com.android.server.pm.ComponentResolver $r6, $r8;
        java.util.List $r7, $r14, $r22, r25, r26, r27, r29, r30, r31, r32;
        java.util.ArrayList $r9;
        android.content.pm.ApplicationInfo $r11;
        android.content.pm.ResolveInfo $r12;
        android.content.Intent $r13, r16;
        java.lang.Throwable $r15;
        android.content.ComponentName r18;
        android.content.pm.ActivityInfo r20;
        com.android.server.pm.parsing.pkg.AndroidPackage r28;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: android.content.Intent;

        r17 := @parameter1: java.lang.String;

        i11 := @parameter2: int;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z2 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z2 != 0 goto label01;

        $r14 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r14;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "query intent receivers");

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r16, i0, r17, i11);

        i12 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i11, i0, i1, 0, $z3);

        r18 = virtualinvoke r16.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r18 != null goto label02;

        $r13 = virtualinvoke r16.<android.content.Intent: android.content.Intent getSelector()>();

        if $r13 == null goto label02;

        r16 = virtualinvoke r16.<android.content.Intent: android.content.Intent getSelector()>();

        r18 = virtualinvoke r16.<android.content.Intent: android.content.ComponentName getComponent()>();

        goto label02;

     label02:
        if r18 == null goto label26;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(1);

        r20 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>(r18, i12, i0);

        if r20 == null goto label25;

        $i2 = 8388608 & i12;

        if $i2 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        $i3 = 16777216 & i12;

        if $i3 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        $i4 = 33554432 & i12;

        if $i4 == 0 goto label07;

        z7 = 1;

        goto label08;

     label07:
        z7 = 0;

     label08:
        if r1 == null goto label09;

        z8 = 1;

        goto label10;

     label09:
        z8 = 0;

     label10:
        $r10 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        $r11 = r20.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i5 = $r11.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i6 = $i5 & 128;

        if $i6 == 0 goto label11;

        z9 = 1;

        goto label12;

     label11:
        z9 = 0;

     label12:
        $i7 = r20.<android.content.pm.ActivityInfo: int flags>;

        $i8 = $i7 & 1048576;

        if $i8 == 0 goto label13;

        z10 = 1;

        goto label14;

     label13:
        z10 = 0;

     label14:
        if z10 == 0 goto label15;

        $i9 = r20.<android.content.pm.ActivityInfo: int flags>;

        $i10 = $i9 & 2097152;

        if $i10 != 0 goto label15;

        z11 = 1;

        goto label16;

     label15:
        z11 = 0;

     label16:
        if z10 == 0 goto label18;

        if z7 == 0 goto label17;

        if z11 != 0 goto label17;

        goto label18;

     label17:
        z12 = 0;

        goto label19;

     label18:
        z12 = 1;

     label19:
        if z1 != 0 goto label22;

        if z5 != 0 goto label20;

        if z8 != 0 goto label20;

        if z9 != 0 goto label21;

     label20:
        if z6 == 0 goto label22;

        if z8 == 0 goto label22;

        if z12 == 0 goto label22;

     label21:
        z13 = 1;

        goto label23;

     label22:
        z13 = 0;

     label23:
        if z13 != 0 goto label24;

        $r12 = new android.content.pm.ResolveInfo;

        specialinvoke $r12.<android.content.pm.ResolveInfo: void <init>()>();

        $r12.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = r20;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label25;

     label24:
        goto label25;

     label25:
        $r22 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>($r9, r1, z0, i1, 0, i0, r16);

        return $r22;

     label26:
        r23 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r23;

     label27:
        r24 = virtualinvoke r16.<android.content.Intent: java.lang.String getPackage()>();

     label28:
        if r24 != null goto label35;

     label29:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r25 = virtualinvoke $r8.<com.android.server.pm.ComponentResolver: java.util.List queryReceivers(android.content.Intent,java.lang.String,int,int)>(r16, r17, i12, i0);

     label30:
        if r25 != null goto label33;

     label31:
        r26 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r23;

     label32:
        return r26;

     label33:
        r27 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r25, r1, z0, i1, 0, i0, r16);

        exitmonitor r23;

     label34:
        return r27;

     label35:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r24);

        r28 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

     label36:
        if r28 == null goto label43;

     label37:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $r7 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getReceivers()>();

        r29 = virtualinvoke $r6.<com.android.server.pm.ComponentResolver: java.util.List queryReceivers(android.content.Intent,java.lang.String,int,java.util.List,int)>(r16, r17, i12, $r7, i0);

     label38:
        if r29 != null goto label41;

     label39:
        r30 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r23;

     label40:
        return r30;

     label41:
        r31 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostResolutionFilter(java.util.List,java.lang.String,boolean,int,boolean,int,android.content.Intent)>(r29, r1, z0, i1, 0, i0, r16);

        exitmonitor r23;

     label42:
        return r31;

     label43:
        r32 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r23;

     label44:
        return r32;

     label45:
        $r15 := @caughtexception;

     label46:
        exitmonitor r23;

     label47:
        throw $r15;

        catch java.lang.Throwable from label27 to label28 with label45;
        catch java.lang.Throwable from label29 to label30 with label45;
        catch java.lang.Throwable from label31 to label32 with label45;
        catch java.lang.Throwable from label33 to label34 with label45;
        catch java.lang.Throwable from label35 to label36 with label45;
        catch java.lang.Throwable from label37 to label38 with label45;
        catch java.lang.Throwable from label39 to label40 with label45;
        catch java.lang.Throwable from label41 to label42 with label45;
        catch java.lang.Throwable from label43 to label44 with label45;
        catch java.lang.Throwable from label46 to label47 with label45;
    }

    private java.util.List queryIntentServicesInternal(android.content.Intent, java.lang.String, int, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.String r1, $r9, $r13, r20, r26;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0, $z2, z3, z4, z5, z6, z7, z8, z9, z10, z11;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5, r25;
        com.android.server.pm.ComponentResolver $r6, r27;
        java.util.List $r7, $r16, r28, r29, r30, r32, r33, r34, r35;
        java.util.ArrayList $r8;
        android.content.pm.ApplicationInfo $r10, $r12;
        android.content.pm.ResolveInfo $r11;
        com.android.server.pm.PackageSetting $r14;
        android.content.Intent $r15, r19;
        java.lang.Throwable $r17, $r18, r36;
        android.content.ComponentName r21;
        android.content.pm.ServiceInfo r23;
        com.android.server.pm.parsing.pkg.AndroidPackage r31;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r19 := @parameter0: android.content.Intent;

        r20 := @parameter1: java.lang.String;

        i7 := @parameter2: int;

        i8 := @parameter3: int;

        i0 := @parameter4: int;

        z3 := @parameter5: boolean;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i8);

        if $z0 != 0 goto label01;

        $r16 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r16;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserOrProfilePermission(int,int,boolean,boolean,java.lang.String)>(i0, i8, 0, 0, "query intent receivers");

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        i9 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i7, i8, i0, z3, 0);

        r21 = virtualinvoke r19.<android.content.Intent: android.content.ComponentName getComponent()>();

        if r21 != null goto label02;

        $r15 = virtualinvoke r19.<android.content.Intent: android.content.Intent getSelector()>();

        if $r15 == null goto label02;

        r19 = virtualinvoke r19.<android.content.Intent: android.content.Intent getSelector()>();

        r21 = virtualinvoke r19.<android.content.Intent: android.content.ComponentName getComponent()>();

        goto label02;

     label02:
        if r21 == null goto label20;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(1);

        r23 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r21, i9, i8);

        if r23 == null goto label19;

        $i1 = 8388608 & i9;

        if $i1 == 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        $i2 = 16777216 & i9;

        if $i2 == 0 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        if r1 == null goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        $r9 = virtualinvoke r21.<android.content.ComponentName: java.lang.String getPackageName()>();

        z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        $r10 = r23.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r10.<android.content.pm.ApplicationInfo: int privateFlags>;

        $i4 = $i3 & 128;

        if $i4 == 0 goto label09;

        z8 = 1;

        goto label10;

     label09:
        z8 = 0;

     label10:
        $i5 = r23.<android.content.pm.ServiceInfo: int flags>;

        $i6 = $i5 & 1048576;

        if $i6 != 0 goto label11;

        z9 = 1;

        goto label12;

     label11:
        z9 = 0;

     label12:
        if z7 != 0 goto label15;

        if z4 != 0 goto label13;

        if z6 != 0 goto label13;

        if z8 != 0 goto label14;

     label13:
        if z5 == 0 goto label15;

        if z6 == 0 goto label15;

        if z9 == 0 goto label15;

     label14:
        z10 = 1;

        goto label16;

     label15:
        z10 = 0;

     label16:
        if z8 != 0 goto label17;

        if z6 != 0 goto label17;

        $r12 = r23.<android.content.pm.ServiceInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r13 = $r12.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r14 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>($r13, 1000);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r14, i0, i8);

        if $z2 == 0 goto label17;

        z11 = 1;

        goto label18;

     label17:
        z11 = 0;

     label18:
        if z10 != 0 goto label19;

        if z11 != 0 goto label19;

        $r11 = new android.content.pm.ResolveInfo;

        specialinvoke $r11.<android.content.pm.ResolveInfo: void <init>()>();

        $r11.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo> = r23;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r11);

     label19:
        return $r8;

     label20:
        r25 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r25;

     label21:
        r26 = virtualinvoke r19.<android.content.Intent: java.lang.String getPackage()>();

     label22:
        if r26 != null goto label30;

     label23:
        r27 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

     label24:
        r28 = virtualinvoke r27.<com.android.server.pm.ComponentResolver: java.util.List queryServices(android.content.Intent,java.lang.String,int,int)>(r19, r20, i9, i8);

     label25:
        if r28 != null goto label28;

     label26:
        r29 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r25;

     label27:
        return r29;

     label28:
        r30 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostServiceResolutionFilter(java.util.List,java.lang.String,int,int)>(r28, r1, i8, i0);

        exitmonitor r25;

     label29:
        return r30;

     label30:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r26);

        r31 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

     label31:
        if r31 == null goto label38;

     label32:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $r7 = interfaceinvoke r31.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getServices()>();

        r32 = virtualinvoke $r6.<com.android.server.pm.ComponentResolver: java.util.List queryServices(android.content.Intent,java.lang.String,int,java.util.List,int)>(r19, r20, i9, $r7, i8);

     label33:
        if r32 != null goto label36;

     label34:
        r33 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r25;

     label35:
        return r33;

     label36:
        r34 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List applyPostServiceResolutionFilter(java.util.List,java.lang.String,int,int)>(r32, r1, i8, i0);

        exitmonitor r25;

     label37:
        return r34;

     label38:
        r35 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r25;

     label39:
        return r35;

     label40:
        $r17 := @caughtexception;

        r36 = $r17;

     label41:
        exitmonitor r25;

     label42:
        throw r36;

     label43:
        $r18 := @caughtexception;

        r36 = $r18;

        goto label41;

        catch java.lang.Throwable from label21 to label22 with label40;
        catch java.lang.Throwable from label23 to label24 with label40;
        catch java.lang.Throwable from label24 to label25 with label43;
        catch java.lang.Throwable from label26 to label27 with label43;
        catch java.lang.Throwable from label28 to label29 with label43;
        catch java.lang.Throwable from label30 to label31 with label43;
        catch java.lang.Throwable from label32 to label33 with label43;
        catch java.lang.Throwable from label34 to label35 with label43;
        catch java.lang.Throwable from label36 to label37 with label43;
        catch java.lang.Throwable from label38 to label39 with label43;
        catch java.lang.Throwable from label41 to label42 with label43;
    }

    private android.content.pm.ResolveInfo querySkipCurrentProfileIntents(java.util.List, android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        android.content.Intent r2;
        java.lang.String r3;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.Object $r4;
        com.android.server.pm.CrossProfileIntentFilter r5;
        android.content.pm.ResolveInfo r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.content.Intent;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        if r1 == null goto label3;

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = 0;

     label1:
        if i5 >= i2 goto label3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r5 = (com.android.server.pm.CrossProfileIntentFilter) $r4;

        $i3 = virtualinvoke r5.<com.android.server.pm.CrossProfileIntentFilter: int getFlags()>();

        $i4 = $i3 & 2;

        if $i4 == 0 goto label2;

        r6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo createForwardingResolveInfo(com.android.server.pm.CrossProfileIntentFilter,android.content.Intent,java.lang.String,int,int)>(r5, r2, r3, i0, i1);

        if r6 == null goto label2;

        return r6;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return null;
    }

    private void reconcileApps(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.File[] r1;
        int i0, i1, i2, i3, i4, i5;
        java.io.File r2, $r3, r17;
        java.lang.Object $r4, $r9, r19;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r7, $r10, r12, r16;
        boolean $z0, $z1, $z2, $z3, z4, z5;
        java.util.ArrayList $r8, r14, r15;
        java.lang.Throwable $r11;
        java.util.List r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: java.lang.String;

        r13 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List collectAbsoluteCodePaths()>();

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataAppDirectory(java.lang.String)>(r12);

        r1 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>($r3);

        i0 = lengthof r1;

        i2 = 0;

        r14 = null;

     label01:
        if i2 >= i0 goto label11;

        r2 = r1[i2];

        $z0 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>(r2);

        if $z0 != 0 goto label02;

        $z3 = virtualinvoke r2.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label03;

     label02:
        $r7 = virtualinvoke r2.<java.io.File: java.lang.String getName()>();

        $z1 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>($r7);

        if $z1 != 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        if z4 != 0 goto label05;

        r15 = r14;

        goto label10;

     label05:
        r16 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        i1 = interfaceinvoke r13.<java.util.List: int size()>();

        i3 = 0;

     label06:
        z5 = 0;

        if i3 >= i1 goto label08;

        $r9 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i3);

        $r10 = (java.lang.String) $r9;

        $z2 = virtualinvoke $r10.<java.lang.String: boolean startsWith(java.lang.String)>(r16);

        if $z2 == 0 goto label07;

        z5 = 1;

        goto label08;

     label07:
        i3 = i3 + 1;

        goto label06;

     label08:
        r15 = r14;

        if z5 != 0 goto label10;

        r15 = r14;

        if r14 != null goto label09;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r15 = $r8;

     label09:
        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>(r2);

     label10:
        i2 = i2 + 1;

        r14 = r15;

        goto label01;

     label11:
        if r14 == null goto label18;

        i4 = interfaceinvoke r14.<java.util.List: int size()>();

        i5 = 0;

     label12:
        if i5 >= i4 goto label18;

        $r4 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(i5);

        r17 = (java.io.File) $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying orphaned");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r6);

        r19 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r19;

     label13:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeCodePathLI(java.io.File)>(r17);

        exitmonitor r19;

     label14:
        i5 = i5 + 1;

        goto label12;

     label15:
        $r11 := @caughtexception;

     label16:
        exitmonitor r19;

     label17:
        throw $r11;

     label18:
        return;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private java.util.List reconcileAppsDataLI(java.lang.String, int, int, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i3, $i4, i7, i8, i9, i10, i11, i12;
        boolean z0, z1, $z2, $z3, $z5, $z6, $z7;
        java.io.File r1, r65, r66, r75;
        java.lang.StringBuilder $r3, $r15, $r24, $r28, $r36, $r42, $r49, $r55;
        java.lang.String $r9, $r13, $r19, $r27, $r33, $r39, $r47, $r52, $r60, r62, r69, r76, r86;
        com.android.server.pm.Settings $r14;
        java.lang.Object $r20, r82;
        com.android.server.pm.parsing.pkg.AndroidPackage $r21, $r22, $r23;
        java.lang.RuntimeException $r32;
        java.util.ArrayList $r34, r64;
        com.android.server.pm.Installer$InstallerException $r35, $r40, $r48, $r53, r72, r80;
        com.android.server.pm.PackageManagerException $r41, $r54;
        java.lang.Throwable $r61;
        java.io.File[] r68, r74;
        com.android.server.pm.Installer r71, r79;
        java.util.List r83;
        java.util.Iterator r84;
        com.android.server.pm.PackageSetting r85;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r62 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reconcileAppsData for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" u");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" 0x");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" migrateAppData=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r13);

        if z1 == 0 goto label01;

        $r34 = new java.util.ArrayList;

        specialinvoke $r34.<java.util.ArrayList: void <init>()>();

        r64 = $r34;

        goto label02;

     label01:
        r64 = null;

     label02:
        r65 = staticinvoke <android.os.Environment: java.io.File getDataUserCeDirectory(java.lang.String,int)>(r62, i0);

        r66 = staticinvoke <android.os.Environment: java.io.File getDataUserDeDirectory(java.lang.String,int)>(r62, i0);

        $i3 = i1 & 2;

        if $i3 == 0 goto label17;

        $z5 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z5 == 0 goto label04;

        $z6 = staticinvoke <android.os.storage.StorageManager: boolean isUserKeyUnlocked(int)>(i0);

        if $z6 == 0 goto label03;

        goto label04;

     label03:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Yikes, someone asked us to reconcile CE storage while ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was still locked; this would have caused massive data loss!");

        $r32 = new java.lang.RuntimeException;

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.RuntimeException: void <init>(java.lang.String)>($r33);

        throw $r32;

     label04:
        r68 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>(r65);

        i7 = lengthof r68;

        i8 = 0;

     label05:
        if i8 >= i7 goto label16;

        r1 = r68[i8];

        r69 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

     label06:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageKnownAndInstalled(java.lang.String,java.lang.String,int)>(r62, r69, i0);

     label07:
        goto label15;

     label08:
        $r41 := @caughtexception;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying ");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to: ");

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r47 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r47);

     label09:
        r71 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

     label10:
        virtualinvoke r71.<com.android.server.pm.Installer: void destroyAppData(java.lang.String,java.lang.String,int,int,long)>(r62, r69, i0, 2, 0L);

     label11:
        goto label15;

     label12:
        $r53 := @caughtexception;

        r72 = $r53;

        goto label14;

     label13:
        $r48 := @caughtexception;

        r72 = $r48;

     label14:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to destroy: ");

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r72);

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r52);

     label15:
        i8 = i8 + 1;

        goto label05;

     label16:
        goto label17;

     label17:
        $i4 = i1 & 1;

        if $i4 == 0 goto label29;

        r74 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>(r66);

        i9 = lengthof r74;

        i10 = 0;

     label18:
        if i10 >= i9 goto label29;

        r75 = r74[i10];

        r76 = virtualinvoke r75.<java.io.File: java.lang.String getName()>();

     label19:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageKnownAndInstalled(java.lang.String,java.lang.String,int)>(r62, r76, i0);

     label20:
        goto label28;

     label21:
        $r54 := @caughtexception;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Destroying ");

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r75);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to: ");

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r60 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r60);

     label22:
        r79 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

     label23:
        virtualinvoke r79.<com.android.server.pm.Installer: void destroyAppData(java.lang.String,java.lang.String,int,int,long)>(r62, r76, i0, 1, 0L);

     label24:
        goto label28;

     label25:
        $r40 := @caughtexception;

        r80 = $r40;

        goto label27;

     label26:
        $r35 := @caughtexception;

        r80 = $r35;

     label27:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to destroy: ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r80);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r39);

     label28:
        i10 = i10 + 1;

        goto label18;

     label29:
        r82 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r82;

     label30:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r83 = virtualinvoke $r14.<com.android.server.pm.Settings: java.util.List getVolumePackagesLPr(java.lang.String)>(r62);

        exitmonitor r82;

     label31:
        i11 = 0;

        r84 = interfaceinvoke r83.<java.util.List: java.util.Iterator iterator()>();

     label32:
        $z7 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label36;

        $r20 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>();

        r85 = (com.android.server.pm.PackageSetting) $r20;

        r86 = r85.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r21 = r85.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r21 != null goto label33;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Odd, missing scanned package ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r86);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r27);

        goto label32;

     label33:
        if z1 == 0 goto label34;

        $r23 = r85.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z3 = interfaceinvoke $r23.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isCoreApp()>();

        if $z3 != 0 goto label34;

        interfaceinvoke r64.<java.util.List: boolean add(java.lang.Object)>(r86);

        goto label32;

     label34:
        i12 = i11;

        $z2 = virtualinvoke r85.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z2 == 0 goto label35;

        $r22 = r85.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataAndMigrateLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int,boolean)>($r22, i0, i1, z0);

        i12 = i11 + 1;

     label35:
        i11 = i12;

        goto label32;

     label36:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reconcileAppsData finished ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" packages");

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r19);

        return r64;

     label37:
        $r61 := @caughtexception;

     label38:
        exitmonitor r82;

     label39:
        throw $r61;

        catch com.android.server.pm.PackageManagerException from label06 to label07 with label08;
        catch com.android.server.pm.Installer$InstallerException from label09 to label10 with label13;
        catch com.android.server.pm.Installer$InstallerException from label10 to label11 with label12;
        catch com.android.server.pm.PackageManagerException from label19 to label20 with label21;
        catch com.android.server.pm.Installer$InstallerException from label22 to label23 with label26;
        catch com.android.server.pm.Installer$InstallerException from label23 to label24 with label25;
        catch java.lang.Throwable from label30 to label31 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    private void reconcileAppsDataLI(java.lang.String, int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List reconcileAppsDataLI(java.lang.String,int,int,boolean,boolean)>(r1, i0, i1, z0, 0);

        return;
    }

    private static java.util.Map reconcilePackagesLocked(com.android.server.pm.PackageManagerService$ReconcileRequest, com.android.server.pm.KeySetManagerService) throws com.android.server.pm.PackageManagerService$ReconcileFailure
    {
        java.util.Iterator r1, r142, r178;
        java.lang.String r2, $r27, $r50, $r54, $r57, $r60, $r70, $r76, $r81, $r85, $r88, $r95, $r98, $r113, $r120, $r127, r180;
        com.android.server.pm.PackageManagerService$ScanResult r3, r181;
        java.util.List r4;
        com.android.server.pm.PackageManagerService$InstallArgs r5;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, i17, $i18;
        com.android.server.pm.parsing.pkg.ParsedPackage r7, $r26, r183;
        boolean z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, z13, z15, $z16, z17, z18, $z19;
        android.util.ArrayMap $r8, $r9, $r12;
        java.util.Map $r10, $r11, $r29, $r30, $r32, $r34, $r36, r137, $r153, $r173, r184;
        java.util.Set $r13, $r14;
        java.lang.Object $r15, $r16, $r19, $r22, $r23, $r31, $r33, $r35, $r37, $r77, $r154, $r174;
        com.android.server.pm.PackageManagerService$ScanRequest $r17, $r18, $r20, $r25, $r61, $r148, $r149, $r150, $r151;
        java.util.ArrayList $r21;
        com.android.server.pm.PackageSetting $r24, $r62, $r63, $r116, $r123, r152, r155, $r172;
        com.android.server.pm.SharedUserSetting $r38, $r40, $r42, $r45, $r46, $r92, $r99, $r102, $r104, $r108, $r117, $r124;
        com.android.server.pm.PackageSignatures $r41, $r47, $r100, $r105;
        java.lang.Boolean $r43, $r44, $r103, $r107;
        java.lang.StringBuilder $r48, $r55, $r65, $r71, $r79, $r93, $r111, $r121;
        com.android.server.pm.PackageManagerService$ReconcileFailure $r53, $r69, $r75, $r84, $r87, $r91, $r126;
        byte $b12, b16;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r64;
        android.content.pm.SharedLibraryInfo $r78, r141;
        com.android.server.pm.PackageManagerException $r86, $r90, $r128, $r131, $r133, $r134, r165, r185;
        java.lang.Throwable $r89, $r129, $r130, $r132, r164;
        android.content.pm.PackageParser$SigningDetails $r101, $r106, $r109, r157, r160, r162, r163;
        android.content.pm.Signature[] $r110, r167;
        java.lang.IllegalStateException $r119;
        com.android.server.pm.PackageManagerService$ReconcileRequest r135;
        com.android.server.pm.KeySetManagerService r136;
        com.android.server.pm.PackageManagerService$PrepareResult r144, $r175;
        com.android.server.pm.PackageManagerService$DeletePackageAction r146;
        com.android.server.pm.Settings$VersionInfo r159;
        java.lang.RuntimeException $r166;
        com.android.server.pm.PackageManagerService$ReconciledPackage $r171, r182;

        r135 := @parameter0: com.android.server.pm.PackageManagerService$ReconcileRequest;

        r136 := @parameter1: com.android.server.pm.KeySetManagerService;

        r137 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map scannedPackages>;

        $r8 = new android.util.ArrayMap;

        $i1 = interfaceinvoke r137.<java.util.Map: int size()>();

        specialinvoke $r8.<android.util.ArrayMap: void <init>(int)>($i1);

        $r9 = new android.util.ArrayMap;

        $r10 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map allPackages>;

        $i2 = interfaceinvoke $r10.<java.util.Map: int size()>();

        $i3 = interfaceinvoke r137.<java.util.Map: int size()>();

        $i4 = $i2 + $i3;

        specialinvoke $r9.<android.util.ArrayMap: void <init>(int)>($i4);

        $r11 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map allPackages>;

        virtualinvoke $r9.<android.util.ArrayMap: void putAll(java.util.Map)>($r11);

        $r12 = new android.util.ArrayMap;

        specialinvoke $r12.<android.util.ArrayMap: void <init>()>();

        $r13 = interfaceinvoke r137.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label55;

        $r22 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r22;

        $r23 = interfaceinvoke r137.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.pm.PackageManagerService$ScanResult) $r23;

        $r24 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r27 = $r24.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r25 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $r26 = $r25.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26);

        $r29 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map sharedLibrarySource>;

        r4 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List getAllowedSharedLibInfos(com.android.server.pm.PackageManagerService$ScanResult,java.util.Map)>(r3, $r29);

        r141 = r3.<com.android.server.pm.PackageManagerService$ScanResult: android.content.pm.SharedLibraryInfo staticSharedLibraryInfo>;

        if r4 == null goto label04;

        r142 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z9 = interfaceinvoke r142.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label04;

        $r77 = interfaceinvoke r142.<java.util.Iterator: java.lang.Object next()>();

        $r78 = (android.content.pm.SharedLibraryInfo) $r77;

        $z10 = staticinvoke <com.android.server.pm.PackageManagerService: boolean addSharedLibraryToPackageVersionMap(java.util.Map,android.content.pm.SharedLibraryInfo)>($r12, $r78);

        if $z10 == 0 goto label03;

        goto label02;

     label03:
        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Static Shared Library ");

        $r81 = virtualinvoke r141.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r81);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is being installed twice in this set!");

        $r84 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        $r85 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r84.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(java.lang.String)>($r85);

        throw $r84;

     label04:
        $r30 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map installArgs>;

        $r31 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (com.android.server.pm.PackageManagerService$InstallArgs) $r31;

        $r32 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map installResults>;

        $r33 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r6 = (com.android.server.pm.PackageManagerService$PackageInstalledInfo) $r33;

        $r34 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map preparedPackages>;

        $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r144 = (com.android.server.pm.PackageManagerService$PrepareResult) $r35;

        if r5 == null goto label05;

        z11 = 1;

        goto label06;

     label05:
        z11 = 0;

     label06:
        if z11 == 0 goto label08;

        if r6 == null goto label07;

        if r144 == null goto label07;

        goto label08;

     label07:
        $r71 = new java.lang.StringBuilder;

        specialinvoke $r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reconcile arguments are not balanced for ");

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r75 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        $r76 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(java.lang.String)>($r76);

        throw $r75;

     label08:
        if z11 == 0 goto label14;

        $z7 = r144.<com.android.server.pm.PackageManagerService$PrepareResult: boolean replace>;

        if $z7 == 0 goto label14;

        $z8 = r144.<com.android.server.pm.PackageManagerService$PrepareResult: boolean system>;

        if $z8 != 0 goto label14;

        $r61 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $i10 = $r61.<com.android.server.pm.PackageManagerService$ScanRequest: int scanFlags>;

        $i11 = $i10 & 1024;

        if $i11 != 0 goto label09;

        z12 = 1;

        goto label10;

     label09:
        z12 = 0;

     label10:
        if z12 == 0 goto label11;

        b16 = 0;

        goto label12;

     label11:
        b16 = 8;

     label12:
        $r64 = r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r63 = r144.<com.android.server.pm.PackageManagerService$PrepareResult: com.android.server.pm.PackageSetting originalPs>;

        $r62 = r144.<com.android.server.pm.PackageManagerService$PrepareResult: com.android.server.pm.PackageSetting disabledPs>;

        $b12 = 1 | b16;

        r146 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$DeletePackageAction mayDeletePackageLocked(com.android.server.pm.PackageManagerService$PackageRemovedInfo,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,int,android.os.UserHandle)>($r64, $r63, $r62, $b12, null);

        if r146 == null goto label13;

        goto label15;

     label13:
        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("May not delete ");

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to replace");

        $r69 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        $r70 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r69.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(int,java.lang.String)>(-10, $r70);

        throw $r69;

     label14:
        r146 = null;

     label15:
        $r148 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        i17 = $r148.<com.android.server.pm.PackageManagerService$ScanRequest: int scanFlags>;

        $r149 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        i0 = $r149.<com.android.server.pm.PackageManagerService$ScanRequest: int parseFlags>;

        $r150 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r7 = $r150.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $r151 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r152 = $r151.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting disabledPkgSetting>;

        $r153 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map lastStaticSharedLibSettings>;

        $r154 = interfaceinvoke $r153.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r155 = (com.android.server.pm.PackageSetting) $r154;

        if r144 == null goto label16;

        if r155 == null goto label16;

        goto label17;

     label16:
        r155 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

     label17:
        z13 = 0;

        z15 = 0;

        $z16 = virtualinvoke r136.<com.android.server.pm.KeySetManagerService: boolean shouldCheckUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,int)>(r155, i17);

        if $z16 == 0 goto label21;

        $z6 = virtualinvoke r136.<com.android.server.pm.KeySetManagerService: boolean checkUpgradeKeySetLocked(com.android.server.pm.PackageSettingBase,com.android.server.pm.parsing.pkg.AndroidPackage)>(r155, r7);

        if $z6 == 0 goto label18;

        goto label19;

     label18:
        $i9 = i0 & 16;

        if $i9 == 0 goto label20;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package ");

        $r57 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature changed; retaining data.");

        $r60 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, $r60);

     label19:
        r157 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        z15 = 0;

        z17 = 0;

        goto label53;

     label20:
        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r50 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upgrade keys do not match the previously installed version");

        $r53 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r53.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(int,java.lang.String)>(-7, $r54);

        throw $r53;

     label21:
        $r36 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map versionInfos>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r159 = (com.android.server.pm.Settings$VersionInfo) $r37;

        z3 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isCompatSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)>(r159);

        z18 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isRecoverSignatureUpdateNeeded(com.android.server.pm.Settings$VersionInfo)>(r159);

     label22:
        r160 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

     label23:
        $z5 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean verifySignatures(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,android.content.pm.PackageParser$SigningDetails,boolean,boolean)>(r155, r152, r160, z3, z18);

        if $z5 == 0 goto label25;

     label24:
        z15 = 1;

     label25:
        z13 = z15;

     label26:
        r157 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

     label27:
        z13 = z15;

     label28:
        $r38 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r38 == null goto label42;

     label29:
        z13 = z15;

     label30:
        $r40 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r41 = $r40.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        r162 = $r41.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label31:
        r163 = virtualinvoke r162.<android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails mergeLineageWith(android.content.pm.PackageParser$SigningDetails)>(r157);

     label32:
        if r163 == r162 goto label35;

     label33:
        $r46 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r47 = $r46.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r47.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails> = r163;

     label34:
        goto label35;

     label35:
        $r42 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r43 = $r42.<com.android.server.pm.SharedUserSetting: java.lang.Boolean signaturesChanged>;

        if $r43 != null goto label37;

        $r45 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r44 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        $r45.<com.android.server.pm.SharedUserSetting: java.lang.Boolean signaturesChanged> = $r44;

     label36:
        goto label42;

     label37:
        goto label42;

     label38:
        $r130 := @caughtexception;

        r164 = $r130;

        goto label46;

     label39:
        $r131 := @caughtexception;

        r165 = $r131;

        goto label48;

     label40:
        $r129 := @caughtexception;

        r164 = $r129;

        goto label46;

     label41:
        $r128 := @caughtexception;

        r165 = $r128;

        goto label48;

     label42:
        z17 = 0;

        goto label53;

     label43:
        $r89 := @caughtexception;

        r164 = $r89;

        goto label46;

     label44:
        $r90 := @caughtexception;

        r165 = $r90;

        z15 = z13;

        goto label48;

     label45:
        $r132 := @caughtexception;

        r164 = $r132;

     label46:
        $r166 = new java.lang.RuntimeException;

        specialinvoke $r166.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Signing certificates comparison made on incomparable signing details but somehow passed verifySignatures!", r164);

        throw $r166;

     label47:
        $r134 := @caughtexception;

        r165 = $r134;

        z15 = 0;

     label48:
        $i18 = i0 & 16;

        if $i18 == 0 goto label54;

        r157 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r92 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r92 == null goto label51;

        $r99 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r100 = $r99.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r101 = $r100.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        r167 = $r101.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $r102 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r103 = $r102.<com.android.server.pm.SharedUserSetting: java.lang.Boolean signaturesChanged>;

        if $r103 == null goto label50;

        $r109 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r110 = $r109.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i14 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(r167, $r110);

        if $i14 == 0 goto label50;

        $i15 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.product.first_api_level", 0);

        if $i15 > 29 goto label49;

        $r121 = new java.lang.StringBuilder;

        specialinvoke $r121.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature mismatch for shared user: ");

        $r123 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r124 = $r123.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r124);

        $r126 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        $r127 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r126.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(int,java.lang.String)>(-104, $r127);

        throw $r126;

     label49:
        $r111 = new java.lang.StringBuilder;

        specialinvoke $r111.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Signature mismatch on system package ");

        $r113 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r113);

        virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for shared user ");

        $r116 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r117 = $r116.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r117);

        $r119 = new java.lang.IllegalStateException;

        $r120 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r119.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r120);

        throw $r119;

     label50:
        $r104 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r105 = $r104.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r106 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r105.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails> = $r106;

        $r108 = r155.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r107 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r108.<com.android.server.pm.SharedUserSetting: java.lang.Boolean signaturesChanged> = $r107;

        z17 = 1;

        goto label52;

     label51:
        z17 = 0;

     label52:
        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("System package ");

        $r95 = interfaceinvoke r7.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r95);

        virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature changed; retaining data.");

        $r98 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, $r98);

     label53:
        $r171 = new com.android.server.pm.PackageManagerService$ReconciledPackage;

        $r172 = r3.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageSetting pkgSetting>;

        $r173 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map preparedPackages>;

        $r174 = interfaceinvoke $r173.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r175 = (com.android.server.pm.PackageManagerService$PrepareResult) $r174;

        specialinvoke $r171.<com.android.server.pm.PackageManagerService$ReconciledPackage: void <init>(com.android.server.pm.PackageManagerService$ReconcileRequest,com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageSetting,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PrepareResult,com.android.server.pm.PackageManagerService$ScanResult,com.android.server.pm.PackageManagerService$DeletePackageAction,java.util.List,android.content.pm.PackageParser$SigningDetails,boolean,boolean,com.android.server.pm.PackageManagerService$1)>(r135, r5, $r172, r6, $r175, r3, r146, r4, r157, z17, z15, null);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r171);

        goto label01;

     label54:
        $r91 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        specialinvoke $r91.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(com.android.server.pm.PackageManagerException)>(r165);

        throw $r91;

     label55:
        $r14 = interfaceinvoke r137.<java.util.Map: java.util.Set keySet()>();

        r178 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

     label56:
        $z19 = interfaceinvoke r178.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label64;

        $r15 = interfaceinvoke r178.<java.util.Iterator: java.lang.Object next()>();

        r180 = (java.lang.String) $r15;

        $r16 = interfaceinvoke r137.<java.util.Map: java.lang.Object get(java.lang.Object)>(r180);

        r181 = (com.android.server.pm.PackageManagerService$ScanResult) $r16;

        $r17 = r181.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $i5 = $r17.<com.android.server.pm.PackageManagerService$ScanRequest: int scanFlags>;

        $i6 = $i5 & 16;

        if $i6 != 0 goto label63;

        $r18 = r181.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        $i7 = $r18.<com.android.server.pm.PackageManagerService$ScanRequest: int parseFlags>;

        $i8 = $i7 & 16;

        if $i8 == 0 goto label57;

        goto label56;

     label57:
        $r19 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r180);

        r182 = (com.android.server.pm.PackageManagerService$ReconciledPackage) $r19;

        $r20 = r181.<com.android.server.pm.PackageManagerService$ScanResult: com.android.server.pm.PackageManagerService$ScanRequest request>;

        r183 = $r20.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        r184 = r135.<com.android.server.pm.PackageManagerService$ReconcileRequest: java.util.Map sharedLibrarySource>;

     label58:
        $r21 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.ArrayList collectSharedLibraryInfos(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Map,java.util.Map,java.util.Map)>(r183, $r9, r184, $r12);

        r182.<com.android.server.pm.PackageManagerService$ReconciledPackage: java.util.ArrayList collectedSharedLibraryInfos> = $r21;

     label59:
        goto label56;

     label60:
        $r133 := @caughtexception;

        r185 = $r133;

        goto label62;

     label61:
        $r86 := @caughtexception;

        r185 = $r86;

     label62:
        $r87 = new com.android.server.pm.PackageManagerService$ReconcileFailure;

        $i13 = r185.<com.android.server.pm.PackageManagerException: int error>;

        $r88 = virtualinvoke r185.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        specialinvoke $r87.<com.android.server.pm.PackageManagerService$ReconcileFailure: void <init>(int,java.lang.String)>($i13, $r88);

        throw $r87;

     label63:
        goto label56;

     label64:
        return $r8;

        catch com.android.server.pm.PackageManagerException from label21 to label22 with label47;
        catch java.lang.IllegalArgumentException from label21 to label22 with label45;
        catch com.android.server.pm.PackageManagerException from label22 to label23 with label47;
        catch java.lang.IllegalArgumentException from label22 to label23 with label45;
        catch com.android.server.pm.PackageManagerException from label23 to label24 with label44;
        catch java.lang.IllegalArgumentException from label23 to label24 with label43;
        catch com.android.server.pm.PackageManagerException from label26 to label27 with label44;
        catch java.lang.IllegalArgumentException from label26 to label27 with label43;
        catch com.android.server.pm.PackageManagerException from label28 to label29 with label44;
        catch java.lang.IllegalArgumentException from label28 to label29 with label43;
        catch com.android.server.pm.PackageManagerException from label30 to label31 with label44;
        catch java.lang.IllegalArgumentException from label30 to label31 with label43;
        catch com.android.server.pm.PackageManagerException from label31 to label32 with label41;
        catch java.lang.IllegalArgumentException from label31 to label32 with label40;
        catch com.android.server.pm.PackageManagerException from label33 to label34 with label39;
        catch java.lang.IllegalArgumentException from label33 to label34 with label38;
        catch com.android.server.pm.PackageManagerException from label35 to label36 with label39;
        catch java.lang.IllegalArgumentException from label35 to label36 with label38;
        catch com.android.server.pm.PackageManagerException from label57 to label58 with label61;
        catch com.android.server.pm.PackageManagerException from label58 to label59 with label60;
    }

    private static void removeKeystoreDataIfNeeded(android.os.UserManagerInternal, int, int)
    {
        int i0, i1, $i3, $i4, $i5, i6, i7;
        android.security.KeyStore r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.UserManagerInternal r5;
        int[] r6;

        r5 := @parameter0: android.os.UserManagerInternal;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 >= 0 goto label1;

        return;

     label1:
        r0 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        if r0 == null goto label4;

        if i6 != -1 goto label3;

        r6 = virtualinvoke r5.<android.os.UserManagerInternal: int[] getUserIds()>();

        i1 = lengthof r6;

        i7 = 0;

     label2:
        if i7 >= i1 goto label5;

        $i4 = r6[i7];

        $i5 = staticinvoke <android.os.UserHandle: int getUid(int,int)>($i4, i0);

        virtualinvoke r0.<android.security.KeyStore: boolean clearUid(int)>($i5);

        i7 = i7 + 1;

        goto label2;

     label3:
        $i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i6, i0);

        virtualinvoke r0.<android.security.KeyStore: boolean clearUid(int)>($i3);

        goto label5;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not contact keystore to clear entries for app id ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r4);

     label5:
        return;
    }

    private void removeNativeBinariesLI(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        java.lang.String $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        if r1 == null goto label1;

        $r2 = r1.<com.android.server.pm.PackageSetting: java.lang.String legacyNativeLibraryPathString>;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesLI(java.lang.String)>($r2);

     label1:
        return;
    }

    private void removePackageDataLIF(com.android.server.pm.PackageSetting, int[], com.android.server.pm.PackageManagerService$PackageRemovedInfo, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r1;
        boolean z0, $z2, z4, z5, z7, z8, z9, z10, z11;
        int[] r3, $r8, $r9, $r27, r34, r37;
        int $i0, $i1, i2, $i3, i4, i5, i6, i7, i8, i9, i10, $i11, i12, i13, i14;
        com.android.server.pm.PackageManagerService$Injector $r4;
        android.os.UserManagerInternal $r5;
        com.android.server.pm.Settings $r6, $r7, $r12, $r16, $r21;
        android.util.SparseBooleanArray $r10;
        java.lang.String $r11, $r17, $r22, $r23, $r25, $r28, r35, r38, $r54;
        com.android.server.pm.KeySetManagerService $r13;
        com.android.server.pm.AppsFilter $r14;
        com.android.server.pm.PackageSetting $r15, r33;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r18;
        com.android.server.pm.SharedUserSetting $r19;
        com.android.server.pm.UserManagerService $r20, $r26;
        com.android.server.pm.InstallSource $r24;
        java.lang.Throwable $r29, $r30, $r31, $r32, r46;
        com.android.server.pm.parsing.pkg.AndroidPackage r36, r39;
        java.lang.Object r40, r55;
        android.os.Handler r52;
        com.android.server.pm._$$Lambda$PackageManagerService$kHFR9hPPJshGwQIlj0mPFAZIZSI r53;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r33 := @parameter0: com.android.server.pm.PackageSetting;

        r34 := @parameter1: int[];

        r1 := @parameter2: com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r35 = r33.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r36 = r33.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if r1 == null goto label05;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = r35;

        $r24 = r33.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        $r25 = $r24.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String installerPackageName> = $r25;

        if r36 == null goto label01;

        $r28 = interfaceinvoke r36.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r28 == null goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean isStaticSharedLib> = z4;

        if r33 != null goto label03;

        r37 = null;

        goto label04;

     label03:
        $r26 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r27 = virtualinvoke $r26.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        r37 = virtualinvoke r33.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r27, 1);

     label04:
        virtualinvoke r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void populateUsers(int[],com.android.server.pm.PackageSetting)>(r37, r33);

     label05:
        r38 = r33.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $i3 = i2 & -2147483648;

        if $i3 == 0 goto label06;

        z5 = 1;

        goto label07;

     label06:
        z5 = 0;

     label07:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageLI(java.lang.String,boolean)>(r38, z5);

        $i0 = i2 & 1;

        if $i0 != 0 goto label10;

        if r36 == null goto label08;

        r39 = r36;

        goto label09;

     label08:
        $r23 = r33.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r22 = r33.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        r39 = staticinvoke <com.android.server.pm.parsing.pkg.PackageImpl: com.android.server.pm.parsing.pkg.AndroidPackage buildFakeForDeletion(java.lang.String,java.lang.String)>($r23, $r22);

     label09:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r39, -1, 7);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void destroyAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>(r39);

        if r1 == null goto label10;

        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: boolean dataRemoved> = 1;

     label10:
        i4 = -1;

        if r33 == null goto label46;

        $i1 = i2 & 1;

        if $i1 != 0 goto label41;

        $r10 = new android.util.SparseBooleanArray;

        specialinvoke $r10.<android.util.SparseBooleanArray: void <init>()>();

        r40 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r40;

     label11:
        $r11 = r33.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(java.lang.String,int,boolean)>($r11, -1, 1);

     label12:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void clearDefaultBrowserIfNeeded(java.lang.String)>(r35);

     label13:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r12.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke $r13.<com.android.server.pm.KeySetManagerService: void removeAppKeySetDataLPw(java.lang.String)>(r35);

     label14:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $r15 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r35);

        virtualinvoke $r14.<com.android.server.pm.AppsFilter: void removePackage(com.android.server.pm.PackageSetting)>($r15);

     label15:
        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i5 = virtualinvoke $r16.<com.android.server.pm.Settings: int removePackageLPw(java.lang.String)>(r35);

     label16:
        if r1 == null goto label20;

     label17:
        r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int removedAppId> = i5;

     label18:
        goto label20;

     label19:
        $r29 := @caughtexception;

        r46 = $r29;

        goto label38;

     label20:
        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r17 = r33.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r18.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>($r17, null);

     label21:
        $r19 = r33.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r19 == null goto label35;

     label22:
        z7 = 0;

     label23:
        $r20 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r3 = virtualinvoke $r20.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label24:
        i6 = lengthof r3;

     label25:
        i7 = 0;

     label26:
        if i7 >= i6 goto label32;

        i8 = r3[i7];

     label27:
        $r21 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i9 = virtualinvoke $r21.<com.android.server.pm.Settings: int updateSharedUserPermsLPw(com.android.server.pm.PackageSetting,int)>(r33, i8);

     label28:
        if i9 == -1 goto label30;

        if i9 < 0 goto label29;

        goto label30;

     label29:
        z8 = 0;

        goto label31;

     label30:
        z8 = 1;

     label31:
        z7 = z7 | z8;

        i7 = i7 + 1;

        goto label26;

     label32:
        if z7 == 0 goto label35;

     label33:
        r52 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r53 = new com.android.server.pm._$$Lambda$PackageManagerService$kHFR9hPPJshGwQIlj0mPFAZIZSI;

        specialinvoke r53.<com.android.server.pm._$$Lambda$PackageManagerService$kHFR9hPPJshGwQIlj0mPFAZIZSI: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageSetting)>(r0, r33);

        virtualinvoke r52.<android.os.Handler: boolean post(java.lang.Runnable)>(r53);

     label34:
        goto label35;

     label35:
        $r54 = r33.<com.android.server.pm.PackageSetting: java.lang.String name>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivitiesLPw(java.lang.String,android.util.SparseBooleanArray,int)>($r54, $r10, -1);

        exitmonitor r40;

     label36:
        i10 = i5;

        $i11 = virtualinvoke $r10.<android.util.SparseBooleanArray: int size()>();

        if $i11 <= 0 goto label42;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateDefaultHomeNotLocked(android.util.SparseBooleanArray)>($r10);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(-1);

        i10 = i5;

        goto label42;

     label37:
        $r31 := @caughtexception;

        r46 = $r31;

     label38:
        exitmonitor r40;

     label39:
        throw r46;

     label40:
        $r32 := @caughtexception;

        r46 = $r32;

        goto label38;

     label41:
        i10 = -1;

     label42:
        i4 = i10;

        z9 = 0;

        if r34 == null goto label47;

        i4 = i10;

        z9 = 0;

        if r1 == null goto label47;

        i4 = i10;

        z9 = 0;

        $r8 = r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] origUsers>;

        if $r8 == null goto label47;

        i12 = lengthof r34;

        i13 = 0;

        z10 = 0;

     label43:
        i4 = i10;

        z9 = z10;

        if i13 >= i12 goto label47;

        i14 = r34[i13];

        $r9 = r1.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] origUsers>;

        z11 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r9, i14);

        $z2 = virtualinvoke r33.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i14);

        if z11 == $z2 goto label44;

        z10 = 1;

     label44:
        virtualinvoke r33.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(z11, i14);

        if z11 == 0 goto label45;

        virtualinvoke r33.<com.android.server.pm.PackageSetting: void setUninstallReason(int,int)>(0, i14);

        goto label45;

     label45:
        i13 = i13 + 1;

        goto label43;

     label46:
        z9 = 0;

     label47:
        r55 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r55;

        if z0 == 0 goto label51;

     label48:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void writeLPr()>();

     label49:
        goto label51;

     label50:
        $r30 := @caughtexception;

        goto label56;

     label51:
        if z9 == 0 goto label53;

     label52:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r6.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r33);

     label53:
        exitmonitor r55;

     label54:
        if i4 == -1 goto label55;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void removeKeystoreDataIfNeeded(android.os.UserManagerInternal,int,int)>($r5, -1, i4);

     label55:
        return;

     label56:
        exitmonitor r55;

     label57:
        throw $r30;

        catch java.lang.Throwable from label11 to label12 with label37;
        catch java.lang.Throwable from label12 to label13 with label37;
        catch java.lang.Throwable from label13 to label14 with label37;
        catch java.lang.Throwable from label14 to label15 with label37;
        catch java.lang.Throwable from label15 to label16 with label37;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label37;
        catch java.lang.Throwable from label21 to label22 with label37;
        catch java.lang.Throwable from label23 to label24 with label37;
        catch java.lang.Throwable from label24 to label25 with label37;
        catch java.lang.Throwable from label27 to label28 with label37;
        catch java.lang.Throwable from label33 to label34 with label40;
        catch java.lang.Throwable from label35 to label36 with label40;
        catch java.lang.Throwable from label38 to label39 with label40;
        catch java.lang.Throwable from label48 to label49 with label50;
        catch java.lang.Throwable from label52 to label53 with label50;
        catch java.lang.Throwable from label53 to label54 with label50;
        catch java.lang.Throwable from label56 to label57 with label50;
    }

    private void removePackageLI(com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        java.lang.String $r1, $r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        com.android.server.pm.PackageSetting r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        $r1 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r1);

        if r4 == null goto label1;

        $r2 = r4.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removePackageLI(java.lang.String,boolean)>($r2, z0);

     label1:
        return;
    }

    private boolean removeSharedLibraryLPw(java.lang.String, long)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r13, $r18, $r20;
        long l0;
        android.util.LongSparseArray r2;
        int i1, i2, i3, $i4, $i5, i6;
        android.content.pm.SharedLibraryInfo r3;
        int[] r4;
        android.util.ArrayMap $r5, $r9, $r11, $r17;
        java.lang.Object $r6, $r7, $r15, $r19;
        com.android.server.pm.UserManagerService $r8;
        android.content.pm.VersionedPackage $r12, r23;
        boolean $z0;
        com.android.server.pm.Settings $r16;
        java.util.List r21;
        java.util.Iterator r22;
        com.android.server.pm.PackageSetting r24;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (android.util.LongSparseArray) $r6;

        if r2 != null goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r2.<android.util.LongSparseArray: int indexOfKey(long)>(l0);

        if i1 >= 0 goto label2;

        return 0;

     label2:
        $r7 = virtualinvoke r2.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i1);

        r3 = (android.content.pm.SharedLibraryInfo) $r7;

        $r8 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r4 = virtualinvoke $r8.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i2 = lengthof r4;

        i6 = 0;

     label3:
        if i6 >= i2 goto label8;

        i3 = r4[i6];

        r21 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getPackagesUsingSharedLibraryLPr(android.content.pm.SharedLibraryInfo,int,int)>(r3, 0, i3);

        if r21 != null goto label4;

        goto label7;

     label4:
        r22 = interfaceinvoke r21.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r15 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (android.content.pm.VersionedPackage) $r15;

        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r17 = $r16.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r18 = virtualinvoke r23.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $r19 = virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r18);

        r24 = (com.android.server.pm.PackageSetting) $r19;

        if r24 == null goto label6;

        $r20 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke r24.<com.android.server.pm.PackageSetting: void setOverlayPathsForLibrary(java.lang.String,java.util.List,int)>($r20, null, i3);

        goto label6;

     label6:
        goto label5;

     label7:
        i6 = i6 + 1;

        goto label3;

     label8:
        virtualinvoke r2.<android.util.LongSparseArray: void remove(long)>(l0);

        $i4 = virtualinvoke r2.<android.util.LongSparseArray: int size()>();

        if $i4 > 0 goto label9;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r1);

        $i5 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: int getType()>();

        if $i5 != 2 goto label9;

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mStaticLibsByDeclaringPackage>;

        $r12 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        $r13 = virtualinvoke $r12.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r13);

     label9:
        return 1;
    }

    private void removeUnusedPackagesLPw(com.android.server.pm.UserManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        int[] r1;
        com.android.server.pm.PackageSetting r2;
        java.lang.String r3, $r11;
        boolean z0, $z1, $z3, $z4, z5;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.util.Collection $r6;
        java.lang.Object $r7;
        com.android.server.pm.parsing.pkg.AndroidPackage $r8, $r9, $r10;
        com.android.server.pm._$$Lambda$PackageManagerService$rAJdldFfFkjlsYiEzyWtJPRkHn8 $r12;
        android.os.Handler $r13;
        com.android.server.pm.UserManagerService r14;
        java.util.Iterator r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: com.android.server.pm.UserManagerService;

        i0 := @parameter1: int;

        r1 = virtualinvoke r14.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Collection values()>();

        r15 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label9;

        $r7 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.pm.PackageSetting) $r7;

        $r8 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r8 != null goto label2;

        goto label1;

     label2:
        $r9 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r3 = interfaceinvoke $r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $i1 = r2.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i2 = $i1 & 1;

        if $i2 != 0 goto label1;

        $r10 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r11 = interfaceinvoke $r10.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11);

        if $z1 != 0 goto label3;

        goto label1;

     label3:
        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldKeepUninstalledPackageLPr(java.lang.String)>(r3);

        if z0 == 0 goto label4;

        z5 = z0;

        goto label7;

     label4:
        i6 = 0;

     label5:
        z5 = z0;

        $i3 = lengthof r1;

        if i6 >= $i3 goto label7;

        $i4 = r1[i6];

        if $i4 == i0 goto label6;

        $i5 = r1[i6];

        $z3 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>($i5);

        if $z3 == 0 goto label6;

        z5 = 1;

        goto label7;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        if z5 != 0 goto label8;

        $r13 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r12 = new com.android.server.pm._$$Lambda$PackageManagerService$rAJdldFfFkjlsYiEzyWtJPRkHn8;

        specialinvoke $r12.<com.android.server.pm._$$Lambda$PackageManagerService$rAJdldFfFkjlsYiEzyWtJPRkHn8: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int)>(r0, r3, i0);

        virtualinvoke $r13.<android.os.Handler: boolean post(java.lang.Runnable)>($r12);

     label8:
        goto label1;

     label9:
        return;
    }

    private static void renameStaticSharedLibraryPackage(com.android.server.pm.parsing.pkg.ParsedPackage)
    {
        com.android.server.pm.parsing.pkg.ParsedPackage r0;
        java.lang.String $r1, $r2;
        long $l0;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        $r1 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $l0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: long getStaticSharedLibVersion()>();

        $r2 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String toStaticSharedLibraryPackageName(java.lang.String,long)>($r1, $l0);

        interfaceinvoke r0.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPackageName(java.lang.String)>($r2);

        return;
    }

    public static void reportSettingsProblem(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(i0, r0);

        return;
    }

    private static void requestCopyPreoptedFiles()
    {
        long l0, l1, $l3, $l5, l8;
        int $i2;
        java.lang.String $r0, $r5;
        boolean $z0;
        java.lang.StringBuilder $r1;
        byte $b6;
        java.lang.Throwable $r6;

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.cp_system_other_odex", 0);

        if $i2 != 1 goto label7;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.cppreopt", "requested");

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l8 = l0;

     label1:
        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("sys.cppreopt");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("finished");

        if $z0 != 0 goto label6;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(100L);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l8 = l1;

        $l5 = 100000L + l0;

        $b6 = l1 cmp $l5;

        if $b6 <= 0 goto label1;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.cppreopt", "timed-out");

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PackageManager", "cppreopt did not finish!");

        l8 = l1;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cppreopts took ");

        $l3 = l8 - l0;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r5);

     label7:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    private void requestInstantAppResolutionPhaseTwo(android.content.pm.AuxiliaryResolveInfo, android.content.Intent, java.lang.String, java.lang.String, java.lang.String, boolean, android.os.Bundle, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2, r3, r4, $r7;
        boolean z0;
        android.os.Bundle r5;
        int i0;
        android.content.pm.InstantAppRequest $r6;
        int[] $r8;
        android.os.Handler $r9, $r10;
        android.content.pm.AuxiliaryResolveInfo r11;
        android.os.Message r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: android.content.pm.AuxiliaryResolveInfo;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        z0 := @parameter5: boolean;

        r5 := @parameter6: android.os.Bundle;

        i0 := @parameter7: int;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r6 = new android.content.pm.InstantAppRequest;

        $r8 = r11.<android.content.pm.AuxiliaryResolveInfo: int[] hostDigestPrefixSecure>;

        $r7 = r11.<android.content.pm.AuxiliaryResolveInfo: java.lang.String token>;

        specialinvoke $r6.<android.content.pm.InstantAppRequest: void <init>(android.content.pm.AuxiliaryResolveInfo,android.content.Intent,java.lang.String,java.lang.String,java.lang.String,boolean,int,android.os.Bundle,boolean,int[],java.lang.String)>(r11, r1, r2, r3, r4, z0, i0, r5, 0, $r8, $r7);

        r12 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(20, $r6);

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r10.<android.os.Handler: boolean sendMessage(android.os.Message)>(r12);

        return;
    }

    private void resetNetworkPolicies(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.PackageManagerService$Injector $r1;
        com.android.server.net.NetworkPolicyManagerInternal $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.net.NetworkPolicyManagerInternal getNetworkPolicyManagerInternal()>();

        virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerInternal: void resetUserState(int)>(i0);

        return;
    }

    private static com.android.server.pm.PackageManagerService$ScanPartition resolveApexToScanPartition(com.android.server.pm.ApexManager$ActiveApexInfo)
    {
        com.android.server.pm.ApexManager$ActiveApexInfo r0;
        int i0, i1;
        com.android.server.pm.PackageManagerService$ScanPartition r1, $r9;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        java.io.File $r5, $r7, $r10;
        java.lang.String $r6, $r8;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.ApexManager$ActiveApexInfo;

        i1 = 0;

        $r2 = <com.android.server.pm.PackageManagerService: java.util.List SYSTEM_PARTITIONS>;

        i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label1:
        if i1 >= i0 goto label3;

        $r3 = <com.android.server.pm.PackageManagerService: java.util.List SYSTEM_PARTITIONS>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.pm.PackageManagerService$ScanPartition) $r4;

        $r5 = r0.<com.android.server.pm.ApexManager$ActiveApexInfo: java.io.File preInstalledApexPath>;

        $r6 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        $r7 = virtualinvoke r1.<com.android.server.pm.PackageManagerService$ScanPartition: java.io.File getFolder()>();

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>($r8);

        if $z0 == 0 goto label2;

        $r9 = new com.android.server.pm.PackageManagerService$ScanPartition;

        $r10 = r0.<com.android.server.pm.ApexManager$ActiveApexInfo: java.io.File apexDirectory>;

        specialinvoke $r9.<com.android.server.pm.PackageManagerService$ScanPartition: void <init>(java.io.File,com.android.server.pm.PackageManagerService$ScanPartition,int)>($r10, r1, 8388608);

        return $r9;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private android.content.pm.ProviderInfo resolveContentProviderInternal(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, i3, i4;
        android.content.pm.ProviderInfo r1;
        android.content.ComponentName r2;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z1, $z2, z3;
        com.android.server.pm.ComponentResolver $r4;
        com.android.server.pm.Settings $r5, $r6;
        java.lang.String $r7, $r10, $r11, r16;
        android.util.ArrayMap $r8;
        java.lang.Object $r9, $r13, r17;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r12;
        com.android.server.uri.UriGrantsManagerInternal $r14;
        java.lang.Throwable $r15;
        com.android.server.pm.PackageSetting r18;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i3, i0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r1 = virtualinvoke $r4.<com.android.server.pm.ComponentResolver: android.content.pm.ProviderInfo queryProvider(java.lang.String,int,int)>(r16, i4, i0);

        if r1 == null goto label02;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if i0 == $i2 goto label02;

        $r13 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/uri/UriGrantsManagerInternal;");

        $r14 = (com.android.server.uri.UriGrantsManagerInternal) $r13;

        z3 = interfaceinvoke $r14.<com.android.server.uri.UriGrantsManagerInternal: boolean checkAuthorityGrants(int,android.content.pm.ProviderInfo,int,boolean)>(i1, r1, i0, 1);

        goto label03;

     label02:
        z3 = 0;

     label03:
        if z3 != 0 goto label04;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r12.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "resolveContentProvider");

     label04:
        if r1 != null goto label05;

        return null;

     label05:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(android.content.pm.ComponentInfo,int,int)>(r1, i4, i0);

        if $z1 != 0 goto label06;

        return null;

     label06:
        r17 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r17;

     label07:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = r1.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r7);

        r18 = (com.android.server.pm.PackageSetting) $r9;

        r2 = new android.content.ComponentName;

        $r11 = r1.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r10 = r1.<android.content.pm.ProviderInfo: java.lang.String name>;

        specialinvoke r2.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r11, $r10);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r18, i1, r2, 4, i0);

        if $z2 == 0 goto label09;

        exitmonitor r17;

     label08:
        return null;

     label09:
        exitmonitor r17;

     label10:
        return r1;

     label11:
        $r15 := @caughtexception;

     label12:
        exitmonitor r17;

     label13:
        throw $r15;

        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private java.lang.String resolveExternalPackageNameLPr(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r2 == null goto label1;

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

        return $r4;

     label1:
        $r3 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        return $r3;
    }

    private android.content.pm.ResolveInfo resolveIntentInternal(android.content.Intent, java.lang.String, int, int, int, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, i3, i5, i6, i7, $i8;
        boolean z0, $z1, z2, z3, z4, z5;
        java.util.List r2;
        com.android.server.pm.UserManagerService $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, r11;
        android.content.Intent r9;
        android.content.pm.ResolveInfo r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z2 := @parameter5: boolean;

        i6 := @parameter6: int;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "resolveIntent");

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

     label02:
        if z0 != 0 goto label03;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return null;

     label03:
        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

     label04:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r9, i1, r1, i5);

        i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i5, i1, i6, z2, $z1);

     label05:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i2, i1, 0, 0, "resolve intent");

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "queryIntentActivities");

     label06:
        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int,int,int,boolean,boolean)>(r9, r1, i3, i0, i6, i1, z2, 1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label07:
        i7 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i6);

     label08:
        z3 = 0;

        if i7 < 10000 goto label09;

        if z2 != 0 goto label09;

        z4 = 1;

        goto label10;

     label09:
        z4 = 0;

     label10:
        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo chooseBestActivity(android.content.Intent,java.lang.String,int,int,java.util.List,int,boolean)>(r9, r1, i3, i0, r2, i1, z4);

     label11:
        $i8 = i0 & 1;

        if $i8 == 0 goto label12;

        z3 = 1;

     label12:
        if z3 == 0 goto label15;

        if r10 == null goto label15;

     label13:
        z5 = r10.<android.content.pm.ResolveInfo: boolean handleAllWebDataURI>;

     label14:
        if z5 == 0 goto label15;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return null;

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return r10;

     label16:
        $r5 := @caughtexception;

        r11 = $r5;

        goto label20;

     label17:
        $r7 := @caughtexception;

        r11 = $r7;

        goto label20;

     label18:
        $r8 := @caughtexception;

        r11 = $r8;

        goto label20;

     label19:
        $r6 := @caughtexception;

        r11 = $r6;

     label20:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw r11;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
    }

    private java.lang.String resolveInternalPackageNameInternalLocked(java.lang.String, long, int)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0, $l4, $l7, l15, l18;
        android.util.LongSparseArray r1;
        int i1, $i2, $i8, $i9, i10, i11, i13, i14, i16, i17;
        com.android.server.pm.Settings $r2, $r13;
        android.util.ArrayMap $r3;
        java.lang.Object $r4, $r6, $r11;
        java.lang.String $r5, $r9, r16, r17, r20, r22;
        android.content.pm.VersionedPackage $r7, $r8;
        byte $b3, $b5, $b6;
        android.util.LongSparseLongArray $r10, r18;
        android.content.pm.SharedLibraryInfo $r12, r24, r25, r26;
        java.lang.String[] $r14, r21;
        long[] $r15;
        com.android.server.pm.PackageSetting r23;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i10 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r17 = virtualinvoke $r2.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>(r16);

        if r17 == null goto label01;

        goto label02;

     label01:
        r17 = r16;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mStaticLibsByDeclaringPackage>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r17);

        r1 = (android.util.LongSparseArray) $r4;

        if r1 == null goto label15;

        $i2 = virtualinvoke r1.<android.util.LongSparseArray: int size()>();

        if $i2 > 0 goto label03;

        goto label15;

     label03:
        r18 = null;

        i11 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i10);

        if i11 == 1000 goto label06;

        if i11 == 2000 goto label06;

        if i11 == 0 goto label06;

        $r10 = new android.util.LongSparseLongArray;

        specialinvoke $r10.<android.util.LongSparseLongArray: void <init>()>();

        $r11 = virtualinvoke r1.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(0);

        $r12 = (android.content.pm.SharedLibraryInfo) $r11;

        r20 = virtualinvoke $r12.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        r21 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUidInternal(int,int)>(i10, i10);

        r18 = $r10;

        if r21 == null goto label06;

        i1 = lengthof r21;

        i13 = 0;

     label04:
        r18 = $r10;

        if i13 >= i1 goto label06;

        r22 = r21[i13];

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r23 = virtualinvoke $r13.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r22);

        $r14 = r23.<com.android.server.pm.PackageSetting: java.lang.String[] usesStaticLibraries>;

        i14 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>($r14, r20);

        if i14 < 0 goto label05;

        $r15 = r23.<com.android.server.pm.PackageSetting: long[] usesStaticLibrariesVersions>;

        l15 = $r15[i14];

        virtualinvoke $r10.<android.util.LongSparseLongArray: void append(long,long)>(l15, l15);

     label05:
        i13 = i13 + 1;

        goto label04;

     label06:
        if r18 == null goto label07;

        $i9 = virtualinvoke r18.<android.util.LongSparseLongArray: int size()>();

        if $i9 > 0 goto label07;

        return r17;

     label07:
        r24 = null;

        i16 = virtualinvoke r1.<android.util.LongSparseArray: int size()>();

        i17 = 0;

     label08:
        if i17 >= i16 goto label13;

        $r6 = virtualinvoke r1.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i17);

        r25 = (android.content.pm.SharedLibraryInfo) $r6;

        if r18 == null goto label09;

        $l7 = virtualinvoke r25.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        $i8 = virtualinvoke r18.<android.util.LongSparseLongArray: int indexOfKey(long)>($l7);

        if $i8 >= 0 goto label09;

        r26 = r24;

        goto label12;

     label09:
        $r7 = virtualinvoke r25.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        l18 = virtualinvoke $r7.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        $b3 = l0 cmp -1L;

        if $b3 == 0 goto label10;

        r26 = r24;

        $b6 = l18 cmp l0;

        if $b6 != 0 goto label12;

        $r9 = virtualinvoke r25.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        return $r9;

     label10:
        if r24 != null goto label11;

        r26 = r25;

        goto label12;

     label11:
        r26 = r24;

        $r8 = virtualinvoke r24.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        $l4 = virtualinvoke $r8.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        $b5 = l18 cmp $l4;

        if $b5 <= 0 goto label12;

        r26 = r25;

     label12:
        i17 = i17 + 1;

        r24 = r26;

        goto label08;

     label13:
        if r24 == null goto label14;

        $r5 = virtualinvoke r24.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        return $r5;

     label14:
        return r17;

     label15:
        return r17;
    }

    private java.lang.String resolveInternalPackageNameLPr(java.lang.String, long)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r2;
        long l0;
        int $i1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameInternalLocked(java.lang.String,long,int)>(r1, l0, $i1);

        return $r2;
    }

    private android.content.pm.ResolveInfo resolveServiceInternal(android.content.Intent, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.content.pm.ResolveInfo $r4;
        android.content.Intent r5;
        java.util.List r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i0, i1, i2, 0, 0);

        r6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentServicesInternal(android.content.Intent,java.lang.String,int,int,int,boolean)>(r5, r1, $i3, i1, i2, 0);

        if r6 == null goto label2;

        $i4 = interfaceinvoke r6.<java.util.List: int size()>();

        if $i4 < 1 goto label2;

        $r3 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (android.content.pm.ResolveInfo) $r3;

        return $r4;

     label2:
        return null;
    }

    private int[] resolveUserIds(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.UserManagerService $r1;
        int[] r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r2 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        goto label2;

     label1:
        r2 = newarray (int)[1];

        r2[0] = i0;

     label2:
        return r2;
    }

    private void restoreAndPostInstall(int, com.android.server.pm.PackageManagerService$PackageInstalledInfo, com.android.server.pm.PackageManagerService$PostInstallData)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, i4, $i5;
        com.android.server.pm.PackageManagerService$PostInstallData r1;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r2, $r9;
        android.os.Handler $r3, $r4;
        com.android.server.pm.PackageManagerService$PackageFreezer $r5, $r6;
        android.util.SparseArray $r7;
        com.android.server.pm.parsing.pkg.AndroidPackage $r8, $r12;
        boolean $z1, z2, z3, z4, z5, z6;
        java.lang.String $r10;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r11;
        android.os.Message r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r11 := @parameter1: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        r1 := @parameter2: com.android.server.pm.PackageManagerService$PostInstallData;

        $r2 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r2 == null goto label01;

        $r9 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r10 = $r9.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage>;

        if $r10 == null goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $r12 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r12 == null goto label03;

        $r8 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z1 = interfaceinvoke $r8.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isAllowBackup()>();

        if $z1 == 0 goto label03;

        z3 = 1;

        goto label04;

     label03:
        z3 = 0;

     label04:
        if z2 != 0 goto label05;

        if z3 == 0 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        $i3 = r0.<com.android.server.pm.PackageManagerService: int mNextInstallToken>;

        if $i3 >= 0 goto label07;

        r0.<com.android.server.pm.PackageManagerService: int mNextInstallToken> = 1;

     label07:
        i4 = r0.<com.android.server.pm.PackageManagerService: int mNextInstallToken>;

        $i1 = i4 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mNextInstallToken> = $i1;

        if r1 == null goto label08;

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mRunningInstalls>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i4, r1);

     label08:
        z5 = z4;

        $i2 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i2 != 1 goto label10;

        z5 = z4;

        if z4 == 0 goto label10;

        $r5 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        if $r5 == null goto label09;

        $r6 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageFreezer freezer>;

        virtualinvoke $r6.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label09:
        z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean performBackupManagerRestore(int,int,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(i0, i4, r11);

     label10:
        z6 = z5;

        $i5 = r11.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i5 != 1 goto label11;

        z6 = z5;

        if z5 != 0 goto label11;

        z6 = z5;

        if z2 == 0 goto label11;

        z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean performRollbackManagerRestore(int,int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>(i0, i4, r11, r1);

     label11:
        if z6 != 0 goto label12;

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "postInstall", i4);

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r13 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(9, i4, 0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r13);

     label12:
        return;
    }

    private void restoreFromXml(org.xmlpull.v1.XmlPullParser, int, java.lang.String, com.android.server.pm.PackageManagerService$BlobXmlRestorer) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageManagerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, $i2;
        java.lang.String r2, $r4;
        com.android.server.pm.PackageManagerService$BlobXmlRestorer r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.server.pm.PackageManagerService$BlobXmlRestorer;

     label1:
        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 == 2 goto label2;

        if i1 == 1 goto label2;

        goto label1;

     label2:
        if i1 == 2 goto label3;

        return;

     label3:
        $r4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        return;

     label4:
        $i2 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i2 != 4 goto label5;

        goto label4;

     label5:
        interfaceinvoke r3.<com.android.server.pm.PackageManagerService$BlobXmlRestorer: void apply(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        return;
    }

    private void scanDirLI(java.io.File, int, int, long, com.android.server.pm.parsing.PackageParser2, java.util.concurrent.ExecutorService)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i3, i7, i8, i9, i10, $i11, $i12;
        long l2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        com.android.server.pm.ParallelPackageParser $r3;
        java.lang.StringBuilder $r4, $r10, $r18, $r30, $r35;
        java.io.File $r6, $r12, $r20, $r23, $r37, r44, r49;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9, $r15, $r17, $r22, $r25, $r29, $r33, $r40, $r42;
        com.android.server.pm.ApexManager $r24;
        com.android.server.pm.parsing.pkg.ParsedPackage $r26, $r28, r53;
        com.android.server.pm.PackageManagerException $r34, $r43, r54;
        com.android.server.pm.parsing.PackageParser2 r45;
        java.util.concurrent.ExecutorService r46;
        java.io.File[] r47;
        com.android.server.pm.ParallelPackageParser$ParseResult r51;
        java.lang.Throwable r52;
        android.content.pm.PackageParser$PackageParserException r57;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r44 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r45 := @parameter4: com.android.server.pm.parsing.PackageParser2;

        r46 := @parameter5: java.util.concurrent.ExecutorService;

        r47 = virtualinvoke r44.<java.io.File: java.io.File[] listFiles()>();

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r47);

        if $z0 == 0 goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No files in app dir ");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r44);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PackageManager", $r33);

        return;

     label01:
        $r3 = new com.android.server.pm.ParallelPackageParser;

        specialinvoke $r3.<com.android.server.pm.ParallelPackageParser: void <init>(com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r45, r46);

        i7 = 0;

        i3 = lengthof r47;

        i8 = 0;

     label02:
        if i8 >= i3 goto label08;

        r49 = r47[i8];

        $z3 = staticinvoke <android.content.pm.PackageParser: boolean isApkFile(java.io.File)>(r49);

        if $z3 != 0 goto label03;

        $z5 = virtualinvoke r49.<java.io.File: boolean isDirectory()>();

        if $z5 == 0 goto label04;

     label03:
        $r29 = virtualinvoke r49.<java.io.File: java.lang.String getName()>();

        $z4 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>($r29);

        if $z4 != 0 goto label04;

        z6 = 1;

        goto label05;

     label04:
        z6 = 0;

     label05:
        if z6 != 0 goto label06;

        goto label07;

     label06:
        virtualinvoke $r3.<com.android.server.pm.ParallelPackageParser: void submit(java.io.File,int)>(r49, i0);

        i7 = i7 + 1;

     label07:
        i8 = i8 + 1;

        goto label02;

     label08:
        i9 = i7;

     label09:
        if i9 <= 0 goto label21;

        r51 = virtualinvoke $r3.<com.android.server.pm.ParallelPackageParser: com.android.server.pm.ParallelPackageParser$ParseResult take()>();

        r52 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: java.lang.Throwable throwable>;

        if r52 != null goto label16;

        $r26 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        $z2 = interfaceinvoke $r26.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isStaticSharedLibrary()>();

        if $z2 == 0 goto label10;

        $r28 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        staticinvoke <com.android.server.pm.PackageManagerService: void renameStaticSharedLibraryPackage(com.android.server.pm.parsing.pkg.ParsedPackage)>($r28);

     label10:
        r53 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

     label11:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage addForInitLI(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,long,android.os.UserHandle)>(r53, i0, i1, l2, null);

     label12:
        i10 = 1;

        goto label17;

     label13:
        $r34 := @caughtexception;

        r54 = $r34;

        goto label15;

     label14:
        $r43 := @caughtexception;

        r54 = $r43;

     label15:
        i10 = r54.<com.android.server.pm.PackageManagerException: int error>;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to scan ");

        $r37 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile>;

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r40 = virtualinvoke r54.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r42);

        goto label17;

     label16:
        $z1 = r52 instanceof android.content.pm.PackageParser$PackageParserException;

        if $z1 == 0 goto label20;

        r57 = (android.content.pm.PackageParser$PackageParserException) r52;

        i10 = r57.<android.content.pm.PackageParser$PackageParserException: int error>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse ");

        $r12 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke r57.<android.content.pm.PackageParser$PackageParserException: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

     label17:
        $i11 = i1 & 8388608;

        if $i11 == 0 goto label18;

        if i10 == 1 goto label18;

        $r24 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        $r25 = virtualinvoke r44.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r24.<com.android.server.pm.ApexManager: void reportErrorWithApkInApex(java.lang.String)>($r25);

     label18:
        $i12 = i1 & 65536;

        if $i12 != 0 goto label19;

        if i10 == 1 goto label19;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting invalid package at ");

        $r20 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(5, $r22);

        $r23 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeCodePathLI(java.io.File)>($r23);

        goto label19;

     label19:
        i9 = i9 + -1;

        goto label09;

     label20:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected exception occurred while parsing ");

        $r6 = r51.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r52);

        throw $r8;

     label21:
        return;

        catch com.android.server.pm.PackageManagerException from label10 to label11 with label14;
        catch com.android.server.pm.PackageManagerException from label11 to label12 with label13;
    }

    private void scanDirTracedLI(java.io.File, int, int, long, com.android.server.pm.parsing.PackageParser2, java.util.concurrent.ExecutorService)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        long l2;
        com.android.server.pm.parsing.PackageParser2 r1;
        java.util.concurrent.ExecutorService r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r9;
        java.lang.Throwable $r10;
        java.io.File r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r1 := @parameter4: com.android.server.pm.parsing.PackageParser2;

        r2 := @parameter5: java.util.concurrent.ExecutorService;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scanDir [");

        $r6 = virtualinvoke r11.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, $r9);

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long,com.android.server.pm.parsing.PackageParser2,java.util.concurrent.ExecutorService)>(r11, i0, i1, l2, r1, r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label3:
        $r10 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private com.android.server.pm.parsing.pkg.AndroidPackage scanPackageLI(java.io.File, int, int, long, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        long l2;
        com.android.server.pm.parsing.PackageParser2 r1;
        com.android.server.pm.parsing.PackageParser2$Callback $r2;
        android.util.DisplayMetrics $r3;
        boolean $z0, $z1;
        java.lang.String[] $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage $r5;
        java.lang.Throwable $r6, $r9, $r10, $r11, r19;
        android.content.pm.PackageParser$PackageParserException $r7, $r12, r16;
        com.android.server.pm.PackageManagerException $r8;
        java.io.File r13;
        android.os.UserHandle r14;
        com.android.server.pm.parsing.pkg.ParsedPackage r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r14 := @parameter4: android.os.UserHandle;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "parsePackage");

     label01:
        r1 = new com.android.server.pm.parsing.PackageParser2;

        $r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses>;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback>;

        specialinvoke r1.<com.android.server.pm.parsing.PackageParser2: void <init>(java.lang.String[],boolean,android.util.DisplayMetrics,java.io.File,com.android.server.pm.parsing.PackageParser2$Callback)>($r4, $z0, $r3, null, $r2);

     label02:
        r15 = virtualinvoke r1.<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int,boolean)>(r13, i0, 0);

     label03:
        virtualinvoke r1.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label04:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        $z1 = interfaceinvoke r15.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isStaticSharedLibrary()>();

        if $z1 == 0 goto label05;

        staticinvoke <com.android.server.pm.PackageManagerService: void renameStaticSharedLibraryPackage(com.android.server.pm.parsing.pkg.ParsedPackage)>(r15);

     label05:
        $r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage addForInitLI(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,long,android.os.UserHandle)>(r15, i0, i1, l2, r14);

        return $r5;

     label06:
        $r12 := @caughtexception;

        r16 = $r12;

        goto label15;

     label07:
        $r10 := @caughtexception;

     label08:
        virtualinvoke r1.<com.android.server.pm.parsing.PackageParser2: void close()>();

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

     label11:
        virtualinvoke $r10.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r9);

     label12:
        throw $r10;

     label13:
        $r6 := @caughtexception;

        r19 = $r6;

        goto label17;

     label14:
        $r7 := @caughtexception;

        r16 = $r7;

     label15:
        $r8 = staticinvoke <com.android.server.pm.PackageManagerException: com.android.server.pm.PackageManagerException 'from'(android.content.pm.PackageParser$PackageParserException)>(r16);

        throw $r8;

     label16:
        $r11 := @caughtexception;

        r19 = $r11;

     label17:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw r19;

        catch android.content.pm.PackageParser$PackageParserException from label01 to label02 with label14;
        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch android.content.pm.PackageParser$PackageParserException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch android.content.pm.PackageParser$PackageParserException from label11 to label12 with label06;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch android.content.pm.PackageParser$PackageParserException from label12 to label13 with label06;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
    }

    private com.android.server.pm.PackageManagerService$ScanResult scanPackageNewLI(com.android.server.pm.parsing.pkg.ParsedPackage, int, int, long, android.os.UserHandle, java.lang.String) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i3, i4;
        long l1;
        android.os.UserHandle r1;
        java.lang.String r2, r3, $r10, $r12, $r14, $r16, $r18, $r20, $r24, $r27, r33, r38, r41;
        com.android.server.pm.PackageSetting r4, r5, r6;
        java.lang.Object r7;
        com.android.server.pm.PackageManagerService$ScanRequest r8;
        com.android.server.pm.Settings $r9, $r11, $r13, $r19;
        android.util.ArraySet $r15;
        boolean $z0, z1, z2, z3;
        com.android.server.pm.parsing.pkg.AndroidPackage $r17, $r36, r39, r40;
        com.android.server.pm.pkg.PackageStateUnserialized $r21;
        java.lang.StringBuilder $r22;
        java.lang.Throwable $r28, $r29, $r30, $r31, r35;
        com.android.server.pm.parsing.pkg.ParsedPackage r32;
        com.android.server.pm.SharedUserSetting r37;
        com.android.server.pm.PackageManagerService$Injector r42;
        com.android.server.pm.PackageManagerService$ScanResult r43;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r32 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        i0 := @parameter1: int;

        i3 := @parameter2: int;

        l1 := @parameter3: long;

        r1 := @parameter4: android.os.UserHandle;

        r2 := @parameter5: java.lang.String;

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getRealPackage()>();

        r33 = virtualinvoke $r9.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>($r10);

        r3 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getRealPackageName(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r32, r33);

        if r3 == null goto label01;

        staticinvoke <com.android.server.pm.PackageManagerService: void ensurePackageRenamed(com.android.server.pm.parsing.pkg.ParsedPackage,java.lang.String)>(r32, r33);

     label01:
        r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getOriginalPackageLocked(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r32, r33);

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r5 = virtualinvoke $r11.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r12);

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        r6 = virtualinvoke $r13.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>($r14);

        $r15 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mTransferredPackages>;

        $r16 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r15.<android.util.ArraySet: boolean contains(java.lang.Object)>($r16);

        if $z0 == 0 goto label02;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r24 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was transferred to another, but its .apk remains");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r27);

     label02:
        i4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int adjustScanFlags(int,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,android.os.UserHandle,com.android.server.pm.parsing.pkg.AndroidPackage)>(i3, r5, r6, r1, r32);

        r7 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r7;

        if r5 == null goto label06;

     label03:
        $r21 = virtualinvoke r5.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z1 = virtualinvoke $r21.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

     label04:
        goto label08;

     label05:
        $r28 := @caughtexception;

        r35 = $r28;

        goto label25;

     label06:
        if r6 == null goto label07;

        z1 = 1;

        goto label08;

     label07:
        z1 = 0;

     label08:
        $r36 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage>;

        staticinvoke <com.android.server.pm.PackageManagerService: void applyPolicy(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r32, i0, i4, $r36, z1);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void assertPackageIsValid(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r32, i0, i4);

     label09:
        r37 = null;

     label10:
        r38 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getSharedUserId()>();

     label11:
        if r38 == null goto label13;

     label12:
        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r20 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getSharedUserId()>();

        r37 = virtualinvoke $r19.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>($r20, 0, 0, 1);

     label13:
        r39 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage>;

     label14:
        r40 = null;

        if r39 != null goto label15;

        r41 = null;

        goto label16;

     label15:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage mPlatformPackage>;

        r41 = interfaceinvoke $r17.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

     label16:
        r8 = new com.android.server.pm.PackageManagerService$ScanRequest;

     label17:
        if r5 != null goto label18;

        goto label19;

     label18:
        r40 = r5.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label19:
        $r18 = interfaceinvoke r32.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, r41);

     label20:
        specialinvoke r8.<com.android.server.pm.PackageManagerService$ScanRequest: void <init>(com.android.server.pm.parsing.pkg.ParsedPackage,com.android.server.pm.SharedUserSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,java.lang.String,int,int,boolean,android.os.UserHandle,java.lang.String)>(r32, r37, r40, r5, r6, r4, r3, i0, i4, z2, r1, r2);

        r42 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        z3 = r0.<com.android.server.pm.PackageManagerService: boolean mFactoryTest>;

     label21:
        r43 = staticinvoke <com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanResult scanPackageOnlyLI(com.android.server.pm.PackageManagerService$ScanRequest,com.android.server.pm.PackageManagerService$Injector,boolean,long)>(r8, r42, z3, l1);

        exitmonitor r7;

     label22:
        return r43;

     label23:
        $r31 := @caughtexception;

        r35 = $r31;

        goto label25;

     label24:
        $r29 := @caughtexception;

        r35 = $r29;

     label25:
        exitmonitor r7;

     label26:
        throw r35;

     label27:
        $r30 := @caughtexception;

        r35 = $r30;

        goto label25;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label19 to label20 with label24;
        catch java.lang.Throwable from label20 to label21 with label23;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
    }

    static com.android.server.pm.PackageManagerService$ScanResult scanPackageOnlyLI(com.android.server.pm.PackageManagerService$ScanRequest, com.android.server.pm.PackageManagerService$Injector, boolean, long) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService$ScanRequest r0;
        long l0, l4, $l11, $l15, $l16, $l18, $l28, $l36, $l37;
        com.android.server.pm.parsing.pkg.ParsedPackage r1, $r51, $r53, r102;
        com.android.server.pm.PackageSetting r2, r3, $r13, r88, r97;
        int i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i13, $i14, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, i30, i31, $i32, $i33, $i34, $i35;
        java.lang.String r4, $r10, $r12, $r14, $r15, $r16, $r22, $r23, $r26, $r35, $r36, $r37, $r43, $r45, $r46, $r50, $r52, $r64, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r80, $r82, r89, r90, r92, r93, r94, $r101, r103, r106, r108, $r110, $r111, $r112, r114, r116, $r117, r121;
        com.android.server.pm.SharedUserSetting r5, $r39, $r40, $r42, $r78, $r81, $r83;
        android.os.UserHandle r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, $z15, z16, z17, z18, z19, z20, z21, z22, z23, $z24, $z25, z26;
        java.io.File $r9, $r11, $r24, $r54, $r62;
        com.android.server.pm.UserManagerService $r17, $r73;
        long[] $r18, $r74;
        java.util.Set $r19, $r75;
        com.android.server.pm.pkg.PackageStateUnserialized $r20, $r56, $r61;
        android.content.pm.PackageUserState $r21;
        com.android.server.pm.PackageAbiHelper$NativeLibraryPaths $r25, $r55, $r60, $r63;
        byte $b10, $b12, $b17, $b19, $b38;
        java.util.List $r27, $r30, $r31, $r38, $r76, $r77, $r96, r113;
        com.android.server.pm.PackageManagerService$ScanResult $r28;
        java.util.ArrayList $r29, r119;
        java.lang.Object $r32, $r57, $r59;
        android.content.pm.SharedLibraryInfo $r33, r118;
        java.lang.StringBuilder $r34, $r44, $r65, $r79;
        android.util.ArraySet $r41;
        dalvik.system.VMRuntime $r47;
        java.lang.String[] $r48, $r49, r95;
        com.android.server.pm.PackageAbiHelper$Abis $r58, r107;
        com.android.server.pm.parsing.pkg.AndroidPackage $r84, $r85;
        com.android.server.pm.PackageManagerService$Injector r86;
        com.android.server.pm.PackageAbiHelper r87;
        com.android.server.compat.PlatformCompat $r100;
        android.util.Pair r105;
        java.util.Iterator r120;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$ScanRequest;

        r86 := @parameter1: com.android.server.pm.PackageManagerService$Injector;

        z13 := @parameter2: boolean;

        l0 := @parameter3: long;

        r87 = virtualinvoke r86.<com.android.server.pm.PackageManagerService$Injector: com.android.server.pm.PackageAbiHelper getAbiHelper()>();

        virtualinvoke r86.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        r1 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage>;

        r88 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting pkgSetting>;

        r2 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting disabledPkgSetting>;

        r3 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.PackageSetting originalPkgSetting>;

        i1 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: int parseFlags>;

        i2 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: int scanFlags>;

        r4 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: java.lang.String realPkgName>;

        r5 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: com.android.server.pm.SharedUserSetting sharedUserSetting>;

        r6 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: android.os.UserHandle user>;

        z0 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: boolean isPlatformPackage>;

        $r9 = new java.io.File;

        $r10 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r10);

        $r11 = new java.io.File;

        $r12 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getCodePath()>();

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r12);

        r89 = null;

        $i5 = i2 & 4096;

        if $i5 == 0 goto label01;

        z14 = 1;

        goto label02;

     label01:
        z14 = 0;

     label02:
        if z14 != 0 goto label05;

        if r88 == null goto label04;

        $r84 = r88.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r84 == null goto label03;

        $r85 = r88.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z12 = interfaceinvoke $r85.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z12 == 0 goto label03;

        z14 = 1;

        r90 = null;

        goto label06;

     label03:
        r90 = r88.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        r89 = r88.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        goto label06;

     label04:
        z14 = 1;

        r90 = null;

        goto label06;

     label05:
        r90 = null;

     label06:
        if r88 == null goto label11;

        $r78 = r88.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r78 == r5 goto label11;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r80 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r80);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shared user changed from ");

        $r81 = r88.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r81 == null goto label07;

        $r83 = r88.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        r92 = $r83.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        goto label08;

     label07:
        r92 = "<nothing>";

     label08:
        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r92);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        if r5 == null goto label09;

        r93 = r5.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        goto label10;

     label09:
        r93 = "<nothing>";

     label10:
        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; replacing with new");

        $r82 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, $r82);

        r88 = null;

        goto label11;

     label11:
        r94 = r89;

        r95 = null;

        $r96 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getUsesStaticLibraries()>();

        $z15 = interfaceinvoke $r96.<java.util.List: boolean isEmpty()>();

        if $z15 != 0 goto label12;

        $r76 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getUsesStaticLibraries()>();

        $i29 = interfaceinvoke $r76.<java.util.List: int size()>();

        r95 = newarray (java.lang.String)[$i29];

        $r77 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getUsesStaticLibraries()>();

        interfaceinvoke $r77.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r95);

     label12:
        if r88 != null goto label13;

        z16 = 1;

        goto label14;

     label13:
        z16 = 0;

     label14:
        if z16 == 0 goto label19;

        $i25 = i2 & 8192;

        if $i25 == 0 goto label15;

        z17 = 1;

        goto label16;

     label15:
        z17 = 0;

     label16:
        $i26 = 32768 & i2;

        if $i26 == 0 goto label17;

        z18 = 1;

        goto label18;

     label17:
        z18 = 0;

     label18:
        i3 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, null);

        i30 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, null);

        $r69 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        $r70 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getNativeLibraryRootDir()>();

        $r71 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $r72 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $i27 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: int getVersionCode()>();

        $l28 = (long) $i27;

        $r73 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        $r74 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: long[] getUsesStaticLibrariesVersions()>();

        $r75 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.Set getMimeGroups()>();

        r97 = staticinvoke <com.android.server.pm.Settings: com.android.server.pm.PackageSetting createNewSetting(java.lang.String,com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,java.lang.String,java.lang.String,long,int,int,android.os.UserHandle,boolean,boolean,boolean,com.android.server.pm.UserManagerService,java.lang.String[],long[],java.util.Set)>($r69, r3, r2, r4, r5, $r9, $r11, $r70, $r71, $r72, $l28, i3, i30, r6, 1, z17, z18, $r73, r95, $r74, $r75);

        goto label20;

     label19:
        $r13 = new com.android.server.pm.PackageSetting;

        specialinvoke $r13.<com.android.server.pm.PackageSetting: void <init>(com.android.server.pm.PackageSetting)>(r88);

        r97 = $r13;

        $r13.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg> = r1;

        $r14 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getNativeLibraryDir()>();

        $r15 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, $r13);

        $r16 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, $r13);

        $i6 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, $r13);

        $i7 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, $r13);

        $r17 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        $r18 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: long[] getUsesStaticLibrariesVersions()>();

        $r19 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.Set getMimeGroups()>();

        staticinvoke <com.android.server.pm.Settings: void updatePackageSetting(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,java.lang.String,java.lang.String,int,int,com.android.server.pm.UserManagerService,java.lang.String[],long[],java.util.Set)>($r13, r2, r5, $r9, $r11, $r14, $r15, $r16, $i6, $i7, $r17, r95, $r18, $r19);

     label20:
        if z16 == 0 goto label21;

        if r3 == null goto label21;

        $r64 = r3.<com.android.server.pm.PackageSetting: java.lang.String name>;

        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPackageName(java.lang.String)>($r64);

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New package ");

        $r66 = r97.<com.android.server.pm.PackageSetting: java.lang.String realName>;

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" renamed to replace old package ");

        $r67 = r97.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>(5, $r68);

     label21:
        if r6 != null goto label22;

        i31 = 0;

        goto label23;

     label22:
        i31 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

     label23:
        if z16 != 0 goto label28;

        $i23 = i2 & 8192;

        if $i23 == 0 goto label24;

        z19 = 1;

        goto label25;

     label24:
        z19 = 0;

     label25:
        $i24 = i2 & 16384;

        if $i24 == 0 goto label26;

        z20 = 1;

        goto label27;

     label26:
        z20 = 0;

     label27:
        staticinvoke <com.android.server.pm.PackageManagerService: void setInstantAppForUser(com.android.server.pm.PackageManagerService$Injector,com.android.server.pm.PackageSetting,int,boolean,boolean)>(r86, r97, i31, z19, z20);

        goto label28;

     label28:
        if r2 != null goto label29;

        $i22 = i2 & 4;

        if $i22 == 0 goto label30;

        if r97 == null goto label30;

        $z11 = virtualinvoke r97.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z11 == 0 goto label30;

     label29:
        $r20 = virtualinvoke r97.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        virtualinvoke $r20.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setUpdatedSystemApp(boolean)>(1);

     label30:
        $r100 = virtualinvoke r86.<com.android.server.pm.PackageManagerService$Injector: com.android.server.compat.PlatformCompat getCompatibility()>();

        $r101 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.SharedUserSetting,com.android.server.compat.PlatformCompat)>(r1, r5, $r100);

        r102 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSeInfo(java.lang.String)>($r101);

        if i31 != -1 goto label31;

        i31 = 0;

        goto label31;

     label31:
        $r21 = virtualinvoke r97.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i31);

        $r22 = staticinvoke <android.content.pm.SELinuxUtil: java.lang.String assignSeinfoUser(android.content.pm.PackageUserState)>($r21);

        interfaceinvoke r102.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSeInfoUser(java.lang.String)>($r22);

        $z1 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isSystem()>();

        if $z1 == 0 goto label32;

        staticinvoke <com.android.server.pm.PackageManagerService: void configurePackageComponents(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

     label32:
        $r23 = r0.<com.android.server.pm.PackageManagerService$ScanRequest: java.lang.String cpuAbiOverride>;

        r103 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.lang.String deriveAbiOverride(java.lang.String,com.android.server.pm.PackageSetting)>($r23, r97);

        $i8 = i2 & 4;

        if $i8 != 0 goto label35;

        if z14 == 0 goto label34;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "derivePackageAbi");

        z21 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isLibrary(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $r56 = virtualinvoke r97.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z22 = virtualinvoke $r56.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        $z8 = z21 ^ 1;

        r105 = interfaceinvoke r87.<com.android.server.pm.PackageAbiHelper: android.util.Pair derivePackageAbi(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,java.lang.String,boolean)>(r1, z22, r103, $z8);

        $r57 = r105.<android.util.Pair: java.lang.Object first>;

        $r58 = (com.android.server.pm.PackageAbiHelper$Abis) $r57;

        virtualinvoke $r58.<com.android.server.pm.PackageAbiHelper$Abis: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        $r59 = r105.<android.util.Pair: java.lang.Object second>;

        $r60 = (com.android.server.pm.PackageAbiHelper$NativeLibraryPaths) $r59;

        virtualinvoke $r60.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        r106 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $z9 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isSystem()>();

        if $z9 == 0 goto label33;

        $r61 = virtualinvoke r97.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z10 = virtualinvoke $r61.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if $z10 != 0 goto label33;

        if r106 != null goto label33;

        r107 = interfaceinvoke r87.<com.android.server.pm.PackageAbiHelper: com.android.server.pm.PackageAbiHelper$Abis getBundledAppAbis(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        virtualinvoke r107.<com.android.server.pm.PackageAbiHelper$Abis: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        virtualinvoke r107.<com.android.server.pm.PackageAbiHelper$Abis: void applyTo(com.android.server.pm.PackageSetting)>(r97);

        $r62 = <com.android.server.pm.PackageManagerService: java.io.File sAppLib32InstallDir>;

        $r63 = interfaceinvoke r87.<com.android.server.pm.PackageAbiHelper: com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.io.File)>(r1, r97, $r62);

        virtualinvoke $r63.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        goto label33;

     label33:
        goto label37;

     label34:
        $r53 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrimaryCpuAbi(java.lang.String)>(r90);

        interfaceinvoke $r53.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSecondaryCpuAbi(java.lang.String)>(r94);

        $r54 = <com.android.server.pm.PackageManagerService: java.io.File sAppLib32InstallDir>;

        $r55 = interfaceinvoke r87.<com.android.server.pm.PackageAbiHelper: com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.io.File)>(r1, r97, $r54);

        virtualinvoke $r55.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

        goto label37;

     label35:
        $i9 = i2 & 256;

        if $i9 == 0 goto label36;

        $r50 = r97.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString>;

        $r51 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrimaryCpuAbi(java.lang.String)>($r50);

        $r52 = r97.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString>;

        interfaceinvoke $r51.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setSecondaryCpuAbi(java.lang.String)>($r52);

     label36:
        $r24 = <com.android.server.pm.PackageManagerService: java.io.File sAppLib32InstallDir>;

        $r25 = interfaceinvoke r87.<com.android.server.pm.PackageAbiHelper: com.android.server.pm.PackageAbiHelper$NativeLibraryPaths getNativeLibraryPaths(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.io.File)>(r1, r97, $r24);

        virtualinvoke $r25.<com.android.server.pm.PackageAbiHelper$NativeLibraryPaths: void applyTo(com.android.server.pm.parsing.pkg.ParsedPackage)>(r1);

     label37:
        if z0 == 0 goto label40;

        $r47 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z7 = virtualinvoke $r47.<dalvik.system.VMRuntime: boolean is64Bit()>();

        if $z7 == 0 goto label38;

        $r49 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        r108 = $r49[0];

        goto label39;

     label38:
        $r48 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        r108 = $r48[0];

     label39:
        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setPrimaryCpuAbi(java.lang.String)>(r108);

     label40:
        $i32 = i2 & 1;

        if $i32 != 0 goto label42;

        $i21 = i2 & 4;

        if $i21 == 0 goto label42;

        if r103 != null goto label41;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring persisted ABI override ");

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for package ");

        $r45 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r46);

        goto label42;

     label41:
        goto label42;

     label42:
        $r110 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        r97.<com.android.server.pm.PackageSetting: java.lang.String primaryCpuAbiString> = $r110;

        $r111 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getRawSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        r97.<com.android.server.pm.PackageSetting: java.lang.String secondaryCpuAbiString> = $r111;

        r97.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString> = r103;

        $r112 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getNativeLibraryRootDir()>();

        r97.<com.android.server.pm.PackageSetting: java.lang.String legacyNativeLibraryPathString> = $r112;

        r113 = null;

        $i33 = i2 & 16;

        if $i33 != 0 goto label43;

        r113 = null;

        $r39 = r97.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r39 == null goto label43;

        $r42 = r97.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r40 = r97.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        $r41 = $r40.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $r43 = interfaceinvoke r87.<com.android.server.pm.PackageAbiHelper: java.lang.String getAdjustedAbiForSharedUser(java.util.Set,com.android.server.pm.parsing.pkg.AndroidPackage)>($r41, r1);

        r113 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List applyAdjustedAbiToSharedUser(com.android.server.pm.SharedUserSetting,com.android.server.pm.parsing.pkg.ParsedPackage,java.lang.String)>($r42, r1, $r43);

     label43:
        if z13 == 0 goto label44;

        $r38 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getRequestedPermissions()>();

        $z6 = interfaceinvoke $r38.<java.util.List: boolean contains(java.lang.Object)>("android.permission.FACTORY_TEST");

        if $z6 == 0 goto label44;

        z23 = 1;

        goto label45;

     label44:
        z23 = 0;

     label45:
        interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: com.android.server.pm.parsing.pkg.ParsedPackage setFactoryTest(boolean)>(z23);

        $z24 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: boolean isSystem()>();

        if $z24 == 0 goto label46;

        virtualinvoke r97.<com.android.server.pm.PackageSetting: void setIsOrphaned(boolean)>(1);

        goto label46;

     label46:
        l4 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: long getLastModifiedTime(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        $b10 = l0 cmp 0L;

        if $b10 == 0 goto label48;

        $l18 = r97.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $b19 = $l18 cmp 0L;

        if $b19 != 0 goto label47;

        r97.<com.android.server.pm.PackageSetting: long lastUpdateTime> = l0;

        r97.<com.android.server.pm.PackageSetting: long firstInstallTime> = l0;

        goto label50;

     label47:
        $i20 = i2 & 8;

        if $i20 == 0 goto label50;

        r97.<com.android.server.pm.PackageSetting: long lastUpdateTime> = l0;

        goto label50;

     label48:
        $l11 = r97.<com.android.server.pm.PackageSetting: long firstInstallTime>;

        $b12 = $l11 cmp 0L;

        if $b12 != 0 goto label49;

        r97.<com.android.server.pm.PackageSetting: long lastUpdateTime> = l4;

        r97.<com.android.server.pm.PackageSetting: long firstInstallTime> = l4;

        goto label50;

     label49:
        $i13 = i1 & 16;

        if $i13 == 0 goto label50;

        $l16 = r97.<com.android.server.pm.PackageSetting: long timeStamp>;

        $b17 = l4 cmp $l16;

        if $b17 == 0 goto label50;

        r97.<com.android.server.pm.PackageSetting: long lastUpdateTime> = l4;

     label50:
        virtualinvoke r97.<com.android.server.pm.PackageSetting: void setTimeStamp(long)>(l4);

        r97.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg> = r1;

        $i34 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, r97);

        r97.<com.android.server.pm.PackageSetting: int pkgFlags> = $i34;

        $i35 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r1, r97);

        r97.<com.android.server.pm.PackageSetting: int pkgPrivateFlags> = $i35;

        $l36 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        $l37 = r97.<com.android.server.pm.PackageSetting: long versionCode>;

        $b38 = $l36 cmp $l37;

        if $b38 == 0 goto label51;

        $l15 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: long getLongVersionCode()>();

        r97.<com.android.server.pm.PackageSetting: long versionCode> = $l15;

     label51:
        r114 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getVolumeUuid()>();

        $r26 = r97.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r114, $r26);

        if $z2 != 0 goto label54;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update");

        $z5 = virtualinvoke r97.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z5 == 0 goto label52;

        r116 = " system";

        goto label53;

     label52:
        r116 = "";

     label53:
        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" package ");

        $r35 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getPackageName()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" volume from ");

        $r36 = r97.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid>;

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r114);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r37);

        r97.<com.android.server.pm.PackageSetting: java.lang.String volumeUuid> = r114;

     label54:
        $r117 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.lang.String getStaticSharedLibName()>();

        $z25 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r117);

        if $z25 != 0 goto label55;

        r118 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: android.content.pm.SharedLibraryInfo createSharedLibraryForStatic(com.android.server.pm.parsing.pkg.AndroidPackage)>(r1);

        goto label56;

     label55:
        r118 = null;

     label56:
        $r27 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getLibraryNames()>();

        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r27);

        if $z3 != 0 goto label59;

        $r29 = new java.util.ArrayList;

        $r30 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getLibraryNames()>();

        $i14 = interfaceinvoke $r30.<java.util.List: int size()>();

        specialinvoke $r29.<java.util.ArrayList: void <init>(int)>($i14);

        r119 = $r29;

        $r31 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.ParsedPackage: java.util.List getLibraryNames()>();

        r120 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label57:
        $z4 = interfaceinvoke r120.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label58;

        $r32 = interfaceinvoke r120.<java.util.Iterator: java.lang.Object next()>();

        r121 = (java.lang.String) $r32;

        $r33 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: android.content.pm.SharedLibraryInfo createSharedLibraryForDynamic(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r1, r121);

        interfaceinvoke $r29.<java.util.List: boolean add(java.lang.Object)>($r33);

        goto label57;

     label58:
        goto label60;

     label59:
        r119 = null;

     label60:
        z26 = 0;

        if z16 != 0 goto label61;

        z26 = 1;

     label61:
        $r28 = new com.android.server.pm.PackageManagerService$ScanResult;

        specialinvoke $r28.<com.android.server.pm.PackageManagerService$ScanResult: void <init>(com.android.server.pm.PackageManagerService$ScanRequest,boolean,com.android.server.pm.PackageSetting,java.util.List,boolean,android.content.pm.SharedLibraryInfo,java.util.List)>(r0, 1, r97, r113, z26, r118, r119);

        return $r28;
    }

    private com.android.server.pm.PackageManagerService$ScanResult scanPackageTracedLI(com.android.server.pm.parsing.pkg.ParsedPackage, int, int, long, android.os.UserHandle, java.lang.String) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        long l2;
        android.os.UserHandle r1;
        java.lang.String r2;
        java.lang.Throwable $r3;
        com.android.server.pm.parsing.pkg.ParsedPackage r4;
        com.android.server.pm.PackageManagerService$ScanResult r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: com.android.server.pm.parsing.pkg.ParsedPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r1 := @parameter4: android.os.UserHandle;

        r2 := @parameter5: java.lang.String;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "scanPackage");

     label1:
        r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$ScanResult scanPackageNewLI(com.android.server.pm.parsing.pkg.ParsedPackage,int,int,long,android.os.UserHandle,java.lang.String)>(r4, i0, i1, l2, r1, r2);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return r5;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private com.android.server.pm.parsing.pkg.AndroidPackage scanPackageTracedLI(java.io.File, int, int, long, android.os.UserHandle) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        long l2;
        android.os.UserHandle r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;
        java.lang.Throwable $r9;
        java.io.File r10;
        com.android.server.pm.parsing.pkg.AndroidPackage r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        r1 := @parameter4: android.os.UserHandle;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scanPackage [");

        $r5 = virtualinvoke r10.<java.io.File: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, $r8);

     label1:
        r11 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.pkg.AndroidPackage scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)>(r10, i0, i1, l2, r1);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return r11;

     label3:
        $r9 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void scheduleDeferredNoKillInstallObserver(com.android.server.pm.PackageManagerService$PackageInstalledInfo, android.content.pm.IPackageInstallObserver2)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.IPackageInstallObserver2 r1;
        java.lang.String r2;
        com.android.server.pm.parsing.pkg.AndroidPackage $r3;
        java.util.Map $r4;
        android.util.Pair $r5;
        android.os.Handler $r7, $r8;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r9;
        android.os.Message r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        r1 := @parameter1: android.content.pm.IPackageInstallObserver2;

        $r3 = r9.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r2 = interfaceinvoke $r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: java.util.Map mNoKillInstallObservers>;

        $r5 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r9, r1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5);

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r10 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(24, r2);

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r10, 500L);

        return;
    }

    private void scheduleDeferredNoKillPostDelete(com.android.server.pm.PackageManagerService$InstallArgs)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.Handler $r1, $r2;
        com.android.server.pm.PackageManagerService$InstallArgs r3;
        android.os.Message r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: com.android.server.pm.PackageManagerService$InstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r4 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(23, r3);

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r4, 3000L);

        return;
    }

    private void sendApplicationHiddenForUser(java.lang.String, com.android.server.pm.PackageSetting, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r6;
        com.android.server.pm.PackageSetting r2;
        int i0, $i1, $i2;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r4;
        com.android.server.pm.InstallSource $r5;
        int[] $r7, $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        $r4 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageSender)>(r0);

        $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage> = r1;

        $r5 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        $r6 = $r5.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String installerPackageName> = $r6;

        $r7 = newarray (int)[1];

        $r7[0] = i0;

        $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers> = $r7;

        $r8 = newarray (int)[1];

        $r8[0] = i0;

        $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] broadcastUsers> = $r8;

        $i1 = r2.<com.android.server.pm.PackageSetting: int appId>;

        $i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i1);

        $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int uid> = $i2;

        virtualinvoke $r4.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendPackageRemovedBroadcasts(boolean)>(1);

        return;
    }

    private void sendBootCompletedBroadcastToSystemApp(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2;
        int i0;
        android.app.IActivityManager r1;
        com.android.server.pm.UserManagerService $r2, r12;
        android.os.RemoteException $r5, $r6, $r7, r15;
        java.lang.String r8;
        android.content.Intent r9, r10, r13, r14;
        java.lang.String[] r11;
        java.lang.RuntimeException $r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean isUserRunning(int)>(i0);

        if $z1 != 0 goto label01;

        return;

     label01:
        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label02:
        r9 = new android.content.Intent;

        specialinvoke r9.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.LOCKED_BOOT_COMPLETED");

        r10 = virtualinvoke r9.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r8);

     label03:
        if z0 == 0 goto label05;

     label04:
        virtualinvoke r10.<android.content.Intent: android.content.Intent addFlags(int)>(32);

     label05:
        r11 = newarray (java.lang.String)[1];

     label06:
        r11[0] = "android.permission.RECEIVE_BOOT_COMPLETED";

     label07:
        interfaceinvoke r1.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, null, r10, null, null, 0, null, null, r11, -1, null, 0, 0, i0);

        r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

     label08:
        $z2 = virtualinvoke r12.<com.android.server.pm.UserManagerService: boolean isUserUnlockingOrUnlocked(int)>(i0);

        if $z2 == 0 goto label12;

        r13 = new android.content.Intent;

        specialinvoke r13.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        r14 = virtualinvoke r13.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r8);

     label09:
        if z0 == 0 goto label11;

     label10:
        virtualinvoke r14.<android.content.Intent: android.content.Intent addFlags(int)>(32);

     label11:
        interfaceinvoke r1.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, null, r14, null, null, 0, null, null, r11, -1, null, 0, 0, i0);

     label12:
        return;

     label13:
        $r6 := @caughtexception;

        r15 = $r6;

        goto label16;

     label14:
        $r7 := @caughtexception;

        r15 = $r7;

        goto label16;

     label15:
        $r5 := @caughtexception;

        r15 = $r5;

     label16:
        $r16 = virtualinvoke r15.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r16;

        catch android.os.RemoteException from label02 to label03 with label15;
        catch android.os.RemoteException from label04 to label05 with label15;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch android.os.RemoteException from label07 to label08 with label14;
        catch android.os.RemoteException from label08 to label09 with label13;
        catch android.os.RemoteException from label10 to label11 with label13;
        catch android.os.RemoteException from label11 to label12 with label13;
    }

    private void sendDistractingPackagesChanged(java.lang.String[], int[], int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1;
        int[] r2, $r5;
        int i0, i1;
        android.os.Bundle $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>(int)>(3);

        virtualinvoke $r4.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.intent.extra.changed_package_list", r1);

        virtualinvoke $r4.<android.os.Bundle: void putIntArray(java.lang.String,int[])>("android.intent.extra.changed_uid_list", r2);

        virtualinvoke $r4.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.distraction_restrictions", i1);

        $r5 = newarray (int)[1];

        $r5[0] = i0;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.DISTRACTING_PACKAGES_CHANGED", null, $r4, 1073741824, null, null, $r5, null, null);

        return;
    }

    private void sendFirstLaunchBroadcast(java.lang.String, java.lang.String, int[], int[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int[] r3, r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: int[];

        r4 := @parameter3: int[];

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_FIRST_LAUNCH", r1, null, 0, r2, null, r3, r4, null);

        return;
    }

    private void sendMyPackageSuspendedOrUnsuspended(java.lang.String[], boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1;
        boolean z0;
        int i0;
        com.android.server.pm._$$Lambda$PackageManagerService$Ze0Xh0iBIll5jkJ4VcmUxBuZyI8 $r2;
        android.os.Handler $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if z0 == 0 goto label1;

        r4 = "android.intent.action.MY_PACKAGE_SUSPENDED";

        goto label2;

     label1:
        r4 = "android.intent.action.MY_PACKAGE_UNSUSPENDED";

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r2 = new com.android.server.pm._$$Lambda$PackageManagerService$Ze0Xh0iBIll5jkJ4VcmUxBuZyI8;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$PackageManagerService$Ze0Xh0iBIll5jkJ4VcmUxBuZyI8: void <init>(com.android.server.pm.PackageManagerService,boolean,int,java.lang.String[],java.lang.String)>(r0, z0, i0, r1, r4);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void sendPackageAddedForUser(java.lang.String, com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        com.android.server.pm.PackageSetting r2;
        int i0, i1, $i2, $i3;
        boolean z0, $z1, $z2, z3;
        android.content.pm.PackageInstaller$SessionInfo $r3;
        int[] $r4, r5, r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isSystemApp(com.android.server.pm.PackageSetting)>(r2);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)>(r2);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        z0 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

        if z0 == 0 goto label4;

        r5 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        goto label5;

     label4:
        r5 = newarray (int)[1];

        r5[0] = i0;

     label5:
        if z0 == 0 goto label6;

        $r4 = newarray (int)[1];

        $r4[0] = i0;

        r6 = $r4;

        goto label7;

     label6:
        r6 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

     label7:
        $i2 = r2.<com.android.server.pm.PackageSetting: int appId>;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageAddedForNewUsers(java.lang.String,boolean,boolean,int,int[],int[],int)>(r1, z3, 0, $i2, r5, r6, i1);

        $r3 = new android.content.pm.PackageInstaller$SessionInfo;

        specialinvoke $r3.<android.content.pm.PackageInstaller$SessionInfo: void <init>()>();

        $i3 = virtualinvoke r2.<com.android.server.pm.PackageSetting: int getInstallReason(int)>(i0);

        $r3.<android.content.pm.PackageInstaller$SessionInfo: int installReason> = $i3;

        $r3.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String appPackageName> = r1;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendSessionCommitBroadcast(android.content.pm.PackageInstaller$SessionInfo,int)>($r3, i0);

        return;
    }

    private void sendPackageChangedBroadcast(java.lang.String, boolean, java.util.ArrayList, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r2, $r4;
        android.os.Bundle $r3;
        java.lang.String $r5, r14, r16;
        int $i0, i1, i2, i3;
        boolean $z0, z1, z2;
        com.android.server.pm.Settings $r7;
        android.util.ArrayMap $r8;
        com.android.server.pm.AppsFilter $r9;
        int[] $r10, r18, r19;
        java.lang.Throwable $r11, $r12, $r13, r21;
        java.util.ArrayList r15;
        java.lang.String[] r17;
        com.android.server.pm.PackageSetting r20;
        android.util.SparseArray r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        r15 := @parameter2: java.util.ArrayList;

        i1 := @parameter3: int;

        r16 := @parameter4: java.lang.String;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>(int)>(4);

        $r4 = virtualinvoke r15.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.changed_component_name", $r5);

        $i0 = virtualinvoke r15.<java.util.ArrayList: int size()>();

        r17 = newarray (java.lang.String)[$i0];

        virtualinvoke r15.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r17);

        virtualinvoke $r3.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.intent.extra.changed_component_name_list", r17);

        virtualinvoke $r3.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.DONT_KILL_APP", z1);

        virtualinvoke $r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.UID", i1);

        if r16 == null goto label01;

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.intent.extra.REASON", r16);

     label01:
        $z0 = virtualinvoke r15.<java.util.ArrayList: boolean contains(java.lang.Object)>(r14);

        if $z0 != 0 goto label02;

        i2 = 1073741824;

        goto label03;

     label02:
        i2 = 0;

     label03:
        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        z2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>(r14, i3);

        if z2 == 0 goto label04;

        r18 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        goto label05;

     label04:
        r18 = newarray (int)[1];

        r18[0] = i3;

     label05:
        if z2 == 0 goto label06;

        $r10 = newarray (int)[1];

        $r10[0] = i3;

        r19 = $r10;

        goto label07;

     label06:
        r19 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

     label07:
        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label08:
        r20 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>(r14, 1000);

     label09:
        if r20 != null goto label13;

     label10:
        exitmonitor r2;

     label11:
        return;

     label12:
        $r13 := @caughtexception;

        r21 = $r13;

        goto label20;

     label13:
        if z2 == 0 goto label15;

        r22 = null;

     label14:
        goto label17;

     label15:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        r22 = virtualinvoke $r9.<com.android.server.pm.AppsFilter: android.util.SparseArray getVisibilityWhitelist(com.android.server.pm.PackageSetting,int[],android.util.ArrayMap)>(r20, r18, $r8);

     label16:
        goto label14;

     label17:
        exitmonitor r2;

     label18:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_CHANGED", r14, $r3, i2, null, null, r18, r19, r22);

        return;

     label19:
        $r11 := @caughtexception;

        r21 = $r11;

     label20:
        exitmonitor r2;

     label21:
        throw r21;

     label22:
        $r12 := @caughtexception;

        r21 = $r12;

        goto label20;

        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label22;
    }

    private void sendPackagesSuspendedForUser(java.lang.String[], int[], int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int[] r1, $r4;
        int i0;
        boolean z0;
        android.os.Bundle $r3;
        java.lang.String[] r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>(int)>(3);

        virtualinvoke $r3.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.intent.extra.changed_package_list", r5);

        virtualinvoke $r3.<android.os.Bundle: void putIntArray(java.lang.String,int[])>("android.intent.extra.changed_uid_list", r1);

        if z0 == 0 goto label1;

        r6 = "android.intent.action.PACKAGES_SUSPENDED";

        goto label2;

     label1:
        r6 = "android.intent.action.PACKAGES_UNSUSPENDED";

     label2:
        $r4 = newarray (int)[1];

        $r4[0] = i0;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>(r6, null, $r3, 1073741824, null, null, $r4, null, null);

        return;
    }

    private void sendResourcesChangedBroadcast(boolean, boolean, java.util.ArrayList, android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1;
        java.util.ArrayList r1;
        android.content.IIntentReceiver r2;
        int i0, $i1, i2;
        java.lang.String[] r3;
        int[] r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r5;
        java.lang.Object $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.util.ArrayList;

        r2 := @parameter3: android.content.IIntentReceiver;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r3 = newarray (java.lang.String)[i0];

        r4 = newarray (int)[i0];

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r6;

        $r7 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r3[i2] = $r7;

        $i1 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        r4[i2] = $i1;

        i2 = i2 + 1;

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.lang.String[],int[],android.content.IIntentReceiver)>(z0, z1, r3, r4, r2);

        return;
    }

    private void sendResourcesChangedBroadcast(boolean, boolean, java.util.ArrayList, int[], android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1;
        java.util.ArrayList r1;
        int[] r2;
        android.content.IIntentReceiver r3;
        int $i0;
        java.lang.String[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 := @parameter2: java.util.ArrayList;

        r2 := @parameter3: int[];

        r3 := @parameter4: android.content.IIntentReceiver;

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.lang.String[],int[],android.content.IIntentReceiver)>(z0, z1, $r6, r2, r3);

        return;
    }

    private void sendResourcesChangedBroadcast(boolean, boolean, java.lang.String[], int[], android.content.IIntentReceiver)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1;
        int[] r1;
        android.content.IIntentReceiver r2;
        int $i0;
        android.os.Bundle $r4;
        java.lang.String[] r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r5 := @parameter2: java.lang.String[];

        r1 := @parameter3: int[];

        r2 := @parameter4: android.content.IIntentReceiver;

        $i0 = lengthof r5;

        if $i0 <= 0 goto label5;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        virtualinvoke $r4.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.intent.extra.changed_package_list", r5);

        if r1 == null goto label1;

        virtualinvoke $r4.<android.os.Bundle: void putIntArray(java.lang.String,int[])>("android.intent.extra.changed_uid_list", r1);

     label1:
        if z1 == 0 goto label2;

        virtualinvoke $r4.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.REPLACING", z1);

     label2:
        if z0 == 0 goto label3;

        r6 = "android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE";

        goto label4;

     label3:
        r6 = "android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE";

     label4:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>(r6, null, $r4, 0, null, r2, null, null, null);

     label5:
        return;
    }

    private void setEnableRollbackCode(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(21);

        r1.<android.os.Message: int arg1> = i0;

        r1.<android.os.Message: int arg2> = i1;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    private void setEnabledSetting(java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i5, $i6, $i7, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, $i20, i25;
        android.content.Context $r1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        java.lang.String $r3, $r7, $r12, $r21, $r26, $r47, $r56, $r66, $r73, $r76, $r81, r102, r103, r104, r106, r116, r122, $r127, r131;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.lang.Object $r6, r107, r124, r129, r132, r135, r142;
        boolean $z0, $z1, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z15, z16, z17, z18, z19, z20, z21, z22;
        int[] $r13;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r14, $r17, $r18;
        android.os.Handler $r15, $r16;
        long $l8, l21, l22, l23, l24;
        byte $b9;
        com.android.server.pm.permission.PermissionsState $r27;
        java.lang.SecurityException $r34, $r46, $r55, r113, r125;
        java.lang.StringBuilder $r35, $r40, $r48, $r52, $r77, r110, r112, r114, r115, r117, r126, r139, r140, r141;
        com.android.server.pm.ProtectedPackages $r51;
        java.lang.IllegalArgumentException $r80, r109, r111, r138;
        java.lang.Throwable $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, r118, r128, r137, r143, r145;
        com.android.server.pm.PackageSetting r108;
        com.android.server.pm.parsing.pkg.AndroidPackage r130, r136;
        java.util.ArrayList r144;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r102 := @parameter0: java.lang.String;

        r103 := @parameter1: java.lang.String;

        i17 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        r104 := @parameter5: java.lang.String;

        if i17 == 0 goto label002;

        if i17 == 1 goto label002;

        if i17 == 2 goto label002;

        if i17 == 3 goto label002;

        if i17 != 4 goto label001;

        goto label002;

     label001:
        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid new component state: ");

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r80 = new java.lang.IllegalArgumentException;

        $r81 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r81);

        throw $r80;

     label002:
        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i2 != 1000 goto label003;

        i18 = 0;

        goto label004;

     label003:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        i18 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CHANGE_COMPONENT_ENABLED_STATE");

     label004:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i2, i1, 0, 1, "set enabled");

        if i18 != 0 goto label005;

        z13 = 1;

        goto label006;

     label005:
        z13 = 0;

     label006:
        if r103 != null goto label007;

        z14 = 1;

        goto label008;

     label007:
        z14 = 0;

     label008:
        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i2);

        if $r3 == null goto label009;

        z15 = 1;

        goto label010;

     label009:
        z15 = 0;

     label010:
        if z14 == 0 goto label011;

        r106 = r102;

        goto label012;

     label011:
        r106 = r103;

     label012:
        r107 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r107;

     label013:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r102);

        r108 = (com.android.server.pm.PackageSetting) $r6;

     label014:
        if r108 != null goto label024;

        if z15 != 0 goto label017;

        if r103 != null goto label016;

     label015:
        r109 = new java.lang.IllegalArgumentException;

        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        $r76 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r109.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r76);

        throw r109;

     label016:
        r111 = new java.lang.IllegalArgumentException;

        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown component: ");

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        $r73 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r111.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r73);

        throw r111;

     label017:
        r113 = new java.lang.SecurityException;

        r114 = new java.lang.StringBuilder;

        specialinvoke r114.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to change component state; pid=");

        $i16 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

     label018:
        if r103 != null goto label021;

     label019:
        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", package=");

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        r116 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.String toString()>();

     label020:
        goto label022;

     label021:
        r117 = new java.lang.StringBuilder;

        specialinvoke r117.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", component=");

        virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        r116 = virtualinvoke r117.<java.lang.StringBuilder: java.lang.String toString()>();

     label022:
        virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116);

        $r66 = virtualinvoke r114.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r113.<java.lang.SecurityException: void <init>(java.lang.String)>($r66);

        throw r113;

     label023:
        $r85 := @caughtexception;

        r118 = $r85;

        goto label148;

     label024:
        exitmonitor r107;

     label025:
        $i3 = r108.<com.android.server.pm.PackageSetting: int appId>;

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i2, $i3);

        if $z0 != 0 goto label031;

        if z13 == 0 goto label028;

        $z11 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r108, i2, i1);

        if $z11 == 0 goto label026;

        goto label028;

     label026:
        $r51 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        $z12 = virtualinvoke $r51.<com.android.server.pm.ProtectedPackages: boolean isPackageStateProtected(int,java.lang.String)>(i1, r102);

        if $z12 != 0 goto label027;

        goto label031;

     label027:
        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot disable a protected package: ");

        virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        $r55 = new java.lang.SecurityException;

        $r56 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.lang.SecurityException: void <init>(java.lang.String)>($r56);

        throw $r55;

     label028:
        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to change component state; pid=");

        $i15 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        if r103 != null goto label029;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", package=");

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        r122 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label030;

     label029:
        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", component=");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        r122 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

     label030:
        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r122);

        $r46 = new java.lang.SecurityException;

        $r47 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<java.lang.SecurityException: void <init>(java.lang.String)>($r47);

        throw $r46;

     label031:
        $r7 = <android.content.pm.PackageManager: java.lang.String APP_DETAILS_ACTIVITY_CLASS_NAME>;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r103);

        if $z1 == 0 goto label033;

        if z13 == 0 goto label032;

        goto label033;

     label032:
        $r34 = new java.lang.SecurityException;

        specialinvoke $r34.<java.lang.SecurityException: void <init>(java.lang.String)>("Cannot disable a system-generated component");

        throw $r34;

     label033:
        r124 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r124;

        if i2 != 2000 goto label040;

     label034:
        $i13 = r108.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i14 = $i13 & 256;

        if $i14 != 0 goto label040;

        i19 = virtualinvoke r108.<com.android.server.pm.PackageSetting: int getEnabled(int)>(i1);

     label035:
        if r103 != null goto label038;

        if i19 == 3 goto label036;

        if i19 == 0 goto label036;

        if i19 != 1 goto label038;

     label036:
        if i17 == 3 goto label037;

        if i17 == 0 goto label037;

        if i17 != 1 goto label038;

     label037:
        goto label040;

     label038:
        r125 = new java.lang.SecurityException;

        r126 = new java.lang.StringBuilder;

        specialinvoke r126.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shell cannot change component state for ");

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r127 = virtualinvoke r126.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r125.<java.lang.SecurityException: void <init>(java.lang.String)>($r127);

        throw r125;

     label039:
        $r91 := @caughtexception;

        r128 = $r91;

        goto label144;

     label040:
        exitmonitor r124;

     label041:
        if r103 != null goto label064;

        r129 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r129;

     label042:
        $i12 = virtualinvoke r108.<com.android.server.pm.PackageSetting: int getEnabled(int)>(i1);

        if $i12 != i17 goto label044;

        exitmonitor r129;

     label043:
        return;

     label044:
        exitmonitor r129;

     label045:
        r130 = r108.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z7 = interfaceinvoke r130.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z7 == 0 goto label046;

        $z10 = interfaceinvoke r130.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z10 == 0 goto label046;

        z16 = 1;

        goto label047;

     label046:
        z16 = 0;

     label047:
        if z16 == 0 goto label049;

        if i17 == 0 goto label048;

        if i17 != 1 goto label049;

     label048:
        $z9 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean enableCompressedPackage(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r130, r108);

        if $z9 != 0 goto label049;

        return;

     label049:
        if i17 == 0 goto label051;

        if i17 != 1 goto label050;

        goto label051;

     label050:
        r131 = r104;

        goto label052;

     label051:
        r131 = null;

     label052:
        r132 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r132;

     label053:
        virtualinvoke r108.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(i17, i1, r131);

     label054:
        if i17 == 3 goto label055;

        if i17 != 2 goto label056;

     label055:
        $r27 = virtualinvoke r108.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $z8 = virtualinvoke $r27.<com.android.server.pm.permission.PermissionsState: boolean hasPermission(java.lang.String,int)>("android.permission.SUSPEND_APPS", i1);

        if $z8 == 0 goto label056;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void unsuspendForSuspendingPackage(java.lang.String,int)>(r102, i1);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeAllDistractingPackageRestrictions(int)>(i1);

     label056:
        exitmonitor r132;

     label057:
        goto label087;

     label058:
        $r99 := @caughtexception;

     label059:
        exitmonitor r132;

     label060:
        throw $r99;

     label061:
        $r100 := @caughtexception;

     label062:
        exitmonitor r129;

     label063:
        throw $r100;

     label064:
        r135 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r135;

     label065:
        r136 = r108.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label066:
        if r136 == null goto label070;

     label067:
        $z6 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean hasComponentClassName(com.android.server.pm.parsing.pkg.AndroidPackage,java.lang.String)>(r136, r103);

        if $z6 != 0 goto label075;

     label068:
        goto label070;

     label069:
        $r89 := @caughtexception;

        r137 = $r89;

        goto label140;

     label070:
        if r136 == null goto label074;

     label071:
        $i11 = interfaceinvoke r136.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        if $i11 >= 16 goto label073;

     label072:
        goto label074;

     label073:
        r138 = new java.lang.IllegalArgumentException;

        r139 = new java.lang.StringBuilder;

        specialinvoke r139.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component class ");

        virtualinvoke r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        virtualinvoke r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in ");

        virtualinvoke r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        $r26 = virtualinvoke r139.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r138.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw r138;

     label074:
        r140 = new java.lang.StringBuilder;

        specialinvoke r140.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed setComponentEnabledSetting: component class ");

        virtualinvoke r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        virtualinvoke r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in ");

        virtualinvoke r140.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r102);

        $r12 = virtualinvoke r140.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r12);

     label075:
        if i17 == 0 goto label082;

        if i17 == 1 goto label080;

        if i17 == 2 goto label078;

     label076:
        r141 = new java.lang.StringBuilder;

        specialinvoke r141.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r141.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid new component state: ");

        virtualinvoke r141.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i17);

        $r21 = virtualinvoke r141.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r21);

        exitmonitor r135;

     label077:
        return;

     label078:
        $z5 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean disableComponentLPw(java.lang.String,int)>(r103, i1);

        if $z5 != 0 goto label086;

        exitmonitor r135;

     label079:
        return;

     label080:
        $z4 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean enableComponentLPw(java.lang.String,int)>(r103, i1);

        if $z4 != 0 goto label086;

        exitmonitor r135;

     label081:
        return;

     label082:
        z17 = virtualinvoke r108.<com.android.server.pm.PackageSetting: boolean restoreComponentLPw(java.lang.String,int)>(r103, i1);

     label083:
        if z17 != 0 goto label086;

     label084:
        exitmonitor r135;

     label085:
        return;

     label086:
        exitmonitor r135;

     label087:
        r142 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r142;

        $i20 = i0 & 2;

        if $i20 == 0 goto label091;

     label088:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUserInternalLocked(int)>(i1);

     label089:
        goto label092;

     label090:
        $r98 := @caughtexception;

        r143 = $r98;

        goto label136;

     label091:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i1);

     label092:
        $r13 = newarray (int)[1];

        $r13[0] = i1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>(r108, $r13);

        l21 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label093:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateInstantAppInstallerLocked(java.lang.String)>(r102);

     label094:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l21);

     label095:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        r144 = virtualinvoke $r14.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: java.util.ArrayList get(int,java.lang.String)>(i1, r102);

     label096:
        if r144 != null goto label097;

        z18 = 1;

        goto label098;

     label097:
        z18 = 0;

     label098:
        if z18 == 0 goto label101;

     label099:
        r144 = new java.util.ArrayList;

        specialinvoke r144.<java.util.ArrayList: void <init>()>();

     label100:
        goto label101;

     label101:
        z19 = virtualinvoke r144.<java.util.ArrayList: boolean contains(java.lang.Object)>(r106);

     label102:
        if z19 != 0 goto label104;

     label103:
        virtualinvoke r144.<java.util.ArrayList: boolean add(java.lang.Object)>(r106);

     label104:
        $i5 = i0 & 1;

        if $i5 != 0 goto label107;

     label105:
        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r18.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void remove(int,java.lang.String)>(i1, r102);

     label106:
        z20 = 1;

        goto label120;

     label107:
        if z18 == 0 goto label109;

     label108:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r17.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>(i1, r102, r144);

     label109:
        $r15 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        z21 = virtualinvoke $r15.<android.os.Handler: boolean hasMessages(int)>(1);

     label110:
        if z21 != 0 goto label119;

     label111:
        l22 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label112:
        $l8 = r0.<com.android.server.pm.PackageManagerService: long mServiceStartWithDelay>;

        $b9 = l22 cmp $l8;

        if $b9 <= 0 goto label114;

     label113:
        l23 = 1000L;

        goto label115;

     label114:
        l23 = 10000L;

     label115:
        $r16 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r16.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, l23);

     label116:
        goto label119;

     label117:
        $r88 := @caughtexception;

        r143 = $r88;

        goto label136;

     label118:
        $r95 := @caughtexception;

        r143 = $r95;

        goto label136;

     label119:
        z20 = 0;

     label120:
        exitmonitor r142;

     label121:
        l24 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z20 == 0 goto label130;

     label122:
        $i6 = r108.<com.android.server.pm.PackageSetting: int appId>;

        i25 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i1, $i6);

     label123:
        $i7 = i0 & 1;

        if $i7 == 0 goto label124;

        z22 = 1;

        goto label125;

     label124:
        z22 = 0;

     label125:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageChangedBroadcast(java.lang.String,boolean,java.util.ArrayList,int,java.lang.String)>(r102, z22, r144, i25, null);

     label126:
        goto label130;

     label127:
        $r93 := @caughtexception;

        r145 = $r93;

        goto label129;

     label128:
        $r87 := @caughtexception;

        r145 = $r87;

     label129:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l24);

        throw r145;

     label130:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l24);

        return;

     label131:
        $r82 := @caughtexception;

        r143 = $r82;

        goto label136;

     label132:
        $r84 := @caughtexception;

     label133:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l21);

     label134:
        throw $r84;

     label135:
        $r90 := @caughtexception;

        r143 = $r90;

     label136:
        exitmonitor r142;

     label137:
        throw r143;

     label138:
        $r83 := @caughtexception;

        r143 = $r83;

        goto label136;

     label139:
        $r86 := @caughtexception;

        r137 = $r86;

     label140:
        exitmonitor r135;

     label141:
        throw r137;

     label142:
        $r97 := @caughtexception;

        r137 = $r97;

        goto label140;

     label143:
        $r96 := @caughtexception;

        r128 = $r96;

     label144:
        exitmonitor r124;

     label145:
        throw r128;

     label146:
        $r94 := @caughtexception;

        r128 = $r94;

        goto label144;

     label147:
        $r101 := @caughtexception;

        r118 = $r101;

     label148:
        exitmonitor r107;

     label149:
        throw r118;

     label150:
        $r92 := @caughtexception;

        r118 = $r92;

        goto label148;

        catch java.lang.Throwable from label013 to label014 with label147;
        catch java.lang.Throwable from label015 to label016 with label023;
        catch java.lang.Throwable from label016 to label017 with label023;
        catch java.lang.Throwable from label017 to label018 with label023;
        catch java.lang.Throwable from label019 to label020 with label023;
        catch java.lang.Throwable from label021 to label022 with label023;
        catch java.lang.Throwable from label022 to label023 with label023;
        catch java.lang.Throwable from label024 to label025 with label147;
        catch java.lang.Throwable from label034 to label035 with label039;
        catch java.lang.Throwable from label038 to label039 with label039;
        catch java.lang.Throwable from label040 to label041 with label143;
        catch java.lang.Throwable from label042 to label043 with label061;
        catch java.lang.Throwable from label044 to label045 with label061;
        catch java.lang.Throwable from label053 to label054 with label058;
        catch java.lang.Throwable from label055 to label056 with label058;
        catch java.lang.Throwable from label056 to label057 with label058;
        catch java.lang.Throwable from label059 to label060 with label058;
        catch java.lang.Throwable from label062 to label063 with label061;
        catch java.lang.Throwable from label065 to label066 with label139;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label071 to label072 with label069;
        catch java.lang.Throwable from label073 to label074 with label069;
        catch java.lang.Throwable from label074 to label075 with label139;
        catch java.lang.Throwable from label076 to label077 with label069;
        catch java.lang.Throwable from label078 to label079 with label069;
        catch java.lang.Throwable from label080 to label081 with label069;
        catch java.lang.Throwable from label082 to label083 with label139;
        catch java.lang.Throwable from label084 to label085 with label069;
        catch java.lang.Throwable from label086 to label087 with label139;
        catch java.lang.Throwable from label088 to label089 with label090;
        catch java.lang.Throwable from label091 to label092 with label135;
        catch java.lang.Throwable from label092 to label093 with label135;
        catch java.lang.Throwable from label093 to label094 with label132;
        catch java.lang.Throwable from label094 to label095 with label135;
        catch java.lang.Throwable from label095 to label096 with label135;
        catch java.lang.Throwable from label099 to label100 with label090;
        catch java.lang.Throwable from label101 to label102 with label135;
        catch java.lang.Throwable from label103 to label104 with label090;
        catch java.lang.Throwable from label105 to label106 with label090;
        catch java.lang.Throwable from label108 to label109 with label090;
        catch java.lang.Throwable from label109 to label110 with label135;
        catch java.lang.Throwable from label111 to label112 with label118;
        catch java.lang.Throwable from label112 to label113 with label117;
        catch java.lang.Throwable from label115 to label116 with label117;
        catch java.lang.Throwable from label120 to label121 with label131;
        catch java.lang.Throwable from label122 to label123 with label128;
        catch java.lang.Throwable from label125 to label126 with label127;
        catch java.lang.Throwable from label133 to label134 with label138;
        catch java.lang.Throwable from label134 to label135 with label138;
        catch java.lang.Throwable from label136 to label137 with label138;
        catch java.lang.Throwable from label140 to label141 with label142;
        catch java.lang.Throwable from label144 to label145 with label146;
        catch java.lang.Throwable from label148 to label149 with label150;
    }

    static void setInstantAppForUser(com.android.server.pm.PackageManagerService$Injector, com.android.server.pm.PackageSetting, int, boolean, boolean)
    {
        com.android.server.pm.PackageSetting r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, i1, i2, i3;
        android.os.UserManagerInternal $r1;
        com.android.server.pm.PackageManagerService$Injector r2;
        int[] r3;

        r2 := @parameter0: com.android.server.pm.PackageManagerService$Injector;

        r0 := @parameter1: com.android.server.pm.PackageSetting;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        if z0 != 0 goto label1;

        if z1 != 0 goto label1;

        return;

     label1:
        if i2 == -1 goto label3;

        if z0 == 0 goto label2;

        $z5 = virtualinvoke r0.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i2);

        if $z5 != 0 goto label2;

        virtualinvoke r0.<com.android.server.pm.PackageSetting: void setInstantApp(boolean,int)>(1, i2);

        goto label7;

     label2:
        if z1 == 0 goto label7;

        $z4 = virtualinvoke r0.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i2);

        if $z4 == 0 goto label7;

        virtualinvoke r0.<com.android.server.pm.PackageSetting: void setInstantApp(boolean,int)>(0, i2);

        goto label7;

     label3:
        $r1 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        r3 = virtualinvoke $r1.<android.os.UserManagerInternal: int[] getUserIds()>();

        i0 = lengthof r3;

        i3 = 0;

     label4:
        if i3 >= i0 goto label7;

        i1 = r3[i3];

        if z0 == 0 goto label5;

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z3 != 0 goto label5;

        virtualinvoke r0.<com.android.server.pm.PackageSetting: void setInstantApp(boolean,int)>(1, i1);

        goto label6;

     label5:
        if z1 == 0 goto label6;

        $z2 = virtualinvoke r0.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z2 == 0 goto label6;

        virtualinvoke r0.<com.android.server.pm.PackageSetting: void setInstantApp(boolean,int)>(0, i1);

     label6:
        i3 = i3 + 1;

        goto label4;

     label7:
        return;
    }

    private void setUpCustomResolverActivity(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        java.lang.Object r2;
        android.content.pm.ApplicationInfo r3;
        int $i0, $i1;
        android.content.pm.ActivityInfo $r4, $r6, $r8, $r10, $r12, $r13, $r14, $r15, $r16, $r17;
        android.content.ComponentName $r5, $r22, $r24;
        java.lang.String $r7, $r9, $r11, $r26;
        android.content.pm.ResolveInfo $r18, $r19, $r20, $r21;
        java.lang.Throwable $r27;
        com.android.server.pm.parsing.pkg.AndroidPackage r28;
        java.lang.StringBuilder r29;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r28 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        r0.<com.android.server.pm.PackageManagerService: boolean mResolverReplaced> = 1;

        r3 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        $i0 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r28, r1);

        r3.<android.content.pm.ApplicationInfo: int flags> = $i0;

     label2:
        $i1 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: int appInfoPrivateFlags(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r28, r1);

        r3.<android.content.pm.ApplicationInfo: int privateFlags> = $i1;

        virtualinvoke r3.<android.content.pm.ApplicationInfo: void initForUser(int)>(0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r4.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo> = r3;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        $r7 = virtualinvoke $r5.<android.content.ComponentName: java.lang.String getClassName()>();

        $r6.<android.content.pm.ActivityInfo: java.lang.String name> = $r7;

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r9 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r8.<android.content.pm.ActivityInfo: java.lang.String packageName> = $r9;

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r11 = interfaceinvoke r28.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getProcessName()>();

        $r10.<android.content.pm.ActivityInfo: java.lang.String processName> = $r11;

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r12.<android.content.pm.ActivityInfo: int launchMode> = 0;

        $r13 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r13.<android.content.pm.ActivityInfo: int flags> = 288;

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r14.<android.content.pm.ActivityInfo: int theme> = 0;

        $r15 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r15.<android.content.pm.ActivityInfo: boolean exported> = 1;

        $r16 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r16.<android.content.pm.ActivityInfo: boolean enabled> = 1;

        $r18 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r17 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mResolveActivity>;

        $r18.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r17;

        $r19 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r19.<android.content.pm.ResolveInfo: int priority> = 0;

        $r20 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r20.<android.content.pm.ResolveInfo: int preferredOrder> = 0;

        $r21 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mResolveInfo>;

        $r21.<android.content.pm.ResolveInfo: int match> = 0;

        $r22 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mCustomResolverComponentName>;

        r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName> = $r22;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Replacing default ResolverActivity with custom activity: ");

        $r24 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName>;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r26);

     label3:
        exitmonitor r2;

     label4:
        return;

     label5:
        $r27 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r27;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void setUpFsVerityIfPossible(com.android.server.pm.parsing.pkg.AndroidPackage) throws com.android.server.pm.Installer$InstallerException, com.android.server.pm.PackageManagerService$PrepareFailure, java.io.IOException, java.security.DigestException, java.security.NoSuchAlgorithmException
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int i0, $i2, i4, i5, i6;
        byte[] r1;
        android.util.ArrayMap $r3, $r29;
        java.lang.String $r4, $r5, $r6, $r8, $r19, $r21, $r24, $r26, $r30, $r32, $r35, $r47, r54, r56, r57, r61, r62;
        java.io.File $r9, $r20, $r23;
        java.lang.String[] $r10, $r34, r52, r55;
        java.lang.Object $r11, $r12, $r13, $r31, r50;
        com.android.server.pm.PackageManagerService$PrepareFailure $r14, $r46;
        com.android.server.pm.Installer $r15, $r38, $r39;
        java.lang.StringBuilder $r16, $r43;
        com.android.server.pm.Settings $r28;
        com.android.server.pm.Installer$InstallerException $r37;
        java.lang.Throwable $r40, $r41, $r42;
        com.android.server.pm.parsing.pkg.AndroidPackage r48;
        com.android.server.pm.PackageSetting r51;
        java.util.Set $r58;
        java.util.Iterator r59;
        java.util.Map$Entry r60;
        com.android.server.security.VerityUtils$SetupResult r65;
        java.io.FileDescriptor r67;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r48 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isApkVerityEnabled()>();

        z1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isLegacyApkVerityEnabled()>();

        if z0 != 0 goto label01;

        if z1 != 0 goto label01;

        return;

     label01:
        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        i4 = 0;

        if z1 == 0 goto label13;

        r50 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r50;

     label02:
        $r28 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r29 = $r28.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r30 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r31 = virtualinvoke $r29.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r30);

        r51 = (com.android.server.pm.PackageSetting) $r31;

     label03:
        if r51 == null goto label08;

     label04:
        $z9 = virtualinvoke r51.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z9 == 0 goto label08;

        $r32 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, null);

        $r34 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        if $r34 == null goto label08;

        r52 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        i5 = lengthof r52;

     label05:
        if i4 >= i5 goto label08;

     label06:
        $r35 = r52[i4];

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, null);

     label07:
        i4 = i4 + 1;

        goto label05;

     label08:
        exitmonitor r50;

     label09:
        goto label17;

     label10:
        $r40 := @caughtexception;

     label11:
        exitmonitor r50;

     label12:
        throw $r40;

     label13:
        $r4 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r5 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        $r6 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>($r5);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        $r8 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        r54 = staticinvoke <android.content.pm.dex.DexMetadataHelper: java.lang.String buildDexMetadataPathForApk(java.lang.String)>($r8);

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r54);

        $z2 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label14;

        $r26 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>(r54);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r54, $r26);

     label14:
        $r10 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        if $r10 == null goto label17;

        r55 = interfaceinvoke r48.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        i0 = lengthof r55;

        i6 = 0;

     label15:
        if i6 >= i0 goto label17;

        r56 = r55[i6];

        $r21 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>(r56);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r56, $r21);

        r57 = staticinvoke <android.content.pm.dex.DexMetadataHelper: java.lang.String buildDexMetadataPathForApk(java.lang.String)>(r56);

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>(r57);

        $z8 = virtualinvoke $r23.<java.io.File: boolean exists()>();

        if $z8 == 0 goto label16;

        $r24 = staticinvoke <com.android.server.security.VerityUtils: java.lang.String getFsveritySignatureFilePath(java.lang.String)>(r57);

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r57, $r24);

     label16:
        i6 = i6 + 1;

        goto label15;

     label17:
        $r58 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Set entrySet()>();

        r59 = interfaceinvoke $r58.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z10 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label34;

        $r11 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.util.Map$Entry) $r11;

        $r12 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getKey()>();

        r61 = (java.lang.String) $r12;

        $r13 = interfaceinvoke r60.<java.util.Map$Entry: java.lang.Object getValue()>();

        r62 = (java.lang.String) $r13;

        if z1 != 0 goto label22;

        $r20 = new java.io.File;

        specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(r62);

        $z6 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        if $z6 == 0 goto label18;

        $z7 = staticinvoke <com.android.server.security.VerityUtils: boolean hasFsverity(java.lang.String)>(r61);

        if $z7 != 0 goto label18;

     label19:
        staticinvoke <com.android.server.security.VerityUtils: void setUpFsverity(java.lang.String,java.lang.String)>(r61, r62);

     label20:
        goto label18;

     label21:
        $r42 := @caughtexception;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to enable fs-verity: ");

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r46 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r46.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-118, $r47);

        throw $r46;

     label22:
        r65 = staticinvoke <com.android.server.security.VerityUtils: com.android.server.security.VerityUtils$SetupResult generateApkVeritySetupData(java.lang.String)>(r61);

        $z3 = virtualinvoke r65.<com.android.server.security.VerityUtils$SetupResult: boolean isOk()>();

        if $z3 == 0 goto label31;

        $z5 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z5 == 0 goto label23;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabling verity to ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r61);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r19);

     label23:
        r67 = virtualinvoke r65.<com.android.server.security.VerityUtils$SetupResult: java.io.FileDescriptor getUnownedFileDescriptor()>();

     label24:
        r1 = staticinvoke <com.android.server.security.VerityUtils: byte[] generateApkVerityRootHash(java.lang.String)>(r61);

     label25:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r15.<com.android.server.pm.Installer: void assertFsverityRootHashMatches(java.lang.String,byte[])>(r61, r1);

     label26:
        goto label29;

     label27:
        $r37 := @caughtexception;

     label28:
        $r38 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $i2 = virtualinvoke r65.<com.android.server.security.VerityUtils$SetupResult: int getContentSize()>();

        virtualinvoke $r38.<com.android.server.pm.Installer: void installApkVerity(java.lang.String,java.io.FileDescriptor,int)>(r61, r67, $i2);

        $r39 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r39.<com.android.server.pm.Installer: void assertFsverityRootHashMatches(java.lang.String,byte[])>(r61, r1);

     label29:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r67);

        goto label32;

     label30:
        $r41 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r67);

        throw $r41;

     label31:
        $z4 = virtualinvoke r65.<com.android.server.security.VerityUtils$SetupResult: boolean isFailed()>();

        if $z4 != 0 goto label33;

     label32:
        goto label18;

     label33:
        $r14 = new com.android.server.pm.PackageManagerService$PrepareFailure;

        specialinvoke $r14.<com.android.server.pm.PackageManagerService$PrepareFailure: void <init>(int,java.lang.String)>(-118, "Failed to generate verity");

        throw $r14;

     label34:
        return;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label24 to label25 with label30;
        catch com.android.server.pm.Installer$InstallerException from label25 to label26 with label27;
        catch java.lang.Throwable from label25 to label26 with label30;
        catch java.lang.Throwable from label28 to label29 with label30;
    }

    private void setUpInstantAppInstallerActivityLP(android.content.pm.ActivityInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.ActivityInfo r1, $r3, $r4, $r5;
        boolean $z0, $z1;
        int $i0, $i1;
        android.content.pm.ResolveInfo $r6, $r7, $r8, $r9, $r10;
        java.lang.StringBuilder $r11;
        android.content.ComponentName $r13;
        java.lang.String $r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.ActivityInfo;

        if r1 != null goto label2;

        $z1 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z1 == 0 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", "Clear ephemeral installer activity");

     label1:
        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity> = null;

        return;

     label2:
        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z0 == 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set ephemeral installer activity: ");

        $r13 = virtualinvoke r1.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r15);

     label3:
        r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity> = r1;

        $i0 = r1.<android.content.pm.ActivityInfo: int flags>;

        $i1 = $i0 | 288;

        r1.<android.content.pm.ActivityInfo: int flags> = $i1;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        $r3.<android.content.pm.ActivityInfo: boolean exported> = 1;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        $r4.<android.content.pm.ActivityInfo: boolean enabled> = 1;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        $r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo> = $r5;

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        $r7.<android.content.pm.ResolveInfo: int priority> = 1;

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        $r8.<android.content.pm.ResolveInfo: int preferredOrder> = 1;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        $r9.<android.content.pm.ResolveInfo: boolean isDefault> = 1;

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo mInstantAppInstallerInfo>;

        $r10.<android.content.pm.ResolveInfo: int match> = 5799936;

        return;
    }

    private static boolean sharedLibExists(java.lang.String, long, java.util.Map)
    {
        long l0;
        java.util.Map r0;
        java.lang.Object $r1;
        int $i1;
        java.lang.String r2;
        android.util.LongSparseArray r3;

        r2 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r0 := @parameter2: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (android.util.LongSparseArray) $r1;

        if r3 == null goto label1;

        $i1 = virtualinvoke r3.<android.util.LongSparseArray: int indexOfKey(long)>(l0);

        if $i1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r1, i0, null, 0, i1);

        return $z0;
    }

    private boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting, int, android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, i4, i5, i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13;
        java.lang.String $r1, $r2, $r9;
        com.android.server.pm.Settings $r3;
        com.android.server.pm.AppsFilter $r4;
        com.android.server.pm.InstantAppRegistry $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage $r6;
        android.util.ArrayMap $r7;
        java.lang.Object $r8;
        android.util.SparseIntArray $r10;
        com.android.server.pm.PackageSetting r11;
        android.content.ComponentName r12;
        android.content.pm.parsing.component.ParsedInstrumentation r13;
        com.android.server.pm.SettingBase r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: com.android.server.pm.PackageSetting;

        i4 := @parameter1: int;

        r12 := @parameter2: android.content.ComponentName;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i5 = i4;

        $z0 = staticinvoke <android.os.Process: boolean isIsolated(int)>(i4);

        if $z0 == 0 goto label01;

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseIntArray mIsolatedOwners>;

        i5 = virtualinvoke $r10.<android.util.SparseIntArray: int get(int)>(i4);

     label01:
        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i5);

        if $r1 == null goto label02;

        z13 = 1;

        goto label03;

     label02:
        z13 = 0;

     label03:
        if r11 != null goto label05;

        if z13 == 0 goto label04;

        return 1;

     label04:
        return 0;

     label05:
        $r2 = r11.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>($r2, i5);

        if $z1 == 0 goto label06;

        return 0;

     label06:
        if z13 == 0 goto label10;

        $z7 = virtualinvoke r11.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z7 == 0 goto label07;

        return 1;

     label07:
        if r12 == null goto label09;

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (android.content.pm.parsing.component.ParsedInstrumentation) $r8;

        if r13 == null goto label08;

        $r9 = virtualinvoke r13.<android.content.pm.parsing.component.ParsedInstrumentation: java.lang.String getTargetPackage()>();

        $z12 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>($r9, i5);

        if $z12 == 0 goto label08;

        return 0;

     label08:
        $z10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isComponentVisibleToInstantApp(android.content.ComponentName,int)>(r12, i0);

        $z11 = $z10 ^ 1;

        return $z11;

     label09:
        $r6 = r11.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z8 = interfaceinvoke $r6.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVisibleToInstantApps()>();

        $z9 = $z8 ^ 1;

        return $z9;

     label10:
        $z2 = virtualinvoke r11.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z2 == 0 goto label13;

        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i5, i1);

        if $z4 == 0 goto label11;

        return 0;

     label11:
        if r12 == null goto label12;

        return 1;

     label12:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i5);

        $i3 = r11.<com.android.server.pm.PackageSetting: int appId>;

        $z5 = virtualinvoke $r5.<com.android.server.pm.InstantAppRegistry: boolean isInstantAccessGranted(int,int,int)>(i1, $i2, $i3);

        $z6 = $z5 ^ 1;

        return $z6;

     label13:
        i6 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i5);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r14 = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i6);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $z3 = virtualinvoke $r4.<com.android.server.pm.AppsFilter: boolean shouldFilterApplication(int,com.android.server.pm.SettingBase,com.android.server.pm.PackageSetting,int)>(i5, r14, r11, i1);

        return $z3;
    }

    private boolean shouldKeepUninstalledPackageLPr(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        java.util.List r2;
        boolean $z0, z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.pm.PackageManagerService: java.util.List mKeepUninstalledPackages>;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void startIntentFilterVerifications(int, boolean, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i2, i3;
        boolean z0, $z1;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        android.os.Handler $r2, $r6;
        com.android.server.pm.PackageManagerService$IFVerificationParams $r3;
        java.lang.String $r4, r8;
        java.util.List $r5;
        android.content.ComponentName r7;
        android.os.Message r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r7 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        if r7 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "No IntentFilter verification will not be done as there is no IntentFilterVerifier available!");

        return;

     label1:
        r8 = virtualinvoke r7.<android.content.ComponentName: java.lang.String getPackageName()>();

        if i0 != -1 goto label2;

        i2 = 0;

        goto label3;

     label2:
        i2 = i0;

     label3:
        i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r8, 268435456, i2);

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r9 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(17);

        $r3 = new com.android.server.pm.PackageManagerService$IFVerificationParams;

        $r4 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z1 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isHasDomainUrls()>();

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$IFVerificationParams: void <init>(java.lang.String,boolean,java.util.List,boolean,int,int)>($r4, $z1, $r5, z0, i0, i3);

        r9.<android.os.Message: java.lang.Object obj> = $r3;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: boolean sendMessage(android.os.Message)>(r9);

        return;
    }

    private static java.lang.String toStaticSharedLibraryPackageName(java.lang.String, long)
    {
        java.lang.String r0, $r6;
        long l0;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void unloadPrivatePackages(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.storage.VolumeInfo r1;
        com.android.server.pm._$$Lambda$PackageManagerService$WLKCxynYP_nOLQg_OBNNc1w2Z18 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r2 = new com.android.server.pm._$$Lambda$PackageManagerService$WLKCxynYP_nOLQg_OBNNc1w2Z18;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$PackageManagerService$WLKCxynYP_nOLQg_OBNNc1w2Z18: void <init>(com.android.server.pm.PackageManagerService,android.os.storage.VolumeInfo)>(r0, r1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private void unloadPrivatePackagesInner(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r2, r3, $r17;
        java.util.Iterator r4;
        com.android.server.pm.PackageSetting r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r6, $r18;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo r7;
        boolean z0, $z1, $z4;
        java.util.ArrayList $r8;
        com.android.server.pm.Settings $r9, $r11;
        java.util.List $r10;
        android.util.ArraySet $r12;
        java.lang.String $r13, $r16, $r19, $r23, $r25, r33, r35;
        android.app.ResourcesManager $r14;
        java.io.File $r15, $r21;
        com.android.server.AttributeCache $r24;
        java.lang.Throwable $r26, $r27, $r28, $r29, $r30, $r31, r37;
        android.os.storage.VolumeInfo r32;
        com.android.server.pm.PackageManagerService$PackageFreezer r34;
        java.lang.StringBuilder r36;
        int i2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r32 := @parameter0: android.os.storage.VolumeInfo;

        r33 = r32.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r33);

        if $z1 == 0 goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Unloading internal storage is probably a mistake; ignoring");

        return;

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r2;

     label02:
        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label03:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = virtualinvoke $r9.<com.android.server.pm.Settings: java.util.List getVolumePackagesLPr(java.lang.String)>(r33);

        r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label26;

        $r17 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.pm.PackageSetting) $r17;

        $r18 = r5.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r18 != null goto label06;

     label05:
        goto label04;

     label06:
        r6 = r5.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r7 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke r7.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageSender)>(r0);

        $r19 = r5.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r34 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForDelete(java.lang.String,int,java.lang.String)>($r19, 1, "unloadPrivatePackagesInner");

     label07:
        r35 = r5.<com.android.server.pm.PackageSetting: java.lang.String name>;

     label08:
        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean deletePackageLIF(java.lang.String,android.os.UserHandle,boolean,int[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean,com.android.server.pm.parsing.pkg.ParsedPackage)>(r35, null, 0, null, 1, r7, 0, null);

     label09:
        if z0 == 0 goto label12;

     label10:
        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label11:
        goto label13;

     label12:
        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unload ");

        $r21 = r5.<com.android.server.pm.PackageSetting: java.io.File codePath>;

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

     label13:
        if r34 == null goto label15;

     label14:
        virtualinvoke r34.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label15:
        $r24 = staticinvoke <com.android.server.AttributeCache: com.android.server.AttributeCache instance()>();

        $r25 = r5.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r24.<com.android.server.AttributeCache: void removePackage(java.lang.String)>($r25);

     label16:
        goto label04;

     label17:
        $r26 := @caughtexception;

        r37 = $r26;

        goto label20;

     label18:
        $r28 := @caughtexception;

        r37 = $r28;

        goto label20;

     label19:
        $r27 := @caughtexception;

        r37 = $r27;

     label20:
        if r34 == null goto label25;

     label21:
        virtualinvoke r34.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label22:
        goto label25;

     label23:
        $r29 := @caughtexception;

     label24:
        virtualinvoke r37.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r29);

     label25:
        throw r37;

     label26:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r11.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r3;

     label27:
        exitmonitor r2;

     label28:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendResourcesChangedBroadcast(boolean,boolean,java.util.ArrayList,android.content.IIntentReceiver)>(0, 0, $r8, null);

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes>;

        $r13 = virtualinvoke r32.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        virtualinvoke $r12.<android.util.ArraySet: boolean remove(java.lang.Object)>($r13);

        $r14 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        $r15 = virtualinvoke r32.<android.os.storage.VolumeInfo: java.io.File getPath()>();

        $r16 = virtualinvoke $r15.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r14.<android.app.ResourcesManager: void invalidatePath(java.lang.String)>($r16);

        i2 = 0;

     label29:
        if i2 >= 3 goto label30;

        staticinvoke <java.lang.System: void gc()>();

        staticinvoke <java.lang.System: void runFinalization()>();

        i2 = i2 + 1;

        goto label29;

     label30:
        return;

     label31:
        $r31 := @caughtexception;

     label32:
        exitmonitor r3;

     label33:
        throw $r31;

     label34:
        $r30 := @caughtexception;

     label35:
        exitmonitor r2;

     label36:
        throw $r30;

        catch java.lang.Throwable from label02 to label03 with label34;
        catch java.lang.Throwable from label03 to label04 with label31;
        catch java.lang.Throwable from label04 to label05 with label31;
        catch java.lang.Throwable from label06 to label07 with label31;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label14 to label15 with label31;
        catch java.lang.Throwable from label15 to label16 with label31;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label31;
        catch java.lang.Throwable from label25 to label26 with label31;
        catch java.lang.Throwable from label26 to label27 with label31;
        catch java.lang.Throwable from label27 to label28 with label34;
        catch java.lang.Throwable from label32 to label33 with label31;
        catch java.lang.Throwable from label33 to label34 with label34;
        catch java.lang.Throwable from label35 to label36 with label34;
    }

    private java.util.ArrayList updateAllSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, java.util.Map)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.Map r1;
        android.util.Pair r2, $r12, $r24, r40;
        com.android.server.pm.parsing.pkg.AndroidPackage r3, r33, r41;
        java.lang.Object $r4, $r7, $r21, $r22;
        android.util.ArrayMap $r5, $r6;
        int $i2, $i3, i5;
        com.android.server.pm.Settings $r8;
        java.lang.String $r9, $r10, $r11, $r20, $r27, $r49, $r50;
        boolean $z1, $z4, $z5, $z6, $z8, $z9, $z11;
        android.util.ArraySet $r13, r36, r43, r45;
        java.util.ArrayList $r14, $r23, r35, r38, r42;
        java.util.List $r15, $r16, $r17, $r18, $r19;
        com.android.server.pm.PackageManagerException $r25;
        com.android.server.pm.pkg.PackageStateUnserialized $r26, $r32;
        com.android.server.pm.UserManagerService $r28;
        int[] $r29;
        com.android.server.pm.PackageSetting r34, r39, r44;
        byte b6;
        java.lang.StringBuilder $r47;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r33 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r34 := @parameter1: com.android.server.pm.PackageSetting;

        r1 := @parameter2: java.util.Map;

        r35 = null;

        r36 = null;

        if r33 == null goto label01;

        if r34 == null goto label01;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>(int)>(1);

        $r24 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r33, r34);

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r24);

        r38 = $r23;

        goto label02;

     label01:
        r38 = null;

     label02:
        r39 = null;

        if r38 != null goto label03;

        r40 = null;

        goto label04;

     label03:
        $r4 = interfaceinvoke r38.<java.util.List: java.lang.Object remove(int)>(0);

        r40 = (android.util.Pair) $r4;

     label04:
        r2 = r40;

        if r40 == null goto label05;

        $r22 = r40.<android.util.Pair: java.lang.Object first>;

        r41 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r22;

        goto label06;

     label05:
        r41 = null;

     label06:
        if r2 == null goto label07;

        $r21 = r2.<android.util.Pair: java.lang.Object second>;

        r39 = (com.android.server.pm.PackageSetting) $r21;

        goto label07;

     label07:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i2 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        i5 = $i2 - 1;

        r42 = r38;

        r43 = r36;

     label08:
        if i5 < 0 goto label22;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r7;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r44 = virtualinvoke $r8.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r9);

        if r41 == null goto label09;

        $r15 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesLibraries()>();

        $r16 = interfaceinvoke r41.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        $z4 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasString(java.util.List,java.util.List)>($r15, $r16);

        if $z4 != 0 goto label09;

        $r17 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesOptionalLibraries()>();

        $r18 = interfaceinvoke r41.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        $z5 = staticinvoke <com.android.server.pm.PackageManagerService: boolean hasString(java.util.List,java.util.List)>($r17, $r18);

        if $z5 != 0 goto label09;

        $r19 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getUsesStaticLibraries()>();

        $r20 = interfaceinvoke r41.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $z6 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.util.Collection,java.lang.Object)>($r19, $r20);

        if $z6 != 0 goto label09;

        goto label21;

     label09:
        if r35 != null goto label10;

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r35 = $r14;

        goto label10;

     label10:
        virtualinvoke r35.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        if r41 == null goto label13;

        r45 = r43;

        if r43 != null goto label11;

        $r13 = new android.util.ArraySet;

        specialinvoke $r13.<android.util.ArraySet: void <init>()>();

        r45 = $r13;

     label11:
        $r10 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r45.<android.util.ArraySet: boolean contains(java.lang.Object)>($r10);

        if $z1 != 0 goto label12;

        $r11 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r45.<android.util.ArraySet: boolean add(java.lang.Object)>($r11);

        $r12 = staticinvoke <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>(r3, r44);

        interfaceinvoke r42.<java.util.List: boolean add(java.lang.Object)>($r12);

     label12:
        r43 = r45;

        goto label13;

     label13:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.Map)>(r3, r44, r41, r39, r1);

     label14:
        goto label21;

     label15:
        $r25 := @caughtexception;

        $z8 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z8 == 0 goto label17;

        $r32 = virtualinvoke r44.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z11 = virtualinvoke $r32.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if $z11 == 0 goto label16;

        goto label17;

     label16:
        goto label20;

     label17:
        $r26 = virtualinvoke r44.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z9 = virtualinvoke $r26.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        if $z9 == 0 goto label18;

        b6 = 1;

        goto label19;

     label18:
        b6 = 0;

     label19:
        $r27 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r28 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r29 = virtualinvoke $r28.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean deletePackageLIF(java.lang.String,android.os.UserHandle,boolean,int[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean,com.android.server.pm.parsing.pkg.ParsedPackage)>($r27, null, 1, $r29, b6, null, 1, null);

     label20:
        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAllSharedLibrariesLPw failed: ");

        $r49 = virtualinvoke $r25.<com.android.server.pm.PackageManagerException: java.lang.String getMessage()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r50);

     label21:
        i5 = i5 + -1;

        goto label08;

     label22:
        if r42 == null goto label24;

        $i3 = interfaceinvoke r42.<java.util.List: int size()>();

        if $i3 > 0 goto label23;

        goto label24;

     label23:
        r36 = r43;

        r38 = r42;

        goto label02;

     label24:
        return r35;

        catch com.android.server.pm.PackageManagerException from label13 to label14 with label15;
    }

    private void updateDefaultHomeNotLocked(android.util.SparseBooleanArray)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.SparseBooleanArray r1;
        java.lang.Object $r3;
        boolean $z0;
        int $i0, $i1, i3;
        java.lang.StringBuilder $r4;
        java.lang.Thread $r6;
        java.lang.String $r7, $r10;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.util.SparseBooleanArray;

        $r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling thread ");

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is holding mLock");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.Throwable;

        specialinvoke $r11.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r10, $r11);

     label1:
        $i0 = virtualinvoke r1.<android.util.SparseBooleanArray: int size()>();

        i3 = $i0 - 1;

     label2:
        if i3 < 0 goto label3;

        $i1 = virtualinvoke r1.<android.util.SparseBooleanArray: int keyAt(int)>(i3);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>($i1);

        i3 = i3 + -1;

        goto label2;

     label3:
        return;
    }

    private boolean updateDefaultHomeNotLocked(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r2;
        com.android.server.pm._$$Lambda$PackageManagerService$ms4g2QGGQv1AIanhd1siLhoElkI $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4, $r20;
        java.lang.String $r5, $r11, $r14, r18, $r21;
        android.content.pm.ActivityInfo $r6, $r7;
        java.lang.StringBuilder $r8;
        java.lang.Thread $r10;
        java.lang.Throwable $r15;
        android.content.Intent r17;
        android.content.pm.ResolveInfo r19;
        java.lang.String[] r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling thread ");

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r11 = virtualinvoke $r10.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is holding mLock");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.Throwable;

        specialinvoke $r15.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r14, $r15);

     label1:
        $z1 = r0.<com.android.server.pm.PackageManagerService: boolean mSystemReady>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        r17 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.Intent getHomeIntent()>();

        r18 = null;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>(r17, null, 128, i0);

        r19 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(r17, null, 0, $r2, 0, 1, 0, 0, i0);

        if r19 == null goto label3;

        $r6 = r19.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r6 == null goto label3;

        $r7 = r19.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        r18 = $r7.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        goto label3;

     label3:
        $r20 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r21 = virtualinvoke $r20.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultHome(int)>(i0);

        $z3 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r21, r18);

        if $z3 == 0 goto label4;

        return 0;

     label4:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r22 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>($i1);

        if r22 == null goto label5;

        $r5 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredPermissionControllerPackage>;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r22, $r5);

        if $z2 == 0 goto label5;

        return 0;

     label5:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r3 = new com.android.server.pm._$$Lambda$PackageManagerService$ms4g2QGGQv1AIanhd1siLhoElkI;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$PackageManagerService$ms4g2QGGQv1AIanhd1siLhoElkI: void <init>(com.android.server.pm.PackageManagerService,int)>(r0, i0);

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultHome(java.lang.String,int,java.util.function.Consumer)>(r18, i0, $r3);

        return 1;
    }

    private static void updateDigest(java.security.MessageDigest, java.io.File) throws java.io.IOException
    {
        int i0;
        java.security.DigestInputStream $r0;
        java.io.FileInputStream $r1;
        java.lang.Throwable $r2, $r3;
        java.security.MessageDigest r4;
        java.io.File r5;

        r4 := @parameter0: java.security.MessageDigest;

        r5 := @parameter1: java.io.File;

        $r0 = new java.security.DigestInputStream;

        $r1 = new java.io.FileInputStream;

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>(r5);

        specialinvoke $r0.<java.security.DigestInputStream: void <init>(java.io.InputStream,java.security.MessageDigest)>($r1, r4);

     label1:
        i0 = virtualinvoke $r0.<java.security.DigestInputStream: int read()>();

     label2:
        if i0 == -1 goto label3;

        goto label1;

     label3:
        virtualinvoke $r0.<java.security.DigestInputStream: void close()>();

        return;

     label4:
        $r3 := @caughtexception;

     label5:
        virtualinvoke $r0.<java.security.DigestInputStream: void close()>();

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private int updateFlags(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i2;
        com.android.server.pm.UserManagerService $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        $i1 = i2 & 786432;

        if $i1 == 0 goto label1;

        goto label3;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: boolean isUserUnlockingOrUnlocked(int)>(i0);

        if $z0 == 0 goto label2;

        i2 = i2 | 786432;

        goto label3;

     label2:
        i2 = i2 | 524288;

     label3:
        return i2;
    }

    private int updateFlagsForApplication(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i0, i1);

        return $i2;
    }

    private int updateFlagsForComponent(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlags(int,int)>(i0, i1);

        return $i2;
    }

    private int updateFlagsForPackage(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i8;
        com.android.server.pm.permission.PermissionManagerServiceInternal r1;
        boolean z0, $z1, $z2, z3;
        com.android.server.pm.UserManagerService $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i2 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $i3 = i0 & 4194304;

        if $i3 == 0 goto label3;

        r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isRecentsAccessingChildProfiles(int,int)>($i5, i1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MATCH_ANY_USER flag requires INTERACT_ACROSS_USERS permission at ");

        $r6 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $z2 = z0 ^ 1;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,boolean,java.lang.String)>(i6, i1, 0, 0, $z2, $r8);

        i7 = i0;

        goto label4;

     label3:
        i7 = i0;

        $i4 = i0 & 8192;

        if $i4 == 0 goto label4;

        i7 = i0;

        if z3 == 0 goto label4;

        i7 = i0;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean hasManagedProfile(int)>(0);

        if $z1 == 0 goto label4;

        i7 = i0 | 4194304;

     label4:
        $i8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlags(int,int)>(i7, i1);

        return $i8;
    }

    private void updateInstantAppInstallerLocked(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r5;
        android.content.pm.ActivityInfo r2, $r3;
        android.content.ComponentName $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        if r2 == null goto label1;

        $r4 = virtualinvoke r2.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

        $r5 = virtualinvoke $r4.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getInstantAppInstallerLPr()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void setUpInstantAppInstallerActivityLP(android.content.pm.ActivityInfo)>($r3);

        return;
    }

    private android.content.Intent updateIntentForResolve(android.content.Intent)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1, $r2, r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r3 = r1;

        $r2 = virtualinvoke r1.<android.content.Intent: android.content.Intent getSelector()>();

        if $r2 == null goto label1;

        r3 = virtualinvoke r1.<android.content.Intent: android.content.Intent getSelector()>();

     label1:
        return r3;
    }

    private void updateSequenceNumberLP(com.android.server.pm.PackageSetting, int[])
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        boolean $z0;
        android.util.SparseArray $r3, $r5, $r14, $r16, r17, r18, r22;
        java.lang.Object $r4, $r6, $r8, r20;
        java.lang.String $r7, $r9, $r10;
        java.lang.Integer $r11, r21;
        java.util.Map r19, r24, r25;
        java.util.HashMap r23;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        r2 := @parameter1: int[];

        $i1 = lengthof r2;

        i7 = $i1 - 1;

     label1:
        if i7 < 0 goto label7;

        i0 = r2[i7];

        $z0 = virtualinvoke r1.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

        if $z0 == 0 goto label2;

        goto label6;

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r17 = (android.util.SparseArray) $r4;

        r18 = r17;

        if r17 != null goto label3;

        r22 = new android.util.SparseArray;

        specialinvoke r22.<android.util.SparseArray: void <init>()>();

        r18 = r22;

        $r16 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages>;

        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r22);

     label3:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackagesSequenceNumbers>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r19 = (java.util.Map) $r6;

        r20 = r19;

        if r19 != null goto label4;

        r23 = new java.util.HashMap;

        specialinvoke r23.<java.util.HashMap: void <init>()>();

        r20 = r23;

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackagesSequenceNumbers>;

        virtualinvoke $r14.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r23);

     label4:
        $r7 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r24 = (java.util.Map) r20;

        $r8 = interfaceinvoke r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r21 = (java.lang.Integer) $r8;

        if r21 == null goto label5;

        $i6 = virtualinvoke r21.<java.lang.Integer: int intValue()>();

        virtualinvoke r18.<android.util.SparseArray: void remove(int)>($i6);

     label5:
        $i4 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        $r9 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r18.<android.util.SparseArray: void put(int,java.lang.Object)>($i4, $r9);

        $r10 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $i5 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        r25 = (java.util.Map) r20;

        interfaceinvoke r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label6:
        i7 = i7 + -1;

        goto label1;

     label7:
        $i2 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        $i3 = $i2 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber> = $i3;

        return;
    }

    private void updateSettingsInternalLI(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageManagerService$InstallArgs, int[], com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r1;
        java.lang.String r2, r3, $r46, $r48;
        java.lang.Object r4, $r10, $r27, $r37, $r42, $r47;
        com.android.server.pm.PackageSetting r5, r62;
        com.android.server.pm.InstallSource $r6, $r13;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r7;
        com.android.server.pm.Settings $r8, $r12, $r14, $r17, $r44;
        android.util.ArrayMap $r9, $r45;
        android.os.UserHandle $r11;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25, i26, i27, i28;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r15, $r19, $r21, $r23, $r25, $r29, $r31, $r33, $r35, $r65;
        java.lang.Integer $r16, $r18, $r28, $r38, $r39;
        android.util.SparseArray $r20, $r22, $r24, $r26, $r30, $r32, $r34, $r36;
        com.android.server.pm.pkg.PackageStateUnserialized $r40, $r57;
        java.util.List $r41, $r49, $r58;
        com.android.server.pm.UserManagerService $r43, $r66;
        int[] $r50, r54, r55, r56, r61, r67;
        java.lang.Throwable $r51;
        com.android.server.pm.parsing.pkg.AndroidPackage r52;
        com.android.server.pm.PackageManagerService$InstallArgs r53;
        java.util.Iterator r59;
        android.content.pm.SharedLibraryInfo r60;
        java.lang.String[] r63;
        android.util.ArraySet r64;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r52 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r53 := @parameter1: com.android.server.pm.PackageManagerService$InstallArgs;

        r54 := @parameter2: int[];

        r1 := @parameter3: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "updateSettings");

        r2 = interfaceinvoke r52.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r55 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        i5 = r53.<com.android.server.pm.PackageManagerService$InstallArgs: int installReason>;

        $r6 = r53.<com.android.server.pm.PackageManagerService$InstallArgs: com.android.server.pm.InstallSource installSource>;

        r3 = $r6.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label01:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r7.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updatePermissions(java.lang.String,com.android.server.pm.parsing.pkg.AndroidPackage)>(r2, r52);

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (com.android.server.pm.PackageSetting) $r10;

        $r11 = r53.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        i6 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

     label02:
        if r5 == null goto label61;

     label03:
        $z0 = interfaceinvoke r52.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z0 == 0 goto label21;

        $r50 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        if $r50 == null goto label09;

        r56 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] origUsers>;

        i7 = lengthof r56;

     label04:
        i8 = 0;

     label05:
        if i8 >= i7 goto label09;

        i9 = r56[i8];

        if i6 == -1 goto label07;

        if i6 != i9 goto label06;

        goto label07;

     label06:
        goto label08;

     label07:
        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(0, i9, r3);

     label08:
        i8 = i8 + 1;

        goto label05;

     label09:
        if r54 == null goto label15;

        if r55 == null goto label15;

     label10:
        i10 = lengthof r54;

     label11:
        i11 = 0;

     label12:
        if i11 >= i10 goto label15;

        i12 = r54[i11];

     label13:
        $z7 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r55, i12);

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>($z7, i12);

     label14:
        i11 = i11 + 1;

        goto label12;

     label15:
        if r54 == null goto label21;

     label16:
        i13 = lengthof r54;

     label17:
        i14 = 0;

     label18:
        if i14 >= i13 goto label21;

     label19:
        $i4 = r54[i14];

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void resetOverrideComponentLabelIcon(int)>($i4);

     label20:
        i14 = i14 + 1;

        goto label18;

     label21:
        $r57 = virtualinvoke r5.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $r58 = virtualinvoke $r57.<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryInfos()>();

        $z8 = interfaceinvoke $r58.<java.util.List: boolean isEmpty()>();

        if $z8 != 0 goto label35;

        $r40 = virtualinvoke r5.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $r41 = virtualinvoke $r40.<com.android.server.pm.pkg.PackageStateUnserialized: java.util.List getUsesLibraryInfos()>();

        r59 = interfaceinvoke $r41.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z5 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label35;

        $r42 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (android.content.pm.SharedLibraryInfo) $r42;

        $r43 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        r61 = virtualinvoke $r43.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i15 = lengthof r61;

     label23:
        i16 = 0;

     label24:
        if i16 >= i15 goto label34;

        i17 = r61[i16];

     label25:
        $z6 = virtualinvoke r60.<android.content.pm.SharedLibraryInfo: boolean isDynamic()>();

        if $z6 != 0 goto label27;

     label26:
        goto label33;

     label27:
        $r44 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r45 = $r44.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r46 = virtualinvoke r60.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        $r47 = virtualinvoke $r45.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r46);

        r62 = (com.android.server.pm.PackageSetting) $r47;

     label28:
        if r62 != null goto label29;

        goto label33;

     label29:
        r63 = virtualinvoke r62.<com.android.server.pm.PackageSetting: java.lang.String[] getOverlayPaths(int)>(i17);

     label30:
        if r63 == null goto label33;

     label31:
        $r48 = virtualinvoke r60.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        $r49 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r63);

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setOverlayPathsForLibrary(java.lang.String,java.util.List,int)>($r48, $r49, i17);

     label32:
        goto label33;

     label33:
        i16 = i16 + 1;

        goto label24;

     label34:
        goto label22;

     label35:
        if i6 == -1 goto label37;

     label36:
        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, i6);

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(0, i6, r3);

     label37:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = r5.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        virtualinvoke $r14.<com.android.server.pm.Settings: void addInstallerPackageNames(com.android.server.pm.InstallSource)>($r13);

        r64 = new android.util.ArraySet;

        specialinvoke r64.<android.util.ArraySet: void <init>()>();

        $r15 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r15 == null goto label42;

        $r29 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r30 = $r29.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray installReasons>;

        if $r30 == null goto label42;

        $r31 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r32 = $r31.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray installReasons>;

        i18 = virtualinvoke $r32.<android.util.SparseArray: int size()>();

     label38:
        i19 = 0;

     label39:
        if i19 >= i18 goto label42;

     label40:
        $r33 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r34 = $r33.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray installReasons>;

        i20 = virtualinvoke $r34.<android.util.SparseArray: int keyAt(int)>(i19);

        $r35 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r36 = $r35.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray installReasons>;

        $r37 = virtualinvoke $r36.<android.util.SparseArray: java.lang.Object valueAt(int)>(i19);

        $r38 = (java.lang.Integer) $r37;

        $i3 = virtualinvoke $r38.<java.lang.Integer: int intValue()>();

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setInstallReason(int,int)>($i3, i20);

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i20);

        interfaceinvoke r64.<java.util.Set: boolean add(java.lang.Object)>($r39);

     label41:
        i19 = i19 + 1;

        goto label39;

     label42:
        $r65 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r65 == null goto label46;

        $r19 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r20 = $r19.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray uninstallReasons>;

        if $r20 == null goto label46;

     label43:
        i21 = 0;

     label44:
        $r21 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r22 = $r21.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray uninstallReasons>;

        $i1 = virtualinvoke $r22.<android.util.SparseArray: int size()>();

        if i21 >= $i1 goto label46;

        $r23 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r24 = $r23.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray uninstallReasons>;

        i22 = virtualinvoke $r24.<android.util.SparseArray: int keyAt(int)>(i21);

        $r25 = r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r26 = $r25.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: android.util.SparseArray uninstallReasons>;

        $r27 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i21);

        $r28 = (java.lang.Integer) $r27;

        $i2 = virtualinvoke $r28.<java.lang.Integer: int intValue()>();

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setUninstallReason(int,int)>($i2, i22);

     label45:
        i21 = i21 + 1;

        goto label44;

     label46:
        $r66 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r67 = virtualinvoke $r66.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label47:
        if i6 != -1 goto label53;

     label48:
        i23 = lengthof r67;

     label49:
        i24 = 0;

     label50:
        if i24 >= i23 goto label54;

        i25 = r67[i24];

     label51:
        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i25);

        $z3 = interfaceinvoke r64.<java.util.Set: boolean contains(java.lang.Object)>($r18);

        if $z3 != 0 goto label52;

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setInstallReason(int,int)>(i5, i25);

     label52:
        i24 = i24 + 1;

        goto label50;

     label53:
        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        $z1 = interfaceinvoke r64.<java.util.Set: boolean contains(java.lang.Object)>($r16);

        if $z1 != 0 goto label54;

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setInstallReason(int,int)>(i5, i6);

     label54:
        i26 = lengthof r67;

     label55:
        i27 = 0;

     label56:
        if i27 >= i26 goto label60;

        i28 = r67[i27];

     label57:
        $z2 = virtualinvoke r5.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i28);

        if $z2 == 0 goto label59;

        virtualinvoke r5.<com.android.server.pm.PackageSetting: void setUninstallReason(int,int)>(0, i28);

     label58:
        goto label59;

     label59:
        i27 = i27 + 1;

        goto label56;

     label60:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r17.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r5);

     label61:
        r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String name> = r2;

        $i0 = interfaceinvoke r52.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid> = $i0;

        r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg> = r52;

        virtualinvoke r1.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: void setReturnCode(int)>(1);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "writeSettings");

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r12.<com.android.server.pm.Settings: void writeLPr()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        exitmonitor r4;

     label62:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return;

     label63:
        $r51 := @caughtexception;

     label64:
        exitmonitor r4;

     label65:
        throw $r51;

        catch java.lang.Throwable from label01 to label02 with label63;
        catch java.lang.Throwable from label03 to label04 with label63;
        catch java.lang.Throwable from label07 to label08 with label63;
        catch java.lang.Throwable from label10 to label11 with label63;
        catch java.lang.Throwable from label13 to label14 with label63;
        catch java.lang.Throwable from label16 to label17 with label63;
        catch java.lang.Throwable from label19 to label20 with label63;
        catch java.lang.Throwable from label21 to label22 with label63;
        catch java.lang.Throwable from label22 to label23 with label63;
        catch java.lang.Throwable from label25 to label26 with label63;
        catch java.lang.Throwable from label27 to label28 with label63;
        catch java.lang.Throwable from label29 to label30 with label63;
        catch java.lang.Throwable from label31 to label32 with label63;
        catch java.lang.Throwable from label36 to label37 with label63;
        catch java.lang.Throwable from label37 to label38 with label63;
        catch java.lang.Throwable from label40 to label41 with label63;
        catch java.lang.Throwable from label42 to label43 with label63;
        catch java.lang.Throwable from label44 to label45 with label63;
        catch java.lang.Throwable from label46 to label47 with label63;
        catch java.lang.Throwable from label48 to label49 with label63;
        catch java.lang.Throwable from label51 to label52 with label63;
        catch java.lang.Throwable from label53 to label54 with label63;
        catch java.lang.Throwable from label54 to label55 with label63;
        catch java.lang.Throwable from label57 to label58 with label63;
        catch java.lang.Throwable from label60 to label61 with label63;
        catch java.lang.Throwable from label61 to label62 with label63;
        catch java.lang.Throwable from label64 to label65 with label63;
    }

    private void updateSettingsLI(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageManagerService$InstallArgs, int[], com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        com.android.server.pm.PackageManagerService$InstallArgs r2;
        int[] r3;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$InstallArgs;

        r3 := @parameter2: int[];

        r4 := @parameter3: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSettingsInternalLI(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageManagerService$InstallArgs,int[],com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(r1, r2, r3, r4);

        return;
    }

    private void updateSharedLibrariesLocked(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.PackageSetting, java.util.Map) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, r3, $r7;
        com.android.server.pm.PackageSetting r2, r4;
        java.util.Map r5;
        android.util.ArrayMap $r6;
        java.util.ArrayList $r8;
        com.android.server.pm.UserManagerService $r9;
        int[] $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: com.android.server.pm.PackageSetting;

        r3 := @parameter2: com.android.server.pm.parsing.pkg.AndroidPackage;

        r4 := @parameter3: com.android.server.pm.PackageSetting;

        r5 := @parameter4: java.util.Map;

        $r7 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r8 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.ArrayList collectSharedLibraryInfos(com.android.server.pm.parsing.pkg.AndroidPackage,java.util.Map,java.util.Map,java.util.Map)>($r7, r5, $r6, null);

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r10 = virtualinvoke $r9.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void executeSharedLibrariesUpdateLPr(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,java.util.ArrayList,int[])>(r1, r2, r3, r4, $r8, $r10);

        return;
    }

    private boolean userNeedsBadging(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        long l2;
        android.util.SparseBooleanArray $r1, $r2, $r6;
        boolean $z0, $z1, z2;
        com.android.server.pm.UserManagerService $r3;
        java.lang.Throwable $r4;
        android.content.pm.UserInfo r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        i1 = virtualinvoke $r1.<android.util.SparseBooleanArray: int indexOfKey(int)>(i0);

        if i1 >= 0 goto label6;

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r5 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        if r5 == null goto label3;

        $z1 = virtualinvoke r5.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        virtualinvoke $r6.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z2);

        return z2;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

     label6:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        $z0 = virtualinvoke $r2.<android.util.SparseBooleanArray: boolean valueAt(int)>(i1);

        return $z0;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    private void verifyIntentFiltersIfNeeded(int, int, boolean, java.lang.String, boolean, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i2, $i3, $i4, i5, i6, i7, i8;
        java.lang.Object r2, $r9, $r12, $r15, $r18;
        android.content.pm.IntentFilterVerificationInfo r3;
        boolean z1, $z2, $z3, $z4, $z7, $z8, $z9, z10, z11, z12, z14, $z16, z19, $z28, z31, z33, z37;
        android.content.pm.parsing.component.ParsedIntentInfo r4, r28;
        android.util.ArraySet $r5;
        com.android.server.pm.Settings $r6, $r30;
        com.android.server.pm.PackageManagerService$IntentFilterVerifier $r7, $r13;
        java.util.Set $r8;
        android.content.pm.parsing.component.ParsedActivity $r10, $r16;
        java.util.List $r11, $r17, r23;
        java.util.ArrayList $r14;
        java.lang.Throwable $r19, $r20, $r21, r29;
        java.lang.String r22;
        java.util.Iterator r24, r25, r26, r27;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        z10 := @parameter2: boolean;

        r22 := @parameter3: java.lang.String;

        z11 := @parameter4: boolean;

        r23 := @parameter5: java.util.List;

        $i3 = interfaceinvoke r23.<java.util.List: int size()>();

        if $i3 != 0 goto label01;

        return;

     label01:
        if z11 != 0 goto label02;

        return;

     label02:
        i6 = 0;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label03:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r3 = virtualinvoke $r6.<com.android.server.pm.Settings: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationLPr(java.lang.String)>(r22);

     label04:
        if r3 == null goto label05;

        z12 = 1;

        goto label06;

     label05:
        z12 = 0;

     label06:
        if z10 != 0 goto label09;

        if z12 == 0 goto label09;

     label07:
        exitmonitor r2;

     label08:
        return;

     label09:
        z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean needsNetworkVerificationLPr(java.lang.String)>(r22);

        r24 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label10:
        z14 = 0;

     label11:
        $z16 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label22;

     label12:
        $r15 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (android.content.pm.parsing.component.ParsedActivity) $r15;

        $r17 = virtualinvoke $r16.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        r25 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>();

     label13:
        z19 = z14;

     label14:
        $z7 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label21;

     label15:
        $r18 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.parsing.component.ParsedIntentInfo) $r18;

     label16:
        $z8 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedIntentInfo: boolean handlesWebUris(boolean)>(1);

        if $z8 == 0 goto label17;

     label17:
        if z1 == 0 goto label20;

     label18:
        $z9 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedIntentInfo: boolean needsVerification()>();

        if $z9 == 0 goto label20;

     label19:
        z19 = 1;

        goto label21;

     label20:
        goto label13;

     label21:
        z14 = z19;

        goto label11;

     label22:
        if z14 != 0 goto label23;

        if z12 == 0 goto label35;

     label23:
        i2 = r0.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken>;

     label24:
        $i4 = i2 + 1;

        r0.<com.android.server.pm.PackageManagerService: int mIntentFilterVerificationToken> = $i4;

     label25:
        r26 = interfaceinvoke r23.<java.util.List: java.util.Iterator iterator()>();

     label26:
        i7 = 0;

     label27:
        i6 = i7;

     label28:
        $z28 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z28 == 0 goto label35;

     label29:
        $r9 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.content.pm.parsing.component.ParsedActivity) $r9;

        $r11 = virtualinvoke $r10.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        r27 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label30:
        $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label33;

        $r12 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (android.content.pm.parsing.component.ParsedIntentInfo) $r12;

        $z4 = virtualinvoke r28.<android.content.pm.parsing.component.ParsedIntentInfo: boolean handlesWebUris(boolean)>(0);

        if $z4 == 0 goto label32;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier>;

        interfaceinvoke $r13.<com.android.server.pm.PackageManagerService$IntentFilterVerifier: boolean addOneIntentFilterVerification(int,int,int,android.content.IntentFilter,java.lang.String)>(i5, i0, i2, r28, r22);

        $r14 = virtualinvoke r28.<android.content.pm.parsing.component.ParsedIntentInfo: java.util.ArrayList getHostsList()>();

        virtualinvoke $r5.<android.util.ArraySet: boolean addAll(java.util.Collection)>($r14);

     label31:
        i7 = i7 + 1;

        goto label32;

     label32:
        goto label30;

     label33:
        goto label27;

     label34:
        $r21 := @caughtexception;

        r29 = $r21;

        goto label57;

     label35:
        if z12 == 0 goto label39;

        if r3 == null goto label38;

     label36:
        $r8 = virtualinvoke r3.<android.content.pm.IntentFilterVerificationInfo: java.util.Set getDomains()>();

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean containsAll(java.util.Collection)>($r5);

        if $z2 != 0 goto label38;

     label37:
        goto label39;

     label38:
        z31 = 0;

        goto label40;

     label39:
        z31 = 1;

     label40:
        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i8 = virtualinvoke $r30.<com.android.server.pm.Settings: int getIntentFilterVerificationStatusLPr(java.lang.String,int)>(r22, i0);

     label41:
        if z31 != 0 goto label42;

        if i8 != 2 goto label42;

        z33 = 1;

        goto label43;

     label42:
        z33 = 0;

     label43:
        if z14 == 0 goto label48;

        if z33 == 0 goto label48;

     label44:
        virtualinvoke r3.<android.content.pm.IntentFilterVerificationInfo: void setDomains(android.util.ArraySet)>($r5);

     label45:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

     label46:
        exitmonitor r2;

     label47:
        return;

     label48:
        if z12 == 0 goto label52;

        if z14 != 0 goto label52;

        z37 = 0;

        if z33 != 0 goto label49;

        z37 = 1;

     label49:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(java.lang.String,int,boolean)>(r22, i0, z37);

     label50:
        exitmonitor r2;

     label51:
        return;

     label52:
        exitmonitor r2;

     label53:
        if z14 == 0 goto label54;

        if i6 <= 0 goto label54;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$IntentFilterVerifier mIntentFilterVerifier>;

        interfaceinvoke $r7.<com.android.server.pm.PackageManagerService$IntentFilterVerifier: void startVerifications(int)>(i0);

     label54:
        return;

     label55:
        $r20 := @caughtexception;

        r29 = $r20;

        goto label57;

     label56:
        $r19 := @caughtexception;

        r29 = $r19;

     label57:
        exitmonitor r2;

     label58:
        throw r29;

        catch java.lang.Throwable from label03 to label04 with label56;
        catch java.lang.Throwable from label07 to label08 with label56;
        catch java.lang.Throwable from label09 to label10 with label56;
        catch java.lang.Throwable from label11 to label12 with label55;
        catch java.lang.Throwable from label12 to label13 with label55;
        catch java.lang.Throwable from label14 to label15 with label55;
        catch java.lang.Throwable from label15 to label16 with label55;
        catch java.lang.Throwable from label16 to label17 with label55;
        catch java.lang.Throwable from label18 to label19 with label55;
        catch java.lang.Throwable from label23 to label24 with label55;
        catch java.lang.Throwable from label24 to label25 with label55;
        catch java.lang.Throwable from label25 to label26 with label55;
        catch java.lang.Throwable from label28 to label29 with label55;
        catch java.lang.Throwable from label29 to label30 with label55;
        catch java.lang.Throwable from label30 to label31 with label34;
        catch java.lang.Throwable from label36 to label37 with label55;
        catch java.lang.Throwable from label40 to label41 with label55;
        catch java.lang.Throwable from label44 to label45 with label55;
        catch java.lang.Throwable from label45 to label46 with label55;
        catch java.lang.Throwable from label46 to label47 with label55;
        catch java.lang.Throwable from label49 to label50 with label55;
        catch java.lang.Throwable from label50 to label51 with label55;
        catch java.lang.Throwable from label52 to label53 with label55;
        catch java.lang.Throwable from label57 to label58 with label56;
    }

    private boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        int $i0, $i1;
        java.lang.String $r3, $r8, $r11, $r14, $r17, $r20, $r23;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        java.lang.StringBuilder $r6, $r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        $i0 = r1.<com.android.server.pm.PackageSetting: int pkgFlags>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update from ");

        $r17 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r20 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": old package not in system partition");

        $r23 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        return 0;

     label1:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r3);

        if $r5 == null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to update from ");

        $r8 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": old package still exists");

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r14);

        return 0;

     label2:
        return 1;
    }

    public boolean activitySupportsIntent(android.content.ComponentName, android.content.Intent, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2, $r10, $r16, $r17;
        java.lang.Object r3, $r11, $r14;
        int i0, $i1, $i2, i3, i4;
        android.content.pm.parsing.component.ParsedActivity r4;
        com.android.server.pm.PackageSetting r5;
        android.content.ComponentName $r6, r21;
        boolean $z0, $z1;
        com.android.server.pm.ComponentResolver $r7;
        com.android.server.pm.Settings $r8;
        android.util.ArrayMap $r9;
        java.util.List $r12, $r13;
        android.content.pm.parsing.component.ParsedIntentInfo $r15;
        android.net.Uri $r18;
        java.util.Set $r19;
        java.lang.Throwable $r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r21 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: android.content.Intent;

        r2 := @parameter2: java.lang.String;

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mResolveComponentName>;

        $z0 = virtualinvoke r21.<android.content.ComponentName: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label03;

        exitmonitor r3;

     label02:
        return 1;

     label03:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r4 = virtualinvoke $r7.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedActivity getActivity(android.content.ComponentName)>(r21);

     label04:
        if r4 != null goto label07;

     label05:
        exitmonitor r3;

     label06:
        return 0;

     label07:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke r21.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r11 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r10);

        r5 = (com.android.server.pm.PackageSetting) $r11;

     label08:
        if r5 != null goto label11;

     label09:
        exitmonitor r3;

     label10:
        return 0;

     label11:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r5, i0, r21, 1, i3);

        if $z1 == 0 goto label13;

        exitmonitor r3;

     label12:
        return 0;

     label13:
        i4 = 0;

     label14:
        $r12 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        $i1 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i4 >= $i1 goto label17;

        $r13 = virtualinvoke r4.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        $r14 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i4);

        $r15 = (android.content.pm.parsing.component.ParsedIntentInfo) $r14;

        $r16 = virtualinvoke r1.<android.content.Intent: java.lang.String getAction()>();

        $r17 = virtualinvoke r1.<android.content.Intent: java.lang.String getScheme()>();

        $r18 = virtualinvoke r1.<android.content.Intent: android.net.Uri getData()>();

        $r19 = virtualinvoke r1.<android.content.Intent: java.util.Set getCategories()>();

        $i2 = virtualinvoke $r15.<android.content.pm.parsing.component.ParsedIntentInfo: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>($r16, r2, $r17, $r18, $r19, "PackageManager");

        if $i2 < 0 goto label16;

        exitmonitor r3;

     label15:
        return 1;

     label16:
        i4 = i4 + 1;

        goto label14;

     label17:
        exitmonitor r3;

     label18:
        return 0;

     label19:
        $r20 := @caughtexception;

     label20:
        exitmonitor r3;

     label21:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void addCrossProfileIntentFilter(android.content.IntentFilter, java.lang.String, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, i4, i5, i6, i7;
        java.lang.Object r1, $r7;
        com.android.server.pm.CrossProfileIntentFilter r2, $r8;
        android.content.Context $r3;
        com.android.server.pm.PackageManagerService$Injector $r4;
        android.os.UserManagerInternal $r5;
        com.android.server.pm.Settings $r6;
        boolean $z0;
        java.lang.Throwable $r9;
        android.content.IntentFilter r10;
        java.lang.String r11;
        com.android.server.pm.CrossProfileIntentResolver r12;
        java.util.ArrayList r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: android.content.IntentFilter;

        r11 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        i5 := @parameter4: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enforceOwnerRights(java.lang.String,int)>(r11, i1);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r5 = virtualinvoke $r4.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceShellRestriction(android.os.UserManagerInternal,java.lang.String,int,int)>($r5, "no_debugging_features", i1, i0);

        $i2 = virtualinvoke r10.<android.content.IntentFilter: int countActions()>();

        if $i2 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot set a crossProfile intent filter with no filter actions");

        return;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        r2 = new com.android.server.pm.CrossProfileIntentFilter;

        specialinvoke r2.<com.android.server.pm.CrossProfileIntentFilter: void <init>(android.content.IntentFilter,java.lang.String,int,int)>(r10, r11, i4, i5);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r12 = virtualinvoke $r6.<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>(i0);

        r13 = virtualinvoke r12.<com.android.server.pm.CrossProfileIntentResolver: java.util.ArrayList findFilters(android.content.IntentFilter)>(r10);

     label03:
        if r13 == null goto label10;

     label04:
        i6 = virtualinvoke r13.<java.util.ArrayList: int size()>();

     label05:
        i7 = 0;

     label06:
        if i7 >= i6 goto label10;

     label07:
        $r7 = virtualinvoke r13.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r8 = (com.android.server.pm.CrossProfileIntentFilter) $r7;

        $z0 = virtualinvoke r2.<com.android.server.pm.CrossProfileIntentFilter: boolean equalsIgnoreFilter(com.android.server.pm.CrossProfileIntentFilter)>($r8);

        if $z0 == 0 goto label09;

        exitmonitor r1;

     label08:
        return;

     label09:
        i7 = i7 + 1;

        goto label06;

     label10:
        virtualinvoke r12.<com.android.server.pm.CrossProfileIntentResolver: void addFilter(java.lang.Object)>(r2);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r1;

     label11:
        return;

     label12:
        $r9 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean addPermission(android.content.pm.PermissionInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        android.content.pm.PermissionInfo r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: android.content.pm.PermissionInfo;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        z0 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean addPermission(android.content.pm.PermissionInfo,boolean)>(r3, 0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean addPermissionAsync(android.content.pm.PermissionInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        android.content.pm.PermissionInfo r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: android.content.pm.PermissionInfo;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        z0 = interfaceinvoke $r1.<android.permission.IPermissionManager: boolean addPermission(android.content.pm.PermissionInfo,boolean)>(r3, 1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addPersistentPreferredActivity(android.content.IntentFilter, android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        com.android.server.pm.PersistentPreferredIntentResolver r3;
        com.android.server.pm.PersistentPreferredActivity r4;
        java.lang.SecurityException $r5;
        com.android.server.pm.Settings $r6;
        java.lang.Throwable $r7;
        android.content.IntentFilter r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: android.content.IntentFilter;

        r1 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label7;

        $i2 = virtualinvoke r8.<android.content.IntentFilter: int countActions()>();

        if $i2 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot set a preferred activity with no filter actions");

        return;

     label1:
        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r3 = virtualinvoke $r6.<com.android.server.pm.Settings: com.android.server.pm.PersistentPreferredIntentResolver editPersistentPreferredActivitiesLPw(int)>(i0);

        r4 = new com.android.server.pm.PersistentPreferredActivity;

        specialinvoke r4.<com.android.server.pm.PersistentPreferredActivity: void <init>(android.content.IntentFilter,android.content.ComponentName,boolean)>(r8, r1, 1);

        virtualinvoke r3.<com.android.server.pm.PersistentPreferredIntentResolver: void addFilter(java.lang.Object)>(r4);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r2;

     label3:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(i0);

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r7;

     label7:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("addPersistentPreferredActivity can only be run by the system");

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.IntentFilter r1;
        int i0, i1;
        android.content.ComponentName[] r2;
        android.content.ComponentName r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.ComponentName[];

        r3 := @parameter3: android.content.ComponentName;

        i1 := @parameter4: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void addPreferredActivityInternal(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean,int,java.lang.String)>(r1, i0, r2, r3, 1, i1, "Adding preferred");

        return;
    }

    public boolean canForwardTo(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        android.content.pm.UserInfo r2;
        android.content.Context $r3;
        boolean $z0, $z1, z2;
        com.android.server.pm.PackageManagerService$CrossProfileDomainInfo $r4;
        java.lang.Object $r5, r11;
        com.android.server.pm.CrossProfileIntentFilter $r6;
        java.lang.Throwable $r7, $r8, r12;
        android.content.Intent r9;
        java.util.List r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getMatchingCrossProfileIntentFilters(android.content.Intent,java.lang.String,int)>(r9, r1, i0);

        z2 = 1;

        if r10 == null goto label04;

        i5 = interfaceinvoke r10.<java.util.List: int size()>();

        i6 = 0;

     label01:
        if i6 >= i5 goto label03;

        $r5 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i6);

        $r6 = (com.android.server.pm.CrossProfileIntentFilter) $r5;

        $i3 = virtualinvoke $r6.<com.android.server.pm.CrossProfileIntentFilter: int getTargetUserId()>();

        if $i3 != i4 goto label02;

        return 1;

     label02:
        i6 = i6 + 1;

        goto label01;

     label03:
        goto label04;

     label04:
        $z0 = virtualinvoke r9.<android.content.Intent: boolean hasWebURI()>();

        if $z0 == 0 goto label16;

        i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r2 != null goto label05;

        return 0;

     label05:
        r11 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label06:
        i8 = r2.<android.content.pm.UserInfo: int id>;

        i9 = r2.<android.content.pm.UserInfo: int id>;

     label07:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r9, i9, r1, 0);

        $i1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(0, i8, i7, 0, $z1);

        $i2 = r2.<android.content.pm.UserInfo: int id>;

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$CrossProfileDomainInfo getCrossProfileDomainPreferredLpr(android.content.Intent,java.lang.String,int,int,int)>(r9, r1, $i1, i0, $i2);

        if $r4 == null goto label09;

     label08:
        goto label10;

     label09:
        z2 = 0;

     label10:
        exitmonitor r11;

     label11:
        return z2;

     label12:
        $r7 := @caughtexception;

        r12 = $r7;

     label13:
        exitmonitor r11;

     label14:
        throw r12;

     label15:
        $r8 := @caughtexception;

        r12 = $r8;

        goto label13;

     label16:
        return 0;

        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    boolean canHaveOatDir(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        boolean z0, $z1;
        android.util.ArrayMap $r3;
        com.android.server.pm.Settings $r5;
        com.android.server.pm.pkg.PackageStateUnserialized $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;
        com.android.server.pm.PackageSetting r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r9 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r8);

     label2:
        if r2 == null goto label5;

        if r9 != null goto label3;

        goto label5;

     label3:
        $r6 = virtualinvoke r9.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $z1 = virtualinvoke $r6.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

        z0 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean canHaveOatDir(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r2, $z1);

        exitmonitor r1;

     label4:
        return z0;

     label5:
        exitmonitor r1;

     label6:
        return 0;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean canRequestPackageInstalls(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canRequestPackageInstallsInternal(java.lang.String,int,int,boolean)>(r1, 0, i0, 1);

        return $z0;
    }

    public java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String[] r1, r13;
        java.lang.Object r2, $r10;
        boolean z0, $z2, $z3, z4, z5;
        com.android.server.pm.PackageSetting r3;
        java.lang.String $r4, $r5, $r8, r14;
        com.android.server.pm.Settings $r6, $r7;
        android.util.ArrayMap $r9;
        com.android.server.pm.InstantAppRegistry $r11;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String[];

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r4 == null goto label01;

        return r13;

     label01:
        $i2 = lengthof r13;

        r1 = newarray (java.lang.String)[$i2];

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i0, i1);

        $i3 = lengthof r13;

        i6 = $i3 - 1;

     label03:
        if i6 < 0 goto label17;

     label04:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = r13[i6];

        r14 = virtualinvoke $r6.<com.android.server.pm.Settings: java.lang.String getRenamedPackageLPr(java.lang.String)>($r5);

     label05:
        z4 = 0;

        if r14 == null goto label14;

     label06:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = r13[i6];

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r8);

        r3 = (com.android.server.pm.PackageSetting) $r10;

     label07:
        if r3 == null goto label10;

     label08:
        $z3 = virtualinvoke r3.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z3 == 0 goto label10;

     label09:
        z5 = 1;

        goto label11;

     label10:
        z5 = 0;

     label11:
        if z5 == 0 goto label13;

        if z0 != 0 goto label13;

        z4 = 0;

     label12:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i5 = r3.<com.android.server.pm.PackageSetting: int appId>;

        $z2 = virtualinvoke $r11.<com.android.server.pm.InstantAppRegistry: boolean isInstantAccessGranted(int,int,int)>(i1, $i4, $i5);

        if $z2 == 0 goto label14;

     label13:
        z4 = 1;

     label14:
        if z4 == 0 goto label15;

        goto label16;

     label15:
        r14 = r13[i6];

     label16:
        r1[i6] = r14;

        i6 = i6 + -1;

        goto label03;

     label17:
        exitmonitor r2;

     label18:
        return r1;

     label19:
        $r12 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void checkPackageStartable(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object r1, $r9;
        java.lang.String $r2, $r13, $r19, $r24, $r29, $r33, r35;
        java.lang.SecurityException $r3, $r5, r37, r39, r41, r43, r45;
        com.android.server.pm.UserManagerService $r4;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        com.android.server.pm.Settings $r7;
        android.util.ArrayMap $r8;
        android.util.ArraySet $r20;
        com.android.server.pm.parsing.pkg.AndroidPackage $r25;
        java.lang.Throwable $r34;
        com.android.server.pm.PackageSetting r36;
        java.lang.StringBuilder r38, r40, r42, r44, r46;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r35 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r2 != null goto label20;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z1 == 0 goto label19;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "checkPackageStartable");

        z0 = staticinvoke <android.os.storage.StorageManager: boolean isUserKeyUnlocked(int)>(i0);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r35);

        r36 = (com.android.server.pm.PackageSetting) $r9;

     label02:
        if r36 == null goto label15;

     label03:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r36, i1, i0);

        if $z2 != 0 goto label15;

        $z3 = virtualinvoke r36.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z3 == 0 goto label14;

        $z4 = r0.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z4 == 0 goto label06;

        $z7 = virtualinvoke r36.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z7 == 0 goto label05;

     label04:
        goto label06;

     label05:
        r37 = new java.lang.SecurityException;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not a system app!");

        $r33 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r37.<java.lang.SecurityException: void <init>(java.lang.String)>($r33);

        throw r37;

     label06:
        $r20 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages>;

        $z5 = virtualinvoke $r20.<android.util.ArraySet: boolean contains(java.lang.Object)>(r35);

        if $z5 != 0 goto label13;

     label07:
        if z0 != 0 goto label11;

     label08:
        $r25 = r36.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z6 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isEncryptionAware(com.android.server.pm.parsing.pkg.AndroidPackage)>($r25);

        if $z6 == 0 goto label10;

     label09:
        goto label11;

     label10:
        r39 = new java.lang.SecurityException;

        r40 = new java.lang.StringBuilder;

        specialinvoke r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not encryption aware!");

        $r29 = virtualinvoke r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r39.<java.lang.SecurityException: void <init>(java.lang.String)>($r29);

        throw r39;

     label11:
        exitmonitor r1;

     label12:
        return;

     label13:
        r41 = new java.lang.SecurityException;

        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is currently frozen!");

        $r24 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r41.<java.lang.SecurityException: void <init>(java.lang.String)>($r24);

        throw r41;

     label14:
        r43 = new java.lang.SecurityException;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not installed for user ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!");

        $r19 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r43.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw r43;

     label15:
        r45 = new java.lang.SecurityException;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found!");

        $r13 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r45.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw r45;

     label16:
        $r34 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r34;

     label19:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("User doesn\'t exist");

        throw $r5;

     label20:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Instant applications don\'t have access to this method");

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label15 to label16 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public int checkPermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r4;
        android.permission.IPermissionManager $r2;
        android.os.RemoteException $r3;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        i1 = interfaceinvoke $r2.<android.permission.IPermissionManager: int checkPermission(java.lang.String,java.lang.String,int)>(r4, r1, i0);

     label2:
        return i1;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkSignatures(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r5, $r7;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r3;
        int i0, i1, i2;
        android.util.ArrayMap $r4, $r6;
        java.lang.String $r8, $r9, r13, r14;
        boolean $z0, $z1;
        android.content.pm.PackageParser$SigningDetails $r10, $r11;
        java.lang.Throwable $r12;
        com.android.server.pm.PackageSetting r15, r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r7;

     label02:
        r15 = null;

        if r2 != null goto label03;

        r16 = null;

        goto label04;

     label03:
        $r8 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r16 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r8);

     label04:
        if r3 != null goto label06;

     label05:
        goto label08;

     label06:
        $r9 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r15 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r9);

     label07:
        goto label05;

     label08:
        if r2 == null goto label15;

        if r16 == null goto label15;

        if r3 == null goto label15;

        if r15 != null goto label09;

        goto label15;

     label09:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r16, i1, i0);

        if $z0 != 0 goto label13;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r15, i1, i0);

        if $z1 == 0 goto label11;

     label10:
        goto label13;

     label11:
        $r10 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $r11 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int checkSignaturesInternal(android.content.pm.PackageParser$SigningDetails,android.content.pm.PackageParser$SigningDetails)>($r10, $r11);

        exitmonitor r1;

     label12:
        return i2;

     label13:
        exitmonitor r1;

     label14:
        return -4;

     label15:
        exitmonitor r1;

     label16:
        return -4;

     label17:
        $r12 := @caughtexception;

     label18:
        exitmonitor r1;

     label19:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    public int checkUidPermission(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        i1 = interfaceinvoke $r1.<android.permission.IPermissionManager: int checkUidPermission(java.lang.String,int)>(r3, i0);

     label2:
        return i1;

     label3:
        $r2 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkUidSignatures(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, i4, i5, i6;
        java.lang.Object r1;
        java.lang.String $r2;
        com.android.server.pm.Settings $r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        com.android.server.pm.PackageSignatures $r4, $r6, $r8, $r10;
        com.android.server.pm.SharedUserSetting $r7, $r9;
        java.lang.Throwable $r11;
        com.android.server.pm.SettingBase r12, r15;
        android.content.pm.PackageParser$SigningDetails r13, r16;
        com.android.server.pm.PackageSetting r14, r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r2 == null goto label01;

        z6 = 1;

        goto label02;

     label01:
        z6 = 0;

     label02:
        i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        i5 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i3);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r12 = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i4);

     label04:
        if r12 == null goto label33;

     label05:
        $z0 = r12 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label11;

     label06:
        if z6 == 0 goto label09;

     label07:
        exitmonitor r1;

     label08:
        return -4;

     label09:
        $r9 = (com.android.server.pm.SharedUserSetting) r12;

        $r10 = $r9.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        r13 = $r10.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label10:
        goto label14;

     label11:
        $z1 = r12 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label31;

        r14 = (com.android.server.pm.PackageSetting) r12;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r14, i0, i1);

        if $z2 == 0 goto label13;

        exitmonitor r1;

     label12:
        return -4;

     label13:
        $r4 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        r13 = $r4.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label14:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r15 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i5);

     label15:
        if r15 == null goto label29;

     label16:
        $z3 = r15 instanceof com.android.server.pm.SharedUserSetting;

        if $z3 == 0 goto label22;

     label17:
        if z6 == 0 goto label20;

     label18:
        exitmonitor r1;

     label19:
        return -4;

     label20:
        $r7 = (com.android.server.pm.SharedUserSetting) r15;

        $r8 = $r7.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        r16 = $r8.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label21:
        goto label25;

     label22:
        $z4 = r15 instanceof com.android.server.pm.PackageSetting;

        if $z4 == 0 goto label27;

        r17 = (com.android.server.pm.PackageSetting) r15;

        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r17, i0, i1);

        if $z5 == 0 goto label24;

        exitmonitor r1;

     label23:
        return -4;

     label24:
        $r6 = r17.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        r16 = $r6.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label25:
        i6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int checkSignaturesInternal(android.content.pm.PackageParser$SigningDetails,android.content.pm.PackageParser$SigningDetails)>(r13, r16);

        exitmonitor r1;

     label26:
        return i6;

     label27:
        exitmonitor r1;

     label28:
        return -4;

     label29:
        exitmonitor r1;

     label30:
        return -4;

     label31:
        exitmonitor r1;

     label32:
        return -4;

     label33:
        exitmonitor r1;

     label34:
        return -4;

     label35:
        $r11 := @caughtexception;

     label36:
        exitmonitor r1;

     label37:
        throw $r11;

        catch java.lang.Throwable from label03 to label04 with label35;
        catch java.lang.Throwable from label05 to label06 with label35;
        catch java.lang.Throwable from label07 to label08 with label35;
        catch java.lang.Throwable from label09 to label10 with label35;
        catch java.lang.Throwable from label11 to label12 with label35;
        catch java.lang.Throwable from label13 to label14 with label35;
        catch java.lang.Throwable from label14 to label15 with label35;
        catch java.lang.Throwable from label16 to label17 with label35;
        catch java.lang.Throwable from label18 to label19 with label35;
        catch java.lang.Throwable from label20 to label21 with label35;
        catch java.lang.Throwable from label22 to label23 with label35;
        catch java.lang.Throwable from label24 to label25 with label35;
        catch java.lang.Throwable from label25 to label26 with label35;
        catch java.lang.Throwable from label27 to label28 with label35;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label31 to label32 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label36 to label37 with label35;
    }

    void cleanPackageDataStructuresLILPw(com.android.server.pm.parsing.pkg.AndroidPackage, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        boolean z0, $z1;
        android.content.pm.parsing.component.ParsedInstrumentation r2;
        com.android.server.pm.ComponentResolver $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        java.util.List $r5, $r8, $r9, $r12;
        java.lang.String $r6, $r7, $r11;
        long $l0;
        java.lang.Object $r10, $r13;
        android.util.ArrayMap $r14;
        android.content.ComponentName $r15;
        int i1, i2, i3, i4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r3.<com.android.server.pm.ComponentResolver: void removeAllComponents(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r1, z0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void removeAllPermissions(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r1, z0);

        $r5 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getInstrumentations()>();

        i1 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r5);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r12 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getInstrumentations()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (android.content.pm.parsing.component.ParsedInstrumentation) $r13;

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r15 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedInstrumentation: android.content.ComponentName getComponentName()>();

        virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>($r15);

        i2 = i2 + 1;

        goto label1;

     label2:
        $z1 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        i3 = interfaceinvoke $r8.<java.util.List: int size()>();

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        $r9 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getLibraryNames()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i4);

        $r11 = (java.lang.String) $r10;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean removeSharedLibraryLPw(java.lang.String,long)>($r11, 0L);

        i4 = i4 + 1;

        goto label3;

     label4:
        $r6 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r6 == null goto label5;

        $r7 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        $l0 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean removeSharedLibraryLPw(java.lang.String,long)>($r7, $l0);

     label5:
        return;
    }

    void cleanUpUser(com.android.server.pm.UserManagerService, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1;
        android.util.ArraySet $r2;
        java.lang.Integer $r3;
        android.util.SparseBooleanArray $r4;
        com.android.server.pm.Settings $r5;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r6;
        com.android.server.pm.InstantAppRegistry $r7;
        java.lang.Throwable $r8;
        com.android.server.pm.UserManagerService r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: com.android.server.pm.UserManagerService;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r2.<android.util.ArraySet: boolean remove(java.lang.Object)>($r3);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseBooleanArray mUserNeedsBadging>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void removeUserLPw(int)>(i0);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r6.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void remove(int)>(i0);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        virtualinvoke $r7.<com.android.server.pm.InstantAppRegistry: void onUserRemovedLPw(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void removeUnusedPackagesLPw(com.android.server.pm.UserManagerService,int)>(r9, i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void clearApplicationProfileData(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArrayMap $r1;
        java.lang.Object $r2, r8, r11;
        java.lang.Throwable $r3, $r4, $r5, $r6;
        java.lang.String r7;
        com.android.server.pm.parsing.pkg.AndroidPackage r9;
        com.android.server.pm.PackageManagerService$PackageFreezer r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can clear all profile data");

        r8 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r8;

     label01:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r9 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r2;

        exitmonitor r8;

     label02:
        r10 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,java.lang.String)>(r7, "clearApplicationProfileData");

     label03:
        r11 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r11;

     label04:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppProfilesLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r9, -1);

        exitmonitor r11;

     label05:
        if r10 == null goto label06;

        virtualinvoke r10.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label06:
        return;

     label07:
        $r6 := @caughtexception;

     label08:
        exitmonitor r11;

     label09:
        throw $r6;

     label10:
        $r3 := @caughtexception;

        if r10 == null goto label14;

     label11:
        virtualinvoke r10.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label12:
        goto label14;

     label13:
        $r5 := @caughtexception;

        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label14:
        throw $r3;

     label15:
        $r4 := @caughtexception;

     label16:
        exitmonitor r8;

     label17:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r13;
        int i0, i1;
        com.android.server.pm.PackageSetting r2;
        android.content.Context $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        com.android.server.pm.Settings $r5;
        com.android.server.pm.PackageManagerService$4 $r6;
        android.os.Handler $r7;
        com.android.server.pm.ProtectedPackages $r8;
        boolean $z1, $z2, z3;
        java.lang.StringBuilder $r9;
        java.lang.SecurityException $r12;
        android.content.pm.IPackageDataObserver r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r14 := @parameter1: android.content.pm.IPackageDataObserver;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_USER_DATA", null);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 0, "clear application data");

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r2 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r1);

        if r2 == null goto label1;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, i1, i0);

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 != 0 goto label4;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        $z1 = virtualinvoke $r8.<com.android.server.pm.ProtectedPackages: boolean isPackageDataProtected(int,java.lang.String)>(i0, r1);

        if $z1 != 0 goto label3;

        goto label4;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot clear data for a protected package: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = new java.lang.SecurityException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $r7 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r6 = new com.android.server.pm.PackageManagerService$4;

        specialinvoke $r6.<com.android.server.pm.PackageManagerService$4: void <init>(com.android.server.pm.PackageManagerService,boolean,java.lang.String,int,android.content.pm.IPackageDataObserver)>(r0, z3, r1, i0, r14);

        virtualinvoke $r7.<android.os.Handler: boolean post(java.lang.Runnable)>($r6);

        return;
    }

    public void clearCrossProfileIntentFilters(int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r9;
        com.android.server.pm.CrossProfileIntentResolver r2;
        java.util.Iterator r3;
        android.content.Context $r4;
        com.android.server.pm.PackageManagerService$Injector $r5;
        android.os.UserManagerInternal $r6;
        com.android.server.pm.Settings $r7;
        java.util.Set $r8;
        boolean $z0, $z1;
        java.lang.String $r10, r12;
        java.lang.Throwable $r11;
        android.util.ArraySet r13;
        com.android.server.pm.CrossProfileIntentFilter r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", null);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enforceOwnerRights(java.lang.String,int)>(r12, i1);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.PackageManagerService$Injector: android.os.UserManagerInternal getUserManagerInternal()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceShellRestriction(android.os.UserManagerInternal,java.lang.String,int,int)>($r6, "no_debugging_features", i1, i0);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r2 = virtualinvoke $r7.<com.android.server.pm.Settings: com.android.server.pm.CrossProfileIntentResolver editCrossProfileIntentResolverLPw(int)>(i0);

        r13 = new android.util.ArraySet;

        $r8 = virtualinvoke r2.<com.android.server.pm.CrossProfileIntentResolver: java.util.Set filterSet()>();

        specialinvoke r13.<android.util.ArraySet: void <init>(java.util.Collection)>($r8);

        r3 = virtualinvoke r13.<android.util.ArraySet: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.android.server.pm.CrossProfileIntentFilter) $r9;

        $r10 = virtualinvoke r14.<com.android.server.pm.CrossProfileIntentFilter: java.lang.String getOwnerPackage()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r12);

        if $z1 == 0 goto label3;

        virtualinvoke r2.<com.android.server.pm.CrossProfileIntentResolver: void removeFilter(java.lang.Object)>(r14);

     label3:
        goto label2;

     label4:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r1;

     label5:
        return;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void clearDefaultBrowserIfNeeded(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int[] r2;
        int i0, $i1, i2;
        com.android.server.pm.UserManagerService $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r2 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = r2[i2];

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearDefaultBrowserIfNeededForUser(java.lang.String,int)>(r1, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    void clearIntentFilterVerificationsLPw(java.lang.String, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2;
        int i0, $i1, i2, i3;
        com.android.server.pm.Settings $r1, $r3;
        com.android.server.pm.UserManagerService $r2, $r5;
        int[] $r4, r7;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i2 != -1 goto label2;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r4 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $z2 = virtualinvoke $r3.<com.android.server.pm.Settings: boolean removeIntentFilterVerificationLPw(java.lang.String,int[])>(r6, $r4);

        if $z2 == 0 goto label3;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r7 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i0 = lengthof r7;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $i1 = r7[i3];

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>($i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r1.<com.android.server.pm.Settings: boolean removeIntentFilterVerificationLPw(java.lang.String,int,boolean)>(r6, i2, z0);

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i2);

     label3:
        return;
    }

    public void clearPackagePersistentPreferredActivities(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, i5, i6;
        java.lang.Object r1, $r12, $r13, $r15, r24;
        com.android.server.pm.PersistentPreferredIntentResolver r2;
        java.util.Iterator r3;
        com.android.server.pm.PersistentPreferredActivity r4, $r14;
        java.lang.SecurityException $r5;
        com.android.server.pm.Settings $r6, $r8, $r10;
        android.util.SparseArray $r7, $r9, $r11;
        boolean $z1, $z2, z4;
        android.content.ComponentName $r16;
        java.lang.String $r17, r20;
        java.lang.Throwable $r18, $r19;
        java.util.ArrayList r21, r22, r23;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r20 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 != 1000 goto label27;

        r21 = null;

        z4 = 0;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        i5 = 0;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $i3 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        if i5 >= $i3 goto label16;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        i1 = virtualinvoke $r9.<android.util.SparseArray: int keyAt(int)>(i5);

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.SparseArray mPersistentPreferredActivities>;

        $r12 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r2 = (com.android.server.pm.PersistentPreferredIntentResolver) $r12;

     label02:
        if i0 == i1 goto label03;

        r22 = r21;

        goto label15;

     label03:
        r3 = virtualinvoke r2.<com.android.server.pm.PersistentPreferredIntentResolver: java.util.Iterator filterIterator()>();

     label04:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.pm.PersistentPreferredActivity) $r15;

     label05:
        r23 = r21;

     label06:
        $r16 = r4.<com.android.server.pm.PersistentPreferredActivity: android.content.ComponentName mComponent>;

        $r17 = virtualinvoke $r16.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z2 == 0 goto label10;

     label07:
        r23 = r21;

        if r21 != null goto label09;

     label08:
        r23 = new java.util.ArrayList;

        specialinvoke r23.<java.util.ArrayList: void <init>()>();

     label09:
        virtualinvoke r23.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label10:
        r21 = r23;

        goto label04;

     label11:
        r22 = r21;

        if r21 == null goto label15;

        i6 = 0;

     label12:
        $i4 = virtualinvoke r21.<java.util.ArrayList: int size()>();

        if i6 >= $i4 goto label14;

        $r13 = virtualinvoke r21.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r14 = (com.android.server.pm.PersistentPreferredActivity) $r13;

        virtualinvoke r2.<com.android.server.pm.PersistentPreferredIntentResolver: void removeFilter(java.lang.Object)>($r14);

     label13:
        i6 = i6 + 1;

        goto label12;

     label14:
        z4 = 1;

        r22 = r21;

     label15:
        i5 = i5 + 1;

        r21 = r22;

        goto label01;

     label16:
        exitmonitor r1;

     label17:
        if z4 == 0 goto label23;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(i0);

        r24 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r24;

     label18:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r24;

     label19:
        goto label23;

     label20:
        $r18 := @caughtexception;

     label21:
        exitmonitor r24;

     label22:
        throw $r18;

     label23:
        return;

     label24:
        $r19 := @caughtexception;

     label25:
        exitmonitor r1;

     label26:
        throw $r19;

     label27:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("clearPackagePersistentPreferredActivities can only be run by the system");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch java.lang.Throwable from label04 to label05 with label24;
        catch java.lang.Throwable from label06 to label07 with label24;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label09 to label10 with label24;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    public void clearPackagePreferredActivities(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r5;
        com.android.server.pm.PackageSetting r2;
        java.lang.String $r3, $r11, r13;
        android.util.ArrayMap $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage $r6;
        android.content.Context $r7, $r8;
        boolean $z0, $z1;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r14;
        com.android.server.pm.Settings $r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r3 == null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        $r6 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        if $r6 == null goto label03;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r13, i0);

        if $z1 != 0 goto label06;

     label03:
        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS");

        if $i1 == 0 goto label06;

        $i4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>(i0);

        if $i4 >= 8 goto label05;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring clearPackagePreferredActivities() from uid ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r11);

        exitmonitor r1;

     label04:
        return;

     label05:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

     label06:
        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r2 = virtualinvoke $r15.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r13);

     label07:
        if r2 == null goto label10;

     label08:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, i0, $i3);

        if $z0 == 0 goto label10;

        exitmonitor r1;

     label09:
        return;

     label10:
        exitmonitor r1;

     label11:
        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String,int)>(r13, $i2);

        return;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public boolean compileLayouts(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r3;
        android.util.ArrayMap $r2;
        com.android.server.pm.dex.ViewCompiler $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.String r6;
        com.android.server.pm.parsing.pkg.AndroidPackage r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r6);

        r7 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

     label2:
        if r7 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        exitmonitor r1;

     label6:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ViewCompiler mViewCompiler>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.dex.ViewCompiler: boolean compileLayouts(com.android.server.pm.parsing.pkg.AndroidPackage)>(r7);

        return $z0;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void createNewUser(int, java.util.Set, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1, r9;
        com.android.server.pm.Installer $r2;
        com.android.server.pm.Settings $r3;
        com.android.server.pm.AppsFilter $r4;
        java.lang.Throwable $r5, $r6;
        java.util.Set r7;
        java.lang.String[] r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r7 := @parameter1: java.util.Set;

        r8 := @parameter2: java.lang.String[];

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void createNewUserLI(com.android.server.pm.PackageManagerService,com.android.server.pm.Installer,int,java.util.Set,java.lang.String[])>(r0, $r2, i0, r7, r8);

        exitmonitor r1;

     label02:
        r9 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r9;

     label03:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageListLocked(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void primeDomainVerificationsLPw(int)>(i0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        virtualinvoke $r4.<com.android.server.pm.AppsFilter: void onUsersChanged()>();

        exitmonitor r9;

     label04:
        return;

     label05:
        $r5 := @caughtexception;

     label06:
        exitmonitor r9;

     label07:
        throw $r5;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String[] r1, r11;
        java.lang.Object r2, $r7;
        boolean z0, $z2, $z3, z4;
        java.lang.String $r3, $r5, $r8, r13;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r6;
        com.android.server.pm.InstantAppRegistry $r9;
        java.lang.Throwable $r10;
        com.android.server.pm.PackageSetting r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: java.lang.String[];

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r3 == null goto label01;

        return r11;

     label01:
        $i2 = lengthof r11;

        r1 = newarray (java.lang.String)[$i2];

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label02:
        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i0, i1);

        $i3 = lengthof r11;

        i6 = $i3 - 1;

     label03:
        if i6 < 0 goto label17;

     label04:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = r11[i6];

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r5);

        r12 = (com.android.server.pm.PackageSetting) $r7;

     label05:
        z4 = 0;

        if r12 == null goto label12;

        z4 = 0;

     label06:
        $r8 = r12.<com.android.server.pm.PackageSetting: java.lang.String realName>;

        if $r8 == null goto label12;

        $z2 = virtualinvoke r12.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z2 == 0 goto label11;

     label07:
        if z0 != 0 goto label11;

     label08:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i5 = r12.<com.android.server.pm.PackageSetting: int appId>;

        $z3 = virtualinvoke $r9.<com.android.server.pm.InstantAppRegistry: boolean isInstantAccessGranted(int,int,int)>(i1, $i4, $i5);

        if $z3 == 0 goto label10;

     label09:
        goto label11;

     label10:
        z4 = 0;

        goto label12;

     label11:
        z4 = 1;

     label12:
        if z4 == 0 goto label15;

     label13:
        r13 = r12.<com.android.server.pm.PackageSetting: java.lang.String realName>;

     label14:
        goto label16;

     label15:
        r13 = r11[i6];

     label16:
        r1[i6] = r13;

        i6 = i6 + -1;

        goto label03;

     label17:
        exitmonitor r2;

     label18:
        return r1;

     label19:
        $r10 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        android.content.pm.IPackageDataObserver r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.pm.IPackageDataObserver;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>(r1, $i0, r2);

        return;
    }

    public void deleteApplicationCacheFilesAsUser(java.lang.String, int, android.content.pm.IPackageDataObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4;
        android.content.pm.IPackageDataObserver r1;
        java.lang.Object r2, $r8;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        android.content.Context $r4, $r6, $r11, $r12;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        android.util.ArrayMap $r7;
        com.android.server.pm._$$Lambda$PackageManagerService$E8wmDWkS1hMFlGgjBX_cxNdNPXc $r9;
        android.os.Handler $r10;
        java.lang.StringBuilder $r13;
        java.lang.String $r19, r21;
        java.lang.Throwable $r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r21 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.pm.IPackageDataObserver;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERNAL_DELETE_CACHE_FILES");

        if $i3 == 0 goto label2;

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r11.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DELETE_CACHE_FILES");

        if $i4 != 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INTERNAL_DELETE_CACHE_FILES");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", silently ignoring");

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r19);

        return;

     label1:
        $r12 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r12.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERNAL_DELETE_CACHE_FILES", null);

     label2:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 0, "delete application cache files");

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        i2 = virtualinvoke $r6.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_INSTANT_APPS");

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $r7 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r21);

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r8;

        exitmonitor r2;

     label4:
        $r10 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r9 = new com.android.server.pm._$$Lambda$PackageManagerService$E8wmDWkS1hMFlGgjBX_cxNdNPXc;

        specialinvoke $r9.<com.android.server.pm._$$Lambda$PackageManagerService$E8wmDWkS1hMFlGgjBX_cxNdNPXc: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.parsing.pkg.AndroidPackage,int,int,int,android.content.pm.IPackageDataObserver,java.lang.String)>(r0, r3, i1, i2, i0, r1, r21);

        virtualinvoke $r10.<android.os.Handler: boolean post(java.lang.Runnable)>($r9);

        return;

     label5:
        $r20 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r20;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void deleteCompilerPackageStats(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        com.android.server.pm.CompilerStats $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats>;

        virtualinvoke $r2.<com.android.server.pm.CompilerStats: void deletePackageStats(java.lang.String)>(r1);

        return;
    }

    public void deleteExistingPackageAsUser(android.content.pm.VersionedPackage, android.content.pm.IPackageDeleteObserver2, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.IPackageDeleteObserver2 r1;
        int i0, i2;
        java.lang.String r2, r15;
        long l1;
        java.lang.Object r3;
        android.content.Context $r4;
        com.android.server.pm.Settings $r7;
        com.android.server.pm.UserManagerService $r8;
        int[] $r9, $r10;
        java.lang.Throwable $r11, $r13, r18;
        android.os.RemoteException $r12;
        android.content.pm.VersionedPackage r14;
        com.android.server.pm.PackageSetting r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: android.content.pm.VersionedPackage;

        r1 := @parameter1: android.content.pm.IPackageDeleteObserver2;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_PACKAGES", null);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r14);

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r2 = virtualinvoke r14.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        l1 = virtualinvoke r14.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        r15 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>(r2, l1);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r16 = virtualinvoke $r7.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r15);

     label02:
        if r16 == null goto label05;

     label03:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r9 = virtualinvoke $r8.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        $r10 = virtualinvoke r16.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>($r9, 1);

        i2 = lengthof $r10;

     label04:
        goto label06;

     label05:
        i2 = 0;

     label06:
        exitmonitor r3;

     label07:
        if i2 <= 1 goto label08;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void deletePackageVersionedInternal(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int,boolean)>(r14, r1, i0, 0, 1);

        goto label11;

     label08:
        interfaceinvoke r1.<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>(r2, -1, null);

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        return;

     label12:
        $r13 := @caughtexception;

        r18 = $r13;

        goto label14;

     label13:
        $r11 := @caughtexception;

        r18 = $r11;

     label14:
        exitmonitor r3;

     label15:
        throw r18;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void deleteOatArtifactsOfPackage(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i2;
        android.util.ArrayMap $r2;
        java.lang.Object $r3, $r7, r16;
        com.android.server.pm.Settings $r4;
        java.lang.String $r5, $r6, $r14, r15, r21, r23, r24;
        boolean $z0;
        com.android.server.pm.Installer $r8;
        java.lang.Throwable $r9;
        com.android.server.pm.Installer$InstallerException $r10;
        java.lang.StringBuilder $r11;
        com.android.server.pm.parsing.pkg.AndroidPackage r17;
        com.android.server.pm.PackageSetting r18;
        java.lang.String[] r19;
        java.util.List r20;
        java.util.Iterator r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String;

        r16 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        r17 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r18 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r15);

        exitmonitor r16;

     label02:
        $r5 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getPrimaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r17, r18);

        $r6 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.lang.String getSecondaryCpuAbi(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r17, r18);

        r19 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getAppDexInstructionSets(java.lang.String,java.lang.String)>($r5, $r6);

        r20 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: java.util.List getAllCodePaths(com.android.server.pm.parsing.pkg.AndroidPackage)>(r17);

        r21 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getOatDir(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r17, r18);

        r22 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r7 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.lang.String) $r7;

        i0 = lengthof r19;

        i2 = 0;

     label04:
        if i2 >= i0 goto label09;

        r24 = r19[i2];

     label05:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r8.<com.android.server.pm.Installer: void deleteOdex(java.lang.String,java.lang.String,java.lang.String)>(r23, r24, r21);

     label06:
        goto label08;

     label07:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed deleting oat files for ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r14, $r10);

     label08:
        i2 = i2 + 1;

        goto label04;

     label09:
        goto label03;

     label10:
        return;

     label11:
        $r9 := @caughtexception;

     label12:
        exitmonitor r16;

     label13:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch com.android.server.pm.Installer$InstallerException from label05 to label06 with label07;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void deletePackageAsUser(java.lang.String, int, android.content.pm.IPackageDeleteObserver, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2;
        android.content.pm.IPackageDeleteObserver r2;
        android.content.pm.VersionedPackage $r3;
        android.content.pm.PackageManager$LegacyPackageDeleteObserver $r4;
        android.content.pm.IPackageDeleteObserver2 $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.IPackageDeleteObserver;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $r3 = new android.content.pm.VersionedPackage;

        specialinvoke $r3.<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>(r1, i0);

        $r4 = new android.content.pm.PackageManager$LegacyPackageDeleteObserver;

        specialinvoke $r4.<android.content.pm.PackageManager$LegacyPackageDeleteObserver: void <init>(android.content.pm.IPackageDeleteObserver)>(r2);

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager$LegacyPackageDeleteObserver: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>($r3, $r5, i1, i2);

        return;
    }

    public void deletePackageVersioned(android.content.pm.VersionedPackage, android.content.pm.IPackageDeleteObserver2, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.VersionedPackage r1;
        android.content.pm.IPackageDeleteObserver2 r2;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.VersionedPackage;

        r2 := @parameter1: android.content.pm.IPackageDeleteObserver2;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void deletePackageVersionedInternal(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int,boolean)>(r1, r2, i0, i1, 0);

        return;
    }

    int deletePackageX(java.lang.String, long, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0, $l9, $l10, $l12, $l14;
        int i1, i2, i3, $i4, $i7, $i8, i18, i19, i20, i21, i22, $i23;
        com.android.server.pm.PackageSetting r1, r82, r108;
        com.android.server.pm.parsing.pkg.AndroidPackage r2, r106;
        boolean z0, $z1, $z2, $z3, $z6, $z7, z8;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r3;
        com.android.server.pm.Settings $r4, $r7, $r11;
        android.util.ArrayMap $r5, $r8;
        java.lang.Object $r6, $r9, r76, r94, r98, r103, r107;
        byte $b5, $b13, b24;
        com.android.server.pm.UserManagerService $r10;
        java.lang.String $r12, $r14, $r16, $r19, $r21, $r24, $r32, $r39, $r42, $r47, r72, r87;
        com.android.server.pm.PackageManagerService$InstallArgs $r17, r104;
        int[] $r18, r86, r91, r100;
        java.lang.StringBuilder $r43, r78, r80, r90, r109;
        java.lang.Throwable $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, r79, r97, r101, r105, r110, r111;
        android.content.pm.SharedLibraryInfo r88;
        java.util.List r89;
        com.android.server.pm.PackageManagerService$PackageFreezer r95;
        android.os.UserHandle r96;
        com.android.server.pm.InstantAppRegistry r99;
        java.lang.Runtime $r102;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r72 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i18 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new com.android.server.pm.PackageManagerService$PackageRemovedInfo;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void <init>(com.android.server.pm.PackageSender)>(r0);

        $i4 = i1 & 2;

        if $i4 == 0 goto label001;

        i19 = -1;

        goto label002;

     label001:
        i19 = i18;

     label002:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdmin(java.lang.String,int)>(r72, i19);

        if $z1 == 0 goto label003;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not removing package ");

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": has active device admin");

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r47);

        return -2;

     label003:
        r76 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r76;

     label004:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r72);

        r1 = (com.android.server.pm.PackageSetting) $r6;

     label005:
        if r1 != null goto label009;

     label006:
        r78 = new java.lang.StringBuilder;

        specialinvoke r78.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not removing non-existent package ");

        virtualinvoke r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        $r42 = virtualinvoke r78.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r42);

        exitmonitor r76;

     label007:
        return -1;

     label008:
        $r53 := @caughtexception;

        r79 = $r53;

        goto label111;

     label009:
        $b5 = l0 cmp -1L;

        if $b5 == 0 goto label012;

     label010:
        $l12 = r1.<com.android.server.pm.PackageSetting: long versionCode>;

        $b13 = $l12 cmp l0;

        if $b13 == 0 goto label012;

        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not removing package ");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r72);

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with versionCode ");

        $l14 = r1.<com.android.server.pm.PackageSetting: long versionCode>;

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l14);

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r39 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r39);

        exitmonitor r76;

     label011:
        return -1;

     label012:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r82 = virtualinvoke $r7.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>(r72);

     label013:
        if r1 != null goto label014;

        i20 = 0;

        goto label015;

     label014:
        i20 = virtualinvoke r1.<com.android.server.pm.PackageSetting: int getEnabled(int)>(i18);

     label015:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r72);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r9;

     label016:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r86 = virtualinvoke $r10.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label017:
        if r2 == null goto label032;

     label018:
        $r19 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r19 == null goto label032;

     label019:
        r87 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

     label020:
        $l9 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: long getStaticSharedLibVersion()>();

        r88 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.SharedLibraryInfo getSharedLibraryInfoLPr(java.lang.String,long)>(r87, $l9);

     label021:
        if r88 == null goto label029;

     label022:
        i2 = lengthof r86;

     label023:
        i21 = 0;

     label024:
        if i21 >= i2 goto label028;

        i3 = r86[i21];

        if i19 == -1 goto label025;

        if i19 == i3 goto label025;

        goto label027;

     label025:
        r89 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getPackagesUsingSharedLibraryLPr(android.content.pm.SharedLibraryInfo,int,int)>(r88, 4202496, i3);

        $z6 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>(r89);

        if $z6 != 0 goto label027;

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not removing package ");

        $r21 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getManifestPackageName()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" hosting lib ");

        $r24 = virtualinvoke r88.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $l10 = virtualinvoke r88.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" used by ");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r89);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r32 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r32);

        exitmonitor r76;

     label026:
        return -6;

     label027:
        i21 = i21 + 1;

        goto label024;

     label028:
        goto label032;

     label029:
        goto label032;

     label030:
        $r64 := @caughtexception;

        r79 = $r64;

        goto label111;

     label031:
        $r58 := @caughtexception;

        r79 = $r58;

        goto label111;

     label032:
        r91 = virtualinvoke r1.<com.android.server.pm.PackageSetting: int[] queryInstalledUsers(int[],boolean)>(r86, 1);

     label033:
        $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] origUsers> = r91;

     label034:
        exitmonitor r76;

     label035:
        $z7 = staticinvoke <com.android.server.pm.PackageManagerService: boolean isUpdatedSystemApp(com.android.server.pm.PackageSetting)>(r1);

        if $z7 == 0 goto label036;

        $i8 = i1 & 4;

        if $i8 != 0 goto label036;

        i22 = -1;

        goto label037;

     label036:
        i22 = i19;

     label037:
        r94 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r94;

     label038:
        r95 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForDelete(java.lang.String,int,int,java.lang.String)>(r72, i22, i1, "deletePackageX");

     label039:
        r96 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i19);

     label040:
        $i23 = i1 | -2147483648;

        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean deletePackageLIF(java.lang.String,android.os.UserHandle,boolean,int[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean,com.android.server.pm.parsing.pkg.ParsedPackage)>(r72, r96, 1, r86, $i23, $r3, 1, null);

     label041:
        if r95 == null goto label045;

     label042:
        virtualinvoke r95.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label043:
        goto label045;

     label044:
        $r57 := @caughtexception;

        r97 = $r57;

        goto label106;

     label045:
        r98 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r98;

     label046:
        if z0 == 0 goto label054;

        if r2 == null goto label051;

     label047:
        r99 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        r100 = $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers>;

     label048:
        virtualinvoke r99.<com.android.server.pm.InstantAppRegistry: void onPackageUninstalledLPw(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,int[])>(r2, r1, r100);

     label049:
        goto label051;

     label050:
        $r63 := @caughtexception;

        r101 = $r63;

        goto label093;

     label051:
        $r18 = $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: int[] removedUsers>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>(r1, $r18);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateInstantAppInstallerLocked(java.lang.String)>(r72);

     label052:
        goto label054;

     label053:
        $r65 := @caughtexception;

        r101 = $r65;

        goto label093;

     label054:
        exitmonitor r98;

     label055:
        exitmonitor r94;

     label056:
        if z0 == 0 goto label059;

        $i7 = i1 & 8;

        if $i7 != 0 goto label057;

        z8 = 1;

        goto label058;

     label057:
        z8 = 0;

     label058:
        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendPackageRemovedBroadcasts(boolean)>(z8);

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: void sendSystemPackageUpdatedBroadcasts()>();

     label059:
        $r102 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r102.<java.lang.Runtime: void gc()>();

        r103 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r103;

     label060:
        r104 = $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args>;

     label061:
        if r104 == null goto label065;

     label062:
        $r17 = $r3.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: com.android.server.pm.PackageManagerService$InstallArgs args>;

        virtualinvoke $r17.<com.android.server.pm.PackageManagerService$InstallArgs: boolean doPostDeleteLI(boolean)>(1);

     label063:
        goto label065;

     label064:
        $r66 := @caughtexception;

        r105 = $r66;

        goto label088;

     label065:
        if r82 != null goto label066;

        r106 = null;

        goto label067;

     label066:
        r106 = r82.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label067:
        if r106 == null goto label082;

     label068:
        $z2 = interfaceinvoke r106.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isStub()>();

        if $z2 == 0 goto label082;

        r107 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r107;

     label069:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = interfaceinvoke r106.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r108 = virtualinvoke $r11.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r12);

     label070:
        if r108 == null goto label073;

     label071:
        virtualinvoke r108.<com.android.server.pm.PackageSetting: void setEnabled(int,int,java.lang.String)>(i20, i18, "android");

     label072:
        goto label073;

     label073:
        exitmonitor r107;

     label074:
        if i20 == 0 goto label075;

        if i20 != 1 goto label082;

     label075:
        $z3 = <com.android.server.pm.PackageManagerService: boolean DEBUG_COMPRESSION>;

        if $z3 == 0 goto label076;

        r109 = new java.lang.StringBuilder;

        specialinvoke r109.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabling system stub after removal; pkg: ");

        $r14 = interfaceinvoke r106.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r16);

     label076:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean enableCompressedPackage(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting)>(r106, r108);

     label077:
        goto label082;

     label078:
        $r55 := @caughtexception;

        r110 = $r55;

     label079:
        exitmonitor r107;

     label080:
        throw r110;

     label081:
        $r59 := @caughtexception;

        r110 = $r59;

        goto label079;

     label082:
        exitmonitor r103;

     label083:
        if z0 == 0 goto label084;

        b24 = 1;

        goto label085;

     label084:
        b24 = -1;

     label085:
        return b24;

     label086:
        $r60 := @caughtexception;

        r105 = $r60;

        goto label088;

     label087:
        $r51 := @caughtexception;

        r105 = $r51;

     label088:
        exitmonitor r103;

     label089:
        throw r105;

     label090:
        $r54 := @caughtexception;

        r105 = $r54;

        goto label088;

     label091:
        $r69 := @caughtexception;

        r97 = $r69;

        goto label106;

     label092:
        $r71 := @caughtexception;

        r101 = $r71;

     label093:
        exitmonitor r98;

     label094:
        throw r101;

     label095:
        $r48 := @caughtexception;

        r101 = $r48;

        goto label093;

     label096:
        $r68 := @caughtexception;

        r97 = $r68;

        goto label106;

     label097:
        $r49 := @caughtexception;

        r111 = $r49;

        goto label099;

     label098:
        $r70 := @caughtexception;

        r111 = $r70;

     label099:
        if r95 == null goto label104;

     label100:
        virtualinvoke r95.<com.android.server.pm.PackageManagerService$PackageFreezer: void close()>();

     label101:
        goto label104;

     label102:
        $r61 := @caughtexception;

     label103:
        virtualinvoke r111.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r61);

     label104:
        throw r111;

     label105:
        $r56 := @caughtexception;

        r97 = $r56;

     label106:
        exitmonitor r94;

     label107:
        throw r97;

     label108:
        $r62 := @caughtexception;

        r97 = $r62;

        goto label106;

     label109:
        $r52 := @caughtexception;

        r79 = $r52;

        goto label111;

     label110:
        $r50 := @caughtexception;

        r79 = $r50;

     label111:
        exitmonitor r76;

     label112:
        throw r79;

     label113:
        $r67 := @caughtexception;

        r79 = $r67;

        goto label111;

        catch java.lang.Throwable from label004 to label005 with label110;
        catch java.lang.Throwable from label006 to label007 with label008;
        catch java.lang.Throwable from label010 to label011 with label008;
        catch java.lang.Throwable from label012 to label013 with label110;
        catch java.lang.Throwable from label014 to label015 with label110;
        catch java.lang.Throwable from label015 to label016 with label110;
        catch java.lang.Throwable from label016 to label017 with label110;
        catch java.lang.Throwable from label018 to label019 with label031;
        catch java.lang.Throwable from label019 to label020 with label031;
        catch java.lang.Throwable from label020 to label021 with label030;
        catch java.lang.Throwable from label022 to label023 with label030;
        catch java.lang.Throwable from label025 to label026 with label030;
        catch java.lang.Throwable from label032 to label033 with label109;
        catch java.lang.Throwable from label033 to label034 with label110;
        catch java.lang.Throwable from label034 to label035 with label110;
        catch java.lang.Throwable from label038 to label039 with label105;
        catch java.lang.Throwable from label039 to label040 with label098;
        catch java.lang.Throwable from label040 to label041 with label097;
        catch java.lang.Throwable from label042 to label043 with label044;
        catch java.lang.Throwable from label045 to label046 with label096;
        catch java.lang.Throwable from label047 to label048 with label050;
        catch java.lang.Throwable from label048 to label049 with label053;
        catch java.lang.Throwable from label051 to label052 with label053;
        catch java.lang.Throwable from label054 to label055 with label092;
        catch java.lang.Throwable from label055 to label056 with label091;
        catch java.lang.Throwable from label060 to label061 with label087;
        catch java.lang.Throwable from label062 to label063 with label064;
        catch java.lang.Throwable from label066 to label067 with label086;
        catch java.lang.Throwable from label068 to label069 with label086;
        catch java.lang.Throwable from label069 to label070 with label078;
        catch java.lang.Throwable from label071 to label072 with label081;
        catch java.lang.Throwable from label073 to label074 with label081;
        catch java.lang.Throwable from label075 to label076 with label090;
        catch java.lang.Throwable from label076 to label077 with label090;
        catch java.lang.Throwable from label079 to label080 with label081;
        catch java.lang.Throwable from label080 to label081 with label090;
        catch java.lang.Throwable from label082 to label083 with label090;
        catch java.lang.Throwable from label088 to label089 with label090;
        catch java.lang.Throwable from label093 to label094 with label095;
        catch java.lang.Throwable from label094 to label095 with label108;
        catch java.lang.Throwable from label100 to label101 with label102;
        catch java.lang.Throwable from label103 to label104 with label108;
        catch java.lang.Throwable from label104 to label105 with label108;
        catch java.lang.Throwable from label106 to label107 with label108;
        catch java.lang.Throwable from label111 to label112 with label113;
    }

    public void deletePreloadsFileCache()
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.File r1;
        android.content.Context $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_CACHE", "deletePreloadsFileCache");

        r1 = staticinvoke <android.os.Environment: java.io.File getDataPreloadsFileCacheDirectory()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting preloaded file cache ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r7);

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>(r1);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.SharedLibraryInfo r2;
        java.lang.StringBuilder r3, $r136, $r190, $r196, r259, r261, r269, r270, r271, r275, r276, r277, r279, r282, r283, r285;
        long l0, $l9, $l15;
        android.content.Context $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z69, $z70, $z71, $z72, $z73, $z74, $z75, $z76, $z77, $z78, $z79, $z80, $z81, $z82, $z83, $z84, $z85, $z86, $z87, $z88, $z89, $z91, $z92, $z93, $z94, $z95, $z96, z97, z98, z99, z100, z101, z102, z103, $z104, z105, z106, $z107, z117, $z129, $z157, $z158;
        com.android.server.pm.DumpState $r5;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i33, $i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58;
        com.android.server.pm.ApexManager $r6;
        com.android.internal.util.IndentingPrintWriter $r7, r245, r292, r293;
        com.android.server.pm.PackageInstallerService $r8;
        com.android.server.pm.Settings $r9, $r30, $r31, $r35, $r38, $r39, $r41, $r79, $r81, $r84, $r177, r244, r265, r286;
        com.android.server.pm.ComponentResolver $r10, $r37, $r92, $r93, $r94, $r95;
        android.util.ArraySet $r12, $r13, $r15, $r19, $r20, $r22, $r180, r237;
        java.lang.Object $r16, $r23, $r27, $r29, $r48, $r61, $r83, $r98, $r103, $r105, $r106, r238, r242, r243, r247, r253, r287;
        java.lang.String $r17, $r24, $r47, $r50, $r52, $r54, $r55, $r57, $r60, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r99, $r100, $r107, $r108, $r109, $r110, $r113, $r116, $r117, $r118, $r119, $r120, $r121, $r122, $r123, $r124, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r132, $r133, $r134, $r135, $r139, $r140, $r141, $r142, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r178, $r179, $r181, $r182, $r183, $r184, $r185, $r186, $r187, $r188, $r189, $r194, $r198, $r200, $r205, $r216, $r223, r230, r232, r233, r234, r240, r248, r250, r260, r284, r291;
        android.util.SparseArray $r25, $r26, $r28, $r80, $r82, $r85, r290;
        com.android.server.pm.UserManagerService $r32, $r43;
        com.android.server.pm.AppsFilter $r33;
        int[] $r34, r278;
        com.android.server.pm.KeySetManagerService $r36;
        android.util.ArrayMap $r40, $r42, $r96, $r101, $r104, r254;
        byte $b10;
        com.android.server.pm.PackageSetting $r62, r281, r288;
        java.nio.charset.Charset $r76;
        java.lang.Boolean $r78;
        java.util.Collection $r97, r272;
        java.util.Set $r102;
        android.content.ComponentName $r114, $r115;
        char $c32;
        java.lang.Throwable $r195, $r201, $r202, $r206, $r207, $r208, $r209, $r210, $r211, $r212, $r213, $r217, $r218, $r219, $r220, $r224, $r225, $r226, r246, r266, r267, r268;
        java.io.FileDescriptor r227;
        java.io.PrintWriter r228;
        java.lang.String[] r229;
        java.util.Iterator r249, r255, r273, r280;
        android.util.LongSparseArray r251;
        android.content.pm.FeatureInfo r256;
        com.android.server.pm.PreferredIntentResolver r258;
        java.io.FileOutputStream r262;
        java.io.BufferedOutputStream r263;
        com.android.internal.util.FastXmlSerializer r264;
        android.content.pm.IntentFilterVerificationInfo r274;
        java.lang.Integer r289;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r227 := @parameter0: java.io.FileDescriptor;

        r228 := @parameter1: java.io.PrintWriter;

        r229 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r4, "PackageManager", r228);

        if $z0 != 0 goto label001;

        return;

     label001:
        $r5 = new com.android.server.pm.DumpState;

        specialinvoke $r5.<com.android.server.pm.DumpState: void <init>()>();

        i33 = 0;

        z97 = 0;

     label002:
        $i1 = lengthof r229;

        if i33 >= $i1 goto label011;

        r230 = r229[i33];

        if r230 == null goto label011;

        $i31 = virtualinvoke r230.<java.lang.String: int length()>();

        if $i31 <= 0 goto label011;

        $c32 = virtualinvoke r230.<java.lang.String: char charAt(int)>(0);

        if $c32 == 45 goto label003;

        goto label011;

     label003:
        i33 = i33 + 1;

        $r184 = "-a";

        $z91 = virtualinvoke $r184.<java.lang.String: boolean equals(java.lang.Object)>(r230);

        if $z91 == 0 goto label004;

        goto label010;

     label004:
        $r185 = "-h";

        $z92 = virtualinvoke $r185.<java.lang.String: boolean equals(java.lang.Object)>(r230);

        if $z92 == 0 goto label005;

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Package manager dump options:");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("  [-h] [-f] [--checkin] [--all-components] [cmd] ...");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    --checkin: dump for a checkin");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    -f: print details of intent filters");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    -h: print this help");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    --all-components: include all component names in package dump");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("  cmd may be one of:");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    apex: list active APEXes and APEX session state");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    l[ibraries]: list known shared libraries");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    f[eatures]: list device features");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    k[eysets]: print known keysets");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    r[esolvers] [activity|service|receiver|content]: dump intent resolvers");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    perm[issions]: dump permissions");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    permission [name ...]: dump declaration and use of given permission");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    pref[erred]: print preferred package settings");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    preferred-xml [--full]: print preferred package settings as xml");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    prov[iders]: dump content providers");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    p[ackages]: dump installed packages");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    q[ueries]: dump app queryability calculations");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    s[hared-users]: dump shared user IDs");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    m[essages]: print collected runtime messages");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    v[erifiers]: print package verifier info");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    d[omain-preferred-apps]: print domains preferred apps");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    i[ntent-filter-verifiers]|ifv: print intent filter verifier info");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    version: print database version info");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    write: write current settings now");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    installs: details about install sessions");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    check-permission <permission> <package> [<user>]: does pkg hold perm?");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    dexopt: dump dexopt state");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    compiler-stats: dump compiler statistics");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    service-permissions: dump permissions required by services");

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("    <package.name>: info about given package");

        return;

     label005:
        $r186 = "--checkin";

        $z93 = virtualinvoke $r186.<java.lang.String: boolean equals(java.lang.Object)>(r230);

        if $z93 == 0 goto label006;

        z97 = 1;

        goto label010;

     label006:
        $r187 = "--all-components";

        $z94 = virtualinvoke $r187.<java.lang.String: boolean equals(java.lang.Object)>(r230);

        if $z94 == 0 goto label007;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setOptionEnabled(int)>(2);

        goto label010;

     label007:
        $r188 = "-f";

        $z95 = virtualinvoke $r188.<java.lang.String: boolean equals(java.lang.Object)>(r230);

        if $z95 == 0 goto label008;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setOptionEnabled(int)>(1);

        goto label010;

     label008:
        $r189 = "--proto";

        $z96 = virtualinvoke $r189.<java.lang.String: boolean equals(java.lang.Object)>(r230);

        if $z96 == 0 goto label009;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void dumpProto(java.io.FileDescriptor)>(r227);

        return;

     label009:
        $r190 = new java.lang.StringBuilder;

        specialinvoke $r190.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r230);

        virtualinvoke $r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; use -h for help");

        $r194 = virtualinvoke $r190.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r194);

     label010:
        goto label002;

     label011:
        $i34 = lengthof r229;

        if i33 >= $i34 goto label082;

        r232 = r229[i33];

        i35 = i33 + 1;

        $r121 = "android";

        $z37 = virtualinvoke $r121.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z37 != 0 goto label081;

        $z38 = virtualinvoke r232.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z38 == 0 goto label012;

        goto label081;

     label012:
        $r122 = "check-permission";

        $z39 = virtualinvoke $r122.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z39 == 0 goto label019;

        $i26 = lengthof r229;

        if i35 < $i26 goto label013;

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Error: check-permission missing permission argument");

        return;

     label013:
        r233 = r229[i35];

        i36 = i35 + 1;

        $i27 = lengthof r229;

        if i36 < $i27 goto label014;

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Error: check-permission missing package argument");

        return;

     label014:
        r234 = r229[i36];

        i37 = i36 + 1;

        $i28 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i38 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i28);

        $i29 = lengthof r229;

        if i37 >= $i29 goto label018;

     label015:
        $r183 = r229[i37];

        i38 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r183);

     label016:
        goto label018;

     label017:
        $r195 := @caughtexception;

        $r196 = new java.lang.StringBuilder;

        specialinvoke $r196.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: check-permission user argument is not a number: ");

        $r198 = r229[i37];

        virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r198);

        $r200 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r200);

        return;

     label018:
        $r182 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String resolveInternalPackageNameLPr(java.lang.String,long)>(r234, -1L);

        $i30 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String,int)>(r233, $r182, i38);

        virtualinvoke r228.<java.io.PrintWriter: void println(int)>($i30);

        return;

     label019:
        $r123 = "l";

        $z40 = virtualinvoke $r123.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z40 != 0 goto label079;

        $r124 = "libraries";

        $z41 = virtualinvoke $r124.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z41 == 0 goto label020;

        goto label079;

     label020:
        $r125 = "f";

        $z42 = virtualinvoke $r125.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z42 != 0 goto label078;

        $r126 = "features";

        $z43 = virtualinvoke $r126.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z43 == 0 goto label021;

        goto label078;

     label021:
        $r127 = "r";

        $z44 = virtualinvoke $r127.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z44 != 0 goto label066;

        $r140 = "resolvers";

        $z53 = virtualinvoke $r140.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z53 == 0 goto label022;

        goto label066;

     label022:
        $r141 = "perm";

        $z54 = virtualinvoke $r141.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z54 != 0 goto label065;

        $r142 = "permissions";

        $z55 = virtualinvoke $r142.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z55 == 0 goto label023;

        goto label065;

     label023:
        $r143 = "permission";

        $z56 = virtualinvoke $r143.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z56 == 0 goto label027;

        $i24 = lengthof r229;

        if i35 < $i24 goto label024;

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Error: permission requires permission name");

        return;

     label024:
        $r180 = new android.util.ArraySet;

        specialinvoke $r180.<android.util.ArraySet: void <init>()>();

        r237 = $r180;

     label025:
        $i25 = lengthof r229;

        if i35 >= $i25 goto label026;

        $r181 = r229[i35];

        virtualinvoke $r180.<android.util.ArraySet: boolean add(java.lang.Object)>($r181);

        i35 = i35 + 1;

        goto label025;

     label026:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(448);

        z98 = 0;

        r232 = null;

        goto label083;

     label027:
        $r144 = "pref";

        $z57 = virtualinvoke $r144.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z57 != 0 goto label064;

        $r145 = "preferred";

        $z58 = virtualinvoke $r145.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z58 == 0 goto label028;

        goto label064;

     label028:
        $r146 = "preferred-xml";

        $z59 = virtualinvoke $r146.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z59 == 0 goto label030;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(8192);

        $i23 = lengthof r229;

        if i35 >= $i23 goto label029;

        $r179 = "--full";

        $r178 = r229[i35];

        $z89 = virtualinvoke $r179.<java.lang.String: boolean equals(java.lang.Object)>($r178);

        if $z89 == 0 goto label029;

        z98 = 1;

        r232 = null;

        r237 = null;

        goto label083;

     label029:
        goto label080;

     label030:
        $r147 = "d";

        $z60 = virtualinvoke $r147.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z60 != 0 goto label063;

        $r148 = "domain-preferred-apps";

        $z61 = virtualinvoke $r148.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z61 == 0 goto label031;

        goto label063;

     label031:
        $r149 = "p";

        $z62 = virtualinvoke $r149.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z62 != 0 goto label062;

        $r150 = "packages";

        $z63 = virtualinvoke $r150.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z63 == 0 goto label032;

        goto label062;

     label032:
        $r151 = "q";

        $z64 = virtualinvoke $r151.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z64 != 0 goto label061;

        $r152 = "queries";

        $z65 = virtualinvoke $r152.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z65 == 0 goto label033;

        goto label061;

     label033:
        $r153 = "s";

        $z66 = virtualinvoke $r153.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z66 != 0 goto label059;

        $r156 = "shared-users";

        $z68 = virtualinvoke $r156.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z68 == 0 goto label034;

        goto label059;

     label034:
        $r157 = "prov";

        $z69 = virtualinvoke $r157.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z69 != 0 goto label058;

        $r158 = "providers";

        $z70 = virtualinvoke $r158.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z70 == 0 goto label035;

        goto label058;

     label035:
        $r159 = "m";

        $z71 = virtualinvoke $r159.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z71 != 0 goto label057;

        $r160 = "messages";

        $z72 = virtualinvoke $r160.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z72 == 0 goto label036;

        goto label057;

     label036:
        $r161 = "v";

        $z73 = virtualinvoke $r161.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z73 != 0 goto label056;

        $r162 = "verifiers";

        $z74 = virtualinvoke $r162.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z74 == 0 goto label037;

        goto label056;

     label037:
        $r163 = "i";

        $z75 = virtualinvoke $r163.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z75 != 0 goto label055;

        $r164 = "ifv";

        $z76 = virtualinvoke $r164.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z76 != 0 goto label055;

        $r165 = "intent-filter-verifiers";

        $z77 = virtualinvoke $r165.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z77 == 0 goto label038;

        goto label055;

     label038:
        $r166 = "version";

        $z78 = virtualinvoke $r166.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z78 == 0 goto label039;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(32768);

        goto label080;

     label039:
        $r167 = "k";

        $z79 = virtualinvoke $r167.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z79 != 0 goto label054;

        $r168 = "keysets";

        $z80 = virtualinvoke $r168.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z80 == 0 goto label040;

        goto label054;

     label040:
        $r169 = "installs";

        $z81 = virtualinvoke $r169.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z81 == 0 goto label041;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(65536);

        goto label080;

     label041:
        $r170 = "frozen";

        $z82 = virtualinvoke $r170.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z82 == 0 goto label042;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(524288);

        goto label080;

     label042:
        $r171 = "volumes";

        $z83 = virtualinvoke $r171.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z83 == 0 goto label043;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(8388608);

        goto label080;

     label043:
        $r172 = "dexopt";

        $z84 = virtualinvoke $r172.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z84 == 0 goto label044;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(1048576);

        goto label080;

     label044:
        $r173 = "compiler-stats";

        $z85 = virtualinvoke $r173.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z85 == 0 goto label045;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(2097152);

        goto label080;

     label045:
        $r174 = "changes";

        $z86 = virtualinvoke $r174.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z86 == 0 goto label046;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(4194304);

        goto label080;

     label046:
        $r175 = "service-permissions";

        $z87 = virtualinvoke $r175.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z87 == 0 goto label047;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(16777216);

        goto label080;

     label047:
        $r176 = "write";

        $z88 = virtualinvoke $r176.<java.lang.String: boolean equals(java.lang.Object)>(r232);

        if $z88 == 0 goto label053;

        r238 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r238;

     label048:
        $r177 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r177.<com.android.server.pm.Settings: void writeLPr()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Settings written.");

        exitmonitor r238;

     label049:
        return;

     label050:
        $r211 := @caughtexception;

     label051:
        exitmonitor r238;

     label052:
        throw $r211;

     label053:
        goto label080;

     label054:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(16384);

        goto label080;

     label055:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(131072);

        goto label080;

     label056:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(2048);

        goto label080;

     label057:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(512);

        goto label080;

     label058:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(1024);

        goto label080;

     label059:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(256);

        $i22 = lengthof r229;

        if i35 >= $i22 goto label060;

        $r155 = "noperm";

        $r154 = r229[i35];

        $z67 = virtualinvoke $r155.<java.lang.String: boolean equals(java.lang.Object)>($r154);

        if $z67 == 0 goto label060;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setOptionEnabled(int)>(4);

        goto label080;

     label060:
        goto label080;

     label061:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(67108864);

        goto label080;

     label062:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(128);

        goto label080;

     label063:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(262144);

        goto label080;

     label064:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(4096);

        goto label080;

     label065:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(64);

        goto label080;

     label066:
        i39 = i35;

        $i20 = lengthof r229;

        if i35 < $i20 goto label067;

        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(60);

        goto label080;

     label067:
        $i21 = lengthof r229;

        if i39 >= $i21 goto label077;

        r240 = r229[i39];

        $r128 = "a";

        $z45 = virtualinvoke $r128.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z45 != 0 goto label075;

        $r129 = "activity";

        $z46 = virtualinvoke $r129.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z46 == 0 goto label068;

        goto label075;

     label068:
        $r130 = "s";

        $z47 = virtualinvoke $r130.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z47 != 0 goto label074;

        $r131 = "service";

        $z48 = virtualinvoke $r131.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z48 == 0 goto label069;

        goto label074;

     label069:
        $r132 = "r";

        $z49 = virtualinvoke $r132.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z49 != 0 goto label073;

        $r133 = "receiver";

        $z50 = virtualinvoke $r133.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z50 == 0 goto label070;

        goto label073;

     label070:
        $r134 = "c";

        $z51 = virtualinvoke $r134.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z51 != 0 goto label072;

        $r135 = "content";

        $z52 = virtualinvoke $r135.<java.lang.String: boolean equals(java.lang.Object)>(r240);

        if $z52 == 0 goto label071;

        goto label072;

     label071:
        $r136 = new java.lang.StringBuilder;

        specialinvoke $r136.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: unknown resolver table type: ");

        virtualinvoke $r136.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r240);

        $r139 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r139);

        return;

     label072:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(32);

        goto label076;

     label073:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(16);

        goto label076;

     label074:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(8);

        goto label076;

     label075:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(4);

     label076:
        i39 = i39 + 1;

        goto label067;

     label077:
        z98 = 0;

        r232 = null;

        r237 = null;

        goto label083;

     label078:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(2);

        goto label080;

     label079:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setDump(int)>(1);

     label080:
        z98 = 0;

        r232 = null;

        r237 = null;

        goto label083;

     label081:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setOptionEnabled(int)>(1);

        z98 = 0;

        r237 = null;

        goto label083;

     label082:
        z98 = 0;

        r232 = null;

        r237 = null;

     label083:
        if z97 == 0 goto label084;

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("vers,1");

     label084:
        r242 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r242;

     label085:
        z99 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(32768);

     label086:
        if z99 == 0 goto label102;

        if r232 != null goto label102;

        if z97 != 0 goto label102;

        r243 = r242;

     label087:
        $z36 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z36 == 0 goto label090;

     label088:
        r243 = r242;

     label089:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label090:
        r243 = r242;

     label091:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Database versions:");

     label092:
        r243 = r242;

     label093:
        r244 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

     label094:
        r243 = r242;

     label095:
        r245 = new com.android.internal.util.IndentingPrintWriter;

     label096:
        r243 = r242;

     label097:
        specialinvoke r245.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r228, "  ");

     label098:
        r243 = r242;

     label099:
        virtualinvoke r244.<com.android.server.pm.Settings: void dumpVersionLPr(com.android.internal.util.IndentingPrintWriter)>(r245);

     label100:
        goto label102;

     label101:
        $r208 := @caughtexception;

        r246 = $r208;

        r247 = r243;

        goto label587;

     label102:
        z100 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(2048);

     label103:
        if z100 == 0 goto label130;

        if r232 != null goto label130;

        if z97 != 0 goto label120;

        r243 = r242;

     label104:
        $z35 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z35 == 0 goto label107;

     label105:
        r243 = r242;

     label106:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label107:
        r243 = r242;

     label108:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Verifiers:");

     label109:
        r243 = r242;

     label110:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("  Required: ");

     label111:
        r243 = r242;

     label112:
        $r119 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r119);

     label113:
        r243 = r242;

     label114:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(" (uid=");

     label115:
        r243 = r242;

     label116:
        $r120 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i19 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>($r120, 268435456, 0);

        virtualinvoke r228.<java.io.PrintWriter: void print(int)>($i19);

     label117:
        r243 = r242;

     label118:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>(")");

     label119:
        goto label130;

     label120:
        r243 = r242;

     label121:
        $r116 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        if $r116 == null goto label130;

     label122:
        r243 = r242;

     label123:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("vrfy,");

     label124:
        r243 = r242;

     label125:
        $r117 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r117);

     label126:
        r243 = r242;

     label127:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label128:
        r243 = r242;

     label129:
        $r118 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        $i18 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>($r118, 268435456, 0);

        virtualinvoke r228.<java.io.PrintWriter: void println(int)>($i18);

     label130:
        z101 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(131072);

     label131:
        if z101 == 0 goto label167;

        if r232 != null goto label167;

        r243 = r242;

     label132:
        $r114 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        if $r114 == null goto label162;

     label133:
        r243 = r242;

     label134:
        $r115 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mIntentFilterVerifierComponent>;

        r248 = virtualinvoke $r115.<android.content.ComponentName: java.lang.String getPackageName()>();

     label135:
        if z97 != 0 goto label152;

        r243 = r242;

     label136:
        $z34 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z34 == 0 goto label139;

     label137:
        r243 = r242;

     label138:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label139:
        r243 = r242;

     label140:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Intent Filter Verifier:");

     label141:
        r243 = r242;

     label142:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("  Using: ");

     label143:
        r243 = r242;

     label144:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(r248);

     label145:
        r243 = r242;

     label146:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(" (uid=");

     label147:
        r243 = r242;

     label148:
        $i17 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r248, 268435456, 0);

        virtualinvoke r228.<java.io.PrintWriter: void print(int)>($i17);

     label149:
        r243 = r242;

     label150:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>(")");

     label151:
        goto label161;

     label152:
        if r248 == null goto label161;

        r243 = r242;

     label153:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("ifv,");

     label154:
        r243 = r242;

     label155:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(r248);

     label156:
        r243 = r242;

     label157:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label158:
        r243 = r242;

     label159:
        $i16 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r248, 268435456, 0);

        virtualinvoke r228.<java.io.PrintWriter: void println(int)>($i16);

     label160:
        goto label161;

     label161:
        goto label167;

     label162:
        r243 = r242;

     label163:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label164:
        r243 = r242;

     label165:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("No Intent Filter Verifier available!");

     label166:
        goto label167;

     label167:
        z102 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(1);

     label168:
        if z102 == 0 goto label227;

        if r232 != null goto label227;

        z103 = 0;

        r243 = r242;

     label169:
        $r101 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r102 = virtualinvoke $r101.<android.util.ArrayMap: java.util.Set keySet()>();

        r249 = interfaceinvoke $r102.<java.util.Set: java.util.Iterator iterator()>();

     label170:
        r243 = r242;

     label171:
        $z104 = interfaceinvoke r249.<java.util.Iterator: boolean hasNext()>();

        if $z104 == 0 goto label226;

     label172:
        r243 = r242;

     label173:
        $r103 = interfaceinvoke r249.<java.util.Iterator: java.lang.Object next()>();

        r250 = (java.lang.String) $r103;

     label174:
        r243 = r242;

     label175:
        $r104 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r105 = virtualinvoke $r104.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r250);

        r251 = (android.util.LongSparseArray) $r105;

     label176:
        if r251 != null goto label177;

        goto label170;

     label177:
        r243 = r242;

     label178:
        i40 = virtualinvoke r251.<android.util.LongSparseArray: int size()>();

     label179:
        i41 = 0;

     label180:
        if i41 >= i40 goto label225;

        r243 = r242;

     label181:
        $r106 = virtualinvoke r251.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i41);

        r2 = (android.content.pm.SharedLibraryInfo) $r106;

     label182:
        if z97 != 0 goto label192;

        z105 = z103;

        if z103 != 0 goto label189;

        r243 = r242;

     label183:
        $z33 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z33 == 0 goto label186;

     label184:
        r243 = r242;

     label185:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label186:
        r243 = r242;

     label187:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Libraries:");

     label188:
        z105 = 1;

     label189:
        r243 = r242;

     label190:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("  ");

     label191:
        z103 = z105;

        goto label194;

     label192:
        r243 = r242;

     label193:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("lib,");

     label194:
        r243 = r242;

     label195:
        $r107 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r107);

     label196:
        r243 = r242;

     label197:
        $z32 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: boolean isStatic()>();

        if $z32 == 0 goto label209;

     label198:
        r243 = r242;

     label199:
        r3 = new java.lang.StringBuilder;

     label200:
        r243 = r242;

     label201:
        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

     label202:
        r243 = r242;

     label203:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version=");

     label204:
        r253 = r242;

     label205:
        $l15 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l15);

     label206:
        r253 = r242;

     label207:
        $r113 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r113);

     label208:
        goto label209;

     label209:
        if z97 != 0 goto label211;

        r253 = r242;

     label210:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(" -> ");

     label211:
        r253 = r242;

     label212:
        $r108 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        if $r108 == null goto label218;

     label213:
        r253 = r242;

     label214:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(" (jar) ");

     label215:
        r253 = r242;

     label216:
        $r110 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r110);

     label217:
        goto label222;

     label218:
        r253 = r242;

     label219:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(" (apk) ");

     label220:
        r253 = r242;

     label221:
        $r109 = virtualinvoke r2.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r109);

     label222:
        r253 = r242;

     label223:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label224:
        i41 = i41 + 1;

        goto label180;

     label225:
        goto label170;

     label226:
        goto label227;

     label227:
        z106 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(2);

     label228:
        if z106 == 0 goto label252;

        if r232 != null goto label252;

        r253 = r242;

     label229:
        $z31 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z31 == 0 goto label232;

     label230:
        r253 = r242;

     label231:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label232:
        if z97 != 0 goto label234;

        r253 = r242;

     label233:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Features:");

     label234:
        r253 = r242;

     label235:
        r254 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

     label236:
        r253 = r242;

     label237:
        entermonitor r254;

     label238:
        $r96 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $r97 = virtualinvoke $r96.<android.util.ArrayMap: java.util.Collection values()>();

        r255 = interfaceinvoke $r97.<java.util.Collection: java.util.Iterator iterator()>();

     label239:
        $z107 = interfaceinvoke r255.<java.util.Iterator: boolean hasNext()>();

        if $z107 == 0 goto label246;

        $r98 = interfaceinvoke r255.<java.util.Iterator: java.lang.Object next()>();

        r256 = (android.content.pm.FeatureInfo) $r98;

     label240:
        if z97 == 0 goto label243;

     label241:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("feat,");

        $r100 = r256.<android.content.pm.FeatureInfo: java.lang.String name>;

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r100);

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $i14 = r256.<android.content.pm.FeatureInfo: int version>;

        virtualinvoke r228.<java.io.PrintWriter: void println(int)>($i14);

     label242:
        goto label245;

     label243:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r99 = r256.<android.content.pm.FeatureInfo: java.lang.String name>;

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>($r99);

        $i12 = r256.<android.content.pm.FeatureInfo: int version>;

        if $i12 <= 0 goto label244;

        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(" version=");

        $i13 = r256.<android.content.pm.FeatureInfo: int version>;

        virtualinvoke r228.<java.io.PrintWriter: void print(int)>($i13);

     label244:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label245:
        goto label239;

     label246:
        exitmonitor r254;

     label247:
        goto label252;

     label248:
        $r207 := @caughtexception;

     label249:
        exitmonitor r254;

     label250:
        r253 = r242;

     label251:
        throw $r207;

     label252:
        if z97 != 0 goto label258;

        r253 = r242;

     label253:
        $z30 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(4);

        if $z30 == 0 goto label258;

     label254:
        r253 = r242;

     label255:
        $r95 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r95.<com.android.server.pm.ComponentResolver: void dumpActivityResolvers(java.io.PrintWriter,com.android.server.pm.DumpState,java.lang.String)>(r228, $r5, r232);

     label256:
        goto label258;

     label257:
        $r210 := @caughtexception;

        r246 = $r210;

        r247 = r253;

        goto label587;

     label258:
        if z97 != 0 goto label262;

        r253 = r242;

     label259:
        $z29 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(16);

        if $z29 == 0 goto label262;

     label260:
        r253 = r242;

     label261:
        $r94 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r94.<com.android.server.pm.ComponentResolver: void dumpReceiverResolvers(java.io.PrintWriter,com.android.server.pm.DumpState,java.lang.String)>(r228, $r5, r232);

     label262:
        if z97 != 0 goto label266;

        r253 = r242;

     label263:
        $z28 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(8);

        if $z28 == 0 goto label266;

     label264:
        r253 = r242;

     label265:
        $r93 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r93.<com.android.server.pm.ComponentResolver: void dumpServiceResolvers(java.io.PrintWriter,com.android.server.pm.DumpState,java.lang.String)>(r228, $r5, r232);

     label266:
        if z97 != 0 goto label271;

        r253 = r242;

     label267:
        $z27 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(32);

        if $z27 == 0 goto label271;

     label268:
        r253 = r242;

     label269:
        $r92 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r92.<com.android.server.pm.ComponentResolver: void dumpProviderResolvers(java.io.PrintWriter,com.android.server.pm.DumpState,java.lang.String)>(r228, $r5, r232);

     label270:
        goto label271;

     label271:
        if z97 != 0 goto label313;

        r253 = r242;

     label272:
        $z24 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(4096);

        if $z24 == 0 goto label313;

     label273:
        i42 = 0;

     label274:
        r253 = r242;

     label275:
        $r79 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r80 = $r79.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i11 = virtualinvoke $r80.<android.util.SparseArray: int size()>();

        if i42 >= $i11 goto label312;

     label276:
        r253 = r242;

     label277:
        $r81 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r82 = $r81.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r83 = virtualinvoke $r82.<android.util.SparseArray: java.lang.Object valueAt(int)>(i42);

        r258 = (com.android.server.pm.PreferredIntentResolver) $r83;

     label278:
        r253 = r242;

     label279:
        $r84 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r85 = $r84.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        i43 = virtualinvoke $r85.<android.util.SparseArray: int keyAt(int)>(i42);

     label280:
        r253 = r242;

     label281:
        $z25 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean getTitlePrinted()>();

        if $z25 == 0 goto label295;

     label282:
        r253 = r242;

     label283:
        r259 = new java.lang.StringBuilder;

     label284:
        r253 = r242;

     label285:
        specialinvoke r259.<java.lang.StringBuilder: void <init>()>();

     label286:
        r253 = r242;

     label287:
        virtualinvoke r259.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPreferred Activities User ");

     label288:
        r253 = r242;

     label289:
        virtualinvoke r259.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

     label290:
        r253 = r242;

     label291:
        virtualinvoke r259.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label292:
        r253 = r242;

     label293:
        r260 = virtualinvoke r259.<java.lang.StringBuilder: java.lang.String toString()>();

     label294:
        goto label307;

     label295:
        r253 = r242;

     label296:
        r261 = new java.lang.StringBuilder;

     label297:
        r253 = r242;

     label298:
        specialinvoke r261.<java.lang.StringBuilder: void <init>()>();

     label299:
        r253 = r242;

     label300:
        virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preferred Activities User ");

     label301:
        r253 = r242;

     label302:
        virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i43);

     label303:
        r253 = r242;

     label304:
        virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label305:
        r253 = r242;

     label306:
        r260 = virtualinvoke r261.<java.lang.StringBuilder: java.lang.String toString()>();

     label307:
        r253 = r242;

     label308:
        $z26 = virtualinvoke r258.<com.android.server.pm.PreferredIntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r228, r260, "  ", r232, 1, 0);

        if $z26 == 0 goto label311;

     label309:
        r253 = r242;

     label310:
        virtualinvoke $r5.<com.android.server.pm.DumpState: void setTitlePrinted(boolean)>(1);

     label311:
        i42 = i42 + 1;

        goto label274;

     label312:
        goto label313;

     label313:
        if z97 != 0 goto label336;

        r253 = r242;

     label314:
        $z23 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(8192);

        if $z23 == 0 goto label336;

     label315:
        r253 = r242;

     label316:
        virtualinvoke r228.<java.io.PrintWriter: void flush()>();

     label317:
        r253 = r242;

     label318:
        r262 = new java.io.FileOutputStream;

     label319:
        specialinvoke r262.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r227);

        r263 = new java.io.BufferedOutputStream;

        specialinvoke r263.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r262);

        r264 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r264.<com.android.internal.util.FastXmlSerializer: void <init>()>();

     label320:
        $r76 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r77 = virtualinvoke $r76.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r264.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r263, $r77);

        $r78 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r264.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r78);

        interfaceinvoke r264.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        r265 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

     label321:
        virtualinvoke r265.<com.android.server.pm.Settings: void writePreferredActivitiesLPr(org.xmlpull.v1.XmlSerializer,int,boolean)>(r264, 0, z98);

        interfaceinvoke r264.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke r264.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label322:
        goto label334;

     label323:
        $r212 := @caughtexception;

        r266 = $r212;

        goto label327;

     label324:
        $r226 := @caughtexception;

        r267 = $r226;

        goto label330;

     label325:
        $r219 := @caughtexception;

        r268 = $r219;

        goto label333;

     label326:
        $r202 := @caughtexception;

        r266 = $r202;

     label327:
        r269 = new java.lang.StringBuilder;

        specialinvoke r269.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r269.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing: ");

        virtualinvoke r269.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r266);

        $r205 = virtualinvoke r269.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r205);

     label328:
        goto label336;

     label329:
        $r220 := @caughtexception;

        r267 = $r220;

     label330:
        r270 = new java.lang.StringBuilder;

        specialinvoke r270.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing: ");

        virtualinvoke r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r267);

        $r223 = virtualinvoke r270.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r223);

     label331:
        goto label334;

     label332:
        $r213 := @caughtexception;

        r268 = $r213;

     label333:
        r271 = new java.lang.StringBuilder;

        specialinvoke r271.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r271.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed writing: ");

        virtualinvoke r271.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r268);

        $r216 = virtualinvoke r271.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r216);

     label334:
        goto label336;

     label335:
        $r209 := @caughtexception;

        r246 = $r209;

        r247 = r242;

        goto label587;

     label336:
        if z97 != 0 goto label406;

     label337:
        $z22 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(262144);

        if $z22 == 0 goto label404;

     label338:
        if r232 != null goto label404;

     label339:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label340:
        $r39 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r40 = $r39.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i45 = virtualinvoke $r40.<android.util.ArrayMap: int size()>();

     label341:
        if i45 != 0 goto label344;

     label342:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("No applications!");

        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label343:
        goto label406;

     label344:
        $r41 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r42 = $r41.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        r272 = virtualinvoke $r42.<android.util.ArrayMap: java.util.Collection values()>();

     label345:
        i46 = interfaceinvoke r272.<java.util.Collection: int size()>();

     label346:
        if i46 != 0 goto label349;

     label347:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("No domain preferred apps!");

        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label348:
        goto label406;

     label349:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("App verification status:");

     label350:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label351:
        i47 = 0;

     label352:
        r273 = interfaceinvoke r272.<java.util.Collection: java.util.Iterator iterator()>();

     label353:
        z117 = interfaceinvoke r273.<java.util.Iterator: boolean hasNext()>();

     label354:
        if z117 == 0 goto label362;

     label355:
        $r61 = interfaceinvoke r273.<java.util.Iterator: java.lang.Object next()>();

        $r62 = (com.android.server.pm.PackageSetting) $r61;

        r274 = virtualinvoke $r62.<com.android.server.pm.PackageSetting: android.content.pm.IntentFilterVerificationInfo getIntentFilterVerificationInfo()>();

     label356:
        if r274 == null goto label361;

     label357:
        $r63 = virtualinvoke r274.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getPackageName()>();

        if $r63 != null goto label359;

     label358:
        goto label361;

     label359:
        r275 = new java.lang.StringBuilder;

        specialinvoke r275.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r275.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Package: ");

        $r65 = virtualinvoke r274.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getPackageName()>();

        virtualinvoke r275.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        $r67 = virtualinvoke r275.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        r276 = new java.lang.StringBuilder;

        specialinvoke r276.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r276.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Domains: ");

        $r69 = virtualinvoke r274.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getDomainsString()>();

        virtualinvoke r276.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r71 = virtualinvoke r276.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r71);

        r277 = new java.lang.StringBuilder;

        specialinvoke r277.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r277.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Status:  ");

        $r73 = virtualinvoke r274.<android.content.pm.IntentFilterVerificationInfo: java.lang.String getStatusString()>();

        virtualinvoke r277.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73);

        $r75 = virtualinvoke r277.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r75);

        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label360:
        i47 = i47 + 1;

        goto label353;

     label361:
        goto label353;

     label362:
        if i47 != 0 goto label364;

     label363:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("  No app verification established.");

        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label364:
        $r43 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r278 = virtualinvoke $r43.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

     label365:
        i48 = lengthof r278;

     label366:
        i49 = 0;

     label367:
        if i49 >= i48 goto label403;

        i50 = r278[i49];

     label368:
        r279 = new java.lang.StringBuilder;

     label369:
        specialinvoke r279.<java.lang.StringBuilder: void <init>()>();

     label370:
        virtualinvoke r279.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("App linkages for user ");

     label371:
        virtualinvoke r279.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i50);

     label372:
        virtualinvoke r279.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label373:
        $r47 = virtualinvoke r279.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r47);

     label374:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label375:
        i51 = 0;

     label376:
        r280 = interfaceinvoke r272.<java.util.Collection: java.util.Iterator iterator()>();

     label377:
        $z129 = interfaceinvoke r280.<java.util.Iterator: boolean hasNext()>();

        if $z129 == 0 goto label399;

     label378:
        $r48 = interfaceinvoke r280.<java.util.Iterator: java.lang.Object next()>();

        r281 = (com.android.server.pm.PackageSetting) $r48;

     label379:
        l0 = virtualinvoke r281.<com.android.server.pm.PackageSetting: long getDomainVerificationStatusForUser(int)>(i50);

     label380:
        $l9 = l0 >> 32;

        $b10 = $l9 cmp 0L;

        if $b10 != 0 goto label381;

        goto label377;

     label381:
        r282 = new java.lang.StringBuilder;

     label382:
        specialinvoke r282.<java.lang.StringBuilder: void <init>()>();

     label383:
        virtualinvoke r282.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Package: ");

     label384:
        $r50 = r281.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r282.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

     label385:
        $r52 = virtualinvoke r282.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r52);

     label386:
        r283 = new java.lang.StringBuilder;

     label387:
        specialinvoke r283.<java.lang.StringBuilder: void <init>()>();

     label388:
        virtualinvoke r283.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Domains: ");

     label389:
        $r54 = r281.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r55 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String dumpDomainString(java.lang.String)>($r54);

        virtualinvoke r283.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

     label390:
        $r57 = virtualinvoke r283.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r57);

     label391:
        r284 = staticinvoke <android.content.pm.IntentFilterVerificationInfo: java.lang.String getStatusStringFromValue(long)>(l0);

     label392:
        r285 = new java.lang.StringBuilder;

     label393:
        specialinvoke r285.<java.lang.StringBuilder: void <init>()>();

     label394:
        virtualinvoke r285.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Status:  ");

     label395:
        virtualinvoke r285.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r284);

     label396:
        $r60 = virtualinvoke r285.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>($r60);

     label397:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label398:
        i51 = i51 + 1;

        goto label377;

     label399:
        if i51 != 0 goto label402;

     label400:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("  No configured app linkages.");

     label401:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label402:
        i49 = i49 + 1;

        goto label367;

     label403:
        goto label406;

     label404:
        goto label406;

     label405:
        $r217 := @caughtexception;

        r246 = $r217;

        r247 = r242;

        goto label587;

     label406:
        if z97 != 0 goto label411;

     label407:
        $z21 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(64);

        if $z21 == 0 goto label411;

     label408:
        $r38 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r38.<com.android.server.pm.Settings: void dumpPermissionsLPr(java.io.PrintWriter,java.lang.String,android.util.ArraySet,com.android.server.pm.DumpState)>(r228, r232, r237, $r5);

     label409:
        goto label411;

     label410:
        $r201 := @caughtexception;

        r246 = $r201;

        r247 = r242;

        goto label587;

     label411:
        if z97 != 0 goto label414;

     label412:
        $z20 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(1024);

        if $z20 == 0 goto label414;

     label413:
        $r37 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r37.<com.android.server.pm.ComponentResolver: void dumpContentProviders(java.io.PrintWriter,com.android.server.pm.DumpState,java.lang.String)>(r228, $r5, r232);

     label414:
        if z97 != 0 goto label417;

     label415:
        $z19 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(16384);

        if $z19 == 0 goto label417;

     label416:
        $r35 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r36 = $r35.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        virtualinvoke $r36.<com.android.server.pm.KeySetManagerService: void dumpLPr(java.io.PrintWriter,java.lang.String,com.android.server.pm.DumpState)>(r228, r232, $r5);

     label417:
        $z157 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(128);

        if $z157 == 0 goto label421;

        r286 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

     label418:
        r287 = r242;

     label419:
        virtualinvoke r286.<com.android.server.pm.Settings: void dumpPackagesLPr(java.io.PrintWriter,java.lang.String,android.util.ArraySet,com.android.server.pm.DumpState,boolean)>(r228, r232, r237, $r5, z97);

     label420:
        goto label421;

     label421:
        r287 = r242;

     label422:
        $z1 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(67108864);

        if $z1 == 0 goto label430;

     label423:
        r287 = r242;

     label424:
        $r31 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r288 = virtualinvoke $r31.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r232);

     label425:
        if r288 != null goto label426;

        r289 = null;

        goto label428;

     label426:
        r287 = r242;

     label427:
        $i8 = r288.<com.android.server.pm.PackageSetting: int appId>;

        r289 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

     label428:
        r287 = r242;

     label429:
        $r33 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r34 = virtualinvoke $r32.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        virtualinvoke $r33.<com.android.server.pm.AppsFilter: void dumpQueries(java.io.PrintWriter,com.android.server.pm.PackageManagerService,java.lang.Integer,com.android.server.pm.DumpState,int[])>(r228, r0, r289, $r5, $r34);

     label430:
        r287 = r242;

     label431:
        $z158 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(256);

        if $z158 == 0 goto label434;

     label432:
        r287 = r242;

     label433:
        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r30.<com.android.server.pm.Settings: void dumpSharedUsersLPr(java.io.PrintWriter,java.lang.String,android.util.ArraySet,com.android.server.pm.DumpState,boolean)>(r228, r232, r237, $r5, z97);

     label434:
        r287 = r242;

     label435:
        $z2 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(4194304);

        if $z2 == 0 goto label481;

     label436:
        r287 = r242;

     label437:
        $z18 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z18 == 0 goto label440;

     label438:
        r287 = r242;

     label439:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label440:
        r287 = r242;

     label441:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Package Changes:");

     label442:
        r287 = r242;

     label443:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("  Sequence number=");

     label444:
        r287 = r242;

     label445:
        $i6 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        virtualinvoke r228.<java.io.PrintWriter: void println(int)>($i6);

     label446:
        r287 = r242;

     label447:
        $r25 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages>;

        i52 = virtualinvoke $r25.<android.util.SparseArray: int size()>();

     label448:
        i53 = 0;

     label449:
        if i53 >= i52 goto label481;

        r287 = r242;

     label450:
        $r26 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages>;

        $r27 = virtualinvoke $r26.<android.util.SparseArray: java.lang.Object valueAt(int)>(i53);

        r290 = (android.util.SparseArray) $r27;

     label451:
        r287 = r242;

     label452:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("  User ");

     label453:
        r287 = r242;

     label454:
        $r28 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages>;

        $i7 = virtualinvoke $r28.<android.util.SparseArray: int keyAt(int)>(i53);

        virtualinvoke r228.<java.io.PrintWriter: void print(int)>($i7);

     label455:
        r287 = r242;

     label456:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>(":");

     label457:
        r287 = r242;

     label458:
        i54 = virtualinvoke r290.<android.util.SparseArray: int size()>();

     label459:
        if i54 != 0 goto label464;

        r287 = r242;

     label460:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("    ");

     label461:
        r287 = r242;

     label462:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("No packages changed");

     label463:
        goto label480;

     label464:
        i55 = 0;

     label465:
        if i55 >= i54 goto label480;

        r287 = r242;

     label466:
        $r29 = virtualinvoke r290.<android.util.SparseArray: java.lang.Object valueAt(int)>(i55);

        r291 = (java.lang.String) $r29;

     label467:
        r287 = r242;

     label468:
        i56 = virtualinvoke r290.<android.util.SparseArray: int keyAt(int)>(i55);

     label469:
        r287 = r242;

     label470:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("    ");

     label471:
        r287 = r242;

     label472:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>("seq=");

     label473:
        r287 = r242;

     label474:
        virtualinvoke r228.<java.io.PrintWriter: void print(int)>(i56);

     label475:
        r287 = r242;

     label476:
        virtualinvoke r228.<java.io.PrintWriter: void print(java.lang.String)>(", package=");

     label477:
        r287 = r242;

     label478:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>(r291);

     label479:
        i55 = i55 + 1;

        goto label465;

     label480:
        i53 = i53 + 1;

        goto label449;

     label481:
        if z97 != 0 goto label510;

        r287 = r242;

     label482:
        $z16 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(524288);

        if $z16 == 0 goto label510;

     label483:
        if r232 != null goto label510;

        r287 = r242;

     label484:
        $z17 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z17 == 0 goto label487;

     label485:
        r287 = r242;

     label486:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label487:
        r287 = r242;

     label488:
        r292 = new com.android.internal.util.IndentingPrintWriter;

     label489:
        r287 = r242;

     label490:
        specialinvoke r292.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r228, "  ", 120);

     label491:
        r287 = r242;

     label492:
        virtualinvoke r292.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label493:
        r287 = r242;

     label494:
        virtualinvoke r292.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Frozen packages:");

     label495:
        r287 = r242;

     label496:
        virtualinvoke r292.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label497:
        r287 = r242;

     label498:
        $r19 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages>;

        $i4 = virtualinvoke $r19.<android.util.ArraySet: int size()>();

        if $i4 != 0 goto label502;

     label499:
        r287 = r242;

     label500:
        virtualinvoke r292.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("(none)");

     label501:
        goto label508;

     label502:
        i57 = 0;

     label503:
        r287 = r242;

     label504:
        $r20 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages>;

        $i5 = virtualinvoke $r20.<android.util.ArraySet: int size()>();

        if i57 >= $i5 goto label508;

     label505:
        r287 = r242;

     label506:
        $r22 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mFrozenPackages>;

        $r23 = virtualinvoke $r22.<android.util.ArraySet: java.lang.Object valueAt(int)>(i57);

        $r24 = (java.lang.String) $r23;

        virtualinvoke r292.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r24);

     label507:
        i57 = i57 + 1;

        goto label503;

     label508:
        r287 = r242;

     label509:
        virtualinvoke r292.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label510:
        if z97 != 0 goto label539;

        r287 = r242;

     label511:
        $z14 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(8388608);

        if $z14 == 0 goto label539;

     label512:
        if r232 != null goto label539;

        r287 = r242;

     label513:
        $z15 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z15 == 0 goto label516;

     label514:
        r287 = r242;

     label515:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label516:
        r287 = r242;

     label517:
        r293 = new com.android.internal.util.IndentingPrintWriter;

     label518:
        r287 = r242;

     label519:
        specialinvoke r293.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r228, "  ", 120);

     label520:
        r287 = r242;

     label521:
        virtualinvoke r293.<com.android.internal.util.IndentingPrintWriter: void println()>();

     label522:
        r287 = r242;

     label523:
        virtualinvoke r293.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Loaded volumes:");

     label524:
        r287 = r242;

     label525:
        virtualinvoke r293.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

     label526:
        r287 = r242;

     label527:
        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes>;

        $i2 = virtualinvoke $r12.<android.util.ArraySet: int size()>();

        if $i2 != 0 goto label531;

     label528:
        r287 = r242;

     label529:
        virtualinvoke r293.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("(none)");

     label530:
        goto label537;

     label531:
        i58 = 0;

     label532:
        r287 = r242;

     label533:
        $r13 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes>;

        $i3 = virtualinvoke $r13.<android.util.ArraySet: int size()>();

        if i58 >= $i3 goto label537;

     label534:
        r287 = r242;

     label535:
        $r15 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mLoadedVolumes>;

        $r16 = virtualinvoke $r15.<android.util.ArraySet: java.lang.Object valueAt(int)>(i58);

        $r17 = (java.lang.String) $r16;

        virtualinvoke r293.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r17);

     label536:
        i58 = i58 + 1;

        goto label532;

     label537:
        r287 = r242;

     label538:
        virtualinvoke r293.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

     label539:
        if z97 != 0 goto label543;

        r287 = r242;

     label540:
        $z13 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(16777216);

        if $z13 == 0 goto label543;

     label541:
        if r232 != null goto label543;

        r287 = r242;

     label542:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        virtualinvoke $r10.<com.android.server.pm.ComponentResolver: void dumpServicePermissions(java.io.PrintWriter,com.android.server.pm.DumpState)>(r228, $r5);

     label543:
        if z97 != 0 goto label551;

        r287 = r242;

     label544:
        $z11 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(1048576);

        if $z11 == 0 goto label551;

     label545:
        r287 = r242;

     label546:
        $z12 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z12 == 0 goto label549;

     label547:
        r287 = r242;

     label548:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label549:
        r287 = r242;

     label550:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void dumpDexoptStateLPr(java.io.PrintWriter,java.lang.String)>(r228, r232);

     label551:
        if z97 != 0 goto label559;

        r287 = r242;

     label552:
        $z9 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(2097152);

        if $z9 == 0 goto label559;

     label553:
        r287 = r242;

     label554:
        $z10 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z10 == 0 goto label557;

     label555:
        r287 = r242;

     label556:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label557:
        r287 = r242;

     label558:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void dumpCompilerStatsLPr(java.io.PrintWriter,java.lang.String)>(r228, r232);

     label559:
        if z97 != 0 goto label574;

        r287 = r242;

     label560:
        $z7 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(512);

        if $z7 == 0 goto label574;

     label561:
        if r232 != null goto label574;

        r287 = r242;

     label562:
        $z8 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z8 == 0 goto label565;

     label563:
        r287 = r242;

     label564:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label565:
        r287 = r242;

     label566:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r9.<com.android.server.pm.Settings: void dumpReadMessagesLPr(java.io.PrintWriter,com.android.server.pm.DumpState)>(r228, $r5);

     label567:
        r287 = r242;

     label568:
        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label569:
        r287 = r242;

     label570:
        virtualinvoke r228.<java.io.PrintWriter: void println(java.lang.String)>("Package warning messages:");

     label571:
        r287 = r242;

     label572:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void dumpCriticalInfo(java.io.PrintWriter,java.lang.String)>(r228, null);

     label573:
        goto label574;

     label574:
        if z97 == 0 goto label578;

        r287 = r242;

     label575:
        $z6 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(512);

        if $z6 == 0 goto label578;

     label576:
        r287 = r242;

     label577:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void dumpCriticalInfo(java.io.PrintWriter,java.lang.String)>(r228, "msg,");

     label578:
        r287 = r242;

     label579:
        exitmonitor r242;

     label580:
        if z97 != 0 goto label582;

        $z4 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(65536);

        if $z4 == 0 goto label582;

        if r232 != null goto label582;

        $z5 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean onTitlePrinted()>();

        if $z5 == 0 goto label581;

        virtualinvoke r228.<java.io.PrintWriter: void println()>();

     label581:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $r7 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r7.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String,int)>(r228, "  ", 120);

        virtualinvoke $r8.<com.android.server.pm.PackageInstallerService: void dump(com.android.internal.util.IndentingPrintWriter)>($r7);

     label582:
        if z97 != 0 goto label583;

        $z3 = virtualinvoke $r5.<com.android.server.pm.DumpState: boolean isDumping(int)>(33554432);

        if $z3 == 0 goto label583;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        virtualinvoke $r6.<com.android.server.pm.ApexManager: void dump(java.io.PrintWriter,java.lang.String)>(r228, r232);

     label583:
        return;

     label584:
        $r225 := @caughtexception;

        r246 = $r225;

        r247 = r242;

        goto label587;

     label585:
        $r218 := @caughtexception;

        r246 = $r218;

        r247 = r242;

        goto label587;

     label586:
        $r224 := @caughtexception;

        r246 = $r224;

        r247 = r242;

     label587:
        r287 = r247;

     label588:
        exitmonitor r247;

     label589:
        throw r246;

     label590:
        $r206 := @caughtexception;

        r246 = $r206;

        r247 = r287;

        goto label587;

        catch java.lang.NumberFormatException from label015 to label016 with label017;
        catch java.lang.Throwable from label048 to label049 with label050;
        catch java.lang.Throwable from label051 to label052 with label050;
        catch java.lang.Throwable from label085 to label086 with label586;
        catch java.lang.Throwable from label087 to label088 with label101;
        catch java.lang.Throwable from label089 to label090 with label101;
        catch java.lang.Throwable from label091 to label092 with label101;
        catch java.lang.Throwable from label093 to label094 with label101;
        catch java.lang.Throwable from label095 to label096 with label101;
        catch java.lang.Throwable from label097 to label098 with label101;
        catch java.lang.Throwable from label099 to label100 with label101;
        catch java.lang.Throwable from label102 to label103 with label586;
        catch java.lang.Throwable from label104 to label105 with label101;
        catch java.lang.Throwable from label106 to label107 with label101;
        catch java.lang.Throwable from label108 to label109 with label101;
        catch java.lang.Throwable from label110 to label111 with label101;
        catch java.lang.Throwable from label112 to label113 with label101;
        catch java.lang.Throwable from label114 to label115 with label101;
        catch java.lang.Throwable from label116 to label117 with label101;
        catch java.lang.Throwable from label118 to label119 with label101;
        catch java.lang.Throwable from label121 to label122 with label101;
        catch java.lang.Throwable from label123 to label124 with label101;
        catch java.lang.Throwable from label125 to label126 with label101;
        catch java.lang.Throwable from label127 to label128 with label101;
        catch java.lang.Throwable from label129 to label130 with label101;
        catch java.lang.Throwable from label130 to label131 with label586;
        catch java.lang.Throwable from label132 to label133 with label101;
        catch java.lang.Throwable from label134 to label135 with label101;
        catch java.lang.Throwable from label136 to label137 with label101;
        catch java.lang.Throwable from label138 to label139 with label101;
        catch java.lang.Throwable from label140 to label141 with label101;
        catch java.lang.Throwable from label142 to label143 with label101;
        catch java.lang.Throwable from label144 to label145 with label101;
        catch java.lang.Throwable from label146 to label147 with label101;
        catch java.lang.Throwable from label148 to label149 with label101;
        catch java.lang.Throwable from label150 to label151 with label101;
        catch java.lang.Throwable from label153 to label154 with label101;
        catch java.lang.Throwable from label155 to label156 with label101;
        catch java.lang.Throwable from label157 to label158 with label101;
        catch java.lang.Throwable from label159 to label160 with label101;
        catch java.lang.Throwable from label163 to label164 with label101;
        catch java.lang.Throwable from label165 to label166 with label101;
        catch java.lang.Throwable from label167 to label168 with label586;
        catch java.lang.Throwable from label169 to label170 with label101;
        catch java.lang.Throwable from label171 to label172 with label101;
        catch java.lang.Throwable from label173 to label174 with label101;
        catch java.lang.Throwable from label175 to label176 with label101;
        catch java.lang.Throwable from label178 to label179 with label101;
        catch java.lang.Throwable from label181 to label182 with label101;
        catch java.lang.Throwable from label183 to label184 with label101;
        catch java.lang.Throwable from label185 to label186 with label101;
        catch java.lang.Throwable from label187 to label188 with label101;
        catch java.lang.Throwable from label190 to label191 with label101;
        catch java.lang.Throwable from label193 to label194 with label101;
        catch java.lang.Throwable from label195 to label196 with label101;
        catch java.lang.Throwable from label197 to label198 with label101;
        catch java.lang.Throwable from label199 to label200 with label101;
        catch java.lang.Throwable from label201 to label202 with label101;
        catch java.lang.Throwable from label203 to label204 with label101;
        catch java.lang.Throwable from label205 to label206 with label257;
        catch java.lang.Throwable from label207 to label208 with label257;
        catch java.lang.Throwable from label210 to label211 with label257;
        catch java.lang.Throwable from label212 to label213 with label257;
        catch java.lang.Throwable from label214 to label215 with label257;
        catch java.lang.Throwable from label216 to label217 with label257;
        catch java.lang.Throwable from label219 to label220 with label257;
        catch java.lang.Throwable from label221 to label222 with label257;
        catch java.lang.Throwable from label223 to label224 with label257;
        catch java.lang.Throwable from label227 to label228 with label585;
        catch java.lang.Throwable from label229 to label230 with label257;
        catch java.lang.Throwable from label231 to label232 with label257;
        catch java.lang.Throwable from label233 to label234 with label257;
        catch java.lang.Throwable from label235 to label236 with label257;
        catch java.lang.Throwable from label237 to label238 with label257;
        catch java.lang.Throwable from label238 to label239 with label248;
        catch java.lang.Throwable from label239 to label240 with label248;
        catch java.lang.Throwable from label241 to label242 with label248;
        catch java.lang.Throwable from label243 to label244 with label248;
        catch java.lang.Throwable from label244 to label245 with label248;
        catch java.lang.Throwable from label246 to label247 with label248;
        catch java.lang.Throwable from label249 to label250 with label248;
        catch java.lang.Throwable from label251 to label252 with label257;
        catch java.lang.Throwable from label253 to label254 with label257;
        catch java.lang.Throwable from label255 to label256 with label257;
        catch java.lang.Throwable from label259 to label260 with label257;
        catch java.lang.Throwable from label261 to label262 with label257;
        catch java.lang.Throwable from label263 to label264 with label257;
        catch java.lang.Throwable from label265 to label266 with label257;
        catch java.lang.Throwable from label267 to label268 with label257;
        catch java.lang.Throwable from label269 to label270 with label257;
        catch java.lang.Throwable from label272 to label273 with label257;
        catch java.lang.Throwable from label275 to label276 with label257;
        catch java.lang.Throwable from label277 to label278 with label257;
        catch java.lang.Throwable from label279 to label280 with label257;
        catch java.lang.Throwable from label281 to label282 with label257;
        catch java.lang.Throwable from label283 to label284 with label257;
        catch java.lang.Throwable from label285 to label286 with label257;
        catch java.lang.Throwable from label287 to label288 with label257;
        catch java.lang.Throwable from label289 to label290 with label257;
        catch java.lang.Throwable from label291 to label292 with label257;
        catch java.lang.Throwable from label293 to label294 with label257;
        catch java.lang.Throwable from label296 to label297 with label257;
        catch java.lang.Throwable from label298 to label299 with label257;
        catch java.lang.Throwable from label300 to label301 with label257;
        catch java.lang.Throwable from label302 to label303 with label257;
        catch java.lang.Throwable from label304 to label305 with label257;
        catch java.lang.Throwable from label306 to label307 with label257;
        catch java.lang.Throwable from label308 to label309 with label257;
        catch java.lang.Throwable from label310 to label311 with label257;
        catch java.lang.Throwable from label314 to label315 with label257;
        catch java.lang.Throwable from label316 to label317 with label257;
        catch java.lang.Throwable from label318 to label319 with label257;
        catch java.lang.Throwable from label319 to label320 with label335;
        catch java.lang.IllegalArgumentException from label320 to label321 with label332;
        catch java.lang.IllegalStateException from label320 to label321 with label329;
        catch java.io.IOException from label320 to label321 with label326;
        catch java.lang.Throwable from label320 to label321 with label335;
        catch java.lang.IllegalArgumentException from label321 to label322 with label325;
        catch java.lang.IllegalStateException from label321 to label322 with label324;
        catch java.io.IOException from label321 to label322 with label323;
        catch java.lang.Throwable from label321 to label322 with label335;
        catch java.lang.Throwable from label327 to label328 with label335;
        catch java.lang.Throwable from label330 to label331 with label335;
        catch java.lang.Throwable from label333 to label334 with label335;
        catch java.lang.Throwable from label337 to label338 with label405;
        catch java.lang.Throwable from label339 to label340 with label405;
        catch java.lang.Throwable from label340 to label341 with label405;
        catch java.lang.Throwable from label342 to label343 with label335;
        catch java.lang.Throwable from label344 to label345 with label405;
        catch java.lang.Throwable from label345 to label346 with label405;
        catch java.lang.Throwable from label347 to label348 with label335;
        catch java.lang.Throwable from label349 to label350 with label405;
        catch java.lang.Throwable from label350 to label351 with label405;
        catch java.lang.Throwable from label352 to label353 with label405;
        catch java.lang.Throwable from label353 to label354 with label405;
        catch java.lang.Throwable from label355 to label356 with label335;
        catch java.lang.Throwable from label357 to label358 with label335;
        catch java.lang.Throwable from label359 to label360 with label335;
        catch java.lang.Throwable from label363 to label364 with label335;
        catch java.lang.Throwable from label364 to label365 with label405;
        catch java.lang.Throwable from label365 to label366 with label405;
        catch java.lang.Throwable from label368 to label369 with label405;
        catch java.lang.Throwable from label369 to label370 with label405;
        catch java.lang.Throwable from label370 to label371 with label405;
        catch java.lang.Throwable from label371 to label372 with label405;
        catch java.lang.Throwable from label372 to label373 with label405;
        catch java.lang.Throwable from label373 to label374 with label405;
        catch java.lang.Throwable from label374 to label375 with label405;
        catch java.lang.Throwable from label376 to label377 with label405;
        catch java.lang.Throwable from label377 to label378 with label405;
        catch java.lang.Throwable from label378 to label379 with label405;
        catch java.lang.Throwable from label379 to label380 with label405;
        catch java.lang.Throwable from label381 to label382 with label410;
        catch java.lang.Throwable from label382 to label383 with label410;
        catch java.lang.Throwable from label383 to label384 with label410;
        catch java.lang.Throwable from label384 to label385 with label410;
        catch java.lang.Throwable from label385 to label386 with label410;
        catch java.lang.Throwable from label386 to label387 with label410;
        catch java.lang.Throwable from label387 to label388 with label410;
        catch java.lang.Throwable from label388 to label389 with label410;
        catch java.lang.Throwable from label389 to label390 with label410;
        catch java.lang.Throwable from label390 to label391 with label410;
        catch java.lang.Throwable from label391 to label392 with label410;
        catch java.lang.Throwable from label392 to label393 with label410;
        catch java.lang.Throwable from label393 to label394 with label410;
        catch java.lang.Throwable from label394 to label395 with label410;
        catch java.lang.Throwable from label395 to label396 with label410;
        catch java.lang.Throwable from label396 to label397 with label410;
        catch java.lang.Throwable from label397 to label398 with label410;
        catch java.lang.Throwable from label400 to label401 with label410;
        catch java.lang.Throwable from label401 to label402 with label410;
        catch java.lang.Throwable from label407 to label408 with label410;
        catch java.lang.Throwable from label408 to label409 with label410;
        catch java.lang.Throwable from label412 to label413 with label410;
        catch java.lang.Throwable from label413 to label414 with label410;
        catch java.lang.Throwable from label415 to label416 with label410;
        catch java.lang.Throwable from label416 to label417 with label410;
        catch java.lang.Throwable from label417 to label418 with label584;
        catch java.lang.Throwable from label419 to label420 with label590;
        catch java.lang.Throwable from label422 to label423 with label590;
        catch java.lang.Throwable from label424 to label425 with label590;
        catch java.lang.Throwable from label427 to label428 with label590;
        catch java.lang.Throwable from label429 to label430 with label590;
        catch java.lang.Throwable from label431 to label432 with label590;
        catch java.lang.Throwable from label433 to label434 with label590;
        catch java.lang.Throwable from label435 to label436 with label590;
        catch java.lang.Throwable from label437 to label438 with label590;
        catch java.lang.Throwable from label439 to label440 with label590;
        catch java.lang.Throwable from label441 to label442 with label590;
        catch java.lang.Throwable from label443 to label444 with label590;
        catch java.lang.Throwable from label445 to label446 with label590;
        catch java.lang.Throwable from label447 to label448 with label590;
        catch java.lang.Throwable from label450 to label451 with label590;
        catch java.lang.Throwable from label452 to label453 with label590;
        catch java.lang.Throwable from label454 to label455 with label590;
        catch java.lang.Throwable from label456 to label457 with label590;
        catch java.lang.Throwable from label458 to label459 with label590;
        catch java.lang.Throwable from label460 to label461 with label590;
        catch java.lang.Throwable from label462 to label463 with label590;
        catch java.lang.Throwable from label466 to label467 with label590;
        catch java.lang.Throwable from label468 to label469 with label590;
        catch java.lang.Throwable from label470 to label471 with label590;
        catch java.lang.Throwable from label472 to label473 with label590;
        catch java.lang.Throwable from label474 to label475 with label590;
        catch java.lang.Throwable from label476 to label477 with label590;
        catch java.lang.Throwable from label478 to label479 with label590;
        catch java.lang.Throwable from label482 to label483 with label590;
        catch java.lang.Throwable from label484 to label485 with label590;
        catch java.lang.Throwable from label486 to label487 with label590;
        catch java.lang.Throwable from label488 to label489 with label590;
        catch java.lang.Throwable from label490 to label491 with label590;
        catch java.lang.Throwable from label492 to label493 with label590;
        catch java.lang.Throwable from label494 to label495 with label590;
        catch java.lang.Throwable from label496 to label497 with label590;
        catch java.lang.Throwable from label498 to label499 with label590;
        catch java.lang.Throwable from label500 to label501 with label590;
        catch java.lang.Throwable from label504 to label505 with label590;
        catch java.lang.Throwable from label506 to label507 with label590;
        catch java.lang.Throwable from label509 to label510 with label590;
        catch java.lang.Throwable from label511 to label512 with label590;
        catch java.lang.Throwable from label513 to label514 with label590;
        catch java.lang.Throwable from label515 to label516 with label590;
        catch java.lang.Throwable from label517 to label518 with label590;
        catch java.lang.Throwable from label519 to label520 with label590;
        catch java.lang.Throwable from label521 to label522 with label590;
        catch java.lang.Throwable from label523 to label524 with label590;
        catch java.lang.Throwable from label525 to label526 with label590;
        catch java.lang.Throwable from label527 to label528 with label590;
        catch java.lang.Throwable from label529 to label530 with label590;
        catch java.lang.Throwable from label533 to label534 with label590;
        catch java.lang.Throwable from label535 to label536 with label590;
        catch java.lang.Throwable from label538 to label539 with label590;
        catch java.lang.Throwable from label540 to label541 with label590;
        catch java.lang.Throwable from label542 to label543 with label590;
        catch java.lang.Throwable from label544 to label545 with label590;
        catch java.lang.Throwable from label546 to label547 with label590;
        catch java.lang.Throwable from label548 to label549 with label590;
        catch java.lang.Throwable from label550 to label551 with label590;
        catch java.lang.Throwable from label552 to label553 with label590;
        catch java.lang.Throwable from label554 to label555 with label590;
        catch java.lang.Throwable from label556 to label557 with label590;
        catch java.lang.Throwable from label558 to label559 with label590;
        catch java.lang.Throwable from label560 to label561 with label590;
        catch java.lang.Throwable from label562 to label563 with label590;
        catch java.lang.Throwable from label564 to label565 with label590;
        catch java.lang.Throwable from label566 to label567 with label590;
        catch java.lang.Throwable from label568 to label569 with label590;
        catch java.lang.Throwable from label570 to label571 with label590;
        catch java.lang.Throwable from label572 to label573 with label590;
        catch java.lang.Throwable from label575 to label576 with label590;
        catch java.lang.Throwable from label577 to label578 with label590;
        catch java.lang.Throwable from label579 to label580 with label590;
        catch java.lang.Throwable from label588 to label589 with label590;
    }

    public void dumpProfiles(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.StringBuilder r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3, r11, r13;
        java.lang.String $r6, r10;
        java.lang.SecurityException $r7;
        java.lang.Throwable $r8, $r9;
        com.android.server.pm.parsing.pkg.AndroidPackage r12;
        com.android.server.pm.dex.ArtManagerService $r14;
        java.lang.IllegalArgumentException r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.lang.String;

        r11 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r12 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

     label02:
        if r12 == null goto label12;

     label03:
        exitmonitor r11;

     label04:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 2000 goto label06;

        if i0 == 0 goto label06;

        $i1 = interfaceinvoke r12.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        if i0 != $i1 goto label05;

        goto label06;

     label05:
        $r7 = new java.lang.SecurityException;

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>("dumpProfiles");

        throw $r7;

     label06:
        r13 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r13;

     label07:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "dump profiles");

        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService>;

        virtualinvoke $r14.<com.android.server.pm.dex.ArtManagerService: void dumpProfiles(com.android.server.pm.parsing.pkg.AndroidPackage)>(r12);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        exitmonitor r13;

     label08:
        return;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r13;

     label11:
        throw $r8;

     label12:
        r16 = new java.lang.IllegalArgumentException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw r16;

     label13:
        $r9 := @caughtexception;

     label14:
        exitmonitor r11;

     label15:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void enterSafeMode()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can request entering safe mode");

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mSystemReady>;

        if $z0 != 0 goto label1;

        r0.<com.android.server.pm.PackageManagerService: boolean mSafeMode> = 1;

     label1:
        return;
    }

    public void extendVerificationTimeout(int, int, long)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        android.content.Context $r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        com.android.server.pm.PackageVerificationResponse $r5;
        byte $b3, $b4;
        boolean $z0;
        android.os.Handler $r6, $r7;
        long l5, l6, l7;
        com.android.server.pm.PackageVerificationState r8;
        android.os.Message r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l5 := @parameter2: long;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can extend verification timeouts");

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mPendingVerification>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r8 = (com.android.server.pm.PackageVerificationState) $r4;

        $r5 = new com.android.server.pm.PackageVerificationResponse;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r5.<com.android.server.pm.PackageVerificationResponse: void <init>(int,int)>(i1, $i2);

        l6 = l5;

        $b3 = l5 cmp 3600000L;

        if $b3 <= 0 goto label1;

        l6 = 3600000L;

     label1:
        l7 = l6;

        $b4 = l6 cmp 0L;

        if $b4 >= 0 goto label2;

        l7 = 0L;

     label2:
        if i1 == 1 goto label3;

        if i1 == -1 goto label3;

     label3:
        if r8 == null goto label4;

        $z0 = virtualinvoke r8.<com.android.server.pm.PackageVerificationState: boolean timeoutExtended()>();

        if $z0 != 0 goto label4;

        virtualinvoke r8.<com.android.server.pm.PackageVerificationState: void extendTimeout()>();

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r9 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(15);

        r9.<android.os.Message: int arg1> = i0;

        r9.<android.os.Message: java.lang.Object obj> = $r5;

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r7.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r9, l7);

     label4:
        return;
    }

    android.os.Bundle extrasForInstallResult(com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.os.Bundle $r1, $r4, r9;
        java.lang.String $r2, $r3, $r7;
        com.android.server.pm.PackageManagerService$PackageRemovedInfo $r5, $r6;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r8;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        i0 = r8.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if i0 == -112 goto label4;

        z0 = 1;

        if i0 == 1 goto label1;

        r9 = null;

        goto label5;

     label1:
        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = r8.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        if $r5 == null goto label2;

        $r6 = r8.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.PackageManagerService$PackageRemovedInfo removedInfo>;

        $r7 = $r6.<com.android.server.pm.PackageManagerService$PackageRemovedInfo: java.lang.String removedPackage>;

        if $r7 == null goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        virtualinvoke $r4.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("android.intent.extra.REPLACING", z0);

        r9 = $r4;

        goto label5;

     label4:
        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        $r2 = r8.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPermission>;

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.content.pm.extra.FAILURE_EXISTING_PERMISSION", $r2);

        $r3 = r8.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: java.lang.String origPackage>;

        virtualinvoke $r1.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.content.pm.extra.FAILURE_EXISTING_PACKAGE", $r3);

        r9 = $r1;

     label5:
        return r9;
    }

    public android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i2, i3;
        android.content.Intent r1, r8;
        java.util.List r2;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r3;
        com.android.server.pm.UserManagerService $r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        java.lang.Throwable $r7;
        java.lang.String r9;
        java.lang.Object r10;
        android.content.pm.ResolveInfo r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>($i1, 1000);

        if $z0 == 0 goto label7;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z1 != 0 goto label1;

        return null;

     label1:
        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.Intent updateIntentForResolve(android.content.Intent)>(r8);

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r9 = virtualinvoke r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r6);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r1, i0, r9, 0);

        i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(0, i0, i2, 0, $z2);

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>(r1, r9, i3, i0);

        r10 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r10;

     label2:
        r11 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPersistentPreferredActivityLP(android.content.Intent,java.lang.String,int,java.util.List,boolean,int)>(r1, r9, i3, r2, 0, i0);

        exitmonitor r10;

     label3:
        return r11;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r10;

     label6:
        throw $r7;

     label7:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("findPersistentPreferredActivity can only be run by the system");

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent, java.lang.String, int, java.util.List, int, boolean, boolean, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, i2, $i3, $i4;
        java.util.List r3;
        boolean z0, z1, z2, z3;
        android.content.pm.ResolveInfo $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.List;

        i1 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        i2 := @parameter8: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        if $i4 < 10000 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $r4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int,boolean)>(r1, r2, i0, r3, i1, z0, z1, z2, i2, z3);

        return $r4;
    }

    android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent, java.lang.String, int, java.util.List, int, boolean, boolean, boolean, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r6, $r22, $r24, $r25, $r28, $r32, $r34, $r41, $r55, $r59, $r61, $r68, $r70, $r72, $r78, $r80, $r84, $r87, r116;
        java.util.List r2, r109;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, z16, $z18, z19, z20, z21, z22;
        int i0, $i2, $i4, $i5, $i6, $i9, $i10, $i15, $i19, $i22, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i41, i42, i43;
        android.content.Intent r3, r105;
        java.lang.Object r4, $r7, $r13, $r14, $r18, $r73;
        com.android.server.pm.PreferredIntentResolver r5;
        com.android.server.pm.UserManagerService $r8;
        android.content.Context $r9;
        android.content.ContentResolver $r10;
        com.android.server.pm.Settings $r11;
        android.util.SparseArray $r12;
        com.android.server.pm.PreferredComponent $r15, $r16, $r35, $r36, $r42, $r43, $r45, $r46, $r48, $r49, $r52, $r56, $r58, $r65;
        android.content.ComponentName $r17, $r44, $r50, $r53, $r66;
        android.content.pm.ActivityInfo $r19, $r23, $r27, $r31, $r75, r119;
        android.content.pm.ApplicationInfo $r20, $r21;
        android.content.ComponentName[] $r47;
        java.lang.StringBuilder $r81, r112, r113, r115, r118, r121, r124, r126;
        java.lang.Thread $r83;
        java.lang.Throwable $r88, $r89, $r90, $r91, $r92, $r93, $r94, $r95, $r96, $r97, $r98, $r99, $r100, $r101, $r102, $r103, $r104, r108, r110;
        android.content.pm.ResolveInfo r107, r111, r122;
        com.android.server.pm.PreferredActivity r114, r123, r125;
        android.util.LogPrinter r117, r120;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r105 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        i25 := @parameter2: int;

        r2 := @parameter3: java.util.List;

        i26 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        i0 := @parameter8: int;

        z3 := @parameter9: boolean;

        $r7 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        $z4 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>($r7);

        if $z4 == 0 goto label001;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling thread ");

        $r83 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r84 = virtualinvoke $r83.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r84);

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is holding mLock");

        $r87 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        $r88 = new java.lang.Throwable;

        specialinvoke $r88.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r87, $r88);

     label001:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z5 = virtualinvoke $r8.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z5 != 0 goto label002;

        return null;

     label002:
        i27 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r10, "device_provisioned", 0);

        if $i2 != 1 goto label003;

        z13 = 1;

        goto label004;

     label003:
        z13 = 0;

     label004:
        $z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isImplicitImageCaptureIntentAndNotSetByDpcLocked(android.content.Intent,int,java.lang.String,int)>(r105, i0, r1, i25);

        i28 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean)>(i25, i0, i27, 0, $z6);

        r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.Intent updateIntentForResolve(android.content.Intent)>(r105);

        r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label005:
        r107 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPersistentPreferredActivityLP(android.content.Intent,java.lang.String,int,java.util.List,boolean,int)>(r3, r1, i28, r2, z2, i0);

     label006:
        if r107 == null goto label010;

     label007:
        exitmonitor r4;

     label008:
        return r107;

     label009:
        $r90 := @caughtexception;

        r108 = $r90;

        goto label183;

     label010:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = $r11.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.pm.PreferredIntentResolver) $r13;

     label011:
        if z2 == 0 goto label013;

     label012:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Looking for preferred activities...");

     label013:
        if r5 == null goto label017;

        $i22 = 65536 & i28;

        if $i22 == 0 goto label014;

        z14 = 1;

        goto label015;

     label014:
        z14 = 0;

     label015:
        r109 = virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean,int)>(r3, r1, z14, i0);

     label016:
        goto label018;

     label017:
        r109 = null;

     label018:
        if r109 == null goto label179;

     label019:
        i29 = interfaceinvoke r109.<java.util.List: int size()>();

     label020:
        if i29 <= 0 goto label179;

        z16 = 0;

        i30 = 0;

        if z2 == 0 goto label024;

     label021:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Figuring out best match...");

     label022:
        goto label024;

     label023:
        $r100 := @caughtexception;

        r110 = $r100;

        z16 = 0;

        goto label176;

     label024:
        i31 = interfaceinvoke r2.<java.util.List: int size()>();

     label025:
        i32 = 0;

     label026:
        if i32 >= i31 goto label038;

     label027:
        $r73 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i32);

        r111 = (android.content.pm.ResolveInfo) $r73;

     label028:
        if z2 == 0 goto label034;

     label029:
        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>()>();

     label030:
        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Match for ");

     label031:
        $r75 = r111.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r75);

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": 0x");

        $r78 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i30);

        virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r80);

     label032:
        goto label034;

     label033:
        $r102 := @caughtexception;

        r110 = $r102;

        goto label176;

     label034:
        i33 = i30;

     label035:
        $i19 = r111.<android.content.pm.ResolveInfo: int match>;

        if $i19 <= i30 goto label036;

        i33 = r111.<android.content.pm.ResolveInfo: int match>;

     label036:
        i32 = i32 + 1;

        i30 = i33;

        goto label026;

     label037:
        $r99 := @caughtexception;

        r110 = $r99;

        goto label176;

     label038:
        if z2 == 0 goto label042;

     label039:
        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Best match: 0x");

        $r70 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i30);

        virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r72);

     label040:
        goto label042;

     label041:
        $r91 := @caughtexception;

        r110 = $r91;

        goto label176;

     label042:
        i34 = 268369920 & i30;

     label043:
        i35 = interfaceinvoke r109.<java.util.List: int size()>();

     label044:
        i36 = 0;

        z16 = 0;

     label045:
        if i36 >= i35 goto label171;

     label046:
        $r14 = interfaceinvoke r109.<java.util.List: java.lang.Object get(int)>(i36);

        r114 = (com.android.server.pm.PreferredActivity) $r14;

     label047:
        if z2 == 0 goto label060;

     label048:
        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>()>();

     label049:
        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking PreferredActivity ds=");

        i41 = virtualinvoke r114.<com.android.server.pm.PreferredActivity: int countDataSchemes()>();

     label050:
        if i41 <= 0 goto label054;

     label051:
        r116 = virtualinvoke r114.<com.android.server.pm.PreferredActivity: java.lang.String getDataScheme(int)>(0);

     label052:
        goto label055;

     label053:
        $r97 := @caughtexception;

        r110 = $r97;

        goto label176;

     label054:
        r116 = "<none>";

     label055:
        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r116);

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  component=");

        $r65 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r66 = $r65.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r68 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r68);

        r117 = new android.util.LogPrinter;

     label056:
        specialinvoke r117.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke r114.<com.android.server.pm.PreferredActivity: void dump(android.util.Printer,java.lang.String)>(r117, "  ");

     label057:
        goto label060;

     label058:
        $r101 := @caughtexception;

        r110 = $r101;

        goto label176;

     label059:
        $r94 := @caughtexception;

        r110 = $r94;

        goto label176;

     label060:
        $r15 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        i42 = $r15.<com.android.server.pm.PreferredComponent: int mMatch>;

     label061:
        if i42 == i34 goto label064;

        if z2 == 0 goto label063;

     label062:
        r118 = new java.lang.StringBuilder;

        specialinvoke r118.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping bad match ");

        $r58 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i15 = $r58.<com.android.server.pm.PreferredComponent: int mMatch>;

        $r59 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i15);

        virtualinvoke r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke r118.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r61);

     label063:
        goto label168;

     label064:
        if z0 == 0 goto label070;

     label065:
        $r56 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z12 = $r56.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z12 != 0 goto label070;

     label066:
        if z2 == 0 goto label068;

     label067:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Skipping mAlways=false entry");

     label068:
        goto label168;

     label069:
        $r93 := @caughtexception;

        r110 = $r93;

        goto label176;

     label070:
        $r16 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r17 = $r16.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $i4 = i28 | 512;

        $i5 = $i4 | 524288;

        $i6 = $i5 | 262144;

        r119 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>($r17, $i6, i0);

     label071:
        if z2 == 0 goto label078;

     label072:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "Found preferred activity:");

     label073:
        if r119 == null goto label076;

     label074:
        r120 = new android.util.LogPrinter;

        specialinvoke r120.<android.util.LogPrinter: void <init>(int,java.lang.String,int)>(2, "PackageManager", 3);

        virtualinvoke r119.<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>(r120, "  ");

     label075:
        goto label078;

     label076:
        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "  null");

     label077:
        goto label078;

     label078:
        $z18 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isHomeIntent(android.content.Intent)>(r3);

        if $z18 == 0 goto label080;

     label079:
        if z13 != 0 goto label080;

        z19 = 1;

        goto label081;

     label080:
        z19 = 0;

     label081:
        if z19 != 0 goto label082;

        if z3 != 0 goto label082;

        z20 = 1;

        goto label083;

     label082:
        z20 = 0;

     label083:
        if r119 != null goto label094;

        if z20 != 0 goto label084;

        goto label168;

     label084:
        r121 = new java.lang.StringBuilder;

        specialinvoke r121.<java.lang.StringBuilder: void <init>()>();

     label085:
        z21 = z16;

     label086:
        virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling preferred activity: ");

     label087:
        z21 = z16;

     label088:
        $r52 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r53 = $r52.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);

     label089:
        z21 = z16;

     label090:
        $r55 = virtualinvoke r121.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r55);

     label091:
        z21 = z16;

     label092:
        virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>(r114);

     label093:
        z16 = 1;

        goto label168;

     label094:
        i43 = 0;

     label095:
        if i43 >= i31 goto label168;

        z21 = z16;

     label096:
        $r18 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i43);

        r122 = (android.content.pm.ResolveInfo) $r18;

     label097:
        z21 = z16;

     label098:
        $r19 = r122.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r20 = $r19.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r6 = $r20.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

     label099:
        z21 = z16;

     label100:
        $r21 = r119.<android.content.pm.ActivityInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r22 = $r21.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $z7 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z7 != 0 goto label102;

     label101:
        goto label104;

     label102:
        z21 = z16;

     label103:
        $r23 = r122.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r25 = $r23.<android.content.pm.ActivityInfo: java.lang.String name>;

        $r24 = r119.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z8 != 0 goto label105;

     label104:
        i43 = i43 + 1;

        goto label095;

     label105:
        if z1 == 0 goto label108;

        if z20 == 0 goto label108;

        z21 = z16;

     label106:
        virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>(r114);

     label107:
        z16 = 1;

        goto label168;

     label108:
        if z0 == 0 goto label149;

        z21 = z16;

     label109:
        $r35 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z9 = virtualinvoke $r35.<com.android.server.pm.PreferredComponent: boolean sameSet(java.util.List,boolean)>(r2, z19);

        if $z9 != 0 goto label149;

     label110:
        z21 = z16;

     label111:
        $r36 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z10 = virtualinvoke $r36.<com.android.server.pm.PreferredComponent: boolean isSuperset(java.util.List,boolean)>(r2, z19);

        if $z10 == 0 goto label122;

     label112:
        if z20 == 0 goto label121;

        z21 = z16;

     label113:
        r123 = new com.android.server.pm.PreferredActivity;

     label114:
        z21 = z16;

     label115:
        $r45 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i10 = $r45.<com.android.server.pm.PreferredComponent: int mMatch>;

        $r46 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r47 = virtualinvoke $r46.<com.android.server.pm.PreferredComponent: android.content.ComponentName[] discardObsoleteComponents(java.util.List)>(r2);

        $r48 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r50 = $r48.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r49 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z11 = $r49.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        specialinvoke r123.<com.android.server.pm.PreferredActivity: void <init>(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean)>(r114, $i10, $r47, $r50, $z11);

     label116:
        z21 = z16;

     label117:
        virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>(r114);

     label118:
        z21 = z16;

     label119:
        virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: void addFilter(java.lang.Object)>(r123);

     label120:
        z16 = 1;

        goto label149;

     label121:
        goto label149;

     label122:
        z22 = z16;

        if z20 == 0 goto label145;

        z21 = z16;

     label123:
        r124 = new java.lang.StringBuilder;

     label124:
        z21 = z16;

     label125:
        specialinvoke r124.<java.lang.StringBuilder: void <init>()>();

     label126:
        z21 = z16;

     label127:
        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result set changed, dropping preferred activity for ");

     label128:
        z21 = z16;

     label129:
        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

     label130:
        z21 = z16;

     label131:
        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type ");

     label132:
        z21 = z16;

     label133:
        virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label134:
        z21 = z16;

     label135:
        $r41 = virtualinvoke r124.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r41);

     label136:
        z21 = z16;

     label137:
        virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>(r114);

     label138:
        z21 = z16;

     label139:
        r125 = new com.android.server.pm.PreferredActivity;

     label140:
        z21 = z16;

     label141:
        $r42 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i9 = $r42.<com.android.server.pm.PreferredComponent: int mMatch>;

        $r43 = r114.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r44 = $r43.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        specialinvoke r125.<com.android.server.pm.PreferredActivity: void <init>(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean)>(r114, $i9, null, $r44, 0);

     label142:
        z21 = z16;

     label143:
        virtualinvoke r5.<com.android.server.pm.PreferredIntentResolver: void addFilter(java.lang.Object)>(r125);

     label144:
        z22 = 1;

     label145:
        if z22 == 0 goto label147;

     label146:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

     label147:
        exitmonitor r4;

     label148:
        return null;

     label149:
        if z2 == 0 goto label163;

        z21 = z16;

     label150:
        r126 = new java.lang.StringBuilder;

     label151:
        z21 = z16;

     label152:
        specialinvoke r126.<java.lang.StringBuilder: void <init>()>();

     label153:
        z21 = z16;

     label154:
        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Returning preferred activity: ");

     label155:
        z21 = z16;

     label156:
        $r27 = r122.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r28 = $r27.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

     label157:
        z21 = z16;

     label158:
        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

     label159:
        z21 = z16;

     label160:
        $r31 = r122.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r32 = $r31.<android.content.pm.ActivityInfo: java.lang.String name>;

        virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

     label161:
        z21 = z16;

     label162:
        $r34 = virtualinvoke r126.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", $r34);

     label163:
        if z16 == 0 goto label165;

     label164:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

     label165:
        exitmonitor r4;

     label166:
        return r122;

     label167:
        $r92 := @caughtexception;

        r110 = $r92;

        z16 = z21;

        goto label176;

     label168:
        i36 = i36 + 1;

        goto label045;

     label169:
        $r103 := @caughtexception;

        r110 = $r103;

        goto label176;

     label170:
        $r104 := @caughtexception;

        r110 = $r104;

        goto label176;

     label171:
        if z16 == 0 goto label179;

     label172:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

     label173:
        goto label179;

     label174:
        $r95 := @caughtexception;

        r110 = $r95;

        z16 = 0;

        goto label176;

     label175:
        $r96 := @caughtexception;

        r110 = $r96;

        z16 = 0;

     label176:
        if z16 == 0 goto label178;

     label177:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

     label178:
        throw r110;

     label179:
        exitmonitor r4;

     label180:
        if z2 == 0 goto label181;

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("PackageManager", "No preferred activity to return");

     label181:
        return null;

     label182:
        $r98 := @caughtexception;

        r108 = $r98;

     label183:
        exitmonitor r4;

     label184:
        throw r108;

     label185:
        $r89 := @caughtexception;

        r108 = $r89;

        goto label183;

        catch java.lang.Throwable from label005 to label006 with label182;
        catch java.lang.Throwable from label007 to label008 with label009;
        catch java.lang.Throwable from label010 to label011 with label182;
        catch java.lang.Throwable from label012 to label013 with label009;
        catch java.lang.Throwable from label015 to label016 with label009;
        catch java.lang.Throwable from label019 to label020 with label182;
        catch java.lang.Throwable from label021 to label022 with label023;
        catch java.lang.Throwable from label024 to label025 with label175;
        catch java.lang.Throwable from label027 to label028 with label037;
        catch java.lang.Throwable from label029 to label030 with label037;
        catch java.lang.Throwable from label030 to label031 with label033;
        catch java.lang.Throwable from label031 to label032 with label041;
        catch java.lang.Throwable from label035 to label036 with label041;
        catch java.lang.Throwable from label039 to label040 with label041;
        catch java.lang.Throwable from label043 to label044 with label174;
        catch java.lang.Throwable from label046 to label047 with label170;
        catch java.lang.Throwable from label048 to label049 with label059;
        catch java.lang.Throwable from label049 to label050 with label058;
        catch java.lang.Throwable from label051 to label052 with label053;
        catch java.lang.Throwable from label055 to label056 with label058;
        catch java.lang.Throwable from label056 to label057 with label069;
        catch java.lang.Throwable from label060 to label061 with label169;
        catch java.lang.Throwable from label062 to label063 with label069;
        catch java.lang.Throwable from label065 to label066 with label069;
        catch java.lang.Throwable from label067 to label068 with label069;
        catch java.lang.Throwable from label070 to label071 with label169;
        catch java.lang.Throwable from label072 to label073 with label069;
        catch java.lang.Throwable from label074 to label075 with label069;
        catch java.lang.Throwable from label076 to label077 with label069;
        catch java.lang.Throwable from label078 to label079 with label169;
        catch java.lang.Throwable from label084 to label085 with label169;
        catch java.lang.Throwable from label086 to label087 with label167;
        catch java.lang.Throwable from label088 to label089 with label167;
        catch java.lang.Throwable from label090 to label091 with label167;
        catch java.lang.Throwable from label092 to label093 with label167;
        catch java.lang.Throwable from label096 to label097 with label167;
        catch java.lang.Throwable from label098 to label099 with label167;
        catch java.lang.Throwable from label100 to label101 with label167;
        catch java.lang.Throwable from label103 to label104 with label167;
        catch java.lang.Throwable from label106 to label107 with label167;
        catch java.lang.Throwable from label109 to label110 with label167;
        catch java.lang.Throwable from label111 to label112 with label167;
        catch java.lang.Throwable from label113 to label114 with label167;
        catch java.lang.Throwable from label115 to label116 with label167;
        catch java.lang.Throwable from label117 to label118 with label167;
        catch java.lang.Throwable from label119 to label120 with label167;
        catch java.lang.Throwable from label123 to label124 with label167;
        catch java.lang.Throwable from label125 to label126 with label167;
        catch java.lang.Throwable from label127 to label128 with label167;
        catch java.lang.Throwable from label129 to label130 with label167;
        catch java.lang.Throwable from label131 to label132 with label167;
        catch java.lang.Throwable from label133 to label134 with label167;
        catch java.lang.Throwable from label135 to label136 with label167;
        catch java.lang.Throwable from label137 to label138 with label167;
        catch java.lang.Throwable from label139 to label140 with label167;
        catch java.lang.Throwable from label141 to label142 with label167;
        catch java.lang.Throwable from label143 to label144 with label167;
        catch java.lang.Throwable from label146 to label147 with label185;
        catch java.lang.Throwable from label147 to label148 with label185;
        catch java.lang.Throwable from label150 to label151 with label167;
        catch java.lang.Throwable from label152 to label153 with label167;
        catch java.lang.Throwable from label154 to label155 with label167;
        catch java.lang.Throwable from label156 to label157 with label167;
        catch java.lang.Throwable from label158 to label159 with label167;
        catch java.lang.Throwable from label160 to label161 with label167;
        catch java.lang.Throwable from label162 to label163 with label167;
        catch java.lang.Throwable from label164 to label165 with label185;
        catch java.lang.Throwable from label165 to label166 with label185;
        catch java.lang.Throwable from label172 to label173 with label185;
        catch java.lang.Throwable from label177 to label178 with label185;
        catch java.lang.Throwable from label178 to label179 with label185;
        catch java.lang.Throwable from label179 to label180 with label185;
        catch java.lang.Throwable from label183 to label184 with label185;
    }

    java.util.List findSharedNonSystemLibraries(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0, $z1;
        java.util.List $r1, r9;
        java.util.ArrayList $r2;
        java.lang.Object $r3, r11;
        com.android.server.pm.Settings $r4;
        java.lang.String $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage $r6;
        java.lang.Throwable $r7;
        com.android.server.pm.PackageSetting r8, r14;
        java.util.Iterator r12;
        android.content.pm.SharedLibraryInfo r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: com.android.server.pm.PackageSetting;

        r9 = staticinvoke <com.android.server.pm.PackageManagerService: java.util.List findSharedLibraries(com.android.server.pm.PackageSetting)>(r8);

        $z0 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label11;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r11 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r11;

     label01:
        r12 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r3 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (android.content.pm.SharedLibraryInfo) $r3;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = virtualinvoke r13.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r14 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r5);

     label03:
        if r14 == null goto label05;

     label04:
        $r6 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r6 == null goto label05;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r14);

     label05:
        goto label02;

     label06:
        exitmonitor r11;

     label07:
        return $r2;

     label08:
        $r7 := @caughtexception;

     label09:
        exitmonitor r11;

     label10:
        throw $r7;

     label11:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void finishPackageInstall(int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean z0;
        android.os.Message r1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system is allowed to finish installs");

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(262144L, "restore", i0);

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        i1 = (int) z0;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(9, i0, i1);

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void flushPackageRestrictionsAsUser(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        java.lang.String $r3;
        com.android.server.pm.UserManagerService $r4;
        boolean $z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i1);

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i0, 0, 0, "flushPackageRestrictions");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUserInternalLocked(int)>(i0);

        exitmonitor r1;

     label4:
        return;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void forEachInstalledPackage(java.util.function.Consumer, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r6;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.PackageSetting r3;
        android.util.ArrayMap $r4, $r5;
        com.android.server.pm.Settings $r7;
        java.lang.String $r8;
        boolean $z0;
        java.lang.Throwable $r9;
        java.util.function.Consumer r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.util.function.Consumer;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i1 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label10;

     label04:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i2);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r6;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r3 = virtualinvoke $r7.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r8);

     label05:
        if r3 == null goto label09;

     label06:
        $z0 = virtualinvoke r3.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z0 != 0 goto label08;

     label07:
        goto label09;

     label08:
        interfaceinvoke r10.<java.util.function.Consumer: void accept(java.lang.Object)>(r2);

     label09:
        i2 = i2 + 1;

        goto label03;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        $r9 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void forEachPackage(java.util.function.Consumer)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r4;
        int i0, i1;
        android.util.ArrayMap $r2, $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage $r5;
        java.lang.Throwable $r6;
        java.util.function.Consumer r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: java.util.function.Consumer;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        i0 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r5 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

        interfaceinvoke r7.<java.util.function.Consumer: void accept(java.lang.Object)>($r5);

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void forceDexOpt(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.dex.DexoptOptions r1;
        int i0;
        android.util.ArrayMap $r2;
        java.lang.Object $r3, r15, r18;
        com.android.server.pm.Settings $r4;
        java.lang.String $r7, $r8, $r11, r14;
        java.lang.Throwable $r12, $r13;
        com.android.server.pm.parsing.pkg.AndroidPackage r16;
        com.android.server.pm.PackageSetting r17;
        java.lang.IllegalStateException r19;
        java.lang.StringBuilder r20, r23;
        java.lang.IllegalArgumentException r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("forceDexOpt");

        r15 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r15;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r16 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r17 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r14);

     label02:
        if r16 == null goto label13;

        if r17 == null goto label13;

     label03:
        exitmonitor r15;

     label04:
        r18 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r18;

     label05:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "dexopt");

        r1 = new com.android.server.pm.dex.DexoptOptions;

        $r8 = staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getDefaultCompilerFilter()>();

        specialinvoke r1.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,java.lang.String,int)>(r14, $r8, 6);

        i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int performDexOptInternalWithDependenciesLI(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.PackageSetting,com.android.server.pm.dex.DexoptOptions)>(r16, r17, r1);

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label06:
        if i0 != 1 goto label09;

     label07:
        exitmonitor r18;

     label08:
        return;

     label09:
        r19 = new java.lang.IllegalStateException;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to dexopt: ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw r19;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r18;

     label12:
        throw $r13;

     label13:
        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r7 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r22;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r15;

     label16:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void freeStorage(java.lang.String, long, int) throws java.io.IOException
    {
        com.android.server.pm.PackageManagerService r0;
        long l0, l2, $l3, $l5, $l8, $l10, $l11, $l12, $l13, $l15, $l17;
        int i1, $i7;
        java.io.File r1, $r20;
        boolean z0, $z1, $z2, $z3, $z4, $z6, z7;
        com.android.server.pm.PackageManagerService$Injector $r2;
        byte $b4, $b6, $b9, $b14, $b16, $b18;
        com.android.server.pm.Installer $r3, $r27, r29;
        java.lang.StringBuilder $r4;
        java.io.IOException $r9;
        java.lang.String $r10, $r11, r25;
        android.content.Context $r12, $r15, $r18;
        com.android.server.pm.InstantAppRegistry $r13, $r16;
        android.content.ContentResolver $r14, $r17, $r19;
        com.android.server.pm.Installer$InstallerException $r21, $r22, $r23, $r24;
        android.os.storage.StorageManager r26;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r25 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r26 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        r1 = virtualinvoke r26.<android.os.storage.StorageManager: java.io.File findPathForUuid(java.lang.String)>(r25);

        $l3 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b4 = $l3 cmp l0;

        if $b4 < 0 goto label01;

        return;

     label01:
        $z1 = <com.android.server.pm.PackageManagerService: boolean ENABLE_FREE_CACHE_V2>;

        if $z1 == 0 goto label20;

        $r11 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r11, r25);

        $i7 = i1 & 1;

        if $i7 == 0 goto label02;

        z7 = 1;

        goto label03;

     label02:
        z7 = 0;

     label03:
        l2 = virtualinvoke r26.<android.os.storage.StorageManager: long getStorageCacheBytes(java.io.File,int)>(r1, i1);

        if z0 == 0 goto label05;

        if z7 != 0 goto label04;

        $z6 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.sys.preloads.file_cache_expired", 0);

        if $z6 == 0 goto label05;

     label04:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void deletePreloadsFileCache()>();

        $l15 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b16 = $l15 cmp l0;

        if $b16 < 0 goto label05;

        return;

     label05:
        if z0 == 0 goto label06;

        if z7 == 0 goto label06;

        $r20 = r0.<com.android.server.pm.PackageManagerService: java.io.File mCacheDir>;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>($r20);

        $l13 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b14 = $l13 cmp l0;

        if $b14 < 0 goto label06;

        return;

     label06:
        $r27 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r27.<com.android.server.pm.Installer: void freeCache(java.lang.String,long,long,int)>(r25, l0, l2, 256);

     label07:
        goto label09;

     label08:
        $r22 := @caughtexception;

     label09:
        $l8 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b9 = $l8 cmp l0;

        if $b9 < 0 goto label10;

        return;

     label10:
        if z0 == 0 goto label11;

        $r18 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l12 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r19, "unused_static_shared_lib_min_cache_period", 7200000L);

        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean pruneUnusedStaticSharedLibraries(long,long)>(l0, $l12);

        if $z4 == 0 goto label11;

        return;

     label11:
        if z0 == 0 goto label12;

        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $r15 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r17 = virtualinvoke $r15.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l11 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r17, "installed_instant_app_min_cache_period", 604800000L);

        $z3 = virtualinvoke $r16.<com.android.server.pm.InstantAppRegistry: boolean pruneInstalledInstantApps(long,long)>(l0, $l11);

        if $z3 == 0 goto label12;

        return;

     label12:
        r29 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

     label13:
        virtualinvoke r29.<com.android.server.pm.Installer: void freeCache(java.lang.String,long,long,int)>(r25, l0, l2, 768);

     label14:
        goto label17;

     label15:
        $r23 := @caughtexception;

        goto label17;

     label16:
        $r21 := @caughtexception;

     label17:
        $l17 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b18 = $l17 cmp l0;

        if $b18 < 0 goto label18;

        return;

     label18:
        if z0 == 0 goto label19;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r14 = virtualinvoke $r12.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $l10 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r14, "uninstalled_instant_app_min_cache_period", 604800000L);

        $z2 = virtualinvoke $r13.<com.android.server.pm.InstantAppRegistry: boolean pruneUninstalledInstantApps(long,long)>(l0, $l10);

        if $z2 == 0 goto label19;

        return;

     label19:
        goto label24;

     label20:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r3.<com.android.server.pm.Installer: void freeCache(java.lang.String,long,long,int)>(r25, l0, 0L, 0);

     label21:
        goto label23;

     label22:
        $r24 := @caughtexception;

     label23:
        $l5 = virtualinvoke r1.<java.io.File: long getUsableSpace()>();

        $b6 = $l5 cmp l0;

        if $b6 < 0 goto label24;

        return;

     label24:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to free ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on storage device at ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = new java.io.IOException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch com.android.server.pm.Installer$InstallerException from label06 to label07 with label08;
        catch com.android.server.pm.Installer$InstallerException from label12 to label13 with label16;
        catch com.android.server.pm.Installer$InstallerException from label13 to label14 with label15;
        catch com.android.server.pm.Installer$InstallerException from label20 to label21 with label22;
    }

    public void freeStorage(java.lang.String, long, int, android.content.IntentSender)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        long l0;
        int i1;
        android.content.IntentSender r2;
        android.content.Context $r3;
        com.android.server.pm._$$Lambda$PackageManagerService$R17iAlCA5_t5NZESLr7grPghNAY $r4;
        android.os.Handler $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.IntentSender;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_CACHE", "PackageManager");

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r4 = new com.android.server.pm._$$Lambda$PackageManagerService$R17iAlCA5_t5NZESLr7grPghNAY;

        specialinvoke $r4.<com.android.server.pm._$$Lambda$PackageManagerService$R17iAlCA5_t5NZESLr7grPghNAY: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,long,int,android.content.IntentSender)>(r0, r1, l0, i1, r2);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public void freeStorageAndNotify(java.lang.String, long, int, android.content.pm.IPackageDataObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        long l0;
        int i1;
        android.content.pm.IPackageDataObserver r2;
        android.content.Context $r3;
        com.android.server.pm._$$Lambda$PackageManagerService$UmQDc8UZK0k1X1BVBYAHhv6arhU $r4;
        android.os.Handler $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.pm.IPackageDataObserver;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CLEAR_APP_CACHE", null);

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r4 = new com.android.server.pm._$$Lambda$PackageManagerService$UmQDc8UZK0k1X1BVBYAHhv6arhU;

        specialinvoke $r4.<com.android.server.pm._$$Lambda$PackageManagerService$UmQDc8UZK0k1X1BVBYAHhv6arhU: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,long,int,android.content.pm.IPackageDataObserver)>(r0, r1, l0, i1, r2);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    public com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.pm.PackageManagerService$PackageFreezer $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = new com.android.server.pm.PackageManagerService$PackageFreezer;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>(r0, r1, i0, r2);

        return $r3;
    }

    public com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        com.android.server.pm.PackageManagerService$PackageFreezer $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,int,java.lang.String)>(r1, -1, r2);

        return $r3;
    }

    public com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForDelete(java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;
        com.android.server.pm.PackageManagerService$PackageFreezer $r3, $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i2 = i1 & 8;

        if $i2 == 0 goto label1;

        $r4 = new com.android.server.pm.PackageManagerService$PackageFreezer;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,int,java.lang.String)>(r1, i0, r2);

        return $r3;
    }

    public com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForDelete(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.pm.PackageManagerService$PackageFreezer $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForDelete(java.lang.String,int,int,java.lang.String)>(r1, -1, i0, r2);

        return $r3;
    }

    public com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForInstall(java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;
        com.android.server.pm.PackageManagerService$PackageFreezer $r3, $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $i2 = i1 & 4096;

        if $i2 == 0 goto label1;

        $r4 = new com.android.server.pm.PackageManagerService$PackageFreezer;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$PackageFreezer: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        return $r4;

     label1:
        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackage(java.lang.String,int,java.lang.String)>(r1, i0, r2);

        return $r3;
    }

    public com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForInstall(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.pm.PackageManagerService$PackageFreezer $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageFreezer freezePackageForInstall(java.lang.String,int,int,java.lang.String)>(r1, -1, i0, r2);

        return $r3;
    }

    public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        android.content.pm.ActivityInfo $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfoInternal(android.content.ComponentName,int,int,int)>(r1, i0, $i2, i1);

        return $r2;
    }

    public android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r4, $r9;
        android.content.pm.parsing.component.ParsedActivity r2;
        boolean $z0, $z1, $z2;
        android.util.ArrayMap $r3;
        java.util.List $r5, $r7, $r8, $r10, $r11, $r12;
        java.lang.String $r6, r15;
        int $i0, i1, i2, i3, i4;
        android.content.pm.ParceledListSlice $r13, r18, r19, r22;
        java.lang.Throwable $r14;
        com.android.server.pm.parsing.pkg.AndroidPackage r16;
        com.android.server.pm.PackageSetting r17;
        java.util.ArrayList r20;
        com.android.server.pm.PackageManagerService$3 r21;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r15);

        if $z0 == 0 goto label01;

        $r13 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r13;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        r16 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label03:
        if r16 == null goto label19;

     label04:
        $r5 = interfaceinvoke r16.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.util.Collection)>($r5);

        if $z1 == 0 goto label06;

     label05:
        goto label19;

     label06:
        $r6 = interfaceinvoke r16.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r17 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r6);

     label07:
        if r17 != null goto label10;

     label08:
        r18 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        exitmonitor r1;

     label09:
        return r18;

     label10:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r17, i1, i2);

        if $z2 == 0 goto label12;

        r19 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        exitmonitor r1;

     label11:
        return r19;

     label12:
        $r7 = interfaceinvoke r16.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        i3 = staticinvoke <com.android.internal.util.ArrayUtils: int size(java.util.Collection)>($r7);

        r20 = new java.util.ArrayList;

        specialinvoke r20.<java.util.ArrayList: void <init>()>();

     label13:
        i4 = 0;

     label14:
        if i4 >= i3 goto label17;

     label15:
        $r8 = interfaceinvoke r16.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getActivities()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        r2 = (android.content.pm.parsing.component.ParsedActivity) $r9;

        $r10 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        if $r10 == null goto label16;

        $r11 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        $i0 = interfaceinvoke $r11.<java.util.List: int size()>();

        if $i0 <= 0 goto label16;

        $r12 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedActivity: java.util.List getIntents()>();

        virtualinvoke r20.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r12);

     label16:
        i4 = i4 + 1;

        goto label14;

     label17:
        r21 = new com.android.server.pm.PackageManagerService$3;

        specialinvoke r21.<com.android.server.pm.PackageManagerService$3: void <init>(com.android.server.pm.PackageManagerService,java.util.List)>(r0, r20);

        exitmonitor r1;

     label18:
        return r21;

     label19:
        r22 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        exitmonitor r1;

     label20:
        return r22;

     label21:
        $r14 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public java.util.List getAllPackages()
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, $r5, $r10;
        com.android.server.pm.PackageSetting r2;
        boolean $z0, $z2, $z3, $z4, $z6, $z7;
        android.util.ArrayMap $r3, $r8, $r12;
        java.util.Collection $r4, $r9;
        java.lang.String $r6, $r11, r16, $r22;
        com.android.server.pm.InstantAppRegistry $r7;
        java.util.Set $r13;
        java.lang.Throwable $r14;
        java.util.ArrayList r15, r17;
        java.util.Iterator r18, r20;
        com.android.server.pm.parsing.pkg.AndroidPackage r19, r21;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i0, i1);

        if $z0 == 0 goto label03;

        r15 = new java.util.ArrayList;

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.util.Set keySet()>();

        specialinvoke r15.<java.util.ArrayList: void <init>(java.util.Collection)>($r13);

        exitmonitor r1;

     label02:
        return r15;

     label03:
        r16 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        r17 = new java.util.ArrayList;

        specialinvoke r17.<java.util.ArrayList: void <init>()>();

     label04:
        if r16 == null goto label11;

     label05:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.util.Collection values()>();

        r18 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r10 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

        $z4 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isVisibleToInstantApps()>();

        if $z4 != 0 goto label08;

     label07:
        goto label06;

     label08:
        $r11 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r11);

     label09:
        goto label06;

     label10:
        goto label18;

     label11:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Collection values()>();

        r20 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z7 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label18;

        $r5 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        $r6 = interfaceinvoke r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r6);

     label13:
        if r2 == null goto label16;

     label14:
        $z2 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i1);

        if $z2 == 0 goto label16;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $i3 = r2.<com.android.server.pm.PackageSetting: int appId>;

        $z3 = virtualinvoke $r7.<com.android.server.pm.InstantAppRegistry: boolean isInstantAccessGranted(int,int,int)>(i1, $i2, $i3);

        if $z3 != 0 goto label16;

     label15:
        goto label12;

     label16:
        $r22 = interfaceinvoke r21.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke r17.<java.util.List: boolean add(java.lang.Object)>($r22);

     label17:
        goto label12;

     label18:
        exitmonitor r1;

     label19:
        return r17;

     label20:
        $r14 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public java.lang.String[] getAppOpPermissionPackages(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        java.lang.String[] r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        r4 = interfaceinvoke $r1.<android.permission.IPermissionManager: java.lang.String[] getAppOpPermissionPackages(java.lang.String)>(r3);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getAppPredictionServicePackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3, r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039855);

        if r4 != null goto label1;

        return null;

     label1:
        r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r4);

        if r5 != null goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r5.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    public int getApplicationEnabledSetting(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        com.android.server.pm.Settings $r5, $r7;
        com.android.server.pm.PackageSetting $r6;
        android.content.pm.PackageManager$NameNotFoundException $r8, r14;
        java.lang.String $r11, r13;
        java.lang.Throwable $r12;
        java.lang.IllegalArgumentException r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z0 != 0 goto label01;

        return 2;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i0, i1, 0, 0, "get enabled");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r13);

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r6, i0, i1);

        if $z1 != 0 goto label05;

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i2 = virtualinvoke $r7.<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String,int)>(r13, i1);

     label03:
        exitmonitor r1;

     label04:
        return i2;

     label05:
        r14 = new android.content.pm.PackageManager$NameNotFoundException;

        specialinvoke r14.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>(r13);

        throw r14;

     label06:
        $r12 := @caughtexception;

        goto label09;

     label07:
        $r8 := @caughtexception;

     label08:
        r17 = new java.lang.IllegalArgumentException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw r17;

     label09:
        exitmonitor r1;

     label10:
        throw $r12;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label07;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
        catch java.lang.Throwable from label09 to label10 with label06;
    }

    public boolean getApplicationHiddenSettingAsUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        com.android.server.pm.permission.PermissionManagerServiceInternal r1;
        long l2;
        boolean z0, $z1;
        android.content.Context $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r12;
        com.android.server.pm.Settings $r7;
        android.util.ArrayMap $r8;
        java.lang.Object $r9, r14;
        java.lang.Throwable $r10, $r11;
        com.android.server.pm.PackageSetting r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getApplicationHidden for user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 0, $r6);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r14 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label02:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        r15 = (com.android.server.pm.PackageSetting) $r9;

     label03:
        if r15 != null goto label06;

     label04:
        exitmonitor r14;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label06:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r15, i1, i0);

        if $z1 == 0 goto label08;

        exitmonitor r14;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label08:
        z0 = virtualinvoke r15.<com.android.server.pm.PackageSetting: boolean getHidden(int)>(i0);

        exitmonitor r14;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return z0;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r14;

     label12:
        throw $r10;

     label13:
        $r11 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.pm.ApplicationInfo $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfoInternal(java.lang.String,int,int,int)>(r1, i0, $i2, i1);

        return $r2;
    }

    public android.content.pm.dex.IArtManager getArtManager()
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.dex.ArtManagerService $r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.ArtManagerService mArtManagerService>;

        return $r1;
    }

    public java.lang.String getAttentionServicePackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3, $r4, r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r5 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039857);

        if r5 == null goto label1;

        r6 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r5);

        if r6 == null goto label1;

        $r2 = virtualinvoke r6.<android.content.ComponentName: java.lang.String getPackageName()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r6.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r3);

        return $r4;

     label1:
        return null;
    }

    public boolean getBlockUninstallForUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r5;
        com.android.server.pm.PackageSetting r2;
        boolean z0, $z1;
        com.android.server.pm.Settings $r3, $r6;
        android.util.ArrayMap $r4;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r2 = (com.android.server.pm.PackageSetting) $r5;

     label02:
        if r2 == null goto label07;

     label03:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, $i1, i0);

        if $z1 == 0 goto label05;

     label04:
        goto label07;

     label05:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        z0 = virtualinvoke $r6.<com.android.server.pm.Settings: boolean getBlockUninstallLPr(int,java.lang.String)>(i0, r8);

        exitmonitor r1;

     label06:
        return z0;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.content.pm.ChangedPackages getChangedPackages(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.util.SparseArray r1, $r6;
        java.util.ArrayList r2;
        java.lang.String r3, r11;
        com.android.server.pm.UserManagerService $r4;
        boolean $z0, $z1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        java.lang.Object $r7, $r9, r13;
        android.content.pm.ChangedPackages $r8, r12;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i7 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r11 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        r12 = null;

        if r11 == null goto label01;

        return null;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label02;

        return null;

     label02:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "getChangedPackages");

        r13 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r13;

     label03:
        $i2 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        if i7 < $i2 goto label05;

        exitmonitor r13;

     label04:
        return null;

     label05:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mChangedPackages>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.util.SparseArray) $r7;

     label06:
        if r1 != null goto label09;

     label07:
        exitmonitor r13;

     label08:
        return null;

     label09:
        r2 = new java.util.ArrayList;

        $i3 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        $i4 = $i3 - i7;

        specialinvoke r2.<java.util.ArrayList: void <init>(int)>($i4);

     label10:
        $i5 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        if i7 >= $i5 goto label14;

        $r9 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i7);

        r3 = (java.lang.String) $r9;

     label11:
        if r3 == null goto label13;

     label12:
        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label13:
        i7 = i7 + 1;

        goto label10;

     label14:
        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label16;

     label15:
        goto label18;

     label16:
        $r8 = new android.content.pm.ChangedPackages;

        $i6 = r0.<com.android.server.pm.PackageManagerService: int mChangedPackagesSequenceNumber>;

        specialinvoke $r8.<android.content.pm.ChangedPackages: void <init>(int,java.util.List)>($i6, r2);

        r12 = $r8;

     label17:
        goto label15;

     label18:
        exitmonitor r13;

     label19:
        return r12;

     label20:
        $r10 := @caughtexception;

     label21:
        exitmonitor r13;

     label22:
        throw $r10;

        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label07 to label08 with label20;
        catch java.lang.Throwable from label09 to label10 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public com.android.server.pm.CompilerStats$PackageStats getCompilerPackageStats(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        com.android.server.pm.CompilerStats $r2;
        com.android.server.pm.CompilerStats$PackageStats $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.CompilerStats: com.android.server.pm.CompilerStats$PackageStats getPackageStats(java.lang.String)>(r1);

        return $r3;
    }

    public int getComponentEnabledSetting(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        java.lang.IllegalArgumentException r2;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        com.android.server.pm.Settings $r5, $r9;
        java.lang.String $r6, $r8, $r14;
        com.android.server.pm.PackageSetting $r7;
        java.lang.Throwable $r10;
        android.content.pm.PackageManager$NameNotFoundException $r11, r16;
        android.content.ComponentName r15;
        java.lang.StringBuilder r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: android.content.ComponentName;

        i1 := @parameter1: int;

        if r15 != null goto label01;

        return 0;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z0 != 0 goto label02;

        return 2;

     label02:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i0, i1, 0, 0, "getComponentEnabled");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = virtualinvoke r15.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r6);

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>($r7, i0, r15, 0, i1);

        if $z1 != 0 goto label06;

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i2 = virtualinvoke $r9.<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName,int)>(r15, i1);

     label04:
        exitmonitor r1;

     label05:
        return i2;

     label06:
        r16 = new android.content.pm.PackageManager$NameNotFoundException;

        $r8 = virtualinvoke r15.<android.content.ComponentName: java.lang.String getPackageName()>();

        specialinvoke r16.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r8);

        throw r16;

     label07:
        $r10 := @caughtexception;

        goto label10;

     label08:
        $r11 := @caughtexception;

     label09:
        r2 = new java.lang.IllegalArgumentException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown component: ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r14 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw r2;

     label10:
        exitmonitor r1;

     label11:
        throw $r10;

        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label08;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label07;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public java.lang.String getContentCaptureServicePackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        boolean $z0;
        java.lang.String $r2, $r3, r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039861);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r4);

        if r5 != null goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r5.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    public android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, i4, $i6, i7, i8, i9;
        java.lang.Object r1, $r16, $r17;
        android.util.LongSparseArray r2;
        android.content.pm.SharedLibraryInfo r3, r31;
        java.lang.String r4, r5, r7, $r13, $r18, r24;
        java.util.List r6, $r19, $r21, r32;
        android.content.pm.VersionedPackage r8, r29;
        android.content.Context $r9;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r10;
        com.android.server.pm.UserManagerService $r12;
        boolean $z0, $z1;
        android.util.ArrayMap $r14, $r15;
        java.util.ArrayList $r20, r26, r27, r33;
        java.lang.Throwable $r22, $r23;
        long l10, l11;
        android.content.pm.PackageInfo r30;
        android.content.pm.ParceledListSlice r35;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r24 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_SHARED_LIBRARIES", "getDeclaredSharedLibraries");

        i7 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r10.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i7, i1, 1, 0, "getDeclaredSharedLibraries");

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r24, "packageName cannot be null");

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i1, "userId must be >= 0");

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r12.<com.android.server.pm.UserManagerService: boolean exists(int)>(i1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r13 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i7);

        if $r13 == null goto label02;

        return null;

     label02:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        r26 = null;

     label03:
        $r14 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        i2 = virtualinvoke $r14.<android.util.ArrayMap: int size()>();

     label04:
        i8 = 0;

     label05:
        if i8 >= i2 goto label33;

     label06:
        $r15 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r16 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i8);

        r2 = (android.util.LongSparseArray) $r16;

     label07:
        if r2 != null goto label08;

        goto label32;

     label08:
        i3 = virtualinvoke r2.<android.util.LongSparseArray: int size()>();

     label09:
        i9 = 0;

     label10:
        r27 = null;

        if i9 >= i3 goto label32;

     label11:
        $r17 = virtualinvoke r2.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i9);

        r3 = (android.content.pm.SharedLibraryInfo) $r17;

        r29 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        $r18 = virtualinvoke r29.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r18, r24);

        if $z1 != 0 goto label13;

     label12:
        goto label28;

     label13:
        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label14:
        $i6 = 67108864 | i0;

        r30 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>(r29, $i6, i1);

     label15:
        if r30 != null goto label18;

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

     label17:
        goto label28;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

     label19:
        r31 = new android.content.pm.SharedLibraryInfo;

        r4 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        r5 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r6 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.util.List getAllCodePaths()>();

        r7 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        l11 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        i4 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: int getType()>();

        r8 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        r32 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getPackagesUsingSharedLibraryLPr(android.content.pm.SharedLibraryInfo,int,int)>(r3, i0, i1);

        $r19 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        if $r19 != null goto label21;

     label20:
        goto label23;

     label21:
        $r20 = new java.util.ArrayList;

        $r21 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        specialinvoke $r20.<java.util.ArrayList: void <init>(java.util.Collection)>($r21);

        r27 = $r20;

     label22:
        goto label20;

     label23:
        specialinvoke r31.<android.content.pm.SharedLibraryInfo: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String,long,int,android.content.pm.VersionedPackage,java.util.List,java.util.List)>(r4, r5, r6, r7, l11, i4, r8, r32, r27);

     label24:
        r33 = r26;

        if r26 != null goto label26;

     label25:
        r33 = new java.util.ArrayList;

        specialinvoke r33.<java.util.ArrayList: void <init>()>();

     label26:
        interfaceinvoke r33.<java.util.List: boolean add(java.lang.Object)>(r31);

     label27:
        r26 = r33;

     label28:
        i9 = i9 + 1;

        goto label10;

     label29:
        $r22 := @caughtexception;

     label30:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l10);

     label31:
        throw $r22;

     label32:
        i8 = i8 + 1;

        goto label05;

     label33:
        if r26 == null goto label36;

     label34:
        r35 = new android.content.pm.ParceledListSlice;

        specialinvoke r35.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r26);

     label35:
        goto label37;

     label36:
        r35 = null;

     label37:
        exitmonitor r1;

     label38:
        return r35;

     label39:
        $r23 := @caughtexception;

     label40:
        exitmonitor r1;

     label41:
        throw $r23;

        catch java.lang.Throwable from label03 to label04 with label39;
        catch java.lang.Throwable from label06 to label07 with label39;
        catch java.lang.Throwable from label08 to label09 with label39;
        catch java.lang.Throwable from label11 to label12 with label39;
        catch java.lang.Throwable from label13 to label14 with label39;
        catch java.lang.Throwable from label14 to label15 with label29;
        catch java.lang.Throwable from label16 to label17 with label39;
        catch java.lang.Throwable from label18 to label19 with label39;
        catch java.lang.Throwable from label19 to label20 with label39;
        catch java.lang.Throwable from label21 to label22 with label39;
        catch java.lang.Throwable from label23 to label24 with label39;
        catch java.lang.Throwable from label25 to label26 with label39;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Throwable from label30 to label31 with label39;
        catch java.lang.Throwable from label31 to label32 with label39;
        catch java.lang.Throwable from label34 to label35 with label39;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label40 to label41 with label39;
    }

    public byte[] getDefaultAppsBackup(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        com.android.internal.util.FastXmlSerializer r1;
        java.lang.SecurityException $r2;
        java.io.ByteArrayOutputStream $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Boolean $r6;
        com.android.server.pm.Settings $r8;
        byte[] $r10;
        java.lang.Throwable $r11;
        java.lang.Exception $r12;
        java.lang.Object r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label9;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>($r3, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "da");

        r14 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label2:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.Settings: void writeDefaultAppsLPr(org.xmlpull.v1.XmlSerializer,int)>(r1, i0);

        exitmonitor r14;

     label3:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "da");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label4:
        $r10 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r14;

     label7:
        throw $r11;

     label8:
        $r12 := @caughtexception;

        return null;

     label9:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call getDefaultAppsBackup()");

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Exception from label7 to label8 with label8;
    }

    public java.lang.String getDefaultTextClassifierPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039946);

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    com.android.server.pm.dex.DexManager getDexManager()
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.dex.DexManager $r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        return $r1;
    }

    public int getFlagsForUid(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i2, i3, i4, i5;
        java.lang.Object r1;
        java.lang.String $r2;
        com.android.server.pm.Settings $r3;
        boolean $z0, $z1, $z2;
        com.android.server.pm.SharedUserSetting $r4;
        java.lang.Throwable $r5;
        com.android.server.pm.SettingBase r6;
        com.android.server.pm.PackageSetting r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i2 := @parameter0: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r2 == null goto label01;

        return 0;

     label01:
        i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r6 = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i3);

        $z0 = r6 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label04;

        $r4 = (com.android.server.pm.SharedUserSetting) r6;

        i4 = $r4.<com.android.server.pm.SharedUserSetting: int pkgFlags>;

        exitmonitor r1;

     label03:
        return i4;

     label04:
        $z1 = r6 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label09;

        r7 = (com.android.server.pm.PackageSetting) r6;

     label05:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r7, i0, $i1);

        if $z2 == 0 goto label07;

        exitmonitor r1;

     label06:
        return 0;

     label07:
        i5 = r7.<com.android.server.pm.PackageSetting: int pkgFlags>;

        exitmonitor r1;

     label08:
        return i5;

     label09:
        exitmonitor r1;

     label10:
        return 0;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.lang.CharSequence getHarmfulAppWarning(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r4;
        java.lang.String r5, r7;
        com.android.server.pm.Settings $r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, "getHarmfulAppInfo");

        if i2 == 1000 goto label2;

        if i2 == 0 goto label2;

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.SET_HARMFUL_APP_WARNINGS", i1);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must have the android.permission.SET_HARMFUL_APP_WARNINGS permission.");

        throw $r3;

     label2:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r7 = virtualinvoke $r6.<com.android.server.pm.Settings: java.lang.String getHarmfulAppWarningLPr(java.lang.String,int)>(r5, i0);

        exitmonitor r1;

     label4:
        return r7;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public android.content.ComponentName getHomeActivities(java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1;
        int $i0, $i1;
        java.lang.String $r2;
        android.content.ComponentName $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r2 == null goto label1;

        return null;

     label1:
        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivitiesAsUser(java.util.List,int)>(r1, $i1);

        return $r3;
    }

    android.content.ComponentName getHomeActivitiesAsUser(java.util.List, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1, r14;
        int i0, i1, i2;
        android.content.pm.ResolveInfo r2;
        android.content.Intent $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        java.lang.Object $r5;
        android.content.pm.ActivityInfo $r6, $r7, $r10, $r11;
        java.lang.String $r8, $r12, $r13, r15;
        boolean $z1;
        android.content.ComponentName $r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: java.util.List;

        i1 := @parameter1: int;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.Intent getHomeIntent()>();

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>($r3, null, 128, i1);

        interfaceinvoke r14.<java.util.List: void clear()>();

        if r1 != null goto label1;

        return null;

     label1:
        interfaceinvoke r14.<java.util.List: boolean addAll(java.util.Collection)>(r1);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        r15 = virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: java.lang.String getDefaultHome(int)>(i1);

        if r15 != null goto label2;

        return null;

     label2:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (android.content.pm.ResolveInfo) $r5;

        $r6 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r6 == null goto label4;

        $r7 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r8 = $r7.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r8, r15);

        if $z1 == 0 goto label4;

        $r9 = new android.content.ComponentName;

        $r10 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r13 = $r10.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r11 = r2.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r12 = $r11.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r9.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r13, $r12);

        return $r9;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return null;
    }

    public java.lang.String getIncidentReportApproverPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039906);

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    public int getInstallLocation()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "default_install_location", 0);

        return $i0;
    }

    public int getInstallReason(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r5;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        boolean $z0;
        java.lang.Throwable $r6;
        java.lang.String r7;
        com.android.server.pm.PackageSetting r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i0, i1, 1, 0, "get install reason");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.pm.PackageSetting) $r5;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r8, i0, i1);

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        if r8 == null goto label06;

     label04:
        i2 = virtualinvoke r8.<com.android.server.pm.PackageSetting: int getInstallReason(int)>(i1);

        exitmonitor r1;

     label05:
        return i2;

     label06:
        exitmonitor r1;

     label07:
        return 0;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        java.lang.Object r1, $r8, $r16, $r20;
        com.android.server.pm.InstallSource r2;
        com.android.server.pm.PackageSetting r3, r25, r27;
        java.lang.String $r4, $r5, $r17, r22, r23, r24, r26, r28, r29, r30;
        com.android.server.pm.Settings $r6, $r14, $r18;
        android.util.ArrayMap $r7, $r15, $r19;
        android.content.pm.PackageParser$SigningDetails $r9, $r10, $r12;
        android.content.pm.SigningInfo $r11, r32;
        android.content.Context $r13;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.Throwable $r21;
        com.android.server.pm.PackageSignatures r31;
        android.content.pm.InstallSourceInfo $r33;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r22 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstallSource getInstallSourceLocked(java.lang.String,int)>(r22, i0);

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return null;

     label05:
        r23 = r2.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

     label06:
        r24 = r23;

        if r23 == null goto label11;

     label07:
        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r19 = $r18.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r20 = virtualinvoke $r19.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r23);

        r25 = (com.android.server.pm.PackageSetting) $r20;

     label08:
        if r25 == null goto label10;

        r24 = r23;

     label09:
        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r25, i0, i1);

        if $z3 == 0 goto label11;

     label10:
        r24 = null;

     label11:
        $z4 = r2.<com.android.server.pm.InstallSource: boolean isInitiatingPackageUninstalled>;

        if $z4 == 0 goto label19;

        $r17 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r17 == null goto label13;

     label12:
        z5 = 1;

        goto label14;

     label13:
        z5 = 0;

     label14:
        if z5 != 0 goto label17;

     label15:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r22, i0);

        if $z2 == 0 goto label17;

        r26 = r2.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

     label16:
        goto label18;

     label17:
        r26 = null;

     label18:
        goto label25;

     label19:
        $r5 = r2.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        $r4 = r2.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        if $r5 != $r4 goto label21;

     label20:
        r26 = r24;

        goto label25;

     label21:
        r26 = r2.<com.android.server.pm.InstallSource: java.lang.String initiatingPackageName>;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r26);

        r27 = (com.android.server.pm.PackageSetting) $r8;

     label22:
        if r27 == null goto label24;

     label23:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r27, i0, i1);

        if $z1 == 0 goto label25;

     label24:
        r26 = null;

     label25:
        r28 = r2.<com.android.server.pm.InstallSource: java.lang.String originatingPackageName>;

     label26:
        r29 = r28;

        if r28 == null goto label31;

     label27:
        $r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r15 = $r14.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r16 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r28);

        r3 = (com.android.server.pm.PackageSetting) $r16;

     label28:
        if r3 == null goto label30;

        r29 = r28;

     label29:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r3, i0, i1);

        if $z0 == 0 goto label31;

     label30:
        r29 = null;

     label31:
        exitmonitor r1;

     label32:
        r30 = r29;

        if r29 == null goto label33;

        r30 = r29;

        $r13 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r13.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        if $i2 == 0 goto label33;

        r30 = null;

     label33:
        r31 = r2.<com.android.server.pm.InstallSource: com.android.server.pm.PackageSignatures initiatingPackageSignatures>;

        if r26 == null goto label34;

        if r31 == null goto label34;

        $r10 = r31.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r9 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r10 == $r9 goto label34;

        $r11 = new android.content.pm.SigningInfo;

        $r12 = r31.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        specialinvoke $r11.<android.content.pm.SigningInfo: void <init>(android.content.pm.PackageParser$SigningDetails)>($r12);

        r32 = $r11;

        goto label35;

     label34:
        r32 = null;

     label35:
        $r33 = new android.content.pm.InstallSourceInfo;

        specialinvoke $r33.<android.content.pm.InstallSourceInfo: void <init>(java.lang.String,android.content.pm.SigningInfo,java.lang.String,java.lang.String)>(r26, r32, r30, r24);

        return $r33;

     label36:
        $r21 := @caughtexception;

     label37:
        exitmonitor r1;

     label38:
        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label36;
        catch java.lang.Throwable from label03 to label04 with label36;
        catch java.lang.Throwable from label05 to label06 with label36;
        catch java.lang.Throwable from label07 to label08 with label36;
        catch java.lang.Throwable from label09 to label10 with label36;
        catch java.lang.Throwable from label11 to label12 with label36;
        catch java.lang.Throwable from label15 to label16 with label36;
        catch java.lang.Throwable from label19 to label20 with label36;
        catch java.lang.Throwable from label21 to label22 with label36;
        catch java.lang.Throwable from label23 to label24 with label36;
        catch java.lang.Throwable from label25 to label26 with label36;
        catch java.lang.Throwable from label27 to label28 with label36;
        catch java.lang.Throwable from label29 to label30 with label36;
        catch java.lang.Throwable from label31 to label32 with label36;
        catch java.lang.Throwable from label37 to label38 with label36;
    }

    public android.content.pm.ParceledListSlice getInstalledApplications(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        android.content.pm.ParceledListSlice $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new android.content.pm.ParceledListSlice;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getInstalledApplicationsListInternal(int,int,int)>(i0, i1, $i2);

        specialinvoke $r1.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r2);

        return $r1;
    }

    public java.util.List getInstalledModules(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.ModuleInfoProvider $r1;
        java.util.List $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ModuleInfoProvider mModuleInfoProvider>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.ModuleInfoProvider: java.util.List getInstalledModules(int)>(i0);

        return $r2;
    }

    public android.content.pm.ParceledListSlice getInstalledPackages(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.Object r1, $r14, $r22;
        java.lang.String $r2, $r16;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z4, $z5, $z7, $z8, z10, z11, z12, $z13, $z14;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        android.util.ArrayMap $r5, $r6, $r18, $r20;
        java.util.Collection $r7, $r21;
        com.android.server.pm.ApexManager $r8, $r10, $r12;
        java.util.List $r9, $r11, $r13;
        com.android.server.pm.parsing.pkg.AndroidPackage $r15;
        com.android.server.pm.Settings $r17, $r19;
        android.content.pm.ParceledListSlice $r23, $r24, r34;
        java.lang.Throwable $r25;
        java.util.ArrayList r26, r30;
        java.util.Iterator r27, r31;
        com.android.server.pm.PackageSetting r28, r32;
        android.content.pm.PackageInfo r29, r33;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i8 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r2 == null goto label01;

        $r24 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r24;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label02;

        $r23 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r23;

     label02:
        i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i8, i0);

        z10 = 1;

        $i3 = 4202496 & i2;

        if $i3 == 0 goto label03;

        z11 = 1;

        goto label04;

     label03:
        z11 = 0;

     label04:
        $i4 = 1073741824 & i2;

        if $i4 == 0 goto label05;

        z12 = 1;

        goto label06;

     label05:
        z12 = 0;

     label06:
        $i5 = 2097152 & i2;

        if $i5 == 0 goto label07;

        goto label08;

     label07:
        z10 = 0;

     label08:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "get installed packages");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        if z11 == 0 goto label19;

     label09:
        r26 = new java.util.ArrayList;

        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r18 = $r17.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $i7 = virtualinvoke $r18.<android.util.ArrayMap: int size()>();

        specialinvoke r26.<java.util.ArrayList: void <init>(int)>($i7);

        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r20 = $r19.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r21 = virtualinvoke $r20.<android.util.ArrayMap: java.util.Collection values()>();

        r27 = interfaceinvoke $r21.<java.util.Collection: java.util.Iterator iterator()>();

     label10:
        $z13 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label18;

        $r22 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r28 = (com.android.server.pm.PackageSetting) $r22;

        $z7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r28, i1, i0, i2);

        if $z7 == 0 goto label12;

     label11:
        goto label10;

     label12:
        $z8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r28, i1, i0);

        if $z8 == 0 goto label14;

     label13:
        goto label10;

     label14:
        r29 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r28, i2, i0);

     label15:
        if r29 == null goto label17;

     label16:
        virtualinvoke r26.<java.util.ArrayList: boolean add(java.lang.Object)>(r29);

     label17:
        goto label10;

     label18:
        goto label29;

     label19:
        r30 = new java.util.ArrayList;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i6 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        specialinvoke r30.<java.util.ArrayList: void <init>(int)>($i6);

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        r31 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label20:
        r26 = r30;

     label21:
        $z14 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label29;

        $r14 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r14;

        $r16 = interfaceinvoke $r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r32 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r16);

        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r32, i1, i0, i2);

        if $z4 == 0 goto label23;

     label22:
        goto label20;

     label23:
        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r32, i1, i0);

        if $z5 == 0 goto label25;

     label24:
        goto label20;

     label25:
        r33 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(com.android.server.pm.PackageSetting,int,int)>(r32, i2, i0);

     label26:
        if r33 == null goto label28;

     label27:
        virtualinvoke r30.<java.util.ArrayList: boolean add(java.lang.Object)>(r33);

     label28:
        goto label20;

     label29:
        if z12 == 0 goto label35;

        if z10 == 0 goto label32;

     label30:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        $r13 = virtualinvoke $r12.<com.android.server.pm.ApexManager: java.util.List getFactoryPackages()>();

        virtualinvoke r26.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r13);

     label31:
        goto label33;

     label32:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        $r9 = virtualinvoke $r8.<com.android.server.pm.ApexManager: java.util.List getActivePackages()>();

        virtualinvoke r26.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r9);

     label33:
        if z11 == 0 goto label35;

     label34:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ApexManager mApexManager>;

        $r11 = virtualinvoke $r10.<com.android.server.pm.ApexManager: java.util.List getInactivePackages()>();

        virtualinvoke r26.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r11);

     label35:
        r34 = new android.content.pm.ParceledListSlice;

        specialinvoke r34.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r26);

        exitmonitor r1;

     label36:
        return r34;

     label37:
        $r25 := @caughtexception;

     label38:
        exitmonitor r1;

     label39:
        throw $r25;

        catch java.lang.Throwable from label09 to label10 with label37;
        catch java.lang.Throwable from label10 to label11 with label37;
        catch java.lang.Throwable from label12 to label13 with label37;
        catch java.lang.Throwable from label14 to label15 with label37;
        catch java.lang.Throwable from label16 to label17 with label37;
        catch java.lang.Throwable from label19 to label20 with label37;
        catch java.lang.Throwable from label21 to label22 with label37;
        catch java.lang.Throwable from label23 to label24 with label37;
        catch java.lang.Throwable from label25 to label26 with label37;
        catch java.lang.Throwable from label27 to label28 with label37;
        catch java.lang.Throwable from label30 to label31 with label37;
        catch java.lang.Throwable from label32 to label33 with label37;
        catch java.lang.Throwable from label34 to label35 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
        catch java.lang.Throwable from label38 to label39 with label37;
    }

    public java.lang.String getInstallerPackageName(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r7;
        java.lang.String $r4, r9, r11, r12;
        com.android.server.pm.Settings $r5;
        android.util.ArrayMap $r6;
        boolean $z0;
        java.lang.Throwable $r8;
        com.android.server.pm.InstallSource r10;
        com.android.server.pm.PackageSetting r13;
        java.lang.IllegalArgumentException r14;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstallSource getInstallSourceLocked(java.lang.String,int)>(r9, i0);

     label02:
        if r10 == null goto label11;

     label03:
        r11 = r10.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

     label04:
        r12 = r11;

        if r11 == null goto label09;

     label05:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r13 = (com.android.server.pm.PackageSetting) $r7;

     label06:
        if r13 == null goto label08;

        r12 = r11;

     label07:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r13, i0, $i1);

        if $z0 == 0 goto label09;

     label08:
        r12 = null;

     label09:
        exitmonitor r1;

     label10:
        return r12;

     label11:
        r14 = new java.lang.IllegalArgumentException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r4 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw r14;

     label12:
        $r8 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public java.lang.String getInstantAppAndroidId(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        android.content.Context $r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        boolean $z0;
        com.android.server.pm.InstantAppRegistry $r4;
        java.lang.Throwable $r5;
        java.lang.String r6, r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_INSTANT_APPS", "getInstantAppAndroidId");

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, i0, 1, 0, "getInstantAppAndroidId");

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>(r6, i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        r7 = virtualinvoke $r4.<com.android.server.pm.InstantAppRegistry: java.lang.String getInstantAppAndroidIdLPw(java.lang.String,int)>(r6, i0);

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public byte[] getInstantAppCookie(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        boolean $z0;
        com.android.server.pm.InstantAppRegistry $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;
        byte[] r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, i0, 1, 0, "getInstantAppCookie");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r5, $i2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        r6 = virtualinvoke $r3.<com.android.server.pm.InstantAppRegistry: byte[] getInstantAppCookieLPw(java.lang.String,int)>(r5, i0);

        exitmonitor r1;

     label3:
        return r6;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.graphics.Bitmap getInstantAppIcon(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        boolean $z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        com.android.server.pm.InstantAppRegistry $r3;
        android.content.Context $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        android.graphics.Bitmap r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>($i1, i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_INSTANT_APPS", "getInstantAppIcon");

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i0, 1, 0, "getInstantAppIcon");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        r7 = virtualinvoke $r3.<com.android.server.pm.InstantAppRegistry: android.graphics.Bitmap getInstantAppIconLPw(java.lang.String,int)>(r6, i0);

        exitmonitor r1;

     label3:
        return r7;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public android.content.ComponentName getInstantAppInstallerComponent()
    {
        com.android.server.pm.PackageManagerService r0;
        int $i0;
        java.lang.String r1;
        android.content.ComponentName r2;
        android.content.pm.ActivityInfo r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        r2 = null;

        if r1 == null goto label1;

        return null;

     label1:
        r3 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo mInstantAppInstallerActivity>;

        if r3 != null goto label2;

        goto label3;

     label2:
        r2 = virtualinvoke r3.<android.content.pm.ActivityInfo: android.content.ComponentName getComponentName()>();

     label3:
        return r2;
    }

    public android.content.ComponentName getInstantAppResolverComponent()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r3;
        int $i0;
        java.lang.String $r2;
        java.lang.Throwable $r4;
        android.util.Pair r5;
        android.content.ComponentName r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r2 == null goto label01;

        return null;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.util.Pair getInstantAppResolverLPr()>();

     label03:
        if r5 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        $r3 = r5.<android.util.Pair: java.lang.Object first>;

        r6 = (android.content.ComponentName) $r3;

        exitmonitor r1;

     label07:
        return r6;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.content.ComponentName getInstantAppResolverSettingsComponent()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName mInstantAppResolverSettingsComponent>;

        return $r1;
    }

    public android.content.pm.ParceledListSlice getInstantApps(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1;
        android.content.pm.ParceledListSlice r2;
        boolean $z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        com.android.server.pm.InstantAppRegistry $r4;
        android.content.Context $r5;
        java.lang.Throwable $r6;
        java.util.List r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>($i1, i0);

        if $z0 != 0 goto label01;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_INSTANT_APPS", "getEphemeralApplications");

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i0, 1, 0, "getEphemeralApplications");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        r7 = virtualinvoke $r4.<com.android.server.pm.InstantAppRegistry: java.util.List getInstantAppsLPr(int)>(i0);

     label03:
        if r7 == null goto label06;

     label04:
        r2 = new android.content.pm.ParceledListSlice;

        specialinvoke r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r7);

        exitmonitor r1;

     label05:
        return r2;

     label06:
        exitmonitor r1;

     label07:
        return null;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1, $r5, $r7, $r9;
        com.android.server.pm.PackageSetting r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4, $r6, $r8;
        boolean $z0;
        android.content.pm.parsing.component.ParsedInstrumentation $r10;
        java.lang.Throwable $r11;
        android.content.ComponentName r12;
        java.lang.String r13;
        com.android.server.pm.parsing.pkg.AndroidPackage r14;
        android.content.pm.InstrumentationInfo r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r13 = virtualinvoke r12.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r2 = (com.android.server.pm.PackageSetting) $r5;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r7;

     label02:
        if r2 == null goto label07;

        if r14 != null goto label03;

        goto label07;

     label03:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r2, i1, r12, 0, i2);

        if $z0 == 0 goto label05;

        exitmonitor r1;

     label04:
        return null;

     label05:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mInstrumentation>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        $r10 = (android.content.pm.parsing.component.ParsedInstrumentation) $r9;

        r15 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.parsing.component.ParsedInstrumentation,com.android.server.pm.parsing.pkg.AndroidPackage,int,int,com.android.server.pm.PackageSetting)>($r10, r14, i0, i2, r2);

        exitmonitor r1;

     label06:
        return r15;

     label07:
        exitmonitor r1;

     label08:
        return null;

     label09:
        $r11 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public byte[] getIntentFilterVerificationBackup(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        com.android.internal.util.FastXmlSerializer r1;
        java.lang.SecurityException $r2;
        java.io.ByteArrayOutputStream $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Boolean $r6;
        com.android.server.pm.Settings $r8;
        byte[] $r10;
        java.lang.Throwable $r11;
        java.lang.Exception $r12;
        java.lang.Object r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label9;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>($r3, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "iv");

        r14 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label2:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.Settings: void writeAllDomainVerificationsLPr(org.xmlpull.v1.XmlSerializer,int)>(r1, i0);

        exitmonitor r14;

     label3:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "iv");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label4:
        $r10 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r14;

     label7:
        throw $r11;

     label8:
        $r12 := @caughtexception;

        return null;

     label9:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call getIntentFilterVerificationBackup()");

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Exception from label7 to label8 with label8;
    }

    public android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object r1, $r6;
        android.content.pm.ParceledListSlice r2, $r10, r13;
        java.lang.String $r3, r12;
        com.android.server.pm.Settings $r4, $r8;
        android.util.ArrayMap $r5;
        com.android.server.pm.PackageSetting $r7;
        boolean $z0;
        java.util.List $r9;
        java.lang.Throwable $r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r3 == null goto label1;

        $r10 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r10;

     label1:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        $r7 = (com.android.server.pm.PackageSetting) $r6;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r7, i0, $i1);

        if $z0 == 0 goto label4;

        r13 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        exitmonitor r1;

     label3:
        return r13;

     label4:
        r2 = new android.content.pm.ParceledListSlice;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = virtualinvoke $r8.<com.android.server.pm.Settings: java.util.List getIntentFilterVerificationsLPr(java.lang.String)>(r12);

        specialinvoke r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r9);

        exitmonitor r1;

     label5:
        return r2;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r11;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public int getIntentVerificationStatus(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.String $r1, $r9, r11;
        com.android.server.pm.Settings $r2, $r5;
        android.util.ArrayMap $r3;
        java.lang.Object $r4, r14;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r10;
        android.content.Context r12;
        com.android.server.pm.PackageSetting r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        if $i1 == i3 goto label01;

        r12 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getIntentVerificationStatus");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r12.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", $r9);

     label01:
        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r1 == null goto label02;

        return 0;

     label02:
        r14 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label03:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r15 = (com.android.server.pm.PackageSetting) $r4;

     label04:
        if r15 == null goto label09;

     label05:
        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r15, i0, $i2);

        if $z0 == 0 goto label07;

     label06:
        goto label09;

     label07:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i4 = virtualinvoke $r5.<com.android.server.pm.Settings: int getIntentFilterVerificationStatusLPr(java.lang.String,int)>(r11, i3);

        exitmonitor r14;

     label08:
        return i4;

     label09:
        exitmonitor r14;

     label10:
        return 0;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r14;

     label13:
        throw $r10;

        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.content.pm.KeySet getKeySetByAlias(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r4;
        com.android.server.pm.KeySetManagerService r2;
        android.util.ArrayMap $r3;
        java.lang.String $r7, $r10, $r11, $r14, $r17, r21, r22;
        int $i1, $i2;
        boolean $z0;
        com.android.server.pm.Settings $r18;
        com.android.server.pm.KeySetHandle $r19;
        java.lang.Throwable $r20;
        com.android.server.pm.parsing.pkg.AndroidPackage r23;
        com.android.server.pm.PackageSetting r24;
        android.content.pm.KeySet r25;
        java.lang.StringBuilder r26, r28, r29, r31;
        java.lang.IllegalArgumentException r27, r30;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r21 := @parameter0: java.lang.String;

        r22 := @parameter1: java.lang.String;

        if r21 == null goto label12;

        if r22 != null goto label01;

        goto label12;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r21);

        r23 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label03:
        if r23 == null goto label08;

     label04:
        $r11 = interfaceinvoke r23.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r24 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r11);

     label05:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r24, $i1, $i2);

        if $z0 != 0 goto label07;

        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r2 = $r18.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        r25 = new android.content.pm.KeySet;

        $r19 = virtualinvoke r2.<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle getKeySetByAliasAndPackageNameLPr(java.lang.String,java.lang.String)>(r21, r22);

        specialinvoke r25.<android.content.pm.KeySet: void <init>(android.os.IBinder)>($r19);

        exitmonitor r1;

     label06:
        return r25;

     label07:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for filtered package: ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r14 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r14);

        r27 = new java.lang.IllegalArgumentException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r17 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw r27;

     label08:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r7 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r7);

        r30 = new java.lang.IllegalArgumentException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r10 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r30;

     label09:
        $r20 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r20;

     label12:
        return null;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2, $r3;
        int i0, i1, $i2;
        java.util.List $r4;
        android.content.pm.ResolveInfo $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i2);

        if $r3 == null goto label1;

        return null;

     label1:
        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>(r1, r2, i0, i1);

        $r5 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(r1, r2, i0, $r4, 0, 0, 0, 0, i1);

        return $r5;
    }

    public java.util.List getMimeGroup(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.Object $r5;
        com.android.server.pm.PackageSetting $r6;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r6 = (com.android.server.pm.PackageSetting) $r5;

        $r7 = virtualinvoke $r6.<com.android.server.pm.PackageSetting: java.util.List getMimeGroup(java.lang.String)>(r2);

        return $r7;
    }

    public android.content.pm.ModuleInfo getModuleInfo(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        com.android.server.pm.ModuleInfoProvider $r2;
        android.content.pm.ModuleInfo $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ModuleInfoProvider mModuleInfoProvider>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.ModuleInfoProvider: android.content.pm.ModuleInfo getModuleInfo(java.lang.String,int)>(r1, i0);

        return $r3;
    }

    public int getMoveStatus(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        android.content.Context $r1;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r2;
        android.util.SparseIntArray $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        $r3 = staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: android.util.SparseIntArray access$5600(com.android.server.pm.PackageManagerService$MoveCallbacks)>($r2);

        $i1 = virtualinvoke $r3.<android.util.SparseIntArray: int get(int)>(i0);

        return $i1;
    }

    public java.lang.String getNameForUid(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, i3, i4;
        java.lang.Object r1;
        java.lang.StringBuilder r2;
        java.lang.String $r3, $r5, r12, r14;
        com.android.server.pm.Settings $r4;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r9;
        com.android.server.pm.SettingBase r10;
        com.android.server.pm.SharedUserSetting r11;
        com.android.server.pm.PackageSetting r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i3 := @parameter0: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r3 == null goto label01;

        return null;

     label01:
        i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i3);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r10 = virtualinvoke $r4.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i4);

        $z0 = r10 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label04;

        r11 = (com.android.server.pm.SharedUserSetting) r10;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = r11.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i2 = r11.<com.android.server.pm.SharedUserSetting: int userId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label03:
        return r12;

     label04:
        $z1 = r10 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label09;

        r13 = (com.android.server.pm.PackageSetting) r10;

     label05:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r13, i0, $i1);

        if $z2 == 0 goto label07;

        exitmonitor r1;

     label06:
        return null;

     label07:
        r14 = r13.<com.android.server.pm.PackageSetting: java.lang.String name>;

        exitmonitor r1;

     label08:
        return r14;

     label09:
        exitmonitor r1;

     label10:
        return null;

     label11:
        $r9 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public java.lang.String[] getNamesForUids(int[])
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.String[] r1;
        java.lang.Object r2;
        com.android.server.pm.SharedUserSetting r3;
        java.lang.String $r4, $r6, $r8, $r10;
        com.android.server.pm.Settings $r5;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r11;
        int[] r12;
        com.android.server.pm.SettingBase r13;
        java.lang.StringBuilder r14;
        com.android.server.pm.PackageSetting r15;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: int[];

        if r12 == null goto label19;

        $i2 = lengthof r12;

        if $i2 != 0 goto label01;

        goto label19;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r4 == null goto label02;

        return null;

     label02:
        $i3 = lengthof r12;

        r1 = newarray (java.lang.String)[$i3];

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label03:
        $i4 = lengthof r12;

        i7 = $i4 - 1;

     label04:
        if i7 < 0 goto label14;

     label05:
        $i5 = r12[i7];

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i5);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r13 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i1);

        $z0 = r13 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label07;

        r3 = (com.android.server.pm.SharedUserSetting) r13;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shared:");

        $r8 = r3.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r1[i7] = $r10;

     label06:
        goto label13;

     label07:
        $z1 = r13 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label12;

        r15 = (com.android.server.pm.PackageSetting) r13;

     label08:
        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r15, i0, $i6);

        if $z2 == 0 goto label10;

     label09:
        r1[i7] = null;

        goto label11;

     label10:
        $r6 = r15.<com.android.server.pm.PackageSetting: java.lang.String name>;

        r1[i7] = $r6;

     label11:
        goto label13;

     label12:
        r1[i7] = null;

     label13:
        i7 = i7 + -1;

        goto label04;

     label14:
        exitmonitor r2;

     label15:
        return r1;

     label16:
        $r11 := @caughtexception;

     label17:
        exitmonitor r2;

     label18:
        throw $r11;

     label19:
        return null;

        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public android.util.ArraySet getOptimizablePackages()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r7;
        java.util.Iterator r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        android.util.ArraySet $r4;
        android.util.ArrayMap $r5;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r7;

        $z1 = staticinvoke <com.android.server.pm.PackageDexOptimizer: boolean canOptimizePackage(com.android.server.pm.parsing.pkg.AndroidPackage)>(r3);

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r3.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>($r8);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return $r4;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.android.server.pm.CompilerStats$PackageStats getOrCreateCompilerPackageStats(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1;
        java.lang.String $r2;
        com.android.server.pm.CompilerStats$PackageStats $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = interfaceinvoke r1.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats$PackageStats getOrCreateCompilerPackageStats(java.lang.String)>($r2);

        return $r3;
    }

    public com.android.server.pm.CompilerStats$PackageStats getOrCreateCompilerPackageStats(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        com.android.server.pm.CompilerStats $r2;
        com.android.server.pm.CompilerStats$PackageStats $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.CompilerStats: com.android.server.pm.CompilerStats$PackageStats getOrCreatePackageStats(java.lang.String)>(r1);

        return $r3;
    }

    public int[] getPackageGids(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, i3, i4;
        java.lang.Object r1, $r6, $r9;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        android.util.ArrayMap $r5, $r8;
        com.android.server.pm.Settings $r7;
        com.android.server.pm.permission.PermissionsState $r10, $r12;
        java.lang.String $r11, r14;
        java.lang.Throwable $r13;
        com.android.server.pm.PackageSetting r15, r17;
        int[] r16, r18;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r14 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i3, i0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "getPackageGids");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r6;

     label03:
        if r2 == null goto label08;

     label04:
        $z3 = staticinvoke <com.android.server.pm.parsing.pkg.AndroidPackageUtils: boolean isMatchForSystemOnly(com.android.server.pm.parsing.pkg.AndroidPackage,int)>(r2, i4);

        if $z3 == 0 goto label08;

        $r11 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r15 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r11);

        $z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r15, i1, i0);

        if $z4 == 0 goto label06;

        exitmonitor r1;

     label05:
        return null;

     label06:
        $r12 = virtualinvoke r15.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        r16 = virtualinvoke $r12.<com.android.server.pm.permission.PermissionsState: int[] computeGids(int)>(i0);

        exitmonitor r1;

     label07:
        return r16;

     label08:
        $i2 = 4202496 & i4;

        if $i2 == 0 goto label13;

     label09:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r14);

        r17 = (com.android.server.pm.PackageSetting) $r9;

     label10:
        if r17 == null goto label13;

     label11:
        $z1 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean isMatch(int)>(i4);

        if $z1 == 0 goto label13;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r17, i1, i0);

        if $z2 != 0 goto label13;

        $r10 = virtualinvoke r17.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        r18 = virtualinvoke $r10.<com.android.server.pm.permission.PermissionsState: int[] computeGids(int)>(i0);

        exitmonitor r1;

     label12:
        return r18;

     label13:
        exitmonitor r1;

     label14:
        return null;

     label15:
        $r13 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r13;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2;
        android.content.pm.PackageInfo $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoInternal(java.lang.String,long,int,int,int)>(r1, -1L, i0, $i2, i1);

        return $r2;
    }

    public android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.VersionedPackage r1;
        int i0, i1, $i3;
        java.lang.String $r2;
        long $l2;
        android.content.pm.PackageInfo $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.VersionedPackage;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r1.<android.content.pm.VersionedPackage: java.lang.String getPackageName()>();

        $l2 = virtualinvoke r1.<android.content.pm.VersionedPackage: long getLongVersionCode()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoInternal(java.lang.String,long,int,int,int)>($r2, $l2, i0, $i3, i1);

        return $r3;
    }

    public android.content.pm.IPackageInstaller getPackageInstaller()
    {
        com.android.server.pm.PackageManagerService r0;
        int $i0;
        java.lang.String $r1;
        com.android.server.pm.PackageInstallerService $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r1 == null goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        return $r2;
    }

    java.lang.String getPackageInstallerPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredInstallerPackage>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int $i0;
        com.android.server.pm.PackageSetting $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>(r1, $i0);

        return $r2;
    }

    public void getPackageSizeInfo(java.lang.String, int, android.content.pm.IPackageStatsObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        android.content.pm.IPackageStatsObserver r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.pm.IPackageStatsObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Shame on you for calling the hidden API getPackageSizeInfo(). Shame!");

        throw $r3;
    }

    public int getPackageUid(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, $i2, i3, i4;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label1;

        return -1;

     label1:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i3, i0);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "getPackageUid");

        $i2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUidInternal(java.lang.String,int,int,int)>(r1, i4, i0, i1);

        return $i2;
    }

    java.util.Collection getPackages()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.util.Collection $r3;
        java.lang.Throwable $r4;
        java.util.ArrayList r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r5 = new java.util.ArrayList;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        specialinvoke r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String[] getPackagesForUid(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUidInternal(int,int)>(i0, $i1);

        return $r1;
    }

    public android.content.pm.ParceledListSlice getPackagesHoldingPermissions(java.lang.String[], int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, i5;
        java.util.ArrayList r1;
        boolean[] r2;
        com.android.server.pm.PackageSetting r3, $r15;
        com.android.server.pm.UserManagerService $r4;
        boolean $z0, $z1, $z2, z3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        android.util.ArrayMap $r6, $r12;
        java.util.Collection $r7, $r13;
        java.lang.Object $r8, $r14, r20, r21, r23, r25, r28;
        com.android.server.pm.parsing.pkg.AndroidPackage $r9;
        java.lang.String $r10;
        com.android.server.pm.Settings $r11;
        android.content.pm.ParceledListSlice $r16, r26;
        java.lang.Throwable $r17, $r18, r27;
        java.lang.String[] r19;
        java.util.Iterator r22, r24;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r19 := @parameter0: java.lang.String[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        $r16 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r16;

     label01:
        i1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i5, i0);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i0, 1, 0, "get packages holding permissions");

        $i3 = 4202496 & i1;

        if $i3 == 0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        r20 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r20;

        r21 = r20;

     label04:
        r1 = new java.util.ArrayList;

     label05:
        r21 = r20;

     label06:
        specialinvoke r1.<java.util.ArrayList: void <init>()>();

     label07:
        r21 = r20;

     label08:
        $i4 = lengthof r19;

        r2 = newarray (boolean)[$i4];

     label09:
        if z3 == 0 goto label17;

        r21 = r20;

     label10:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r12 = $r11.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.util.Collection values()>();

        r22 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        r21 = r20;

     label12:
        $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

     label13:
        r21 = r20;

     label14:
        $r14 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.android.server.pm.PackageSetting) $r14;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void addPackageHoldingPermissions(java.util.ArrayList,com.android.server.pm.PackageSetting,java.lang.String[],boolean[],int,int)>(r1, $r15, r19, r2, i1, i0);

     label15:
        goto label11;

     label16:
        r23 = r20;

        goto label28;

     label17:
        r21 = r20;

     label18:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        r24 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label19:
        r21 = r20;

     label20:
        $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label27;

     label21:
        r21 = r20;

     label22:
        $r8 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r8;

        $r10 = interfaceinvoke $r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r10);

     label23:
        if r3 == null goto label26;

        r25 = r20;

     label24:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void addPackageHoldingPermissions(java.util.ArrayList,com.android.server.pm.PackageSetting,java.lang.String[],boolean[],int,int)>(r1, r3, r19, r2, i1, i0);

     label25:
        goto label26;

     label26:
        goto label19;

     label27:
        r23 = r20;

     label28:
        r25 = r23;

     label29:
        r26 = new android.content.pm.ParceledListSlice;

     label30:
        r25 = r23;

     label31:
        specialinvoke r26.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r1);

     label32:
        r25 = r23;

     label33:
        exitmonitor r23;

     label34:
        return r26;

     label35:
        $r18 := @caughtexception;

        r27 = $r18;

        r28 = r21;

     label36:
        r25 = r28;

     label37:
        exitmonitor r28;

     label38:
        throw r27;

     label39:
        $r17 := @caughtexception;

        r27 = $r17;

        r28 = r25;

        goto label36;

        catch java.lang.Throwable from label04 to label05 with label35;
        catch java.lang.Throwable from label06 to label07 with label35;
        catch java.lang.Throwable from label08 to label09 with label35;
        catch java.lang.Throwable from label10 to label11 with label35;
        catch java.lang.Throwable from label12 to label13 with label35;
        catch java.lang.Throwable from label14 to label15 with label35;
        catch java.lang.Throwable from label18 to label19 with label35;
        catch java.lang.Throwable from label20 to label21 with label35;
        catch java.lang.Throwable from label22 to label23 with label35;
        catch java.lang.Throwable from label24 to label25 with label39;
        catch java.lang.Throwable from label29 to label30 with label39;
        catch java.lang.Throwable from label31 to label32 with label39;
        catch java.lang.Throwable from label33 to label34 with label39;
        catch java.lang.Throwable from label37 to label38 with label39;
    }

    public java.lang.String getPermissionControllerPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredPermissionControllerPackage>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getPermissionGidsLocked(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r1;
        com.android.server.pm.permission.PermissionSettings $r2;
        int[] $r3;
        java.lang.String r4;
        com.android.server.pm.permission.BasePermission r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r2 = virtualinvoke $r1.<com.android.server.pm.permission.PermissionManagerServiceInternal: com.android.server.pm.permission.PermissionSettings getPermissionSettings()>();

        r5 = virtualinvoke $r2.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>(r4);

        if r5 == null goto label1;

        $r3 = virtualinvoke r5.<com.android.server.pm.permission.BasePermission: int[] computeGids(int)>(i0);

        return $r3;

     label1:
        return null;
    }

    public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;
        android.content.pm.PermissionGroupInfo r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        r4 = interfaceinvoke $r1.<android.permission.IPermissionManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>(r3, i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.pm.ParceledListSlice getPersistentApplications(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.String $r1;
        android.content.pm.ParceledListSlice $r2, $r4;
        java.util.List $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i1);

        if $r1 == null goto label1;

        $r4 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r4;

     label1:
        $r2 = new android.content.pm.ParceledListSlice;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplicationsInternal(int)>(i0);

        specialinvoke $r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r3);

        return $r2;
    }

    public int getPreferredActivities(java.util.List, java.util.List, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1, r18;
        java.lang.String r2, $r6, $r15;
        int i0, $i1;
        java.lang.Object r3, $r9, $r10;
        java.util.Iterator r4;
        com.android.server.pm.PreferredActivity r5;
        com.android.server.pm.Settings $r7;
        android.util.SparseArray $r8;
        boolean $z0, $z3, $z4;
        com.android.server.pm.PreferredComponent $r11, $r13, $r16;
        android.content.ComponentName $r12, $r14;
        java.lang.Throwable $r17;
        com.android.server.pm.PreferredIntentResolver r19;
        android.content.IntentFilter r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r18 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i1);

        if $r6 == null goto label01;

        return 0;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label02:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r19 = (com.android.server.pm.PreferredIntentResolver) $r9;

     label03:
        if r19 == null goto label13;

     label04:
        r4 = virtualinvoke r19.<com.android.server.pm.PreferredIntentResolver: java.util.Iterator filterIterator()>();

     label05:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.pm.PreferredActivity) $r10;

     label06:
        if r2 == null goto label08;

     label07:
        $r13 = r5.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r14 = $r13.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $r15 = virtualinvoke $r14.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label12;

        $r16 = r5.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z4 = $r16.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z4 == 0 goto label12;

     label08:
        if r18 == null goto label10;

     label09:
        r20 = new android.content.IntentFilter;

        specialinvoke r20.<android.content.IntentFilter: void <init>(android.content.IntentFilter)>(r5);

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>(r20);

     label10:
        if r1 == null goto label12;

     label11:
        $r11 = r5.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r12 = $r11.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

     label12:
        goto label05;

     label13:
        exitmonitor r3;

     label14:
        return 0;

     label15:
        $r17 := @caughtexception;

     label16:
        exitmonitor r3;

     label17:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public byte[] getPreferredActivityBackup(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        com.android.internal.util.FastXmlSerializer r1;
        java.lang.SecurityException $r2;
        java.io.ByteArrayOutputStream $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Boolean $r6;
        com.android.server.pm.Settings $r8;
        byte[] $r10;
        java.lang.Throwable $r11;
        java.lang.Exception $r12;
        java.lang.Object r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label9;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        r1 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r1.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>($r3, $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "pa");

        r14 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r14;

     label2:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.Settings: void writePreferredActivitiesLPr(org.xmlpull.v1.XmlSerializer,int,boolean)>(r1, i0, 1);

        exitmonitor r14;

     label3:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "pa");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void flush()>();

     label4:
        $r10 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r10;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r14;

     label7:
        throw $r11;

     label8:
        $r12 := @caughtexception;

        return null;

     label9:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call getPreferredActivityBackup()");

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Exception from label7 to label8 with label8;
    }

    public int getPrivateFlagsForUid(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, i2, i3, i4, i5;
        java.lang.Object r1;
        java.lang.String $r2;
        com.android.server.pm.Settings $r3;
        boolean $z0, $z1, $z2;
        com.android.server.pm.SharedUserSetting $r4;
        java.lang.Throwable $r5;
        com.android.server.pm.SettingBase r6;
        com.android.server.pm.PackageSetting r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i2 := @parameter0: int;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r2 == null goto label01;

        return 0;

     label01:
        i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i2);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r6 = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i3);

        $z0 = r6 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label04;

        $r4 = (com.android.server.pm.SharedUserSetting) r6;

        i4 = $r4.<com.android.server.pm.SharedUserSetting: int pkgPrivateFlags>;

        exitmonitor r1;

     label03:
        return i4;

     label04:
        $z1 = r6 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label09;

        r7 = (com.android.server.pm.PackageSetting) r6;

     label05:
        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r7, i0, $i1);

        if $z2 == 0 goto label07;

        exitmonitor r1;

     label06:
        return 0;

     label07:
        i5 = r7.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        exitmonitor r1;

     label08:
        return i5;

     label09:
        exitmonitor r1;

     label10:
        return 0;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r5;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.util.ArrayMap getProcessesForUidLocked(int)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.SettingBase r1;
        com.android.server.pm.Settings $r2;
        boolean $z0, $z1;
        com.android.server.pm.PackageSetting $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage $r4;
        java.util.Map $r5;
        android.util.ArrayMap $r6, $r8, $r9;
        com.android.server.pm.SharedUserSetting $r7;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r1 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i1);

        $z0 = r1 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label1;

        $r7 = (com.android.server.pm.SharedUserSetting) r1;

        $r8 = $r7.<com.android.server.pm.SharedUserSetting: android.util.ArrayMap processes>;

        $r9 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.util.ArrayMap generateProcessInfo(java.util.Map,int)>($r8, 0);

        return $r9;

     label1:
        $z1 = r1 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label2;

        $r3 = (com.android.server.pm.PackageSetting) r1;

        $r4 = $r3.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r5 = interfaceinvoke $r4.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.Map getProcesses()>();

        $r6 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.util.ArrayMap generateProcessInfo(java.util.Map,int)>($r5, 0);

        return $r6;

     label2:
        return null;
    }

    public android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3;
        android.content.pm.parsing.component.ParsedProvider r1;
        com.android.server.pm.PackageSetting r2;
        boolean z0, $z1, $z2;
        android.content.pm.PackageUserState r3;
        android.content.pm.ApplicationInfo r4;
        com.android.server.pm.UserManagerService $r5;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        com.android.server.pm.ComponentResolver $r7;
        android.util.ArrayMap $r8, $r13;
        java.lang.String $r9, $r14;
        java.lang.Object $r10, $r15, r20, r22, r25;
        com.android.server.pm.Settings $r11, $r12;
        java.lang.Throwable $r16, $r17, $r18, r23;
        android.content.ComponentName r19;
        com.android.server.pm.parsing.pkg.AndroidPackage r24;
        android.content.pm.ProviderInfo r26;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r19 := @parameter0: android.content.ComponentName;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z1 != 0 goto label01;

        return null;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i2, i0);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "get provider info");

        r20 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r20;

     label02:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r1 = virtualinvoke $r7.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedProvider getProvider(android.content.ComponentName)>(r19);

     label03:
        if r1 != null goto label07;

     label04:
        exitmonitor r20;

     label05:
        return null;

     label06:
        $r16 := @caughtexception;

        r22 = r20;

        r23 = $r16;

        goto label32;

     label07:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke r1.<android.content.pm.parsing.component.ParsedProvider: java.lang.String getPackageName()>();

        $r10 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r9);

        r24 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

     label08:
        if r24 != null goto label11;

     label09:
        exitmonitor r20;

     label10:
        return null;

     label11:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z2 = virtualinvoke $r11.<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedMainComponent,int,int)>(r24, r1, i3, i0);

        if $z2 == 0 goto label28;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r14 = virtualinvoke r19.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r15 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r14);

        r2 = (com.android.server.pm.PackageSetting) $r15;

     label12:
        if r2 != null goto label15;

     label13:
        exitmonitor r20;

     label14:
        return null;

     label15:
        z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r2, i1, r19, 4, i0);

     label16:
        if z0 == 0 goto label19;

     label17:
        exitmonitor r20;

     label18:
        return null;

     label19:
        r3 = virtualinvoke r2.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        r4 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ApplicationInfo generateApplicationInfo(com.android.server.pm.parsing.pkg.AndroidPackage,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r24, i3, r3, i0, r2);

     label20:
        if r4 != null goto label23;

     label21:
        exitmonitor r20;

     label22:
        return null;

     label23:
        r25 = r20;

     label24:
        r26 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ProviderInfo generateProviderInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedProvider,int,android.content.pm.PackageUserState,android.content.pm.ApplicationInfo,int,com.android.server.pm.PackageSetting)>(r24, r1, i3, r3, r4, i0, r2);

     label25:
        r25 = r20;

     label26:
        exitmonitor r20;

     label27:
        return r26;

     label28:
        r25 = r20;

     label29:
        exitmonitor r20;

     label30:
        return null;

     label31:
        $r18 := @caughtexception;

        r22 = r20;

        r23 = $r18;

     label32:
        r25 = r22;

     label33:
        exitmonitor r22;

     label34:
        throw r23;

     label35:
        $r17 := @caughtexception;

        r23 = $r17;

        r22 = r25;

        goto label32;

        catch java.lang.Throwable from label02 to label03 with label31;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label31;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label11 to label12 with label31;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label15 to label16 with label31;
        catch java.lang.Throwable from label17 to label18 with label06;
        catch java.lang.Throwable from label19 to label20 with label31;
        catch java.lang.Throwable from label21 to label22 with label06;
        catch java.lang.Throwable from label24 to label25 with label35;
        catch java.lang.Throwable from label26 to label27 with label35;
        catch java.lang.Throwable from label29 to label30 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
    }

    public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3;
        java.lang.Object r1, $r10, $r15;
        android.content.pm.parsing.component.ParsedActivity r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        com.android.server.pm.PackageSetting r4;
        com.android.server.pm.UserManagerService $r5;
        boolean $z0, $z1, $z2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        com.android.server.pm.ComponentResolver $r7;
        android.util.ArrayMap $r8, $r13;
        java.lang.String $r9, $r14;
        com.android.server.pm.Settings $r11, $r12;
        android.content.pm.PackageUserState $r16;
        java.lang.Throwable $r17;
        android.content.ComponentName r18;
        android.content.pm.ActivityInfo r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r18 := @parameter0: android.content.ComponentName;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i2, i0);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "get receiver info");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r2 = virtualinvoke $r7.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedActivity getReceiver(android.content.ComponentName)>(r18);

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedActivity: java.lang.String getPackageName()>();

        $r10 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r9);

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

     label07:
        if r3 != null goto label10;

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r11.<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedMainComponent,int,int)>(r3, r2, i3, i0);

        if $z1 == 0 goto label18;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r14 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r15 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r14);

        r4 = (com.android.server.pm.PackageSetting) $r15;

     label11:
        if r4 != null goto label14;

     label12:
        exitmonitor r1;

     label13:
        return null;

     label14:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r4, i1, r18, 2, i0);

        if $z2 == 0 goto label16;

        exitmonitor r1;

     label15:
        return null;

     label16:
        $r16 = virtualinvoke r4.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        r19 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ActivityInfo generateActivityInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedActivity,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r3, r2, i3, $r16, i0, r4);

        exitmonitor r1;

     label17:
        return r19;

     label18:
        exitmonitor r1;

     label19:
        return null;

     label20:
        $r17 := @caughtexception;

     label21:
        exitmonitor r1;

     label22:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label20;
        catch java.lang.Throwable from label04 to label05 with label20;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label12 to label13 with label20;
        catch java.lang.Throwable from label14 to label15 with label20;
        catch java.lang.Throwable from label16 to label17 with label20;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public int getRuntimePermissionsVersion(int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        com.android.server.pm.Settings $r3;
        java.lang.Throwable $r4;
        int i1, i2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i1 := @parameter0: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i1);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enforceAdjustRuntimePermissionsPolicyOrUpgradeRuntimePermissions(java.lang.String)>("getRuntimePermissionVersion");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        i2 = virtualinvoke $r3.<com.android.server.pm.Settings: int getDefaultRuntimePermissionsVersionLPr(int)>(i1);

        exitmonitor r1;

     label2:
        return i2;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3;
        java.lang.Object r1, $r10, $r15;
        android.content.pm.parsing.component.ParsedService r2;
        com.android.server.pm.parsing.pkg.AndroidPackage r3;
        com.android.server.pm.PackageSetting r4;
        com.android.server.pm.UserManagerService $r5;
        boolean $z0, $z1, $z2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        com.android.server.pm.ComponentResolver $r7;
        android.util.ArrayMap $r8, $r13;
        java.lang.String $r9, $r14;
        com.android.server.pm.Settings $r11, $r12;
        android.content.pm.PackageUserState $r16;
        java.lang.Throwable $r17;
        android.content.ComponentName r18;
        android.content.pm.ServiceInfo r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r18 := @parameter0: android.content.ComponentName;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i2, i0);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserOrProfilePermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "get service info");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r2 = virtualinvoke $r7.<com.android.server.pm.ComponentResolver: android.content.pm.parsing.component.ParsedService getService(android.content.ComponentName)>(r18);

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return null;

     label06:
        $r8 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke r2.<android.content.pm.parsing.component.ParsedService: java.lang.String getPackageName()>();

        $r10 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r9);

        r3 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r10;

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r11.<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedMainComponent,int,int)>(r3, r2, i3, i0);

        if $z1 == 0 goto label14;

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r13 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r14 = virtualinvoke r18.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r15 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r14);

        r4 = (com.android.server.pm.PackageSetting) $r15;

     label07:
        if r4 != null goto label10;

     label08:
        exitmonitor r1;

     label09:
        return null;

     label10:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r4, i1, r18, 3, i0);

        if $z2 == 0 goto label12;

        exitmonitor r1;

     label11:
        return null;

     label12:
        $r16 = virtualinvoke r4.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

        r19 = staticinvoke <com.android.server.pm.parsing.PackageInfoUtils: android.content.pm.ServiceInfo generateServiceInfo(com.android.server.pm.parsing.pkg.AndroidPackage,android.content.pm.parsing.component.ParsedService,int,android.content.pm.PackageUserState,int,com.android.server.pm.PackageSetting)>(r3, r2, i3, $r16, i0, r4);

        exitmonitor r1;

     label13:
        return r19;

     label14:
        exitmonitor r1;

     label15:
        return null;

     label16:
        $r17 := @caughtexception;

     label17:
        exitmonitor r1;

     label18:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public java.lang.String getServicesSystemSharedLibraryPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mServicesExtensionPackageName>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getSetupWizardPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        int $i0;
        java.lang.SecurityException $r1;
        android.content.pm.PackageManagerInternal $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 != 1000 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManagerInternal: java.lang.String getSetupWizardPackageName()>();

        return $r3;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("Non-system caller");

        throw $r1;
    }

    public android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        java.lang.Object r1, $r13, $r14;
        android.util.LongSparseArray r2;
        java.lang.String r3, r4, r6, $r10, r24;
        java.util.List r5, r8, $r16, $r18;
        android.content.pm.VersionedPackage r7, $r15;
        com.android.server.pm.UserManagerService $r9;
        boolean $z0, $z2, $z3, z4;
        android.content.Context $r11, $r19, $r20, $r21;
        android.util.ArrayMap $r12, $r26;
        java.util.ArrayList $r17, r25, r30, r31;
        java.lang.Throwable $r22, $r23;
        android.content.pm.SharedLibraryInfo r27, r29;
        long l15, l16;
        android.content.pm.PackageInfo r28;
        android.content.pm.ParceledListSlice r33, r34;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r24 := @parameter0: java.lang.String;

        i11 := @parameter1: int;

        i0 := @parameter2: int;

        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r9.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z0 != 0 goto label01;

        return null;

     label01:
        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int,java.lang.String)>(i0, "userId must be >= 0");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i6);

        if $r10 == null goto label02;

        return null;

     label02:
        i1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForPackage(int,int)>(i11, i0);

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        i12 = virtualinvoke $r11.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        z4 = 0;

        if i12 == 0 goto label04;

        $r19 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i8 = virtualinvoke $r19.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DELETE_PACKAGES");

        if $i8 == 0 goto label03;

        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canRequestPackageInstallsInternal(java.lang.String,int,int,boolean)>(r24, 67108864, i0, 0);

        if $z3 != 0 goto label04;

        $r20 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i9 = virtualinvoke $r20.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.REQUEST_DELETE_PACKAGES");

        if $i9 == 0 goto label04;

        $r21 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i10 = virtualinvoke $r21.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.ACCESS_SHARED_LIBRARIES");

        if $i10 != 0 goto label05;

        goto label04;

     label03:
        goto label04;

     label04:
        z4 = 1;

     label05:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        r25 = null;

     label06:
        $r26 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        i2 = virtualinvoke $r26.<android.util.ArrayMap: int size()>();

     label07:
        i13 = 0;

     label08:
        if i13 >= i2 goto label37;

     label09:
        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i13);

        r2 = (android.util.LongSparseArray) $r13;

     label10:
        if r2 != null goto label11;

        goto label36;

     label11:
        i3 = virtualinvoke r2.<android.util.LongSparseArray: int size()>();

     label12:
        i14 = 0;

     label13:
        if i14 >= i3 goto label36;

     label14:
        $r14 = virtualinvoke r2.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i14);

        r27 = (android.content.pm.SharedLibraryInfo) $r14;

     label15:
        if z4 != 0 goto label18;

     label16:
        $z2 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: boolean isStatic()>();

        if $z2 == 0 goto label18;

     label17:
        goto label36;

     label18:
        l15 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label19:
        $r15 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        $i7 = i1 | 67108864;

        r28 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage,int,int)>($r15, $i7, i0);

     label20:
        if r28 != null goto label23;

     label21:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

     label22:
        goto label32;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

     label24:
        r29 = new android.content.pm.SharedLibraryInfo;

        r3 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: java.lang.String getPath()>();

        r4 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r5 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: java.util.List getAllCodePaths()>();

        r6 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        l16 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: long getLongVersion()>();

        i4 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: int getType()>();

        r7 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: android.content.pm.VersionedPackage getDeclaringPackage()>();

        r8 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List getPackagesUsingSharedLibraryLPr(android.content.pm.SharedLibraryInfo,int,int)>(r27, i1, i0);

        $r16 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        if $r16 != null goto label26;

     label25:
        r30 = null;

        goto label27;

     label26:
        $r17 = new java.util.ArrayList;

        $r18 = virtualinvoke r27.<android.content.pm.SharedLibraryInfo: java.util.List getDependencies()>();

        specialinvoke $r17.<java.util.ArrayList: void <init>(java.util.Collection)>($r18);

        r30 = $r17;

     label27:
        specialinvoke r29.<android.content.pm.SharedLibraryInfo: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String,long,int,android.content.pm.VersionedPackage,java.util.List,java.util.List)>(r3, r4, r5, r6, l16, i4, r7, r8, r30);

     label28:
        r31 = r25;

        if r25 != null goto label30;

     label29:
        r31 = new java.util.ArrayList;

        specialinvoke r31.<java.util.ArrayList: void <init>()>();

     label30:
        interfaceinvoke r31.<java.util.List: boolean add(java.lang.Object)>(r29);

     label31:
        r25 = r31;

     label32:
        i14 = i14 + 1;

        goto label13;

     label33:
        $r22 := @caughtexception;

     label34:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l15);

     label35:
        throw $r22;

     label36:
        i13 = i13 + 1;

        goto label08;

     label37:
        if r25 == null goto label40;

     label38:
        r33 = new android.content.pm.ParceledListSlice;

        specialinvoke r33.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r25);

     label39:
        r34 = r33;

        goto label41;

     label40:
        r34 = null;

     label41:
        exitmonitor r1;

     label42:
        return r34;

     label43:
        $r23 := @caughtexception;

     label44:
        exitmonitor r1;

     label45:
        throw $r23;

        catch java.lang.Throwable from label06 to label07 with label43;
        catch java.lang.Throwable from label09 to label10 with label43;
        catch java.lang.Throwable from label11 to label12 with label43;
        catch java.lang.Throwable from label14 to label15 with label43;
        catch java.lang.Throwable from label16 to label17 with label43;
        catch java.lang.Throwable from label18 to label19 with label43;
        catch java.lang.Throwable from label19 to label20 with label33;
        catch java.lang.Throwable from label21 to label22 with label43;
        catch java.lang.Throwable from label23 to label24 with label43;
        catch java.lang.Throwable from label24 to label25 with label43;
        catch java.lang.Throwable from label26 to label27 with label43;
        catch java.lang.Throwable from label27 to label28 with label43;
        catch java.lang.Throwable from label29 to label30 with label43;
        catch java.lang.Throwable from label30 to label31 with label43;
        catch java.lang.Throwable from label34 to label35 with label43;
        catch java.lang.Throwable from label35 to label36 with label43;
        catch java.lang.Throwable from label38 to label39 with label43;
        catch java.lang.Throwable from label41 to label42 with label43;
        catch java.lang.Throwable from label44 to label45 with label43;
    }

    public java.lang.String getSharedSystemSharedLibraryPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mSharedSystemSharedLibraryPackageName>;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.content.pm.KeySet getSigningKeySet(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r3;
        int i0, i1, $i4;
        android.util.ArrayMap $r2;
        java.lang.String $r6, $r9, $r10, $r16, $r19, r23;
        com.android.server.pm.PackageSetting $r11;
        boolean $z0;
        com.android.server.pm.Settings $r20;
        com.android.server.pm.KeySetHandle $r21;
        java.lang.Throwable $r22;
        com.android.server.pm.parsing.pkg.AndroidPackage r24;
        java.lang.SecurityException r25;
        com.android.server.pm.KeySetManagerService r26;
        android.content.pm.KeySet r27;
        java.lang.StringBuilder r28, r30, r31, r33;
        java.lang.IllegalArgumentException r29, r32;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r23 := @parameter0: java.lang.String;

        if r23 != null goto label01;

        return null;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r23);

        r24 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

     label03:
        if r24 == null goto label10;

     label04:
        $r10 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r11 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r10);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r11, i0, i1);

        if $z0 != 0 goto label09;

        $i4 = interfaceinvoke r24.<com.android.server.pm.parsing.pkg.AndroidPackage: int getUid()>();

        if $i4 == i0 goto label07;

     label05:
        if 1000 != i0 goto label06;

        goto label07;

     label06:
        r25 = new java.lang.SecurityException;

        specialinvoke r25.<java.lang.SecurityException: void <init>(java.lang.String)>("May not access signing KeySet of other apps.");

        throw r25;

     label07:
        $r20 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r26 = $r20.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        r27 = new android.content.pm.KeySet;

        $r21 = virtualinvoke r26.<com.android.server.pm.KeySetManagerService: com.android.server.pm.KeySetHandle getSigningKeySetByPackageNameLPr(java.lang.String)>(r23);

        specialinvoke r27.<android.content.pm.KeySet: void <init>(android.os.IBinder)>($r21);

        exitmonitor r1;

     label08:
        return r27;

     label09:
        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for filtered package: ");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid:");

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r16);

        r29 = new java.lang.IllegalArgumentException;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r19 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw r29;

     label10:
        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package: ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r6 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r6);

        r32 = new java.lang.IllegalArgumentException;

        r33 = new java.lang.StringBuilder;

        specialinvoke r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r9 = virtualinvoke r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw r32;

     label11:
        $r22 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r22;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public android.os.Bundle getSuspendedPackageAppExtras(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r9;
        int i0, i1, $i2;
        java.lang.StringBuilder $r3;
        java.lang.SecurityException $r8;
        android.os.Bundle $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r1, 0, i0);

        if $i2 != i1 goto label1;

        $r10 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.os.Bundle getSuspendedPackageAppExtrasInternal(java.lang.String,int)>(r1, i0);

        return $r10;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling package ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not belong to calling uid ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public android.content.pm.ParceledListSlice getSystemAvailableFeatures()
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArrayMap $r1, $r2, r7;
        int $i0, $i1, $i2;
        java.util.Collection $r3;
        android.content.pm.FeatureInfo $r4;
        android.content.pm.ParceledListSlice $r5;
        java.lang.Throwable $r6;
        java.util.ArrayList r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        entermonitor r7;

     label1:
        r8 = new java.util.ArrayList;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        $i1 = $i0 + 1;

        specialinvoke r8.<java.util.ArrayList: void <init>(int)>($i1);

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Collection values()>();

        virtualinvoke r8.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r3);

        exitmonitor r7;

     label2:
        $r4 = new android.content.pm.FeatureInfo;

        specialinvoke $r4.<android.content.pm.FeatureInfo: void <init>()>();

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.opengles.version", 0);

        $r4.<android.content.pm.FeatureInfo: int reqGlEsVersion> = $i2;

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r5 = new android.content.pm.ParceledListSlice;

        specialinvoke $r5.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r8);

        return $r5;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r7;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getSystemCaptionsServicePackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        boolean $z0;
        java.lang.String $r2, $r3, r4;
        android.content.ComponentName r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039872);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r5 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r4);

        if r5 != null goto label2;

        return null;

     label2:
        $r2 = virtualinvoke r5.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    public java.lang.String[] getSystemSharedLibraryNames()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r7, $r8;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7;
        android.util.LongSparseArray r2;
        android.content.pm.SharedLibraryInfo r3;
        android.util.ArrayMap $r4, $r6;
        boolean $z0, $z1;
        com.android.server.pm.Settings $r9;
        java.lang.String $r10, $r11, $r12;
        java.lang.Throwable $r13;
        android.util.ArraySet r14, r15;
        com.android.server.pm.PackageSetting r16;
        java.lang.String[] r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

        r14 = null;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        i0 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

     label02:
        i6 = 0;

     label03:
        if i6 >= i0 goto label23;

     label04:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mSharedLibraries>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        r2 = (android.util.LongSparseArray) $r7;

     label05:
        if r2 != null goto label06;

        r15 = r14;

        goto label22;

     label06:
        i1 = virtualinvoke r2.<android.util.LongSparseArray: int size()>();

     label07:
        i7 = 0;

     label08:
        r15 = r14;

        if i7 >= i1 goto label22;

     label09:
        $r8 = virtualinvoke r2.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i7);

        r3 = (android.content.pm.SharedLibraryInfo) $r8;

        $z0 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: boolean isStatic()>();

        if $z0 != 0 goto label14;

     label10:
        r15 = r14;

        if r14 != null goto label12;

     label11:
        r15 = new android.util.ArraySet;

        specialinvoke r15.<android.util.ArraySet: void <init>()>();

     label12:
        $r12 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        interfaceinvoke r15.<java.util.Set: boolean add(java.lang.Object)>($r12);

     label13:
        goto label22;

     label14:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getPackageName()>();

        r16 = virtualinvoke $r9.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>($r10);

     label15:
        if r16 == null goto label21;

     label16:
        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i4);

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean filterSharedLibPackageLPr(com.android.server.pm.PackageSetting,int,int,int)>(r16, $i3, $i5, 67108864);

        if $z1 != 0 goto label21;

     label17:
        r15 = r14;

        if r14 != null goto label19;

     label18:
        r15 = new android.util.ArraySet;

        specialinvoke r15.<android.util.ArraySet: void <init>()>();

     label19:
        $r11 = virtualinvoke r3.<android.content.pm.SharedLibraryInfo: java.lang.String getName()>();

        interfaceinvoke r15.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label20:
        goto label22;

     label21:
        i7 = i7 + 1;

        goto label08;

     label22:
        i6 = i6 + 1;

        r14 = r15;

        goto label03;

     label23:
        if r14 == null goto label26;

     label24:
        $i2 = interfaceinvoke r14.<java.util.Set: int size()>();

        r17 = newarray (java.lang.String)[$i2];

        interfaceinvoke r14.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r17);

        exitmonitor r1;

     label25:
        return r17;

     label26:
        exitmonitor r1;

     label27:
        return null;

     label28:
        $r13 := @caughtexception;

     label29:
        exitmonitor r1;

     label30:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label04 to label05 with label28;
        catch java.lang.Throwable from label06 to label07 with label28;
        catch java.lang.Throwable from label09 to label10 with label28;
        catch java.lang.Throwable from label11 to label12 with label28;
        catch java.lang.Throwable from label12 to label13 with label28;
        catch java.lang.Throwable from label14 to label15 with label28;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch java.lang.Throwable from label18 to label19 with label28;
        catch java.lang.Throwable from label19 to label20 with label28;
        catch java.lang.Throwable from label24 to label25 with label28;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public java.lang.String getSystemTextClassifierPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039873);

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    public int getUidForSharedUser(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        int i0, $i1;
        java.lang.String $r2, r6;
        com.android.server.pm.Settings $r3;
        java.lang.Throwable $r4;
        com.android.server.pm.PackageManagerException $r5;
        com.android.server.pm.SharedUserSetting r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i1);

        if $r2 == null goto label01;

        return -1;

     label01:
        if r6 != null goto label02;

        return -1;

     label02:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r7 = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,int,boolean)>(r6, 0, 0, 0);

     label04:
        if r7 == null goto label08;

     label05:
        i0 = r7.<com.android.server.pm.SharedUserSetting: int userId>;

     label06:
        exitmonitor r1;

     label07:
        return i0;

     label08:
        goto label11;

     label09:
        $r4 := @caughtexception;

        goto label13;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        return -1;

     label13:
        exitmonitor r1;

     label14:
        throw $r4;

        catch com.android.server.pm.PackageManagerException from label03 to label04 with label10;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch com.android.server.pm.PackageManagerException from label05 to label06 with label10;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label13 to label14 with label09;
    }

    public java.lang.String[] getUnsuspendablePackagesForUser(java.lang.String[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, i7;
        boolean[] r2;
        android.content.Context $r4;
        java.lang.StringBuilder $r5, $r26, r35;
        java.lang.SecurityException $r10;
        java.lang.String $r11, $r17, $r21, $r23, $r24, $r25, $r29;
        boolean $z0, $z1, $z3;
        android.util.ArraySet $r12;
        java.lang.String[] $r13, $r15, r31;
        java.lang.Object[] $r14;
        com.android.server.pm.Settings $r16;
        android.util.ArrayMap $r18;
        java.lang.Object $r19, r33;
        java.lang.Throwable $r30;
        com.android.server.pm.PackageSetting r34;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r31 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r31, "packageNames cannot be null");

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SUSPEND_APPS", "getUnsuspendablePackagesForUser");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if $i2 != i0 goto label14;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isSuspendAllowedForUser(int)>(i0);

        if $z0 != 0 goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend due to restrictions on user ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r29);

        return r31;

     label01:
        $r12 = new android.util.ArraySet;

        specialinvoke $r12.<android.util.ArraySet: void <init>()>();

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean[] canSuspendPackageForUserInternal(java.lang.String[],int)>(r31, i0);

        i7 = 0;

     label02:
        $i3 = lengthof r31;

        if i7 >= $i3 goto label13;

        $z1 = r2[i7];

        if $z1 != 0 goto label03;

        $r25 = r31[i7];

        virtualinvoke $r12.<android.util.ArraySet: boolean add(java.lang.Object)>($r25);

        goto label09;

     label03:
        r33 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r33;

     label04:
        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r18 = $r16.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r17 = r31[i7];

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r17);

        r34 = (com.android.server.pm.PackageSetting) $r19;

     label05:
        if r34 == null goto label07;

     label06:
        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r34, i1, i0);

        if $z3 == 0 goto label08;

     label07:
        r35 = new java.lang.StringBuilder;

        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find package setting for package: ");

        $r21 = r31[i7];

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        $r24 = r31[i7];

        virtualinvoke $r12.<android.util.ArraySet: boolean add(java.lang.Object)>($r24);

     label08:
        exitmonitor r33;

     label09:
        i7 = i7 + 1;

        goto label02;

     label10:
        $r30 := @caughtexception;

     label11:
        exitmonitor r33;

     label12:
        throw $r30;

     label13:
        $i4 = virtualinvoke $r12.<android.util.ArraySet: int size()>();

        $r13 = newarray (java.lang.String)[$i4];

        $r14 = virtualinvoke $r12.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (java.lang.String[]) $r14;

        return $r15;

     label14:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot query getUnsuspendablePackagesForUser for user ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = new java.lang.SecurityException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    java.util.Set getUnusedPackages(long)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0, l1, l2, l3, l4;
        java.util.Iterator r1;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.PackageSetting r3;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo r4;
        java.util.HashSet $r5;
        android.util.ArrayMap $r6, $r10;
        java.util.Collection $r7;
        java.lang.Object $r8, $r12, r21, r22, r23, r24;
        com.android.server.pm.Settings $r9;
        java.lang.String $r11, $r14, $r17;
        com.android.server.pm.dex.DexManager $r13;
        com.android.server.pm.pkg.PackageStateUnserialized $r15, $r16;
        boolean $z0, $z2;
        java.lang.Throwable $r18, $r19, r27;

        r0 := @this: com.android.server.pm.PackageManagerService;

        l0 := @parameter0: long;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r21 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r21;

        r22 = r21;

     label01:
        $r6 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        r22 = r21;

     label03:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label22;

     label04:
        r22 = r21;

     label05:
        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r8;

     label06:
        r22 = r21;

     label07:
        $r9 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r10 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r11 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r12 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r11);

        r3 = (com.android.server.pm.PackageSetting) $r12;

     label08:
        if r3 != null goto label09;

        goto label02;

     label09:
        r22 = r21;

     label10:
        $r13 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager getDexManager()>();

        $r14 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r4 = virtualinvoke $r13.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>($r14);

     label11:
        r22 = r21;

     label12:
        l2 = r3.<com.android.server.pm.PackageSetting: long firstInstallTime>;

     label13:
        r22 = r21;

     label14:
        $r15 = virtualinvoke r3.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        l3 = virtualinvoke $r15.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestPackageUseTimeInMills()>();

     label15:
        r22 = r21;

     label16:
        $r16 = virtualinvoke r3.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        l4 = virtualinvoke $r16.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

     label17:
        r23 = r21;

        r24 = r21;

     label18:
        $z0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isUnusedSinceTimeInMillis(long,long,long,com.android.server.pm.dex.PackageDexUsage$PackageUseInfo,long,long)>(l2, l1, l0, r4, l3, l4);

        if $z0 == 0 goto label21;

     label19:
        r24 = r21;

     label20:
        $r17 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r17);

     label21:
        r21 = r23;

        goto label02;

     label22:
        r24 = r21;

     label23:
        exitmonitor r21;

     label24:
        return $r5;

     label25:
        $r18 := @caughtexception;

        r27 = $r18;

     label26:
        r24 = r22;

     label27:
        exitmonitor r22;

     label28:
        throw r27;

     label29:
        $r19 := @caughtexception;

        r27 = $r19;

        r22 = r24;

        goto label26;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label14 to label15 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label18 to label19 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label23 to label24 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
    }

    public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        android.content.Context $r2;
        com.android.server.pm.Settings $r3;
        java.lang.Throwable $r4;
        android.content.pm.VerifierDeviceIdentity r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can read the verifier device identity");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r5 = virtualinvoke $r3.<com.android.server.pm.Settings: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentityLPw()>();

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String getWellbeingPackageName()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(17039875);

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String ensureSystemPackageName(java.lang.String)>($r2);

        return $r3;
    }

    public void grantRuntimePermission(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r4;
        int i0;
        android.permission.IPermissionManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        interfaceinvoke $r2.<android.permission.IPermissionManager: void grantRuntimePermission(java.lang.String,java.lang.String,int)>(r4, r1, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasSigningCertificate(java.lang.String, byte[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        byte[] r1;
        int i0, i1, $i2;
        java.lang.Object r2, $r5;
        com.android.server.pm.PackageSetting r3;
        android.util.ArrayMap $r4;
        java.lang.String $r6, r10;
        boolean $z0, z1, z2;
        android.content.pm.PackageParser$SigningDetails $r7, $r8;
        java.lang.Throwable $r9;
        com.android.server.pm.parsing.pkg.AndroidPackage r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        $r6 = interfaceinvoke r11.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r6);

     label02:
        if r11 == null goto label12;

        if r3 != null goto label03;

        goto label12;

     label03:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r3, i1, $i2);

        if $z0 == 0 goto label05;

        exitmonitor r2;

     label04:
        return 0;

     label05:
        if i0 == 0 goto label10;

        if i0 == 1 goto label08;

     label06:
        exitmonitor r2;

     label07:
        return 0;

     label08:
        $r8 = interfaceinvoke r11.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        z1 = virtualinvoke $r8.<android.content.pm.PackageParser$SigningDetails: boolean hasSha256Certificate(byte[])>(r1);

        exitmonitor r2;

     label09:
        return z1;

     label10:
        $r7 = interfaceinvoke r11.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        z2 = virtualinvoke $r7.<android.content.pm.PackageParser$SigningDetails: boolean hasCertificate(byte[])>(r1);

        exitmonitor r2;

     label11:
        return z2;

     label12:
        exitmonitor r2;

     label13:
        return 0;

     label14:
        $r9 := @caughtexception;

     label15:
        exitmonitor r2;

     label16:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean hasSystemFeature(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        android.util.ArrayMap r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;
        android.content.pm.FeatureInfo r6;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mAvailableFeatures>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (android.content.pm.FeatureInfo) $r3;

     label02:
        z0 = 0;

        if r6 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        $i1 = r6.<android.content.pm.FeatureInfo: int version>;

        if $i1 < i0 goto label07;

     label06:
        z0 = 1;

     label07:
        exitmonitor r1;

     label08:
        return z0;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean hasSystemUidErrors()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mHasSystemUidErrors>;

        return $z0;
    }

    public boolean hasUidSigningCertificate(int, byte[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, i3, i4;
        java.lang.Object r1;
        com.android.server.pm.Settings $r2;
        boolean $z0, $z1, $z2, z3, z4, z5;
        com.android.server.pm.PackageSignatures $r3, $r6;
        java.lang.String $r4;
        com.android.server.pm.SharedUserSetting $r5;
        java.lang.Throwable $r7;
        byte[] r8;
        com.android.server.pm.SettingBase r9;
        android.content.pm.PackageParser$SigningDetails r10;
        com.android.server.pm.PackageSetting r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i3 := @parameter0: int;

        r8 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i3);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r9 = virtualinvoke $r2.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i4);

     label02:
        if r9 == null goto label23;

     label03:
        $z0 = r9 instanceof com.android.server.pm.SharedUserSetting;

        if $z0 == 0 goto label11;

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r4 == null goto label05;

     label04:
        z3 = 1;

        goto label06;

     label05:
        z3 = 0;

     label06:
        if z3 == 0 goto label09;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r5 = (com.android.server.pm.SharedUserSetting) r9;

        $r6 = $r5.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        r10 = $r6.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label10:
        goto label14;

     label11:
        $z1 = r9 instanceof com.android.server.pm.PackageSetting;

        if $z1 == 0 goto label21;

        r11 = (com.android.server.pm.PackageSetting) r9;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r11, i1, i2);

        if $z2 == 0 goto label13;

        exitmonitor r1;

     label12:
        return 0;

     label13:
        $r3 = r11.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        r10 = $r3.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

     label14:
        if i0 == 0 goto label19;

        if i0 == 1 goto label17;

     label15:
        exitmonitor r1;

     label16:
        return 0;

     label17:
        z4 = virtualinvoke r10.<android.content.pm.PackageParser$SigningDetails: boolean hasSha256Certificate(byte[])>(r8);

        exitmonitor r1;

     label18:
        return z4;

     label19:
        z5 = virtualinvoke r10.<android.content.pm.PackageParser$SigningDetails: boolean hasCertificate(byte[])>(r8);

        exitmonitor r1;

     label20:
        return z5;

     label21:
        exitmonitor r1;

     label22:
        return 0;

     label23:
        exitmonitor r1;

     label24:
        return 0;

     label25:
        $r7 := @caughtexception;

     label26:
        exitmonitor r1;

     label27:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public int installExistingPackageAsUser(java.lang.String, int, int, int, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, $i3;
        java.util.List r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.util.List;

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List,android.content.IntentSender)>(r1, i0, i1, i2, r2, null);

        return $i3;
    }

    int installExistingPackageAsUser(java.lang.String, int, int, int, java.util.List, android.content.IntentSender)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13;
        android.content.IntentSender r1;
        long l2;
        android.content.Context $r2, $r19;
        java.lang.StringBuilder $r3, $r20;
        java.lang.String $r6, $r27, r41;
        boolean $z0, $z1, z2, z3, z4, z5, z6, z7, z8;
        com.android.server.pm.Settings $r7, $r16, $r17;
        android.util.ArrayMap $r8;
        java.lang.Object $r9, r46, r53, r56;
        int[] $r10, $r12, r49;
        com.android.server.pm.parsing.pkg.AndroidPackage $r11, $r13, $r14, $r15, r52;
        com.android.server.pm.UserManagerService $r18;
        java.lang.SecurityException $r26;
        java.lang.Throwable $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, r48, r55, r60;
        java.util.List r42;
        com.android.server.pm.permission.PermissionManagerServiceInternal r44, $r51;
        com.android.server.pm.PackageSetting r47;
        com.android.server.pm.PackageManagerService$Injector $r50;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r57;
        com.android.server.pm.PackageManagerService$PostInstallData r58;
        com.android.server.pm._$$Lambda$PackageManagerService$KIxM1bfT34LOktxGx0eTvR0juUg r59;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r41 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i11 := @parameter3: int;

        r42 := @parameter4: java.util.List;

        r1 := @parameter5: android.content.IntentSender;

        i12 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        if $i4 == 0 goto label02;

        $r19 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i10 = virtualinvoke $r19.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("com.android.permission.INSTALL_EXISTING_PACKAGES");

        if $i10 != 0 goto label01;

        goto label02;

     label01:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r26 = new java.lang.SecurityException;

        $r27 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.lang.SecurityException: void <init>(java.lang.String)>($r27);

        throw $r26;

     label02:
        r44 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("installExistingPackage for user ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r44.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i12, i0, 1, 1, $r6);

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(i0, "no_install_apps");

        if $z0 == 0 goto label03;

        return -111;

     label03:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $i5 = i1 & 2048;

        if $i5 == 0 goto label04;

        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        $i6 = i1 & 16384;

        if $i6 == 0 goto label06;

        z3 = 1;

        goto label07;

     label06:
        z3 = 0;

     label07:
        r46 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r46;

     label08:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r41);

        r47 = (com.android.server.pm.PackageSetting) $r9;

     label09:
        if r47 != null goto label14;

     label10:
        exitmonitor r46;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return -3;

     label12:
        $r35 := @caughtexception;

        r48 = $r35;

     label13:
        goto label62;

     label14:
        $i7 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i12);

        z4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i12, $i7);

     label15:
        if z4 != 0 goto label25;

        z5 = 0;

     label16:
        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r49 = virtualinvoke $r18.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        i3 = lengthof r49;

     label17:
        i13 = 0;

     label18:
        if i13 >= i3 goto label22;

     label19:
        $i9 = r49[i13];

        $z1 = virtualinvoke r47.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>($i9);

        z5 = $z1 ^ 1;

     label20:
        if z5 == 0 goto label21;

        goto label22;

     label21:
        i13 = i13 + 1;

        goto label18;

     label22:
        if z5 != 0 goto label25;

     label23:
        exitmonitor r46;

     label24:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return -3;

     label25:
        z6 = virtualinvoke r47.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

     label26:
        if z6 != 0 goto label30;

     label27:
        virtualinvoke r47.<com.android.server.pm.PackageSetting: void setInstalled(boolean,int)>(1, i0);

        virtualinvoke r47.<com.android.server.pm.PackageSetting: void setHidden(boolean,int)>(0, i0);

     label28:
        virtualinvoke r47.<com.android.server.pm.PackageSetting: void setInstallReason(int,int)>(i11, i0);

        virtualinvoke r47.<com.android.server.pm.PackageSetting: void setUninstallReason(int,int)>(0, i0);

        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r16.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(i0);

        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r17.<com.android.server.pm.Settings: void writeKernelMappingLPr(com.android.server.pm.PackageSetting)>(r47);

     label29:
        z7 = 1;

        goto label35;

     label30:
        if z3 == 0 goto label34;

     label31:
        z8 = virtualinvoke r47.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>(i0);

     label32:
        if z8 == 0 goto label34;

        z7 = 1;

        goto label35;

     label33:
        $r34 := @caughtexception;

        r48 = $r34;

        goto label13;

     label34:
        z7 = 0;

     label35:
        $r50 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        staticinvoke <com.android.server.pm.PackageManagerService: void setInstantAppForUser(com.android.server.pm.PackageManagerService$Injector,com.android.server.pm.PackageSetting,int,boolean,boolean)>($r50, r47, i0, z2, z3);

        exitmonitor r46;

     label36:
        if z7 == 0 goto label59;

        $i8 = 4194304 & i1;

        if $i8 == 0 goto label39;

     label37:
        $r14 = r47.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r14 == null goto label39;

        $r15 = r47.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r42 = interfaceinvoke $r15.<com.android.server.pm.parsing.pkg.AndroidPackage: java.util.List getRequestedPermissions()>();

     label38:
        goto label39;

     label39:
        $r51 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r51.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setWhitelistedRestrictedPermissions(java.lang.String,java.util.List,int,int)>(r41, r42, 2, i0);

        r52 = r47.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label40:
        if r52 == null goto label48;

     label41:
        r53 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r53;

     label42:
        $r13 = r47.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataAfterInstallLIF(com.android.server.pm.parsing.pkg.AndroidPackage)>($r13);

        exitmonitor r53;

     label43:
        goto label48;

     label44:
        $r39 := @caughtexception;

     label45:
        exitmonitor r53;

     label46:
        throw $r39;

     label47:
        $r31 := @caughtexception;

        r55 = $r31;

        goto label67;

     label48:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageAddedForUser(java.lang.String,com.android.server.pm.PackageSetting,int,int)>(r41, r47, i0, 0);

        r56 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r56;

     label49:
        $r10 = newarray (int)[1];

        $r10[0] = i0;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void updateSequenceNumberLP(com.android.server.pm.PackageSetting,int[])>(r47, $r10);

        exitmonitor r56;

     label50:
        r57 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PackageInstalledInfo createPackageInstalledInfo(int)>(1);

        $r11 = r47.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        r57.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg> = $r11;

        $r12 = newarray (int)[1];

        $r12[0] = i0;

        r57.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers> = $r12;

        r58 = new com.android.server.pm.PackageManagerService$PostInstallData;

        r59 = new com.android.server.pm._$$Lambda$PackageManagerService$KIxM1bfT34LOktxGx0eTvR0juUg;

     label51:
        specialinvoke r59.<com.android.server.pm._$$Lambda$PackageManagerService$KIxM1bfT34LOktxGx0eTvR0juUg: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,com.android.server.pm.PackageSetting,int,android.content.IntentSender,com.android.server.pm.PackageManagerService$PackageInstalledInfo)>(r0, r41, r47, i0, r1, r57);

        specialinvoke r58.<com.android.server.pm.PackageManagerService$PostInstallData: void <init>(com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo,java.lang.Runnable)>(null, r57, r59);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>(i0, r57, r58);

     label52:
        goto label59;

     label53:
        $r32 := @caughtexception;

        r60 = $r32;

     label54:
        exitmonitor r56;

     label55:
        throw r60;

     label56:
        $r30 := @caughtexception;

        r55 = $r30;

        goto label67;

     label57:
        $r40 := @caughtexception;

        r60 = $r40;

        goto label54;

     label58:
        $r29 := @caughtexception;

        r55 = $r29;

        goto label67;

     label59:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label60:
        $r33 := @caughtexception;

        r48 = $r33;

        goto label62;

     label61:
        $r28 := @caughtexception;

        r48 = $r28;

     label62:
        exitmonitor r46;

     label63:
        throw r48;

     label64:
        $r37 := @caughtexception;

        r55 = $r37;

        goto label67;

     label65:
        $r36 := @caughtexception;

        r48 = $r36;

        goto label62;

     label66:
        $r38 := @caughtexception;

        r55 = $r38;

     label67:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r55;

        catch java.lang.Throwable from label07 to label08 with label66;
        catch java.lang.Throwable from label08 to label09 with label61;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label14 to label15 with label61;
        catch java.lang.Throwable from label16 to label17 with label12;
        catch java.lang.Throwable from label19 to label20 with label12;
        catch java.lang.Throwable from label23 to label24 with label12;
        catch java.lang.Throwable from label25 to label26 with label61;
        catch java.lang.Throwable from label27 to label28 with label12;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.lang.Throwable from label35 to label36 with label60;
        catch java.lang.Throwable from label37 to label38 with label64;
        catch java.lang.Throwable from label39 to label40 with label58;
        catch java.lang.Throwable from label41 to label42 with label47;
        catch java.lang.Throwable from label42 to label43 with label44;
        catch java.lang.Throwable from label45 to label46 with label44;
        catch java.lang.Throwable from label46 to label47 with label47;
        catch java.lang.Throwable from label48 to label49 with label58;
        catch java.lang.Throwable from label49 to label50 with label53;
        catch java.lang.Throwable from label50 to label51 with label58;
        catch java.lang.Throwable from label51 to label52 with label56;
        catch java.lang.Throwable from label54 to label55 with label57;
        catch java.lang.Throwable from label55 to label56 with label56;
        catch java.lang.Throwable from label62 to label63 with label65;
        catch java.lang.Throwable from label63 to label64 with label64;
    }

    void installStage(com.android.server.pm.PackageManagerService$ActiveInstallSession)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;
        android.content.pm.PackageInstaller$SessionParams $r2;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.server.pm.PackageManagerService$ActiveInstallSession r8;
        android.os.Handler $r10, $r17;
        android.os.Message r11;
        com.android.server.pm.PackageManagerService$InstallParams $r12;
        com.android.server.pm.PackageManagerService$HandlerParams $r14;
        java.lang.Object $r15, $r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: com.android.server.pm.PackageManagerService$ActiveInstallSession;

        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_INSTANT>;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r8.<com.android.server.pm.PackageManagerService$ActiveInstallSession: android.content.pm.PackageInstaller$SessionParams getSessionParams()>();

        $i0 = $r2.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i1 = $i0 & 2048;

        if $i1 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ephemeral install of ");

        $r5 = virtualinvoke r8.<com.android.server.pm.PackageManagerService$ActiveInstallSession: java.lang.String getPackageName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r7);

     label1:
        $r10 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        $r12 = new com.android.server.pm.PackageManagerService$InstallParams;

        specialinvoke $r12.<com.android.server.pm.PackageManagerService$InstallParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$ActiveInstallSession)>(r0, r8);

        $r14 = virtualinvoke $r12.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$HandlerParams setTraceMethod(java.lang.String)>("installStage");

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r12);

        virtualinvoke $r14.<com.android.server.pm.PackageManagerService$HandlerParams: com.android.server.pm.PackageManagerService$HandlerParams setTraceCookie(int)>($i3);

        r11.<android.os.Message: java.lang.Object obj> = $r12;

        $r15 = r11.<android.os.Message: java.lang.Object obj>;

        $i4 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r15);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "installStage", $i4);

        $r16 = r11.<android.os.Message: java.lang.Object obj>;

        $i5 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r16);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "queueInstall", $i5);

        $r17 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r17.<android.os.Handler: boolean sendMessage(android.os.Message)>(r11);

        return;
    }

    void installStage(java.util.List) throws com.android.server.pm.PackageManagerException
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.Message r1;
        android.os.Handler $r2, $r9;
        com.android.server.pm.PackageManagerService$MultiPackageInstallParams $r3;
        android.os.UserHandle $r4;
        com.android.server.pm.PackageManagerService$HandlerParams $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r7, $r8;
        java.util.List r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.util.List;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        $r3 = new com.android.server.pm.PackageManagerService$MultiPackageInstallParams;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$MultiPackageInstallParams: void <init>(com.android.server.pm.PackageManagerService,android.os.UserHandle,java.util.List)>(r0, $r4, r10);

        $r5 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService$MultiPackageInstallParams: com.android.server.pm.PackageManagerService$HandlerParams setTraceMethod(java.lang.String)>("installStageMultiPackage");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3);

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService$HandlerParams: com.android.server.pm.PackageManagerService$HandlerParams setTraceCookie(int)>($i0);

        r1.<android.os.Message: java.lang.Object obj> = $r3;

        $r7 = r1.<android.os.Message: java.lang.Object obj>;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r7);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "installStageMultiPackage", $i1);

        $r8 = r1.<android.os.Message: java.lang.Object obj>;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r8);

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(262144L, "queueInstall", $i2);

        $r9 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r9.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public boolean isAutoRevokeWhitelisted(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2;
        java.lang.Object r1, $r5;
        com.android.server.pm.PackageManagerService$Injector $r2;
        android.app.AppOpsManager $r3;
        android.util.ArrayMap $r4;
        com.android.server.pm.parsing.pkg.AndroidPackage $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.PackageManagerService$Injector: android.app.AppOpsManager getAppOpsManager()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = virtualinvoke $r3.<android.app.AppOpsManager: int checkOpNoThrow(int,int,java.lang.String)>(97, $i1, r8);

        z0 = 0;

        if i0 != 0 goto label1;

        return 0;

     label1:
        if i0 != 1 goto label2;

        return 1;

     label2:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label3:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        $r6 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

        $i2 = interfaceinvoke $r6.<com.android.server.pm.parsing.pkg.AndroidPackage: int getAutoRevokePermissions()>();

        if $i2 != 2 goto label5;

     label4:
        z0 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    boolean isCallerVerifier(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mRequiredVerifierPackage>;

        z0 = 0;

        if r1 == null goto label1;

        $i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r1, 0, i1);

        if i0 != $i2 goto label1;

        z0 = 1;

        goto label1;

     label1:
        return z0;
    }

    public boolean isDeviceUpgrading()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, z2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 = r0.<com.android.server.pm.PackageManagerService: boolean mIsUpgrade>;

        z2 = 0;

        if z0 != 0 goto label1;

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.pm.mock-upgrade", 0);

        if $z1 == 0 goto label2;

     label1:
        z2 = 1;

     label2:
        return z2;
    }

    public boolean isFirstBoot()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mFirstBoot>;

        return $z0;
    }

    boolean isHistoricalPackageUsageAvailable()
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageUsage $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageUsage mPackageUsage>;

        $z0 = virtualinvoke $r1.<com.android.server.pm.PackageUsage: boolean isHistoricalPackageUsageAvailable()>();

        return $z0;
    }

    public boolean isInstantApp(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 0, "isInstantApp");

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantAppInternal(java.lang.String,int,int)>(r1, i0, i1);

        return $z0;
    }

    public boolean isOnlyCoreApps()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        return $z0;
    }

    public boolean isOrphaned(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1;
        boolean z0, $z1;
        android.util.ArrayMap $r2;
        com.android.server.pm.Settings $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $z1 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r5);

        if $z1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        z0 = virtualinvoke $r3.<com.android.server.pm.Settings: boolean isOrphaned(java.lang.String)>(r5);

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isPackageAvailable(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        java.lang.Object r1, $r5;
        boolean z0, $z1, $z2;
        com.android.server.pm.UserManagerService $r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        android.util.ArrayMap $r4;
        java.lang.String $r6, r8;
        java.lang.Throwable $r7;
        com.android.server.pm.parsing.pkg.AndroidPackage r9;
        com.android.server.pm.PackageSetting r10;
        android.content.pm.PackageUserState r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z1 != 0 goto label01;

        return 0;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 0, "is package available");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r5;

     label03:
        if r9 == null goto label11;

     label04:
        $r6 = interfaceinvoke r9.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r10 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r6);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r10, i1, i0);

        if $z2 == 0 goto label06;

        exitmonitor r1;

     label05:
        return 0;

     label06:
        if r10 == null goto label11;

     label07:
        r11 = virtualinvoke r10.<com.android.server.pm.PackageSetting: android.content.pm.PackageUserState readUserState(int)>(i0);

     label08:
        if r11 == null goto label11;

     label09:
        z0 = staticinvoke <android.content.pm.PackageParser: boolean isAvailable(android.content.pm.PackageUserState)>(r11);

        exitmonitor r1;

     label10:
        return z0;

     label11:
        exitmonitor r1;

     label12:
        return 0;

     label13:
        $r7 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public boolean isPackageDeviceAdminOnAnyUser(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r5;
        int i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.SecurityException $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.MANAGE_USERS", i0);

        if $i1 != 0 goto label2;

        $r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r5 == null goto label1;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r1, i0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdmin(java.lang.String,int)>(r1, -1);

        return $z0;

     label2:
        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = "128599183";

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r2[1] = $r3;

        $r2[2] = "";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r2);

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("android.permission.MANAGE_USERS permission is required to call this API");

        throw $r4;
    }

    public boolean isPackageSignedByKeySet(java.lang.String, android.content.pm.KeySet)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i2;
        java.lang.Object r1, $r4;
        boolean z0, $z1, $z2;
        java.lang.String $r2, $r7, $r10, $r11, r17;
        android.util.ArrayMap $r3;
        com.android.server.pm.PackageSetting $r12;
        com.android.server.pm.Settings $r13;
        com.android.server.pm.KeySetHandle $r14;
        com.android.server.pm.KeySetManagerService $r15;
        java.lang.Throwable $r16;
        android.content.pm.KeySet r18;
        com.android.server.pm.parsing.pkg.AndroidPackage r19;
        android.os.IBinder r20;
        java.lang.StringBuilder r21, r23;
        java.lang.IllegalArgumentException r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: android.content.pm.KeySet;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r2 == null goto label01;

        return 0;

     label01:
        if r17 == null goto label13;

        if r18 != null goto label02;

        goto label13;

     label02:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r17);

        r19 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label04:
        if r19 == null goto label09;

     label05:
        $r11 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r12 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r11);

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r12, i0, $i2);

        if $z1 != 0 goto label09;

        r20 = virtualinvoke r18.<android.content.pm.KeySet: android.os.IBinder getToken()>();

        $z2 = r20 instanceof com.android.server.pm.KeySetHandle;

        if $z2 == 0 goto label07;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r15 = $r13.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r14 = (com.android.server.pm.KeySetHandle) r20;

        z0 = virtualinvoke $r15.<com.android.server.pm.KeySetManagerService: boolean packageIsSignedByLPr(java.lang.String,com.android.server.pm.KeySetHandle)>(r17, $r14);

        exitmonitor r1;

     label06:
        return z0;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package: ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r7 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r7);

        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r10 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r22;

     label10:
        $r16 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r16;

     label13:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isPackageSignedByKeySetExactly(java.lang.String, android.content.pm.KeySet)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i2;
        java.lang.Object r1, $r4;
        boolean z0, $z1, $z2;
        java.lang.String $r2, $r7, $r10, $r11, r17;
        android.util.ArrayMap $r3;
        com.android.server.pm.PackageSetting $r12;
        com.android.server.pm.Settings $r13;
        com.android.server.pm.KeySetHandle $r14;
        com.android.server.pm.KeySetManagerService $r15;
        java.lang.Throwable $r16;
        android.content.pm.KeySet r18;
        com.android.server.pm.parsing.pkg.AndroidPackage r19;
        android.os.IBinder r20;
        java.lang.StringBuilder r21, r23;
        java.lang.IllegalArgumentException r22;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r17 := @parameter0: java.lang.String;

        r18 := @parameter1: android.content.pm.KeySet;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r2 == null goto label01;

        return 0;

     label01:
        if r17 == null goto label13;

        if r18 != null goto label02;

        goto label13;

     label02:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r17);

        r19 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r4;

     label04:
        if r19 == null goto label09;

     label05:
        $r11 = interfaceinvoke r19.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $r12 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r11);

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r12, i0, $i2);

        if $z1 != 0 goto label09;

        r20 = virtualinvoke r18.<android.content.pm.KeySet: android.os.IBinder getToken()>();

        $z2 = r20 instanceof com.android.server.pm.KeySetHandle;

        if $z2 == 0 goto label07;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r15 = $r13.<com.android.server.pm.Settings: com.android.server.pm.KeySetManagerService mKeySetManagerService>;

        $r14 = (com.android.server.pm.KeySetHandle) r20;

        z0 = virtualinvoke $r15.<com.android.server.pm.KeySetManagerService: boolean packageIsSignedByExactlyLPr(java.lang.String,com.android.server.pm.KeySetHandle)>(r17, $r14);

        exitmonitor r1;

     label06:
        return z0;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeySet requested for unknown package: ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r7 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r7);

        r22 = new java.lang.IllegalArgumentException;

        r23 = new java.lang.StringBuilder;

        specialinvoke r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r10 = virtualinvoke r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r22;

     label10:
        $r16 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r16;

     label13:
        return 0;

        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public boolean isPackageStateProtected(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, $i3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r2;
        java.lang.SecurityException $r3;
        com.android.server.pm.ProtectedPackages $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r2.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 0, 1, "isPackageStateProtected");

        if i2 == 1000 goto label2;

        if i2 == 0 goto label2;

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.MANAGE_DEVICE_ADMINS", i1);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must have the android.permission.MANAGE_DEVICE_ADMINS permission.");

        throw $r3;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        $z0 = virtualinvoke $r4.<com.android.server.pm.ProtectedPackages: boolean isPackageStateProtected(int,java.lang.String)>(i0, r1);

        return $z0;
    }

    public boolean isPackageSuspendedForUser(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean z0, $z1;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r5, $r11, r13;
        com.android.server.pm.Settings $r6;
        android.util.ArrayMap $r7;
        java.lang.Object $r8, r16;
        java.lang.Throwable $r12;
        com.android.server.pm.permission.PermissionManagerServiceInternal r14;
        com.android.server.pm.PackageSetting r17;
        java.lang.IllegalArgumentException r18;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isPackageSuspendedForUser for user ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r14.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 0, $r5);

        r16 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label1:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r17 = (com.android.server.pm.PackageSetting) $r8;

     label2:
        if r17 == null goto label5;

     label3:
        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r17, i1, i0);

        if $z1 != 0 goto label5;

        z0 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean getSuspended(int)>(i0);

        exitmonitor r16;

     label4:
        return z0;

     label5:
        r18 = new java.lang.IllegalArgumentException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown target package: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw r18;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r16;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isProtectedBroadcast(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.util.ArraySet r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mProtectedBroadcasts>;

        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean contains(java.lang.Object)>(r4);

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 1;

     label03:
        if r4 == null goto label07;

     label04:
        $z1 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("android.net.netmon.lingerExpired");

        if $z1 != 0 goto label05;

        $z2 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.server.sip.SipWakeupTimer");

        if $z2 != 0 goto label05;

        $z3 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("com.android.internal.telephony.data-reconnect");

        if $z3 != 0 goto label05;

        $z4 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("android.net.netmon.launchCaptivePortalApp");

        if $z4 == 0 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return 1;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean isSafeMode()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        return $z0;
    }

    public boolean isStorageLow()
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        boolean z0;
        com.android.server.pm.PackageManagerService$Injector $r1;
        java.lang.Throwable $r2;
        com.android.server.storage.DeviceStorageMonitorInternal r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r3 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService$Injector: com.android.server.storage.DeviceStorageMonitorInternal getDeviceStorageMonitorInternal()>();

     label2:
        if r3 == null goto label5;

     label3:
        z0 = interfaceinvoke r3.<com.android.server.storage.DeviceStorageMonitorInternal: boolean isMemoryLow()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    boolean isSuspendingAnyPackages(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1, $r6;
        java.util.Iterator r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.util.Collection $r5;
        boolean $z0, $z1;
        com.android.server.pm.PackageSetting $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (com.android.server.pm.PackageSetting) $r6;

        $z1 = virtualinvoke $r7.<com.android.server.pm.PackageSetting: boolean isSuspendedBy(java.lang.String,int)>(r9, i0);

        if $z1 == 0 goto label4;

        exitmonitor r1;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        exitmonitor r1;

     label6:
        return 0;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isUidPrivileged(int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r7;
        boolean z0, $z1, $z2, $z3, $z4;
        int $i0, i1, i2;
        java.lang.String $r2;
        com.android.server.pm.Settings $r3;
        com.android.server.pm.PackageSetting $r4, $r8;
        com.android.server.pm.SharedUserSetting $r5;
        android.util.ArraySet $r6;
        java.lang.Throwable $r9;
        com.android.server.pm.SettingBase r10;
        java.util.Iterator r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i1 := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r2 == null goto label01;

        return 0;

     label01:
        i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r10 = virtualinvoke $r3.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i2);

        $z1 = r10 instanceof com.android.server.pm.SharedUserSetting;

        if $z1 == 0 goto label06;

        $r5 = (com.android.server.pm.SharedUserSetting) r10;

        $r6 = $r5.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        r11 = virtualinvoke $r6.<android.util.ArraySet: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r7 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (com.android.server.pm.PackageSetting) $r7;

        $z4 = virtualinvoke $r8.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        if $z4 == 0 goto label03;

        exitmonitor r1;

     label04:
        return 1;

     label05:
        goto label08;

     label06:
        $z2 = r10 instanceof com.android.server.pm.PackageSetting;

        if $z2 == 0 goto label08;

        $r4 = (com.android.server.pm.PackageSetting) r10;

        z0 = virtualinvoke $r4.<com.android.server.pm.PackageSetting: boolean isPrivileged()>();

        exitmonitor r1;

     label07:
        return z0;

     label08:
        exitmonitor r1;

     label09:
        return 0;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r9;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    boolean isUserRestricted(int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.String r1, $r8;
        com.android.server.pm.UserManagerService $r3;
        android.os.Bundle $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r4 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: android.os.Bundle getUserRestrictions(int)>(i0);

        $z0 = virtualinvoke $r4.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>(r1, 0);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User is restricted: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        return 1;

     label1:
        return 0;
    }

    public void lambda$applyMimeGroupChanges$44$PackageManagerService(java.lang.String) throws java.lang.Exception
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String,int)>(r1, -1);

        return;
    }

    public void lambda$commitPackageSettings$15$PackageManagerService(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.parsing.pkg.AndroidPackage, java.util.ArrayList)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.pkg.AndroidPackage r1, r2;
        java.util.ArrayList r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r2 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        r3 := @parameter2: java.util.ArrayList;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void revokeRuntimePermissionsIfGroupChanged(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.parsing.pkg.AndroidPackage,java.util.ArrayList)>(r1, r2, r3);

        return;
    }

    public void lambda$deleteApplicationCacheFilesAsUser$28$PackageManagerService(com.android.server.pm.parsing.pkg.AndroidPackage, int, int, int, android.content.pm.IPackageDataObserver, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, i4;
        android.content.pm.IPackageDataObserver r1;
        java.lang.String r2, $r3;
        boolean $z0, z1, z2;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r6;
        com.android.server.pm.PackageSetting r7;
        java.lang.Object r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: android.content.pm.IPackageDataObserver;

        r2 := @parameter5: java.lang.String;

        if r6 != null goto label01;

        r7 = null;

        goto label02;

     label01:
        $r3 = interfaceinvoke r6.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r7 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r3);

     label02:
        z1 = 1;

        if r7 == null goto label06;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i4);

        $z0 = virtualinvoke r7.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>($i2);

        if $z0 == 0 goto label04;

        if i0 != 0 goto label03;

        goto label04;

     label03:
        z2 = 0;

        goto label05;

     label04:
        z2 = 1;

     label05:
        z1 = z2;

     label06:
        if z1 == 0 goto label12;

        r8 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r8;

     label07:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r6, i1, 23);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearAppDataLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int)>(r6, i1, 39);

        exitmonitor r8;

     label08:
        goto label12;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r8;

     label11:
        throw $r4;

     label12:
        if r1 == null goto label16;

     label13:
        interfaceinvoke r1.<android.content.pm.IPackageDataObserver: void onRemoveCompleted(java.lang.String,boolean)>(r2, 1);

     label14:
        goto label16;

     label15:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", "Observer no longer exists.");

     label16:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public void lambda$deletePackageIfUnusedLPr$43$PackageManagerService(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>(r1, -1L, 0, 2);

        return;
    }

    public void lambda$deletePackageVersionedInternal$26$PackageManagerService(java.lang.String, int, boolean, boolean, long, int, int, int[], android.content.pm.IPackageDeleteObserver2, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, z1, $z2, $z3, $z4, z5;
        long l0;
        int i1, i2, i3, $i4, $i6, i8, i9, i10, i11, i12;
        int[] r1, r4;
        android.content.pm.IPackageDeleteObserver2 r2;
        java.lang.String r3, $r13, r15;
        com.android.server.pm.Settings $r5;
        android.util.ArrayMap $r6;
        java.lang.Object $r7;
        java.lang.StringBuilder $r8;
        android.os.RemoteException $r14;
        com.android.server.pm.PackageSetting r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String;

        i8 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        l0 := @parameter4: long;

        i9 := @parameter5: int;

        i1 := @parameter6: int;

        r1 := @parameter7: int[];

        r2 := @parameter8: android.content.pm.IPackageDeleteObserver2;

        r3 := @parameter9: java.lang.String;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r15);

        r16 = (com.android.server.pm.PackageSetting) $r7;

        if r16 == null goto label04;

        $i6 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i8);

        $z4 = virtualinvoke r16.<com.android.server.pm.PackageSetting: boolean getInstantApp(int)>($i6);

        if $z4 == 0 goto label02;

        if z0 == 0 goto label01;

        goto label02;

     label01:
        z5 = 0;

        goto label03;

     label02:
        z5 = 1;

     label03:
        goto label05;

     label04:
        z5 = 1;

     label05:
        if z5 == 0 goto label13;

        if z1 != 0 goto label06;

        i10 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>(r15, l0, i9, i1);

        goto label14;

     label06:
        r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int[] getBlockUninstallForUsers(java.lang.String,int[])>(r15, r1);

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(int[])>(r4);

        if $z2 == 0 goto label07;

        i10 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>(r15, l0, i9, i1);

        goto label12;

     label07:
        i11 = lengthof r1;

        i12 = 0;

     label08:
        if i12 >= i11 goto label11;

        i2 = r1[i12];

        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>(r4, i2);

        if $z3 != 0 goto label10;

        $i4 = i1 & -3;

        i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>(r15, l0, i2, $i4);

        if i3 == 1 goto label09;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package delete failed for user ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", returnCode ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r13);

        goto label10;

     label09:
        goto label10;

     label10:
        i12 = i12 + 1;

        goto label08;

     label11:
        i10 = -4;

     label12:
        goto label14;

     label13:
        i10 = -1;

     label14:
        interfaceinvoke r2.<android.content.pm.IPackageDeleteObserver2: void onPackageDeleted(java.lang.String,int,java.lang.String)>(r3, i10, null);

     label15:
        goto label17;

     label16:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", "Observer no longer exists.");

     label17:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyPackageChangeObserversOnDelete(java.lang.String,long)>(r3, l0);

        return;

        catch android.os.RemoteException from label14 to label15 with label16;
    }

    public void lambda$freeStorage$12$PackageManagerService(java.lang.String, long, int, android.content.IntentSender)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        android.content.IntentSender r1;
        android.content.IntentSender$SendIntentException $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        int i3;
        boolean z1;
        byte b4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i3 := @parameter2: int;

        r1 := @parameter3: android.content.IntentSender;

     label1:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,int)>(r4, l0, i3);

     label2:
        z1 = 1;

        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("PackageManager", $r3);

        z1 = 0;

     label4:
        if r1 == null goto label9;

        if z1 == 0 goto label5;

        b4 = 1;

        goto label6;

     label5:
        b4 = 0;

     label6:
        virtualinvoke r1.<android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)>(null, b4, null, null, null);

     label7:
        goto label9;

     label8:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("PackageManager", $r2);

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch android.content.IntentSender$SendIntentException from label6 to label7 with label8;
    }

    public void lambda$freeStorageAndNotify$11$PackageManagerService(java.lang.String, long, int, android.content.pm.IPackageDataObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        int i1;
        android.content.pm.IPackageDataObserver r1;
        android.os.RemoteException $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r1 := @parameter3: android.content.pm.IPackageDataObserver;

        z0 = 0;

     label1:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,int)>(r4, l0, i1);

     label2:
        z0 = 1;

        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("PackageManager", $r3);

     label4:
        if r1 == null goto label8;

     label5:
        interfaceinvoke r1.<android.content.pm.IPackageDataObserver: void onRemoveCompleted(java.lang.String,boolean)>(null, z0);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("PackageManager", $r2);

     label8:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void lambda$installExistingPackageAsUser$19$PackageManagerService(java.lang.String, com.android.server.pm.PackageSetting, int, android.content.IntentSender, com.android.server.pm.PackageManagerService$PackageInstalledInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        com.android.server.pm.PackageSetting r2;
        int i0, $i1, $i2;
        android.content.IntentSender r3;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo r4;
        android.content.Context $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.pm.PackageSetting;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.IntentSender;

        r4 := @parameter4: com.android.server.pm.PackageManagerService$PackageInstalledInfo;

        $i1 = virtualinvoke r2.<com.android.server.pm.PackageSetting: int getInstallReason(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearRolesAndRestorePermissionsForNewUserInstall(java.lang.String,int,int)>(r1, $i1, i0);

        if r3 == null goto label1;

        $i2 = r4.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        staticinvoke <com.android.server.pm.PackageManagerService: void onRestoreComplete(int,android.content.Context,android.content.IntentSender)>($i2, $r5, r3);

     label1:
        return;
    }

    public void lambda$loadPrivatePackages$38$PackageManagerService(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void loadPrivatePackagesInner(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    public void lambda$movePackage$40$PackageManagerService(java.lang.String, java.lang.String, int, int, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r6, r8;
        int i0, i1, $i3;
        com.android.server.pm.PackageManagerException $r2;
        java.lang.StringBuilder $r3;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r7;
        android.os.UserHandle r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r9 := @parameter4: android.os.UserHandle;

     label1:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void movePackageInternal(java.lang.String,java.lang.String,int,int,android.os.UserHandle)>(r1, r8, i0, i1, r9);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to move ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", $r6, $r2);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        $i3 = $r2.<com.android.server.pm.PackageManagerException: int error>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5200(com.android.server.pm.PackageManagerService$MoveCallbacks,int,int)>($r7, i0, $i3);

     label4:
        return;

        catch com.android.server.pm.PackageManagerException from label1 to label2 with label3;
    }

    public void lambda$movePackageInternal$41$PackageManagerService(java.util.concurrent.CountDownLatch, long, java.io.File, long, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.concurrent.CountDownLatch r1;
        long l0, l1, $l4, $l5, $l6, $l7, $l8;
        java.io.File r2;
        int i2, i3, $i9;
        boolean z0;
        java.lang.Throwable $r3, $r4;
        java.util.concurrent.TimeUnit r5;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.concurrent.CountDownLatch;

        l0 := @parameter1: long;

        r2 := @parameter2: java.io.File;

        l1 := @parameter3: long;

        i2 := @parameter4: int;

     label1:
        r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

     label2:
        z0 = virtualinvoke r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(1L, r5);

     label3:
        if z0 == 0 goto label4;

        return;

     label4:
        goto label7;

     label5:
        $r3 := @caughtexception;

        goto label7;

     label6:
        $r4 := @caughtexception;

     label7:
        $l4 = virtualinvoke r2.<java.io.File: long getUsableSpace()>();

        $l5 = l0 - $l4;

        $l6 = 80L * $l5;

        $l7 = $l6 / l1;

        $l8 = staticinvoke <android.util.MathUtils: long constrain(long,long,long)>($l7, 0L, 80L);

        i3 = (int) $l8;

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        $i9 = i3 + 10;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5200(com.android.server.pm.PackageManagerService$MoveCallbacks,int,int)>($r8, i2, $i9);

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label6;
        catch java.lang.InterruptedException from label2 to label3 with label5;
    }

    public com.android.server.pm.parsing.PackageParser2 lambda$new$10$PackageManagerService()
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.parsing.PackageParser2 $r1;
        com.android.server.pm.parsing.PackageParser2$Callback $r2;
        android.util.DisplayMetrics $r3;
        boolean $z0;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r1 = new com.android.server.pm.parsing.PackageParser2;

        $r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.String[] mSeparateProcesses>;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mOnlyCore>;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.DisplayMetrics mMetrics>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.parsing.PackageParser2$Callback mPackageParserCallback>;

        specialinvoke $r1.<com.android.server.pm.parsing.PackageParser2: void <init>(java.lang.String[],boolean,android.util.DisplayMetrics,java.io.File,com.android.server.pm.parsing.PackageParser2$Callback)>($r4, $z0, $r3, null, $r2);

        return $r1;
    }

    public boolean lambda$new$35$PackageManagerService(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, z2;
        java.lang.String $r1, r4;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        com.android.server.pm.parsing.pkg.AndroidPackage r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        $r1 = "android";

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        z2 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

        if r5 == null goto label2;

        $z1 = interfaceinvoke r5.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    public void lambda$new$8$PackageManagerService(java.util.function.BiConsumer)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.function.BiConsumer r1;
        com.android.server.pm._$$Lambda$PackageManagerService$_QIa0JiksaMBecXbVJ_nhUm9TCg $r2;
        android.content.pm.PackageManagerInternal $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.function.BiConsumer;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        $r2 = new com.android.server.pm._$$Lambda$PackageManagerService$_QIa0JiksaMBecXbVJ_nhUm9TCg;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$PackageManagerService$_QIa0JiksaMBecXbVJ_nhUm9TCg: void <init>(java.util.function.BiConsumer)>(r1);

        virtualinvoke $r3.<android.content.pm.PackageManagerInternal: void forEachPackage(java.util.function.Consumer)>($r2);

        return;
    }

    public void lambda$new$9$PackageManagerService(java.util.List, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.util.Iterator r2;
        java.lang.Object r3, $r10, r19;
        com.android.server.pm.PackageSetting r4;
        android.util.TimingsTraceLog $r5;
        java.lang.String $r6, $r9, r17;
        com.android.server.pm.Installer $r7;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8;
        com.android.server.pm.Settings $r11;
        java.lang.Throwable $r12, $r13;
        com.android.server.pm.Installer$InstallerException $r14;
        java.util.List r15;
        com.android.server.pm.parsing.pkg.AndroidPackage r18;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r5 = new android.util.TimingsTraceLog;

        specialinvoke $r5.<android.util.TimingsTraceLog: void <init>(java.lang.String,long)>("SystemServerTimingAsync", 262144L);

        virtualinvoke $r5.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("AppDataFixup");

     label01:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r6 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        virtualinvoke $r7.<com.android.server.pm.Installer: void fixupAppData(java.lang.String,int)>($r6, 3);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Trouble fixing GIDs", $r14);

     label04:
        virtualinvoke $r5.<android.util.TimingsTraceLog: void traceEnd()>();

        virtualinvoke $r5.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("AppDataPrepare");

        if r15 == null goto label22;

        $z0 = interfaceinvoke r15.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        goto label22;

     label05:
        i1 = 0;

        r2 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label21;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r10;

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label07:
        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r4 = virtualinvoke $r11.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPr(java.lang.String)>(r17);

     label08:
        r18 = null;

        if r4 == null goto label10;

        r18 = null;

     label09:
        $z2 = virtualinvoke r4.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(0);

        if $z2 == 0 goto label10;

        r18 = r4.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

     label10:
        exitmonitor r3;

     label11:
        i2 = i1;

        if r18 == null goto label17;

        r19 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r19;

     label12:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void prepareAppDataAndMigrateLIF(com.android.server.pm.parsing.pkg.AndroidPackage,int,int,boolean)>(r18, 0, i0, 1);

        exitmonitor r19;

     label13:
        i2 = i1 + 1;

        goto label17;

     label14:
        $r12 := @caughtexception;

     label15:
        exitmonitor r19;

     label16:
        throw $r12;

     label17:
        i1 = i2;

        goto label06;

     label18:
        $r13 := @caughtexception;

     label19:
        exitmonitor r3;

     label20:
        throw $r13;

     label21:
        virtualinvoke $r5.<android.util.TimingsTraceLog: void traceEnd()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deferred reconcileAppsData finished ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" packages");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r9);

        return;

     label22:
        return;

        catch com.android.server.pm.Installer$InstallerException from label01 to label02 with label03;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    public void lambda$notifyFirstLaunch$22$PackageManagerService(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, $r9;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        boolean z0, $z1;
        android.util.SparseArray $r3, $r4;
        java.lang.Object $r5;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r6, $r7, $r10, $r12;
        com.android.server.pm.parsing.pkg.AndroidPackage $r8;
        int[] $r11, $r13, r15, r16;
        com.android.server.pm.PackageManagerService$PostInstallData r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        i5 = 0;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mRunningInstalls>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i5 >= $i1 goto label06;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.SparseArray mRunningInstalls>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r14 = (com.android.server.pm.PackageManagerService$PostInstallData) $r5;

        $r6 = r14.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$PackageInstalledInfo res>;

        $i2 = $r6.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        if $i2 == 1 goto label02;

        goto label05;

     label02:
        $r7 = r14.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$PackageInstalledInfo res>;

        $r8 = $r7.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $r9 = interfaceinvoke $r8.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label05;

        i6 = 0;

     label03:
        $r10 = r14.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$PackageInstalledInfo res>;

        $r11 = $r10.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        $i3 = lengthof $r11;

        if i6 >= $i3 goto label05;

        $r12 = r14.<com.android.server.pm.PackageManagerService$PostInstallData: com.android.server.pm.PackageManagerService$PackageInstalledInfo res>;

        $r13 = $r12.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int[] newUsers>;

        $i4 = $r13[i6];

        if i0 != $i4 goto label04;

        return;

     label04:
        i6 = i6 + 1;

        goto label03;

     label05:
        i5 = i5 + 1;

        goto label01;

     label06:
        z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>(r1, i0);

        if z0 == 0 goto label07;

        r15 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        goto label08;

     label07:
        r15 = newarray (int)[1];

        r15[0] = i0;

     label08:
        if z0 == 0 goto label09;

        r16 = newarray (int)[1];

        r16[0] = i0;

        goto label10;

     label09:
        r16 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

     label10:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendFirstLaunchBroadcast(java.lang.String,java.lang.String,int[],int[])>(r1, r2, r15, r16);

        return;
    }

    public void lambda$processInstallRequestsAsync$21$PackageManagerService(boolean, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object $r1, $r8, $r12, r19;
        com.android.server.pm.PackageManagerService$InstallArgs $r2, $r6, $r11, $r14;
        android.os.UserHandle $r3;
        int $i0, $i1, $i2, $i4;
        com.android.server.pm.PackageManagerService$PostInstallData $r4;
        com.android.server.pm.PackageManagerService$PackageInstalledInfo $r5, $r7, $r9, $r10, $r13;
        java.lang.Throwable $r15;
        java.util.List r16;
        java.util.Iterator r17, r20, r23;
        com.android.server.pm.PackageManagerService$InstallRequest r18, r21, r24;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 := @parameter0: boolean;

        r16 := @parameter1: java.util.List;

        if z0 == 0 goto label09;

        r17 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label02;

        $r12 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.android.server.pm.PackageManagerService$InstallRequest) $r12;

        $r14 = r18.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $r13 = r18.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i4 = $r13.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        virtualinvoke $r14.<com.android.server.pm.PackageManagerService$InstallArgs: int doPreInstall(int)>($i4);

        goto label01;

     label02:
        r19 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r19;

     label03:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void installPackagesTracedLI(java.util.List)>(r16);

        exitmonitor r19;

     label04:
        r20 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r8 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.android.server.pm.PackageManagerService$InstallRequest) $r8;

        $r11 = r21.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $r9 = r21.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i2 = $r9.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int returnCode>;

        $r10 = r21.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $i1 = $r10.<com.android.server.pm.PackageManagerService$PackageInstalledInfo: int uid>;

        virtualinvoke $r11.<com.android.server.pm.PackageManagerService$InstallArgs: int doPostInstall(int,int)>($i2, $i1);

        goto label05;

     label06:
        $r15 := @caughtexception;

     label07:
        exitmonitor r19;

     label08:
        throw $r15;

     label09:
        r23 = interfaceinvoke r16.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r1 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.android.server.pm.PackageManagerService$InstallRequest) $r1;

        $r2 = r24.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $r3 = $r2.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        $i0 = virtualinvoke $r3.<android.os.UserHandle: int getIdentifier()>();

        $r7 = r24.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        $r4 = new com.android.server.pm.PackageManagerService$PostInstallData;

        $r6 = r24.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$InstallArgs args>;

        $r5 = r24.<com.android.server.pm.PackageManagerService$InstallRequest: com.android.server.pm.PackageManagerService$PackageInstalledInfo installResult>;

        specialinvoke $r4.<com.android.server.pm.PackageManagerService$PostInstallData: void <init>(com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo,java.lang.Runnable)>($r6, $r5, null);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void restoreAndPostInstall(int,com.android.server.pm.PackageManagerService$PackageInstalledInfo,com.android.server.pm.PackageManagerService$PostInstallData)>($i0, $r7, $r4);

        goto label10;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
    }

    public void lambda$removePackageDataLIF$27$PackageManagerService(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.PackageSetting r1;
        int $i0;
        java.lang.String $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.PackageSetting;

        $r2 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $i0 = r1.<com.android.server.pm.PackageSetting: int appId>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>($r2, $i0, "permission grant or revoke changed gids");

        return;
    }

    public void lambda$removeUnusedPackagesLPw$42$PackageManagerService(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,long,int,int)>(r1, -1L, i0, 0);

        return;
    }

    public void lambda$restoreDefaultApps$31$PackageManagerService(org.xmlpull.v1.XmlPullParser, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.pm.Settings $r2, $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        java.lang.Throwable $r5;
        org.xmlpull.v1.XmlPullParser r6;
        java.lang.String r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void readDefaultAppsLPw(org.xmlpull.v1.XmlPullParser,int)>(r6, i0);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r7 = virtualinvoke $r3.<com.android.server.pm.Settings: java.lang.String removeDefaultBrowserPackageNameLPw(int)>(i0);

        exitmonitor r1;

     label2:
        if r7 == null goto label3;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultBrowser(java.lang.String,boolean,boolean,int)>(r7, 0, 0, i0);

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lambda$restoreIntentFilterVerification$32$PackageManagerService(org.xmlpull.v1.XmlPullParser, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.pm.Settings $r2, $r3;
        java.lang.Throwable $r4;
        org.xmlpull.v1.XmlPullParser r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void readAllDomainVerificationsLPr(org.xmlpull.v1.XmlPullParser,int)>(r5, i0);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$restorePreferredActivities$30$PackageManagerService(org.xmlpull.v1.XmlPullParser, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1;
        com.android.server.pm.Settings $r2;
        java.lang.Throwable $r3;
        org.xmlpull.v1.XmlPullParser r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void readPreferredActivitiesLPw(org.xmlpull.v1.XmlPullParser,int)>(r4, i0);

        exitmonitor r1;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>(i0);

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$sendMyPackageSuspendedOrUnsuspended$20$PackageManagerService(boolean, int, java.lang.String[], java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        int i0, i1, i3;
        android.app.IActivityManager r1;
        java.lang.String r2, $r10, r12, r14;
        int[] $r4;
        android.os.Bundle $r5, r15, r16;
        java.lang.StringBuilder $r6;
        java.lang.String[] r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r11 := @parameter2: java.lang.String[];

        r12 := @parameter3: java.lang.String;

        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        if r1 != null goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IActivityManager null. Cannot send MY_PACKAGE_ ");

        if z0 == 0 goto label1;

        r14 = "";

        goto label2;

     label1:
        r14 = "UN";

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SUSPENDED broadcasts");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("PackageManager", $r10);

        return;

     label3:
        i1 = lengthof r11;

        i3 = 0;

     label4:
        if i3 >= i1 goto label9;

        r2 = r11[i3];

        if z0 == 0 goto label5;

        r15 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.os.Bundle getSuspendedPackageAppExtrasInternal(java.lang.String,int)>(r2, i0);

        goto label6;

     label5:
        r15 = null;

     label6:
        if r15 == null goto label7;

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>(int)>(1);

        virtualinvoke $r5.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("android.intent.extra.SUSPENDED_PACKAGE_EXTRAS", r15);

        r16 = $r5;

        goto label8;

     label7:
        r16 = null;

     label8:
        $r4 = newarray (int)[1];

        $r4[0] = i0;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void doSendBroadcast(android.app.IActivityManager,java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],boolean,android.util.SparseArray)>(r1, r12, null, r16, 16777216, r2, null, $r4, 0, null);

        i3 = i3 + 1;

        goto label4;

     label9:
        return;
    }

    public void lambda$sendPackageAddedForNewUsers$18$PackageManagerService(int[], java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int[] r1;
        java.lang.String r2;
        boolean z0;
        int i0, $i1, i2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: int[];

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $i1 = r1[i2];

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendBootCompletedBroadcastToSystemApp(java.lang.String,boolean,int)>(r2, z0, $i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void lambda$sendPackageBroadcast$16$PackageManagerService(int[], java.lang.String, java.lang.String, android.os.Bundle, int, java.lang.String, android.content.IIntentReceiver, android.util.SparseArray, int[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, r4;
        android.os.Bundle r3;
        int i0;
        android.content.IIntentReceiver r5;
        android.util.SparseArray r6;
        int[] r7, $r9, r11;
        android.app.IActivityManager r8;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: int[];

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        i0 := @parameter4: int;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: android.content.IIntentReceiver;

        r6 := @parameter7: android.util.SparseArray;

        r7 := @parameter8: int[];

     label01:
        r8 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label02:
        if r8 != null goto label03;

        return;

     label03:
        if r11 != null goto label06;

     label04:
        r11 = interfaceinvoke r8.<android.app.IActivityManager: int[] getRunningUserIds()>();

     label05:
        goto label06;

     label06:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void doSendBroadcast(android.app.IActivityManager,java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],boolean,android.util.SparseArray)>(r8, r1, r2, r3, i0, r4, r5, r11, 0, r6);

     label07:
        if r7 == null goto label09;

     label08:
        $r9 = <com.android.server.pm.PackageManagerService: int[] EMPTY_INT_ARRAY>;

        if r7 == $r9 goto label09;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void doSendBroadcast(android.app.IActivityManager,java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],boolean,android.util.SparseArray)>(r8, r1, r2, r3, i0, r4, r5, r7, 1, null);

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        return;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label04 to label05 with label10;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
    }

    public void lambda$systemReady$37$PackageManagerService(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Object r1;
        java.lang.String $r3;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r3 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updateAllPermissions(java.lang.String,boolean)>($r3, 0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void lambda$unloadPrivatePackages$39$PackageManagerService(android.os.storage.VolumeInfo)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.storage.VolumeInfo r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.os.storage.VolumeInfo;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void unloadPrivatePackagesInner(android.os.storage.VolumeInfo)>(r1);

        return;
    }

    public void lambda$updateDefaultHomeNotLocked$33$PackageManagerService(int, java.lang.Boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.Boolean r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Boolean;

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(i0);

     label1:
        return;
    }

    public void logAppProcessStartIfNeeded(java.lang.String, int, java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        java.lang.String r1, r2, $r4, r8;
        boolean $z0;
        android.os.Bundle $r5;
        long $l3;
        com.android.server.pm.ProcessLoggingHandler $r6, $r7;
        android.os.Message r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i2);

        if $r4 == null goto label1;

        return;

     label1:
        $z0 = staticinvoke <android.app.admin.SecurityLog: boolean isLoggingEnabled()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>()>();

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r5.<android.os.Bundle: void putLong(java.lang.String,long)>("startTimestamp", $l3);

        virtualinvoke $r5.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("processName", r8);

        virtualinvoke $r5.<android.os.Bundle: void putInt(java.lang.String,int)>("uid", i0);

        virtualinvoke $r5.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("seinfo", r1);

        virtualinvoke $r5.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("apkFile", r2);

        virtualinvoke $r5.<android.os.Bundle: void putInt(java.lang.String,int)>("pid", i1);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProcessLoggingHandler mProcessLoggingHandler>;

        r9 = virtualinvoke $r6.<com.android.server.pm.ProcessLoggingHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r9.<android.os.Message: void setData(android.os.Bundle)>($r5);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProcessLoggingHandler mProcessLoggingHandler>;

        virtualinvoke $r7.<com.android.server.pm.ProcessLoggingHandler: boolean sendMessage(android.os.Message)>(r9);

        return;
    }

    public int movePackage(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0, i1, $i2;
        android.content.Context $r4;
        android.os.UserHandle $r5;
        java.util.concurrent.atomic.AtomicInteger $r6;
        com.android.server.pm._$$Lambda$PackageManagerService$Mtahsr42dH18eRuAJ0J6DzShLys $r7;
        android.os.Handler $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOVE_PACKAGE", null);

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = new android.os.UserHandle;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        specialinvoke $r5.<android.os.UserHandle: void <init>(int)>($i2);

        $r6 = r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId>;

        i1 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r7 = new com.android.server.pm._$$Lambda$PackageManagerService$Mtahsr42dH18eRuAJ0J6DzShLys;

        specialinvoke $r7.<com.android.server.pm._$$Lambda$PackageManagerService$Mtahsr42dH18eRuAJ0J6DzShLys: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String,int,int,android.os.UserHandle)>(r0, r1, r2, i1, i0, $r5);

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r7);

        return i1;
    }

    public int movePrimaryStorage(java.lang.String) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0;
        android.content.Context $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        android.os.Bundle $r4;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r5;
        com.android.server.pm.PackageManagerService$10 $r6;
        com.android.server.pm.PackageManagerService$Injector $r7;
        android.os.storage.StorageManager $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOVE_PACKAGE", null);

        $r3 = r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.atomic.AtomicInteger mNextMoveId>;

        i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.os.storage.extra.FS_UUID", r1);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        staticinvoke <com.android.server.pm.PackageManagerService$MoveCallbacks: void access$5100(com.android.server.pm.PackageManagerService$MoveCallbacks,int,android.os.Bundle)>($r5, i0, $r4);

        $r6 = new com.android.server.pm.PackageManagerService$10;

        specialinvoke $r6.<com.android.server.pm.PackageManagerService$10: void <init>(com.android.server.pm.PackageManagerService,int)>(r0, i0);

        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r8 = virtualinvoke $r7.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        virtualinvoke $r8.<android.os.storage.StorageManager: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>(r1, $r6);

        return i0;
    }

    public void notifyDexLoad(java.lang.String, java.util.Map, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r3, $r10, $r14, r15;
        int i0, $i2, $i3;
        android.content.pm.ApplicationInfo r2;
        boolean $z0;
        com.android.server.pm.dex.DexManager $r4;
        java.lang.StringBuilder $r5, $r11;
        java.util.Map r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: java.util.Map;

        r1 := @parameter2: java.lang.String;

        $r3 = "android";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z0 == 0 goto label1;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 == 1000 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Non System Server process reporting dex loads as system server. uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r14);

        return;

     label1:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r15, 0, i0);

        if r2 != null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading a package that does not exist for the calling user. package=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", user=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

        return;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        virtualinvoke $r4.<com.android.server.pm.dex.DexManager: void notifyDexLoad(android.content.pm.ApplicationInfo,java.util.Map,java.lang.String,int)>(r2, r16, r1, i0);

        return;
    }

    void notifyFirstLaunch(java.lang.String, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.server.pm._$$Lambda$PackageManagerService$J0eEFDuLDZBCGkS0UBLQaQGBMN8 $r3;
        android.os.Handler $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r3 = new com.android.server.pm._$$Lambda$PackageManagerService$J0eEFDuLDZBCGkS0UBLQaQGBMN8;

        specialinvoke $r3.<com.android.server.pm._$$Lambda$PackageManagerService$J0eEFDuLDZBCGkS0UBLQaQGBMN8: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,java.lang.String)>(r0, r1, i0, r2);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    public void notifyPackageAdded(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r1;
        android.util.ArraySet $r2, $r3, $r4;
        java.lang.Object[] $r5;
        android.content.pm.PackageManagerInternal$PackageListObserver $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;
        android.content.pm.PackageManagerInternal$PackageListObserver[] r9, r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $i1 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $i2 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        r9 = newarray (android.content.pm.PackageManagerInternal$PackageListObserver)[$i2];

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        r10 = (android.content.pm.PackageManagerInternal$PackageListObserver[]) $r5;

        exitmonitor r1;

     label4:
        $i3 = lengthof r10;

        i4 = $i3 - 1;

     label5:
        if i4 < 0 goto label6;

        $r6 = r10[i4];

        interfaceinvoke $r6.<android.content.pm.PackageManagerInternal$PackageListObserver: void onPackageAdded(java.lang.String,int)>(r8, i0);

        i4 = i4 + -1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyPackageChanged(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r1;
        android.util.ArraySet $r2, $r3, $r4;
        java.lang.Object[] $r5;
        android.content.pm.PackageManagerInternal$PackageListObserver $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;
        android.content.pm.PackageManagerInternal$PackageListObserver[] r9, r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $i1 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $i2 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        r9 = newarray (android.content.pm.PackageManagerInternal$PackageListObserver)[$i2];

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        r10 = (android.content.pm.PackageManagerInternal$PackageListObserver[]) $r5;

        exitmonitor r1;

     label4:
        $i3 = lengthof r10;

        i4 = $i3 - 1;

     label5:
        if i4 < 0 goto label6;

        $r6 = r10[i4];

        interfaceinvoke $r6.<android.content.pm.PackageManagerInternal$PackageListObserver: void onPackageChanged(java.lang.String,int)>(r8, i0);

        i4 = i4 + -1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyPackageRemoved(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object r1;
        android.util.ArraySet $r2, $r3, $r4;
        java.lang.Object[] $r5;
        android.content.pm.PackageManagerInternal$PackageListObserver $r6;
        java.lang.Throwable $r7;
        java.lang.String r8;
        android.content.pm.PackageManagerInternal$PackageListObserver[] r9, r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $i1 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i1 != 0 goto label3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $i2 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        r9 = newarray (android.content.pm.PackageManagerInternal$PackageListObserver)[$i2];

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mPackageListObservers>;

        $r5 = virtualinvoke $r4.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        r10 = (android.content.pm.PackageManagerInternal$PackageListObserver[]) $r5;

        exitmonitor r1;

     label4:
        $i3 = lengthof r10;

        i4 = $i3 - 1;

     label5:
        if i4 < 0 goto label6;

        $r6 = r10[i4];

        interfaceinvoke $r6.<android.content.pm.PackageManagerInternal$PackageListObserver: void onPackageRemoved(java.lang.String,int)>(r8, i0);

        i4 = i4 + -1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyPackageUse(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2;
        java.lang.Object r1;
        java.lang.String $r2, r4;
        boolean $z0, $z1;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r2 == null goto label3;

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r4, i1);

        if $z1 != 0 goto label5;

        exitmonitor r1;

     label2:
        return;

     label3:
        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>(r4, i2);

        if $z0 == 0 goto label5;

        exitmonitor r1;

     label4:
        return;

     label5:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyPackageUseLocked(java.lang.String,int)>(r4, i0);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void notifyPackagesReplacedReceived(java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String[] r1;
        int i0, i1, i2, i3;
        java.lang.String r2;
        com.android.server.pm.PackageSetting r3;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String[];

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        i2 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        r2 = r1[i3];

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.pm.PackageSetting) $r6;

        if r3 == null goto label2;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r3, i0, i1);

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void notifyInstallObserver(java.lang.String)>(r2);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    void onNewUserCreated(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r1.<com.android.server.pm.permission.PermissionManagerServiceInternal: void onNewUserCreated(int)>(i0);

        return;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.pm.PackageManagerShellCommand $r7;
        android.permission.IPermissionManager $r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.pm.PackageManagerShellCommand;

        $r8 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        specialinvoke $r7.<com.android.server.pm.PackageManagerShellCommand: void <init>(com.android.server.pm.PackageManagerService,android.permission.IPermissionManager)>(r0, $r8);

        virtualinvoke $r7.<com.android.server.pm.PackageManagerShellCommand: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        android.os.Parcel r1, r3;
        boolean z0, $z1, $z2;
        java.lang.RuntimeException $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r3 := @parameter1: android.os.Parcel;

        r1 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        z0 = specialinvoke r0.<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r3, r1, i1);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        $z1 = $r2 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        $z2 = $r2 instanceof java.lang.IllegalArgumentException;

        if $z2 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Package Manager Crash", $r2);

     label4:
        throw $r2;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void overrideLabelAndIcon(android.content.ComponentName, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>(r1, r2, $r4, i1);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Override label should be a valid String");

        throw $r3;
    }

    boolean performDexOpt(com.android.server.pm.dex.DexoptOptions)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.dex.DexoptOptions r1;
        java.lang.String r2, $r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, z3;
        com.android.server.pm.dex.DexManager $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.dex.DexoptOptions;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        z3 = 0;

        if r2 == null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r1.<com.android.server.pm.dex.DexoptOptions: java.lang.String getPackageName()>();

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>($r3, $i1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.pm.dex.DexoptOptions: boolean isDexoptOnlySecondaryDex()>();

        if $z1 == 0 goto label3;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        $z2 = virtualinvoke $r4.<com.android.server.pm.dex.DexManager: boolean dexoptSecondaryDex(com.android.server.pm.dex.DexoptOptions)>(r1);

        return $z2;

     label3:
        $i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int performDexOptWithStatus(com.android.server.pm.dex.DexoptOptions)>(r1);

        if $i2 == -1 goto label4;

        z3 = 1;

     label4:
        return z3;
    }

    public boolean performDexOptMode(java.lang.String, boolean, java.lang.String, boolean, boolean, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, r3;
        boolean z0, z1, z2, $z3;
        com.android.server.pm.dex.DexoptOptions $r4;
        int $i0, $i1, i2, i3, i4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        r3 := @parameter5: java.lang.String;

        i2 = 0;

        if z1 == 0 goto label1;

        i3 = 2;

        goto label2;

     label1:
        i3 = 0;

     label2:
        if z2 == 0 goto label3;

        i2 = 4;

     label3:
        $r4 = new com.android.server.pm.dex.DexoptOptions;

        i4 = (int) z0;

        $i0 = i3 | i4;

        $i1 = i2 | $i0;

        specialinvoke $r4.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)>(r1, -1, r2, r3, $i1);

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean performDexOpt(com.android.server.pm.dex.DexoptOptions)>($r4);

        return $z3;
    }

    public boolean performDexOptSecondary(java.lang.String, java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        boolean z0, $z1;
        com.android.server.pm.dex.DexoptOptions $r3;
        byte $b0, b1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        b1 = 2;

        goto label2;

     label1:
        b1 = 0;

     label2:
        $r3 = new com.android.server.pm.dex.DexoptOptions;

        $b0 = b1 | 13;

        specialinvoke $r3.<com.android.server.pm.dex.DexoptOptions: void <init>(java.lang.String,java.lang.String,int)>(r1, r2, $b0);

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean performDexOpt(com.android.server.pm.dex.DexoptOptions)>($r3);

        return $z1;
    }

    int performDexOptWithStatus(com.android.server.pm.dex.DexoptOptions)
    {
        com.android.server.pm.PackageManagerService r0;
        com.android.server.pm.dex.DexoptOptions r1;
        int $i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: com.android.server.pm.dex.DexoptOptions;

        $i0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int performDexOptTraced(com.android.server.pm.dex.DexoptOptions)>(r1);

        return $i0;
    }

    public void performFstrimIfNeeded()
    {
        com.android.server.pm.PackageManagerService r0;
        long l0, l1, $l4, $l5;
        boolean z1, z2, z3;
        android.content.Context $r1, $r4;
        android.content.ContentResolver $r2;
        byte $b3, $b6;
        android.app.IActivityManager $r3;
        android.content.res.Resources $r5;
        java.lang.String $r6, $r10;
        java.lang.Throwable $r11;
        android.os.RemoteException $r12, $r13;
        android.os.storage.IStorageManager r14;
        java.lang.StringBuilder r15;
        java.lang.Object r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can request fstrim");

     label01:
        r14 = staticinvoke <com.android.internal.content.PackageHelper: android.os.storage.IStorageManager getStorageManager()>();

     label02:
        if r14 == null goto label22;

     label03:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l0 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, "fstrim_mandatory_interval", 259200000L);

     label04:
        z3 = 0;

        $b3 = l0 cmp 0L;

        if $b3 <= 0 goto label08;

     label05:
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = interfaceinvoke r14.<android.os.storage.IStorageManager: long lastMaintenance()>();

        l1 = $l4 - $l5;

     label06:
        z3 = 0;

        $b6 = l1 cmp l0;

        if $b6 <= 0 goto label08;

        z3 = 1;

     label07:
        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No disk maintenance in ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; running immediately");

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r10);

     label08:
        if z3 == 0 goto label21;

     label09:
        r16 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r16;

     label10:
        z1 = r0.<com.android.server.pm.PackageManagerService: boolean mDexOptDialogShown>;

        exitmonitor r16;

     label11:
        z2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

     label12:
        if z2 != 0 goto label16;

        if z1 == 0 goto label16;

     label13:
        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(17039634);

        interfaceinvoke $r3.<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)>($r6, 1);

     label14:
        goto label16;

     label15:
        $r12 := @caughtexception;

     label16:
        interfaceinvoke r14.<android.os.storage.IStorageManager: void runMaintenance()>();

     label17:
        goto label21;

     label18:
        $r11 := @caughtexception;

     label19:
        exitmonitor r16;

     label20:
        throw $r11;

     label21:
        goto label23;

     label22:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "storageManager service unavailable!");

     label23:
        goto label25;

     label24:
        $r13 := @caughtexception;

     label25:
        return;

        catch android.os.RemoteException from label01 to label02 with label24;
        catch android.os.RemoteException from label03 to label04 with label24;
        catch android.os.RemoteException from label05 to label06 with label24;
        catch android.os.RemoteException from label07 to label08 with label24;
        catch android.os.RemoteException from label09 to label10 with label24;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch android.os.RemoteException from label11 to label12 with label24;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch android.os.RemoteException from label16 to label17 with label24;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch android.os.RemoteException from label20 to label21 with label24;
        catch android.os.RemoteException from label22 to label23 with label24;
    }

    public android.content.pm.ParceledListSlice queryContentProviders(java.lang.String, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, i3, i4, i5, i6, i7;
        java.util.List r1;
        java.lang.Object r2, $r10, $r15;
        android.content.pm.ProviderInfo r3;
        com.android.server.pm.PackageSetting r4;
        com.android.server.pm.UserManagerService $r5;
        boolean $z0, $z1, $z2;
        com.android.server.pm.ComponentResolver $r6;
        android.content.pm.ParceledListSlice $r7, $r9, $r18;
        java.util.Comparator $r8;
        com.android.server.pm.Settings $r11, $r12;
        java.lang.String $r13, $r16, $r17, r20, r21;
        android.util.ArrayMap $r14;
        java.lang.Throwable $r19;
        java.util.ArrayList r22, r24;
        android.content.ComponentName r23;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r20 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        i4 := @parameter2: int;

        r21 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if r20 == null goto label01;

        i5 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i3);

        goto label02;

     label01:
        i5 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label02:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r5.<com.android.server.pm.UserManagerService: boolean exists(int)>(i5);

        if $z0 != 0 goto label03;

        $r18 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r18;

     label03:
        i1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i4, i5);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        r1 = virtualinvoke $r6.<com.android.server.pm.ComponentResolver: java.util.List queryProviders(java.lang.String,java.lang.String,int,int,int)>(r20, r21, i3, i1, i5);

        if r1 != null goto label04;

        i6 = 0;

        goto label05;

     label04:
        i6 = interfaceinvoke r1.<java.util.List: int size()>();

     label05:
        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

        r22 = null;

        i7 = 0;

     label06:
        if i7 >= i6 goto label16;

     label07:
        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        r3 = (android.content.pm.ProviderInfo) $r10;

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $z1 = virtualinvoke $r11.<com.android.server.pm.Settings: boolean isEnabledAndMatchLPr(android.content.pm.ComponentInfo,int,int)>(r3, i1, i5);

        if $z1 != 0 goto label09;

     label08:
        goto label15;

     label09:
        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r13 = r3.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r13);

        r4 = (com.android.server.pm.PackageSetting) $r15;

        r23 = new android.content.ComponentName;

        $r17 = r3.<android.content.pm.ProviderInfo: java.lang.String packageName>;

        $r16 = r3.<android.content.pm.ProviderInfo: java.lang.String name>;

        specialinvoke r23.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r17, $r16);

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,android.content.ComponentName,int,int)>(r4, i0, r23, 4, i5);

        if $z2 == 0 goto label11;

     label10:
        goto label15;

     label11:
        r24 = r22;

        if r22 != null goto label13;

     label12:
        r24 = new java.util.ArrayList;

        $i2 = i6 - i7;

        specialinvoke r24.<java.util.ArrayList: void <init>(int)>($i2);

     label13:
        virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label14:
        r22 = r24;

     label15:
        i7 = i7 + 1;

        goto label06;

     label16:
        exitmonitor r2;

     label17:
        if r22 == null goto label18;

        $r8 = <com.android.server.pm.PackageManagerService: java.util.Comparator sProviderInitOrderSorter>;

        virtualinvoke r22.<java.util.ArrayList: void sort(java.util.Comparator)>($r8);

        $r9 = new android.content.pm.ParceledListSlice;

        specialinvoke $r9.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r22);

        return $r9;

     label18:
        $r7 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r7;

     label19:
        $r19 := @caughtexception;

     label20:
        exitmonitor r2;

     label21:
        throw $r19;

        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public android.content.pm.ParceledListSlice queryInstrumentation(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1, i2;
        com.android.server.pm.Settings $r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        com.android.server.pm.PackageSetting $r5;
        boolean $z0;
        android.content.pm.ParceledListSlice $r6, $r8;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (com.android.server.pm.PackageSetting) $r4;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r5, i1, i2);

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <android.content.pm.ParceledListSlice: android.content.pm.ParceledListSlice emptyList()>();

        return $r8;

     label1:
        $r6 = new android.content.pm.ParceledListSlice;

        $r7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryInstrumentationInternal(java.lang.String,int,int)>(r1, i0, i2);

        specialinvoke $r6.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r7);

        return $r6;
    }

    public android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        android.content.pm.ParceledListSlice $r2;
        java.util.List $r3;
        java.lang.Throwable $r4;
        android.content.Intent r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, "queryIntentActivities");

        $r2 = new android.content.pm.ParceledListSlice;

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>(r5, r1, i0, i1);

        specialinvoke $r2.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r3);

     label2:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        return $r2;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], java.lang.String[], android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        android.content.Intent[] r2;
        java.lang.String[] r3;
        android.content.Intent r4;
        java.lang.String r5;
        int i0, i1;
        android.content.pm.ParceledListSlice $r6;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.Intent[];

        r3 := @parameter2: java.lang.String[];

        r4 := @parameter3: android.content.Intent;

        r5 := @parameter4: java.lang.String;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        $r6 = new android.content.pm.ParceledListSlice;

        $r7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptionsInternal(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int,int)>(r1, r2, r3, r4, r5, i0, i1);

        specialinvoke $r6.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r7);

        return $r6;
    }

    public android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1;
        android.content.pm.ParceledListSlice $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new android.content.pm.ParceledListSlice;

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentContentProvidersInternal(android.content.Intent,java.lang.String,int,int)>(r1, r2, i0, i1);

        specialinvoke $r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r4);

        return $r3;
    }

    public android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1;
        android.content.pm.ParceledListSlice $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new android.content.pm.ParceledListSlice;

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceiversInternal(android.content.Intent,java.lang.String,int,int,boolean)>(r1, r2, i0, i1, 0);

        specialinvoke $r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r4);

        return $r3;
    }

    public android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, $i2;
        android.content.pm.ParceledListSlice $r3;
        java.util.List $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new android.content.pm.ParceledListSlice;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentServicesInternal(android.content.Intent,java.lang.String,int,int,int,boolean)>(r1, r2, i0, i1, $i2, 0);

        specialinvoke $r3.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>($r4);

        return $r3;
    }

    public void querySyncProviders(java.util.List, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.List r1, r2;
        int $i0, $i1;
        java.lang.String $r3;
        com.android.server.pm.ComponentResolver $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $z0 = r0.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke $r4.<com.android.server.pm.ComponentResolver: void querySyncProviders(java.util.List,java.util.List,boolean,int)>(r1, r2, $z0, $i1);

        return;
    }

    boolean readPermissionStateForUser(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.util.ArrayMap r1;
        boolean z0;
        com.android.server.pm.Settings $r3;
        android.content.pm.PackageManagerInternal $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void readPermissionStateForUserSyncLPr(int)>(i0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.pm.PackageManagerInternal mPmInternal>;

        z0 = virtualinvoke $r4.<android.content.pm.PackageManagerInternal: boolean isPermissionUpgradeNeeded(int)>(i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void reconcileAppsData(int, int, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean z0, $z1;
        java.util.Iterator r1;
        java.lang.Object r2, $r6;
        com.android.server.pm.PackageManagerService$Injector $r3;
        android.os.storage.StorageManager $r4;
        java.util.List $r5;
        android.os.storage.VolumeInfo $r7;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r4 = virtualinvoke $r3.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r5 = virtualinvoke $r4.<android.os.storage.StorageManager: java.util.List getWritablePrivateVolumes()>();

        r1 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.os.storage.VolumeInfo) $r6;

        r9 = virtualinvoke $r7.<android.os.storage.VolumeInfo: java.lang.String getFsUuid()>();

        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mInstallLock>;

        entermonitor r2;

     label2:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void reconcileAppsDataLI(java.lang.String,int,int,boolean)>(r9, i0, i1, z0);

        exitmonitor r2;

     label3:
        goto label1;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r8;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void reconcileSecondaryDexFiles(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r2;
        int $i0, $i1;
        boolean $z0;
        com.android.server.pm.dex.DexManager $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i0);

        if $r2 == null goto label1;

        return;

     label1:
        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isInstantApp(java.lang.String,int)>(r1, $i1);

        if $z0 == 0 goto label2;

        return;

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        virtualinvoke $r3.<com.android.server.pm.dex.DexManager: void reconcileSecondaryDexFiles(java.lang.String)>(r1);

        return;
    }

    public void registerDexModule(java.lang.String, java.lang.String, boolean, android.content.pm.IDexModuleRegisterCallback)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, $r11, r13;
        boolean z0;
        android.content.pm.IDexModuleRegisterCallback r2;
        int i0;
        com.android.server.pm.dex.DexManager $r3;
        com.android.server.pm._$$Lambda$PackageManagerService$iz2vlJQDwixv3BxhvrGhNONDT48 $r4;
        android.os.Handler $r5;
        java.lang.StringBuilder $r6;
        com.android.server.pm.dex.DexManager$RegisterDexModuleResult $r12, r16;
        android.content.pm.ApplicationInfo r14;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r2 := @parameter3: android.content.pm.IDexModuleRegisterCallback;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r14 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r13, 0, i0);

        if r14 != null goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Registering a dex module for a package that does not exist for the calling user. package=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", user=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r11);

        $r12 = new com.android.server.pm.dex.DexManager$RegisterDexModuleResult;

        specialinvoke $r12.<com.android.server.pm.dex.DexManager$RegisterDexModuleResult: void <init>(boolean,java.lang.String)>(0, "Package not installed");

        r16 = $r12;

        goto label2;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        r16 = virtualinvoke $r3.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.DexManager$RegisterDexModuleResult registerDexModule(android.content.pm.ApplicationInfo,java.lang.String,boolean,int)>(r14, r1, z0, i0);

     label2:
        if r2 == null goto label3;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r4 = new com.android.server.pm._$$Lambda$PackageManagerService$iz2vlJQDwixv3BxhvrGhNONDT48;

        specialinvoke $r4.<com.android.server.pm._$$Lambda$PackageManagerService$iz2vlJQDwixv3BxhvrGhNONDT48: void <init>(android.content.pm.IDexModuleRegisterCallback,java.lang.String,com.android.server.pm.dex.DexManager$RegisterDexModuleResult)>(r2, r1, r16);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

     label3:
        return;
    }

    public void registerMoveCallback(android.content.pm.IPackageMoveObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.IPackageMoveObserver r1;
        android.content.Context $r2;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.IPackageMoveObserver;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$MoveCallbacks: void register(android.content.pm.IPackageMoveObserver)>(r1);

        return;
    }

    void removeAllDistractingPackageRestrictions(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        android.util.ArrayMap $r2, $r4;
        java.util.Set $r3;
        java.lang.String[] $r5, r8;
        java.lang.Object[] $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.util.Set keySet()>();

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i1 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        $r5 = newarray (java.lang.String)[$i1];

        $r6 = interfaceinvoke $r3.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r8 = (java.lang.String[]) $r6;

        exitmonitor r1;

     label2:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeDistractingPackageRestrictions(java.lang.String[],int)>(r8, i0);

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void removeCodePathLI(java.io.File)
    {
        com.android.server.pm.PackageManagerService r0;
        java.io.File r1, r8;
        boolean $z0, $z2;
        com.android.server.pm.Installer $r2, $r5;
        java.lang.String $r3, $r4, $r6;
        com.android.server.pm.Installer$InstallerException $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.io.File;

        $z0 = virtualinvoke r8.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label5;

        r1 = virtualinvoke r8.<java.io.File: java.io.File getParentFile()>();

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r3 = virtualinvoke r8.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r2.<com.android.server.pm.Installer: void rmPackageDir(java.lang.String)>($r3);

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("~~");

        if $z2 == 0 goto label2;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r5.<com.android.server.pm.Installer: void rmPackageDir(java.lang.String)>($r6);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to remove code path", $r7);

     label4:
        goto label6;

     label5:
        virtualinvoke r8.<java.io.File: boolean delete()>();

     label6:
        return;

        catch com.android.server.pm.Installer$InstallerException from label1 to label2 with label3;
    }

    void removeDexFiles(java.util.List, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r10;
        int i0, i1;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r2;
        java.lang.Object $r3;
        com.android.server.pm.Installer $r4;
        com.android.server.pm.Installer$InstallerException $r5;
        java.util.List r6;
        java.lang.String[] r7, r8;
        java.util.Iterator r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.util.List;

        r7 := @parameter1: java.lang.String[];

        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label9;

        if r7 == null goto label8;

        r8 = staticinvoke <com.android.server.pm.InstructionSets: java.lang.String[] getDexCodeInstructionSets(java.lang.String[])>(r7);

        r9 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r3 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r3;

        i0 = lengthof r8;

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        r10 = r8[i1];

     label3:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        virtualinvoke $r4.<com.android.server.pm.Installer: void rmdex(java.lang.String,java.lang.String)>(r1, r10);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        goto label1;

     label8:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("instructionSet == null");

        throw $r2;

     label9:
        return;

        catch com.android.server.pm.Installer$InstallerException from label3 to label4 with label5;
    }

    void removeDistractingPackageRestrictions(java.lang.String[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Object r3, $r12;
        java.util.ArrayList $r4;
        android.util.IntArray $r5;
        boolean $z0;
        java.lang.String[] $r6, $r8, r15;
        java.lang.Object[] $r7;
        int[] $r9;
        com.android.server.pm.Settings $r10;
        android.util.ArrayMap $r11;
        java.lang.String $r13, r16;
        java.lang.Throwable $r14;
        com.android.server.pm.PackageSetting r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new android.util.IntArray;

        specialinvoke $r5.<android.util.IntArray: void <init>()>();

        r3 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        i1 = lengthof r15;

     label02:
        i6 = 0;

     label03:
        if i6 >= i1 goto label08;

        r16 = r15[i6];

     label04:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (com.android.server.pm.PackageSetting) $r12;

     label05:
        if r17 == null goto label07;

     label06:
        $i3 = virtualinvoke r17.<com.android.server.pm.PackageSetting: int getDistractionFlags(int)>(i0);

        if $i3 == 0 goto label07;

        virtualinvoke r17.<com.android.server.pm.PackageSetting: void setDistractionFlags(int,int)>(0, i0);

        $r13 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r13);

        $i4 = virtualinvoke r17.<com.android.server.pm.PackageSetting: int getAppId()>();

        $i5 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i4);

        virtualinvoke $r5.<android.util.IntArray: void add(int)>($i5);

     label07:
        i6 = i6 + 1;

        goto label03;

     label08:
        $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

     label09:
        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r6 = newarray (java.lang.String)[$i2];

        $r7 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.String[]) $r7;

        $r9 = virtualinvoke $r5.<android.util.IntArray: int[] toArray()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendDistractingPackagesChanged(java.lang.String[],int[],int,int)>($r8, $r9, i0, 0);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

     label10:
        exitmonitor r3;

     label11:
        return;

     label12:
        $r14 := @caughtexception;

     label13:
        exitmonitor r3;

     label14:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void removePackageLI(java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        java.lang.Object r1, $r3;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;
        com.android.server.pm.parsing.pkg.AndroidPackage r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r5 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r5);

        r6 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r3;

     label2:
        if r6 == null goto label4;

     label3:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void cleanPackageDataStructuresLILPw(com.android.server.pm.parsing.pkg.AndroidPackage,boolean)>(r6, z0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void removePermission(java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        android.permission.IPermissionManager $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.server.pm.PackageManagerService: android.permission.IPermissionManager mPermissionManagerService>;

        interfaceinvoke $r1.<android.permission.IPermissionManager: void removePermission(java.lang.String)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void removeSuspensionsBySuspendingPackage(java.lang.String[], java.util.function.Predicate, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.function.Predicate r1;
        int i0, i1, $i2, $i3, $i4, i5;
        java.lang.Object r4, $r12;
        java.util.ArrayList $r5;
        android.util.IntArray $r6;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r7, r15, r18;
        java.lang.Object[] $r8;
        int[] $r9;
        com.android.server.pm.Settings $r10;
        android.util.ArrayMap $r11;
        java.lang.String $r13, r16;
        java.lang.Throwable $r14;
        com.android.server.pm.PackageSetting r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r15 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.util.function.Predicate;

        i0 := @parameter2: int;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new android.util.IntArray;

        specialinvoke $r6.<android.util.IntArray: void <init>()>();

        r4 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r4;

     label01:
        i1 = lengthof r15;

     label02:
        i5 = 0;

     label03:
        if i5 >= i1 goto label08;

        r16 = r15[i5];

     label04:
        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r12 = virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r16);

        r17 = (com.android.server.pm.PackageSetting) $r12;

     label05:
        if r17 == null goto label07;

     label06:
        $z1 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean getSuspended(int)>(i0);

        if $z1 == 0 goto label07;

        virtualinvoke r17.<com.android.server.pm.PackageSetting: void removeSuspension(java.util.function.Predicate,int)>(r1, i0);

        $z2 = virtualinvoke r17.<com.android.server.pm.PackageSetting: boolean getSuspended(int)>(i0);

        if $z2 != 0 goto label07;

        $r13 = r17.<com.android.server.pm.PackageSetting: java.lang.String name>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r13);

        $i3 = virtualinvoke r17.<com.android.server.pm.PackageSetting: int getAppId()>();

        $i4 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i3);

        virtualinvoke $r6.<android.util.IntArray: void add(int)>($i4);

     label07:
        i5 = i5 + 1;

        goto label03;

     label08:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r4;

     label09:
        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $i2 = interfaceinvoke $r5.<java.util.List: int size()>();

        $r7 = newarray (java.lang.String)[$i2];

        $r8 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        r18 = (java.lang.String[]) $r8;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendMyPackageSuspendedOrUnsuspended(java.lang.String[],boolean,int)>(r18, 0, i0);

        $r9 = virtualinvoke $r6.<android.util.IntArray: int[] toArray()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackagesSuspendedForUser(java.lang.String[],int[],int,boolean)>(r18, $r9, i0, 0);

     label10:
        return;

     label11:
        $r14 := @caughtexception;

     label12:
        exitmonitor r4;

     label13:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i15, i16;
        android.content.ComponentName[] r1;
        android.content.ComponentName r2, r33;
        java.util.ArrayList r3;
        com.android.server.pm.PreferredActivity r4, $r11;
        java.lang.IllegalArgumentException $r5, $r36;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r6;
        android.content.Context $r7, $r16;
        com.android.server.pm.Settings $r8;
        java.lang.Object $r9, $r10, $r12, r27, r30;
        com.android.server.pm.PreferredComponent $r13, $r14, $r15, r34;
        boolean $z0, $z1, $z2;
        java.lang.String $r19;
        java.lang.Throwable $r20, $r21, $r22, $r23, $r24, $r25, r35;
        android.content.IntentFilter r26;
        java.lang.StringBuilder r28;
        android.util.SparseArray r31;
        com.android.server.pm.PreferredIntentResolver r32;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r26 := @parameter0: android.content.IntentFilter;

        i0 := @parameter1: int;

        r1 := @parameter2: android.content.ComponentName[];

        r2 := @parameter3: android.content.ComponentName;

        i1 := @parameter4: int;

        $i2 = virtualinvoke r26.<android.content.IntentFilter: int countActions()>();

        if $i2 != 1 goto label39;

        $i3 = virtualinvoke r26.<android.content.IntentFilter: int countDataAuthorities()>();

        if $i3 != 0 goto label38;

        $i4 = virtualinvoke r26.<android.content.IntentFilter: int countDataPaths()>();

        if $i4 != 0 goto label37;

        $i5 = virtualinvoke r26.<android.content.IntentFilter: int countDataSchemes()>();

        if $i5 > 1 goto label36;

        $i6 = virtualinvoke r26.<android.content.IntentFilter: int countDataTypes()>();

        if $i6 != 0 goto label35;

        i15 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r6.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i15, i1, 1, 0, "replace preferred activity");

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i7 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS");

        if $i7 == 0 goto label08;

        r27 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r27;

     label01:
        $i12 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>(i15);

        if $i12 >= 8 goto label03;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring replacePreferredActivity() from uid ");

        $i13 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r19 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r19);

        exitmonitor r27;

     label02:
        return;

     label03:
        exitmonitor r27;

     label04:
        $r16 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r16.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        goto label08;

     label05:
        $r25 := @caughtexception;

     label06:
        exitmonitor r27;

     label07:
        throw $r25;

     label08:
        r30 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r30;

     label09:
        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r31 = $r8.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

     label10:
        $r9 = virtualinvoke r31.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r32 = (com.android.server.pm.PreferredIntentResolver) $r9;

     label11:
        if r32 == null goto label27;

     label12:
        r3 = virtualinvoke r32.<com.android.server.pm.PreferredIntentResolver: java.util.ArrayList findFilters(android.content.IntentFilter)>(r26);

     label13:
        if r3 == null goto label21;

     label14:
        $i9 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        if $i9 != 1 goto label21;

        $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r4 = (com.android.server.pm.PreferredActivity) $r12;

        $r13 = r4.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $z0 = $r13.<com.android.server.pm.PreferredComponent: boolean mAlways>;

        if $z0 == 0 goto label20;

        $r14 = r4.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        r33 = $r14.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

     label15:
        $z1 = virtualinvoke r33.<android.content.ComponentName: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label18;

        $r15 = r4.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $i11 = $r15.<com.android.server.pm.PreferredComponent: int mMatch>;

        $i10 = i0 & 268369920;

        if $i11 != $i10 goto label18;

        r34 = r4.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

     label16:
        $z2 = virtualinvoke r34.<com.android.server.pm.PreferredComponent: boolean sameSet(android.content.ComponentName[])>(r1);

        if $z2 == 0 goto label21;

        exitmonitor r30;

     label17:
        return;

     label18:
        goto label21;

     label19:
        $r24 := @caughtexception;

        r35 = $r24;

        goto label32;

     label20:
        goto label21;

     label21:
        if r3 == null goto label27;

     label22:
        $i8 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i16 = $i8 - 1;

     label23:
        if i16 < 0 goto label27;

     label24:
        $r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i16);

        $r11 = (com.android.server.pm.PreferredActivity) $r10;

        virtualinvoke r32.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>($r11);

     label25:
        i16 = i16 + -1;

        goto label23;

     label26:
        $r20 := @caughtexception;

        r35 = $r20;

        goto label30;

     label27:
        exitmonitor r30;

     label28:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void addPreferredActivityInternal(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean,int,java.lang.String)>(r26, i0, r1, r2, 1, i1, "Replacing preferred");

        return;

     label29:
        $r21 := @caughtexception;

        r35 = $r21;

     label30:
        goto label32;

     label31:
        $r22 := @caughtexception;

        r35 = $r22;

     label32:
        exitmonitor r30;

     label33:
        throw r35;

     label34:
        $r23 := @caughtexception;

        r35 = $r23;

        goto label32;

     label35:
        goto label38;

     label36:
        goto label38;

     label37:
        goto label38;

     label38:
        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacePreferredActivity expects filter to have no data authorities, paths, or types; and at most one scheme.");

        throw $r36;

     label39:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacePreferredActivity expects filter to have only 1 action.");

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label31;
        catch java.lang.Throwable from label10 to label11 with label29;
        catch java.lang.Throwable from label12 to label13 with label26;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label16 to label17 with label34;
        catch java.lang.Throwable from label22 to label23 with label34;
        catch java.lang.Throwable from label24 to label25 with label34;
        catch java.lang.Throwable from label27 to label28 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
    }

    public void resetApplicationPreferences(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i2;
        long l1;
        android.content.Context $r1;
        com.android.server.pm.Settings $r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3, $r4;
        java.lang.Throwable $r5, $r6, $r7;
        android.util.SparseBooleanArray r8;
        java.lang.Object r9, r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        r8 = new android.util.SparseBooleanArray;

        specialinvoke r8.<android.util.SparseBooleanArray: void <init>()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivitiesLPw(java.lang.String,android.util.SparseBooleanArray,int)>(null, r8, i0);

        $i2 = virtualinvoke r8.<android.util.SparseBooleanArray: int size()>();

        if $i2 <= 0 goto label02;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void postPreferredActivityChangedBroadcast(int)>(i0);

     label02:
        r9 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r9;

     label03:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r2.<com.android.server.pm.Settings: void applyDefaultPreferredAppsLPw(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void clearIntentFilterVerificationsLPw(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void primeDomainVerificationsLPw(int)>(i0);

        exitmonitor r9;

     label04:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void resetAllRuntimePermissions(int)>(i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean updateDefaultHomeNotLocked(int)>(i0);

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r4.<com.android.server.pm.permission.PermissionManagerServiceInternal: void setDefaultBrowser(java.lang.String,boolean,boolean,int)>(null, 1, 1, i0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void resetNetworkPolicies(int)>(i0);

        r10 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r10;

     label05:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r10;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label07:
        $r5 := @caughtexception;

     label08:
        exitmonitor r10;

     label09:
        throw $r5;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r9;

     label12:
        throw $r6;

     label13:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label12 to label13 with label13;
    }

    public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        int i0, i1;
        android.content.pm.ProviderInfo $r2;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo resolveContentProviderInternal(java.lang.String,int,int)>(r1, i0, i1);

        return $r2;
    }

    public android.content.pm.ResolveInfo resolveIntent(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, $i2;
        android.content.pm.ResolveInfo $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntentInternal(android.content.Intent,java.lang.String,int,int,int,boolean,int)>(r1, r2, i0, 0, i1, 0, $i2);

        return $r3;
    }

    public android.content.pm.ResolveInfo resolveService(android.content.Intent, java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2;
        int i0, i1, $i2;
        android.content.pm.ResolveInfo $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveServiceInternal(android.content.Intent,java.lang.String,int,int,int)>(r1, r2, i0, i1, $i2);

        return $r3;
    }

    public void restoreDefaultApps(byte[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        org.xmlpull.v1.XmlPullParser r1;
        java.io.ByteArrayInputStream r2;
        java.lang.SecurityException $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Exception $r6;
        byte[] r7;
        com.android.server.pm._$$Lambda$PackageManagerService$DWomXCDpiVbZPOk7h4gWI0gNMDM r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label5;

     label1:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r7);

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, $r5);

        r8 = new com.android.server.pm._$$Lambda$PackageManagerService$DWomXCDpiVbZPOk7h4gWI0gNMDM;

        specialinvoke r8.<com.android.server.pm._$$Lambda$PackageManagerService$DWomXCDpiVbZPOk7h4gWI0gNMDM: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void restoreFromXml(org.xmlpull.v1.XmlPullParser,int,java.lang.String,com.android.server.pm.PackageManagerService$BlobXmlRestorer)>(r1, i0, "da", r8);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

     label5:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call restoreDefaultApps()");

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void restoreIntentFilterVerification(byte[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        org.xmlpull.v1.XmlPullParser r1;
        java.io.ByteArrayInputStream r2;
        java.lang.SecurityException $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Exception $r6;
        byte[] r7;
        com.android.server.pm._$$Lambda$PackageManagerService$hLkpaH_y40nbOItNYjiR8EOZUgM r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label5;

     label1:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r7);

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, $r5);

        r8 = new com.android.server.pm._$$Lambda$PackageManagerService$hLkpaH_y40nbOItNYjiR8EOZUgM;

        specialinvoke r8.<com.android.server.pm._$$Lambda$PackageManagerService$hLkpaH_y40nbOItNYjiR8EOZUgM: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void restoreFromXml(org.xmlpull.v1.XmlPullParser,int,java.lang.String,com.android.server.pm.PackageManagerService$BlobXmlRestorer)>(r1, i0, "iv", r8);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

     label5:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call restorePreferredActivities()");

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void restoreLabelAndIcon(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void updateComponentLabelIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>(r1, null, null, i0);

        return;
    }

    public void restorePreferredActivities(byte[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        org.xmlpull.v1.XmlPullParser r1;
        java.io.ByteArrayInputStream r2;
        java.lang.SecurityException $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Exception $r6;
        byte[] r7;
        com.android.server.pm._$$Lambda$PackageManagerService$XrodqQtXF_63SFPD_WxRBB7sfa4 r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label5;

     label1:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        r2 = new java.io.ByteArrayInputStream;

        specialinvoke r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r7);

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, $r5);

        r8 = new com.android.server.pm._$$Lambda$PackageManagerService$XrodqQtXF_63SFPD_WxRBB7sfa4;

        specialinvoke r8.<com.android.server.pm._$$Lambda$PackageManagerService$XrodqQtXF_63SFPD_WxRBB7sfa4: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void restoreFromXml(org.xmlpull.v1.XmlPullParser,int,java.lang.String,com.android.server.pm.PackageManagerService$BlobXmlRestorer)>(r1, i0, "pa", r8);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

     label5:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system may call restorePreferredActivities()");

        throw $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean runBackgroundDexoptJob(java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        boolean z0;
        int $i1;
        java.lang.String $r1;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        java.util.List r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r4 := @parameter0: java.util.List;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i1);

        if $r1 == null goto label1;

        return 0;

     label1:
        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRootOrShell(java.lang.String)>("runBackgroundDexoptJob");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        z0 = staticinvoke <com.android.server.pm.BackgroundDexOptService: boolean runIdleOptimizationsNow(com.android.server.pm.PackageManagerService,android.content.Context,java.util.List)>(r0, $r2, r4);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    void scheduleWritePackageListLocked(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        android.os.Message r1;
        android.os.Handler $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        staticinvoke <android.content.pm.PackageManager: void invalidatePackageInfoCache()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r2.<android.os.Handler: boolean hasMessages(int)>(19);

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(19);

        r1.<android.os.Message: int arg1> = i0;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r1, 10000L);

     label1:
        return;
    }

    void scheduleWritePackageRestrictionsLocked(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i3, i4;
        com.android.server.pm.UserManagerService $r1, $r6;
        boolean $z0, $z2;
        android.util.ArraySet $r2;
        java.lang.Integer $r3;
        android.os.Handler $r4, $r5;
        int[] r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i1 := @parameter0: int;

        staticinvoke <android.content.pm.PackageManager: void invalidatePackageInfoCache()>();

        if i1 != -1 goto label1;

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        r7 = virtualinvoke $r6.<com.android.server.pm.UserManagerService: int[] getUserIds()>();

        goto label2;

     label1:
        r7 = newarray (int)[1];

        r7[0] = i1;

     label2:
        i0 = lengthof r7;

        i3 = 0;

     label3:
        if i3 >= i0 goto label6;

        i4 = r7[i3];

        $r1 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r1.<com.android.server.pm.UserManagerService: boolean exists(int)>(i4);

        if $z0 != 0 goto label4;

        return;

     label4:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>($r3);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $z2 = virtualinvoke $r4.<android.os.Handler: boolean hasMessages(int)>(14);

        if $z2 != 0 goto label5;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(14, 10000L);

     label5:
        i3 = i3 + 1;

        goto label3;

     label6:
        return;
    }

    void scheduleWritePackageRestrictionsLocked(android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.UserHandle r1;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.os.UserHandle;

        if r1 != null goto label1;

        i0 = -1;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<android.os.UserHandle: int getIdentifier()>();

     label2:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        return;
    }

    void scheduleWriteSettingsLocked()
    {
        com.android.server.pm.PackageManagerService r0;
        android.os.Handler $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <android.content.pm.PackageManager: void invalidatePackageInfoCache()>();

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r1.<android.os.Handler: boolean hasMessages(int)>(13);

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(13, 10000L);

     label1:
        return;
    }

    public void sendDeviceCustomizationReadyBroadcast()
    {
        com.android.server.pm.PackageManagerService r0;
        long l0;
        android.app.IActivityManager r1;
        android.content.Context $r2;
        java.lang.String[] $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;
        java.lang.RuntimeException $r7;
        android.content.Intent r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SEND_DEVICE_CUSTOMIZATION_READY", "sendDeviceCustomizationReadyBroadcast");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r8 = new android.content.Intent;

        specialinvoke r8.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.DEVICE_CUSTOMIZATION_READY");

        virtualinvoke r8.<android.content.Intent: android.content.Intent setFlags(int)>(16777216);

        r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label2:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "android.permission.RECEIVE_DEVICE_CUSTOMIZATION_READY";

        interfaceinvoke r1.<android.app.IActivityManager: int broadcastIntentWithFeature(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String[],int,android.os.Bundle,boolean,boolean,int)>(null, null, r8, null, null, 0, null, null, $r4, -1, null, 0, 0, -1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r6 := @caughtexception;

     label5:
        $r7 = virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r7;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }

    public void sendPackageAddedForNewUsers(java.lang.String, boolean, boolean, int, int[], int[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1;
        boolean z0, z1, $z2, $z3, $z4, $z6;
        int i0, i1, $i2, i3;
        int[] r2, r3;
        android.os.Bundle $r5;
        com.android.server.pm.AppsFilter $r6;
        com.android.server.pm.PackageSetting $r7;
        com.android.server.pm.Settings $r8;
        android.util.ArrayMap $r9;
        android.util.SparseArray $r10;
        com.android.server.pm._$$Lambda$PackageManagerService$rcVfdsXa_dlub2enxT5rL0nTx7I $r11;
        android.os.Handler $r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        r2 := @parameter4: int[];

        r3 := @parameter5: int[];

        i1 := @parameter6: int;

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(int[])>(r2);

        if $z2 == 0 goto label1;

        $z6 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(int[])>(r3);

        if $z6 == 0 goto label1;

        return;

     label1:
        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>(int)>(1);

        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(int[])>(r2);

        if $z3 == 0 goto label2;

        i3 = r3[0];

        goto label3;

     label2:
        i3 = r2[0];

     label3:
        $i2 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i3, i0);

        virtualinvoke $r5.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.UID", $i2);

        virtualinvoke $r5.<android.os.Bundle: void putInt(java.lang.String,int)>("android.content.pm.extra.DATA_LOADER_TYPE", i1);

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        $r7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSettingInternal(java.lang.String,int)>(r1, 1000);

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r10 = virtualinvoke $r6.<com.android.server.pm.AppsFilter: android.util.SparseArray getVisibilityWhitelist(com.android.server.pm.PackageSetting,int[],android.util.ArrayMap)>($r7, r2, $r9);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageBroadcast(java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,int[],int[],android.util.SparseArray)>("android.intent.action.PACKAGE_ADDED", r1, $r5, 0, null, null, r2, r3, $r10);

        if z0 == 0 goto label4;

        $z4 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(int[])>(r2);

        if $z4 != 0 goto label4;

        $r12 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r11 = new com.android.server.pm._$$Lambda$PackageManagerService$rcVfdsXa_dlub2enxT5rL0nTx7I;

        specialinvoke $r11.<com.android.server.pm._$$Lambda$PackageManagerService$rcVfdsXa_dlub2enxT5rL0nTx7I: void <init>(com.android.server.pm.PackageManagerService,int[],java.lang.String,boolean)>(r0, r2, r1, z1);

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        goto label4;

     label4:
        return;
    }

    public void sendPackageBroadcast(java.lang.String, java.lang.String, android.os.Bundle, int, java.lang.String, android.content.IIntentReceiver, int[], int[], android.util.SparseArray)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, r4;
        android.os.Bundle r3;
        int i0;
        android.content.IIntentReceiver r5;
        int[] r6, r7;
        android.util.SparseArray r8;
        com.android.server.pm._$$Lambda$PackageManagerService$DgA5eAhvjiH6kMq2WYU8B282b_M $r9;
        android.os.Handler $r10;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        r5 := @parameter5: android.content.IIntentReceiver;

        r6 := @parameter6: int[];

        r7 := @parameter7: int[];

        r8 := @parameter8: android.util.SparseArray;

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $r9 = new com.android.server.pm._$$Lambda$PackageManagerService$DgA5eAhvjiH6kMq2WYU8B282b_M;

        specialinvoke $r9.<com.android.server.pm._$$Lambda$PackageManagerService$DgA5eAhvjiH6kMq2WYU8B282b_M: void <init>(com.android.server.pm.PackageManagerService,int[],java.lang.String,java.lang.String,android.os.Bundle,int,java.lang.String,android.content.IIntentReceiver,android.util.SparseArray,int[])>(r0, r6, r1, r2, r3, i0, r4, r5, r8, r7);

        virtualinvoke $r10.<android.os.Handler: boolean post(java.lang.Runnable)>($r9);

        return;
    }

    public void sendSessionCommitBroadcast(android.content.pm.PackageInstaller$SessionInfo, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        boolean $z0;
        java.lang.String $r1, $r6, $r13;
        android.content.Intent $r2, $r3, $r5, $r9, $r10, $r12, r20, r21;
        android.os.UserHandle $r4, $r8, $r11, $r15;
        android.content.Context $r7, $r14;
        android.content.pm.PackageInstaller$SessionInfo r16;
        com.android.server.pm.UserManagerService r17;
        android.content.pm.UserInfo r18;
        android.content.ComponentName r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r16 := @parameter0: android.content.pm.PackageInstaller$SessionInfo;

        i0 := @parameter1: int;

        r17 = staticinvoke <com.android.server.pm.UserManagerService: com.android.server.pm.UserManagerService getInstance()>();

        if r17 == null goto label4;

        $z0 = virtualinvoke r16.<android.content.pm.PackageInstaller$SessionInfo: boolean isStaged()>();

        if $z0 != 0 goto label4;

        r18 = virtualinvoke r17.<com.android.server.pm.UserManagerService: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r18 == null goto label1;

        i1 = r18.<android.content.pm.UserInfo: int id>;

        goto label2;

     label1:
        i1 = i0;

     label2:
        r19 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getDefaultHomeActivity(int)>(i1);

        if r19 == null goto label3;

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.action.SESSION_COMMITTED");

        $r10 = virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.content.pm.extra.SESSION", r16);

        $r11 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r12 = virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r11);

        $r13 = virtualinvoke r19.<android.content.ComponentName: java.lang.String getPackageName()>();

        r20 = virtualinvoke $r12.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r13);

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r15 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        virtualinvoke $r14.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r20, $r15);

     label3:
        $r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mAppPredictionServicePackage>;

        if $r1 == null goto label4;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.action.SESSION_COMMITTED");

        $r3 = virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.content.pm.extra.SESSION", r16);

        $r4 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $r5 = virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r4);

        $r6 = r0.<com.android.server.pm.PackageManagerService: java.lang.String mAppPredictionServicePackage>;

        r21 = virtualinvoke $r5.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r6);

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r8 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i1);

        virtualinvoke $r7.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r21, $r8);

     label4:
        return;
    }

    public void sendSessionUpdatedBroadcast(android.content.pm.PackageInstaller$SessionInfo, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0;
        java.lang.String $r1, $r4;
        boolean $z0;
        android.content.Intent $r2, $r3, r8;
        android.content.Context $r5;
        android.os.UserHandle $r6;
        android.content.pm.PackageInstaller$SessionInfo r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: android.content.pm.PackageInstaller$SessionInfo;

        i0 := @parameter1: int;

        $r1 = r7.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String installerPackageName>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.content.pm.action.SESSION_UPDATED");

        $r3 = virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.content.pm.extra.SESSION", r7);

        $r4 = r7.<android.content.pm.PackageInstaller$SessionInfo: java.lang.String installerPackageName>;

        r8 = virtualinvoke $r3.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>($r4);

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r8, $r6);

        return;
    }

    public void setApplicationCategoryHint(java.lang.String, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, $r9;
        java.lang.IllegalArgumentException r2, r28, r30;
        java.lang.String $r3, $r12, $r15, $r17, $r22, r24, r25;
        java.lang.SecurityException $r4;
        com.android.server.pm.PackageManagerService$Injector $r5;
        android.app.AppOpsManager $r6;
        com.android.server.pm.Settings $r7;
        android.util.ArrayMap $r8;
        boolean $z0, $z1;
        com.android.server.pm.InstallSource $r16;
        java.lang.Throwable $r23;
        com.android.server.pm.PackageSetting r26;
        java.lang.StringBuilder r27, r29, r31;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r24 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r25 := @parameter2: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i1);

        if $r3 != null goto label12;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.PackageManagerService$Injector: android.app.AppOpsManager getAppOpsManager()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r6.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i2, r25);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r24);

        r26 = (com.android.server.pm.PackageSetting) $r9;

     label02:
        if r26 == null goto label08;

     label03:
        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i4 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r26, $i3, $i4);

        if $z0 != 0 goto label07;

        $r16 = r26.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        $r17 = $r16.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r25, $r17);

        if $z1 == 0 goto label06;

        $i5 = r26.<com.android.server.pm.PackageSetting: int categoryHint>;

        if $i5 == i0 goto label04;

        r26.<com.android.server.pm.PackageSetting: int categoryHint> = i0;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        r2 = new java.lang.IllegalArgumentException;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling package ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not installer for ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r22 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw r2;

     label07:
        r28 = new java.lang.IllegalArgumentException;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown target package ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r15 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw r28;

     label08:
        r30 = new java.lang.IllegalArgumentException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown target package ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r12 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw r30;

     label09:
        $r23 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r23;

     label12:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Instant applications don\'t have access to this method");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setApplicationEnabledSetting(java.lang.String, int, int, int, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2, r4;
        int i0, i1, i2, $i3;
        com.android.server.pm.UserManagerService $r3;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.lang.String;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r3.<com.android.server.pm.UserManagerService: boolean exists(int)>(i2);

        if $z0 != 0 goto label1;

        return;

     label1:
        r4 = r2;

        if r2 != null goto label2;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

     label2:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>(r1, null, i0, i1, i2, r4);

        return;
    }

    public boolean setApplicationHiddenSettingAsUser(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z3, $z4, $z5, $z6, $z7, z8, z9, $z10;
        int i0, $i2, $i3, $i4, i9;
        long l1;
        android.content.Context $r1;
        java.lang.StringBuilder $r2, $r24, r38, r39;
        java.lang.String $r5, $r9, $r16, $r17, $r21, $r23, $r28, r31;
        com.android.server.pm.Settings $r6, $r12;
        android.util.ArrayMap $r7, $r10;
        java.lang.Object $r8, $r11, r35;
        com.android.server.pm.ProtectedPackages $r13;
        java.lang.Throwable $r29, $r30;
        com.android.server.pm.permission.PermissionManagerServiceInternal r32;
        com.android.server.pm.PackageSetting r36;
        com.android.server.pm.parsing.pkg.AndroidPackage r37;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r31 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setApplicationHiddenSetting for user ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r32.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i9, i0, 1, 1, $r5);

        if z0 == 0 goto label01;

        $z7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isPackageDeviceAdmin(java.lang.String,int)>(r31, i0);

        if $z7 == 0 goto label01;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not hiding package ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": has active device admin");

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r28);

        return 0;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r35 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r35;

     label03:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r7 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r8 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r31);

        r36 = (com.android.server.pm.PackageSetting) $r8;

     label04:
        if r36 != null goto label07;

     label05:
        exitmonitor r35;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label07:
        $z3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r36, i9, i0);

        if $z3 == 0 goto label09;

        exitmonitor r35;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label09:
        $r9 = "android";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r31);

        if $z4 == 0 goto label11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", "Cannot hide package: android");

        exitmonitor r35;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label11:
        $r10 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r11 = virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r31);

        r37 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r11;

     label12:
        if r37 == null goto label15;

     label13:
        $r17 = interfaceinvoke r37.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r17 == null goto label15;

        r38 = new java.lang.StringBuilder;

        specialinvoke r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot hide package: ");

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" providing static shared library: ");

        $r21 = interfaceinvoke r37.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        virtualinvoke r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        exitmonitor r35;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label15:
        if z0 == 0 goto label18;

     label16:
        $i4 = r36.<com.android.server.pm.PackageSetting: int appId>;

        $z5 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i9, $i4);

        if $z5 != 0 goto label18;

        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ProtectedPackages mProtectedPackages>;

        $z6 = virtualinvoke $r13.<com.android.server.pm.ProtectedPackages: boolean isPackageStateProtected(int,java.lang.String)>(i0, r31);

        if $z6 == 0 goto label18;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not hiding protected package: ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        $r16 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r16);

        exitmonitor r35;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label18:
        z8 = 0;

        z9 = 0;

     label19:
        $z10 = virtualinvoke r36.<com.android.server.pm.PackageSetting: boolean getHidden(int)>(i0);

        if $z10 == z0 goto label22;

        virtualinvoke r36.<com.android.server.pm.PackageSetting: void setHidden(boolean,int)>(z0, i0);

        $r12 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r12.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(i0);

     label20:
        if z0 == 0 goto label21;

        z9 = 1;

        z8 = 0;

        goto label22;

     label21:
        z8 = 1;

        z9 = 0;

     label22:
        exitmonitor r35;

     label23:
        if z8 == 0 goto label26;

     label24:
        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackageAddedForUser(java.lang.String,com.android.server.pm.PackageSetting,int,int)>(r31, r36, i0, 0);

     label25:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label26:
        if z9 == 0 goto label29;

     label27:
        $i2 = r36.<com.android.server.pm.PackageSetting: int appId>;

        $i3 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i2);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)>(r31, $i3, "hiding pkg");

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendApplicationHiddenForUser(java.lang.String,com.android.server.pm.PackageSetting,int)>(r31, r36, i0);

     label28:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label29:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

     label30:
        $r29 := @caughtexception;

     label31:
        exitmonitor r35;

     label32:
        throw $r29;

     label33:
        $r30 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r30;

        catch java.lang.Throwable from label02 to label03 with label33;
        catch java.lang.Throwable from label03 to label04 with label30;
        catch java.lang.Throwable from label05 to label06 with label30;
        catch java.lang.Throwable from label07 to label08 with label30;
        catch java.lang.Throwable from label09 to label10 with label30;
        catch java.lang.Throwable from label11 to label12 with label30;
        catch java.lang.Throwable from label13 to label14 with label30;
        catch java.lang.Throwable from label16 to label17 with label30;
        catch java.lang.Throwable from label19 to label20 with label30;
        catch java.lang.Throwable from label22 to label23 with label30;
        catch java.lang.Throwable from label24 to label25 with label33;
        catch java.lang.Throwable from label27 to label28 with label33;
        catch java.lang.Throwable from label31 to label32 with label30;
        catch java.lang.Throwable from label32 to label33 with label33;
    }

    public boolean setBlockUninstallForUser(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        int i0;
        java.lang.Object r1, $r6;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        java.lang.StringBuilder r3;
        android.content.Context $r4;
        android.util.ArrayMap $r5;
        com.android.server.pm.Settings $r7, $r8;
        java.lang.String $r9, $r13, $r15, r17;
        java.lang.Throwable $r16;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r17 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DELETE_PACKAGES", null);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r17);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r6;

     label2:
        if r2 == null goto label5;

     label3:
        $r9 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        if $r9 == null goto label5;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot block uninstall of package: ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" providing static shared library: ");

        $r13 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getStaticSharedLibName()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void setBlockUninstallLPw(int,java.lang.String,boolean)>(i0, r17, z0);

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r8.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(i0);

        exitmonitor r1;

     label6:
        return 1;

     label7:
        $r16 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setComponentEnabledSetting(android.content.ComponentName, int, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1;
        int i0, i1, i2;
        com.android.server.pm.UserManagerService $r2;
        boolean $z0;
        java.lang.String $r3, $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z0 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r4 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void setEnabledSetting(java.lang.String,java.lang.String,int,int,int,java.lang.String)>($r3, $r4, i0, i1, i2, null);

        return;
    }

    public java.lang.String[] setDistractingPackageRestrictionsAsUser(java.lang.String[], int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i12, i13, $i14;
        java.lang.String r4, $r23, $r27, $r34;
        android.content.Context $r5;
        java.util.ArrayList $r7, $r9;
        android.util.IntArray $r8;
        boolean $z0, $z2, $z4, $z6;
        java.lang.String[] $r10, $r12, $r13, $r15, r38;
        java.lang.Object[] $r11, $r14;
        int[] $r16;
        com.android.server.pm.Settings $r17;
        android.util.ArrayMap $r18;
        java.lang.Object $r19, r42, r44, r48;
        java.lang.StringBuilder $r24, $r28, r46;
        java.lang.SecurityException $r33;
        java.lang.Throwable $r35, $r36, $r37;
        boolean[] r41;
        com.android.server.pm.PackageSetting r43;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r38 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SUSPEND_APPS", "setDistractingPackageRestrictionsAsUser");

        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i2 == 0 goto label02;

        if i2 == 1000 goto label02;

        $i12 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        if $i12 != i1 goto label01;

        goto label02;

     label01:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling uid ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot call for user ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r33 = new java.lang.SecurityException;

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.SecurityException: void <init>(java.lang.String)>($r34);

        throw $r33;

     label02:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r38, "packageNames cannot be null");

        if i0 == 0 goto label03;

        $z6 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isSuspendAllowedForUser(int)>(i1);

        if $z6 != 0 goto label03;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot restrict packages due to restrictions on user ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r27);

        return r38;

     label03:
        $r7 = new java.util.ArrayList;

        $i3 = lengthof r38;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i3);

        $r8 = new android.util.IntArray;

        $i4 = lengthof r38;

        specialinvoke $r8.<android.util.IntArray: void <init>(int)>($i4);

        $r9 = new java.util.ArrayList;

        $i5 = lengthof r38;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i5);

        if i0 == 0 goto label04;

        r41 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean[] canSuspendPackageForUserInternal(java.lang.String[],int)>(r38, i1);

        goto label05;

     label04:
        r41 = null;

     label05:
        i13 = 0;

     label06:
        $i14 = lengthof r38;

        if i13 >= $i14 goto label25;

        r4 = r38[i13];

        r42 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r42;

     label07:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r18 = $r17.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r4);

        r43 = (com.android.server.pm.PackageSetting) $r19;

     label08:
        if r43 == null goto label20;

     label09:
        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r43, i2, i1);

        if $z2 == 0 goto label11;

     label10:
        goto label20;

     label11:
        exitmonitor r42;

     label12:
        if r41 == null goto label13;

        $z4 = r41[i13];

        if $z4 != 0 goto label13;

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label21;

     label13:
        r44 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r44;

     label14:
        $i8 = virtualinvoke r43.<com.android.server.pm.PackageSetting: int getDistractionFlags(int)>(i1);

        if i0 == $i8 goto label15;

        virtualinvoke r43.<com.android.server.pm.PackageSetting: void setDistractionFlags(int,int)>(i0, i1);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r4);

        $i9 = r43.<com.android.server.pm.PackageSetting: int appId>;

        $i10 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i1, $i9);

        virtualinvoke $r8.<android.util.IntArray: void add(int)>($i10);

     label15:
        exitmonitor r44;

     label16:
        goto label21;

     label17:
        $r36 := @caughtexception;

     label18:
        exitmonitor r44;

     label19:
        throw $r36;

     label20:
        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find package setting for package: ");

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Skipping...");

        $r23 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r4);

        exitmonitor r42;

     label21:
        i13 = i13 + 1;

        goto label06;

     label22:
        $r37 := @caughtexception;

     label23:
        exitmonitor r42;

     label24:
        throw $r37;

     label25:
        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label31;

        $i6 = interfaceinvoke $r7.<java.util.List: int size()>();

        $r13 = newarray (java.lang.String)[$i6];

        $r14 = interfaceinvoke $r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r13);

        $r15 = (java.lang.String[]) $r14;

        $r16 = virtualinvoke $r8.<android.util.IntArray: int[] toArray()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendDistractingPackagesChanged(java.lang.String[],int[],int,int)>($r15, $r16, i1, i0);

        r48 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r48;

     label26:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i1);

        exitmonitor r48;

     label27:
        goto label31;

     label28:
        $r35 := @caughtexception;

     label29:
        exitmonitor r48;

     label30:
        throw $r35;

     label31:
        $r10 = newarray (java.lang.String)[0];

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (java.lang.String[]) $r11;

        return $r12;

        catch java.lang.Throwable from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label26 to label27 with label28;
        catch java.lang.Throwable from label29 to label30 with label28;
    }

    public void setHarmfulAppWarning(java.lang.String, java.lang.CharSequence, int)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.CharSequence r1;
        int i0, i1, i2, $i3;
        java.lang.Object r2;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        java.lang.SecurityException $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        com.android.server.pm.Settings $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i1);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, "setHarmfulAppInfo");

        if i2 == 1000 goto label2;

        if i2 == 0 goto label2;

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>("android.permission.SET_HARMFUL_APP_WARNINGS", i1);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Caller must have the android.permission.SET_HARMFUL_APP_WARNINGS permission.");

        throw $r4;

     label2:
        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label3:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r7.<com.android.server.pm.Settings: void setHarmfulAppWarningLPw(java.lang.String,java.lang.CharSequence,int)>(r6, r1, i0);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r2;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r2;

     label7:
        throw $r5;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setHomeActivity(android.content.ComponentName, int)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.ComponentName r1, $r16;
        int i0, i1, $i2, i3;
        java.lang.String $r3, $r12, $r17, $r18;
        java.util.ArrayList $r4;
        java.lang.StringBuilder $r6;
        java.lang.IllegalArgumentException $r11;
        android.content.IntentFilter $r13;
        java.lang.Object $r14;
        android.content.pm.ResolveInfo $r15;
        boolean $z0, z1, z2;
        android.content.ComponentName[] r19;
        android.content.pm.ActivityInfo r20;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i2);

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivitiesAsUser(java.util.List,int)>($r4, i0);

        z1 = 0;

        i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        r19 = newarray (android.content.ComponentName)[i1];

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        $r14 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r15 = (android.content.pm.ResolveInfo) $r14;

        r20 = $r15.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r16 = new android.content.ComponentName;

        $r18 = r20.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $r17 = r20.<android.content.pm.ActivityInfo: java.lang.String name>;

        specialinvoke $r16.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>($r18, $r17);

        r19[i3] = $r16;

        z2 = z1;

        if z1 != 0 goto label3;

        z2 = z1;

        $z0 = virtualinvoke $r16.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        z2 = 1;

     label3:
        i3 = i3 + 1;

        z1 = z2;

        goto label2;

     label4:
        if z1 == 0 goto label5;

        $r13 = specialinvoke r0.<com.android.server.pm.PackageManagerService: android.content.IntentFilter getHomeFilter()>();

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,int)>($r13, 1048576, r19, r1, i0);

        return;

     label5:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be home on user ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    public boolean setInstallLocation(int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        android.content.Context $r1, $r2;
        android.content.ContentResolver $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS", null);

        $i1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getInstallLocation()>();

        if $i1 != i0 goto label1;

        return 1;

     label1:
        if i0 == 0 goto label3;

        if i0 == 1 goto label3;

        if i0 != 2 goto label2;

        goto label3;

     label2:
        return 0;

     label3:
        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r3, "default_install_location", i0);

        return 1;
    }

    public void setInstallerPackageName(java.lang.String, java.lang.String)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i3, $i4, $i6, $i7;
        java.lang.Object r1, $r7, $r26, $r56;
        com.android.server.pm.PackageSetting r2, $r20, r65, r72;
        java.lang.String r3, $r4, $r10, $r14, $r19, $r38, $r44, $r50, $r59, r63, r64;
        long l2;
        boolean z0, $z1, $z2, $z3;
        com.android.server.pm.Settings $r5, $r11, $r24, $r29, $r54;
        android.util.ArrayMap $r6, $r25, $r55;
        com.android.server.pm.PackageSignatures $r21, $r39, $r45, $r52;
        android.content.pm.PackageParser$SigningDetails $r22, $r40, $r46, $r53;
        com.android.server.pm.InstallSource $r23, $r28;
        android.content.Context $r27;
        com.android.server.pm.AppsFilter $r30;
        java.lang.Object[] $r31;
        java.lang.Integer $r32;
        com.android.server.pm.PackageManagerService$Injector $r33;
        android.content.pm.Signature[] $r41, $r47, r69;
        com.android.server.pm.SharedUserSetting $r51;
        java.lang.Throwable $r60, $r61, $r62, r78;
        java.lang.IllegalArgumentException r66, r83;
        java.lang.StringBuilder r67, r71, r74, r77, r80, r82, r84;
        com.android.server.pm.SettingBase r68;
        java.lang.SecurityException r70, r73, r76, r79, r81;
        com.android.server.compat.PlatformCompat r75;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r63 := @parameter0: java.lang.String;

        r64 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i0);

        if $r4 == null goto label01;

        return;

     label01:
        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r63);

        r2 = (com.android.server.pm.PackageSetting) $r7;

     label03:
        if r2 == null goto label41;

     label04:
        $i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, i0, $i3);

        if $z1 != 0 goto label41;

     label05:
        if r64 == null goto label09;

     label06:
        $r54 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r55 = $r54.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r56 = virtualinvoke $r55.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r64);

        r65 = (com.android.server.pm.PackageSetting) $r56;

     label07:
        if r65 == null goto label08;

        goto label10;

     label08:
        r66 = new java.lang.IllegalArgumentException;

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown installer package: ");

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r59 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r66.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r59);

        throw r66;

     label09:
        r65 = null;

     label10:
        i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        $r11 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r68 = virtualinvoke $r11.<com.android.server.pm.Settings: com.android.server.pm.SettingBase getSettingLPr(int)>(i1);

     label11:
        if r68 == null goto label40;

     label12:
        $z2 = r68 instanceof com.android.server.pm.SharedUserSetting;

        if $z2 == 0 goto label14;

        $r51 = (com.android.server.pm.SharedUserSetting) r68;

        $r52 = $r51.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r53 = $r52.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        r69 = $r53.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

     label13:
        goto label15;

     label14:
        $z3 = r68 instanceof com.android.server.pm.PackageSetting;

        if $z3 == 0 goto label39;

        $r20 = (com.android.server.pm.PackageSetting) r68;

        $r21 = $r20.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r22 = $r21.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        r69 = $r22.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

     label15:
        if r65 == null goto label19;

     label16:
        $r45 = r65.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r46 = $r45.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r47 = $r46.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i7 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(r69, $r47);

        if $i7 != 0 goto label18;

     label17:
        goto label19;

     label18:
        r70 = new java.lang.SecurityException;

        r71 = new java.lang.StringBuilder;

        specialinvoke r71.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller does not have same cert as new installer package ");

        virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r50 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r70.<java.lang.SecurityException: void <init>(java.lang.String)>($r50);

        throw r70;

     label19:
        $r23 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        r3 = $r23.<com.android.server.pm.InstallSource: java.lang.String installerPackageName>;

     label20:
        if r3 != null goto label21;

        r72 = null;

        goto label22;

     label21:
        $r24 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r25 = $r24.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r26 = virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r3);

        r72 = (com.android.server.pm.PackageSetting) $r26;

     label22:
        if r72 == null goto label26;

     label23:
        $r39 = r72.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r40 = $r39.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r41 = $r40.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        $i6 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>(r69, $r41);

        if $i6 != 0 goto label25;

     label24:
        goto label37;

     label25:
        r73 = new java.lang.SecurityException;

        r74 = new java.lang.StringBuilder;

        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller does not have same cert as old installer package ");

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r44 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r73.<java.lang.SecurityException: void <init>(java.lang.String)>($r44);

        throw r73;

     label26:
        $r27 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r27.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        if $i4 == 0 goto label37;

        $r31 = newarray (java.lang.Object)[3];

        $r31[0] = "150857253";

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r31[1] = $r32;

        $r31[2] = "";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r31);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label27:
        $r33 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r75 = virtualinvoke $r33.<com.android.server.pm.PackageManagerService$Injector: com.android.server.compat.PlatformCompat getCompatibility()>();

     label28:
        z0 = virtualinvoke r75.<com.android.server.compat.PlatformCompat: boolean isChangeEnabledByUid(long,int)>(150857253L, i0);

     label29:
        if z0 != 0 goto label32;

     label30:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        exitmonitor r1;

     label31:
        return;

     label32:
        r76 = new java.lang.SecurityException;

        r77 = new java.lang.StringBuilder;

        specialinvoke r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        virtualinvoke r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.INSTALL_PACKAGES");

        $r38 = virtualinvoke r77.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r76.<java.lang.SecurityException: void <init>(java.lang.String)>($r38);

        throw r76;

     label33:
        $r61 := @caughtexception;

        r78 = $r61;

        goto label35;

     label34:
        $r60 := @caughtexception;

        r78 = $r60;

     label35:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label36:
        throw r78;

     label37:
        virtualinvoke r2.<com.android.server.pm.PackageSetting: void setInstallerPackageName(java.lang.String)>(r64);

        $r29 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r28 = r2.<com.android.server.pm.PackageSetting: com.android.server.pm.InstallSource installSource>;

        virtualinvoke $r29.<com.android.server.pm.Settings: void addInstallerPackageNames(com.android.server.pm.InstallSource)>($r28);

        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        virtualinvoke $r30.<com.android.server.pm.AppsFilter: void addPackage(com.android.server.pm.PackageSetting)>(r2);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>();

        exitmonitor r1;

     label38:
        return;

     label39:
        r79 = new java.lang.SecurityException;

        r80 = new java.lang.StringBuilder;

        specialinvoke r80.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad object ");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r68);

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for uid ");

        virtualinvoke r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke r80.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r79.<java.lang.SecurityException: void <init>(java.lang.String)>($r19);

        throw r79;

     label40:
        r81 = new java.lang.SecurityException;

        r82 = new java.lang.StringBuilder;

        specialinvoke r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown calling UID: ");

        virtualinvoke r82.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke r82.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r81.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw r81;

     label41:
        r83 = new java.lang.IllegalArgumentException;

        r84 = new java.lang.StringBuilder;

        specialinvoke r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown target package: ");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r63);

        $r10 = virtualinvoke r84.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r83.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw r83;

     label42:
        $r62 := @caughtexception;

     label43:
        exitmonitor r1;

     label44:
        throw $r62;

        catch java.lang.Throwable from label02 to label03 with label42;
        catch java.lang.Throwable from label04 to label05 with label42;
        catch java.lang.Throwable from label06 to label07 with label42;
        catch java.lang.Throwable from label08 to label09 with label42;
        catch java.lang.Throwable from label10 to label11 with label42;
        catch java.lang.Throwable from label12 to label13 with label42;
        catch java.lang.Throwable from label14 to label15 with label42;
        catch java.lang.Throwable from label16 to label17 with label42;
        catch java.lang.Throwable from label18 to label19 with label42;
        catch java.lang.Throwable from label19 to label20 with label42;
        catch java.lang.Throwable from label21 to label22 with label42;
        catch java.lang.Throwable from label23 to label24 with label42;
        catch java.lang.Throwable from label25 to label26 with label42;
        catch java.lang.Throwable from label26 to label27 with label42;
        catch java.lang.Throwable from label27 to label28 with label34;
        catch java.lang.Throwable from label28 to label29 with label33;
        catch java.lang.Throwable from label30 to label31 with label42;
        catch java.lang.Throwable from label32 to label33 with label33;
        catch java.lang.Throwable from label35 to label36 with label42;
        catch java.lang.Throwable from label36 to label37 with label42;
        catch java.lang.Throwable from label37 to label38 with label42;
        catch java.lang.Throwable from label39 to label40 with label42;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label41 to label42 with label42;
        catch java.lang.Throwable from label43 to label44 with label42;
    }

    public boolean setInstantAppCookie(java.lang.String, byte[], int)
    {
        com.android.server.pm.PackageManagerService r0;
        byte[] r1;
        int i0, $i1, $i2;
        java.lang.Object r2;
        boolean z0, $z1;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r3;
        com.android.server.pm.InstantAppRegistry $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, i0, 1, 1, "setInstantAppCookie");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isCallerSameApp(java.lang.String,int)>(r6, $i2);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r2 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppRegistry mInstantAppRegistry>;

        z0 = virtualinvoke $r4.<com.android.server.pm.InstantAppRegistry: boolean setInstantAppCookieLPw(java.lang.String,byte[],int)>(r6, r1, i0);

        exitmonitor r2;

     label3:
        return z0;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setLastChosenActivity(android.content.Intent, java.lang.String, int, android.content.IntentFilter, int, android.content.ComponentName)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Intent r1;
        java.lang.String r2, $r5;
        int i0, i1, i2, $i3;
        android.content.IntentFilter r3;
        android.content.ComponentName r4;
        java.util.List $r7;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.Intent;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: android.content.IntentFilter;

        i1 := @parameter4: int;

        r4 := @parameter5: android.content.ComponentName;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>($i3);

        if $r5 == null goto label1;

        return;

     label1:
        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r1.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

        $r7 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivitiesInternal(android.content.Intent,java.lang.String,int,int)>(r1, r2, i0, i2);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivityNotLocked(android.content.Intent,java.lang.String,int,java.util.List,int,boolean,boolean,boolean,int)>(r1, r2, i0, $r7, 0, 0, 1, 0, i2);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void addPreferredActivityInternal(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName,boolean,int,java.lang.String)>(r3, i1, null, r4, 0, i2, "Setting last chosen");

        return;
    }

    public void setMimeGroup(java.lang.String, java.lang.String, java.util.List)
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.String r1, r2;
        java.util.List r3;
        com.android.server.pm.Settings $r4;
        android.util.ArrayMap $r5;
        java.lang.Object $r6;
        com.android.server.pm.PackageSetting $r7;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (com.android.server.pm.PackageSetting) $r6;

        $z0 = virtualinvoke $r7.<com.android.server.pm.PackageSetting: boolean setMimeGroup(java.lang.String,java.util.List)>(r2, r3);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void applyMimeGroupChanges(java.lang.String,java.lang.String)>(r1, r2);

     label1:
        return;
    }

    public void setPackageStoppedState(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2, $z3, z4;
        int i0, i1, $i2;
        java.lang.Object r1, $r7;
        com.android.server.pm.UserManagerService $r2;
        java.lang.String $r3, r12;
        android.content.Context $r4;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r5;
        com.android.server.pm.Settings $r6, r14;
        com.android.server.pm.PackageSetting $r8;
        java.lang.Throwable $r9, $r10, $r11, r15;
        android.util.ArrayMap r13;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $z1 = virtualinvoke $r2.<com.android.server.pm.UserManagerService: boolean exists(int)>(i0);

        if $z1 != 0 goto label01;

        return;

     label01:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i1);

        if $r3 == null goto label02;

        return;

     label02:
        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.CHANGE_COMPONENT_ENABLED_STATE");

        if $i2 != 0 goto label03;

        z4 = 1;

        goto label04;

     label03:
        z4 = 0;

     label04:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r5.<com.android.server.pm.permission.PermissionManagerServiceInternal: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, "stop package");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label05:
        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r13 = $r6.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

     label06:
        $r7 = virtualinvoke r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        $r8 = (com.android.server.pm.PackageSetting) $r7;

        $z2 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>($r8, i1, i0);

        if $z2 != 0 goto label09;

        r14 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

     label07:
        $z3 = virtualinvoke r14.<com.android.server.pm.Settings: boolean setPackageStoppedStateLPw(com.android.server.pm.PackageManagerService,java.lang.String,boolean,boolean,int,int)>(r0, r12, z0, z4, i1, i0);

        if $z3 == 0 goto label09;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

     label08:
        goto label09;

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        r15 = $r10;

        goto label13;

     label12:
        $r11 := @caughtexception;

        r15 = $r11;

     label13:
        exitmonitor r1;

     label14:
        throw r15;

     label15:
        $r9 := @caughtexception;

        r15 = $r9;

        goto label13;

        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public java.lang.String[] setPackagesSuspendedAsUser(java.lang.String[], boolean, android.os.PersistableBundle, android.os.PersistableBundle, android.content.pm.SuspendDialogInfo, java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2, $z3, $z5, $z7, $z8, $z11, z12;
        android.os.PersistableBundle r1, r40;
        android.content.pm.SuspendDialogInfo r2;
        java.lang.String r3, r7, $r23, $r30, $r34, r46;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, i12, $i13;
        java.util.ArrayList $r8, $r10;
        android.util.IntArray $r9;
        java.lang.String[] $r11, $r13, $r14, r39, r53;
        java.lang.Object[] $r12, $r15;
        int[] $r16;
        com.android.server.pm.Settings $r17;
        android.util.ArrayMap $r18;
        java.lang.Object $r19, r47, r49, r54;
        java.lang.StringBuilder $r24, $r31, r51;
        java.lang.Throwable $r35, $r36, $r37, $r38, r52;
        boolean[] r43;
        com.android.server.pm.PackageSetting r48;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r39 := @parameter0: java.lang.String[];

        z0 := @parameter1: boolean;

        r40 := @parameter2: android.os.PersistableBundle;

        r1 := @parameter3: android.os.PersistableBundle;

        r2 := @parameter4: android.content.pm.SuspendDialogInfo;

        r3 := @parameter5: java.lang.String;

        i0 := @parameter6: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enforceCanSetPackagesSuspendedAsUser(java.lang.String,int,int,java.lang.String)>(r3, i1, i0, "setPackagesSuspendedAsUser");

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r39);

        if $z1 == 0 goto label01;

        return r39;

     label01:
        if z0 == 0 goto label02;

        $z11 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean isSuspendAllowedForUser(int)>(i0);

        if $z11 != 0 goto label02;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot suspend due to restrictions on user ");

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r34);

        return r39;

     label02:
        $r8 = new java.util.ArrayList;

        $i2 = lengthof r39;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        $r9 = new android.util.IntArray;

        $i3 = lengthof r39;

        specialinvoke $r9.<android.util.IntArray: void <init>(int)>($i3);

        $r10 = new java.util.ArrayList;

        $i4 = lengthof r39;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i4);

        if z0 == 0 goto label03;

        r43 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean[] canSuspendPackageForUserInternal(java.lang.String[],int)>(r39, i0);

        goto label04;

     label03:
        r43 = null;

     label04:
        i12 = 0;

     label05:
        $i13 = lengthof r39;

        if i12 >= $i13 goto label35;

        r7 = r39[i12];

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 == 0 goto label08;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling package: ");

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trying to ");

        if z0 == 0 goto label06;

        r46 = "";

        goto label07;

     label06:
        r46 = "un";

     label07:
        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("suspend itself. Ignoring");

        $r30 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r30);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label30;

     label08:
        r47 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r47;

     label09:
        $r17 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r18 = $r17.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r48 = (com.android.server.pm.PackageSetting) $r19;

     label10:
        if r48 == null goto label29;

     label11:
        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r48, i1, i0);

        if $z5 == 0 goto label13;

     label12:
        goto label29;

     label13:
        exitmonitor r47;

     label14:
        if r43 == null goto label15;

        $z8 = r43[i12];

        if $z8 != 0 goto label15;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r7);

        goto label30;

     label15:
        r49 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r49;

        if z0 == 0 goto label18;

     label16:
        virtualinvoke r48.<com.android.server.pm.PackageSetting: void addOrUpdateSuspension(java.lang.String,android.content.pm.SuspendDialogInfo,android.os.PersistableBundle,android.os.PersistableBundle,int)>(r3, r2, r40, r1, i0);

     label17:
        goto label19;

     label18:
        virtualinvoke r48.<com.android.server.pm.PackageSetting: void removeSuspension(java.lang.String,int)>(r3, i0);

     label19:
        if z0 != 0 goto label22;

     label20:
        $z7 = virtualinvoke r48.<com.android.server.pm.PackageSetting: boolean getSuspended(int)>(i0);

        if $z7 != 0 goto label22;

     label21:
        z12 = 1;

        goto label23;

     label22:
        z12 = 0;

     label23:
        exitmonitor r49;

     label24:
        if z0 != 0 goto label25;

        if z12 == 0 goto label30;

     label25:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r7);

        $i8 = r48.<com.android.server.pm.PackageSetting: int appId>;

        $i9 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i8);

        virtualinvoke $r9.<android.util.IntArray: void add(int)>($i9);

        goto label30;

     label26:
        $r38 := @caughtexception;

     label27:
        exitmonitor r49;

     label28:
        throw $r38;

     label29:
        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find package setting for package: ");

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Skipping suspending/un-suspending.");

        $r23 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r23);

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r7);

        exitmonitor r47;

     label30:
        i12 = i12 + 1;

        goto label05;

     label31:
        $r37 := @caughtexception;

        r52 = $r37;

     label32:
        exitmonitor r47;

     label33:
        throw r52;

     label34:
        $r35 := @caughtexception;

        r52 = $r35;

        goto label32;

     label35:
        $z2 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label41;

        $i6 = interfaceinvoke $r8.<java.util.List: int size()>();

        $r14 = newarray (java.lang.String)[$i6];

        $r15 = interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        r53 = (java.lang.String[]) $r15;

        $r16 = virtualinvoke $r9.<android.util.IntArray: int[] toArray()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendPackagesSuspendedForUser(java.lang.String[],int[],int,boolean)>(r53, $r16, i0, z0);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void sendMyPackageSuspendedOrUnsuspended(java.lang.String[],boolean,int)>(r53, z0, i0);

        r54 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r54;

     label36:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i0);

        exitmonitor r54;

     label37:
        goto label41;

     label38:
        $r36 := @caughtexception;

     label39:
        exitmonitor r54;

     label40:
        throw $r36;

     label41:
        $i5 = interfaceinvoke $r10.<java.util.List: int size()>();

        $r11 = newarray (java.lang.String)[$i5];

        $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r13 = (java.lang.String[]) $r12;

        return $r13;

        catch java.lang.Throwable from label09 to label10 with label31;
        catch java.lang.Throwable from label11 to label12 with label31;
        catch java.lang.Throwable from label13 to label14 with label31;
        catch java.lang.Throwable from label16 to label17 with label26;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label20 to label21 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label29 to label30 with label34;
        catch java.lang.Throwable from label32 to label33 with label34;
        catch java.lang.Throwable from label36 to label37 with label38;
        catch java.lang.Throwable from label39 to label40 with label38;
    }

    public boolean setRequiredForSystemUser(java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        java.lang.Object r1, $r4;
        com.android.server.pm.Settings $r2, $r5;
        android.util.ArrayMap $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r8, r10;
        java.lang.Throwable $r9;
        com.android.server.pm.PackageSetting r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r10 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("setRequiredForSystemUser can only be run by the system or root");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.android.server.pm.PackageSetting) $r4;

     label02:
        if r11 != null goto label05;

     label03:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package doesn\'t exist: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r8 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        exitmonitor r1;

     label04:
        return 0;

     label05:
        if z0 == 0 goto label08;

     label06:
        $i2 = r11.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i3 = $i2 | 512;

        r11.<com.android.server.pm.PackageSetting: int pkgPrivateFlags> = $i3;

     label07:
        goto label09;

     label08:
        $i0 = r11.<com.android.server.pm.PackageSetting: int pkgPrivateFlags>;

        $i1 = $i0 & -513;

        r11.<com.android.server.pm.PackageSetting: int pkgPrivateFlags> = $i1;

     label09:
        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r5.<com.android.server.pm.Settings: void writeLPr()>();

        exitmonitor r1;

     label10:
        return 1;

     label11:
        $r9 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void setRuntimePermissionsVersion(int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.pm.Settings $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i0);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i1);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void enforceAdjustRuntimePermissionsPolicyOrUpgradeRuntimePermissions(java.lang.String)>("setRuntimePermissionVersion");

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r3.<com.android.server.pm.Settings: void setDefaultRuntimePermissionsVersionLPr(int,int)>(i0, i1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setSystemAppHiddenUntilInstalled(java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1;
        int i0;
        java.lang.Object r1, $r5;
        com.android.server.pm.PackageSetting r2, r13;
        com.android.server.pm.Settings $r3, $r8;
        android.util.ArrayMap $r4;
        com.android.server.pm.pkg.PackageStateUnserialized $r6, $r9;
        java.lang.Throwable $r11;
        java.lang.String r12;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r12 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("setSystemAppHiddenUntilInstalled", i0);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r12);

        r2 = (com.android.server.pm.PackageSetting) $r5;

     label02:
        if r2 == null goto label12;

     label03:
        $z1 = virtualinvoke r2.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z1 != 0 goto label05;

     label04:
        goto label12;

     label05:
        $r6 = virtualinvoke r2.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        virtualinvoke $r6.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setHiddenUntilInstalled(boolean)>(z0);

        $r8 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        r13 = virtualinvoke $r8.<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>(r12);

     label06:
        if r13 != null goto label09;

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r9 = virtualinvoke r13.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        virtualinvoke $r9.<com.android.server.pm.pkg.PackageStateUnserialized: com.android.server.pm.pkg.PackageStateUnserialized setHiddenUntilInstalled(boolean)>(z0);

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r11 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public boolean setSystemAppInstallState(java.lang.String, boolean, int)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        com.android.server.pm.PackageSetting r1;
        long l2;
        com.android.server.pm.Settings $r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4, r9;
        android.content.pm.IPackageDeleteObserver2 $r5;
        java.lang.Throwable $r6, $r7;
        java.lang.String r8;
        android.content.pm.VersionedPackage r10;
        android.content.pm.PackageManager$LegacyPackageDeleteObserver r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r8 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void enforceSystemOrPhoneCaller(java.lang.String,int)>("setSystemAppInstallState", i1);

        r9 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r9;

     label01:
        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r8);

        r1 = (com.android.server.pm.PackageSetting) $r4;

     label02:
        if r1 == null goto label14;

     label03:
        $z1 = virtualinvoke r1.<com.android.server.pm.PackageSetting: boolean isSystem()>();

        if $z1 != 0 goto label05;

     label04:
        goto label14;

     label05:
        $z2 = virtualinvoke r1.<com.android.server.pm.PackageSetting: boolean getInstalled(int)>(i0);

        if $z2 != z0 goto label07;

        exitmonitor r9;

     label06:
        return 0;

     label07:
        exitmonitor r9;

     label08:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if z0 == 0 goto label11;

     label09:
        virtualinvoke r0.<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int,int,int,java.util.List)>(r8, i0, 4194304, 3, null);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label11:
        r10 = new android.content.pm.VersionedPackage;

        specialinvoke r10.<android.content.pm.VersionedPackage: void <init>(java.lang.String,int)>(r8, -1);

        r11 = new android.content.pm.PackageManager$LegacyPackageDeleteObserver;

        specialinvoke r11.<android.content.pm.PackageManager$LegacyPackageDeleteObserver: void <init>(android.content.pm.IPackageDeleteObserver)>(null);

        $r5 = virtualinvoke r11.<android.content.pm.PackageManager$LegacyPackageDeleteObserver: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void deletePackageVersioned(android.content.pm.VersionedPackage,android.content.pm.IPackageDeleteObserver2,int,int)>(r10, $r5, i0, 4);

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return 1;

     label13:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r6;

     label14:
        exitmonitor r9;

     label15:
        return 0;

     label16:
        $r7 := @caughtexception;

     label17:
        exitmonitor r9;

     label18:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    public void setUpdateAvailable(java.lang.String, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0;
        java.lang.Object r1, $r5;
        android.content.Context $r2;
        com.android.server.pm.Settings $r3;
        android.util.ArrayMap $r4;
        java.lang.Throwable $r6;
        java.lang.String r7;
        com.android.server.pm.PackageSetting r8;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r7 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", null);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r4 = $r3.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.pm.PackageSetting) $r5;

     label2:
        if r8 == null goto label4;

     label3:
        virtualinvoke r8.<com.android.server.pm.PackageSetting: void setUpdateAvailable(boolean)>(z0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void shutdown()
    {
        com.android.server.pm.PackageManagerService r0;
        java.lang.Object r1, $r13;
        int i0;
        com.android.server.pm.Settings $r2, $r15;
        android.util.ArrayMap $r3;
        com.android.server.pm.PackageUsage $r4;
        com.android.server.pm.CompilerStats $r5;
        com.android.server.pm.dex.DexManager $r6;
        android.content.Context $r7;
        com.android.server.PackageWatchdog $r8;
        android.os.Handler $r9, $r10;
        boolean $z0, $z1;
        android.util.ArraySet $r11, $r12;
        java.lang.Integer $r14;
        java.lang.Throwable $r16;
        java.util.Iterator r17;

        r0 := @this: com.android.server.pm.PackageManagerService;

        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageUsage mPackageUsage>;

        $r2 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        virtualinvoke $r4.<com.android.server.pm.PackageUsage: void writeNow(java.lang.Object)>($r3);

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.CompilerStats mCompilerStats>;

        virtualinvoke $r5.<com.android.server.pm.CompilerStats: void writeNow()>();

        $r6 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager mDexManager>;

        virtualinvoke $r6.<com.android.server.pm.dex.DexManager: void writePackageDexUsageNow()>();

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r8 = staticinvoke <com.android.server.PackageWatchdog: com.android.server.PackageWatchdog getInstance(android.content.Context)>($r7);

        virtualinvoke $r8.<com.android.server.PackageWatchdog: void writeNow()>();

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r9 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r9.<android.os.Handler: boolean hasMessages(int)>(14);

        if $z0 == 0 goto label5;

        $r10 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r10.<android.os.Handler: void removeMessages(int)>(14);

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        r17 = virtualinvoke $r11.<android.util.ArraySet: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r13 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.Integer) $r13;

        i0 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        $r15 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        virtualinvoke $r15.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>(i0);

     label3:
        goto label2;

     label4:
        $r12 = r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mDirtyUsers>;

        virtualinvoke $r12.<android.util.ArraySet: void clear()>();

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r16 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r16;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void systemReady()
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.Context $r1, $r4, $r7, $r11, $r13, $r14, $r35, $r40;
        com.android.server.pm.PackageManagerService$5 $r2;
        android.os.Handler $r3;
        android.content.ContentResolver $r5, $r8, $r15, r62;
        android.net.Uri $r6, $r9;
        com.android.server.pm.AppsFilter $r10;
        java.lang.String $r12, $r17, $r28, $r30, $r55;
        int $i0, $i1, $i2, $i3, i5, $i6, i7;
        com.android.server.pm.UserManagerService $r16, $r29;
        com.android.server.pm.permission.PermissionManagerServiceInternal $r18, $r31;
        com.android.server.pm.PackageManagerService$Injector $r19, $r20, $r25;
        android.os.storage.StorageManager $r21;
        android.os.storage.StorageEventListener $r22;
        com.android.server.pm.PackageInstallerService $r23, $r38;
        com.android.server.pm.PackageDexOptimizer $r24;
        android.os.storage.StorageManagerInternal $r26;
        com.android.server.pm.PackageManagerService$6 $r27;
        com.android.server.pm.InstantAppResolverConnection $r32;
        android.content.IntentFilter $r33, $r41;
        com.android.server.pm.PackageManagerService$8 $r34;
        com.android.server.pm.ModuleInfoProvider $r37;
        com.android.server.pm.PackageManagerService$7 $r39;
        com.android.server.pm.Settings $r43, $r47, $r49, $r66;
        android.util.SparseArray $r44, $r48, $r67;
        java.lang.Object $r45, $r50, $r56, r64, r73;
        java.util.Set $r46;
        boolean $z0, $z1, z3;
        com.android.server.pm.PreferredComponent $r52, $r57;
        android.content.ComponentName $r53, $r58;
        com.android.server.pm.ComponentResolver $r59;
        java.lang.Throwable $r60, $r61;
        java.util.ArrayList r65;
        com.android.server.pm.PreferredIntentResolver r68;
        java.util.Iterator r69;
        com.android.server.pm.PreferredActivity r70, r71;
        java.lang.StringBuilder r72;
        com.android.server.policy.PermissionPolicyInternal r74;
        com.android.server.pm._$$Lambda$PackageManagerService$rLdmTQLwnuPeDuWTeDB_0S1Ku4I r75;

        r0 := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can claim the system is ready");

        z3 = 1;

        r0.<com.android.server.pm.PackageManagerService: boolean mSystemReady> = 1;

        $r1 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r62 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r2 = new com.android.server.pm.PackageManagerService$5;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        specialinvoke $r2.<com.android.server.pm.PackageManagerService$5: void <init>(com.android.server.pm.PackageManagerService,android.os.Handler,android.content.ContentResolver)>(r0, $r3, r62);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("enable_ephemeral_feature");

        virtualinvoke $r5.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r6, 0, $r2, -1);

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("instant_apps_enabled");

        virtualinvoke $r8.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r9, 0, $r2, -1);

        virtualinvoke $r2.<android.database.ContentObserver: void onChange(boolean)>(1);

        $r10 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.AppsFilter mAppsFilter>;

        virtualinvoke $r10.<com.android.server.pm.AppsFilter: void onSystemReady()>();

        $r11 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getOpPackageName()>();

        $r13 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        staticinvoke <com.android.internal.telephony.CarrierAppUtils: void disableCarrierAppsUntilPrivileged(java.lang.String,int,android.content.Context)>($r12, 0, $r13);

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void disableSkuSpecificApps()>();

        $r14 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r15, "compatibility_mode", 1);

        if $i0 != 1 goto label01;

        goto label02;

     label01:
        z3 = 0;

     label02:
        staticinvoke <android.content.pm.PackageParser: void setCompatibilityModeEnabled(boolean)>(z3);

        r64 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r64;

     label03:
        r65 = new java.util.ArrayList;

        specialinvoke r65.<java.util.ArrayList: void <init>()>();

     label04:
        i5 = 0;

     label05:
        $r66 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r67 = $r66.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i6 = virtualinvoke $r67.<android.util.SparseArray: int size()>();

        if i5 >= $i6 goto label14;

        $r43 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r44 = $r43.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $r45 = virtualinvoke $r44.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        r68 = (com.android.server.pm.PreferredIntentResolver) $r45;

        virtualinvoke r65.<java.util.ArrayList: void clear()>();

        $r46 = virtualinvoke r68.<com.android.server.pm.PreferredIntentResolver: java.util.Set filterSet()>();

        r69 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke r69.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r56 = interfaceinvoke r69.<java.util.Iterator: java.lang.Object next()>();

        r70 = (com.android.server.pm.PreferredActivity) $r56;

        $r59 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $r57 = r70.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r58 = $r57.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        $z1 = virtualinvoke $r59.<com.android.server.pm.ComponentResolver: boolean isActivityDefined(android.content.ComponentName)>($r58);

        if $z1 != 0 goto label07;

        virtualinvoke r65.<java.util.ArrayList: boolean add(java.lang.Object)>(r70);

     label07:
        goto label06;

     label08:
        $i1 = virtualinvoke r65.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label13;

     label09:
        i7 = 0;

     label10:
        $i2 = virtualinvoke r65.<java.util.ArrayList: int size()>();

        if i7 >= $i2 goto label12;

        $r50 = virtualinvoke r65.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r71 = (com.android.server.pm.PreferredActivity) $r50;

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing dangling preferred activity: ");

        $r52 = r71.<com.android.server.pm.PreferredActivity: com.android.server.pm.PreferredComponent mPref>;

        $r53 = $r52.<com.android.server.pm.PreferredComponent: android.content.ComponentName mComponent>;

        virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);

        $r55 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r55);

        virtualinvoke r68.<com.android.server.pm.PreferredIntentResolver: void removeFilter(java.lang.Object)>(r71);

     label11:
        i7 = i7 + 1;

        goto label10;

     label12:
        $r49 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r47 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r48 = $r47.<com.android.server.pm.Settings: android.util.SparseArray mPreferredActivities>;

        $i3 = virtualinvoke $r48.<android.util.SparseArray: int keyAt(int)>(i5);

        virtualinvoke $r49.<com.android.server.pm.Settings: void writePackageRestrictionsLPr(int)>($i3);

     label13:
        i5 = i5 + 1;

        goto label05;

     label14:
        exitmonitor r64;

     label15:
        $r16 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        virtualinvoke $r16.<com.android.server.pm.UserManagerService: void systemReady()>();

        r73 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r73;

     label16:
        $r18 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        $r17 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        virtualinvoke $r18.<com.android.server.pm.permission.PermissionManagerServiceInternal: void updateAllPermissions(java.lang.String,boolean)>($r17, 0);

        $r19 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        r74 = virtualinvoke $r19.<com.android.server.pm.PackageManagerService$Injector: com.android.server.policy.PermissionPolicyInternal getPermissionPolicyInternal()>();

        r75 = new com.android.server.pm._$$Lambda$PackageManagerService$rLdmTQLwnuPeDuWTeDB_0S1Ku4I;

        specialinvoke r75.<com.android.server.pm._$$Lambda$PackageManagerService$rLdmTQLwnuPeDuWTeDB_0S1Ku4I: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        virtualinvoke r74.<com.android.server.policy.PermissionPolicyInternal: void setOnInitializedCallback(com.android.server.policy.PermissionPolicyInternal$OnInitializedCallback)>(r75);

        exitmonitor r73;

     label17:
        $r20 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r21 = virtualinvoke $r20.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManager getStorageManager()>();

        $r22 = r0.<com.android.server.pm.PackageManagerService: android.os.storage.StorageEventListener mStorageListener>;

        virtualinvoke $r21.<android.os.storage.StorageManager: void registerListener(android.os.storage.StorageEventListener)>($r22);

        $r23 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        virtualinvoke $r23.<com.android.server.pm.PackageInstallerService: void systemReady()>();

        $r24 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageDexOptimizer mPackageDexOptimizer>;

        virtualinvoke $r24.<com.android.server.pm.PackageDexOptimizer: void systemReady()>();

        $r25 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$Injector mInjector>;

        $r26 = virtualinvoke $r25.<com.android.server.pm.PackageManagerService$Injector: android.os.storage.StorageManagerInternal getStorageManagerInternal()>();

        $r27 = new com.android.server.pm.PackageManagerService$6;

        specialinvoke $r27.<com.android.server.pm.PackageManagerService$6: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        virtualinvoke $r26.<android.os.storage.StorageManagerInternal: void addExternalStoragePolicy(android.os.storage.StorageManagerInternal$ExternalStorageMountPolicy)>($r27);

        $r29 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.UserManagerService mUserManager>;

        $r28 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        virtualinvoke $r29.<com.android.server.pm.UserManagerService: void reconcileUsers(java.lang.String)>($r28);

        $r30 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService: void reconcileApps(java.lang.String)>($r30);

        $r31 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.permission.PermissionManagerServiceInternal mPermissionManager>;

        virtualinvoke $r31.<com.android.server.pm.permission.PermissionManagerServiceInternal: void systemReady()>();

        $r32 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.InstantAppResolverConnection mInstantAppResolverConnection>;

        if $r32 == null goto label18;

        $r40 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r39 = new com.android.server.pm.PackageManagerService$7;

        specialinvoke $r39.<com.android.server.pm.PackageManagerService$7: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        $r41 = new android.content.IntentFilter;

        specialinvoke $r41.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke $r40.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r39, $r41);

     label18:
        $r33 = new android.content.IntentFilter;

        specialinvoke $r33.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.OVERLAY_CHANGED");

        virtualinvoke $r33.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r35 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r34 = new com.android.server.pm.PackageManagerService$8;

        specialinvoke $r34.<com.android.server.pm.PackageManagerService$8: void <init>(com.android.server.pm.PackageManagerService)>(r0);

        virtualinvoke $r35.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r34, $r33);

        $r37 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ModuleInfoProvider mModuleInfoProvider>;

        virtualinvoke $r37.<com.android.server.pm.ModuleInfoProvider: void systemReady()>();

        $r38 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        virtualinvoke $r38.<com.android.server.pm.PackageInstallerService: void restoreAndApplyStagedSessionIfNeeded()>();

        r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet mExistingPackages> = null;

        return;

     label19:
        $r60 := @caughtexception;

     label20:
        exitmonitor r73;

     label21:
        throw $r60;

     label22:
        $r61 := @caughtexception;

     label23:
        exitmonitor r64;

     label24:
        throw $r61;

        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.lang.Throwable from label08 to label09 with label22;
        catch java.lang.Throwable from label10 to label11 with label22;
        catch java.lang.Throwable from label12 to label13 with label22;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)
    {
        com.android.server.pm.PackageManagerService r0;
        android.content.pm.IPackageMoveObserver r1;
        android.content.Context $r2;
        com.android.server.pm.PackageManagerService$MoveCallbacks $r3;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 := @parameter0: android.content.pm.IPackageMoveObserver;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MOUNT_UNMOUNT_FILESYSTEMS", null);

        $r3 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$MoveCallbacks mMoveCallbacks>;

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$MoveCallbacks: void unregister(android.content.pm.IPackageMoveObserver)>(r1);

        return;
    }

    void unsuspendForSuspendingPackage(java.lang.String, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.String[] r2, $r6;
        android.util.ArrayMap $r3, $r5;
        java.util.Set $r4;
        java.lang.Object[] $r7;
        com.android.server.pm._$$Lambda$S4BXTl5Ly3EHhXAReFCtlz2B8eo $r9;
        java.lang.Throwable $r10;
        java.lang.String r11;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r11 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Set keySet()>();

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $i1 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        $r6 = newarray (java.lang.String)[$i1];

        $r7 = interfaceinvoke $r4.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r2 = (java.lang.String[]) $r7;

        exitmonitor r1;

     label2:
        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r11);

        $r9 = new com.android.server.pm._$$Lambda$S4BXTl5Ly3EHhXAReFCtlz2B8eo;

        specialinvoke $r9.<com.android.server.pm._$$Lambda$S4BXTl5Ly3EHhXAReFCtlz2B8eo: void <init>(java.lang.String)>(r11);

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void removeSuspensionsBySuspendingPackage(java.lang.String[],java.util.function.Predicate,int)>(r2, $r9, i0);

        return;

     label3:
        $r10 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void updateComponentLabelIcon(android.content.ComponentName, java.lang.String, java.lang.Integer, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3;
        java.lang.String r1, $r11, $r17, $r25, r39, r41, r45, $r48;
        com.android.server.pm.parsing.pkg.AndroidPackage r2;
        com.android.server.pm.PackageSetting r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.IllegalArgumentException $r4, $r10;
        com.android.server.pm.ComponentResolver $r5;
        java.lang.StringBuilder $r6, $r12, $r20, r47;
        java.lang.SecurityException $r16, $r19, $r24, r46;
        android.content.Context $r18;
        android.util.ArrayMap $r26;
        java.lang.Object $r27, r42;
        com.android.server.pm.PackageManagerService$PendingPackageBroadcasts $r30, $r34;
        android.os.Handler $r31, $r32;
        java.util.ArrayList $r33, r43, r44;
        com.android.server.pm.pkg.PackageStateUnserialized $r35;
        java.lang.Throwable $r36, $r37, r49;
        android.content.ComponentName r38;
        java.lang.Integer r40;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r38 := @parameter0: android.content.ComponentName;

        r39 := @parameter1: java.lang.String;

        r40 := @parameter2: java.lang.Integer;

        i0 := @parameter3: int;

        if r38 == null goto label22;

        $r5 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.ComponentResolver mComponentResolver>;

        $z1 = virtualinvoke $r5.<com.android.server.pm.ComponentResolver: boolean componentExists(android.content.ComponentName)>(r38);

        if $z1 == 0 goto label21;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = virtualinvoke r38.<android.content.ComponentName: java.lang.String getPackageName()>();

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r1, 0, i0);

        $z2 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i1, $i3);

        if $z2 == 0 goto label20;

        $r18 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r41 = virtualinvoke $r18.<android.content.Context: java.lang.String getString(int)>(17039925);

        $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r41);

        if $z3 != 0 goto label19;

        i2 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>(r41, 1048576, i0);

        if i2 == -1 goto label18;

        $z4 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i1, i2);

        if $z4 == 0 goto label18;

        r42 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r42;

     label01:
        $r26 = r0.<com.android.server.pm.PackageManagerService: android.util.ArrayMap mPackages>;

        $r27 = virtualinvoke $r26.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.pm.parsing.pkg.AndroidPackage) $r27;

        r3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>(r1);

     label02:
        if r2 == null goto label13;

        if r3 == null goto label13;

     label03:
        $z5 = interfaceinvoke r2.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isSystem()>();

        if $z5 != 0 goto label06;

        $r35 = virtualinvoke r3.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        z0 = virtualinvoke $r35.<com.android.server.pm.pkg.PackageStateUnserialized: boolean isUpdatedSystemApp()>();

     label04:
        if z0 == 0 goto label05;

        goto label06;

     label05:
        goto label13;

     label06:
        $z6 = virtualinvoke r3.<com.android.server.pm.PackageSetting: boolean overrideNonLocalizedLabelAndIcon(android.content.ComponentName,java.lang.String,java.lang.Integer,int)>(r38, r39, r40, i0);

        if $z6 != 0 goto label08;

        exitmonitor r42;

     label07:
        return;

     label08:
        exitmonitor r42;

     label09:
        $r30 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        r43 = virtualinvoke $r30.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: java.util.ArrayList get(int,java.lang.String)>(i0, r1);

        r44 = r43;

        if r43 != null goto label10;

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        r44 = $r33;

        $r34 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$PendingPackageBroadcasts mPendingBroadcasts>;

        virtualinvoke $r34.<com.android.server.pm.PackageManagerService$PendingPackageBroadcasts: void put(int,java.lang.String,java.util.ArrayList)>(i0, r1, $r33);

     label10:
        r45 = virtualinvoke r38.<android.content.ComponentName: java.lang.String getClassName()>();

        $z7 = virtualinvoke r44.<java.util.ArrayList: boolean contains(java.lang.Object)>(r45);

        if $z7 != 0 goto label11;

        virtualinvoke r44.<java.util.ArrayList: boolean add(java.lang.Object)>(r45);

     label11:
        $r31 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        $z8 = virtualinvoke $r31.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z8 != 0 goto label12;

        $r32 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r32.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, 1000L);

        goto label12;

     label12:
        return;

     label13:
        r46 = new java.lang.SecurityException;

        r47 = new java.lang.StringBuilder;

        specialinvoke r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Changing the label is not allowed for ");

        virtualinvoke r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r48 = virtualinvoke r47.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r46.<java.lang.SecurityException: void <init>(java.lang.String)>($r48);

        throw r46;

     label14:
        $r37 := @caughtexception;

        r49 = $r37;

     label15:
        exitmonitor r42;

     label16:
        throw r49;

     label17:
        $r36 := @caughtexception;

        r49 = $r36;

        goto label15;

     label18:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calling UID (");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not allowed to change a component\'s label or icon");

        $r24 = new java.lang.SecurityException;

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.SecurityException: void <init>(java.lang.String)>($r25);

        throw $r24;

     label19:
        $r19 = new java.lang.SecurityException;

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("There is no package defined as allowed to change a component\'s label or icon");

        throw $r19;

     label20:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calling UID (");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") does not match the target UID");

        $r16 = new java.lang.SecurityException;

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label21:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label22:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a component");

        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    int updateFlagsForResolve(int, int, int, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, i2, $i3;
        boolean z0, z1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        $i3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForResolve(int,int,int,boolean,boolean,boolean)>(i0, i1, i2, z0, 0, z1);

        return $i3;
    }

    int updateFlagsForResolve(int, int, int, boolean, boolean, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, $i1, $i2, i3, i4, i5, i6, i7, i8, $i9;
        boolean z0, z1, z2, $z4, $z5, z6, z7;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        $z4 = r0.<com.android.server.pm.PackageManagerService: boolean mSafeMode>;

        if $z4 != 0 goto label01;

        i5 = i3;

        if z2 == 0 goto label02;

     label01:
        i5 = i3 | 1048576;

     label02:
        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: java.lang.String getInstantAppPackageName(int)>(i4);

        if $r1 == null goto label04;

        i6 = i5;

        if z1 == 0 goto label03;

        i6 = i5 | 33554432;

     label03:
        $i2 = i6 | 16777216;

        i7 = $i2 | 8388608;

        goto label10;

     label04:
        $i1 = i5 & 8388608;

        if $i1 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        if z0 != 0 goto label08;

        if z6 == 0 goto label07;

        $z5 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean canViewInstantApps(int,int)>(i4, i0);

        if $z5 == 0 goto label07;

        goto label08;

     label07:
        z7 = 0;

        goto label09;

     label08:
        z7 = 1;

     label09:
        i8 = i5 & -50331649;

        i7 = i8;

        if z7 != 0 goto label10;

        i7 = i8 & -8388609;

     label10:
        $i9 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int updateFlagsForComponent(int,int)>(i7, i0);

        return $i9;
    }

    public boolean updateIntentVerificationStatus(java.lang.String, int, int)
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1, $r6;
        com.android.server.pm.PackageSetting r2;
        boolean z0, $z1;
        android.content.Context $r3;
        com.android.server.pm.Settings $r4, $r7;
        android.util.ArrayMap $r5;
        java.lang.Throwable $r8;
        java.lang.String r9;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r9 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_PREFERRED_APPLICATIONS", null);

        r1 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r9);

        r2 = (com.android.server.pm.PackageSetting) $r6;

     label2:
        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z1 = specialinvoke r0.<com.android.server.pm.PackageManagerService: boolean shouldFilterApplicationLocked(com.android.server.pm.PackageSetting,int,int)>(r2, $i2, $i3);

        if $z1 == 0 goto label4;

        exitmonitor r1;

     label3:
        return 0;

     label4:
        $r7 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        z0 = virtualinvoke $r7.<com.android.server.pm.Settings: boolean updateIntentFilterVerificationStatusLPw(java.lang.String,int,int)>(r9, i0, i1);

        exitmonitor r1;

     label5:
        if z0 == 0 goto label6;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService: void scheduleWritePackageRestrictionsLocked(int)>(i1);

     label6:
        return z0;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void updatePackagesIfNeeded()
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z1, $z3, z4, z5, z6;
        long l0, $l1, $l2, $l3;
        java.util.concurrent.TimeUnit $r1;
        int $i4, $i5, $i6, $i7, $i8, i9, $i10, i12;
        android.content.Context $r2, $r3, $r4, $r5, $r7;
        android.util.ArraySet $r6;
        java.lang.Object $r8, r12;
        com.android.server.pm.PackageSetting $r9;
        com.android.server.pm.parsing.pkg.AndroidPackage $r10;
        java.lang.Throwable $r11;
        com.android.server.pm.Settings $r13;
        android.util.ArrayMap $r14;
        java.util.Collection $r15;
        java.util.List r16;
        java.util.ArrayList $r17;
        byte b11;
        int[] r19;

        r0 := @this: com.android.server.pm.PackageManagerService;

        staticinvoke <com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>("Only the system can request package update");

        z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isDeviceUpgrading()>();

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>();

        if $z1 != 0 goto label02;

        $z3 = r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNUpgrade>;

        if $z3 == 0 goto label01;

        goto label02;

     label01:
        z4 = 0;

        goto label03;

     label02:
        z4 = 1;

     label03:
        z5 = staticinvoke <dalvik.system.VMRuntime: boolean didPruneDalvikCache()>();

        if z0 != 0 goto label04;

        if z4 != 0 goto label04;

        if z5 != 0 goto label04;

        return;

     label04:
        r12 = r0.<com.android.server.pm.PackageManagerService: java.lang.Object mLock>;

        entermonitor r12;

     label05:
        $r13 = r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.Settings mSettings>;

        $r14 = $r13.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.util.Collection values()>();

        r16 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.util.List getPackagesForDexopt(java.util.Collection,com.android.server.pm.PackageManagerService)>($r15, r0);

        exitmonitor r12;

     label06:
        $r17 = new java.util.ArrayList;

        $i8 = interfaceinvoke r16.<java.util.List: int size()>();

        specialinvoke $r17.<java.util.ArrayList: void <init>(int)>($i8);

        i9 = 0;

     label07:
        $i10 = interfaceinvoke r16.<java.util.List: int size()>();

        if i9 >= $i10 goto label08;

        $r8 = interfaceinvoke r16.<java.util.List: java.lang.Object get(int)>(i9);

        $r9 = (com.android.server.pm.PackageSetting) $r8;

        $r10 = $r9.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r10);

        i9 = i9 + 1;

        goto label07;

     label08:
        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        z6 = r0.<com.android.server.pm.PackageManagerService: boolean mIsPreNUpgrade>;

        if z4 == 0 goto label09;

        b11 = 0;

        goto label10;

     label09:
        b11 = 1;

     label10:
        r19 = specialinvoke r0.<com.android.server.pm.PackageManagerService: int[] performDexOptUpgrade(java.util.List,boolean,int,boolean)>($r17, z6, b11, 0);

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        $l2 = $l1 - l0;

        $l3 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toSeconds(long)>($l2);

        i12 = (int) $l3;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i4 = r19[0];

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r2, "opt_dialog_num_dexopted", $i4);

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i5 = r19[1];

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r3, "opt_dialog_num_skipped", $i5);

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $i6 = r19[2];

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r4, "opt_dialog_num_failed", $i6);

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: android.util.ArraySet getOptimizablePackages()>();

        $i7 = virtualinvoke $r6.<android.util.ArraySet: int size()>();

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r5, "opt_dialog_num_total", $i7);

        $r7 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        staticinvoke <com.android.internal.logging.MetricsLogger: void histogram(android.content.Context,java.lang.String,int)>($r7, "opt_dialog_time_s", i12);

        return;

     label11:
        $r11 := @caughtexception;

     label12:
        exitmonitor r12;

     label13:
        throw $r11;

        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void verifyIntentFilter(int, int, java.util.List) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        android.os.Message r1;
        android.content.Context $r2;
        android.os.Handler $r3, $r5;
        com.android.server.pm.IntentFilterVerificationResponse $r4;
        java.util.List r6;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.util.List;

        $r2 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTENT_FILTER_VERIFICATION_AGENT", "Only intentfilter verification agents can verify applications");

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(18);

        $r4 = new com.android.server.pm.IntentFilterVerificationResponse;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r4.<com.android.server.pm.IntentFilterVerificationResponse: void <init>(int,int,java.util.List)>($i2, i1, r6);

        r1.<android.os.Message: int arg1> = i0;

        r1.<android.os.Message: java.lang.Object obj> = $r4;

        $r5 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void verifyPendingInstall(int, int) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService r0;
        int i0, i1, $i2;
        android.os.Message r1;
        android.content.Context $r3;
        android.os.Handler $r4, $r6;
        com.android.server.pm.PackageVerificationResponse $r5;

        r0 := @this: com.android.server.pm.PackageManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_VERIFICATION_AGENT", "Only package verification agents can verify applications");

        $r4 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        r1 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(15);

        $r5 = new com.android.server.pm.PackageVerificationResponse;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r5.<com.android.server.pm.PackageVerificationResponse: void <init>(int,int)>(i1, $i2);

        r1.<android.os.Message: int arg1> = i0;

        r1.<android.os.Message: java.lang.Object obj> = $r5;

        $r6 = r0.<com.android.server.pm.PackageManagerService: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void waitForAppDataPrepared()
    {
        com.android.server.pm.PackageManagerService r0;
        java.util.concurrent.Future r1;

        r0 := @this: com.android.server.pm.PackageManagerService;

        r1 = r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.Future mPrepareAppDataFuture>;

        if r1 != null goto label1;

        return;

     label1:
        staticinvoke <com.android.internal.util.ConcurrentUtils: java.lang.Object waitForFutureNoInterrupt(java.util.concurrent.Future,java.lang.String)>(r1, "wait for prepareAppData");

        r0.<com.android.server.pm.PackageManagerService: java.util.concurrent.Future mPrepareAppDataFuture> = null;

        return;
    }
}
