public class com.android.server.pm.PackageManagerServiceCompilerMapping extends java.lang.Object
{
    static final int REASON_SHARED_INDEX;
    public static final java.lang.String[] REASON_STRINGS;

    static void <clinit>()
    {
        java.lang.String[] r0;
        int $i0;
        java.lang.IllegalStateException $r1, $r4;
        java.lang.String $r2, $r3;
        boolean $z0;

        <com.android.server.pm.PackageManagerServiceCompilerMapping: int REASON_SHARED_INDEX> = 6;

        r0 = newarray (java.lang.String)[7];

        r0[0] = "first-boot";

        r0[1] = "boot";

        r0[2] = "install";

        r0[3] = "bg-dexopt";

        r0[4] = "ab-ota";

        r0[5] = "inactive";

        r0[6] = "shared";

        <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS> = r0;

        $i0 = lengthof r0;

        if 7 != $i0 goto label2;

        $r3 = "shared";

        $r2 = r0[6];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("REASON_STRINGS not correct because of shared index");

        throw $r4;

     label2:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("REASON_STRINGS not correct");

        throw $r1;

        return;
    }

    public void <init>()
    {
        com.android.server.pm.PackageManagerServiceCompilerMapping r0;

        r0 := @this: com.android.server.pm.PackageManagerServiceCompilerMapping;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void checkProperties()
    {
        java.lang.IllegalStateException r0, $r10, r11, r15;
        java.lang.String[] $r4;
        java.lang.String $r5, $r7, r12;
        boolean $z0;
        java.lang.Exception $r9;
        int i0;
        java.lang.StringBuilder r13;

        r11 = null;

        i0 = 0;

     label01:
        if i0 > 6 goto label10;

     label02:
        r12 = staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getSystemPropertyName(int)>(i0);

     label03:
        if r12 == null goto label06;

     label04:
        $z0 = virtualinvoke r12.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label06;

        staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getAndCheckValidity(int)>(i0);

     label05:
        goto label09;

     label06:
        r0 = new java.lang.IllegalStateException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reason system property name \"");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" for reason ");

        $r4 = <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS>;

        $r5 = $r4[i0];

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw r0;

     label07:
        $r9 := @caughtexception;

        r15 = r11;

        if r11 != null goto label08;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("PMS compiler filter settings are bad.");

        r15 = $r10;

     label08:
        virtualinvoke r15.<java.lang.RuntimeException: void addSuppressed(java.lang.Throwable)>($r9);

        r11 = r15;

     label09:
        i0 = i0 + 1;

        goto label01;

     label10:
        if r11 != null goto label11;

        return;

     label11:
        throw r11;

        catch java.lang.Exception from label02 to label03 with label07;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Exception from label06 to label07 with label07;
    }

    private static java.lang.String getAndCheckValidity(int)
    {
        int i0;
        java.lang.String r0, $r1, $r12, $r16, $r21, $r23;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r7, $r18;
        java.lang.String[] $r11, $r20;
        java.lang.IllegalStateException $r15, $r22;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getSystemPropertyName(int)>(i0);

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>($r1);

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <dalvik.system.DexFile: boolean isValidCompilerFilter(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: boolean isFilterAllowedForReason(int,java.lang.String)>(i0, r0);

        if $z2 == 0 goto label1;

        return r0;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value \"");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not allowed (reason ");

        $r11 = <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS>;

        $r12 = $r11[i0];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = new java.lang.IllegalStateException;

        $r16 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label2:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value \"");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not valid (reason ");

        $r20 = <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS>;

        $r21 = $r20[i0];

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = new java.lang.IllegalStateException;

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r22;
    }

    public static java.lang.String getCompilerFilterForReason(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String getAndCheckValidity(int)>(i0);

        return $r0;
    }

    public static java.lang.String getDefaultCompilerFilter()
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;

        r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("dalvik.vm.dex2oat-filter");

        if r0 == null goto label4;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label4;

     label1:
        $z1 = staticinvoke <dalvik.system.DexFile: boolean isValidCompilerFilter(java.lang.String)>(r0);

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <dalvik.system.DexFile: boolean isProfileGuidedCompilerFilter(java.lang.String)>(r0);

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        return r0;

     label3:
        return "speed";

     label4:
        return "speed";
    }

    public static java.lang.String getReasonName(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r6;
        java.lang.String[] r7;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return "unknown";

     label1:
        if i0 < 0 goto label2;

        r7 = <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS>;

        $i1 = lengthof r7;

        if i0 >= $i1 goto label2;

        $r6 = r7[i0];

        return $r6;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reason ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invalid");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private static java.lang.String getSystemPropertyName(int)
    {
        int i0, $i1;
        java.lang.StringBuilder $r0, $r7;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5, $r10, $r12;
        java.lang.String[] $r6, $r9;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r6 = <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS>;

        $i1 = lengthof $r6;

        if i0 >= $i1 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pm.dexopt.");

        $r9 = <com.android.server.pm.PackageManagerServiceCompilerMapping: java.lang.String[] REASON_STRINGS>;

        $r10 = $r9[i0];

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reason ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invalid");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    private static boolean isFilterAllowedForReason(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        boolean $z0, z1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 != 6 goto label2;

        $z0 = staticinvoke <dalvik.system.DexFile: boolean isProfileGuidedCompilerFilter(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }
}
