public class com.android.server.pm.PackageManagerServiceUtils extends java.lang.Object
{
    private static final int FSVERITY_DISABLED;
    private static final int FSVERITY_ENABLED;
    private static final int FSVERITY_LEGACY;
    public static final java.util.function.Predicate REMOVE_IF_NULL_PKG;
    private static final long SEVEN_DAYS_IN_MILLISECONDS;

    static void <clinit>()
    {
        com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$RPtRdW9NvVYNz-tG18YC0n7VJp4' $r0;
        java.util.function.Predicate r1;

        <com.android.server.pm.PackageManagerServiceUtils: long SEVEN_DAYS_IN_MILLISECONDS> = 604800000L;

        <com.android.server.pm.PackageManagerServiceUtils: int FSVERITY_LEGACY> = 1;

        <com.android.server.pm.PackageManagerServiceUtils: int FSVERITY_ENABLED> = 2;

        <com.android.server.pm.PackageManagerServiceUtils: int FSVERITY_DISABLED> = 0;

        $r0 = <com.android.server.pm._$$Lambda$PackageManagerServiceUtils$RPtRdW9NvVYNz_tG18YC0n7VJp4: com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$RPtRdW9NvVYNz-tG18YC0n7VJp4' INSTANCE>;

        r1 = (java.util.function.Predicate) $r0;

        <com.android.server.pm.PackageManagerServiceUtils: java.util.function.Predicate REMOVE_IF_NULL_PKG> = r1;

        return;
    }

    public void <init>()
    {
        com.android.server.pm.PackageManagerServiceUtils r0;

        r0 := @this: com.android.server.pm.PackageManagerServiceUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void applyPackageFilter(java.util.function.Predicate, java.util.Collection, java.util.Collection, java.util.List, com.android.server.pm.PackageManagerService)
    {
        java.util.Collection r0, r1;
        java.util.List r2, r11;
        com.android.server.pm.PackageManagerService r3;
        java.util.Iterator r4, r9;
        boolean $z0, $z2, $z4, $z8;
        java.lang.Object $r5, $r6;
        java.util.function.Predicate r7;
        com.android.server.pm.PackageSetting r8, r10;

        r7 := @parameter0: java.util.function.Predicate;

        r0 := @parameter1: java.util.Collection;

        r1 := @parameter2: java.util.Collection;

        r2 := @parameter3: java.util.List;

        r3 := @parameter4: com.android.server.pm.PackageManagerService;

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.android.server.pm.PackageSetting) $r6;

        $z8 = interfaceinvoke r7.<java.util.function.Predicate: boolean test(java.lang.Object)>(r8);

        if $z8 == 0 goto label2;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r8);

     label2:
        goto label1;

     label3:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void sortPackagesByUsageDate(java.util.List,com.android.server.pm.PackageManagerService)>(r2, r3);

        interfaceinvoke r1.<java.util.Collection: boolean removeAll(java.util.Collection)>(r2);

        r9 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r5 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.pm.PackageSetting) $r5;

        interfaceinvoke r0.<java.util.Collection: boolean add(java.lang.Object)>(r10);

        r11 = virtualinvoke r3.<com.android.server.pm.PackageManagerService: java.util.List findSharedNonSystemLibraries(com.android.server.pm.PackageSetting)>(r10);

        $z4 = interfaceinvoke r11.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label5;

        interfaceinvoke r11.<java.util.List: boolean removeAll(java.util.Collection)>(r0);

        interfaceinvoke r0.<java.util.Collection: boolean addAll(java.util.Collection)>(r11);

        interfaceinvoke r1.<java.util.Collection: boolean removeAll(java.util.Collection)>(r11);

     label5:
        goto label4;

     label6:
        interfaceinvoke r2.<java.util.List: void clear()>();

        return;
    }

    public static java.lang.String buildVerificationRootHashString(java.lang.String, java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4, $r7, $r9, $r10, $r11, $r15, r19, r21, r22;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        byte[] r20, r23;

        r19 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <java.io.File: java.lang.String separator>;

        $i0 = virtualinvoke r19.<java.lang.String: int lastIndexOf(java.lang.String)>($r3);

        $i1 = $i0 + 1;

        $r4 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r20 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: byte[] getRootHash(java.lang.String)>(r19);

        if r20 != null goto label1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        goto label2;

     label1:
        $r7 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label2:
        if r0 == null goto label8;

        $i2 = lengthof r0;

        if $i2 != 0 goto label3;

        goto label8;

     label3:
        $i3 = lengthof r0;

        i6 = $i3 - 1;

     label4:
        if i6 < 0 goto label7;

        r21 = r0[i6];

        $r11 = <java.io.File: java.lang.String separator>;

        $i4 = virtualinvoke r21.<java.lang.String: int lastIndexOf(java.lang.String)>($r11);

        $i5 = $i4 + 1;

        r22 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int)>($i5);

        r23 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: byte[] getRootHash(java.lang.String)>(r21);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        if r23 != null goto label5;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        goto label6;

     label5:
        $r15 = staticinvoke <com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>(r23);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

     label6:
        i6 = i6 + -1;

        goto label4;

     label7:
        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label8:
        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static long calculateInstalledSize(java.lang.String, java.lang.String)
    {
        long l0;
        java.io.File $r0;
        android.content.pm.PackageParser$PackageLite $r1;
        java.lang.Throwable $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r7, r8;

        r7 := @parameter0: java.lang.String;

        r8 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r7);

     label1:
        $r1 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>($r0, 0);

        l0 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,java.lang.String)>($r1, r8);

     label2:
        return l0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to calculate installed size: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r6);

        return -1L;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    public static boolean checkISA(java.lang.String)
    {
        java.lang.String r0, $r2, $r3;
        java.lang.String[] r1;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r2 = r1[i1];

        $r3 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int compareSignatures(android.content.pm.Signature[], android.content.pm.Signature[])
    {
        android.content.pm.Signature[] r0, r8;
        int i0, $i1, i3, i5, i6, i7, i8;
        android.util.ArraySet $r2, $r3;
        boolean $z0, $z3;
        android.content.pm.Signature $r4, $r5, $r6, $r7;
        byte b2, b4;

        r8 := @parameter0: android.content.pm.Signature[];

        r0 := @parameter1: android.content.pm.Signature[];

        b2 = 1;

        if r8 != null goto label03;

        if r0 != null goto label01;

        goto label02;

     label01:
        b2 = -1;

     label02:
        return b2;

     label03:
        if r0 != null goto label04;

        return -2;

     label04:
        i3 = lengthof r8;

        i0 = lengthof r0;

        b4 = -3;

        if i3 == i0 goto label05;

        return -3;

     label05:
        $i1 = lengthof r8;

        if $i1 != 1 goto label07;

        $r7 = r8[0];

        $r6 = r0[0];

        $z3 = virtualinvoke $r7.<android.content.pm.Signature: boolean equals(java.lang.Object)>($r6);

        if $z3 == 0 goto label06;

        b4 = 0;

        goto label06;

     label06:
        return b4;

     label07:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        i5 = lengthof r8;

        i6 = 0;

     label08:
        if i6 >= i5 goto label09;

        $r5 = r8[i6];

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>($r5);

        i6 = i6 + 1;

        goto label08;

     label09:
        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        i7 = lengthof r0;

        i8 = 0;

     label10:
        if i8 >= i7 goto label11;

        $r4 = r0[i8];

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        i8 = i8 + 1;

        goto label10;

     label11:
        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label12;

        return 0;

     label12:
        return -3;
    }

    public static boolean compressedFileExists(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        java.io.File[] r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.io.File[] getCompressedFiles(java.lang.String)>(r0);

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static void copyFile(java.lang.String, java.io.File, java.lang.String) throws android.system.ErrnoException, java.io.IOException
    {
        java.io.FileDescriptor r0, $r9;
        boolean $z0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r5, $r7, $r8, r11, r13;
        java.io.File $r6, r12;
        int $i0, $i1, $i2;
        java.lang.Throwable $r10;
        java.io.FileInputStream r16, r17;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.io.File;

        r13 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.os.FileUtils: boolean isValidExtFilename(java.lang.String)>(r13);

        if $z0 == 0 goto label8;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r5);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r12, r13);

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $i1 = <android.system.OsConstants: int O_RDWR>;

        $i0 = <android.system.OsConstants: int O_CREAT>;

        $i2 = $i1 | $i0;

        r0 = staticinvoke <android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>($r7, $i2, 420);

        $r8 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r8, 420);

        r16 = null;

     label1:
        r17 = new java.io.FileInputStream;

     label2:
        r16 = null;

     label3:
        specialinvoke r17.<java.io.FileInputStream: void <init>(java.lang.String)>(r11);

     label4:
        r16 = r17;

     label5:
        $r9 = virtualinvoke r17.<java.io.FileInputStream: java.io.FileDescriptor getFD()>();

        staticinvoke <android.os.FileUtils: long copy(java.io.FileDescriptor,java.io.FileDescriptor)>($r9, r0);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        return;

     label7:
        $r10 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r16);

        throw $r10;

     label8:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid filename: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static int copyPackage(java.lang.String, java.io.File)
    {
        java.lang.String r0, r1, $r3, $r9, $r12, $r19;
        java.lang.StringBuilder r2, $r14;
        java.lang.String[] $r4, $r5, $r6, $r8;
        boolean $z0;
        int $i0, i2;
        java.lang.Throwable $r13;
        java.io.File r20, r21;
        android.content.pm.PackageParser$PackageLite r22;

        r0 := @parameter0: java.lang.String;

        r20 := @parameter1: java.io.File;

        if r0 != null goto label1;

        return -3;

     label1:
        r21 = new java.io.File;

        specialinvoke r21.<java.io.File: void <init>(java.lang.String)>(r0);

        r22 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>(r21, 0);

        $r3 = r22.<android.content.pm.PackageParser$PackageLite: java.lang.String baseCodePath>;

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void copyFile(java.lang.String,java.io.File,java.lang.String)>($r3, r20, "base.apk");

        $r4 = r22.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>($r4);

        if $z0 != 0 goto label5;

     label2:
        i2 = 0;

     label3:
        $r5 = r22.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $i0 = lengthof $r5;

        if i2 >= $i0 goto label5;

        $r6 = r22.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitCodePaths>;

        r1 = $r6[i2];

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("split_");

        $r8 = r22.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $r9 = $r8[i2];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".apk");

        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void copyFile(java.lang.String,java.io.File,java.lang.String)>(r1, r20, $r12);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return 1;

     label6:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to copy package at ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r19);

        return -4;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label6;
        catch java.io.IOException from label1 to label2 with label6;
        catch android.system.ErrnoException from label1 to label2 with label6;
        catch android.content.pm.PackageParser$PackageParserException from label3 to label4 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch android.system.ErrnoException from label3 to label4 with label6;
    }

    public static int decompressFile(java.io.File, java.io.File) throws android.system.ErrnoException
    {
        java.io.File r0, r1;
        boolean $z0;
        java.lang.String $r2, $r5, $r8, $r10, $r16, $r19, $r21;
        java.lang.StringBuilder $r3, $r14;
        java.lang.Throwable $r11, $r12, $r13, $r22, $r23;
        java.util.zip.GZIPInputStream r25;
        java.io.FileInputStream r26;
        java.io.FileOutputStream r27;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_COMPRESSION>;

        if $z0 == 0 goto label01;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decompress file; src: ");

        $r5 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dst: ");

        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r10);

     label01:
        r25 = new java.util.zip.GZIPInputStream;

        r26 = new java.io.FileInputStream;

        specialinvoke r26.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke r25.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>(r26);

     label02:
        r27 = new java.io.FileOutputStream;

        specialinvoke r27.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r1, 0);

     label03:
        staticinvoke <android.os.FileUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r25, r27);

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r2, 420);

     label04:
        virtualinvoke r27.<java.io.OutputStream: void close()>();

     label05:
        virtualinvoke r25.<java.io.InputStream: void close()>();

     label06:
        return 1;

     label07:
        $r12 := @caughtexception;

     label08:
        virtualinvoke r27.<java.io.OutputStream: void close()>();

     label09:
        goto label12;

     label10:
        $r11 := @caughtexception;

     label11:
        virtualinvoke $r12.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label12:
        throw $r12;

     label13:
        $r22 := @caughtexception;

     label14:
        virtualinvoke r25.<java.io.InputStream: void close()>();

     label15:
        goto label18;

     label16:
        $r23 := @caughtexception;

     label17:
        virtualinvoke $r22.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r23);

     label18:
        throw $r22;

     label19:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decompress file; src: ");

        $r16 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dst: ");

        $r19 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r21);

        return -110;

        catch java.io.IOException from label01 to label02 with label19;
        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.io.IOException from label05 to label06 with label19;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label18 to label19 with label19;
    }

    public static java.lang.String deriveAbiOverride(java.lang.String, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        java.lang.String $r1, r2;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: com.android.server.pm.PackageSetting;

        $r1 = "-";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        r2 = null;

        goto label3;

     label1:
        if r2 == null goto label2;

        goto label3;

     label2:
        r2 = null;

        if r0 == null goto label3;

        r2 = r0.<com.android.server.pm.PackageSetting: java.lang.String cpuAbiOverrideString>;

     label3:
        return r2;
    }

    public static void dumpCriticalInfo(android.util.proto.ProtoOutputStream)
    {
        java.io.File $r0;
        boolean $z0;
        java.lang.Throwable $r1, $r2, $r3;
        android.util.proto.ProtoOutputStream r4;
        java.io.BufferedReader r5;
        java.io.FileReader r6;
        java.lang.String r7;

        r4 := @parameter0: android.util.proto.ProtoOutputStream;

     label01:
        r5 = new java.io.BufferedReader;

        r6 = new java.io.FileReader;

        $r0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.io.File getSettingsProblemFile()>();

        specialinvoke r6.<java.io.FileReader: void <init>(java.io.File)>($r0);

        specialinvoke r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r6);

     label02:
        r7 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if r7 == null goto label08;

     label04:
        $z0 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("ignored: updated version");

        if $z0 == 0 goto label06;

     label05:
        goto label02;

     label06:
        virtualinvoke r4.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(2237677961223L, r7);

     label07:
        goto label02;

     label08:
        virtualinvoke r5.<java.io.BufferedReader: void close()>();

     label09:
        goto label17;

     label10:
        $r1 := @caughtexception;

     label11:
        virtualinvoke r5.<java.io.BufferedReader: void close()>();

     label12:
        goto label15;

     label13:
        $r2 := @caughtexception;

     label14:
        virtualinvoke $r1.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r2);

     label15:
        throw $r1;

     label16:
        $r3 := @caughtexception;

     label17:
        return;

        catch java.io.IOException from label01 to label02 with label16;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.io.IOException from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label15 to label16 with label16;
    }

    public static void dumpCriticalInfo(java.io.PrintWriter, java.lang.String)
    {
        java.io.BufferedReader r0;
        java.io.File $r1;
        boolean $z0;
        java.lang.Throwable $r2, $r3, $r4;
        java.io.PrintWriter r5;
        java.lang.String r6, r8;
        java.io.FileReader r7;

        r5 := @parameter0: java.io.PrintWriter;

        r6 := @parameter1: java.lang.String;

     label01:
        r0 = new java.io.BufferedReader;

        r7 = new java.io.FileReader;

        $r1 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.io.File getSettingsProblemFile()>();

        specialinvoke r7.<java.io.FileReader: void <init>(java.io.File)>($r1);

        specialinvoke r0.<java.io.BufferedReader: void <init>(java.io.Reader)>(r7);

     label02:
        r8 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if r8 == null goto label10;

     label04:
        $z0 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("ignored: updated version");

        if $z0 == 0 goto label06;

     label05:
        goto label02;

     label06:
        if r6 == null goto label08;

     label07:
        virtualinvoke r5.<java.io.PrintWriter: void print(java.lang.String)>(r6);

     label08:
        virtualinvoke r5.<java.io.PrintWriter: void println(java.lang.String)>(r8);

     label09:
        goto label02;

     label10:
        virtualinvoke r0.<java.io.BufferedReader: void close()>();

     label11:
        goto label19;

     label12:
        $r3 := @caughtexception;

     label13:
        virtualinvoke r0.<java.io.BufferedReader: void close()>();

     label14:
        goto label17;

     label15:
        $r4 := @caughtexception;

     label16:
        virtualinvoke $r3.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r4);

     label17:
        throw $r3;

     label18:
        $r2 := @caughtexception;

     label19:
        return;

        catch java.io.IOException from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.io.IOException from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label17 to label18 with label18;
    }

    public static void enforceShellRestriction(android.os.UserManagerInternal, java.lang.String, int, int)
    {
        java.lang.String r0, $r5, $r7, $r12;
        int i0, i1;
        java.lang.StringBuilder $r1, $r8;
        boolean $z0;
        java.lang.SecurityException $r11;
        android.os.UserManagerInternal r13;

        r13 := @parameter0: android.os.UserManagerInternal;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if i0 != 2000 goto label3;

        if i1 < 0 goto label2;

        $z0 = virtualinvoke r13.<android.os.UserManagerInternal: boolean hasUserRestriction(java.lang.String,int)>(r0, i1);

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shell does not have permission to access user ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = new java.lang.SecurityException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        if i1 >= 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to check shell permission for user ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\t");

        $r5 = staticinvoke <android.os.Debug: java.lang.String getCallers(int)>(3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r7);

     label3:
        return;
    }

    public static void enforceSystemOrPhoneCaller(java.lang.String, int)
    {
        java.lang.String r0, $r8;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.SecurityException $r7;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 == 1001 goto label2;

        if i0 != 1000 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from UID ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = new java.lang.SecurityException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label2:
        return;
    }

    public static java.io.File[] getCompressedFiles(java.lang.String)
    {
        java.lang.String r0, $r2, $r4, $r10, $r12, $r16, r18;
        int i0, $i1, $i2, $i3, $i4;
        java.io.File $r1, $r3, r19;
        com.android.server.pm.PackageManagerServiceUtils$1 $r5;
        boolean $z0;
        java.lang.StringBuilder $r6, $r13;
        java.io.File[] r21;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        r18 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        i0 = virtualinvoke r18.<java.lang.String: int lastIndexOf(java.lang.String)>("-Stub");

        if i0 < 0 goto label4;

        $i1 = virtualinvoke r18.<java.lang.String: int length()>();

        $r2 = "-Stub";

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i3 = $i2 + i0;

        if $i1 == $i3 goto label1;

        goto label4;

     label1:
        r19 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        if r19 != null goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to determine stub parent dir for codePath: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r16);

        return null;

     label2:
        $r3 = new java.io.File;

        $r4 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r19, $r4);

        $r5 = new com.android.server.pm.PackageManagerServiceUtils$1;

        specialinvoke $r5.<com.android.server.pm.PackageManagerServiceUtils$1: void <init>()>();

        r21 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r5);

        $z0 = <com.android.server.pm.PackageManagerService: boolean DEBUG_COMPRESSION>;

        if $z0 == 0 goto label3;

        if r21 == null goto label3;

        $i4 = lengthof r21;

        if $i4 <= 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCompressedFiles[");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r21);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r12);

     label3:
        return r21;

     label4:
        return null;
    }

    public static long getLastModifiedTime(com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.io.File $r2, $r4, $r8;
        java.lang.String $r3, $r5, $r10;
        boolean $z0;
        java.lang.String[] $r6, $r7, $r9;
        int $i0, i5;
        long $l1, $l2, l3, l4;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r2 = new java.io.File;

        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getCodePath()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $l2 = virtualinvoke $r2.<java.io.File: long lastModified()>();

        return $l2;

     label1:
        $r4 = new java.io.File;

        $r5 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getBaseCodePath()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        l3 = virtualinvoke $r4.<java.io.File: long lastModified()>();

        l4 = l3;

        $r6 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        if $r6 == null goto label3;

        $r7 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $i0 = lengthof $r7;

        i5 = $i0 - 1;

     label2:
        l4 = l3;

        if i5 < 0 goto label3;

        $r8 = new java.io.File;

        $r9 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String[] getSplitCodePaths()>();

        $r10 = $r9[i5];

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r10);

        $l1 = virtualinvoke $r8.<java.io.File: long lastModified()>();

        l3 = staticinvoke <java.lang.Math: long max(long,long)>(l3, $l1);

        i5 = i5 + -1;

        goto label2;

     label3:
        return l4;
    }

    public static android.content.pm.PackageInfoLite getMinimalPackageInfo(android.content.Context, java.lang.String, int, java.lang.String)
    {
        java.lang.String r0, $r6, $r7, $r14, $r21, r23;
        android.content.pm.PackageParser$PackageLite r3;
        long l0;
        android.content.pm.PackageInfoLite $r4;
        java.io.File $r5;
        int $i1, $i2, $i3, $i4, $i5, i8, i9;
        java.lang.String[] $r8;
        int[] $r9;
        android.content.pm.VerifierInfo[] $r10;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r11, $r16;
        java.lang.Throwable $r15;
        android.content.Context r22;

        r22 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        i8 := @parameter2: int;

        r23 := @parameter3: java.lang.String;

        $r4 = new android.content.pm.PackageInfoLite;

        specialinvoke $r4.<android.content.pm.PackageInfoLite: void <init>()>();

        if r0 != null goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package file ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r14);

        $r4.<android.content.pm.PackageInfoLite: int recommendedInstallLocation> = -2;

        return $r4;

     label1:
        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r0);

     label2:
        r3 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>($r5, 0);

        l0 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,java.lang.String)>(r3, r23);

     label3:
        $r6 = r3.<android.content.pm.PackageParser$PackageLite: java.lang.String packageName>;

        $i1 = r3.<android.content.pm.PackageParser$PackageLite: int installLocation>;

        i9 = staticinvoke <com.android.internal.content.PackageHelper: int resolveInstallLocation(android.content.Context,java.lang.String,int,long,int)>(r22, $r6, $i1, l0, i8);

        $r7 = r3.<android.content.pm.PackageParser$PackageLite: java.lang.String packageName>;

        $r4.<android.content.pm.PackageInfoLite: java.lang.String packageName> = $r7;

        $r8 = r3.<android.content.pm.PackageParser$PackageLite: java.lang.String[] splitNames>;

        $r4.<android.content.pm.PackageInfoLite: java.lang.String[] splitNames> = $r8;

        $i2 = r3.<android.content.pm.PackageParser$PackageLite: int versionCode>;

        $r4.<android.content.pm.PackageInfoLite: int versionCode> = $i2;

        $i3 = r3.<android.content.pm.PackageParser$PackageLite: int versionCodeMajor>;

        $r4.<android.content.pm.PackageInfoLite: int versionCodeMajor> = $i3;

        $i4 = r3.<android.content.pm.PackageParser$PackageLite: int baseRevisionCode>;

        $r4.<android.content.pm.PackageInfoLite: int baseRevisionCode> = $i4;

        $r9 = r3.<android.content.pm.PackageParser$PackageLite: int[] splitRevisionCodes>;

        $r4.<android.content.pm.PackageInfoLite: int[] splitRevisionCodes> = $r9;

        $i5 = r3.<android.content.pm.PackageParser$PackageLite: int installLocation>;

        $r4.<android.content.pm.PackageInfoLite: int installLocation> = $i5;

        $r10 = r3.<android.content.pm.PackageParser$PackageLite: android.content.pm.VerifierInfo[] verifiers>;

        $r4.<android.content.pm.PackageInfoLite: android.content.pm.VerifierInfo[] verifiers> = $r10;

        $r4.<android.content.pm.PackageInfoLite: int recommendedInstallLocation> = i9;

        $z0 = r3.<android.content.pm.PackageParser$PackageLite: boolean multiArch>;

        $r4.<android.content.pm.PackageInfoLite: boolean multiArch> = $z0;

        $z1 = r3.<android.content.pm.PackageParser$PackageLite: boolean debuggable>;

        $r4.<android.content.pm.PackageInfoLite: boolean debuggable> = $z1;

        return $r4;

     label4:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse package at ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r21);

        $z2 = virtualinvoke $r5.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label5;

        $r4.<android.content.pm.PackageInfoLite: int recommendedInstallLocation> = -6;

        goto label6;

     label5:
        $r4.<android.content.pm.PackageInfoLite: int recommendedInstallLocation> = -2;

     label6:
        return $r4;

        catch android.content.pm.PackageParser$PackageParserException from label2 to label3 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    private static android.util.ArraySet getPackageNamesForIntent(android.content.Intent, int)
    {
        int i0;
        android.content.pm.IPackageManager $r0;
        android.content.pm.ParceledListSlice $r1;
        android.util.ArraySet $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.content.pm.ResolveInfo $r4;
        android.content.pm.ActivityInfo $r5;
        java.lang.String $r6;
        android.os.RemoteException $r7;
        android.content.Intent r8;
        java.util.List r9;
        java.util.Iterator r11;

        r8 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

     label1:
        $r0 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r1 = interfaceinvoke $r0.<android.content.pm.IPackageManager: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>(r8, null, 0, i0);

        r9 = virtualinvoke $r1.<android.content.pm.ParceledListSlice: java.util.List getList()>();

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r9 = null;

     label4:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        if r9 == null goto label6;

        r11 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.content.pm.ResolveInfo) $r3;

        $r5 = $r4.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r6 = $r5.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>($r6);

        goto label5;

     label6:
        return $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.List getPackagesForDexopt(java.util.Collection, com.android.server.pm.PackageManagerService)
    {
        java.util.Collection r0;
        com.android.server.pm.PackageManagerService r1;
        java.util.List $r2;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: com.android.server.pm.PackageManagerService;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.util.List getPackagesForDexopt(java.util.Collection,com.android.server.pm.PackageManagerService,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static java.util.List getPackagesForDexopt(java.util.Collection, com.android.server.pm.PackageManagerService, boolean)
    {
        com.android.server.pm.PackageManagerService r0;
        boolean z0, $z2, $z3;
        long l0, $l5;
        java.util.function.Predicate $r7, r50, r52;
        int $i1;
        com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$6Hiu23bVWNI_UB8JjRQOmllFVE8' $r9;
        android.util.ArraySet $r12;
        com.android.server.pm.dex.DexManager $r14;
        java.lang.String $r17, $r19, $r22, $r24, $r31, $r34;
        com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$-TyALUo9to-tSa8TowQ8FvHNb6w' $r25;
        java.lang.Object $r26, r37;
        com.android.server.pm.pkg.PackageStateUnserialized $r27;
        byte $b4;
        java.util.Collection r35;
        com.android.server.pm.PackageSetting r36;
        java.util.LinkedList r40;
        java.util.ArrayList r41, r42;
        android.content.Intent r43;
        com.android.server.pm._$$Lambda$PackageManagerServiceUtils$miSwAI7tlaWPbDunujMxV7oiAWA r44;
        com.android.server.pm._$$Lambda$PackageManagerServiceUtils$CznOu58qzp1xBXuz65vwZNf_2YQ r45;
        java.lang.StringBuilder r46, r48, r49;
        com.android.server.pm._$$Lambda$PackageManagerServiceUtils$sV6Dy76F46JIA9ovYV5QyhvLuQ4 r47;
        java.util.Comparator r51;

        r35 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.android.server.pm.PackageManagerService;

        z0 := @parameter2: boolean;

        r40 = new java.util.LinkedList;

        specialinvoke r40.<java.util.LinkedList: void <init>()>();

        r41 = new java.util.ArrayList;

        specialinvoke r41.<java.util.ArrayList: void <init>(java.util.Collection)>(r35);

        $r7 = <com.android.server.pm.PackageManagerServiceUtils: java.util.function.Predicate REMOVE_IF_NULL_PKG>;

        virtualinvoke r41.<java.util.ArrayList: boolean removeIf(java.util.function.Predicate)>($r7);

        r42 = new java.util.ArrayList;

        $i1 = virtualinvoke r41.<java.util.ArrayList: int size()>();

        specialinvoke r42.<java.util.ArrayList: void <init>(int)>($i1);

        $r9 = <com.android.server.pm._$$Lambda$PackageManagerServiceUtils$6Hiu23bVWNI_UB8JjRQOmllFVE8: com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$6Hiu23bVWNI_UB8JjRQOmllFVE8' INSTANCE>;

        r50 = (java.util.function.Predicate) $r9;

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void applyPackageFilter(java.util.function.Predicate,java.util.Collection,java.util.Collection,java.util.List,com.android.server.pm.PackageManagerService)>(r50, r40, r41, r42, r0);

        r44 = new com.android.server.pm._$$Lambda$PackageManagerServiceUtils$miSwAI7tlaWPbDunujMxV7oiAWA;

        r43 = new android.content.Intent;

        specialinvoke r43.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.PRE_BOOT_COMPLETED");

        $r12 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: android.util.ArraySet getPackageNamesForIntent(android.content.Intent,int)>(r43, 0);

        specialinvoke r44.<com.android.server.pm._$$Lambda$PackageManagerServiceUtils$miSwAI7tlaWPbDunujMxV7oiAWA: void <init>(android.util.ArraySet)>($r12);

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void applyPackageFilter(java.util.function.Predicate,java.util.Collection,java.util.Collection,java.util.List,com.android.server.pm.PackageManagerService)>(r44, r40, r41, r42, r0);

        r45 = new com.android.server.pm._$$Lambda$PackageManagerServiceUtils$CznOu58qzp1xBXuz65vwZNf_2YQ;

        $r14 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: com.android.server.pm.dex.DexManager getDexManager()>();

        specialinvoke r45.<com.android.server.pm._$$Lambda$PackageManagerServiceUtils$CznOu58qzp1xBXuz65vwZNf_2YQ: void <init>(com.android.server.pm.dex.DexManager)>($r14);

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void applyPackageFilter(java.util.function.Predicate,java.util.Collection,java.util.Collection,java.util.List,com.android.server.pm.PackageManagerService)>(r45, r40, r41, r42, r0);

        $z2 = virtualinvoke r41.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService: boolean isHistoricalPackageUsageAvailable()>();

        if $z3 == 0 goto label5;

        if z0 == 0 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", "Looking at historical package use");

     label1:
        $r25 = <com.android.server.pm._$$Lambda$PackageManagerServiceUtils$_TyALUo9to_tSa8TowQ8FvHNb6w: com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$-TyALUo9to-tSa8TowQ8FvHNb6w' INSTANCE>;

        r51 = (java.util.Comparator) $r25;

        $r26 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection,java.util.Comparator)>(r41, r51);

        r36 = (com.android.server.pm.PackageSetting) $r26;

        if z0 == 0 goto label2;

        r46 = new java.lang.StringBuilder;

        specialinvoke r46.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Taking package ");

        $r31 = r36.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        virtualinvoke r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as reference in time use");

        $r34 = virtualinvoke r46.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r34);

     label2:
        $r27 = virtualinvoke r36.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        l0 = virtualinvoke $r27.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $b4 = l0 cmp 0L;

        if $b4 == 0 goto label3;

        r47 = new com.android.server.pm._$$Lambda$PackageManagerServiceUtils$sV6Dy76F46JIA9ovYV5QyhvLuQ4;

        $l5 = l0 - 604800000L;

        specialinvoke r47.<com.android.server.pm._$$Lambda$PackageManagerServiceUtils$sV6Dy76F46JIA9ovYV5QyhvLuQ4: void <init>(long)>($l5);

        r37 = r47;

        goto label4;

     label3:
        r37 = <com.android.server.pm._$$Lambda$PackageManagerServiceUtils$Nz561xT8r_YIT6_Lm5bJ67n8gRs: com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$Nz561xT8r_YIT6_Lm5bJ67n8gRs' INSTANCE>;

     label4:
        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void sortPackagesByUsageDate(java.util.List,com.android.server.pm.PackageManagerService)>(r41, r0);

        goto label6;

     label5:
        r37 = <com.android.server.pm._$$Lambda$PackageManagerServiceUtils$kGgIy61AI0hVhikc5IBRoH_OqgM: com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$kGgIy61AI0hVhikc5IBRoH-OqgM' INSTANCE>;

     label6:
        r52 = (java.util.function.Predicate) r37;

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void applyPackageFilter(java.util.function.Predicate,java.util.Collection,java.util.Collection,java.util.List,com.android.server.pm.PackageManagerService)>(r52, r40, r41, r42, r0);

        if z0 == 0 goto label7;

        r48 = new java.lang.StringBuilder;

        specialinvoke r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Packages to be dexopted: ");

        $r17 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.lang.String packagesToString(java.util.List)>(r40);

        virtualinvoke r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r19);

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Packages skipped from dexopt: ");

        $r22 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.lang.String packagesToString(java.util.List)>(r41);

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r24);

     label7:
        return r40;
    }

    public static com.android.server.pm.permission.PermissionsState getPermissionsState(android.content.pm.PackageManagerInternal, com.android.server.pm.parsing.pkg.AndroidPackage)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        java.lang.String $r1;
        com.android.server.pm.permission.PermissionsState $r2;
        android.content.pm.PackageManagerInternal r3;
        com.android.server.pm.PackageSetting r4;

        r3 := @parameter0: android.content.pm.PackageManagerInternal;

        r0 := @parameter1: com.android.server.pm.parsing.pkg.AndroidPackage;

        $r1 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: java.lang.String getPackageName()>();

        r4 = virtualinvoke r3.<android.content.pm.PackageManagerInternal: com.android.server.pm.PackageSetting getPackageSetting(java.lang.String)>($r1);

        if r4 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r4.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        return $r2;
    }

    private static byte[] getRootHash(java.lang.String)
    {
        byte[] $r0, $r1, $r2, $r3, r6;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.String r5;
        android.os.incremental.V4Signature r7;
        android.os.incremental.V4Signature$HashingInfo r8;
        java.io.IOException r9, r10, r11;

        r5 := @parameter0: java.lang.String;

     label1:
        r6 = staticinvoke <android.os.incremental.IncrementalManager: byte[] unsafeGetFileSignature(java.lang.String)>(r5);

     label2:
        if r6 == null goto label6;

     label3:
        r7 = staticinvoke <android.os.incremental.V4Signature: android.os.incremental.V4Signature readFrom(byte[])>(r6);

        $r0 = r7.<android.os.incremental.V4Signature: byte[] hashingInfo>;

        if $r0 == null goto label5;

        $r1 = r7.<android.os.incremental.V4Signature: byte[] hashingInfo>;

        r8 = staticinvoke <android.os.incremental.V4Signature$HashingInfo: android.os.incremental.V4Signature$HashingInfo fromByteArray(byte[])>($r1);

        $r2 = r8.<android.os.incremental.V4Signature$HashingInfo: byte[] rawRootHash>;

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(byte[])>($r2);

        if $z0 != 0 goto label4;

        $r3 = r8.<android.os.incremental.V4Signature$HashingInfo: byte[] rawRootHash>;

        return $r3;

     label4:
        r9 = new java.io.IOException;

        specialinvoke r9.<java.io.IOException: void <init>(java.lang.String)>("Root has not present");

        throw r9;

     label5:
        r10 = new java.io.IOException;

        specialinvoke r10.<java.io.IOException: void <init>(java.lang.String)>("Hashing info not present");

        throw r10;

     label6:
        r11 = new java.io.IOException;

        specialinvoke r11.<java.io.IOException: void <init>(java.lang.String)>("File signature not present");

        throw r11;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "ERROR: could not load root hash from incremental install");

        return null;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label4 to label5 with label7;
        catch java.io.IOException from label5 to label6 with label7;
        catch java.io.IOException from label6 to label7 with label7;
    }

    private static java.io.File getSettingsProblemFile()
    {
        java.io.File $r0, $r1, $r2;

        $r0 = new java.io.File;

        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "system");

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "uiderrors.txt");

        return $r0;
    }

    static boolean isApkVerificationForced(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        return 0;
    }

    static boolean isApkVerityEnabled()
    {
        int i0, $i1;
        boolean z0;

        i0 = <android.os.Build$VERSION: int FIRST_SDK_INT>;

        z0 = 0;

        if i0 >= 30 goto label1;

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.apk_verity.mode", 0);

        if $i1 != 2 goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;
    }

    public static boolean isDowngradePermitted(int, boolean)
    {
        int i0, $i1, $i2;
        boolean $z1, z2, z3, z4, z5;

        i0 := @parameter0: int;

        z2 := @parameter1: boolean;

        $i1 = i0 & 128;

        if $i1 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 != 0 goto label3;

        return 0;

     label3:
        $z1 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z1 != 0 goto label5;

        if z2 == 0 goto label4;

        goto label5;

     label4:
        z4 = 0;

        goto label6;

     label5:
        z4 = 1;

     label6:
        if z4 == 0 goto label7;

        return 1;

     label7:
        $i2 = 1048576 & i0;

        if $i2 == 0 goto label8;

        z5 = 1;

        goto label9;

     label8:
        z5 = 0;

     label9:
        return z5;
    }

    static boolean isLegacyApkVerityEnabled()
    {
        int $i0;
        boolean z0;

        z0 = 0;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.apk_verity.mode", 0);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public static boolean isUnusedSinceTimeInMillis(long, long, long, com.android.server.pm.dex.PackageDexUsage$PackageUseInfo, long, long)
    {
        long l0, l1, l2, l3, l4, $l5, $l7, $l9;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo r0;
        byte $b6, $b8, $b10;
        boolean $z0, z1, z2, z3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r0 := @parameter3: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo;

        l3 := @parameter4: long;

        l4 := @parameter5: long;

        z1 = 0;

        $l5 = l1 - l0;

        $b6 = $l5 cmp l2;

        if $b6 >= 0 goto label1;

        return 0;

     label1:
        $l7 = l1 - l4;

        $b8 = $l7 cmp l2;

        if $b8 >= 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if z2 == 0 goto label4;

        return 0;

     label4:
        $l9 = l1 - l3;

        $b10 = $l9 cmp l2;

        if $b10 >= 0 goto label5;

        $z0 = virtualinvoke r0.<com.android.server.pm.dex.PackageDexUsage$PackageUseInfo: boolean isAnyCodePathUsedByOtherApps()>();

        if $z0 == 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        if z3 != 0 goto label7;

        z1 = 1;

     label7:
        return z1;
    }

    static boolean lambda$getPackagesForDexopt$2(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        com.android.server.pm.parsing.pkg.AndroidPackage $r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        $r1 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        $z0 = interfaceinvoke $r1.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isCoreApp()>();

        return $z0;
    }

    static boolean lambda$getPackagesForDexopt$3(android.util.ArraySet, com.android.server.pm.PackageSetting)
    {
        android.util.ArraySet r0;
        com.android.server.pm.PackageSetting r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @parameter0: android.util.ArraySet;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        $r2 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z0 = virtualinvoke r0.<android.util.ArraySet: boolean contains(java.lang.Object)>($r2);

        return $z0;
    }

    static boolean lambda$getPackagesForDexopt$4(com.android.server.pm.dex.DexManager, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.dex.DexManager r0;
        com.android.server.pm.PackageSetting r1;
        java.lang.String $r2;
        com.android.server.pm.dex.PackageDexUsage$PackageUseInfo $r3;
        boolean $z0;

        r0 := @parameter0: com.android.server.pm.dex.DexManager;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        $r2 = r1.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $r3 = virtualinvoke r0.<com.android.server.pm.dex.DexManager: com.android.server.pm.dex.PackageDexUsage$PackageUseInfo getPackageUseInfoOrDefault(java.lang.String)>($r2);

        $z0 = virtualinvoke $r3.<com.android.server.pm.dex.PackageDexUsage$PackageUseInfo: boolean isAnyCodePathUsedByOtherApps()>();

        return $z0;
    }

    static int lambda$getPackagesForDexopt$5(com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0, r1;
        com.android.server.pm.pkg.PackageStateUnserialized $r2, $r3;
        long $l0, $l1;
        int $i2;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        $r2 = virtualinvoke r0.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l0 = virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $r3 = virtualinvoke r1.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l1 = virtualinvoke $r3.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l0, $l1);

        return $i2;
    }

    static boolean lambda$getPackagesForDexopt$6(long, com.android.server.pm.PackageSetting)
    {
        long l0, $l1;
        com.android.server.pm.PackageSetting r0;
        com.android.server.pm.pkg.PackageStateUnserialized $r1;
        byte $b2;
        boolean z0;

        l0 := @parameter0: long;

        r0 := @parameter1: com.android.server.pm.PackageSetting;

        $r1 = virtualinvoke r0.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l1 = virtualinvoke $r1.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $b2 = $l1 cmp l0;

        if $b2 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static boolean lambda$getPackagesForDexopt$7(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        return 1;
    }

    static boolean lambda$getPackagesForDexopt$8(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        return 1;
    }

    static int lambda$sortPackagesByUsageDate$1(com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0, r1;
        com.android.server.pm.pkg.PackageStateUnserialized $r2, $r3;
        long $l0, $l1;
        int $i2;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        r1 := @parameter1: com.android.server.pm.PackageSetting;

        $r2 = virtualinvoke r1.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l0 = virtualinvoke $r2.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $r3 = virtualinvoke r0.<com.android.server.pm.PackageSetting: com.android.server.pm.pkg.PackageStateUnserialized getPkgState()>();

        $l1 = virtualinvoke $r3.<com.android.server.pm.pkg.PackageStateUnserialized: long getLatestForegroundPackageUseTimeInMills()>();

        $i2 = staticinvoke <java.lang.Long: int compare(long,long)>($l0, $l1);

        return $i2;
    }

    static boolean lambda$static$0(com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0;
        com.android.server.pm.parsing.pkg.AndroidPackage $r1;
        boolean z0;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        $r1 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.parsing.pkg.AndroidPackage pkg>;

        if $r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void logCriticalInfo(int, java.lang.String)
    {
        int i0;
        java.io.File r0;
        com.android.internal.util.FastPrintWriter r1;
        long $l2;
        java.lang.String $r5, $r6, r8, r12;
        java.lang.Throwable $r7;
        java.io.FileOutputStream r9;
        java.text.SimpleDateFormat r10;
        java.util.Date r11;
        java.lang.StringBuilder r13;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        staticinvoke <android.util.Slog: int println(int,java.lang.String,java.lang.String)>(i0, "PackageManager", r8);

        staticinvoke <com.android.server.EventLogTags: void writePmCriticalInfo(java.lang.String)>(r8);

     label1:
        r0 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: java.io.File getSettingsProblemFile()>();

        r9 = new java.io.FileOutputStream;

        specialinvoke r9.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r0, 1);

        r1 = new com.android.internal.util.FastPrintWriter;

        specialinvoke r1.<com.android.internal.util.FastPrintWriter: void <init>(java.io.OutputStream)>(r9);

        r10 = new java.text.SimpleDateFormat;

        specialinvoke r10.<java.text.SimpleDateFormat: void <init>()>();

        r11 = new java.util.Date;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r11.<java.util.Date: void <init>(long)>($l2);

        r12 = virtualinvoke r10.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r11);

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r5 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.PrintWriter: void close()>();

     label2:
        $r6 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r6, 508, -1, -1);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label4;
    }

    public static void makeDirRecursive(java.io.File, int) throws android.system.ErrnoException
    {
        int i0, i1, i2;
        java.io.File r0, r4;
        java.nio.file.Path $r1, r5;
        boolean $z0;
        java.lang.String $r2, $r3;

        r4 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r5 = virtualinvoke r4.<java.io.File: java.nio.file.Path toPath()>();

        i1 = interfaceinvoke r5.<java.nio.file.Path: int getNameCount()>();

        i2 = 1;

     label1:
        if i2 > i1 goto label4;

        $r1 = interfaceinvoke r5.<java.nio.file.Path: java.nio.file.Path subpath(int,int)>(0, i2);

        r0 = interfaceinvoke $r1.<java.nio.file.Path: java.io.File toFile()>();

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void mkdir(java.lang.String,int)>($r2, i0);

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r3, i0);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private static boolean matchSignatureInSystem(com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting)
    {
        com.android.server.pm.PackageSetting r0, r14;
        com.android.server.pm.PackageSignatures $r1, $r2, $r5, $r6;
        android.content.pm.PackageParser$SigningDetails $r3, $r4, $r7, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r9;
        java.lang.String $r11, $r13;

        r0 := @parameter0: com.android.server.pm.PackageSetting;

        r14 := @parameter1: com.android.server.pm.PackageSetting;

        $r1 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r4 = $r1.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r2 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r3 = $r2.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z0 = virtualinvoke $r4.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r3, 1);

        if $z0 != 0 goto label2;

        $r5 = r14.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r8 = $r5.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r6 = r0.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r7 = $r6.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z1 = virtualinvoke $r8.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r7, 8);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated system app mismatches cert on /system: ");

        $r11 = r0.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(6, $r13);

        return 0;

     label2:
        return 1;
    }

    private static boolean matchSignaturesCompat(java.lang.String, com.android.server.pm.PackageSignatures, android.content.pm.PackageParser$SigningDetails)
    {
        java.lang.String r0, $r12;
        android.content.pm.PackageParser$SigningDetails r1, $r6;
        android.content.pm.Signature[] r4, r17, r19;
        int i0, i1, i2, i3, i4, i5;
        android.util.ArraySet $r5, $r7;
        boolean $z0, $z1;
        java.lang.StringBuilder $r8;
        android.content.pm.Signature $r13, $r14, r18;
        java.lang.Throwable $r15;
        com.android.server.pm.PackageSignatures r16;

        r0 := @parameter0: java.lang.String;

        r16 := @parameter1: com.android.server.pm.PackageSignatures;

        r1 := @parameter2: android.content.pm.PackageParser$SigningDetails;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        $r6 = r16.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        r17 = $r6.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        i2 = lengthof r17;

        i3 = 0;

     label01:
        if i3 >= i2 goto label02;

        $r14 = r17[i3];

        virtualinvoke $r5.<android.util.ArraySet: boolean add(java.lang.Object)>($r14);

        i3 = i3 + 1;

        goto label01;

     label02:
        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r4 = r1.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        i0 = lengthof r4;

        i4 = 0;

     label03:
        if i4 >= i0 goto label12;

        r18 = r4[i4];

     label04:
        r19 = virtualinvoke r18.<android.content.pm.Signature: android.content.pm.Signature[] getChainSignatures()>();

        i1 = lengthof r19;

     label05:
        i5 = 0;

     label06:
        if i5 >= i1 goto label09;

     label07:
        $r13 = r19[i5];

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>($r13);

     label08:
        i5 = i5 + 1;

        goto label06;

     label09:
        goto label11;

     label10:
        $r15 := @caughtexception;

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r18);

     label11:
        i4 = i4 + 1;

        goto label03;

     label12:
        $z0 = virtualinvoke $r7.<android.util.ArraySet: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label13;

        r16.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails> = r1;

        return 1;

     label13:
        $z1 = virtualinvoke r1.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z1 == 0 goto label14;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Existing package ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has flattened signing certificate chain. Unable to install newer version with rotated signing certificate.");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(4, $r12);

     label14:
        return 0;

        catch java.security.cert.CertificateEncodingException from label04 to label05 with label10;
        catch java.security.cert.CertificateEncodingException from label07 to label08 with label10;
    }

    private static boolean matchSignaturesRecover(java.lang.String, android.content.pm.PackageParser$SigningDetails, android.content.pm.PackageParser$SigningDetails, int)
    {
        java.lang.String r0, $r2, $r3, r8;
        int i0;
        boolean $z0;
        java.lang.Throwable $r4;
        android.content.pm.PackageParser$SigningDetails r5, r6;
        java.lang.StringBuilder r11, r12;
        java.security.cert.CertificateException r13;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: android.content.pm.PackageParser$SigningDetails;

        r6 := @parameter2: android.content.pm.PackageParser$SigningDetails;

        i0 := @parameter3: int;

     label1:
        $z0 = virtualinvoke r6.<android.content.pm.PackageParser$SigningDetails: boolean checkCapabilityRecover(android.content.pm.PackageParser$SigningDetails,int)>(r5, i0);

        if $z0 == 0 goto label3;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Recovered effectively matching certificates for ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r3 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(4, $r3);

     label2:
        return 1;

     label3:
        r8 = null;

        goto label5;

     label4:
        $r4 := @caughtexception;

        r13 = (java.security.cert.CertificateException) $r4;

        r8 = virtualinvoke r13.<java.security.cert.CertificateException: java.lang.String getMessage()>();

     label5:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to recover certificates for ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r2 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.pm.PackageManagerServiceUtils: void logCriticalInfo(int,java.lang.String)>(4, $r2);

        return 0;

        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    public static java.lang.String packagesToString(java.util.List)
    {
        java.util.List r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, i2;
        java.lang.String $r3, $r6;
        java.lang.Object $r4;
        com.android.server.pm.PackageSetting $r5;

        r0 := @parameter0: java.util.List;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $i1 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        $r5 = (com.android.server.pm.PackageSetting) $r4;

        $r6 = $r5.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String realpath(java.io.File) throws java.io.IOException
    {
        java.lang.String $r0, r4;
        java.lang.Throwable $r1;
        java.io.IOException $r2;
        java.io.File r3;
        android.system.ErrnoException r6;

        r3 := @parameter0: java.io.File;

     label1:
        $r0 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r4 = staticinvoke <android.system.Os: java.lang.String realpath(java.lang.String)>($r0);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        r6 = (android.system.ErrnoException) $r1;

        $r2 = virtualinvoke r6.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r2;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static void sortPackagesByUsageDate(java.util.List, com.android.server.pm.PackageManagerService)
    {
        java.util.List r0;
        com.android.server.pm.PackageManagerService r1;
        boolean $z0;
        com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$X1ShBJjcdw7NZGmmKd5HWXujgg8' $r2;
        java.util.Comparator r3;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: com.android.server.pm.PackageManagerService;

        $z0 = virtualinvoke r1.<com.android.server.pm.PackageManagerService: boolean isHistoricalPackageUsageAvailable()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = <com.android.server.pm._$$Lambda$PackageManagerServiceUtils$X1ShBJjcdw7NZGmmKd5HWXujgg8: com.android.server.pm.'-$$Lambda$PackageManagerServiceUtils$X1ShBJjcdw7NZGmmKd5HWXujgg8' INSTANCE>;

        r3 = (java.util.Comparator) $r2;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r0, r3);

        return;
    }

    public static boolean verifySignatures(com.android.server.pm.PackageSetting, com.android.server.pm.PackageSetting, android.content.pm.PackageParser$SigningDetails, boolean, boolean) throws com.android.server.pm.PackageManagerException
    {
        android.content.pm.PackageParser$SigningDetails r0, r2, $r4, $r8, $r9, $r12, $r25, $r46, $r49, $r61, $r63, $r71, $r73, $r76;
        java.lang.String r1, $r18, $r22, $r31, $r35, $r40, $r43, $r58, $r69;
        com.android.server.pm.PackageSignatures $r3, $r7, $r11, $r24, $r45, $r48, $r51, $r60, $r62, $r70, $r72, $r74, $r75;
        com.android.server.pm.SharedUserSetting $r5, $r6, $r10, $r17, $r23, $r32, $r44, $r47, $r50, $r52, $r54, $r59;
        boolean $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, z18, z19, z20, z21, z22, z23, z24, z25, z26, z27, z28, z29, z30, z31, z32, $z33;
        java.lang.StringBuilder $r13, $r26, $r36, $r64;
        com.android.server.pm.PackageManagerException $r21, $r30, $r42, $r68;
        android.util.ArraySet $r33, $r53, $r55;
        java.lang.Object $r34, $r56;
        int $i0;
        com.android.server.pm.PackageSetting $r57, r77, r78, r82;
        android.content.pm.Signature[] r79;
        java.util.Iterator r81;

        r77 := @parameter0: com.android.server.pm.PackageSetting;

        r78 := @parameter1: com.android.server.pm.PackageSetting;

        r0 := @parameter2: android.content.pm.PackageParser$SigningDetails;

        z17 := @parameter3: boolean;

        z18 := @parameter4: boolean;

        r1 = r77.<com.android.server.pm.PackageSetting: java.lang.String name>;

        z19 = 0;

        $r3 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r4 = $r3.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        r79 = $r4.<android.content.pm.PackageParser$SigningDetails: android.content.pm.Signature[] signatures>;

        if r79 == null goto label11;

        $r62 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r63 = $r62.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z12 = virtualinvoke r0.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r63, 1);

        if $z12 != 0 goto label02;

        $r75 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r76 = $r75.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z16 = virtualinvoke $r76.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>(r0, 8);

        if $z16 == 0 goto label01;

        goto label02;

     label01:
        z20 = 0;

        goto label03;

     label02:
        z20 = 1;

     label03:
        z19 = 0;

        z21 = z20;

        if z20 != 0 goto label04;

        z19 = 0;

        z21 = z20;

        if z17 == 0 goto label04;

        $r74 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        z21 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignaturesCompat(java.lang.String,com.android.server.pm.PackageSignatures,android.content.pm.PackageParser$SigningDetails)>(r1, $r74, r0);

        z19 = z21;

     label04:
        z22 = z21;

        if z21 != 0 goto label08;

        z22 = z21;

        if z18 == 0 goto label08;

        $r70 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r71 = $r70.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z14 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignaturesRecover(java.lang.String,android.content.pm.PackageParser$SigningDetails,android.content.pm.PackageParser$SigningDetails,int)>(r1, $r71, r0, 1);

        if $z14 != 0 goto label06;

        $r72 = r77.<com.android.server.pm.PackageSetting: com.android.server.pm.PackageSignatures signatures>;

        $r73 = $r72.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z15 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignaturesRecover(java.lang.String,android.content.pm.PackageParser$SigningDetails,android.content.pm.PackageParser$SigningDetails,int)>(r1, r0, $r73, 8);

        if $z15 == 0 goto label05;

        goto label06;

     label05:
        z23 = 0;

        goto label07;

     label06:
        z23 = 1;

     label07:
        z22 = z23;

     label08:
        z24 = z22;

        if z22 != 0 goto label09;

        z24 = z22;

        $z13 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean isApkVerificationForced(com.android.server.pm.PackageSetting)>(r78);

        if $z13 == 0 goto label09;

        z24 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignatureInSystem(com.android.server.pm.PackageSetting,com.android.server.pm.PackageSetting)>(r77, r78);

     label09:
        if z24 == 0 goto label10;

        goto label11;

     label10:
        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signatures do not match previously installed version; ignoring!");

        $r68 = new com.android.server.pm.PackageManagerException;

        $r69 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-7, $r69);

        throw $r68;

     label11:
        z25 = z19;

        $r5 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        if $r5 == null goto label27;

        z25 = z19;

        $r6 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r7 = $r6.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r9 = $r7.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $r8 = <android.content.pm.PackageParser$SigningDetails: android.content.pm.PackageParser$SigningDetails UNKNOWN>;

        if $r9 == $r8 goto label27;

        $r10 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r11 = $r10.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r12 = $r11.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z2 = virtualinvoke r0.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>($r12, 2);

        if $z2 != 0 goto label13;

        $r59 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r60 = $r59.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r61 = $r60.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z11 = virtualinvoke $r61.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>(r0, 2);

        if $z11 == 0 goto label12;

        goto label13;

     label12:
        z26 = 0;

        goto label14;

     label13:
        z26 = 1;

     label14:
        z27 = z26;

        if z26 != 0 goto label15;

        z27 = z26;

        $r52 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r53 = $r52.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $i0 = virtualinvoke $r53.<android.util.ArraySet: int size()>();

        if $i0 != 1 goto label15;

        z27 = z26;

        $r54 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r55 = $r54.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $r56 = virtualinvoke $r55.<android.util.ArraySet: java.lang.Object valueAt(int)>(0);

        $r57 = (com.android.server.pm.PackageSetting) $r56;

        $r58 = $r57.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z10 = virtualinvoke $r58.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z10 == 0 goto label15;

        z27 = 1;

     label15:
        z28 = z27;

        if z27 != 0 goto label16;

        z28 = z27;

        if z17 == 0 goto label16;

        $r50 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r51 = $r50.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        z28 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignaturesCompat(java.lang.String,com.android.server.pm.PackageSignatures,android.content.pm.PackageParser$SigningDetails)>(r1, $r51, r0);

     label16:
        z29 = z19;

        z30 = z28;

        if z28 != 0 goto label19;

        z29 = z19;

        z30 = z28;

        if z18 == 0 goto label19;

        $r44 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r45 = $r44.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r46 = $r45.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z8 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignaturesRecover(java.lang.String,android.content.pm.PackageParser$SigningDetails,android.content.pm.PackageParser$SigningDetails,int)>(r1, $r46, r0, 2);

        if $z8 != 0 goto label17;

        z31 = 0;

        $r47 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r48 = $r47.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r49 = $r48.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z9 = staticinvoke <com.android.server.pm.PackageManagerServiceUtils: boolean matchSignaturesRecover(java.lang.String,android.content.pm.PackageParser$SigningDetails,android.content.pm.PackageParser$SigningDetails,int)>(r1, r0, $r49, 2);

        if $z9 == 0 goto label18;

     label17:
        z31 = 1;

     label18:
        z32 = z19 | z31;

        z30 = z31;

        z29 = z32;

     label19:
        if z30 == 0 goto label26;

        $z3 = virtualinvoke r0.<android.content.pm.PackageParser$SigningDetails: boolean hasPastSigningCertificates()>();

        if $z3 == 0 goto label24;

        $r32 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r33 = $r32.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        r81 = virtualinvoke $r33.<android.util.ArraySet: java.util.Iterator iterator()>();

     label20:
        $z33 = interfaceinvoke r81.<java.util.Iterator: boolean hasNext()>();

        if $z33 == 0 goto label24;

        $r34 = interfaceinvoke r81.<java.util.Iterator: java.lang.Object next()>();

        r82 = (com.android.server.pm.PackageSetting) $r34;

        $r35 = r82.<com.android.server.pm.PackageSetting: java.lang.String name>;

        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z5 == 0 goto label21;

        goto label20;

     label21:
        r2 = virtualinvoke r82.<com.android.server.pm.PackageSetting: android.content.pm.PackageParser$SigningDetails getSigningDetails()>();

        $z6 = virtualinvoke r0.<android.content.pm.PackageParser$SigningDetails: boolean hasAncestor(android.content.pm.PackageParser$SigningDetails)>(r2);

        if $z6 == 0 goto label23;

        $z7 = virtualinvoke r0.<android.content.pm.PackageParser$SigningDetails: boolean checkCapability(android.content.pm.PackageParser$SigningDetails,int)>(r2, 2);

        if $z7 == 0 goto label22;

        goto label23;

     label22:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" revoked the sharedUserId capability from the signing key used to sign ");

        $r40 = r82.<com.android.server.pm.PackageSetting: java.lang.String name>;

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = new com.android.server.pm.PackageManagerException;

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r42.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-8, $r43);

        throw $r42;

     label23:
        goto label20;

     label24:
        $r23 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r24 = $r23.<com.android.server.pm.SharedUserSetting: com.android.server.pm.PackageSignatures signatures>;

        $r25 = $r24.<com.android.server.pm.PackageSignatures: android.content.pm.PackageParser$SigningDetails mSigningDetails>;

        $z4 = virtualinvoke r0.<android.content.pm.PackageParser$SigningDetails: boolean hasCommonAncestor(android.content.pm.PackageParser$SigningDetails)>($r25);

        if $z4 == 0 goto label25;

        z25 = z29;

        goto label27;

     label25:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has a signing lineage that diverges from the lineage of the sharedUserId");

        $r30 = new com.android.server.pm.PackageManagerException;

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-8, $r31);

        throw $r30;

     label26:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no signatures that match those in shared user ");

        $r17 = virtualinvoke r77.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting getSharedUser()>();

        $r18 = $r17.<com.android.server.pm.SharedUserSetting: java.lang.String name>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ignoring!");

        $r21 = new com.android.server.pm.PackageManagerException;

        $r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<com.android.server.pm.PackageManagerException: void <init>(int,java.lang.String)>(-8, $r22);

        throw $r21;

     label27:
        return z25;
    }
}
