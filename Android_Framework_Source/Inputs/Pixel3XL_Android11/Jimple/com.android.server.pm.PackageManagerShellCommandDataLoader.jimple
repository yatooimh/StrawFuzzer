public class com.android.server.pm.PackageManagerShellCommandDataLoader extends android.service.dataloader.DataLoaderService
{
    private static final char ARGS_DELIM;
    private static final java.lang.String CLASS;
    private static final int INVALID_SHELL_COMMAND_ID;
    private static final java.lang.String PACKAGE;
    private static final java.lang.String SHELL_COMMAND_ID_PREFIX;
    private static final java.lang.String STDIN_PATH;
    public static final java.lang.String TAG;
    private static final int TOO_MANY_PENDING_SHELL_COMMANDS;
    static final java.security.SecureRandom sRandom;
    static final android.util.SparseArray sShellCommands;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.security.SecureRandom $r2;
        android.util.SparseArray $r3;

        <com.android.server.pm.PackageManagerShellCommandDataLoader: int TOO_MANY_PENDING_SHELL_COMMANDS> = 10;

        <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String TAG> = "PackageManagerShellCommandDataLoader";

        <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String STDIN_PATH> = "-";

        <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String SHELL_COMMAND_ID_PREFIX> = "shellCommandId=";

        <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String PACKAGE> = "android";

        <com.android.server.pm.PackageManagerShellCommandDataLoader: int INVALID_SHELL_COMMAND_ID> = -1;

        <com.android.server.pm.PackageManagerShellCommandDataLoader: char ARGS_DELIM> = 38;

        $r0 = class "Lcom/android/server/pm/PackageManagerShellCommandDataLoader;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String CLASS> = $r1;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        <com.android.server.pm.PackageManagerShellCommandDataLoader: java.security.SecureRandom sRandom> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands> = $r3;

        return;
    }

    public void <init>()
    {
        com.android.server.pm.PackageManagerShellCommandDataLoader r0;

        r0 := @this: com.android.server.pm.PackageManagerShellCommandDataLoader;

        specialinvoke r0.<android.service.dataloader.DataLoaderService: void <init>()>();

        return;
    }

    private static int extractShellCommandId(java.lang.String)
    {
        int i0, $i1, $i2, i5, i6, i7;
        java.lang.String $r0, $r1, $r2, r4;
        java.lang.Throwable $r3;

        r4 := @parameter0: java.lang.String;

        i5 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("shellCommandId=");

        if i5 >= 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManagerShellCommandDataLoader", "Missing shell command id param.");

        return -1;

     label1:
        $r0 = "shellCommandId=";

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        i6 = i5 + $i1;

        i0 = virtualinvoke r4.<java.lang.String: int indexOf(int,int)>(38, i6);

        if i0 >= 0 goto label3;

     label2:
        $r2 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(i6);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i2;

     label3:
        $r1 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(i6, i0);

        i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

     label4:
        return i7;

     label5:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManagerShellCommandDataLoader", "Incorrect shell command id format.", $r3);

        return -1;

        catch java.lang.NumberFormatException from label2 to label3 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private static java.lang.String getDataLoaderParamsArgs(android.os.ShellCommand)
    {
        android.util.SparseArray r0, $r2, $r3, $r9, $r12, $r16, $r21, r22;
        java.lang.ref.WeakReference r1, $r14;
        int $i0, $i1, $i2, i4, $i5, i6;
        java.lang.StringBuilder $r4, r19;
        java.lang.String $r7, $r11;
        java.lang.Object $r13, $r15;
        java.lang.Throwable $r17;
        android.os.ShellCommand r18;
        java.security.SecureRandom $r20;
        boolean $z0;

        r18 := @parameter0: android.os.ShellCommand;

        staticinvoke <com.android.server.pm.PackageManagerShellCommandDataLoader: void nativeInitialize()>();

        r0 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        entermonitor r0;

     label01:
        $r2 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        i4 = $i0 - 1;

     label02:
        if i4 < 0 goto label05;

     label03:
        $r12 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        $r14 = (java.lang.ref.WeakReference) $r13;

        $r15 = virtualinvoke $r14.<java.lang.ref.WeakReference: java.lang.Object get()>();

        if $r15 != null goto label04;

        $r16 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        virtualinvoke $r16.<android.util.SparseArray: void removeAt(int)>(i4);

     label04:
        i4 = i4 + -1;

        goto label02;

     label05:
        $r3 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if $i1 <= 10 goto label06;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many pending shell commands: ");

        $r9 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        $i2 = virtualinvoke $r9.<android.util.SparseArray: int size()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManagerShellCommandDataLoader", $r11);

     label06:
        $r20 = <com.android.server.pm.PackageManagerShellCommandDataLoader: java.security.SecureRandom sRandom>;

        $i5 = virtualinvoke $r20.<java.security.SecureRandom: int nextInt(int)>(2147483646);

        i6 = $i5 + 1;

        $r21 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        $z0 = virtualinvoke $r21.<android.util.SparseArray: boolean contains(int)>(i6);

        if $z0 != 0 goto label06;

        r22 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        r1 = new java.lang.ref.WeakReference;

        specialinvoke r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r18);

        virtualinvoke r22.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r1);

        exitmonitor r0;

     label07:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("shellCommandId=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label08:
        $r17 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    static android.content.pm.DataLoaderParams getIncrementalDataLoaderParams(android.os.ShellCommand)
    {
        android.os.ShellCommand r0;
        android.content.ComponentName $r1;
        java.lang.String $r2, $r3;
        android.content.pm.DataLoaderParams $r4;

        r0 := @parameter0: android.os.ShellCommand;

        $r1 = new android.content.ComponentName;

        $r2 = <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String CLASS>;

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("android", $r2);

        $r3 = staticinvoke <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String getDataLoaderParamsArgs(android.os.ShellCommand)>(r0);

        $r4 = staticinvoke <android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParams forIncremental(android.content.ComponentName,java.lang.String)>($r1, $r3);

        return $r4;
    }

    static int getLocalFile(android.os.ShellCommand, java.lang.String)
    {
        java.lang.String r0;
        android.os.ShellCommand r1;
        android.os.ParcelFileDescriptor r2;
        int i0;

        r1 := @parameter0: android.os.ShellCommand;

        r0 := @parameter1: java.lang.String;

        r2 = staticinvoke <com.android.server.pm.PackageManagerShellCommandDataLoader: android.os.ParcelFileDescriptor getLocalFilePFD(android.os.ShellCommand,java.lang.String)>(r1, r0);

        if r2 != null goto label1;

        i0 = -1;

        goto label2;

     label1:
        i0 = virtualinvoke r2.<android.os.ParcelFileDescriptor: int detachFd()>();

     label2:
        return i0;
    }

    static android.os.ParcelFileDescriptor getLocalFilePFD(android.os.ShellCommand, java.lang.String)
    {
        android.os.ShellCommand r0;
        java.lang.String r1;
        android.os.ParcelFileDescriptor $r2;

        r0 := @parameter0: android.os.ShellCommand;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<android.os.ShellCommand: android.os.ParcelFileDescriptor openFileForSystem(java.lang.String,java.lang.String)>(r1, "r");

        return $r2;
    }

    static int getStdIn(android.os.ShellCommand)
    {
        android.os.ShellCommand r0;
        android.os.ParcelFileDescriptor r1;
        int i0;

        r0 := @parameter0: android.os.ShellCommand;

        r1 = staticinvoke <com.android.server.pm.PackageManagerShellCommandDataLoader: android.os.ParcelFileDescriptor getStdInPFD(android.os.ShellCommand)>(r0);

        if r1 != null goto label1;

        i0 = -1;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<android.os.ParcelFileDescriptor: int detachFd()>();

     label2:
        return i0;
    }

    static android.os.ParcelFileDescriptor getStdInPFD(android.os.ShellCommand)
    {
        java.io.FileDescriptor $r0;
        java.lang.Throwable $r1;
        android.os.ShellCommand r2;
        android.os.ParcelFileDescriptor r3;

        r2 := @parameter0: android.os.ShellCommand;

     label1:
        $r0 = virtualinvoke r2.<android.os.ShellCommand: java.io.FileDescriptor getInFileDescriptor()>();

        r3 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>($r0);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManagerShellCommandDataLoader", "Exception while obtaining STDIN fd", $r1);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static android.content.pm.DataLoaderParams getStreamingDataLoaderParams(android.os.ShellCommand)
    {
        android.os.ShellCommand r0;
        android.content.ComponentName $r1;
        java.lang.String $r2, $r3;
        android.content.pm.DataLoaderParams $r4;

        r0 := @parameter0: android.os.ShellCommand;

        $r1 = new android.content.ComponentName;

        $r2 = <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String CLASS>;

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>("android", $r2);

        $r3 = staticinvoke <com.android.server.pm.PackageManagerShellCommandDataLoader: java.lang.String getDataLoaderParamsArgs(android.os.ShellCommand)>(r0);

        $r4 = staticinvoke <android.content.pm.DataLoaderParams: android.content.pm.DataLoaderParams forStreaming(android.content.ComponentName,java.lang.String)>($r1, $r3);

        return $r4;
    }

    static android.os.ShellCommand lookupShellCommand(java.lang.String)
    {
        int i0;
        android.util.SparseArray r0, $r2;
        java.lang.ref.WeakReference r1;
        java.lang.Object $r3, $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;
        android.os.ShellCommand r7;

        r6 := @parameter0: java.lang.String;

        i0 = staticinvoke <com.android.server.pm.PackageManagerShellCommandDataLoader: int extractShellCommandId(java.lang.String)>(r6);

        r7 = null;

        if i0 != -1 goto label1;

        return null;

     label1:
        r0 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        entermonitor r0;

     label2:
        $r2 = <com.android.server.pm.PackageManagerShellCommandDataLoader: android.util.SparseArray sShellCommands>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>(i0, null);

        r1 = (java.lang.ref.WeakReference) $r3;

        exitmonitor r0;

     label3:
        if r1 == null goto label4;

        $r4 = virtualinvoke r1.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r7 = (android.os.ShellCommand) $r4;

     label4:
        return r7;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static native void nativeInitialize();

    public android.service.dataloader.DataLoaderService$DataLoader onCreateDataLoader(android.content.pm.DataLoaderParams)
    {
        com.android.server.pm.PackageManagerShellCommandDataLoader r0;
        android.content.pm.DataLoaderParams r1;
        int $i0;
        com.android.server.pm.PackageManagerShellCommandDataLoader$DataLoader $r2;

        r0 := @this: com.android.server.pm.PackageManagerShellCommandDataLoader;

        r1 := @parameter0: android.content.pm.DataLoaderParams;

        $i0 = virtualinvoke r1.<android.content.pm.DataLoaderParams: int getType()>();

        if $i0 != 1 goto label1;

        $r2 = new com.android.server.pm.PackageManagerShellCommandDataLoader$DataLoader;

        specialinvoke $r2.<com.android.server.pm.PackageManagerShellCommandDataLoader$DataLoader: void <init>(com.android.server.pm.PackageManagerShellCommandDataLoader$1)>(null);

        return $r2;

     label1:
        return null;
    }
}
