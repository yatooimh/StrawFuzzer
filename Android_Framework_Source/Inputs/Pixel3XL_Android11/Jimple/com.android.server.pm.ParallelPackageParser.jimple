class com.android.server.pm.ParallelPackageParser extends java.lang.Object
{
    private static final int MAX_THREADS;
    private static final int QUEUE_CAPACITY;
    private final java.util.concurrent.ExecutorService mExecutorService;
    private volatile java.lang.String mInterruptedInThread;
    private final com.android.server.pm.parsing.PackageParser2 mPackageParser;
    private final java.util.concurrent.BlockingQueue mQueue;

    void <init>(com.android.server.pm.parsing.PackageParser2, java.util.concurrent.ExecutorService)
    {
        com.android.server.pm.ParallelPackageParser r0;
        com.android.server.pm.parsing.PackageParser2 r1;
        java.util.concurrent.ExecutorService r2;
        java.util.concurrent.ArrayBlockingQueue $r3;

        r0 := @this: com.android.server.pm.ParallelPackageParser;

        r1 := @parameter0: com.android.server.pm.parsing.PackageParser2;

        r2 := @parameter1: java.util.concurrent.ExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(30);

        r0.<com.android.server.pm.ParallelPackageParser: java.util.concurrent.BlockingQueue mQueue> = $r3;

        r0.<com.android.server.pm.ParallelPackageParser: com.android.server.pm.parsing.PackageParser2 mPackageParser> = r1;

        r0.<com.android.server.pm.ParallelPackageParser: java.util.concurrent.ExecutorService mExecutorService> = r2;

        return;
    }

    static java.util.concurrent.ExecutorService makeExecutorService()
    {
        java.util.concurrent.ExecutorService $r0;

        $r0 = staticinvoke <com.android.internal.util.ConcurrentUtils: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.lang.String,int)>(4, "package-parsing-thread", -2);

        return $r0;
    }

    public void lambda$submit$0$ParallelPackageParser(java.io.File, int)
    {
        com.android.server.pm.ParallelPackageParser r0;
        int i0;
        com.android.server.pm.ParallelPackageParser$ParseResult $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, $r15;
        com.android.server.pm.parsing.pkg.ParsedPackage $r9;
        java.util.concurrent.BlockingQueue $r10;
        java.lang.Throwable $r11, $r12, $r16;
        java.lang.Thread $r13, $r14;
        java.io.File r17;

        r0 := @this: com.android.server.pm.ParallelPackageParser;

        r17 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r3 = new com.android.server.pm.ParallelPackageParser$ParseResult;

        specialinvoke $r3.<com.android.server.pm.ParallelPackageParser$ParseResult: void <init>()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parallel parsePackage [");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(262144L, $r8);

     label01:
        $r3.<com.android.server.pm.ParallelPackageParser$ParseResult: java.io.File scanFile> = r17;

        $r9 = virtualinvoke r0.<com.android.server.pm.ParallelPackageParser: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int)>(r17, i0);

        $r3.<com.android.server.pm.ParallelPackageParser$ParseResult: com.android.server.pm.parsing.pkg.ParsedPackage parsedPackage> = $r9;

     label02:
        goto label05;

     label03:
        $r16 := @caughtexception;

     label04:
        $r3.<com.android.server.pm.ParallelPackageParser$ParseResult: java.lang.Throwable throwable> = $r16;

     label05:
        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

     label06:
        $r10 = r0.<com.android.server.pm.ParallelPackageParser: java.util.concurrent.BlockingQueue mQueue>;

        interfaceinvoke $r10.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>($r3);

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r15 = virtualinvoke $r14.<java.lang.Thread: java.lang.String getName()>();

        r0.<com.android.server.pm.ParallelPackageParser: java.lang.String mInterruptedInThread> = $r15;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(262144L);

        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.InterruptedException from label06 to label07 with label08;
    }

    protected com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File, int) throws android.content.pm.PackageParser$PackageParserException
    {
        com.android.server.pm.ParallelPackageParser r0;
        java.io.File r1;
        int i0;
        com.android.server.pm.parsing.PackageParser2 $r2;
        com.android.server.pm.parsing.pkg.ParsedPackage $r3;

        r0 := @this: com.android.server.pm.ParallelPackageParser;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.ParallelPackageParser: com.android.server.pm.parsing.PackageParser2 mPackageParser>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.parsing.PackageParser2: com.android.server.pm.parsing.pkg.ParsedPackage parsePackage(java.io.File,int,boolean)>(r1, i0, 1);

        return $r3;
    }

    public void submit(java.io.File, int)
    {
        com.android.server.pm.ParallelPackageParser r0;
        java.io.File r1;
        int i0;
        com.android.server.pm._$$Lambda$ParallelPackageParser$FTtinPrp068lVeI7K6bC1tNE3iM $r2;
        java.util.concurrent.ExecutorService $r3;

        r0 := @this: com.android.server.pm.ParallelPackageParser;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        $r3 = r0.<com.android.server.pm.ParallelPackageParser: java.util.concurrent.ExecutorService mExecutorService>;

        $r2 = new com.android.server.pm._$$Lambda$ParallelPackageParser$FTtinPrp068lVeI7K6bC1tNE3iM;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$ParallelPackageParser$FTtinPrp068lVeI7K6bC1tNE3iM: void <init>(com.android.server.pm.ParallelPackageParser,java.io.File,int)>(r0, r1, i0);

        interfaceinvoke $r3.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r2);

        return;
    }

    public com.android.server.pm.ParallelPackageParser$ParseResult take()
    {
        com.android.server.pm.ParallelPackageParser r0;
        java.lang.StringBuilder r1;
        java.lang.String $r2, $r4, $r6;
        java.util.concurrent.BlockingQueue $r7;
        java.lang.Object $r8;
        com.android.server.pm.ParallelPackageParser$ParseResult $r9;
        java.lang.Throwable $r10;
        java.lang.Thread $r11;
        java.lang.IllegalStateException $r12;
        java.lang.InterruptedException r13;

        r0 := @this: com.android.server.pm.ParallelPackageParser;

     label1:
        $r2 = r0.<com.android.server.pm.ParallelPackageParser: java.lang.String mInterruptedInThread>;

        if $r2 != null goto label2;

        $r7 = r0.<com.android.server.pm.ParallelPackageParser: java.util.concurrent.BlockingQueue mQueue>;

        $r8 = interfaceinvoke $r7.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

        $r9 = (com.android.server.pm.ParallelPackageParser$ParseResult) $r8;

        return $r9;

     label2:
        r13 = new java.lang.InterruptedException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interrupted in ");

        $r4 = r0.<com.android.server.pm.ParallelPackageParser: java.lang.String mInterruptedInThread>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r13.<java.lang.InterruptedException: void <init>(java.lang.String)>($r6);

        throw r13;

     label3:
        $r10 := @caughtexception;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r11.<java.lang.Thread: void interrupt()>();

        $r12 = new java.lang.IllegalStateException;

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw $r12;

        catch java.lang.InterruptedException from label1 to label2 with label3;
        catch java.lang.InterruptedException from label2 to label3 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.ParallelPackageParser: int QUEUE_CAPACITY> = 30;

        <com.android.server.pm.ParallelPackageParser: int MAX_THREADS> = 4;

        return;
    }
}
