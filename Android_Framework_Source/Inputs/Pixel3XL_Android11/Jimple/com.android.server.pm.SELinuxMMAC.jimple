public final class com.android.server.pm.SELinuxMMAC extends java.lang.Object
{
    private static final boolean DEBUG_POLICY;
    private static final boolean DEBUG_POLICY_INSTALL;
    private static final boolean DEBUG_POLICY_ORDER;
    private static final java.lang.String DEFAULT_SEINFO;
    private static final java.lang.String PRIVILEGED_APP_STR;
    static final long SELINUX_LATEST_CHANGES;
    static final java.lang.String TAG;
    private static final java.lang.String TARGETSDKVERSION_STR;
    private static java.util.List sMacPermissions;
    private static java.util.List sPolicies;
    private static boolean sPolicyRead;

    static void <clinit>()
    {
        java.util.ArrayList $r0, $r1;
        java.io.File $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14;
        boolean $z1, $z2, $z3, $z5;
        java.util.List $r11, $r15, $r16, $r17, $r18;

        <com.android.server.pm.SELinuxMMAC: java.lang.String TARGETSDKVERSION_STR> = ":targetSdkVersion=";

        <com.android.server.pm.SELinuxMMAC: java.lang.String TAG> = "SELinuxMMAC";

        <com.android.server.pm.SELinuxMMAC: long SELINUX_LATEST_CHANGES> = 143539591L;

        <com.android.server.pm.SELinuxMMAC: java.lang.String PRIVILEGED_APP_STR> = ":privapp";

        <com.android.server.pm.SELinuxMMAC: java.lang.String DEFAULT_SEINFO> = "default";

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY_ORDER> = 0;

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY_INSTALL> = 0;

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY> = 0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions> = $r1;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "/etc/selinux/plat_mac_permissions.xml");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = new java.io.File;

        $r5 = staticinvoke <android.os.Environment: java.io.File getSystemExtDirectory()>();

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "/etc/selinux/system_ext_mac_permissions.xml");

        $z1 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        $r18 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r4);

     label1:
        $r6 = new java.io.File;

        $r7 = staticinvoke <android.os.Environment: java.io.File getProductDirectory()>();

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "/etc/selinux/product_mac_permissions.xml");

        $z2 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label2;

        $r17 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $r8 = new java.io.File;

        $r9 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "/etc/selinux/vendor_mac_permissions.xml");

        $z3 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label3;

        $r16 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label4;

     label3:
        $r11 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        $r10 = new java.io.File;

        $r12 = staticinvoke <android.os.Environment: java.io.File getVendorDirectory()>();

        specialinvoke $r10.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, "/etc/selinux/nonplat_mac_permissions.xml");

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r10);

     label4:
        $r13 = new java.io.File;

        $r14 = staticinvoke <android.os.Environment: java.io.File getOdmDirectory()>();

        specialinvoke $r13.<java.io.File: void <init>(java.io.File,java.lang.String)>($r14, "/etc/selinux/odm_mac_permissions.xml");

        $z5 = virtualinvoke $r13.<java.io.File: boolean exists()>();

        if $z5 == 0 goto label5;

        $r15 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>($r13);

     label5:
        return;
    }

    public void <init>()
    {
        com.android.server.pm.SELinuxMMAC r0;

        r0 := @this: com.android.server.pm.SELinuxMMAC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.SharedUserSetting, com.android.server.compat.PlatformCompat)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        com.android.server.pm.SharedUserSetting r1;
        com.android.server.compat.PlatformCompat r2;
        int i0;
        java.lang.String $r3;
        boolean $z0, $z1, z2;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: com.android.server.pm.SharedUserSetting;

        r2 := @parameter2: com.android.server.compat.PlatformCompat;

        i0 = staticinvoke <com.android.server.pm.SELinuxMMAC: int getTargetSdkVersionForSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,com.android.server.pm.SharedUserSetting,com.android.server.compat.PlatformCompat)>(r0, r1, r2);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.server.pm.SharedUserSetting: boolean isPrivileged()>();

        $z1 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

        z2 = $z0 | $z1;

        goto label2;

     label1:
        z2 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: boolean isPrivileged()>();

     label2:
        $r3 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage,boolean,int)>(r0, z2, i0);

        return $r3;
    }

    public static java.lang.String getSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage, boolean, int)
    {
        boolean z0, $z1, $z2;
        int i0;
        java.util.List r0, $r1;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r3, r9, r11, r12;
        java.lang.Object $r5;
        com.android.server.pm.Policy $r6;
        java.lang.Throwable $r7;
        com.android.server.pm.parsing.pkg.AndroidPackage r8;
        java.util.Iterator r10;

        r8 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r9 = null;

        r0 = <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies>;

        entermonitor r0;

     label01:
        $z1 = <com.android.server.pm.SELinuxMMAC: boolean sPolicyRead>;

        if $z1 != 0 goto label03;

     label02:
        r9 = null;

        goto label07;

     label03:
        $r1 = <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies>;

        r10 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (com.android.server.pm.Policy) $r5;

        r9 = virtualinvoke $r6.<com.android.server.pm.Policy: java.lang.String getMatchedSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage)>(r8);

     label05:
        if r9 == null goto label06;

        goto label07;

     label06:
        goto label04;

     label07:
        exitmonitor r0;

     label08:
        r11 = r9;

        if r9 != null goto label09;

        r11 = "default";

     label09:
        r12 = r11;

        if z0 == 0 goto label10;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":privapp");

        r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":targetSdkVersion=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label11:
        $r7 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private static int getTargetSdkVersionForSeInfo(com.android.server.pm.parsing.pkg.AndroidPackage, com.android.server.pm.SharedUserSetting, com.android.server.compat.PlatformCompat)
    {
        com.android.server.pm.parsing.pkg.AndroidPackage r0;
        com.android.server.pm.SharedUserSetting r1;
        com.android.server.compat.PlatformCompat r2;
        android.content.pm.ApplicationInfo $r3;
        boolean $z0;
        int $i0, $i1, $i2;
        android.util.ArraySet $r4;

        r0 := @parameter0: com.android.server.pm.parsing.pkg.AndroidPackage;

        r1 := @parameter1: com.android.server.pm.SharedUserSetting;

        r2 := @parameter2: com.android.server.compat.PlatformCompat;

        if r1 == null goto label1;

        $r4 = r1.<com.android.server.pm.SharedUserSetting: android.util.ArraySet packages>;

        $i1 = virtualinvoke $r4.<android.util.ArraySet: int size()>();

        if $i1 == 0 goto label1;

        $i2 = r1.<com.android.server.pm.SharedUserSetting: int seInfoTargetSdkVersion>;

        return $i2;

     label1:
        $r3 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: android.content.pm.ApplicationInfo toAppInfoWithoutState()>();

        $z0 = virtualinvoke r2.<com.android.server.compat.PlatformCompat: boolean isChangeEnabledInternal(long,android.content.pm.ApplicationInfo)>(143539591L, $r3);

        if $z0 == 0 goto label2;

        return 30;

     label2:
        $i0 = interfaceinvoke r0.<com.android.server.pm.parsing.pkg.AndroidPackage: int getTargetSdkVersion()>();

        return $i0;
    }

    private static void readCert(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "cert");

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        return;
    }

    public static boolean readInstallPolicy()
    {
        org.xmlpull.v1.XmlPullParser r1;
        int i0, $i4, $i5, i8, $i9;
        java.io.File r2;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r3;
        java.util.List $r4, $r6, $r7, $r8, r29, r43;
        com.android.server.pm.PolicyComparator $r5;
        java.lang.Object $r9;
        java.lang.String $r12, $r16, $r22, $r26, r36;
        com.android.server.pm.Policy $r13;
        java.lang.Throwable $r14, $r15, $r23, $r27, $r28;
        java.io.FileReader r30, r31, r32, r33, r34;
        java.lang.StringBuilder r35, r39, r41;
        byte b10;

        r29 = <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies>;

        entermonitor r29;

     label01:
        $z0 = <com.android.server.pm.SELinuxMMAC: boolean sPolicyRead>;

        if $z0 == 0 goto label03;

        exitmonitor r29;

     label02:
        return 1;

     label03:
        exitmonitor r29;

     label04:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r4 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        r30 = null;

        i8 = 0;

     label05:
        if i8 >= i0 goto label75;

        $r8 = <com.android.server.pm.SELinuxMMAC: java.util.List sMacPermissions>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i8);

        r2 = (java.io.File) $r9;

        r31 = r30;

        r32 = r30;

        r33 = r30;

     label06:
        r34 = new java.io.FileReader;

     label07:
        r31 = r30;

        r32 = r30;

        r33 = r30;

     label08:
        specialinvoke r34.<java.io.FileReader: void <init>(java.io.File)>(r2);

     label09:
        r30 = r34;

        r31 = r34;

        r32 = r34;

        r33 = r34;

     label10:
        r35 = new java.lang.StringBuilder;

     label11:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label12:
        specialinvoke r35.<java.lang.StringBuilder: void <init>()>();

     label13:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label14:
        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using policy file ");

     label15:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label16:
        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label17:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label18:
        $r12 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SELinuxMMAC", $r12);

     label19:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label20:
        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r34);

     label21:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label22:
        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

     label23:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label24:
        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "policy");

     label25:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label26:
        $i9 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i9 == 3 goto label44;

     label27:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label28:
        $i4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i4 == 2 goto label30;

     label29:
        goto label25;

     label30:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label31:
        r36 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label32:
        b10 = -1;

        r31 = r34;

        r32 = r34;

        r33 = r34;

     label33:
        $i5 = virtualinvoke r36.<java.lang.String: int hashCode()>();

        if $i5 == -902467798 goto label35;

     label34:
        goto label38;

     label35:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label36:
        $z3 = virtualinvoke r36.<java.lang.String: boolean equals(java.lang.Object)>("signer");

        if $z3 == 0 goto label34;

     label37:
        b10 = 0;

     label38:
        if b10 == 0 goto label41;

        r31 = r34;

        r32 = r34;

        r33 = r34;

     label39:
        staticinvoke <com.android.server.pm.SELinuxMMAC: void skip(org.xmlpull.v1.XmlPullParser)>(r1);

     label40:
        goto label43;

     label41:
        r31 = r34;

        r32 = r34;

        r33 = r34;

     label42:
        $r13 = staticinvoke <com.android.server.pm.SELinuxMMAC: com.android.server.pm.Policy readSignerOrThrow(org.xmlpull.v1.XmlPullParser)>(r1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r13);

     label43:
        goto label25;

     label44:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r34);

        i8 = i8 + 1;

        goto label05;

     label45:
        $r14 := @caughtexception;

        goto label74;

     label46:
        $r23 := @caughtexception;

        r31 = r32;

     label47:
        r39 = new java.lang.StringBuilder;

     label48:
        r31 = r32;

     label49:
        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

     label50:
        r31 = r32;

     label51:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception parsing ");

     label52:
        r31 = r32;

     label53:
        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label54:
        r31 = r32;

     label55:
        $r26 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", $r26, $r23);

     label56:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r32);

        return 0;

     label57:
        $r15 := @caughtexception;

        r31 = r33;

     label58:
        r41 = new java.lang.StringBuilder;

     label59:
        r31 = r33;

     label60:
        specialinvoke r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exception @");

     label61:
        r31 = r33;

     label62:
        $r16 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

     label63:
        r31 = r33;

     label64:
        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" while parsing ");

     label65:
        r31 = r33;

     label66:
        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

     label67:
        r31 = r33;

     label68:
        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label69:
        r31 = r33;

     label70:
        virtualinvoke r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

     label71:
        r31 = r33;

     label72:
        $r22 = virtualinvoke r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r22);

     label73:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r33);

        return 0;

     label74:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r31);

        throw $r14;

     label75:
        $r5 = new com.android.server.pm.PolicyComparator;

        specialinvoke $r5.<com.android.server.pm.PolicyComparator: void <init>()>();

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, $r5);

        $z1 = virtualinvoke $r5.<com.android.server.pm.PolicyComparator: boolean foundDuplicate()>();

        if $z1 == 0 goto label76;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", "ERROR! Duplicate entries found parsing mac_permissions.xml files");

        return 0;

     label76:
        r43 = <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies>;

        entermonitor r43;

     label77:
        $r6 = <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies>;

        interfaceinvoke $r6.<java.util.List: void clear()>();

        $r7 = <com.android.server.pm.SELinuxMMAC: java.util.List sPolicies>;

        interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        <com.android.server.pm.SELinuxMMAC: boolean sPolicyRead> = 1;

        exitmonitor r43;

     label78:
        return 1;

     label79:
        $r28 := @caughtexception;

     label80:
        exitmonitor r43;

     label81:
        throw $r28;

     label82:
        $r27 := @caughtexception;

     label83:
        exitmonitor r29;

     label84:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label82;
        catch java.lang.Throwable from label03 to label04 with label82;
        catch java.lang.IllegalStateException from label06 to label07 with label57;
        catch java.lang.IllegalArgumentException from label06 to label07 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label07 with label57;
        catch java.io.IOException from label06 to label07 with label46;
        catch java.lang.Throwable from label06 to label07 with label45;
        catch java.lang.IllegalStateException from label08 to label09 with label57;
        catch java.lang.IllegalArgumentException from label08 to label09 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label57;
        catch java.io.IOException from label08 to label09 with label46;
        catch java.lang.Throwable from label08 to label09 with label45;
        catch java.lang.IllegalStateException from label10 to label11 with label57;
        catch java.lang.IllegalArgumentException from label10 to label11 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label57;
        catch java.io.IOException from label10 to label11 with label46;
        catch java.lang.Throwable from label10 to label11 with label45;
        catch java.lang.IllegalStateException from label12 to label13 with label57;
        catch java.lang.IllegalArgumentException from label12 to label13 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label57;
        catch java.io.IOException from label12 to label13 with label46;
        catch java.lang.Throwable from label12 to label13 with label45;
        catch java.lang.IllegalStateException from label14 to label15 with label57;
        catch java.lang.IllegalArgumentException from label14 to label15 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label57;
        catch java.io.IOException from label14 to label15 with label46;
        catch java.lang.Throwable from label14 to label15 with label45;
        catch java.lang.IllegalStateException from label16 to label17 with label57;
        catch java.lang.IllegalArgumentException from label16 to label17 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label57;
        catch java.io.IOException from label16 to label17 with label46;
        catch java.lang.Throwable from label16 to label17 with label45;
        catch java.lang.IllegalStateException from label18 to label19 with label57;
        catch java.lang.IllegalArgumentException from label18 to label19 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label18 to label19 with label57;
        catch java.io.IOException from label18 to label19 with label46;
        catch java.lang.Throwable from label18 to label19 with label45;
        catch java.lang.IllegalStateException from label20 to label21 with label57;
        catch java.lang.IllegalArgumentException from label20 to label21 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label20 to label21 with label57;
        catch java.io.IOException from label20 to label21 with label46;
        catch java.lang.Throwable from label20 to label21 with label45;
        catch java.lang.IllegalStateException from label22 to label23 with label57;
        catch java.lang.IllegalArgumentException from label22 to label23 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label57;
        catch java.io.IOException from label22 to label23 with label46;
        catch java.lang.Throwable from label22 to label23 with label45;
        catch java.lang.IllegalStateException from label24 to label25 with label57;
        catch java.lang.IllegalArgumentException from label24 to label25 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label24 to label25 with label57;
        catch java.io.IOException from label24 to label25 with label46;
        catch java.lang.Throwable from label24 to label25 with label45;
        catch java.lang.IllegalStateException from label26 to label27 with label57;
        catch java.lang.IllegalArgumentException from label26 to label27 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label26 to label27 with label57;
        catch java.io.IOException from label26 to label27 with label46;
        catch java.lang.Throwable from label26 to label27 with label45;
        catch java.lang.IllegalStateException from label28 to label29 with label57;
        catch java.lang.IllegalArgumentException from label28 to label29 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label28 to label29 with label57;
        catch java.io.IOException from label28 to label29 with label46;
        catch java.lang.Throwable from label28 to label29 with label45;
        catch java.lang.IllegalStateException from label31 to label32 with label57;
        catch java.lang.IllegalArgumentException from label31 to label32 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label31 to label32 with label57;
        catch java.io.IOException from label31 to label32 with label46;
        catch java.lang.Throwable from label31 to label32 with label45;
        catch java.lang.IllegalStateException from label33 to label34 with label57;
        catch java.lang.IllegalArgumentException from label33 to label34 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label33 to label34 with label57;
        catch java.io.IOException from label33 to label34 with label46;
        catch java.lang.Throwable from label33 to label34 with label45;
        catch java.lang.IllegalStateException from label36 to label37 with label57;
        catch java.lang.IllegalArgumentException from label36 to label37 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label36 to label37 with label57;
        catch java.io.IOException from label36 to label37 with label46;
        catch java.lang.Throwable from label36 to label37 with label45;
        catch java.lang.IllegalStateException from label39 to label40 with label57;
        catch java.lang.IllegalArgumentException from label39 to label40 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label39 to label40 with label57;
        catch java.io.IOException from label39 to label40 with label46;
        catch java.lang.Throwable from label39 to label40 with label45;
        catch java.lang.IllegalStateException from label42 to label43 with label57;
        catch java.lang.IllegalArgumentException from label42 to label43 with label57;
        catch org.xmlpull.v1.XmlPullParserException from label42 to label43 with label57;
        catch java.io.IOException from label42 to label43 with label46;
        catch java.lang.Throwable from label42 to label43 with label45;
        catch java.lang.Throwable from label47 to label48 with label45;
        catch java.lang.Throwable from label49 to label50 with label45;
        catch java.lang.Throwable from label51 to label52 with label45;
        catch java.lang.Throwable from label53 to label54 with label45;
        catch java.lang.Throwable from label55 to label56 with label45;
        catch java.lang.Throwable from label58 to label59 with label45;
        catch java.lang.Throwable from label60 to label61 with label45;
        catch java.lang.Throwable from label62 to label63 with label45;
        catch java.lang.Throwable from label64 to label65 with label45;
        catch java.lang.Throwable from label66 to label67 with label45;
        catch java.lang.Throwable from label68 to label69 with label45;
        catch java.lang.Throwable from label70 to label71 with label45;
        catch java.lang.Throwable from label72 to label73 with label45;
        catch java.lang.Throwable from label77 to label78 with label79;
        catch java.lang.Throwable from label80 to label81 with label79;
        catch java.lang.Throwable from label83 to label84 with label82;
    }

    private static void readPackageOrThrow(org.xmlpull.v1.XmlPullParser, com.android.server.pm.Policy$PolicyBuilder) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        com.android.server.pm.Policy$PolicyBuilder r1;
        java.lang.String r2, $r3, $r4, $r5;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 := @parameter1: com.android.server.pm.Policy$PolicyBuilder;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "package");

        r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label1:
        $i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i1 == 3 goto label5;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i0 == 2 goto label2;

        goto label1;

     label2:
        $r3 = "seinfo";

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        virtualinvoke r1.<com.android.server.pm.Policy$PolicyBuilder: com.android.server.pm.Policy$PolicyBuilder addInnerPackageMapOrThrow(java.lang.String,java.lang.String)>(r2, $r5);

        staticinvoke <com.android.server.pm.SELinuxMMAC: void readSeinfo(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label4;

     label3:
        staticinvoke <com.android.server.pm.SELinuxMMAC: void skip(org.xmlpull.v1.XmlPullParser)>(r0);

     label4:
        goto label1;

     label5:
        return;
    }

    private static void readSeinfo(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "seinfo");

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        return;
    }

    private static com.android.server.pm.Policy readSignerOrThrow(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        com.android.server.pm.Policy$PolicyBuilder $r2;
        com.android.server.pm.Policy $r3;
        int $i0, $i1;
        java.lang.String $r4, $r5, $r6, $r7, $r9, r12, r13;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(2, null, "signer");

        $r2 = new com.android.server.pm.Policy$PolicyBuilder;

        specialinvoke $r2.<com.android.server.pm.Policy$PolicyBuilder: void <init>()>();

        r12 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "signature");

        if r12 == null goto label1;

        virtualinvoke $r2.<com.android.server.pm.Policy$PolicyBuilder: com.android.server.pm.Policy$PolicyBuilder addSignature(java.lang.String)>(r12);

     label1:
        $i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i1 == 3 goto label7;

        $i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i0 == 2 goto label2;

        goto label1;

     label2:
        r13 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r4 = "seinfo";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        virtualinvoke $r2.<com.android.server.pm.Policy$PolicyBuilder: com.android.server.pm.Policy$PolicyBuilder setGlobalSeinfoOrThrow(java.lang.String)>($r9);

        staticinvoke <com.android.server.pm.SELinuxMMAC: void readSeinfo(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label6;

     label3:
        $r5 = "package";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 == 0 goto label4;

        staticinvoke <com.android.server.pm.SELinuxMMAC: void readPackageOrThrow(org.xmlpull.v1.XmlPullParser,com.android.server.pm.Policy$PolicyBuilder)>(r0, $r2);

        goto label6;

     label4:
        $r6 = "cert";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z2 == 0 goto label5;

        $r7 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "signature");

        virtualinvoke $r2.<com.android.server.pm.Policy$PolicyBuilder: com.android.server.pm.Policy$PolicyBuilder addSignature(java.lang.String)>($r7);

        staticinvoke <com.android.server.pm.SELinuxMMAC: void readCert(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label6;

     label5:
        staticinvoke <com.android.server.pm.SELinuxMMAC: void skip(org.xmlpull.v1.XmlPullParser)>(r0);

     label6:
        goto label1;

     label7:
        $r3 = virtualinvoke $r2.<com.android.server.pm.Policy$PolicyBuilder: com.android.server.pm.Policy build()>();

        return $r3;
    }

    private static void skip(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        int i0, $i1, i2;
        java.lang.IllegalStateException $r1;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i1 != 2 goto label6;

        i2 = 1;

     label1:
        if i2 == 0 goto label5;

        i0 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        goto label4;

     label2:
        i2 = i2 + -1;

        goto label4;

     label3:
        i2 = i2 + 1;

     label4:
        goto label1;

     label5:
        return;

     label6:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;
    }
}
