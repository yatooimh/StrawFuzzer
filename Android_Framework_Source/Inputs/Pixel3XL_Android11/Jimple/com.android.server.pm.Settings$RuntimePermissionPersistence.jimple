final class com.android.server.pm.Settings$RuntimePermissionPersistence extends java.lang.Object
{
    private static final int INITIAL_VERSION;
    private static final long MAX_WRITE_PERMISSIONS_DELAY_MILLIS;
    private static final int UPGRADE_VERSION;
    private static final long WRITE_PERMISSIONS_DELAY_MILLIS;
    private java.lang.String mExtendedFingerprint;
    private final android.util.SparseArray mFingerprints;
    private final android.os.Handler mHandler;
    private final android.util.SparseLongArray mLastNotWrittenMutationTimesMillis;
    private final android.util.SparseBooleanArray mPermissionUpgradeNeeded;
    private final com.android.permission.persistence.RuntimePermissionsPersistence mPersistence;
    private final java.lang.Object mPersistenceLock;
    private final android.util.SparseIntArray mVersions;
    private final android.util.SparseBooleanArray mWriteScheduled;
    final com.android.server.pm.Settings this$0;

    public void <init>(com.android.server.pm.Settings, java.lang.Object)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        com.android.server.pm.Settings r1;
        java.lang.Object r2;
        com.android.permission.persistence.RuntimePermissionsPersistence $r3;
        com.android.server.pm.Settings$RuntimePermissionPersistence$MyHandler $r4;
        android.util.SparseBooleanArray $r5, $r9;
        android.util.SparseLongArray $r6;
        android.util.SparseIntArray $r7;
        android.util.SparseArray $r8;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        r1 := @parameter0: com.android.server.pm.Settings;

        r2 := @parameter1: java.lang.Object;

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <com.android.permission.persistence.RuntimePermissionsPersistence: com.android.permission.persistence.RuntimePermissionsPersistence createInstance()>();

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.permission.persistence.RuntimePermissionsPersistence mPersistence> = $r3;

        $r4 = new com.android.server.pm.Settings$RuntimePermissionPersistence$MyHandler;

        specialinvoke $r4.<com.android.server.pm.Settings$RuntimePermissionPersistence$MyHandler: void <init>(com.android.server.pm.Settings$RuntimePermissionPersistence)>(r0);

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler> = $r4;

        $r5 = new android.util.SparseBooleanArray;

        specialinvoke $r5.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mWriteScheduled> = $r5;

        $r6 = new android.util.SparseLongArray;

        specialinvoke $r6.<android.util.SparseLongArray: void <init>()>();

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseLongArray mLastNotWrittenMutationTimesMillis> = $r6;

        $r7 = new android.util.SparseIntArray;

        specialinvoke $r7.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions> = $r7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints> = $r8;

        $r9 = new android.util.SparseBooleanArray;

        specialinvoke $r9.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mPermissionUpgradeNeeded> = $r9;

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.lang.Object mPersistenceLock> = r2;

        return;
    }

    static void access$100(com.android.server.pm.Settings$RuntimePermissionPersistence, int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;

        r0 := @parameter0: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void onUserRemovedLPw(int)>(i0);

        return;
    }

    static void access$300(com.android.server.pm.Settings$RuntimePermissionPersistence, int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;

        r0 := @parameter0: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void writePermissionsSync(int)>(i0);

        return;
    }

    private java.lang.String getExtendedFingerprint(long)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        long l0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r7;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        l0 := @parameter0: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = <android.os.Build: java.lang.String FINGERPRINT>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?pc_version=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private java.util.List getPermissionsFromPermissionsState(com.android.server.pm.permission.PermissionsState, int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        java.util.List r1;
        int i0, $i1, i2, i3;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        com.android.permission.persistence.RuntimePermissionsState$PermissionState $r5;
        java.lang.String $r6;
        boolean $z0;
        com.android.server.pm.permission.PermissionsState r7;
        com.android.server.pm.permission.PermissionsState$PermissionState r8;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        r7 := @parameter0: com.android.server.pm.permission.PermissionsState;

        i2 := @parameter1: int;

        r1 = virtualinvoke r7.<com.android.server.pm.permission.PermissionsState: java.util.List getRuntimePermissionStates(int)>(i2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r8 = (com.android.server.pm.permission.PermissionsState$PermissionState) $r4;

        $r5 = new com.android.permission.persistence.RuntimePermissionsState$PermissionState;

        $r6 = virtualinvoke r8.<com.android.server.pm.permission.PermissionsState$PermissionState: java.lang.String getName()>();

        $z0 = virtualinvoke r8.<com.android.server.pm.permission.PermissionsState$PermissionState: boolean isGranted()>();

        $i1 = virtualinvoke r8.<com.android.server.pm.permission.PermissionsState$PermissionState: int getFlags()>();

        specialinvoke $r5.<com.android.permission.persistence.RuntimePermissionsState$PermissionState: void <init>(java.lang.String,boolean,int)>($r6, $z0, $i1);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r5);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r3;
    }

    private void onUserRemovedLPw(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        android.os.Handler $r1;
        com.android.server.pm.Settings $r2, $r5;
        android.util.ArrayMap $r3, $r6;
        java.util.Collection $r4, $r7;
        boolean $z0, $z1;
        android.util.SparseBooleanArray $r8;
        android.util.SparseIntArray $r9;
        android.util.SparseArray $r10;
        java.lang.Object $r11, $r13;
        com.android.server.pm.SettingBase $r12, $r14;
        java.util.Iterator r15, r16;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(i0);

        $r2 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r3 = $r2.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.util.Collection values()>();

        r15 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (com.android.server.pm.SettingBase) $r13;

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void revokeRuntimePermissionsAndClearFlags(com.android.server.pm.SettingBase,int)>($r14, i0);

        goto label1;

     label2:
        $r5 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r6 = $r5.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Collection values()>();

        r16 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (com.android.server.pm.SettingBase) $r11;

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void revokeRuntimePermissionsAndClearFlags(com.android.server.pm.SettingBase,int)>($r12, i0);

        goto label3;

     label4:
        $r8 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mPermissionUpgradeNeeded>;

        virtualinvoke $r8.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r9 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions>;

        virtualinvoke $r9.<android.util.SparseIntArray: void delete(int)>(i0);

        $r10 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        virtualinvoke $r10.<android.util.SparseArray: void remove(int)>(i0);

        return;
    }

    private void parsePermissionsLPr(org.xmlpull.v1.XmlPullParser, com.android.server.pm.permission.PermissionsState, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        org.xmlpull.v1.XmlPullParser r1;
        com.android.server.pm.permission.PermissionsState r2;
        int i0, i1, i2, $i5, i6, i8;
        boolean $z1, $z4, z5;
        com.android.server.pm.Settings $r3;
        com.android.server.pm.permission.PermissionSettings $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r9, r10, r13, r14;
        byte b7;
        com.android.server.pm.permission.BasePermission r11;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: com.android.server.pm.permission.PermissionsState;

        i0 := @parameter2: int;

        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label01:
        i6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i6 == 1 goto label15;

        if i6 != 3 goto label02;

        $i5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i5 <= i1 goto label15;

     label02:
        if i6 == 3 goto label01;

        if i6 != 4 goto label03;

        goto label01;

     label03:
        r9 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        b7 = -1;

        i2 = virtualinvoke r9.<java.lang.String: int hashCode()>();

        i8 = 0;

        if i2 == 3242771 goto label05;

     label04:
        goto label06;

     label05:
        $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("item");

        if $z1 == 0 goto label04;

        b7 = 0;

     label06:
        if b7 == 0 goto label07;

        goto label14;

     label07:
        r10 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        $r3 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r4 = $r3.<com.android.server.pm.Settings: com.android.server.pm.permission.PermissionSettings mPermissions>;

        r11 = virtualinvoke $r4.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>(r10);

        if r11 != null goto label08;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r8);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label01;

     label08:
        r13 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "granted");

        if r13 == null goto label10;

        $z4 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r13);

        if $z4 == 0 goto label09;

        goto label10;

     label09:
        z5 = 0;

        goto label11;

     label10:
        z5 = 1;

     label11:
        r14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "flags");

        if r14 == null goto label12;

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r14, 16);

        goto label12;

     label12:
        if z5 == 0 goto label13;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r11, i0);

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r11, i0, 261119, i8);

        goto label14;

     label13:
        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r11, i0, 261119, i8);

     label14:
        goto label01;

     label15:
        return;
    }

    private void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser, int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, $i4, i5, i6, i8;
        boolean $z0, $z1, $z2;
        android.util.SparseIntArray $r2;
        android.util.SparseArray $r3;
        com.android.server.pm.Settings $r4, $r12;
        android.util.ArrayMap $r5, $r13;
        java.lang.Object $r6, $r14;
        com.android.server.pm.permission.PermissionsState $r7, $r15;
        java.lang.StringBuilder $r8, $r16;
        java.lang.String $r11, $r19, r20, r21, r24, r27;
        byte b7;
        com.android.server.pm.SharedUserSetting r22;
        com.android.server.pm.PackageSetting r25;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 := @parameter1: int;

        i1 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label01:
        i5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i5 == 1 goto label16;

        if i5 != 3 goto label02;

        $i4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i4 <= i1 goto label16;

     label02:
        if i5 == 3 goto label01;

        if i5 != 4 goto label03;

        goto label01;

     label03:
        r20 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        i6 = virtualinvoke r20.<java.lang.String: int hashCode()>();

        if i6 == 111052 goto label07;

        if i6 == 160289295 goto label06;

        if i6 == 485578803 goto label05;

     label04:
        goto label08;

     label05:
        $z2 = virtualinvoke r20.<java.lang.String: boolean equals(java.lang.Object)>("shared-user");

        if $z2 == 0 goto label04;

        b7 = 2;

        goto label09;

     label06:
        $z1 = virtualinvoke r20.<java.lang.String: boolean equals(java.lang.Object)>("runtime-permissions");

        if $z1 == 0 goto label04;

        b7 = 0;

        goto label09;

     label07:
        $z0 = virtualinvoke r20.<java.lang.String: boolean equals(java.lang.Object)>("pkg");

        if $z0 == 0 goto label04;

        b7 = 1;

        goto label09;

     label08:
        b7 = -1;

     label09:
        if b7 == 0 goto label14;

        if b7 == 1 goto label12;

        if b7 == 2 goto label10;

        goto label15;

     label10:
        r21 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        $r12 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r13 = $r12.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        $r14 = virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r21);

        r22 = (com.android.server.pm.SharedUserSetting) $r14;

        if r22 != null goto label11;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown shared user:");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r19);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label01;

     label11:
        $r15 = virtualinvoke r22.<com.android.server.pm.SharedUserSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void parsePermissionsLPr(org.xmlpull.v1.XmlPullParser,com.android.server.pm.permission.PermissionsState,int)>(r1, $r15, i0);

        goto label15;

     label12:
        r24 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        $r4 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r5 = $r4.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r24);

        r25 = (com.android.server.pm.PackageSetting) $r6;

        if r25 != null goto label13;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r11);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r1);

        goto label01;

     label13:
        $r7 = virtualinvoke r25.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void parsePermissionsLPr(org.xmlpull.v1.XmlPullParser,com.android.server.pm.permission.PermissionsState,int)>(r1, $r7, i0);

        goto label15;

     label14:
        i8 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "version", -1);

        $r2 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, i8);

        r27 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "fingerprint");

        $r3 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r27);

     label15:
        goto label01;

     label16:
        return;
    }

    private void readLegacyStateForUserSyncLPr(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        java.lang.IllegalStateException r1;
        java.lang.StringBuilder r2;
        com.android.server.pm.Settings $r3;
        boolean $z0;
        java.lang.Throwable $r4, $r8, $r9;
        java.lang.String $r7;
        java.io.File r10;
        android.util.AtomicFile r11;
        java.io.FileInputStream r12;
        org.xmlpull.v1.XmlPullParser r13;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        r10 = staticinvoke <com.android.server.pm.Settings: java.io.File access$200(com.android.server.pm.Settings,int)>($r3, i0);

        $z0 = virtualinvoke r10.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r11 = new android.util.AtomicFile;

        specialinvoke r11.<android.util.AtomicFile: void <init>(java.io.File)>(r10);

        r12 = virtualinvoke r11.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label2:
        r13 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r12, null);

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void parseRuntimePermissionsLPr(org.xmlpull.v1.XmlPullParser,int)>(r13, i0);

     label3:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r12);

        return;

     label4:
        $r8 := @caughtexception;

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        r1 = new java.lang.IllegalStateException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing permissions file: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r4);

        throw r1;

     label7:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r12);

        throw $r8;

     label8:
        $r9 := @caughtexception;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", "No permissions state");

        return;

        catch java.io.FileNotFoundException from label1 to label2 with label8;
        catch org.xmlpull.v1.XmlPullParserException from label2 to label3 with label5;
        catch java.io.IOException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    private void readPermissionsStateLpr(java.util.List, com.android.server.pm.permission.PermissionsState, int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        java.util.List r1;
        com.android.server.pm.permission.PermissionsState r2;
        int i0, i1, i2, i5;
        java.lang.String r3, $r11;
        com.android.server.pm.permission.BasePermission r4;
        boolean z0;
        java.lang.Object $r5;
        com.android.server.pm.Settings $r6;
        com.android.server.pm.permission.PermissionSettings $r7;
        java.lang.StringBuilder $r8;
        com.android.permission.persistence.RuntimePermissionsState$PermissionState r12;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: com.android.server.pm.permission.PermissionsState;

        i0 := @parameter2: int;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = 0;

     label1:
        if i5 >= i1 goto label5;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r12 = (com.android.permission.persistence.RuntimePermissionsState$PermissionState) $r5;

        r3 = virtualinvoke r12.<com.android.permission.persistence.RuntimePermissionsState$PermissionState: java.lang.String getName()>();

        $r6 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r7 = $r6.<com.android.server.pm.Settings: com.android.server.pm.permission.PermissionSettings mPermissions>;

        r4 = virtualinvoke $r7.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>(r3);

        if r4 != null goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission:");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r11);

        goto label4;

     label2:
        z0 = virtualinvoke r12.<com.android.permission.persistence.RuntimePermissionsState$PermissionState: boolean isGranted()>();

        i2 = virtualinvoke r12.<com.android.permission.persistence.RuntimePermissionsState$PermissionState: int getFlags()>();

        if z0 == 0 goto label3;

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: int grantRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r4, i0);

        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r4, i0, 261119, i2);

        goto label4;

     label3:
        virtualinvoke r2.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r4, i0, 261119, i2);

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        return;
    }

    private void revokeRuntimePermissionsAndClearFlags(com.android.server.pm.SettingBase, int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        java.util.Iterator r1;
        java.util.List $r2;
        boolean $z0;
        java.lang.Object $r3;
        com.android.server.pm.Settings $r4;
        com.android.server.pm.permission.PermissionSettings $r5;
        java.lang.String $r6;
        com.android.server.pm.SettingBase r7;
        com.android.server.pm.permission.PermissionsState r8;
        com.android.server.pm.permission.PermissionsState$PermissionState r9;
        com.android.server.pm.permission.BasePermission r10;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        r7 := @parameter0: com.android.server.pm.SettingBase;

        i0 := @parameter1: int;

        r8 = virtualinvoke r7.<com.android.server.pm.SettingBase: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $r2 = virtualinvoke r8.<com.android.server.pm.permission.PermissionsState: java.util.List getRuntimePermissionStates(int)>(i0);

        r1 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.android.server.pm.permission.PermissionsState$PermissionState) $r3;

        $r4 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r5 = $r4.<com.android.server.pm.Settings: com.android.server.pm.permission.PermissionSettings mPermissions>;

        $r6 = virtualinvoke r9.<com.android.server.pm.permission.PermissionsState$PermissionState: java.lang.String getName()>();

        r10 = virtualinvoke $r5.<com.android.server.pm.permission.PermissionSettings: com.android.server.pm.permission.BasePermission getPermission(java.lang.String)>($r6);

        if r10 == null goto label2;

        virtualinvoke r8.<com.android.server.pm.permission.PermissionsState: int revokeRuntimePermission(com.android.server.pm.permission.BasePermission,int)>(r10, i0);

        virtualinvoke r8.<com.android.server.pm.permission.PermissionsState: boolean updatePermissionFlags(com.android.server.pm.permission.BasePermission,int,int,int)>(r10, i0, 261119, 0);

     label2:
        goto label1;

     label3:
        return;
    }

    private void writePermissionsSync(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0, i1, i2, i3, i4, i5;
        java.lang.Object r1, $r7, $r16, $r19, $r25, $r28;
        android.util.ArrayMap r2, $r9, $r11, $r15, $r18, $r24, $r27, r37;
        java.lang.String r3, r34, r35;
        android.util.SparseBooleanArray $r4;
        android.util.SparseIntArray $r5;
        android.util.SparseArray $r6;
        com.android.server.pm.Settings $r8, $r10, $r14, $r17, $r23, $r26;
        com.android.permission.persistence.RuntimePermissionsPersistence $r12;
        android.os.UserHandle $r13;
        com.android.server.pm.permission.PermissionsState $r20, $r30;
        java.util.List $r21, $r31;
        com.android.server.pm.SharedUserSetting $r29, r38;
        java.lang.Throwable $r33;
        com.android.server.pm.PackageSetting r36;
        com.android.permission.persistence.RuntimePermissionsState r39;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.lang.Object mPersistenceLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mWriteScheduled>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void delete(int)>(i0);

        $r5 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions>;

        i1 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        $r6 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r34 = (java.lang.String) $r7;

        r2 = new android.util.ArrayMap;

        specialinvoke r2.<android.util.ArrayMap: void <init>()>();

        $r8 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r9 = $r8.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i2 = virtualinvoke $r9.<android.util.ArrayMap: int size()>();

     label02:
        i3 = 0;

     label03:
        if i3 >= i2 goto label07;

     label04:
        $r23 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r24 = $r23.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r25 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        r35 = (java.lang.String) $r25;

        $r26 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r27 = $r26.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r28 = virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i3);

        r36 = (com.android.server.pm.PackageSetting) $r28;

        $r29 = r36.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r29 != null goto label06;

     label05:
        $r30 = virtualinvoke r36.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $r31 = specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.util.List getPermissionsFromPermissionsState(com.android.server.pm.permission.PermissionsState,int)>($r30, i0);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r35, $r31);

     label06:
        i3 = i3 + 1;

        goto label03;

     label07:
        r37 = new android.util.ArrayMap;

        specialinvoke r37.<android.util.ArrayMap: void <init>()>();

        $r10 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r11 = $r10.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        i4 = virtualinvoke $r11.<android.util.ArrayMap: int size()>();

     label08:
        i5 = 0;

     label09:
        if i5 >= i4 goto label13;

     label10:
        $r14 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r15 = $r14.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        $r16 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        r3 = (java.lang.String) $r16;

        $r17 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r18 = $r17.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        $r19 = virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        r38 = (com.android.server.pm.SharedUserSetting) $r19;

     label11:
        $r20 = virtualinvoke r38.<com.android.server.pm.SharedUserSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        $r21 = specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.util.List getPermissionsFromPermissionsState(com.android.server.pm.permission.PermissionsState,int)>($r20, i0);

        interfaceinvoke r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r21);

     label12:
        i5 = i5 + 1;

        goto label09;

     label13:
        r39 = new com.android.permission.persistence.RuntimePermissionsState;

        specialinvoke r39.<com.android.permission.persistence.RuntimePermissionsState: void <init>(int,java.lang.String,java.util.Map,java.util.Map)>(i1, r34, r2, r37);

        exitmonitor r1;

     label14:
        $r12 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.permission.persistence.RuntimePermissionsPersistence mPersistence>;

        $r13 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        interfaceinvoke $r12.<com.android.permission.persistence.RuntimePermissionsPersistence: void writeForUser(com.android.permission.persistence.RuntimePermissionsState,android.os.UserHandle)>(r39, $r13);

        return;

     label15:
        $r33 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r33;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void deleteUserRuntimePermissionsFile(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        com.android.permission.persistence.RuntimePermissionsPersistence $r1;
        android.os.UserHandle $r2;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.permission.persistence.RuntimePermissionsPersistence mPersistence>;

        $r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        interfaceinvoke $r1.<com.android.permission.persistence.RuntimePermissionsPersistence: void deleteForUser(android.os.UserHandle)>($r2);

        return;
    }

    int getVersionLPr(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0, $i1;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        return $i1;
    }

    public boolean isPermissionUpgradeNeeded(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        android.util.SparseBooleanArray $r1;
        boolean $z0;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mPermissionUpgradeNeeded>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 1);

        return $z0;
    }

    public void readStateForUserSyncLPr(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0, $i1, i4, i5, i6, i7, i8, i9;
        com.android.permission.persistence.RuntimePermissionsPersistence $r1;
        android.os.UserHandle $r2;
        android.util.SparseIntArray $r3;
        android.util.SparseArray $r4;
        com.android.server.pm.Settings $r5, $r7, $r9, $r11, $r14, $r24, $r27;
        com.android.server.pm.Settings$VersionInfo $r6;
        android.util.ArrayMap $r8, $r10, $r12, $r15, $r25, $r28;
        java.lang.Object $r13, $r16, $r17, $r26, $r29, $r30;
        java.lang.StringBuilder $r18, $r32;
        java.lang.String $r21, $r35, r40, r42, r48;
        com.android.server.pm.permission.PermissionsState $r22, $r23, $r36, $r37;
        com.android.server.pm.SharedUserSetting $r31, r49;
        com.android.permission.persistence.RuntimePermissionsState r39;
        boolean z0;
        java.util.Map r41, r46;
        com.android.server.pm.PackageSetting r43;
        java.util.List r44, r50;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.permission.persistence.RuntimePermissionsPersistence mPersistence>;

        $r2 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        r39 = interfaceinvoke $r1.<com.android.permission.persistence.RuntimePermissionsPersistence: com.android.permission.persistence.RuntimePermissionsState readForUser(android.os.UserHandle)>($r2);

        if r39 != null goto label01;

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void readLegacyStateForUserSyncLPr(int)>(i0);

        virtualinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void writePermissionsForUserAsyncLPr(int)>(i0);

        return;

     label01:
        i4 = virtualinvoke r39.<com.android.permission.persistence.RuntimePermissionsState: int getVersion()>();

        i5 = i4;

        if i4 != -1 goto label02;

        i5 = -1;

     label02:
        $r3 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions>;

        virtualinvoke $r3.<android.util.SparseIntArray: void put(int,int)>(i0, i5);

        r40 = virtualinvoke r39.<com.android.permission.persistence.RuntimePermissionsState: java.lang.String getFingerprint()>();

        $r4 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r40);

        $r5 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r6 = virtualinvoke $r5.<com.android.server.pm.Settings: com.android.server.pm.Settings$VersionInfo getInternalVersion()>();

        $i1 = $r6.<com.android.server.pm.Settings$VersionInfo: int sdkVersion>;

        if $i1 >= 30 goto label03;

        z0 = 1;

        goto label04;

     label03:
        z0 = 0;

     label04:
        r41 = virtualinvoke r39.<com.android.permission.persistence.RuntimePermissionsState: java.util.Map getPackagePermissions()>();

        $r7 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r8 = $r7.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        i6 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

        i7 = 0;

     label05:
        if i7 >= i6 goto label08;

        $r24 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r25 = $r24.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r26 = virtualinvoke $r25.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        r42 = (java.lang.String) $r26;

        $r27 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r28 = $r27.<com.android.server.pm.Settings: android.util.ArrayMap mPackages>;

        $r29 = virtualinvoke $r28.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i7);

        r43 = (com.android.server.pm.PackageSetting) $r29;

        $r30 = interfaceinvoke r41.<java.util.Map: java.lang.Object get(java.lang.Object)>(r42);

        r44 = (java.util.List) $r30;

        if r44 == null goto label06;

        $r37 = virtualinvoke r43.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void readPermissionsStateLpr(java.util.List,com.android.server.pm.permission.PermissionsState,int)>(r44, $r37, i0);

        goto label07;

     label06:
        $r31 = r43.<com.android.server.pm.PackageSetting: com.android.server.pm.SharedUserSetting sharedUser>;

        if $r31 != null goto label07;

        if z0 != 0 goto label07;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing permission state for package: ");

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageSettings", $r35);

        $r36 = virtualinvoke r43.<com.android.server.pm.PackageSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        virtualinvoke $r36.<com.android.server.pm.permission.PermissionsState: void setMissing(boolean,int)>(1, i0);

     label07:
        i7 = i7 + 1;

        goto label05;

     label08:
        r46 = virtualinvoke r39.<com.android.permission.persistence.RuntimePermissionsState: java.util.Map getSharedUserPermissions()>();

        $r9 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r10 = $r9.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        i8 = virtualinvoke $r10.<android.util.ArrayMap: int size()>();

        i9 = 0;

     label09:
        if i9 >= i8 goto label12;

        $r11 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r12 = $r11.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        $r13 = virtualinvoke $r12.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i9);

        r48 = (java.lang.String) $r13;

        $r14 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: com.android.server.pm.Settings this$0>;

        $r15 = $r14.<com.android.server.pm.Settings: android.util.ArrayMap mSharedUsers>;

        $r16 = virtualinvoke $r15.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i9);

        r49 = (com.android.server.pm.SharedUserSetting) $r16;

        $r17 = interfaceinvoke r46.<java.util.Map: java.lang.Object get(java.lang.Object)>(r48);

        r50 = (java.util.List) $r17;

        if r50 == null goto label10;

        $r23 = virtualinvoke r49.<com.android.server.pm.SharedUserSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void readPermissionsStateLpr(java.util.List,com.android.server.pm.permission.PermissionsState,int)>(r50, $r23, i0);

        goto label11;

     label10:
        if z0 != 0 goto label11;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing permission state for shared user: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageSettings", $r21);

        $r22 = virtualinvoke r49.<com.android.server.pm.SharedUserSetting: com.android.server.pm.permission.PermissionsState getPermissionsState()>();

        virtualinvoke $r22.<com.android.server.pm.permission.PermissionsState: void setMissing(boolean,int)>(1, i0);

        goto label11;

     label11:
        i9 = i9 + 1;

        goto label09;

     label12:
        return;
    }

    public void setPermissionControllerVersion(long)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        long l0;
        int i1, i2, i3;
        java.lang.String r1, $r3, $r7;
        android.util.SparseArray $r2, $r4, $r5;
        java.lang.Object $r6;
        android.util.SparseBooleanArray $r8;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        $r3 = specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.lang.String getExtendedFingerprint(long)>(l0);

        r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.lang.String mExtendedFingerprint> = $r3;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $r4 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        i2 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i3);

        $r5 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (java.lang.String) $r6;

        $r8 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mPermissionUpgradeNeeded>;

        $r7 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.lang.String mExtendedFingerprint>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r1);

        $z1 = $z0 ^ 1;

        virtualinvoke $r8.<android.util.SparseBooleanArray: void put(int,boolean)>(i2, $z1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    void setVersionLPr(int, int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0, i1;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseIntArray mVersions>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(i1, i0);

        virtualinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void writePermissionsForUserAsyncLPr(int)>(i1);

        return;
    }

    public void updateRuntimePermissionsFingerprintLPr(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        java.lang.String r1;
        java.lang.RuntimeException $r2;
        android.util.SparseArray $r3;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: java.lang.String mExtendedFingerprint>;

        if r1 == null goto label1;

        $r3 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseArray mFingerprints>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        virtualinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void writePermissionsForUserAsyncLPr(int)>(i0);

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("The version of the permission controller hasn\'t been set before trying to update the fingerprint.");

        throw $r2;
    }

    public void writePermissionsForUserAsyncLPr(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        long l1, $l2, $l4, $l5, $l6, l7, l8;
        android.util.SparseBooleanArray $r1, $r5;
        boolean $z0;
        android.util.SparseLongArray $r2, $r7;
        android.os.Handler $r3, $r4, $r6, $r8, $r9, $r10;
        byte $b3;
        android.os.Message $r11, r12, r13;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mWriteScheduled>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int)>(i0);

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(i0);

        $r7 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseLongArray mLastNotWrittenMutationTimesMillis>;

        l7 = virtualinvoke $r7.<android.util.SparseLongArray: long get(int)>(i0);

        $l2 = l1 - l7;

        $b3 = $l2 cmp 2000L;

        if $b3 < 0 goto label1;

        $r10 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int)>(i0);

        virtualinvoke $r11.<android.os.Message: void sendToTarget()>();

        return;

     label1:
        $l4 = 2000L + l7;

        $l5 = $l4 - l1;

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>($l5, 0L);

        l8 = staticinvoke <java.lang.Math: long min(long,long)>(200L, $l6);

        $r8 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        r12 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int)>(i0);

        $r9 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        virtualinvoke $r9.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r12, l8);

        goto label3;

     label2:
        $r2 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseLongArray mLastNotWrittenMutationTimesMillis>;

        virtualinvoke $r2.<android.util.SparseLongArray: void put(int,long)>(i0, l1);

        $r3 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        r13 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(i0);

        $r4 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r13, 200L);

        $r5 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.util.SparseBooleanArray mWriteScheduled>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

     label3:
        return;
    }

    public void writePermissionsForUserSyncLPr(int)
    {
        com.android.server.pm.Settings$RuntimePermissionPersistence r0;
        int i0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.pm.Settings$RuntimePermissionPersistence;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(i0);

        specialinvoke r0.<com.android.server.pm.Settings$RuntimePermissionPersistence: void writePermissionsSync(int)>(i0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.Settings$RuntimePermissionPersistence: long WRITE_PERMISSIONS_DELAY_MILLIS> = 200L;

        <com.android.server.pm.Settings$RuntimePermissionPersistence: int UPGRADE_VERSION> = -1;

        <com.android.server.pm.Settings$RuntimePermissionPersistence: long MAX_WRITE_PERMISSIONS_DELAY_MILLIS> = 2000L;

        <com.android.server.pm.Settings$RuntimePermissionPersistence: int INITIAL_VERSION> = 0;

        return;
    }
}
