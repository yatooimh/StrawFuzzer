public class com.android.server.pm.ShortcutBitmapSaver extends java.lang.Object
{
    private static final boolean ADD_DELAY_BEFORE_SAVE_FOR_TEST;
    private static final boolean DEBUG;
    private static final long SAVE_DELAY_MS_FOR_TEST;
    private static final java.lang.String TAG;
    private final long SAVE_WAIT_TIMEOUT_MS;
    private final java.util.concurrent.Executor mExecutor;
    private final java.util.Deque mPendingItems;
    private final java.lang.Runnable mRunnable;
    private final com.android.server.pm.ShortcutService mService;

    public void <init>(com.android.server.pm.ShortcutService)
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        com.android.server.pm.ShortcutService r1;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.util.concurrent.TimeUnit $r4;
        java.util.concurrent.LinkedBlockingDeque $r5;
        com.android.server.pm._$$Lambda$ShortcutBitmapSaver$AUDgG57FGyGDUVDAjL_7cuiE0pM $r6;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        r1 := @parameter0: com.android.server.pm.ShortcutService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.ShortcutBitmapSaver: long SAVE_WAIT_TIMEOUT_MS> = 30000L;

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(0, 1, 60L, $r4, $r3);

        r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.concurrent.Executor mExecutor> = $r2;

        $r5 = new java.util.concurrent.LinkedBlockingDeque;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingDeque: void <init>()>();

        r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems> = $r5;

        $r6 = new com.android.server.pm._$$Lambda$ShortcutBitmapSaver$AUDgG57FGyGDUVDAjL_7cuiE0pM;

        specialinvoke $r6.<com.android.server.pm._$$Lambda$ShortcutBitmapSaver$AUDgG57FGyGDUVDAjL_7cuiE0pM: void <init>(com.android.server.pm.ShortcutBitmapSaver)>(r0);

        r0.<com.android.server.pm.ShortcutBitmapSaver: java.lang.Runnable mRunnable> = $r6;

        r0.<com.android.server.pm.ShortcutBitmapSaver: com.android.server.pm.ShortcutService mService> = r1;

        return;
    }

    static void lambda$waitForAllSavesLocked$0(java.util.concurrent.CountDownLatch)
    {
        java.util.concurrent.CountDownLatch r0;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        virtualinvoke r0.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;
    }

    private boolean processPendingItems()
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        boolean z0, $z1;
        com.android.server.pm.ShortcutService$FileOutputStreamWithPath r1;
        java.util.Deque $r2, $r3, r18;
        int $i0, $i1;
        java.lang.Object $r4;
        com.android.server.pm.ShortcutService $r5;
        byte[] $r6;
        java.lang.String $r7, $r8, $r9, $r12, $r16;
        java.lang.Throwable $r11, $r13, $r14, $r15;
        android.content.pm.ShortcutInfo r17, r20;
        com.android.server.pm.ShortcutBitmapSaver$PendingItem r19;
        java.io.File r21, r22;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        r17 = null;

     label01:
        r18 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

     label02:
        r17 = null;

     label03:
        entermonitor r18;

     label04:
        $r2 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        $i0 = interfaceinvoke $r2.<java.util.Deque: int size()>();

        if $i0 != 0 goto label07;

        exitmonitor r18;

     label05:
        goto label06;

     label06:
        return 0;

     label07:
        $r3 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object pop()>();

        r19 = (com.android.server.pm.ShortcutBitmapSaver$PendingItem) $r4;

        exitmonitor r18;

     label08:
        r17 = null;

     label09:
        r20 = r19.<com.android.server.pm.ShortcutBitmapSaver$PendingItem: android.content.pm.ShortcutInfo shortcut>;

     label10:
        r17 = r20;

     label11:
        z0 = virtualinvoke r20.<android.content.pm.ShortcutInfo: boolean isIconPendingSave()>();

     label12:
        if z0 != 0 goto label15;

        if r20 == null goto label14;

        $r9 = virtualinvoke r20.<android.content.pm.ShortcutInfo: java.lang.String getBitmapPath()>();

        if $r9 != null goto label13;

        virtualinvoke r0.<com.android.server.pm.ShortcutBitmapSaver: void removeIcon(android.content.pm.ShortcutInfo)>(r20);

     label13:
        virtualinvoke r20.<android.content.pm.ShortcutInfo: void clearFlags(int)>(2048);

     label14:
        return 1;

     label15:
        r21 = null;

        r17 = r20;

     label16:
        $r5 = r0.<com.android.server.pm.ShortcutBitmapSaver: com.android.server.pm.ShortcutService mService>;

        $i1 = virtualinvoke r20.<android.content.pm.ShortcutInfo: int getUserId()>();

        r1 = virtualinvoke $r5.<com.android.server.pm.ShortcutService: com.android.server.pm.ShortcutService$FileOutputStreamWithPath openIconFileForWrite(int,android.content.pm.ShortcutInfo)>($i1, r20);

     label17:
        r21 = null;

        r17 = r20;

     label18:
        r22 = virtualinvoke r1.<com.android.server.pm.ShortcutService$FileOutputStreamWithPath: java.io.File getFile()>();

     label19:
        $r6 = r19.<com.android.server.pm.ShortcutBitmapSaver$PendingItem: byte[] bytes>;

        virtualinvoke r1.<com.android.server.pm.ShortcutService$FileOutputStreamWithPath: void write(byte[])>($r6);

     label20:
        r21 = r22;

        r17 = r20;

     label21:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

     label22:
        r21 = r22;

        r17 = r20;

     label23:
        $r7 = virtualinvoke r22.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke r20.<android.content.pm.ShortcutInfo: void setBitmapPath(java.lang.String)>($r7);

     label24:
        if r20 == null goto label26;

        $r8 = virtualinvoke r20.<android.content.pm.ShortcutInfo: java.lang.String getBitmapPath()>();

        if $r8 != null goto label25;

        virtualinvoke r0.<com.android.server.pm.ShortcutBitmapSaver: void removeIcon(android.content.pm.ShortcutInfo)>(r20);

     label25:
        virtualinvoke r20.<android.content.pm.ShortcutInfo: void clearFlags(int)>(2048);

     label26:
        return 1;

     label27:
        $r14 := @caughtexception;

        r21 = r22;

        r17 = r20;

     label28:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

     label29:
        r21 = r22;

        r17 = r20;

     label30:
        throw $r14;

     label31:
        $r15 := @caughtexception;

        r17 = r20;

     label32:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ShortcutService", "Unable to write bitmap to file", $r15);

     label33:
        if r21 == null goto label37;

        r17 = r20;

     label34:
        $z1 = virtualinvoke r21.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label37;

     label35:
        r17 = r20;

     label36:
        virtualinvoke r21.<java.io.File: boolean delete()>();

     label37:
        if r20 == null goto label39;

        $r16 = virtualinvoke r20.<android.content.pm.ShortcutInfo: java.lang.String getBitmapPath()>();

        if $r16 != null goto label38;

        virtualinvoke r0.<com.android.server.pm.ShortcutBitmapSaver: void removeIcon(android.content.pm.ShortcutInfo)>(r20);

     label38:
        virtualinvoke r20.<android.content.pm.ShortcutInfo: void clearFlags(int)>(2048);

     label39:
        return 1;

     label40:
        $r13 := @caughtexception;

     label41:
        exitmonitor r18;

     label42:
        r17 = null;

     label43:
        throw $r13;

     label44:
        $r11 := @caughtexception;

        if r17 == null goto label46;

        $r12 = virtualinvoke r17.<android.content.pm.ShortcutInfo: java.lang.String getBitmapPath()>();

        if $r12 != null goto label45;

        virtualinvoke r0.<com.android.server.pm.ShortcutBitmapSaver: void removeIcon(android.content.pm.ShortcutInfo)>(r17);

     label45:
        virtualinvoke r17.<android.content.pm.ShortcutInfo: void clearFlags(int)>(2048);

     label46:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label44;
        catch java.lang.Throwable from label03 to label04 with label44;
        catch java.lang.Throwable from label04 to label05 with label40;
        catch java.lang.Throwable from label07 to label08 with label40;
        catch java.lang.Throwable from label09 to label10 with label44;
        catch java.lang.Throwable from label11 to label12 with label44;
        catch java.io.IOException from label16 to label17 with label31;
        catch java.lang.RuntimeException from label16 to label17 with label31;
        catch java.lang.Throwable from label16 to label17 with label44;
        catch java.io.IOException from label18 to label19 with label31;
        catch java.lang.RuntimeException from label18 to label19 with label31;
        catch java.lang.Throwable from label18 to label19 with label44;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.io.IOException from label21 to label22 with label31;
        catch java.lang.RuntimeException from label21 to label22 with label31;
        catch java.lang.Throwable from label21 to label22 with label44;
        catch java.io.IOException from label23 to label24 with label31;
        catch java.lang.RuntimeException from label23 to label24 with label31;
        catch java.lang.Throwable from label23 to label24 with label44;
        catch java.io.IOException from label28 to label29 with label31;
        catch java.lang.RuntimeException from label28 to label29 with label31;
        catch java.lang.Throwable from label28 to label29 with label44;
        catch java.io.IOException from label30 to label31 with label31;
        catch java.lang.RuntimeException from label30 to label31 with label31;
        catch java.lang.Throwable from label30 to label31 with label44;
        catch java.lang.Throwable from label32 to label33 with label44;
        catch java.lang.Throwable from label34 to label35 with label44;
        catch java.lang.Throwable from label36 to label37 with label44;
        catch java.lang.Throwable from label41 to label42 with label40;
        catch java.lang.Throwable from label43 to label44 with label44;
    }

    public void dumpLocked(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        java.lang.String r1, $r10;
        java.util.Deque r2, $r4, $r11;
        int i0;
        java.util.Iterator r3;
        java.util.concurrent.Executor $r8;
        boolean $z0;
        java.lang.Object $r12;
        java.lang.Throwable $r13;
        java.io.PrintWriter r14;
        java.lang.StringBuilder r15;
        com.android.server.pm.ShortcutBitmapSaver$PendingItem r16;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        r14 := @parameter0: java.io.PrintWriter;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        entermonitor r2;

     label1:
        $r4 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        i0 = interfaceinvoke $r4.<java.util.Deque: int size()>();

        virtualinvoke r14.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pending saves: Num=");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Executor=");

        $r8 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.concurrent.Executor mExecutor>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r14.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        r3 = interfaceinvoke $r11.<java.util.Deque: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r16 = (com.android.server.pm.ShortcutBitmapSaver$PendingItem) $r12;

        virtualinvoke r14.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r14.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        virtualinvoke r14.<java.io.PrintWriter: void println(java.lang.Object)>(r16);

     label3:
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r2;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public java.lang.String getBitmapPathMayWaitLocked(android.content.pm.ShortcutInfo)
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        android.content.pm.ShortcutInfo r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        r1 := @parameter0: android.content.pm.ShortcutInfo;

        $z0 = virtualinvoke r0.<com.android.server.pm.ShortcutBitmapSaver: boolean waitForAllSavesLocked()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<android.content.pm.ShortcutInfo: boolean hasIconFile()>();

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r1.<android.content.pm.ShortcutInfo: java.lang.String getBitmapPath()>();

        return $r2;

     label1:
        return null;
    }

    public void lambda$new$1$ShortcutBitmapSaver()
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

     label1:
        $z0 = specialinvoke r0.<com.android.server.pm.ShortcutBitmapSaver: boolean processPendingItems()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        return;
    }

    public void removeIcon(android.content.pm.ShortcutInfo)
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        android.content.pm.ShortcutInfo r1;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        r1 := @parameter0: android.content.pm.ShortcutInfo;

        virtualinvoke r1.<android.content.pm.ShortcutInfo: void setIconResourceId(int)>(0);

        virtualinvoke r1.<android.content.pm.ShortcutInfo: void setIconResName(java.lang.String)>(null);

        virtualinvoke r1.<android.content.pm.ShortcutInfo: void setBitmapPath(java.lang.String)>(null);

        virtualinvoke r1.<android.content.pm.ShortcutInfo: void setIconUri(java.lang.String)>(null);

        virtualinvoke r1.<android.content.pm.ShortcutInfo: void clearFlags(int)>(35340);

        return;
    }

    public void saveBitmapLocked(android.content.pm.ShortcutInfo, int, android.graphics.Bitmap$CompressFormat, int)
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        int i0, i1, $i2;
        android.graphics.drawable.Icon r1;
        android.graphics.Bitmap r2, r26;
        android.os.StrictMode$ThreadPolicy r3, $r7;
        java.io.ByteArrayOutputStream r4;
        android.os.StrictMode$ThreadPolicy$Builder $r6, r25;
        boolean $z0;
        com.android.server.pm.ShortcutBitmapSaver$PendingItem $r8;
        java.util.Deque $r9, r29;
        java.lang.Runnable $r10;
        java.util.concurrent.Executor $r11;
        java.lang.StringBuilder $r12;
        java.lang.String $r15;
        java.lang.Throwable $r16, $r17, $r18, $r19, $r20, $r21;
        android.content.pm.ShortcutInfo r22;
        android.graphics.Bitmap$CompressFormat r23;
        byte[] r27;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        r22 := @parameter0: android.content.pm.ShortcutInfo;

        i0 := @parameter1: int;

        r23 := @parameter2: android.graphics.Bitmap$CompressFormat;

        i1 := @parameter3: int;

        r1 = virtualinvoke r22.<android.content.pm.ShortcutInfo: android.graphics.drawable.Icon getIcon()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        r2 = virtualinvoke r1.<android.graphics.drawable.Icon: android.graphics.Bitmap getBitmap()>();

        if r2 != null goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing icon: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ShortcutService", $r15);

        return;

     label01:
        r3 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>();

     label02:
        r25 = new android.os.StrictMode$ThreadPolicy$Builder;

        specialinvoke r25.<android.os.StrictMode$ThreadPolicy$Builder: void <init>(android.os.StrictMode$ThreadPolicy)>(r3);

        $r6 = virtualinvoke r25.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder permitCustomSlowCalls()>();

        $r7 = virtualinvoke $r6.<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>();

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>($r7);

        r26 = staticinvoke <com.android.server.pm.ShortcutService: android.graphics.Bitmap shrinkBitmap(android.graphics.Bitmap,int)>(r2, i0);

     label03:
        r4 = new java.io.ByteArrayOutputStream;

        specialinvoke r4.<java.io.ByteArrayOutputStream: void <init>(int)>(65536);

     label04:
        $z0 = virtualinvoke r26.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>(r23, i1, r4);

        if $z0 != 0 goto label05;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("ShortcutService", "Unable to compress bitmap");

     label05:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void flush()>();

        r27 = virtualinvoke r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r4.<java.io.ByteArrayOutputStream: void close()>();

     label06:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void close()>();

     label07:
        if r26 == r2 goto label09;

     label08:
        virtualinvoke r26.<android.graphics.Bitmap: void recycle()>();

     label09:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        virtualinvoke r22.<android.content.pm.ShortcutInfo: void addFlags(int)>(2056);

        $i2 = virtualinvoke r1.<android.graphics.drawable.Icon: int getType()>();

        if $i2 != 5 goto label10;

        virtualinvoke r22.<android.content.pm.ShortcutInfo: void addFlags(int)>(512);

     label10:
        $r8 = new com.android.server.pm.ShortcutBitmapSaver$PendingItem;

        specialinvoke $r8.<com.android.server.pm.ShortcutBitmapSaver$PendingItem: void <init>(android.content.pm.ShortcutInfo,byte[],com.android.server.pm.ShortcutBitmapSaver$1)>(r22, r27, null);

        r29 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        entermonitor r29;

     label11:
        $r9 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.Deque mPendingItems>;

        interfaceinvoke $r9.<java.util.Deque: boolean add(java.lang.Object)>($r8);

        exitmonitor r29;

     label12:
        $r11 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.concurrent.Executor mExecutor>;

        $r10 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.lang.Runnable mRunnable>;

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r10);

        return;

     label13:
        $r21 := @caughtexception;

     label14:
        exitmonitor r29;

     label15:
        throw $r21;

     label16:
        $r18 := @caughtexception;

     label17:
        virtualinvoke r4.<java.io.ByteArrayOutputStream: void close()>();

     label18:
        goto label21;

     label19:
        $r16 := @caughtexception;

     label20:
        virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

     label21:
        throw $r18;

     label22:
        $r17 := @caughtexception;

        if r26 == r2 goto label24;

     label23:
        virtualinvoke r26.<android.graphics.Bitmap: void recycle()>();

     label24:
        throw $r17;

     label25:
        $r20 := @caughtexception;

        goto label29;

     label26:
        $r19 := @caughtexception;

     label27:
        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("ShortcutService", "Unable to write bitmap to file", $r19);

     label28:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        return;

     label29:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r3);

        throw $r20;

        catch java.io.IOException from label02 to label03 with label26;
        catch java.lang.RuntimeException from label02 to label03 with label26;
        catch java.lang.OutOfMemoryError from label02 to label03 with label26;
        catch java.lang.Throwable from label02 to label03 with label25;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label06 to label07 with label22;
        catch java.io.IOException from label08 to label09 with label26;
        catch java.lang.RuntimeException from label08 to label09 with label26;
        catch java.lang.OutOfMemoryError from label08 to label09 with label26;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
        catch java.io.IOException from label23 to label24 with label26;
        catch java.lang.RuntimeException from label23 to label24 with label26;
        catch java.lang.OutOfMemoryError from label23 to label24 with label26;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.io.IOException from label24 to label25 with label26;
        catch java.lang.RuntimeException from label24 to label25 with label26;
        catch java.lang.OutOfMemoryError from label24 to label25 with label26;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label27 to label28 with label25;
    }

    public boolean waitForAllSavesLocked()
    {
        com.android.server.pm.ShortcutBitmapSaver r0;
        java.util.concurrent.CountDownLatch $r1;
        com.android.server.pm._$$Lambda$ShortcutBitmapSaver$xgjvZfaiKXavxgGCSta_eIdVBnk $r2;
        java.util.concurrent.Executor $r3;
        java.util.concurrent.TimeUnit $r4;
        boolean $z0;
        com.android.server.pm.ShortcutService $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.pm.ShortcutBitmapSaver;

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r3 = r0.<com.android.server.pm.ShortcutBitmapSaver: java.util.concurrent.Executor mExecutor>;

        $r2 = new com.android.server.pm._$$Lambda$ShortcutBitmapSaver$xgjvZfaiKXavxgGCSta_eIdVBnk;

        specialinvoke $r2.<com.android.server.pm._$$Lambda$ShortcutBitmapSaver$xgjvZfaiKXavxgGCSta_eIdVBnk: void <init>(java.util.concurrent.CountDownLatch)>($r1);

        interfaceinvoke $r3.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r2);

     label1:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(30000L, $r4);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        $r5 = r0.<com.android.server.pm.ShortcutBitmapSaver: com.android.server.pm.ShortcutService mService>;

        virtualinvoke $r5.<com.android.server.pm.ShortcutService: void wtf(java.lang.String)>("Timed out waiting on saving bitmaps.");

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ShortcutService", "interrupted");

     label6:
        return 0;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.ShortcutBitmapSaver: java.lang.String TAG> = "ShortcutService";

        <com.android.server.pm.ShortcutBitmapSaver: long SAVE_DELAY_MS_FOR_TEST> = 1000L;

        <com.android.server.pm.ShortcutBitmapSaver: boolean DEBUG> = 0;

        <com.android.server.pm.ShortcutBitmapSaver: boolean ADD_DELAY_BEFORE_SAVE_FOR_TEST> = 0;

        return;
    }
}
