class com.android.server.pm.ShortcutPackageInfo extends java.lang.Object
{
    private static final java.lang.String ATTR_BACKUP_ALLOWED;
    private static final java.lang.String ATTR_BACKUP_ALLOWED_INITIALIZED;
    private static final java.lang.String ATTR_BACKUP_SOURCE_BACKUP_ALLOWED;
    private static final java.lang.String ATTR_BACKUP_SOURCE_VERSION;
    private static final java.lang.String ATTR_LAST_UPDATE_TIME;
    private static final java.lang.String ATTR_SHADOW;
    private static final java.lang.String ATTR_SIGNATURE_HASH;
    private static final java.lang.String ATTR_VERSION;
    private static final java.lang.String TAG;
    static final java.lang.String TAG_ROOT;
    private static final java.lang.String TAG_SIGNATURE;
    private boolean mBackupAllowed;
    private boolean mBackupAllowedInitialized;
    private boolean mBackupSourceBackupAllowed;
    private long mBackupSourceVersionCode;
    private boolean mIsShadow;
    private long mLastUpdateTime;
    private java.util.ArrayList mSigHashes;
    private long mVersionCode;

    private void <init>(long, long, java.util.ArrayList, boolean)
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        long l0, l1;
        java.util.ArrayList r1;
        boolean z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.util.ArrayList;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode> = -1L;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode> = -1L;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode> = l0;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mLastUpdateTime> = l1;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow> = z0;

        r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes> = r1;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowed> = 0;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed> = 0;

        return;
    }

    public static com.android.server.pm.ShortcutPackageInfo generateForInstalledPackageForTest(com.android.server.pm.ShortcutService, java.lang.String, int)
    {
        int i0;
        android.content.pm.SigningInfo r0;
        com.android.server.pm.ShortcutPackageInfo $r1;
        long $l1, $l2, $l3;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, r8;
        com.android.server.pm.ShortcutService r7;
        android.content.pm.PackageInfo r9;
        android.content.pm.Signature[] r11;

        r7 := @parameter0: com.android.server.pm.ShortcutService;

        r8 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r9 = virtualinvoke r7.<com.android.server.pm.ShortcutService: android.content.pm.PackageInfo getPackageInfoWithSignatures(java.lang.String,int)>(r8, i0);

        r0 = r9.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo>;

        if r0 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t get signatures: package=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ShortcutService", $r6);

        return null;

     label1:
        r11 = virtualinvoke r0.<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>();

        $r1 = new com.android.server.pm.ShortcutPackageInfo;

        $l1 = virtualinvoke r9.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $l2 = r9.<android.content.pm.PackageInfo: long lastUpdateTime>;

        $r2 = staticinvoke <com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(android.content.pm.Signature[])>(r11);

        specialinvoke $r1.<com.android.server.pm.ShortcutPackageInfo: void <init>(long,long,java.util.ArrayList,boolean)>($l1, $l2, $r2, 0);

        $z0 = staticinvoke <com.android.server.pm.ShortcutService: boolean shouldBackupApp(android.content.pm.PackageInfo)>(r9);

        $r1.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed> = $z0;

        $l3 = virtualinvoke r9.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $r1.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode> = $l3;

        return $r1;
    }

    public static com.android.server.pm.ShortcutPackageInfo newEmpty()
    {
        com.android.server.pm.ShortcutPackageInfo $r0;
        java.util.ArrayList $r1;

        $r0 = new com.android.server.pm.ShortcutPackageInfo;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(0);

        specialinvoke $r0.<com.android.server.pm.ShortcutPackageInfo: void <init>(long,long,java.util.ArrayList,boolean)>(-1L, 0L, $r1, 0);

        return $r0;
    }

    public int canRestoreTo(com.android.server.pm.ShortcutService, android.content.pm.PackageInfo, boolean)
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        android.content.pm.PackageInfo r1;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object $r2;
        java.util.ArrayList $r3;
        long $l1, $l2, $l4, $l5;
        byte $b3;
        java.lang.Object[] $r4;
        java.lang.Long $r5, $r6;
        java.lang.String $r7;
        com.android.server.pm.ShortcutService r8;
        android.content.pm.PackageManagerInternal r9;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        r8 := @parameter0: com.android.server.pm.ShortcutService;

        r1 := @parameter1: android.content.pm.PackageInfo;

        z0 := @parameter2: boolean;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Landroid/content/pm/PackageManagerInternal;");

        r9 = (android.content.pm.PackageManagerInternal) $r2;

        $r3 = r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes>;

        $z1 = staticinvoke <com.android.server.backup.BackupUtils: boolean signaturesMatch(java.util.ArrayList,android.content.pm.PackageInfo,android.content.pm.PackageManagerInternal)>($r3, r1, r9);

        if $z1 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ShortcutService", "Can\'t restore: Package signature mismatch");

        return 102;

     label1:
        $z2 = staticinvoke <com.android.server.pm.ShortcutService: boolean shouldBackupApp(android.content.pm.PackageInfo)>(r1);

        if $z2 == 0 goto label4;

        $z3 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed>;

        if $z3 != 0 goto label2;

        goto label4;

     label2:
        if z0 != 0 goto label3;

        $l1 = virtualinvoke r1.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $l2 = r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode>;

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label3;

        $r4 = newarray (java.lang.Object)[2];

        $l4 = virtualinvoke r1.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r4[0] = $r5;

        $l5 = r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r4[1] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can\'t restore: package current version %d < backed up version %d", $r4);

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ShortcutService", $r7);

        return 100;

     label3:
        return 0;

     label4:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ShortcutService", "Can\'t restore: package didn\'t or doesn\'t allow backup");

        return 101;
    }

    public void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        java.util.ArrayList $r3, $r8;
        java.lang.Object $r4;
        byte[] $r5;
        char[] $r6;
        int i5, $i6;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("PackageInfo:");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  IsShadow: ");

        $z0 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z0);

        $z1 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow>;

        if $z1 == 0 goto label1;

        r7 = " (not installed)";

        goto label2;

     label1:
        r7 = " (installed)";

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r7);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Version: ");

        $l0 = r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l0);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $z2 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowedInitialized>;

        if $z2 == 0 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Backup Allowed: ");

        $z4 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowed>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z4);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label3:
        $l1 = r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label4;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Backup source version: ");

        $l4 = r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l4);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Backup source backup allowed: ");

        $z3 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed>;

        virtualinvoke r1.<java.io.PrintWriter: void print(boolean)>($z3);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

     label4:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  Last package update time: ");

        $l3 = r0.<com.android.server.pm.ShortcutPackageInfo: long mLastUpdateTime>;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l3);

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        i5 = 0;

     label5:
        $r8 = r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes>;

        $i6 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i5 >= $i6 goto label6;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("SigHash: ");

        $r3 = r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r5 = (byte[]) $r4;

        $r6 = staticinvoke <libcore.util.HexEncoding: char[] encode(byte[])>($r5);

        virtualinvoke r1.<java.io.PrintWriter: void println(char[])>($r6);

        i5 = i5 + 1;

        goto label5;

     label6:
        return;
    }

    public long getBackupSourceVersionCode()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        long $l0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $l0 = r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode>;

        return $l0;
    }

    public long getLastUpdateTime()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        long $l0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $l0 = r0.<com.android.server.pm.ShortcutPackageInfo: long mLastUpdateTime>;

        return $l0;
    }

    public long getVersionCode()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        long $l0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $l0 = r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode>;

        return $l0;
    }

    public boolean hasSignatures()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        java.util.ArrayList $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $r1 = r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isBackupAllowed()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $z0 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowed>;

        return $z0;
    }

    public boolean isBackupSourceBackupAllowed()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $z0 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed>;

        return $z0;
    }

    public boolean isShadow()
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        $z0 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow>;

        return $z0;
    }

    public void loadFromXml(org.xmlpull.v1.XmlPullParser, boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        org.xmlpull.v1.XmlPullParser r1;
        boolean z0, z1, z2, $z3, $z5, z6;
        long l0, l1, l2;
        int i3, i4, $i5, $i6, $i7, i8;
        java.util.Base64$Decoder $r3;
        byte[] $r4;
        java.util.ArrayList $r5;
        java.lang.String r6, r7;
        byte b9;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        z0 := @parameter1: boolean;

        l0 = staticinvoke <com.android.server.pm.ShortcutService: long parseLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "version", -1L);

        l1 = staticinvoke <com.android.server.pm.ShortcutService: long parseLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "last_udpate_time");

        if z0 != 0 goto label02;

        $z5 = staticinvoke <com.android.server.pm.ShortcutService: boolean parseBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "shadow");

        if $z5 == 0 goto label01;

        goto label02;

     label01:
        z6 = 0;

        goto label03;

     label02:
        z6 = 1;

     label03:
        l2 = staticinvoke <com.android.server.pm.ShortcutService: long parseLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,long)>(r1, "bk_src_version", -1L);

        z1 = staticinvoke <com.android.server.pm.ShortcutService: boolean parseBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r1, "allow-backup", 1);

        z2 = staticinvoke <com.android.server.pm.ShortcutService: boolean parseBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r1, "bk_src_backup-allowed", 1);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label04:
        i8 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i8 == 1 goto label14;

        if i8 != 3 goto label06;

        $i7 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i7 <= i3 goto label05;

        goto label06;

     label05:
        goto label14;

     label06:
        if i8 == 2 goto label07;

        goto label04;

     label07:
        i4 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $i5 = i3 + 1;

        if i4 != $i5 goto label13;

        $i6 = virtualinvoke r6.<java.lang.String: int hashCode()>();

        if $i6 == 1073584312 goto label09;

     label08:
        goto label10;

     label09:
        $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("signature");

        if $z3 == 0 goto label08;

        b9 = 0;

        goto label11;

     label10:
        b9 = -1;

     label11:
        if b9 == 0 goto label12;

        goto label13;

     label12:
        r7 = staticinvoke <com.android.server.pm.ShortcutService: java.lang.String parseStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "hash");

        $r3 = staticinvoke <java.util.Base64: java.util.Base64$Decoder getDecoder()>();

        $r4 = virtualinvoke $r3.<java.util.Base64$Decoder: byte[] decode(java.lang.String)>(r7);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label04;

     label13:
        staticinvoke <com.android.server.pm.ShortcutService: void warnForInvalidTag(int,java.lang.String)>(i4, r6);

        goto label04;

     label14:
        if z0 == 0 goto label15;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode> = -1L;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode> = l0;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed> = z1;

        goto label16;

     label15:
        r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode> = l0;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode> = l2;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed> = z2;

     label16:
        r0.<com.android.server.pm.ShortcutPackageInfo: long mLastUpdateTime> = l1;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow> = z6;

        r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes> = $r5;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowed> = 0;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowedInitialized> = 0;

        return;
    }

    public void refreshSignature(com.android.server.pm.ShortcutService, com.android.server.pm.ShortcutPackageItem)
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        com.android.server.pm.ShortcutPackageItem r1;
        boolean $z0;
        java.lang.String $r3, $r8, $r11, $r14, $r16, $r19, $r23;
        int $i0, $i3;
        android.content.pm.Signature[] $r4;
        java.util.ArrayList $r5;
        java.lang.StringBuilder $r6, $r12, $r17;
        com.android.server.pm.ShortcutService r24;
        android.content.pm.PackageInfo r25;
        android.content.pm.SigningInfo r27;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        r24 := @parameter0: com.android.server.pm.ShortcutService;

        r1 := @parameter1: com.android.server.pm.ShortcutPackageItem;

        $z0 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow>;

        if $z0 == 0 goto label1;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to refresh package info for shadow package ");

        $r19 = virtualinvoke r1.<com.android.server.pm.ShortcutPackageItem: java.lang.String getPackageName()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", user=");

        $i3 = virtualinvoke r1.<com.android.server.pm.ShortcutPackageItem: int getOwnerUserId()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r24.<com.android.server.pm.ShortcutService: void wtf(java.lang.String)>($r23);

        return;

     label1:
        $r3 = virtualinvoke r1.<com.android.server.pm.ShortcutPackageItem: java.lang.String getPackageName()>();

        $i0 = virtualinvoke r1.<com.android.server.pm.ShortcutPackageItem: int getPackageUserId()>();

        r25 = virtualinvoke r24.<com.android.server.pm.ShortcutService: android.content.pm.PackageInfo getPackageInfoWithSignatures(java.lang.String,int)>($r3, $i0);

        if r25 != null goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found: ");

        $r14 = virtualinvoke r1.<com.android.server.pm.ShortcutPackageItem: java.lang.String getPackageName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ShortcutService", $r16);

        return;

     label2:
        r27 = r25.<android.content.pm.PackageInfo: android.content.pm.SigningInfo signingInfo>;

        if r27 != null goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not refreshing signature for ");

        $r8 = virtualinvoke r1.<com.android.server.pm.ShortcutPackageItem: java.lang.String getPackageName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" since it appears to have no signing info.");

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ShortcutService", $r11);

        return;

     label3:
        $r4 = virtualinvoke r27.<android.content.pm.SigningInfo: android.content.pm.Signature[] getApkContentsSigners()>();

        $r5 = staticinvoke <com.android.server.backup.BackupUtils: java.util.ArrayList hashSignatureArray(android.content.pm.Signature[])>($r4);

        r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes> = $r5;

        return;
    }

    public void saveToXml(com.android.server.pm.ShortcutService, org.xmlpull.v1.XmlSerializer, boolean) throws java.io.IOException
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        com.android.server.pm.ShortcutService r1;
        org.xmlpull.v1.XmlSerializer r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Base64$Encoder $r6;
        java.util.ArrayList $r7, $r12;
        java.lang.Object $r8;
        byte[] $r9;
        java.lang.String $r10;
        long $l0, $l1, $l2;
        int i3, $i4;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        r1 := @parameter0: com.android.server.pm.ShortcutService;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $z1 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowedInitialized>;

        if $z1 != 0 goto label1;

        virtualinvoke r1.<com.android.server.pm.ShortcutService: void wtf(java.lang.String)>("Backup happened before mBackupAllowed is initialized.");

     label1:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "package-info");

        $l0 = r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "version", $l0);

        $l1 = r0.<com.android.server.pm.ShortcutPackageInfo: long mLastUpdateTime>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "last_udpate_time", $l1);

        $z2 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "shadow", $z2);

        $z3 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowed>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "allow-backup", $z3);

        $z4 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowedInitialized>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "allow-backup-initialized", $z4);

        $l2 = r0.<com.android.server.pm.ShortcutPackageInfo: long mBackupSourceVersionCode>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r2, "bk_src_version", $l2);

        $z5 = r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupSourceBackupAllowed>;

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r2, "bk_src_backup-allowed", $z5);

        i3 = 0;

     label2:
        $r12 = r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes>;

        $i4 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if i3 >= $i4 goto label3;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "signature");

        $r6 = staticinvoke <java.util.Base64: java.util.Base64$Encoder getEncoder()>();

        $r7 = r0.<com.android.server.pm.ShortcutPackageInfo: java.util.ArrayList mSigHashes>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r9 = (byte[]) $r8;

        $r10 = virtualinvoke $r6.<java.util.Base64$Encoder: java.lang.String encodeToString(byte[])>($r9);

        staticinvoke <com.android.server.pm.ShortcutService: void writeAttr(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.CharSequence)>(r2, "hash", $r10);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "signature");

        i3 = i3 + 1;

        goto label2;

     label3:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "package-info");

        return;
    }

    public void setShadow(boolean)
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        boolean z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        z0 := @parameter0: boolean;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mIsShadow> = z0;

        return;
    }

    public void updateFromPackageInfo(android.content.pm.PackageInfo)
    {
        com.android.server.pm.ShortcutPackageInfo r0;
        android.content.pm.PackageInfo r1;
        long $l0, $l1;
        boolean $z0;

        r0 := @this: com.android.server.pm.ShortcutPackageInfo;

        r1 := @parameter0: android.content.pm.PackageInfo;

        if r1 == null goto label1;

        $l0 = virtualinvoke r1.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        r0.<com.android.server.pm.ShortcutPackageInfo: long mVersionCode> = $l0;

        $l1 = r1.<android.content.pm.PackageInfo: long lastUpdateTime>;

        r0.<com.android.server.pm.ShortcutPackageInfo: long mLastUpdateTime> = $l1;

        $z0 = staticinvoke <com.android.server.pm.ShortcutService: boolean shouldBackupApp(android.content.pm.PackageInfo)>(r1);

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowed> = $z0;

        r0.<com.android.server.pm.ShortcutPackageInfo: boolean mBackupAllowedInitialized> = 1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.ShortcutPackageInfo: java.lang.String TAG_SIGNATURE> = "signature";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String TAG_ROOT> = "package-info";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String TAG> = "ShortcutService";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_VERSION> = "version";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_SIGNATURE_HASH> = "hash";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_SHADOW> = "shadow";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_LAST_UPDATE_TIME> = "last_udpate_time";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_BACKUP_SOURCE_VERSION> = "bk_src_version";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_BACKUP_SOURCE_BACKUP_ALLOWED> = "bk_src_backup-allowed";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_BACKUP_ALLOWED_INITIALIZED> = "allow-backup-initialized";

        <com.android.server.pm.ShortcutPackageInfo: java.lang.String ATTR_BACKUP_ALLOWED> = "allow-backup";

        return;
    }
}
